// Generated by dart2js (fast startup emitter, strong), the Dart to JavaScript compiler version: 2.3.0-dev.0.5.
// The code supports the following hooks:
// dartPrint(message):
//    if this function is defined it is called instead of the Dart [print]
//    method.
//
// dartMainRunner(main, args):
//    if this function is defined, the Dart [main] method will not be invoked
//    directly. Instead, a closure that will invoke [main], and its arguments
//    [args] is passed to [dartMainRunner].
//
// dartDeferredLibraryLoader(uri, successCallback, errorCallback):
//    if this function is defined, it will be called when a deferred library
//    is loaded. It should load and eval the javascript of `uri`, and call
//    successCallback. If it fails to do so, it should call errorCallback with
//    an error.
//
// dartCallInstrumentation(id, qualifiedName):
//    if this function is defined, it will be called at each entry of a
//    method or constructor. Used only when compiling programs with
//    --experiment-call-instrumentation.
//
// defaultPackagesBase:
//    Override the location where `package:` uris are resolved from. By default
//    they are resolved under "packages/" from the current window location.
{
}
(function dartProgram() {
  function copyProperties(from, to) {
    var keys = Object.keys(from);
    for (var i = 0; i < keys.length; i++) {
      var key = keys[i];
      to[key] = from[key];
    }
  }
  var supportsDirectProtoAccess = function() {
    var cls = function() {
    };
    cls.prototype = {p: {}};
    var object = new cls();
    if (!(object.__proto__ && object.__proto__.p === cls.prototype.p))
      return false;
    try {
      if (typeof navigator != "undefined" && typeof navigator.userAgent == "string" && navigator.userAgent.indexOf("Chrome/") >= 0)
        return true;
      if (typeof version == "function" && version.length == 0) {
        var v = version();
        if (/^\d+\.\d+\.\d+\.\d+$/.test(v))
          return true;
      }
    } catch (_) {
    }
    return false;
  }();
  function setFunctionNamesIfNecessary(holders) {
    function t() {
    }
    ;
    if (typeof t.name == "string")
      return;
    for (var i = 0; i < holders.length; i++) {
      var holder = holders[i];
      var keys = Object.keys(holder);
      for (var j = 0; j < keys.length; j++) {
        var key = keys[j];
        var f = holder[key];
        if (typeof f == 'function')
          f.name = key;
      }
    }
  }
  function inherit(cls, sup) {
    cls.prototype.constructor = cls;
    cls.prototype["$is" + cls.name] = cls;
    if (sup != null) {
      if (supportsDirectProtoAccess) {
        cls.prototype.__proto__ = sup.prototype;
        return;
      }
      var clsPrototype = Object.create(sup.prototype);
      copyProperties(cls.prototype, clsPrototype);
      cls.prototype = clsPrototype;
    }
  }
  function inheritMany(sup, classes) {
    for (var i = 0; i < classes.length; i++)
      inherit(classes[i], sup);
  }
  function mixin(cls, mixin) {
    copyProperties(mixin.prototype, cls.prototype);
    cls.prototype.constructor = cls;
  }
  function lazy(holder, name, getterName, initializer) {
    var uninitializedSentinel = holder;
    holder[name] = uninitializedSentinel;
    holder[getterName] = function() {
      holder[getterName] = function() {
        H.throwCyclicInit(name);
      };
      var result;
      var sentinelInProgress = initializer;
      try {
        if (holder[name] === uninitializedSentinel) {
          result = holder[name] = sentinelInProgress;
          result = holder[name] = initializer();
        } else
          result = holder[name];
      } finally {
        if (result === sentinelInProgress)
          holder[name] = null;
        holder[getterName] = function() {
          return this[name];
        };
      }
      return result;
    };
  }
  function makeConstList(list) {
    list.immutable$list = Array;
    list.fixed$length = Array;
    return list;
  }
  function convertToFastObject(properties) {
    function t() {
    }
    t.prototype = properties;
    new t();
    return properties;
  }
  function convertAllToFastObject(arrayOfObjects) {
    for (var i = 0; i < arrayOfObjects.length; ++i)
      convertToFastObject(arrayOfObjects[i]);
  }
  var functionCounter = 0;
  function tearOffGetter(funcs, applyTrampolineIndex, reflectionInfo, name, isIntercepted) {
    return isIntercepted ? new Function("funcs", "applyTrampolineIndex", "reflectionInfo", "name", "H", "c", "return function tearOff_" + name + functionCounter++ + "(receiver) {" + "if (c === null) c = " + "H.closureFromTearOff" + "(" + "this, funcs, applyTrampolineIndex, reflectionInfo, false, true, name);" + "return new c(this, funcs[0], receiver, name);" + "}")(funcs, applyTrampolineIndex, reflectionInfo, name, H, null) : new Function("funcs", "applyTrampolineIndex", "reflectionInfo", "name", "H", "c", "return function tearOff_" + name + functionCounter++ + "() {" + "if (c === null) c = " + "H.closureFromTearOff" + "(" + "this, funcs, applyTrampolineIndex, reflectionInfo, false, false, name);" + "return new c(this, funcs[0], null, name);" + "}")(funcs, applyTrampolineIndex, reflectionInfo, name, H, null);
  }
  function tearOff(funcs, applyTrampolineIndex, reflectionInfo, isStatic, name, isIntercepted) {
    var cache = null;
    return isStatic ? function() {
      if (cache === null)
        cache = H.closureFromTearOff(this, funcs, applyTrampolineIndex, reflectionInfo, true, false, name).prototype;
      return cache;
    } : tearOffGetter(funcs, applyTrampolineIndex, reflectionInfo, name, isIntercepted);
  }
  var typesOffset = 0;
  function installTearOff(container, getterName, isStatic, isIntercepted, requiredParameterCount, optionalParameterDefaultValues, callNames, funsOrNames, funType, applyIndex) {
    var funs = [];
    for (var i = 0; i < funsOrNames.length; i++) {
      var fun = funsOrNames[i];
      if (typeof fun == 'string')
        fun = container[fun];
      fun.$callName = callNames[i];
      funs.push(fun);
    }
    var fun = funs[0];
    fun.$requiredArgCount = requiredParameterCount;
    fun.$defaultValues = optionalParameterDefaultValues;
    var reflectionInfo = funType;
    if (typeof reflectionInfo == "number")
      reflectionInfo = reflectionInfo + typesOffset;
    var name = funsOrNames[0];
    fun.$stubName = name;
    var getterFunction = tearOff(funs, applyIndex || 0, reflectionInfo, isStatic, name, isIntercepted);
    container[getterName] = getterFunction;
    if (isStatic)
      fun.$tearOff = getterFunction;
  }
  function installStaticTearOff(container, getterName, requiredParameterCount, optionalParameterDefaultValues, callNames, funsOrNames, funType, applyIndex) {
    return installTearOff(container, getterName, true, false, requiredParameterCount, optionalParameterDefaultValues, callNames, funsOrNames, funType, applyIndex);
  }
  function installInstanceTearOff(container, getterName, isIntercepted, requiredParameterCount, optionalParameterDefaultValues, callNames, funsOrNames, funType, applyIndex) {
    return installTearOff(container, getterName, false, isIntercepted, requiredParameterCount, optionalParameterDefaultValues, callNames, funsOrNames, funType, applyIndex);
  }
  function setOrUpdateInterceptorsByTag(newTags) {
    var tags = init.interceptorsByTag;
    if (!tags) {
      init.interceptorsByTag = newTags;
      return;
    }
    copyProperties(newTags, tags);
  }
  function setOrUpdateLeafTags(newTags) {
    var tags = init.leafTags;
    if (!tags) {
      init.leafTags = newTags;
      return;
    }
    copyProperties(newTags, tags);
  }
  function updateTypes(newTypes) {
    var types = init.types;
    var length = types.length;
    types.push.apply(types, newTypes);
    return length;
  }
  function updateHolder(holder, newHolder) {
    copyProperties(newHolder, holder);
    return holder;
  }
  var hunkHelpers = function() {
    var mkInstance = function(isIntercepted, requiredParameterCount, optionalParameterDefaultValues, callNames, applyIndex) {
        return function(container, getterName, name, funType) {
          return installInstanceTearOff(container, getterName, isIntercepted, requiredParameterCount, optionalParameterDefaultValues, callNames, [name], funType, applyIndex);
        };
      },
      mkStatic = function(requiredParameterCount, optionalParameterDefaultValues, callNames, applyIndex) {
        return function(container, getterName, name, funType) {
          return installStaticTearOff(container, getterName, requiredParameterCount, optionalParameterDefaultValues, callNames, [name], funType, applyIndex);
        };
      };
    return {inherit: inherit, inheritMany: inheritMany, mixin: mixin, installStaticTearOff: installStaticTearOff, installInstanceTearOff: installInstanceTearOff, _instance_0u: mkInstance(0, 0, null, ["call$0"], 0), _instance_1u: mkInstance(0, 1, null, ["call$1"], 0), _instance_2u: mkInstance(0, 2, null, ["call$2"], 0), _instance_0i: mkInstance(1, 0, null, ["call$0"], 0), _instance_1i: mkInstance(1, 1, null, ["call$1"], 0), _instance_2i: mkInstance(1, 2, null, ["call$2"], 0), _static_0: mkStatic(0, null, ["call$0"], 0), _static_1: mkStatic(1, null, ["call$1"], 0), _static_2: mkStatic(2, null, ["call$2"], 0), makeConstList: makeConstList, lazy: lazy, updateHolder: updateHolder, convertToFastObject: convertToFastObject, setFunctionNamesIfNecessary: setFunctionNamesIfNecessary, updateTypes: updateTypes, setOrUpdateInterceptorsByTag: setOrUpdateInterceptorsByTag, setOrUpdateLeafTags: setOrUpdateLeafTags};
  }();
  function initializeDeferredHunk(hunk) {
    typesOffset = init.types.length;
    hunk(hunkHelpers, init, holders, $);
  }
  function getGlobalFromName(name) {
    for (var i = 0; i < holders.length; i++) {
      if (holders[i] == C)
        continue;
      if (holders[i][name])
        return holders[i][name];
    }
  }
  var C = {},
  H = {JS_CONST: function JS_CONST() {
    },
    CastIterable_CastIterable: function(source, $S, $T) {
      H.assertSubtype(source, "$isIterable", [$S], "$asIterable");
      if (H.checkSubtype(source, "$isEfficientLengthIterable", [$S], "$asEfficientLengthIterable"))
        return new H._EfficientLengthCastIterable(source, [$S, $T]);
      return new H.CastIterable(source, [$S, $T]);
    },
    hexDigitValue: function(char) {
      var letter,
        digit = char ^ 48;
      if (digit <= 9)
        return digit;
      letter = char | 32;
      if (97 <= letter && letter <= 102)
        return letter - 87;
      return -1;
    },
    SubListIterable$: function(_iterable, _start, _endOrLength, $E) {
      P.RangeError_checkNotNegative(_start, "start");
      if (_endOrLength != null) {
        P.RangeError_checkNotNegative(_endOrLength, "end");
        if (_start > _endOrLength)
          H.throwExpression(P.RangeError$range(_start, 0, _endOrLength, "start", null));
      }
      return new H.SubListIterable(_iterable, _start, _endOrLength, [$E]);
    },
    MappedIterable_MappedIterable: function(iterable, $function, $S, $T) {
      H.assertSubtype(iterable, "$isIterable", [$S], "$asIterable");
      H.functionTypeCheck($function, {func: 1, ret: $T, args: [$S]});
      if (!!J.getInterceptor$(iterable).$isEfficientLengthIterable)
        return new H.EfficientLengthMappedIterable(iterable, $function, [$S, $T]);
      return new H.MappedIterable(iterable, $function, [$S, $T]);
    },
    TakeIterable_TakeIterable: function(iterable, takeCount, $E) {
      H.assertSubtype(iterable, "$isIterable", [$E], "$asIterable");
      P.RangeError_checkNotNegative(takeCount, "takeCount");
      if (!!J.getInterceptor$(iterable).$isEfficientLengthIterable)
        return new H.EfficientLengthTakeIterable(iterable, takeCount, [$E]);
      return new H.TakeIterable(iterable, takeCount, [$E]);
    },
    SkipIterable_SkipIterable: function(iterable, count, $E) {
      H.assertSubtype(iterable, "$isIterable", [$E], "$asIterable");
      if (!!J.getInterceptor$(iterable).$isEfficientLengthIterable) {
        P.RangeError_checkNotNegative(count, "count");
        return new H.EfficientLengthSkipIterable(iterable, count, [$E]);
      }
      P.RangeError_checkNotNegative(count, "count");
      return new H.SkipIterable(iterable, count, [$E]);
    },
    IterableElementError_noElement: function() {
      return new P.StateError("No element");
    },
    IterableElementError_tooMany: function() {
      return new P.StateError("Too many elements");
    },
    IterableElementError_tooFew: function() {
      return new P.StateError("Too few elements");
    },
    Sort_sort: function(a, compare, $E) {
      var t1;
      H.assertSubtype(a, "$isList", [$E], "$asList");
      H.functionTypeCheck(compare, {func: 1, ret: P.int, args: [$E, $E]});
      t1 = J.get$length$asx(a);
      if (typeof t1 !== "number")
        return t1.$sub();
      H.Sort__doSort(a, 0, t1 - 1, compare, $E);
    },
    Sort__doSort: function(a, left, right, compare, $E) {
      H.assertSubtype(a, "$isList", [$E], "$asList");
      H.functionTypeCheck(compare, {func: 1, ret: P.int, args: [$E, $E]});
      if (right - left <= 32)
        H.Sort__insertionSort(a, left, right, compare, $E);
      else
        H.Sort__dualPivotQuicksort(a, left, right, compare, $E);
    },
    Sort__insertionSort: function(a, left, right, compare, $E) {
      var i, t1, el, j, j0;
      H.assertSubtype(a, "$isList", [$E], "$asList");
      H.functionTypeCheck(compare, {func: 1, ret: P.int, args: [$E, $E]});
      for (i = left + 1, t1 = J.getInterceptor$asx(a); i <= right; ++i) {
        el = t1.$index(a, i);
        j = i;
        while (true) {
          if (!(j > left && J.$gt$n(compare.call$2(t1.$index(a, j - 1), el), 0)))
            break;
          j0 = j - 1;
          t1.$indexSet(a, j, t1.$index(a, j0));
          j = j0;
        }
        t1.$indexSet(a, j, el);
      }
    },
    Sort__dualPivotQuicksort: function(a, left, right, compare, $E) {
      var sixth, index1, index5, index3, index2, index4, t1, el1, el2, el3, el4, el5, t0, less, great, k, ak, comp, great0, less0, pivots_are_equal, comp_pivot1, comp_pivot2, t2;
      H.assertSubtype(a, "$isList", [$E], "$asList");
      H.functionTypeCheck(compare, {func: 1, ret: P.int, args: [$E, $E]});
      sixth = C.JSInt_methods._tdivFast$1(right - left + 1, 6);
      index1 = left + sixth;
      index5 = right - sixth;
      index3 = C.JSInt_methods._tdivFast$1(left + right, 2);
      index2 = index3 - sixth;
      index4 = index3 + sixth;
      t1 = J.getInterceptor$asx(a);
      el1 = t1.$index(a, index1);
      el2 = t1.$index(a, index2);
      el3 = t1.$index(a, index3);
      el4 = t1.$index(a, index4);
      el5 = t1.$index(a, index5);
      if (J.$gt$n(compare.call$2(el1, el2), 0)) {
        t0 = el2;
        el2 = el1;
        el1 = t0;
      }
      if (J.$gt$n(compare.call$2(el4, el5), 0)) {
        t0 = el5;
        el5 = el4;
        el4 = t0;
      }
      if (J.$gt$n(compare.call$2(el1, el3), 0)) {
        t0 = el3;
        el3 = el1;
        el1 = t0;
      }
      if (J.$gt$n(compare.call$2(el2, el3), 0)) {
        t0 = el3;
        el3 = el2;
        el2 = t0;
      }
      if (J.$gt$n(compare.call$2(el1, el4), 0)) {
        t0 = el4;
        el4 = el1;
        el1 = t0;
      }
      if (J.$gt$n(compare.call$2(el3, el4), 0)) {
        t0 = el4;
        el4 = el3;
        el3 = t0;
      }
      if (J.$gt$n(compare.call$2(el2, el5), 0)) {
        t0 = el5;
        el5 = el2;
        el2 = t0;
      }
      if (J.$gt$n(compare.call$2(el2, el3), 0)) {
        t0 = el3;
        el3 = el2;
        el2 = t0;
      }
      if (J.$gt$n(compare.call$2(el4, el5), 0)) {
        t0 = el5;
        el5 = el4;
        el4 = t0;
      }
      t1.$indexSet(a, index1, el1);
      t1.$indexSet(a, index3, el3);
      t1.$indexSet(a, index5, el5);
      t1.$indexSet(a, index2, t1.$index(a, left));
      t1.$indexSet(a, index4, t1.$index(a, right));
      less = left + 1;
      great = right - 1;
      if (J.$eq$(compare.call$2(el2, el4), 0)) {
        for (k = less; k <= great; ++k) {
          ak = t1.$index(a, k);
          comp = compare.call$2(ak, el2);
          if (comp === 0)
            continue;
          if (typeof comp !== "number")
            return comp.$lt();
          if (comp < 0) {
            if (k !== less) {
              t1.$indexSet(a, k, t1.$index(a, less));
              t1.$indexSet(a, less, ak);
            }
            ++less;
          } else
            for (; true;) {
              comp = compare.call$2(t1.$index(a, great), el2);
              if (typeof comp !== "number")
                return comp.$gt();
              if (comp > 0) {
                --great;
                continue;
              } else {
                great0 = great - 1;
                if (comp < 0) {
                  t1.$indexSet(a, k, t1.$index(a, less));
                  less0 = less + 1;
                  t1.$indexSet(a, less, t1.$index(a, great));
                  t1.$indexSet(a, great, ak);
                  great = great0;
                  less = less0;
                  break;
                } else {
                  t1.$indexSet(a, k, t1.$index(a, great));
                  t1.$indexSet(a, great, ak);
                  great = great0;
                  break;
                }
              }
            }
        }
        pivots_are_equal = true;
      } else {
        for (k = less; k <= great; ++k) {
          ak = t1.$index(a, k);
          comp_pivot1 = compare.call$2(ak, el2);
          if (typeof comp_pivot1 !== "number")
            return comp_pivot1.$lt();
          if (comp_pivot1 < 0) {
            if (k !== less) {
              t1.$indexSet(a, k, t1.$index(a, less));
              t1.$indexSet(a, less, ak);
            }
            ++less;
          } else {
            comp_pivot2 = compare.call$2(ak, el4);
            if (typeof comp_pivot2 !== "number")
              return comp_pivot2.$gt();
            if (comp_pivot2 > 0)
              for (; true;) {
                comp = compare.call$2(t1.$index(a, great), el4);
                if (typeof comp !== "number")
                  return comp.$gt();
                if (comp > 0) {
                  --great;
                  if (great < k)
                    break;
                  continue;
                } else {
                  comp = compare.call$2(t1.$index(a, great), el2);
                  if (typeof comp !== "number")
                    return comp.$lt();
                  great0 = great - 1;
                  if (comp < 0) {
                    t1.$indexSet(a, k, t1.$index(a, less));
                    less0 = less + 1;
                    t1.$indexSet(a, less, t1.$index(a, great));
                    t1.$indexSet(a, great, ak);
                    less = less0;
                  } else {
                    t1.$indexSet(a, k, t1.$index(a, great));
                    t1.$indexSet(a, great, ak);
                  }
                  great = great0;
                  break;
                }
              }
          }
        }
        pivots_are_equal = false;
      }
      t2 = less - 1;
      t1.$indexSet(a, left, t1.$index(a, t2));
      t1.$indexSet(a, t2, el2);
      t2 = great + 1;
      t1.$indexSet(a, right, t1.$index(a, t2));
      t1.$indexSet(a, t2, el4);
      H.Sort__doSort(a, left, less - 2, compare, $E);
      H.Sort__doSort(a, great + 2, right, compare, $E);
      if (pivots_are_equal)
        return;
      if (less < index1 && great > index5) {
        for (; J.$eq$(compare.call$2(t1.$index(a, less), el2), 0);)
          ++less;
        for (; J.$eq$(compare.call$2(t1.$index(a, great), el4), 0);)
          --great;
        for (k = less; k <= great; ++k) {
          ak = t1.$index(a, k);
          if (compare.call$2(ak, el2) === 0) {
            if (k !== less) {
              t1.$indexSet(a, k, t1.$index(a, less));
              t1.$indexSet(a, less, ak);
            }
            ++less;
          } else if (compare.call$2(ak, el4) === 0)
            for (; true;)
              if (compare.call$2(t1.$index(a, great), el4) === 0) {
                --great;
                if (great < k)
                  break;
                continue;
              } else {
                comp = compare.call$2(t1.$index(a, great), el2);
                if (typeof comp !== "number")
                  return comp.$lt();
                great0 = great - 1;
                if (comp < 0) {
                  t1.$indexSet(a, k, t1.$index(a, less));
                  less0 = less + 1;
                  t1.$indexSet(a, less, t1.$index(a, great));
                  t1.$indexSet(a, great, ak);
                  less = less0;
                } else {
                  t1.$indexSet(a, k, t1.$index(a, great));
                  t1.$indexSet(a, great, ak);
                }
                great = great0;
                break;
              }
        }
        H.Sort__doSort(a, less, great, compare, $E);
      } else
        H.Sort__doSort(a, less, great, compare, $E);
    },
    _CastIterableBase: function _CastIterableBase() {
    },
    _CastIterableBase_lastWhere_closure0: function _CastIterableBase_lastWhere_closure0(t0, t1) {
      this.$this = t0;
      this.test = t1;
    },
    _CastIterableBase_lastWhere_closure: function _CastIterableBase_lastWhere_closure(t0, t1) {
      this.$this = t0;
      this.orElse = t1;
    },
    CastIterator: function CastIterator(t0, t1) {
      this._source = t0;
      this.$ti = t1;
    },
    CastIterable: function CastIterable(t0, t1) {
      this._source = t0;
      this.$ti = t1;
    },
    _EfficientLengthCastIterable: function _EfficientLengthCastIterable(t0, t1) {
      this._source = t0;
      this.$ti = t1;
    },
    _CastListBase: function _CastListBase() {
    },
    _CastListBase_sort_closure: function _CastListBase_sort_closure(t0, t1) {
      this.$this = t0;
      this.compare = t1;
    },
    CastList: function CastList(t0, t1) {
      this._source = t0;
      this.$ti = t1;
    },
    CodeUnits: function CodeUnits(t0) {
      this._string = t0;
    },
    EfficientLengthIterable: function EfficientLengthIterable() {
    },
    ListIterable: function ListIterable() {
    },
    SubListIterable: function SubListIterable(t0, t1, t2, t3) {
      var _ = this;
      _._iterable = t0;
      _._start = t1;
      _._endOrLength = t2;
      _.$ti = t3;
    },
    ListIterator: function ListIterator(t0, t1, t2) {
      var _ = this;
      _._iterable = t0;
      _._length = t1;
      _._index = 0;
      _._current = null;
      _.$ti = t2;
    },
    MappedIterable: function MappedIterable(t0, t1, t2) {
      this._iterable = t0;
      this._f = t1;
      this.$ti = t2;
    },
    EfficientLengthMappedIterable: function EfficientLengthMappedIterable(t0, t1, t2) {
      this._iterable = t0;
      this._f = t1;
      this.$ti = t2;
    },
    MappedIterator: function MappedIterator(t0, t1, t2) {
      var _ = this;
      _._current = null;
      _._iterator = t0;
      _._f = t1;
      _.$ti = t2;
    },
    MappedListIterable: function MappedListIterable(t0, t1, t2) {
      this._source = t0;
      this._f = t1;
      this.$ti = t2;
    },
    WhereIterable: function WhereIterable(t0, t1, t2) {
      this._iterable = t0;
      this._f = t1;
      this.$ti = t2;
    },
    WhereIterator: function WhereIterator(t0, t1, t2) {
      this._iterator = t0;
      this._f = t1;
      this.$ti = t2;
    },
    ExpandIterable: function ExpandIterable(t0, t1, t2) {
      this._iterable = t0;
      this._f = t1;
      this.$ti = t2;
    },
    ExpandIterator: function ExpandIterator(t0, t1, t2, t3) {
      var _ = this;
      _._iterator = t0;
      _._f = t1;
      _._currentExpansion = t2;
      _._current = null;
      _.$ti = t3;
    },
    TakeIterable: function TakeIterable(t0, t1, t2) {
      this._iterable = t0;
      this._takeCount = t1;
      this.$ti = t2;
    },
    EfficientLengthTakeIterable: function EfficientLengthTakeIterable(t0, t1, t2) {
      this._iterable = t0;
      this._takeCount = t1;
      this.$ti = t2;
    },
    TakeIterator: function TakeIterator(t0, t1, t2) {
      this._iterator = t0;
      this._remaining = t1;
      this.$ti = t2;
    },
    SkipIterable: function SkipIterable(t0, t1, t2) {
      this._iterable = t0;
      this._skipCount = t1;
      this.$ti = t2;
    },
    EfficientLengthSkipIterable: function EfficientLengthSkipIterable(t0, t1, t2) {
      this._iterable = t0;
      this._skipCount = t1;
      this.$ti = t2;
    },
    SkipIterator: function SkipIterator(t0, t1, t2) {
      this._iterator = t0;
      this._skipCount = t1;
      this.$ti = t2;
    },
    EmptyIterable: function EmptyIterable(t0) {
      this.$ti = t0;
    },
    EmptyIterator: function EmptyIterator(t0) {
      this.$ti = t0;
    },
    FixedLengthListMixin: function FixedLengthListMixin() {
    },
    UnmodifiableListMixin: function UnmodifiableListMixin() {
    },
    UnmodifiableListBase: function UnmodifiableListBase() {
    },
    ReversedListIterable: function ReversedListIterable(t0, t1) {
      this._source = t0;
      this.$ti = t1;
    },
    Symbol: function Symbol(t0) {
      this.__internal$_name = t0;
    },
    __CastListBase__CastIterableBase_ListMixin: function __CastListBase__CastIterableBase_ListMixin() {
    },
    ConstantMap__throwUnmodifiable: function() {
      throw H.wrapException(P.UnsupportedError$("Cannot modify unmodifiable Map"));
    },
    instantiate1: function(f, T1) {
      var t1;
      H.interceptedTypeCheck(f, "$isClosure");
      t1 = new H.Instantiation1(f, [T1]);
      t1.Instantiation$1(f);
      return t1;
    },
    unminifyOrTag: function(rawClassName) {
      var preserved = H.stringTypeCheck(init.mangledGlobalNames[rawClassName]);
      if (typeof preserved === "string")
        return preserved;
      return rawClassName;
    },
    getType: function(index) {
      return init.types[H.intTypeCheck(index)];
    },
    isJsIndexable: function(object, record) {
      var result;
      if (record != null) {
        result = record.x;
        if (result != null)
          return result;
      }
      return !!J.getInterceptor$(object).$isJavaScriptIndexingBehavior;
    },
    S: function(value) {
      var res;
      if (typeof value === "string")
        return value;
      if (typeof value === "number") {
        if (value !== 0)
          return "" + value;
      } else if (true === value)
        return "true";
      else if (false === value)
        return "false";
      else if (value == null)
        return "null";
      res = J.toString$0$(value);
      if (typeof res !== "string")
        throw H.wrapException(H.argumentErrorValue(value));
      return res;
    },
    Primitives_objectHashCode: function(object) {
      var hash = object.$identityHash;
      if (hash == null) {
        hash = Math.random() * 0x3fffffff | 0;
        object.$identityHash = hash;
      }
      return hash;
    },
    Primitives_parseInt: function(source, radix) {
      var match, decimalMatch, maxCharCode, digitsPart, t1, i;
      if (typeof source !== "string")
        H.throwExpression(H.argumentErrorValue(source));
      match = /^\s*[+-]?((0x[a-f0-9]+)|(\d+)|([a-z0-9]+))\s*$/i.exec(source);
      if (match == null)
        return;
      if (3 >= match.length)
        return H.ioore(match, 3);
      decimalMatch = H.stringTypeCheck(match[3]);
      if (radix == null) {
        if (decimalMatch != null)
          return parseInt(source, 10);
        if (match[2] != null)
          return parseInt(source, 16);
        return;
      }
      if (radix < 2 || radix > 36)
        throw H.wrapException(P.RangeError$range(radix, 2, 36, "radix", null));
      if (radix === 10 && decimalMatch != null)
        return parseInt(source, 10);
      if (radix < 10 || decimalMatch == null) {
        maxCharCode = radix <= 10 ? 47 + radix : 86 + radix;
        digitsPart = match[1];
        for (t1 = digitsPart.length, i = 0; i < t1; ++i)
          if ((C.JSString_methods._codeUnitAt$1(digitsPart, i) | 32) > maxCharCode)
            return;
      }
      return parseInt(source, radix);
    },
    Primitives_parseDouble: function(source) {
      var result, trimmed;
      if (typeof source !== "string")
        H.throwExpression(H.argumentErrorValue(source));
      if (!/^\s*[+-]?(?:Infinity|NaN|(?:\.\d+|\d+(?:\.\d*)?)(?:[eE][+-]?\d+)?)\s*$/.test(source))
        return;
      result = parseFloat(source);
      if (isNaN(result)) {
        trimmed = J.trim$0$s(source);
        if (trimmed === "NaN" || trimmed === "+NaN" || trimmed === "-NaN")
          return result;
        return;
      }
      return result;
    },
    Primitives_objectTypeName: function(object) {
      return H.Primitives__objectClassName(object) + H._joinArguments(H.getRuntimeTypeInfo(object), 0, null);
    },
    Primitives__objectClassName: function(object) {
      var interceptorConstructorName, $name, t1, dispatchName, objectConstructor, match, decompiledName,
        interceptor = J.getInterceptor$(object),
        interceptorConstructor = interceptor.constructor;
      if (typeof interceptorConstructor == "function") {
        interceptorConstructorName = interceptorConstructor.name;
        $name = typeof interceptorConstructorName === "string" ? interceptorConstructorName : null;
      } else
        $name = null;
      t1 = $name == null;
      if (t1 || interceptor === C.Interceptor_methods || !!interceptor.$isUnknownJavaScriptObject) {
        dispatchName = C.C_JS_CONST(object);
        if (t1)
          $name = dispatchName;
        if (dispatchName === "Object") {
          objectConstructor = object.constructor;
          if (typeof objectConstructor == "function") {
            match = String(objectConstructor).match(/^\s*function\s*([\w$]*)\s*\(/);
            decompiledName = match == null ? null : match[1];
            if (typeof decompiledName === "string" && /^\w+$/.test(decompiledName))
              $name = decompiledName;
          }
        }
        return $name;
      }
      $name = $name;
      return H.unminifyOrTag($name.length > 1 && C.JSString_methods._codeUnitAt$1($name, 0) === 36 ? C.JSString_methods.substring$1($name, 1) : $name);
    },
    Primitives_dateNow: function() {
      return Date.now();
    },
    Primitives_initTicker: function() {
      var $window, performance;
      if ($.Primitives_timerFrequency != null)
        return;
      $.Primitives_timerFrequency = 1000;
      $.Primitives_timerTicks = H._js_helper_Primitives_dateNow$closure();
      if (typeof window == "undefined")
        return;
      $window = window;
      if ($window == null)
        return;
      performance = $window.performance;
      if (performance == null)
        return;
      if (typeof performance.now != "function")
        return;
      $.Primitives_timerFrequency = 1000000;
      $.Primitives_timerTicks = new H.Primitives_initTicker_closure(performance);
    },
    Primitives__fromCharCodeApply: function(array) {
      var result, i, i0, chunkEnd,
        end = array.length;
      if (end <= 500)
        return String.fromCharCode.apply(null, array);
      for (result = "", i = 0; i < end; i = i0) {
        i0 = i + 500;
        chunkEnd = i0 < end ? i0 : end;
        result += String.fromCharCode.apply(null, array.slice(i, chunkEnd));
      }
      return result;
    },
    Primitives_stringFromCodePoints: function(codePoints) {
      var t1, _i, i,
        a = H.setRuntimeTypeInfo([], [P.int]);
      for (t1 = codePoints.length, _i = 0; _i < codePoints.length; codePoints.length === t1 || (0, H.throwConcurrentModificationError)(codePoints), ++_i) {
        i = codePoints[_i];
        if (typeof i !== "number" || Math.floor(i) !== i)
          throw H.wrapException(H.argumentErrorValue(i));
        if (i <= 65535)
          C.JSArray_methods.add$1(a, i);
        else if (i <= 1114111) {
          C.JSArray_methods.add$1(a, 55296 + (C.JSInt_methods._shrOtherPositive$1(i - 65536, 10) & 1023));
          C.JSArray_methods.add$1(a, 56320 + (i & 1023));
        } else
          throw H.wrapException(H.argumentErrorValue(i));
      }
      return H.Primitives__fromCharCodeApply(a);
    },
    Primitives_stringFromCharCodes: function(charCodes) {
      var t1, _i, i;
      for (t1 = charCodes.length, _i = 0; _i < t1; ++_i) {
        i = charCodes[_i];
        if (typeof i !== "number" || Math.floor(i) !== i)
          throw H.wrapException(H.argumentErrorValue(i));
        if (i < 0)
          throw H.wrapException(H.argumentErrorValue(i));
        if (i > 65535)
          return H.Primitives_stringFromCodePoints(charCodes);
      }
      return H.Primitives__fromCharCodeApply(charCodes);
    },
    Primitives_stringFromNativeUint8List: function(charCodes, start, end) {
      var i, result, i0, chunkEnd;
      if (typeof end !== "number")
        return end.$le();
      if (end <= 500 && start === 0 && end === charCodes.length)
        return String.fromCharCode.apply(null, charCodes);
      for (i = start, result = ""; i < end; i = i0) {
        i0 = i + 500;
        if (i0 < end)
          chunkEnd = i0;
        else
          chunkEnd = end;
        result += String.fromCharCode.apply(null, charCodes.subarray(i, chunkEnd));
      }
      return result;
    },
    Primitives_stringFromCharCode: function(charCode) {
      var bits;
      if (0 <= charCode) {
        if (charCode <= 65535)
          return String.fromCharCode(charCode);
        if (charCode <= 1114111) {
          bits = charCode - 65536;
          return String.fromCharCode((55296 | C.JSInt_methods._shrOtherPositive$1(bits, 10)) >>> 0, 56320 | bits & 1023);
        }
      }
      throw H.wrapException(P.RangeError$range(charCode, 0, 1114111, null, null));
    },
    Primitives_lazyAsJsDate: function(receiver) {
      if (receiver.date === void 0)
        receiver.date = new Date(receiver._core$_value);
      return receiver.date;
    },
    Primitives_getYear: function(receiver) {
      return receiver.isUtc ? H.Primitives_lazyAsJsDate(receiver).getUTCFullYear() + 0 : H.Primitives_lazyAsJsDate(receiver).getFullYear() + 0;
    },
    Primitives_getMonth: function(receiver) {
      return receiver.isUtc ? H.Primitives_lazyAsJsDate(receiver).getUTCMonth() + 1 : H.Primitives_lazyAsJsDate(receiver).getMonth() + 1;
    },
    Primitives_getDay: function(receiver) {
      return receiver.isUtc ? H.Primitives_lazyAsJsDate(receiver).getUTCDate() + 0 : H.Primitives_lazyAsJsDate(receiver).getDate() + 0;
    },
    Primitives_getHours: function(receiver) {
      return receiver.isUtc ? H.Primitives_lazyAsJsDate(receiver).getUTCHours() + 0 : H.Primitives_lazyAsJsDate(receiver).getHours() + 0;
    },
    Primitives_getMinutes: function(receiver) {
      return receiver.isUtc ? H.Primitives_lazyAsJsDate(receiver).getUTCMinutes() + 0 : H.Primitives_lazyAsJsDate(receiver).getMinutes() + 0;
    },
    Primitives_getSeconds: function(receiver) {
      return receiver.isUtc ? H.Primitives_lazyAsJsDate(receiver).getUTCSeconds() + 0 : H.Primitives_lazyAsJsDate(receiver).getSeconds() + 0;
    },
    Primitives_getMilliseconds: function(receiver) {
      return receiver.isUtc ? H.Primitives_lazyAsJsDate(receiver).getUTCMilliseconds() + 0 : H.Primitives_lazyAsJsDate(receiver).getMilliseconds() + 0;
    },
    Primitives_functionNoSuchMethod: function($function, positionalArguments, namedArguments) {
      var $arguments, namedArgumentList, t1 = {};
      H.assertSubtype(namedArguments, "$isMap", [P.String, null], "$asMap");
      t1.argumentCount = 0;
      $arguments = [];
      namedArgumentList = [];
      t1.argumentCount = positionalArguments.length;
      C.JSArray_methods.addAll$1($arguments, positionalArguments);
      t1.names = "";
      if (namedArguments != null && !namedArguments.get$isEmpty(namedArguments))
        namedArguments.forEach$1(0, new H.Primitives_functionNoSuchMethod_closure(t1, namedArgumentList, $arguments));
      "" + t1.argumentCount;
      return J.noSuchMethod$1$($function, new H.JSInvocationMirror(C.Symbol_call, 0, $arguments, namedArgumentList, 0));
    },
    Primitives_applyFunction: function($function, positionalArguments, namedArguments) {
      var t1, $arguments, argumentCount, jsStub;
      H.assertSubtype(namedArguments, "$isMap", [P.String, null], "$asMap");
      if (positionalArguments instanceof Array)
        t1 = namedArguments == null || namedArguments.get$isEmpty(namedArguments);
      else
        t1 = false;
      if (t1) {
        $arguments = positionalArguments;
        argumentCount = $arguments.length;
        if (argumentCount === 0) {
          if (!!$function.call$0)
            return $function.call$0();
        } else if (argumentCount === 1) {
          if (!!$function.call$1)
            return $function.call$1($arguments[0]);
        } else if (argumentCount === 2) {
          if (!!$function.call$2)
            return $function.call$2($arguments[0], $arguments[1]);
        } else if (argumentCount === 3) {
          if (!!$function.call$3)
            return $function.call$3($arguments[0], $arguments[1], $arguments[2]);
        } else if (argumentCount === 4) {
          if (!!$function.call$4)
            return $function.call$4($arguments[0], $arguments[1], $arguments[2], $arguments[3]);
        } else if (argumentCount === 5)
          if (!!$function.call$5)
            return $function.call$5($arguments[0], $arguments[1], $arguments[2], $arguments[3], $arguments[4]);
        jsStub = $function["call" + "$" + argumentCount];
        if (jsStub != null)
          return jsStub.apply($function, $arguments);
      }
      return H.Primitives__genericApplyFunction2($function, positionalArguments, namedArguments);
    },
    Primitives__genericApplyFunction2: function($function, positionalArguments, namedArguments) {
      var $arguments, argumentCount, requiredParameterCount, defaultValuesClosure, t1, defaultValues, interceptor, jsFunction, keys, _i, used, t2;
      H.assertSubtype(namedArguments, "$isMap", [P.String, null], "$asMap");
      if (positionalArguments != null)
        $arguments = positionalArguments instanceof Array ? positionalArguments : P.List_List$from(positionalArguments, true, null);
      else
        $arguments = [];
      argumentCount = $arguments.length;
      requiredParameterCount = $function.$requiredArgCount;
      if (argumentCount < requiredParameterCount)
        return H.Primitives_functionNoSuchMethod($function, $arguments, namedArguments);
      defaultValuesClosure = $function.$defaultValues;
      t1 = defaultValuesClosure == null;
      defaultValues = !t1 ? defaultValuesClosure() : null;
      interceptor = J.getInterceptor$($function);
      jsFunction = interceptor["call*"];
      if (typeof jsFunction === "string")
        jsFunction = interceptor[jsFunction];
      if (t1) {
        if (namedArguments != null && namedArguments.get$isNotEmpty(namedArguments))
          return H.Primitives_functionNoSuchMethod($function, $arguments, namedArguments);
        if (argumentCount === requiredParameterCount)
          return jsFunction.apply($function, $arguments);
        return H.Primitives_functionNoSuchMethod($function, $arguments, namedArguments);
      }
      if (defaultValues instanceof Array) {
        if (namedArguments != null && namedArguments.get$isNotEmpty(namedArguments))
          return H.Primitives_functionNoSuchMethod($function, $arguments, namedArguments);
        if (argumentCount > requiredParameterCount + defaultValues.length)
          return H.Primitives_functionNoSuchMethod($function, $arguments, null);
        C.JSArray_methods.addAll$1($arguments, defaultValues.slice(argumentCount - requiredParameterCount));
        return jsFunction.apply($function, $arguments);
      } else {
        if (argumentCount > requiredParameterCount)
          return H.Primitives_functionNoSuchMethod($function, $arguments, namedArguments);
        keys = Object.keys(defaultValues);
        if (namedArguments == null)
          for (t1 = keys.length, _i = 0; _i < keys.length; keys.length === t1 || (0, H.throwConcurrentModificationError)(keys), ++_i)
            C.JSArray_methods.add$1($arguments, defaultValues[H.stringTypeCheck(keys[_i])]);
        else {
          for (t1 = keys.length, used = 0, _i = 0; _i < keys.length; keys.length === t1 || (0, H.throwConcurrentModificationError)(keys), ++_i) {
            t2 = H.stringTypeCheck(keys[_i]);
            if (namedArguments.containsKey$1(0, t2)) {
              ++used;
              C.JSArray_methods.add$1($arguments, namedArguments.$index(0, t2));
            } else
              C.JSArray_methods.add$1($arguments, defaultValues[t2]);
          }
          if (used !== namedArguments.get$length(namedArguments))
            return H.Primitives_functionNoSuchMethod($function, $arguments, namedArguments);
        }
        return jsFunction.apply($function, $arguments);
      }
    },
    iae: function(argument) {
      throw H.wrapException(H.argumentErrorValue(argument));
    },
    ioore: function(receiver, index) {
      if (receiver == null)
        J.get$length$asx(receiver);
      throw H.wrapException(H.diagnoseIndexError(receiver, index));
    },
    diagnoseIndexError: function(indexable, index) {
      var $length, t1, _s5_ = "index";
      if (typeof index !== "number" || Math.floor(index) !== index)
        return new P.ArgumentError(true, index, _s5_, null);
      $length = H.intTypeCheck(J.get$length$asx(indexable));
      if (!(index < 0)) {
        if (typeof $length !== "number")
          return H.iae($length);
        t1 = index >= $length;
      } else
        t1 = true;
      if (t1)
        return P.IndexError$(index, indexable, _s5_, null, $length);
      return P.RangeError$value(index, _s5_);
    },
    diagnoseRangeError: function(start, end, $length) {
      var _s13_ = "Invalid value";
      if (start > $length)
        return new P.RangeError(0, $length, true, start, "start", _s13_);
      if (end != null)
        if (end < start || end > $length)
          return new P.RangeError(start, $length, true, end, "end", _s13_);
      return new P.ArgumentError(true, end, "end", null);
    },
    argumentErrorValue: function(object) {
      return new P.ArgumentError(true, object, null, null);
    },
    checkNum: function(value) {
      if (typeof value !== "number")
        throw H.wrapException(H.argumentErrorValue(value));
      return value;
    },
    wrapException: function(ex) {
      var wrapper;
      if (ex == null)
        ex = new P.NullThrownError();
      wrapper = new Error();
      wrapper.dartException = ex;
      if ("defineProperty" in Object) {
        Object.defineProperty(wrapper, "message", {get: H.toStringWrapper});
        wrapper.name = "";
      } else
        wrapper.toString = H.toStringWrapper;
      return wrapper;
    },
    toStringWrapper: function() {
      return J.toString$0$(this.dartException);
    },
    throwExpression: function(ex) {
      throw H.wrapException(ex);
    },
    throwConcurrentModificationError: function(collection) {
      throw H.wrapException(P.ConcurrentModificationError$(collection));
    },
    TypeErrorDecoder_extractPattern: function(message) {
      var match, $arguments, argumentsExpr, expr, method, receiver;
      message = H.quoteStringForRegExp(message.replace(String({}), '$receiver$'));
      match = message.match(/\\\$[a-zA-Z]+\\\$/g);
      if (match == null)
        match = H.setRuntimeTypeInfo([], [P.String]);
      $arguments = match.indexOf("\\$arguments\\$");
      argumentsExpr = match.indexOf("\\$argumentsExpr\\$");
      expr = match.indexOf("\\$expr\\$");
      method = match.indexOf("\\$method\\$");
      receiver = match.indexOf("\\$receiver\\$");
      return new H.TypeErrorDecoder(message.replace(new RegExp('\\\\\\$arguments\\\\\\$', 'g'), '((?:x|[^x])*)').replace(new RegExp('\\\\\\$argumentsExpr\\\\\\$', 'g'), '((?:x|[^x])*)').replace(new RegExp('\\\\\\$expr\\\\\\$', 'g'), '((?:x|[^x])*)').replace(new RegExp('\\\\\\$method\\\\\\$', 'g'), '((?:x|[^x])*)').replace(new RegExp('\\\\\\$receiver\\\\\\$', 'g'), '((?:x|[^x])*)'), $arguments, argumentsExpr, expr, method, receiver);
    },
    TypeErrorDecoder_provokeCallErrorOn: function(expression) {
      return function($expr$) {
        var $argumentsExpr$ = '$arguments$';
        try {
          $expr$.$method$($argumentsExpr$);
        } catch (e) {
          return e.message;
        }
      }(expression);
    },
    TypeErrorDecoder_provokePropertyErrorOn: function(expression) {
      return function($expr$) {
        try {
          $expr$.$method$;
        } catch (e) {
          return e.message;
        }
      }(expression);
    },
    NullError$: function(_message, match) {
      return new H.NullError(_message, match == null ? null : match.method);
    },
    JsNoSuchMethodError$: function(_message, match) {
      var t1 = match == null,
        t2 = t1 ? null : match.method;
      return new H.JsNoSuchMethodError(_message, t2, t1 ? null : match.receiver);
    },
    unwrapException: function(ex) {
      var message, number, ieErrorCode, nsme, notClosure, nullCall, nullLiteralCall, undefCall, undefLiteralCall, nullProperty, undefProperty, undefLiteralProperty, match, t2, _null = null,
        t1 = new H.unwrapException_saveStackTrace(ex);
      if (ex == null)
        return;
      if (ex instanceof H.ExceptionAndStackTrace)
        return t1.call$1(ex.dartException);
      if (typeof ex !== "object")
        return ex;
      if ("dartException" in ex)
        return t1.call$1(ex.dartException);
      else if (!("message" in ex))
        return ex;
      message = ex.message;
      if ("number" in ex && typeof ex.number == "number") {
        number = ex.number;
        ieErrorCode = number & 65535;
        if ((C.JSInt_methods._shrOtherPositive$1(number, 16) & 8191) === 10)
          switch (ieErrorCode) {
            case 438:
              return t1.call$1(H.JsNoSuchMethodError$(H.S(message) + " (Error " + ieErrorCode + ")", _null));
            case 445:
            case 5007:
              return t1.call$1(H.NullError$(H.S(message) + " (Error " + ieErrorCode + ")", _null));
          }
      }
      if (ex instanceof TypeError) {
        nsme = $.$get$TypeErrorDecoder_noSuchMethodPattern();
        notClosure = $.$get$TypeErrorDecoder_notClosurePattern();
        nullCall = $.$get$TypeErrorDecoder_nullCallPattern();
        nullLiteralCall = $.$get$TypeErrorDecoder_nullLiteralCallPattern();
        undefCall = $.$get$TypeErrorDecoder_undefinedCallPattern();
        undefLiteralCall = $.$get$TypeErrorDecoder_undefinedLiteralCallPattern();
        nullProperty = $.$get$TypeErrorDecoder_nullPropertyPattern();
        $.$get$TypeErrorDecoder_nullLiteralPropertyPattern();
        undefProperty = $.$get$TypeErrorDecoder_undefinedPropertyPattern();
        undefLiteralProperty = $.$get$TypeErrorDecoder_undefinedLiteralPropertyPattern();
        match = nsme.matchTypeError$1(message);
        if (match != null)
          return t1.call$1(H.JsNoSuchMethodError$(H.stringTypeCheck(message), match));
        else {
          match = notClosure.matchTypeError$1(message);
          if (match != null) {
            match.method = "call";
            return t1.call$1(H.JsNoSuchMethodError$(H.stringTypeCheck(message), match));
          } else {
            match = nullCall.matchTypeError$1(message);
            if (match == null) {
              match = nullLiteralCall.matchTypeError$1(message);
              if (match == null) {
                match = undefCall.matchTypeError$1(message);
                if (match == null) {
                  match = undefLiteralCall.matchTypeError$1(message);
                  if (match == null) {
                    match = nullProperty.matchTypeError$1(message);
                    if (match == null) {
                      match = nullLiteralCall.matchTypeError$1(message);
                      if (match == null) {
                        match = undefProperty.matchTypeError$1(message);
                        if (match == null) {
                          match = undefLiteralProperty.matchTypeError$1(message);
                          t2 = match != null;
                        } else
                          t2 = true;
                      } else
                        t2 = true;
                    } else
                      t2 = true;
                  } else
                    t2 = true;
                } else
                  t2 = true;
              } else
                t2 = true;
            } else
              t2 = true;
            if (t2)
              return t1.call$1(H.NullError$(H.stringTypeCheck(message), match));
          }
        }
        return t1.call$1(new H.UnknownJsTypeError(typeof message === "string" ? message : ""));
      }
      if (ex instanceof RangeError) {
        if (typeof message === "string" && message.indexOf("call stack") !== -1)
          return new P.StackOverflowError();
        message = function(ex) {
          try {
            return String(ex);
          } catch (e) {
          }
          return null;
        }(ex);
        return t1.call$1(new P.ArgumentError(false, _null, _null, typeof message === "string" ? message.replace(/^RangeError:\s*/, "") : message));
      }
      if (typeof InternalError == "function" && ex instanceof InternalError)
        if (typeof message === "string" && message === "too much recursion")
          return new P.StackOverflowError();
      return ex;
    },
    getTraceFromException: function(exception) {
      var trace;
      if (exception instanceof H.ExceptionAndStackTrace)
        return exception.stackTrace;
      if (exception == null)
        return new H._StackTrace(exception);
      trace = exception.$cachedTrace;
      if (trace != null)
        return trace;
      return exception.$cachedTrace = new H._StackTrace(exception);
    },
    objectHashCode: function(object) {
      if (object == null || typeof object != 'object')
        return J.get$hashCode$(object);
      else
        return H.Primitives_objectHashCode(object);
    },
    fillLiteralMap: function(keyValuePairs, result) {
      var index, index0, index1,
        $length = keyValuePairs.length;
      for (index = 0; index < $length; index = index1) {
        index0 = index + 1;
        index1 = index0 + 1;
        result.$indexSet(0, keyValuePairs[index], keyValuePairs[index0]);
      }
      return result;
    },
    invokeClosure: function(closure, numberOfArguments, arg1, arg2, arg3, arg4) {
      H.interceptedTypeCheck(closure, "$isFunction");
      switch (H.intTypeCheck(numberOfArguments)) {
        case 0:
          return closure.call$0();
        case 1:
          return closure.call$1(arg1);
        case 2:
          return closure.call$2(arg1, arg2);
        case 3:
          return closure.call$3(arg1, arg2, arg3);
        case 4:
          return closure.call$4(arg1, arg2, arg3, arg4);
      }
      throw H.wrapException(P.Exception_Exception("Unsupported number of arguments for wrapped closure"));
    },
    convertDartClosureToJS: function(closure, arity) {
      var $function;
      H.intTypeCheck(arity);
      if (closure == null)
        return;
      $function = closure.$identity;
      if (!!$function)
        return $function;
      $function = function(closure, arity, invoke) {
        return function(a1, a2, a3, a4) {
          return invoke(closure, arity, a1, a2, a3, a4);
        };
      }(closure, arity, H.invokeClosure);
      closure.$identity = $function;
      return $function;
    },
    Closure_fromTearOff: function(receiver, functions, applyTrampolineIndex, reflectionInfo, isStatic, isIntercepted, propertyName) {
      var $constructor, t1, trampoline, signatureFunction, getReceiver, applyTrampoline, i, stub, stubCallName, _null = null,
        $function = functions[0],
        callName = $function.$callName,
        $prototype = isStatic ? Object.create(new H.StaticClosure().constructor.prototype) : Object.create(new H.BoundClosure(_null, _null, _null, _null).constructor.prototype);
      $prototype.$initialize = $prototype.constructor;
      if (isStatic)
        $constructor = function static_tear_off() {
          this.$initialize();
        };
      else {
        t1 = $.Closure_functionCounter;
        if (typeof t1 !== "number")
          return t1.$add();
        $.Closure_functionCounter = t1 + 1;
        t1 = new Function("a,b,c,d" + t1, "this.$initialize(a,b,c,d" + t1 + ")");
        $constructor = t1;
      }
      $prototype.constructor = $constructor;
      $constructor.prototype = $prototype;
      if (!isStatic) {
        trampoline = H.Closure_forwardCallTo(receiver, $function, isIntercepted);
        trampoline.$reflectionInfo = reflectionInfo;
      } else {
        $prototype.$static_name = propertyName;
        trampoline = $function;
      }
      if (typeof reflectionInfo == "number")
        signatureFunction = function(getType, t) {
          return function() {
            return getType(t);
          };
        }(H.getType, reflectionInfo);
      else if (typeof reflectionInfo == "function")
        if (isStatic)
          signatureFunction = reflectionInfo;
        else {
          getReceiver = isIntercepted ? H.BoundClosure_receiverOf : H.BoundClosure_selfOf;
          signatureFunction = function(f, r) {
            return function() {
              return f.apply({$receiver: r(this)}, arguments);
            };
          }(reflectionInfo, getReceiver);
        }
      else
        throw H.wrapException("Error in reflectionInfo.");
      $prototype.$signature = signatureFunction;
      $prototype[callName] = trampoline;
      for (applyTrampoline = trampoline, i = 1; i < functions.length; ++i) {
        stub = functions[i];
        stubCallName = stub.$callName;
        if (stubCallName != null) {
          stub = isStatic ? stub : H.Closure_forwardCallTo(receiver, stub, isIntercepted);
          $prototype[stubCallName] = stub;
        }
        if (i === applyTrampolineIndex) {
          stub.$reflectionInfo = reflectionInfo;
          applyTrampoline = stub;
        }
      }
      $prototype["call*"] = applyTrampoline;
      $prototype.$requiredArgCount = $function.$requiredArgCount;
      $prototype.$defaultValues = $function.$defaultValues;
      return $constructor;
    },
    Closure_cspForwardCall: function(arity, isSuperCall, stubName, $function) {
      var getSelf = H.BoundClosure_selfOf;
      switch (isSuperCall ? -1 : arity) {
        case 0:
          return function(n, S) {
            return function() {
              return S(this)[n]();
            };
          }(stubName, getSelf);
        case 1:
          return function(n, S) {
            return function(a) {
              return S(this)[n](a);
            };
          }(stubName, getSelf);
        case 2:
          return function(n, S) {
            return function(a, b) {
              return S(this)[n](a, b);
            };
          }(stubName, getSelf);
        case 3:
          return function(n, S) {
            return function(a, b, c) {
              return S(this)[n](a, b, c);
            };
          }(stubName, getSelf);
        case 4:
          return function(n, S) {
            return function(a, b, c, d) {
              return S(this)[n](a, b, c, d);
            };
          }(stubName, getSelf);
        case 5:
          return function(n, S) {
            return function(a, b, c, d, e) {
              return S(this)[n](a, b, c, d, e);
            };
          }(stubName, getSelf);
        default:
          return function(f, s) {
            return function() {
              return f.apply(s(this), arguments);
            };
          }($function, getSelf);
      }
    },
    Closure_forwardCallTo: function(receiver, $function, isIntercepted) {
      var stubName, arity, lookedUpFunction, t1, t2, selfName, $arguments;
      if (isIntercepted)
        return H.Closure_forwardInterceptedCallTo(receiver, $function);
      stubName = $function.$stubName;
      arity = $function.length;
      lookedUpFunction = receiver[stubName];
      t1 = $function == null ? lookedUpFunction == null : $function === lookedUpFunction;
      t2 = !t1 || arity >= 27;
      if (t2)
        return H.Closure_cspForwardCall(arity, !t1, stubName, $function);
      if (arity === 0) {
        t1 = $.Closure_functionCounter;
        if (typeof t1 !== "number")
          return t1.$add();
        $.Closure_functionCounter = t1 + 1;
        selfName = "self" + t1;
        t1 = "return function(){var " + selfName + " = this.";
        t2 = $.BoundClosure_selfFieldNameCache;
        return new Function(t1 + H.S(t2 == null ? $.BoundClosure_selfFieldNameCache = H.BoundClosure_computeFieldNamed("self") : t2) + ";return " + selfName + "." + H.S(stubName) + "();}")();
      }
      $arguments = "abcdefghijklmnopqrstuvwxyz".split("").splice(0, arity).join(",");
      t1 = $.Closure_functionCounter;
      if (typeof t1 !== "number")
        return t1.$add();
      $.Closure_functionCounter = t1 + 1;
      $arguments += t1;
      t1 = "return function(" + $arguments + "){return this.";
      t2 = $.BoundClosure_selfFieldNameCache;
      return new Function(t1 + H.S(t2 == null ? $.BoundClosure_selfFieldNameCache = H.BoundClosure_computeFieldNamed("self") : t2) + "." + H.S(stubName) + "(" + $arguments + ");}")();
    },
    Closure_cspForwardInterceptedCall: function(arity, isSuperCall, $name, $function) {
      var getSelf = H.BoundClosure_selfOf,
        getReceiver = H.BoundClosure_receiverOf;
      switch (isSuperCall ? -1 : arity) {
        case 0:
          throw H.wrapException(H.RuntimeError$("Intercepted function with no arguments."));
        case 1:
          return function(n, s, r) {
            return function() {
              return s(this)[n](r(this));
            };
          }($name, getSelf, getReceiver);
        case 2:
          return function(n, s, r) {
            return function(a) {
              return s(this)[n](r(this), a);
            };
          }($name, getSelf, getReceiver);
        case 3:
          return function(n, s, r) {
            return function(a, b) {
              return s(this)[n](r(this), a, b);
            };
          }($name, getSelf, getReceiver);
        case 4:
          return function(n, s, r) {
            return function(a, b, c) {
              return s(this)[n](r(this), a, b, c);
            };
          }($name, getSelf, getReceiver);
        case 5:
          return function(n, s, r) {
            return function(a, b, c, d) {
              return s(this)[n](r(this), a, b, c, d);
            };
          }($name, getSelf, getReceiver);
        case 6:
          return function(n, s, r) {
            return function(a, b, c, d, e) {
              return s(this)[n](r(this), a, b, c, d, e);
            };
          }($name, getSelf, getReceiver);
        default:
          return function(f, s, r, a) {
            return function() {
              a = [r(this)];
              Array.prototype.push.apply(a, arguments);
              return f.apply(s(this), a);
            };
          }($function, getSelf, getReceiver);
      }
    },
    Closure_forwardInterceptedCallTo: function(receiver, $function) {
      var t2, stubName, arity, lookedUpFunction, t3, t4, $arguments,
        t1 = $.BoundClosure_selfFieldNameCache;
      if (t1 == null)
        t1 = $.BoundClosure_selfFieldNameCache = H.BoundClosure_computeFieldNamed("self");
      t2 = $.BoundClosure_receiverFieldNameCache;
      if (t2 == null)
        t2 = $.BoundClosure_receiverFieldNameCache = H.BoundClosure_computeFieldNamed("receiver");
      stubName = $function.$stubName;
      arity = $function.length;
      lookedUpFunction = receiver[stubName];
      t3 = $function == null ? lookedUpFunction == null : $function === lookedUpFunction;
      t4 = !t3 || arity >= 28;
      if (t4)
        return H.Closure_cspForwardInterceptedCall(arity, !t3, stubName, $function);
      if (arity === 1) {
        t1 = "return function(){return this." + H.S(t1) + "." + H.S(stubName) + "(this." + H.S(t2) + ");";
        t2 = $.Closure_functionCounter;
        if (typeof t2 !== "number")
          return t2.$add();
        $.Closure_functionCounter = t2 + 1;
        return new Function(t1 + t2 + "}")();
      }
      $arguments = "abcdefghijklmnopqrstuvwxyz".split("").splice(0, arity - 1).join(",");
      t1 = "return function(" + $arguments + "){return this." + H.S(t1) + "." + H.S(stubName) + "(this." + H.S(t2) + ", " + $arguments + ");";
      t2 = $.Closure_functionCounter;
      if (typeof t2 !== "number")
        return t2.$add();
      $.Closure_functionCounter = t2 + 1;
      return new Function(t1 + t2 + "}")();
    },
    closureFromTearOff: function(receiver, functions, applyTrampolineIndex, reflectionInfo, isStatic, isIntercepted, $name) {
      return H.Closure_fromTearOff(receiver, functions, H.intTypeCheck(applyTrampolineIndex), reflectionInfo, !!isStatic, !!isIntercepted, $name);
    },
    BoundClosure_selfOf: function(closure) {
      return closure._self;
    },
    BoundClosure_receiverOf: function(closure) {
      return closure._receiver;
    },
    BoundClosure_computeFieldNamed: function(fieldName) {
      var t1, i, $name,
        template = new H.BoundClosure("self", "target", "receiver", "name"),
        names = J.JSArray_markFixedList(Object.getOwnPropertyNames(template));
      for (t1 = names.length, i = 0; i < t1; ++i) {
        $name = names[i];
        if (template[$name] === fieldName)
          return $name;
      }
    },
    boolConversionCheck: function(value) {
      if (value == null)
        H.assertThrow("boolean expression must not be null");
      return value;
    },
    stringTypeCheck: function(value) {
      if (value == null)
        return value;
      if (typeof value === "string")
        return value;
      throw H.wrapException(H.TypeErrorImplementation$(value, "String"));
    },
    doubleTypeCheck: function(value) {
      if (value == null)
        return value;
      if (typeof value === "number")
        return value;
      throw H.wrapException(H.TypeErrorImplementation$(value, "double"));
    },
    numTypeCheck: function(value) {
      if (value == null)
        return value;
      if (typeof value === "number")
        return value;
      throw H.wrapException(H.TypeErrorImplementation$(value, "num"));
    },
    boolTypeCheck: function(value) {
      if (value == null)
        return value;
      if (typeof value === "boolean")
        return value;
      throw H.wrapException(H.TypeErrorImplementation$(value, "bool"));
    },
    intTypeCheck: function(value) {
      if (value == null)
        return value;
      if (typeof value === "number" && Math.floor(value) === value)
        return value;
      throw H.wrapException(H.TypeErrorImplementation$(value, "int"));
    },
    propertyTypeError: function(value, property) {
      throw H.wrapException(H.TypeErrorImplementation$(value, H.unminifyOrTag(H.stringTypeCheck(property).substring(3))));
    },
    propertyTypeCastError: function(value, property) {
      throw H.wrapException(H.CastErrorImplementation$(value, H.unminifyOrTag(H.stringTypeCheck(property).substring(3))));
    },
    interceptedTypeCheck: function(value, property) {
      if (value == null)
        return value;
      if ((typeof value === "object" || typeof value === "function") && J.getInterceptor$(value)[property])
        return value;
      H.propertyTypeError(value, property);
    },
    interceptedTypeCast: function(value, property) {
      var t1;
      if (value != null)
        t1 = (typeof value === "object" || typeof value === "function") && J.getInterceptor$(value)[property];
      else
        t1 = true;
      if (t1)
        return value;
      H.propertyTypeCastError(value, property);
    },
    numberOrStringSuperNativeTypeCheck: function(value, property) {
      if (value == null)
        return value;
      if (typeof value === "string")
        return value;
      if (typeof value === "number")
        return value;
      if (J.getInterceptor$(value)[property])
        return value;
      H.propertyTypeError(value, property);
    },
    stringSuperNativeTypeCheck: function(value, property) {
      if (value == null)
        return value;
      if (typeof value === "string")
        return value;
      if (J.getInterceptor$(value)[property])
        return value;
      H.propertyTypeError(value, property);
    },
    listTypeCheck: function(value) {
      if (value == null)
        return value;
      if (!!J.getInterceptor$(value).$isList)
        return value;
      throw H.wrapException(H.TypeErrorImplementation$(value, "List<dynamic>"));
    },
    listSuperNativeTypeCheck: function(value, property) {
      var t1;
      if (value == null)
        return value;
      t1 = J.getInterceptor$(value);
      if (!!t1.$isList)
        return value;
      if (t1[property])
        return value;
      H.propertyTypeError(value, property);
    },
    extractFunctionTypeObjectFromInternal: function(o) {
      var signature;
      if ("$signature" in o) {
        signature = o.$signature;
        if (typeof signature == "number")
          return init.types[H.intTypeCheck(signature)];
        else
          return o.$signature();
      }
      return;
    },
    functionTypeTest: function(value, functionTypeRti) {
      var functionTypeObject;
      if (typeof value == "function")
        return true;
      functionTypeObject = H.extractFunctionTypeObjectFromInternal(J.getInterceptor$(value));
      if (functionTypeObject == null)
        return false;
      return H._isFunctionSubtype(functionTypeObject, null, functionTypeRti, null);
    },
    functionTypeCheck: function(value, functionTypeRti) {
      var $self, t1;
      if (value == null)
        return value;
      if ($._inTypeAssertion)
        return value;
      $._inTypeAssertion = true;
      try {
        if (H.functionTypeTest(value, functionTypeRti))
          return value;
        $self = H.runtimeTypeToString(functionTypeRti);
        t1 = H.TypeErrorImplementation$(value, $self);
        throw H.wrapException(t1);
      } finally {
        $._inTypeAssertion = false;
      }
    },
    futureOrCheck: function(o, futureOrRti) {
      if (o != null && !H.checkSubtypeOfRuntimeType(o, futureOrRti))
        H.throwExpression(H.TypeErrorImplementation$(o, H.runtimeTypeToString(futureOrRti)));
      return o;
    },
    TypeErrorImplementation$: function(value, type) {
      return new H.TypeErrorImplementation("TypeError: " + P.Error_safeToString(value) + ": type '" + H._typeDescription(value) + "' is not a subtype of type '" + type + "'");
    },
    CastErrorImplementation$: function(value, type) {
      return new H.CastErrorImplementation("CastError: " + P.Error_safeToString(value) + ": type '" + H._typeDescription(value) + "' is not a subtype of type '" + type + "'");
    },
    _typeDescription: function(value) {
      var functionTypeObject,
        t1 = J.getInterceptor$(value);
      if (!!t1.$isClosure) {
        functionTypeObject = H.extractFunctionTypeObjectFromInternal(t1);
        if (functionTypeObject != null)
          return H.runtimeTypeToString(functionTypeObject);
        return "Closure";
      }
      return H.Primitives_objectTypeName(value);
    },
    assertThrow: function(message) {
      throw H.wrapException(new H._AssertionError(message));
    },
    throwCyclicInit: function(staticName) {
      throw H.wrapException(new P.CyclicInitializationError(H.stringTypeCheck(staticName)));
    },
    RuntimeError$: function(message) {
      return new H.RuntimeError(message);
    },
    getIsolateAffinityTag: function($name) {
      return init.getIsolateTag($name);
    },
    createRuntimeType: function(rti) {
      return new H.TypeImpl(rti);
    },
    setRuntimeTypeInfo: function(target, rti) {
      target.$ti = rti;
      return target;
    },
    getRuntimeTypeInfo: function(target) {
      if (target == null)
        return;
      return target.$ti;
    },
    getRuntimeTypeArguments: function(interceptor, object, substitutionName) {
      return H.substitute(interceptor["$as" + H.S(substitutionName)], H.getRuntimeTypeInfo(object));
    },
    getRuntimeTypeArgumentIntercepted: function(interceptor, target, substitutionName, index) {
      var $arguments;
      H.stringTypeCheck(substitutionName);
      H.intTypeCheck(index);
      $arguments = H.substitute(interceptor["$as" + H.S(substitutionName)], H.getRuntimeTypeInfo(target));
      return $arguments == null ? null : $arguments[index];
    },
    getRuntimeTypeArgument: function(target, substitutionName, index) {
      var $arguments;
      H.stringTypeCheck(substitutionName);
      H.intTypeCheck(index);
      $arguments = H.substitute(target["$as" + H.S(substitutionName)], H.getRuntimeTypeInfo(target));
      return $arguments == null ? null : $arguments[index];
    },
    getTypeArgumentByIndex: function(target, index) {
      var rti;
      H.intTypeCheck(index);
      rti = H.getRuntimeTypeInfo(target);
      return rti == null ? null : rti[index];
    },
    runtimeTypeToString: function(rti) {
      return H._runtimeTypeToString(rti, null);
    },
    _runtimeTypeToString: function(rti, genericContext) {
      var t1, t2;
      H.assertSubtype(genericContext, "$isList", [P.String], "$asList");
      if (rti == null)
        return "dynamic";
      if (rti === -1)
        return "void";
      if (typeof rti === "object" && rti !== null && rti.constructor === Array)
        return H.unminifyOrTag(rti[0].name) + H._joinArguments(rti, 1, genericContext);
      if (typeof rti == "function")
        return H.unminifyOrTag(rti.name);
      if (rti === -2)
        return "dynamic";
      if (typeof rti === "number") {
        H.intTypeCheck(rti);
        if (genericContext == null || rti < 0 || rti >= genericContext.length)
          return "unexpected-generic-index:" + rti;
        t1 = genericContext.length;
        t2 = t1 - rti - 1;
        if (t2 < 0 || t2 >= t1)
          return H.ioore(genericContext, t2);
        return H.S(genericContext[t2]);
      }
      if ('func' in rti)
        return H._functionRtiToString(rti, genericContext);
      if ('futureOr' in rti)
        return "FutureOr<" + H._runtimeTypeToString("type" in rti ? rti.type : null, genericContext) + ">";
      return "unknown-reified-type";
    },
    _functionRtiToString: function(rti, genericContext) {
      var boundsRti, outerContextLength, offset, i, i0, typeParameters, typeSep, t2, boundRti, returnTypeText, $arguments, argumentsText, sep, _i, argument, optionalArguments, namedArguments, t3, _s2_ = ", ",
        t1 = [P.String];
      H.assertSubtype(genericContext, "$isList", t1, "$asList");
      if ("bounds" in rti) {
        boundsRti = rti.bounds;
        if (genericContext == null) {
          genericContext = H.setRuntimeTypeInfo([], t1);
          outerContextLength = null;
        } else
          outerContextLength = genericContext.length;
        offset = genericContext.length;
        for (i = boundsRti.length, i0 = i; i0 > 0; --i0)
          C.JSArray_methods.add$1(genericContext, "T" + (offset + i0));
        for (typeParameters = "<", typeSep = "", i0 = 0; i0 < i; ++i0, typeSep = _s2_) {
          typeParameters += typeSep;
          t1 = genericContext.length;
          t2 = t1 - i0 - 1;
          if (t2 < 0)
            return H.ioore(genericContext, t2);
          typeParameters = C.JSString_methods.$add(typeParameters, genericContext[t2]);
          boundRti = boundsRti[i0];
          if (boundRti != null && boundRti !== P.Object)
            typeParameters += " extends " + H._runtimeTypeToString(boundRti, genericContext);
        }
        typeParameters += ">";
      } else {
        typeParameters = "";
        outerContextLength = null;
      }
      returnTypeText = !!rti.v ? "void" : H._runtimeTypeToString(rti.ret, genericContext);
      if ("args" in rti) {
        $arguments = rti.args;
        for (t1 = $arguments.length, argumentsText = "", sep = "", _i = 0; _i < t1; ++_i, sep = _s2_) {
          argument = $arguments[_i];
          argumentsText = argumentsText + sep + H._runtimeTypeToString(argument, genericContext);
        }
      } else {
        argumentsText = "";
        sep = "";
      }
      if ("opt" in rti) {
        optionalArguments = rti.opt;
        argumentsText += sep + "[";
        for (t1 = optionalArguments.length, sep = "", _i = 0; _i < t1; ++_i, sep = _s2_) {
          argument = optionalArguments[_i];
          argumentsText = argumentsText + sep + H._runtimeTypeToString(argument, genericContext);
        }
        argumentsText += "]";
      }
      if ("named" in rti) {
        namedArguments = rti.named;
        argumentsText += sep + "{";
        for (t1 = H.extractKeys(namedArguments), t2 = t1.length, sep = "", _i = 0; _i < t2; ++_i, sep = _s2_) {
          t3 = H.stringTypeCheck(t1[_i]);
          argumentsText = argumentsText + sep + H._runtimeTypeToString(namedArguments[t3], genericContext) + (" " + H.S(t3));
        }
        argumentsText += "}";
      }
      if (outerContextLength != null)
        genericContext.length = outerContextLength;
      return typeParameters + "(" + argumentsText + ") => " + returnTypeText;
    },
    _joinArguments: function(types, startIndex, genericContext) {
      var buffer, index, separator, allDynamic, t1, argument;
      H.assertSubtype(genericContext, "$isList", [P.String], "$asList");
      if (types == null)
        return "";
      buffer = new P.StringBuffer("");
      for (index = startIndex, separator = "", allDynamic = true, t1 = ""; index < types.length; ++index, separator = ", ") {
        buffer._contents = t1 + separator;
        argument = types[index];
        if (argument != null)
          allDynamic = false;
        t1 = buffer._contents += H._runtimeTypeToString(argument, genericContext);
      }
      return "<" + buffer.toString$0(0) + ">";
    },
    getRti: function(o) {
      var functionRti, type, rti,
        t1 = J.getInterceptor$(o);
      if (!!t1.$isClosure) {
        functionRti = H.extractFunctionTypeObjectFromInternal(t1);
        if (functionRti != null)
          return functionRti;
      }
      type = t1.constructor;
      if (typeof o != "object")
        return type;
      rti = H.getRuntimeTypeInfo(o);
      if (rti != null) {
        rti = rti.slice();
        rti.splice(0, 0, type);
        type = rti;
      }
      return type;
    },
    substitute: function(substitution, $arguments) {
      if (substitution == null)
        return $arguments;
      substitution = substitution.apply(null, $arguments);
      if (substitution == null)
        return;
      if (typeof substitution === "object" && substitution !== null && substitution.constructor === Array)
        return substitution;
      if (typeof substitution == "function")
        return substitution.apply(null, $arguments);
      return $arguments;
    },
    checkSubtype: function(object, isField, checks, asField) {
      var $arguments, interceptor;
      H.stringTypeCheck(isField);
      H.listTypeCheck(checks);
      H.stringTypeCheck(asField);
      if (object == null)
        return false;
      $arguments = H.getRuntimeTypeInfo(object);
      interceptor = J.getInterceptor$(object);
      if (interceptor[isField] == null)
        return false;
      return H.areSubtypes(H.substitute(interceptor[asField], $arguments), null, checks, null);
    },
    subtypeCast: function(object, isField, checks, asField) {
      H.stringTypeCheck(isField);
      H.listTypeCheck(checks);
      H.stringTypeCheck(asField);
      if (object == null)
        return object;
      if (H.checkSubtype(object, isField, checks, asField))
        return object;
      throw H.wrapException(H.CastErrorImplementation$(object, function(str, names) {
        return str.replace(/[^<,> ]+/g, function(m) {
          return names[m] || m;
        });
      }(H.unminifyOrTag(isField.substring(3)) + H._joinArguments(checks, 0, null), init.mangledGlobalNames)));
    },
    assertSubtype: function(object, isField, checks, asField) {
      H.stringTypeCheck(isField);
      H.listTypeCheck(checks);
      H.stringTypeCheck(asField);
      if (object == null)
        return object;
      if (H.checkSubtype(object, isField, checks, asField))
        return object;
      throw H.wrapException(H.TypeErrorImplementation$(object, function(str, names) {
        return str.replace(/[^<,> ]+/g, function(m) {
          return names[m] || m;
        });
      }(H.unminifyOrTag(isField.substring(3)) + H._joinArguments(checks, 0, null), init.mangledGlobalNames)));
    },
    assertIsSubtype: function(subtype, supertype, prefix, infix, suffix) {
      H.stringTypeCheck(prefix);
      H.stringTypeCheck(infix);
      H.stringTypeCheck(suffix);
      if (!H._isSubtype(subtype, null, supertype, null))
        H.throwTypeError("TypeError: " + H.S(prefix) + H.runtimeTypeToString(subtype) + H.S(infix) + H.runtimeTypeToString(supertype) + H.S(suffix));
    },
    throwTypeError: function(message) {
      throw H.wrapException(new H.TypeErrorImplementation(H.stringTypeCheck(message)));
    },
    areSubtypes: function(s, sEnv, t, tEnv) {
      var len, i;
      if (t == null)
        return true;
      if (s == null) {
        len = t.length;
        for (i = 0; i < len; ++i)
          if (!H._isSubtype(null, null, t[i], tEnv))
            return false;
        return true;
      }
      len = s.length;
      for (i = 0; i < len; ++i)
        if (!H._isSubtype(s[i], sEnv, t[i], tEnv))
          return false;
      return true;
    },
    computeSignature: function(signature, context, contextName) {
      return signature.apply(context, H.substitute(J.getInterceptor$(context)["$as" + H.S(contextName)], H.getRuntimeTypeInfo(context)));
    },
    isSupertypeOfNullRecursive: function(type) {
      var typeArgument;
      if (typeof type === "number")
        return false;
      if ('futureOr' in type) {
        typeArgument = "type" in type ? type.type : null;
        return type == null || type.name === "Object" || type.name === "Null" || type === -1 || type === -2 || H.isSupertypeOfNullRecursive(typeArgument);
      }
      return false;
    },
    checkSubtypeOfRuntimeType: function(o, t) {
      var type, rti;
      if (o == null)
        return t == null || t.name === "Object" || t.name === "Null" || t === -1 || t === -2 || H.isSupertypeOfNullRecursive(t);
      if (t == null || t === -1 || t.name === "Object" || t === -2)
        return true;
      if (typeof t == "object") {
        if ('futureOr' in t)
          if (H.checkSubtypeOfRuntimeType(o, "type" in t ? t.type : null))
            return true;
        if ('func' in t)
          return H.functionTypeTest(o, t);
      }
      type = J.getInterceptor$(o).constructor;
      rti = H.getRuntimeTypeInfo(o);
      if (rti != null) {
        rti = rti.slice();
        rti.splice(0, 0, type);
        type = rti;
      }
      return H._isSubtype(type, null, t, null);
    },
    subtypeOfRuntimeTypeCast: function(object, type) {
      if (object != null && !H.checkSubtypeOfRuntimeType(object, type))
        throw H.wrapException(H.CastErrorImplementation$(object, H.runtimeTypeToString(type)));
      return object;
    },
    assertSubtypeOfRuntimeType: function(object, type) {
      if (object != null && !H.checkSubtypeOfRuntimeType(object, type))
        throw H.wrapException(H.TypeErrorImplementation$(object, H.runtimeTypeToString(type)));
      return object;
    },
    _isSubtype: function(s, sEnv, t, tEnv) {
      var t1, typeOfS, tTypeArgument, futureSubstitution, futureArguments, t2, typeOfT, typeOfTString, substitution, _null = null;
      if (s === t)
        return true;
      if (t == null || t === -1 || t.name === "Object" || t === -2)
        return true;
      if (s === -2)
        return true;
      if (s == null || s === -1 || s.name === "Object" || s === -2) {
        if (typeof t === "number")
          return false;
        if ('futureOr' in t)
          return H._isSubtype(s, sEnv, "type" in t ? t.type : _null, tEnv);
        return false;
      }
      if (typeof s === "number")
        return false;
      if (typeof t === "number")
        return false;
      if (s.name === "Null")
        return true;
      if ('func' in t)
        return H._isFunctionSubtype(s, sEnv, t, tEnv);
      if ('func' in s)
        return t.name === "Function";
      t1 = typeof s === "object" && s !== null && s.constructor === Array;
      typeOfS = t1 ? s[0] : s;
      if ('futureOr' in t) {
        tTypeArgument = "type" in t ? t.type : _null;
        if ('futureOr' in s)
          return H._isSubtype("type" in s ? s.type : _null, sEnv, tTypeArgument, tEnv);
        else if (H._isSubtype(s, sEnv, tTypeArgument, tEnv))
          return true;
        else {
          if (!('$is' + "Future" in typeOfS.prototype))
            return false;
          futureSubstitution = typeOfS.prototype["$as" + "Future"];
          futureArguments = H.substitute(futureSubstitution, t1 ? s.slice(1) : _null);
          return H._isSubtype(typeof futureArguments === "object" && futureArguments !== null && futureArguments.constructor === Array ? futureArguments[0] : _null, sEnv, tTypeArgument, tEnv);
        }
      }
      t2 = typeof t === "object" && t !== null && t.constructor === Array;
      typeOfT = t2 ? t[0] : t;
      if (typeOfT !== typeOfS) {
        typeOfTString = typeOfT.name;
        if (!('$is' + typeOfTString in typeOfS.prototype))
          return false;
        substitution = typeOfS.prototype["$as" + typeOfTString];
      } else
        substitution = _null;
      if (!t2)
        return true;
      t1 = t1 ? s.slice(1) : _null;
      t2 = t.slice(1);
      return H.areSubtypes(H.substitute(substitution, t1), sEnv, t2, tEnv);
    },
    _isFunctionSubtype: function(s, sEnv, t, tEnv) {
      var sBounds, tBounds, sParameterTypes, tParameterTypes, sOptionalParameterTypes, tOptionalParameterTypes, sParametersLen, tParametersLen, sOptionalParametersLen, tOptionalParametersLen, pos, tPos, sPos, sNamedParameters, tNamedParameters;
      if (!('func' in s))
        return false;
      if ("bounds" in s) {
        if (!("bounds" in t))
          return false;
        sBounds = s.bounds;
        tBounds = t.bounds;
        if (sBounds.length !== tBounds.length)
          return false;
      } else if ("bounds" in t)
        return false;
      if (!H._isSubtype(s.ret, sEnv, t.ret, tEnv))
        return false;
      sParameterTypes = s.args;
      tParameterTypes = t.args;
      sOptionalParameterTypes = s.opt;
      tOptionalParameterTypes = t.opt;
      sParametersLen = sParameterTypes != null ? sParameterTypes.length : 0;
      tParametersLen = tParameterTypes != null ? tParameterTypes.length : 0;
      sOptionalParametersLen = sOptionalParameterTypes != null ? sOptionalParameterTypes.length : 0;
      tOptionalParametersLen = tOptionalParameterTypes != null ? tOptionalParameterTypes.length : 0;
      if (sParametersLen > tParametersLen)
        return false;
      if (sParametersLen + sOptionalParametersLen < tParametersLen + tOptionalParametersLen)
        return false;
      for (pos = 0; pos < sParametersLen; ++pos)
        if (!H._isSubtype(tParameterTypes[pos], tEnv, sParameterTypes[pos], sEnv))
          return false;
      for (tPos = pos, sPos = 0; tPos < tParametersLen; ++sPos, ++tPos)
        if (!H._isSubtype(tParameterTypes[tPos], tEnv, sOptionalParameterTypes[sPos], sEnv))
          return false;
      for (tPos = 0; tPos < tOptionalParametersLen; ++sPos, ++tPos)
        if (!H._isSubtype(tOptionalParameterTypes[tPos], tEnv, sOptionalParameterTypes[sPos], sEnv))
          return false;
      sNamedParameters = s.named;
      tNamedParameters = t.named;
      if (tNamedParameters == null)
        return true;
      if (sNamedParameters == null)
        return false;
      return H.namedParametersSubtypeCheck(sNamedParameters, sEnv, tNamedParameters, tEnv);
    },
    namedParametersSubtypeCheck: function(s, sEnv, t, tEnv) {
      var t1, i, $name,
        names = Object.getOwnPropertyNames(t);
      for (t1 = names.length, i = 0; i < t1; ++i) {
        $name = names[i];
        if (!Object.hasOwnProperty.call(s, $name))
          return false;
        if (!H._isSubtype(t[$name], tEnv, s[$name], sEnv))
          return false;
      }
      return true;
    },
    instantiatedGenericFunctionType: function(genericFunctionRti, parameters) {
      if (genericFunctionRti == null)
        return;
      return H.finishBindInstantiatedFunctionType(genericFunctionRti, {func: 1}, parameters, 0);
    },
    finishBindInstantiatedFunctionType: function(rti, result, parameters, depth) {
      var namedParameters, boundNamed, names, t1, _i, $name;
      if ("v" in rti)
        result.v = rti.v;
      else if ("ret" in rti)
        result.ret = H.bindInstantiatedType(rti.ret, parameters, depth);
      if ("args" in rti)
        result.args = H.bindInstantiatedTypes(rti.args, parameters, depth);
      if ("opt" in rti)
        result.opt = H.bindInstantiatedTypes(rti.opt, parameters, depth);
      if ("named" in rti) {
        namedParameters = rti.named;
        boundNamed = {};
        names = Object.keys(namedParameters);
        for (t1 = names.length, _i = 0; _i < t1; ++_i) {
          $name = H.stringTypeCheck(names[_i]);
          boundNamed[$name] = H.bindInstantiatedType(namedParameters[$name], parameters, depth);
        }
        result.named = boundNamed;
      }
      return result;
    },
    bindInstantiatedType: function(rti, parameters, depth) {
      var result, bounds;
      if (rti == null)
        return rti;
      if (rti === -1)
        return rti;
      if (typeof rti == "function")
        return rti;
      if (typeof rti === "number") {
        if (rti < depth)
          return rti;
        return parameters[rti - depth];
      }
      if (typeof rti === "object" && rti !== null && rti.constructor === Array)
        return H.bindInstantiatedTypes(rti, parameters, depth);
      if ('func' in rti) {
        result = {func: 1};
        if ("bounds" in rti) {
          bounds = rti.bounds;
          depth += bounds.length;
          result.bounds = H.bindInstantiatedTypes(bounds, parameters, depth);
        }
        return H.finishBindInstantiatedFunctionType(rti, result, parameters, depth);
      }
      throw H.wrapException(P.ArgumentError$("Unknown RTI format in bindInstantiatedType."));
    },
    bindInstantiatedTypes: function(rti, parameters, depth) {
      var t1, i,
        array = rti.slice();
      for (t1 = array.length, i = 0; i < t1; ++i)
        C.JSArray_methods.$indexSet(array, i, H.bindInstantiatedType(array[i], parameters, depth));
      return array;
    },
    JsLinkedHashMap_JsLinkedHashMap$es6: function($K, $V) {
      return new H.JsLinkedHashMap([$K, $V]);
    },
    defineProperty: function(obj, property, value) {
      Object.defineProperty(obj, H.stringTypeCheck(property), {value: value, enumerable: false, writable: true, configurable: true});
    },
    lookupAndCacheInterceptor: function(obj) {
      var interceptor, interceptorClass, mark, t1,
        tag = H.stringTypeCheck($.getTagFunction.call$1(obj)),
        record = $.dispatchRecordsForInstanceTags[tag];
      if (record != null) {
        Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
        return record.i;
      }
      interceptor = $.interceptorsForUncacheableTags[tag];
      if (interceptor != null)
        return interceptor;
      interceptorClass = init.interceptorsByTag[tag];
      if (interceptorClass == null) {
        tag = H.stringTypeCheck($.alternateTagFunction.call$2(obj, tag));
        if (tag != null) {
          record = $.dispatchRecordsForInstanceTags[tag];
          if (record != null) {
            Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
            return record.i;
          }
          interceptor = $.interceptorsForUncacheableTags[tag];
          if (interceptor != null)
            return interceptor;
          interceptorClass = init.interceptorsByTag[tag];
        }
      }
      if (interceptorClass == null)
        return;
      interceptor = interceptorClass.prototype;
      mark = tag[0];
      if (mark === "!") {
        record = H.makeLeafDispatchRecord(interceptor);
        $.dispatchRecordsForInstanceTags[tag] = record;
        Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
        return record.i;
      }
      if (mark === "~") {
        $.interceptorsForUncacheableTags[tag] = interceptor;
        return interceptor;
      }
      if (mark === "-") {
        t1 = H.makeLeafDispatchRecord(interceptor);
        Object.defineProperty(Object.getPrototypeOf(obj), init.dispatchPropertyName, {value: t1, enumerable: false, writable: true, configurable: true});
        return t1.i;
      }
      if (mark === "+")
        return H.patchInteriorProto(obj, interceptor);
      if (mark === "*")
        throw H.wrapException(P.UnimplementedError$(tag));
      if (init.leafTags[tag] === true) {
        t1 = H.makeLeafDispatchRecord(interceptor);
        Object.defineProperty(Object.getPrototypeOf(obj), init.dispatchPropertyName, {value: t1, enumerable: false, writable: true, configurable: true});
        return t1.i;
      } else
        return H.patchInteriorProto(obj, interceptor);
    },
    patchInteriorProto: function(obj, interceptor) {
      var proto = Object.getPrototypeOf(obj);
      Object.defineProperty(proto, init.dispatchPropertyName, {value: J.makeDispatchRecord(interceptor, proto, null, null), enumerable: false, writable: true, configurable: true});
      return interceptor;
    },
    makeLeafDispatchRecord: function(interceptor) {
      return J.makeDispatchRecord(interceptor, false, null, !!interceptor.$isJavaScriptIndexingBehavior);
    },
    makeDefaultDispatchRecord: function(tag, interceptorClass, proto) {
      var interceptor = interceptorClass.prototype;
      if (init.leafTags[tag] === true)
        return H.makeLeafDispatchRecord(interceptor);
      else
        return J.makeDispatchRecord(interceptor, proto, null, null);
    },
    initNativeDispatch: function() {
      if (true === $.initNativeDispatchFlag)
        return;
      $.initNativeDispatchFlag = true;
      H.initNativeDispatchContinue();
    },
    initNativeDispatchContinue: function() {
      var map, tags, fun, i, tag, proto, record, interceptorClass;
      $.dispatchRecordsForInstanceTags = Object.create(null);
      $.interceptorsForUncacheableTags = Object.create(null);
      H.initHooks();
      map = init.interceptorsByTag;
      tags = Object.getOwnPropertyNames(map);
      if (typeof window != "undefined") {
        window;
        fun = function() {
        };
        for (i = 0; i < tags.length; ++i) {
          tag = tags[i];
          proto = $.prototypeForTagFunction.call$1(tag);
          if (proto != null) {
            record = H.makeDefaultDispatchRecord(tag, map[tag], proto);
            if (record != null) {
              Object.defineProperty(proto, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
              fun.prototype = proto;
            }
          }
        }
      }
      for (i = 0; i < tags.length; ++i) {
        tag = tags[i];
        if (/^[A-Za-z_]/.test(tag)) {
          interceptorClass = map[tag];
          map["!" + tag] = interceptorClass;
          map["~" + tag] = interceptorClass;
          map["-" + tag] = interceptorClass;
          map["+" + tag] = interceptorClass;
          map["*" + tag] = interceptorClass;
        }
      }
    },
    initHooks: function() {
      var transformers, i, transformer, getTag, getUnknownTag, prototypeForTag,
        hooks = C.C_JS_CONST0();
      hooks = H.applyHooksTransformer(C.C_JS_CONST1, H.applyHooksTransformer(C.C_JS_CONST2, H.applyHooksTransformer(C.C_JS_CONST3, H.applyHooksTransformer(C.C_JS_CONST3, H.applyHooksTransformer(C.C_JS_CONST4, H.applyHooksTransformer(C.C_JS_CONST5, H.applyHooksTransformer(C.C_JS_CONST6(C.C_JS_CONST), hooks)))))));
      if (typeof dartNativeDispatchHooksTransformer != "undefined") {
        transformers = dartNativeDispatchHooksTransformer;
        if (typeof transformers == "function")
          transformers = [transformers];
        if (transformers.constructor == Array)
          for (i = 0; i < transformers.length; ++i) {
            transformer = transformers[i];
            if (typeof transformer == "function")
              hooks = transformer(hooks) || hooks;
          }
      }
      getTag = hooks.getTag;
      getUnknownTag = hooks.getUnknownTag;
      prototypeForTag = hooks.prototypeForTag;
      $.getTagFunction = new H.initHooks_closure(getTag);
      $.alternateTagFunction = new H.initHooks_closure0(getUnknownTag);
      $.prototypeForTagFunction = new H.initHooks_closure1(prototypeForTag);
    },
    applyHooksTransformer: function(transformer, hooks) {
      return transformer(hooks) || hooks;
    },
    JSSyntaxRegExp_makeNative: function(source, multiLine, caseSensitive, global) {
      var m = multiLine ? "m" : "",
        i = caseSensitive ? "" : "i",
        g = global ? "g" : "",
        regexp = function(source, modifiers) {
          try {
            return new RegExp(source, modifiers);
          } catch (e) {
            return e;
          }
        }(source, m + i + g);
      if (regexp instanceof RegExp)
        return regexp;
      throw H.wrapException(P.FormatException$("Illegal RegExp pattern (" + String(regexp) + ")", source, null));
    },
    stringContainsUnchecked: function(receiver, other, startIndex) {
      var t1 = receiver.indexOf(other, startIndex);
      return t1 >= 0;
    },
    quoteStringForRegExp: function(string) {
      if (/[[\]{}()*+?.\\^$|]/.test(string))
        return string.replace(/[[\]{}()*+?.\\^$|]/g, "\\$&");
      return string;
    },
    ConstantMapView: function ConstantMapView(t0, t1) {
      this._collection$_map = t0;
      this.$ti = t1;
    },
    ConstantMap: function ConstantMap() {
    },
    ConstantStringMap: function ConstantStringMap(t0, t1, t2, t3) {
      var _ = this;
      _.__js_helper$_length = t0;
      _._jsObject = t1;
      _._keys = t2;
      _.$ti = t3;
    },
    ConstantStringMap_values_closure: function ConstantStringMap_values_closure(t0) {
      this.$this = t0;
    },
    _ConstantMapKeyIterable: function _ConstantMapKeyIterable(t0, t1) {
      this._map = t0;
      this.$ti = t1;
    },
    GeneralConstantMap: function GeneralConstantMap(t0, t1) {
      this._jsData = t0;
      this.$ti = t1;
    },
    Instantiation: function Instantiation() {
    },
    Instantiation1: function Instantiation1(t0, t1) {
      this._genericClosure = t0;
      this.$ti = t1;
    },
    JSInvocationMirror: function JSInvocationMirror(t0, t1, t2, t3, t4) {
      var _ = this;
      _._memberName = t0;
      _._kind = t1;
      _._arguments = t2;
      _._namedArgumentNames = t3;
      _._typeArgumentCount = t4;
    },
    Primitives_initTicker_closure: function Primitives_initTicker_closure(t0) {
      this.performance = t0;
    },
    Primitives_functionNoSuchMethod_closure: function Primitives_functionNoSuchMethod_closure(t0, t1, t2) {
      this._box_0 = t0;
      this.namedArgumentList = t1;
      this.$arguments = t2;
    },
    TypeErrorDecoder: function TypeErrorDecoder(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _._pattern = t0;
      _._arguments = t1;
      _._argumentsExpr = t2;
      _._expr = t3;
      _._method = t4;
      _._receiver = t5;
    },
    NullError: function NullError(t0, t1) {
      this._message = t0;
      this._method = t1;
    },
    JsNoSuchMethodError: function JsNoSuchMethodError(t0, t1, t2) {
      this._message = t0;
      this._method = t1;
      this._receiver = t2;
    },
    UnknownJsTypeError: function UnknownJsTypeError(t0) {
      this._message = t0;
    },
    ExceptionAndStackTrace: function ExceptionAndStackTrace(t0, t1) {
      this.dartException = t0;
      this.stackTrace = t1;
    },
    unwrapException_saveStackTrace: function unwrapException_saveStackTrace(t0) {
      this.ex = t0;
    },
    _StackTrace: function _StackTrace(t0) {
      this._exception = t0;
      this._trace = null;
    },
    Closure: function Closure() {
    },
    TearOffClosure: function TearOffClosure() {
    },
    StaticClosure: function StaticClosure() {
    },
    BoundClosure: function BoundClosure(t0, t1, t2, t3) {
      var _ = this;
      _._self = t0;
      _._target = t1;
      _._receiver = t2;
      _.__js_helper$_name = t3;
    },
    TypeErrorImplementation: function TypeErrorImplementation(t0) {
      this.message = t0;
    },
    CastErrorImplementation: function CastErrorImplementation(t0) {
      this.message = t0;
    },
    RuntimeError: function RuntimeError(t0) {
      this.message = t0;
    },
    _AssertionError: function _AssertionError(t0) {
      this.message = t0;
    },
    TypeImpl: function TypeImpl(t0) {
      this._rti = t0;
      this._hashCode = this.__typeName = null;
    },
    JsLinkedHashMap: function JsLinkedHashMap(t0) {
      var _ = this;
      _.__js_helper$_length = 0;
      _._last = _._first = _._rest = _._nums = _._strings = null;
      _._modifications = 0;
      _.$ti = t0;
    },
    JsLinkedHashMap_values_closure: function JsLinkedHashMap_values_closure(t0) {
      this.$this = t0;
    },
    JsLinkedHashMap_addAll_closure: function JsLinkedHashMap_addAll_closure(t0) {
      this.$this = t0;
    },
    LinkedHashMapCell: function LinkedHashMapCell(t0, t1) {
      var _ = this;
      _.hashMapCellKey = t0;
      _.hashMapCellValue = t1;
      _._previous = _._next = null;
    },
    LinkedHashMapKeyIterable: function LinkedHashMapKeyIterable(t0, t1) {
      this._map = t0;
      this.$ti = t1;
    },
    LinkedHashMapKeyIterator: function LinkedHashMapKeyIterator(t0, t1, t2) {
      var _ = this;
      _._map = t0;
      _._modifications = t1;
      _.__js_helper$_current = _._cell = null;
      _.$ti = t2;
    },
    initHooks_closure: function initHooks_closure(t0) {
      this.getTag = t0;
    },
    initHooks_closure0: function initHooks_closure0(t0) {
      this.getUnknownTag = t0;
    },
    initHooks_closure1: function initHooks_closure1(t0) {
      this.prototypeForTag = t0;
    },
    JSSyntaxRegExp: function JSSyntaxRegExp(t0, t1) {
      var _ = this;
      _.pattern = t0;
      _._nativeRegExp = t1;
      _._nativeAnchoredRegExp = _._nativeGlobalRegExp = null;
    },
    _MatchImplementation: function _MatchImplementation(t0) {
      this._match = t0;
    },
    StringMatch: function StringMatch(t0, t1) {
      this.start = t0;
      this.pattern = t1;
    },
    _checkViewArguments: function(buffer, offsetInBytes, $length) {
      if (typeof offsetInBytes !== "number" || Math.floor(offsetInBytes) !== offsetInBytes)
        throw H.wrapException(P.ArgumentError$("Invalid view offsetInBytes " + H.S(offsetInBytes)));
    },
    _ensureNativeList: function(list) {
      return list;
    },
    NativeByteData_NativeByteData$view: function(buffer, offsetInBytes, $length) {
      H._checkViewArguments(buffer, offsetInBytes, $length);
      return $length == null ? new DataView(buffer, offsetInBytes) : new DataView(buffer, offsetInBytes, $length);
    },
    NativeInt32List_NativeInt32List: function($length) {
      return new Int32Array($length);
    },
    NativeInt8List__create1: function(arg) {
      return new Int8Array(arg);
    },
    NativeUint16List__create1: function(arg) {
      return new Uint16Array(arg);
    },
    NativeUint8List_NativeUint8List$view: function(buffer, offsetInBytes, $length) {
      H._checkViewArguments(buffer, offsetInBytes, $length);
      return $length == null ? new Uint8Array(buffer, offsetInBytes) : new Uint8Array(buffer, offsetInBytes, $length);
    },
    _checkValidIndex: function(index, list, $length) {
      if (index >>> 0 !== index || index >= $length)
        throw H.wrapException(H.diagnoseIndexError(list, index));
    },
    _checkValidRange: function(start, end, $length) {
      var t1;
      if (!(start >>> 0 !== start))
        t1 = end >>> 0 !== end || start > end || end > $length;
      else
        t1 = true;
      if (t1)
        throw H.wrapException(H.diagnoseRangeError(start, end, $length));
      return end;
    },
    NativeByteBuffer: function NativeByteBuffer() {
    },
    NativeTypedData: function NativeTypedData() {
    },
    NativeByteData: function NativeByteData() {
    },
    NativeTypedArray: function NativeTypedArray() {
    },
    NativeTypedArrayOfDouble: function NativeTypedArrayOfDouble() {
    },
    NativeTypedArrayOfInt: function NativeTypedArrayOfInt() {
    },
    NativeFloat32List: function NativeFloat32List() {
    },
    NativeFloat64List: function NativeFloat64List() {
    },
    NativeInt16List: function NativeInt16List() {
    },
    NativeInt32List: function NativeInt32List() {
    },
    NativeInt8List: function NativeInt8List() {
    },
    NativeUint16List: function NativeUint16List() {
    },
    NativeUint32List: function NativeUint32List() {
    },
    NativeUint8ClampedList: function NativeUint8ClampedList() {
    },
    NativeUint8List: function NativeUint8List() {
    },
    _NativeTypedArrayOfDouble_NativeTypedArray_ListMixin: function _NativeTypedArrayOfDouble_NativeTypedArray_ListMixin() {
    },
    _NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin: function _NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin() {
    },
    _NativeTypedArrayOfInt_NativeTypedArray_ListMixin: function _NativeTypedArrayOfInt_NativeTypedArray_ListMixin() {
    },
    _NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin: function _NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin() {
    },
    extractKeys: function(victim) {
      return J.JSArray_JSArray$markFixed(victim ? Object.keys(victim) : [], null);
    },
    printString: function(string) {
      if (typeof dartPrint == "function") {
        dartPrint(string);
        return;
      }
      if (typeof console == "object" && typeof console.log != "undefined") {
        console.log(string);
        return;
      }
      if (typeof window == "object")
        return;
      if (typeof print == "function") {
        print(string);
        return;
      }
      throw "Unable to print message: " + String(string);
    }
  },
  J = {
    makeDispatchRecord: function(interceptor, proto, extension, indexability) {
      return {i: interceptor, p: proto, e: extension, x: indexability};
    },
    getNativeInterceptor: function(object) {
      var proto, objectProto, $constructor, interceptor,
        record = object[init.dispatchPropertyName];
      if (record == null)
        if ($.initNativeDispatchFlag == null) {
          H.initNativeDispatch();
          record = object[init.dispatchPropertyName];
        }
      if (record != null) {
        proto = record.p;
        if (false === proto)
          return record.i;
        if (true === proto)
          return object;
        objectProto = Object.getPrototypeOf(object);
        if (proto === objectProto)
          return record.i;
        if (record.e === objectProto)
          throw H.wrapException(P.UnimplementedError$("Return interceptor for " + H.S(proto(object, record))));
      }
      $constructor = object.constructor;
      interceptor = $constructor == null ? null : $constructor[$.$get$JS_INTEROP_INTERCEPTOR_TAG()];
      if (interceptor != null)
        return interceptor;
      interceptor = H.lookupAndCacheInterceptor(object);
      if (interceptor != null)
        return interceptor;
      if (typeof object == "function")
        return C.JavaScriptFunction_methods;
      proto = Object.getPrototypeOf(object);
      if (proto == null)
        return C.PlainJavaScriptObject_methods;
      if (proto === Object.prototype)
        return C.PlainJavaScriptObject_methods;
      if (typeof $constructor == "function") {
        Object.defineProperty($constructor, $.$get$JS_INTEROP_INTERCEPTOR_TAG(), {value: C.UnknownJavaScriptObject_methods, enumerable: false, writable: true, configurable: true});
        return C.UnknownJavaScriptObject_methods;
      }
      return C.UnknownJavaScriptObject_methods;
    },
    JSArray_JSArray$fixed: function($length, $E) {
      if (typeof $length !== "number" || Math.floor($length) !== $length)
        throw H.wrapException(P.ArgumentError$value($length, "length", "is not an integer"));
      if ($length < 0 || $length > 4294967295)
        throw H.wrapException(P.RangeError$range($length, 0, 4294967295, "length", null));
      return J.JSArray_JSArray$markFixed(new Array($length), $E);
    },
    JSArray_JSArray$markFixed: function(allocation, $E) {
      return J.JSArray_markFixedList(H.setRuntimeTypeInfo(allocation, [$E]));
    },
    JSArray_markFixedList: function(list) {
      H.listTypeCheck(list);
      list.fixed$length = Array;
      return list;
    },
    JSArray_markUnmodifiableList: function(list) {
      list.fixed$length = Array;
      list.immutable$list = Array;
      return list;
    },
    JSArray__compareAny: function(a, b) {
      return J.compareTo$1$ns(H.numberOrStringSuperNativeTypeCheck(a, "$isComparable"), H.numberOrStringSuperNativeTypeCheck(b, "$isComparable"));
    },
    JSString__isWhitespace: function(codeUnit) {
      if (codeUnit < 256)
        switch (codeUnit) {
          case 9:
          case 10:
          case 11:
          case 12:
          case 13:
          case 32:
          case 133:
          case 160:
            return true;
          default:
            return false;
        }
      switch (codeUnit) {
        case 5760:
        case 8192:
        case 8193:
        case 8194:
        case 8195:
        case 8196:
        case 8197:
        case 8198:
        case 8199:
        case 8200:
        case 8201:
        case 8202:
        case 8232:
        case 8233:
        case 8239:
        case 8287:
        case 12288:
        case 65279:
          return true;
        default:
          return false;
      }
    },
    JSString__skipLeadingWhitespace: function(string, index) {
      var t1, codeUnit;
      for (t1 = string.length; index < t1;) {
        codeUnit = C.JSString_methods._codeUnitAt$1(string, index);
        if (codeUnit !== 32 && codeUnit !== 13 && !J.JSString__isWhitespace(codeUnit))
          break;
        ++index;
      }
      return index;
    },
    JSString__skipTrailingWhitespace: function(string, index) {
      var index0, codeUnit;
      for (; index > 0; index = index0) {
        index0 = index - 1;
        codeUnit = C.JSString_methods.codeUnitAt$1(string, index0);
        if (codeUnit !== 32 && codeUnit !== 13 && !J.JSString__isWhitespace(codeUnit))
          break;
      }
      return index;
    },
    getInterceptor$: function(receiver) {
      if (typeof receiver == "number") {
        if (Math.floor(receiver) == receiver)
          return J.JSInt.prototype;
        return J.JSDouble.prototype;
      }
      if (typeof receiver == "string")
        return J.JSString.prototype;
      if (receiver == null)
        return J.JSNull.prototype;
      if (typeof receiver == "boolean")
        return J.JSBool.prototype;
      if (receiver.constructor == Array)
        return J.JSArray.prototype;
      if (typeof receiver != "object") {
        if (typeof receiver == "function")
          return J.JavaScriptFunction.prototype;
        return receiver;
      }
      if (receiver instanceof P.Object)
        return receiver;
      return J.getNativeInterceptor(receiver);
    },
    getInterceptor$ansx: function(receiver) {
      if (typeof receiver == "number")
        return J.JSNumber.prototype;
      if (typeof receiver == "string")
        return J.JSString.prototype;
      if (receiver == null)
        return receiver;
      if (receiver.constructor == Array)
        return J.JSArray.prototype;
      if (typeof receiver != "object") {
        if (typeof receiver == "function")
          return J.JavaScriptFunction.prototype;
        return receiver;
      }
      if (receiver instanceof P.Object)
        return receiver;
      return J.getNativeInterceptor(receiver);
    },
    getInterceptor$asx: function(receiver) {
      if (typeof receiver == "string")
        return J.JSString.prototype;
      if (receiver == null)
        return receiver;
      if (receiver.constructor == Array)
        return J.JSArray.prototype;
      if (typeof receiver != "object") {
        if (typeof receiver == "function")
          return J.JavaScriptFunction.prototype;
        return receiver;
      }
      if (receiver instanceof P.Object)
        return receiver;
      return J.getNativeInterceptor(receiver);
    },
    getInterceptor$ax: function(receiver) {
      if (receiver == null)
        return receiver;
      if (receiver.constructor == Array)
        return J.JSArray.prototype;
      if (typeof receiver != "object") {
        if (typeof receiver == "function")
          return J.JavaScriptFunction.prototype;
        return receiver;
      }
      if (receiver instanceof P.Object)
        return receiver;
      return J.getNativeInterceptor(receiver);
    },
    getInterceptor$in: function(receiver) {
      if (typeof receiver == "number") {
        if (Math.floor(receiver) == receiver)
          return J.JSInt.prototype;
        return J.JSNumber.prototype;
      }
      if (receiver == null)
        return receiver;
      if (!(receiver instanceof P.Object))
        return J.UnknownJavaScriptObject.prototype;
      return receiver;
    },
    getInterceptor$n: function(receiver) {
      if (typeof receiver == "number")
        return J.JSNumber.prototype;
      if (receiver == null)
        return receiver;
      if (!(receiver instanceof P.Object))
        return J.UnknownJavaScriptObject.prototype;
      return receiver;
    },
    getInterceptor$ns: function(receiver) {
      if (typeof receiver == "number")
        return J.JSNumber.prototype;
      if (typeof receiver == "string")
        return J.JSString.prototype;
      if (receiver == null)
        return receiver;
      if (!(receiver instanceof P.Object))
        return J.UnknownJavaScriptObject.prototype;
      return receiver;
    },
    getInterceptor$s: function(receiver) {
      if (typeof receiver == "string")
        return J.JSString.prototype;
      if (receiver == null)
        return receiver;
      if (!(receiver instanceof P.Object))
        return J.UnknownJavaScriptObject.prototype;
      return receiver;
    },
    getInterceptor$x: function(receiver) {
      if (receiver == null)
        return receiver;
      if (typeof receiver != "object") {
        if (typeof receiver == "function")
          return J.JavaScriptFunction.prototype;
        return receiver;
      }
      if (receiver instanceof P.Object)
        return receiver;
      return J.getNativeInterceptor(receiver);
    },
    getInterceptor$z: function(receiver) {
      if (receiver == null)
        return receiver;
      if (!(receiver instanceof P.Object))
        return J.UnknownJavaScriptObject.prototype;
      return receiver;
    },
    set$color$x: function(receiver, value) {
      return J.getInterceptor$x(receiver).set$color(receiver, value);
    },
    set$length$asx: function(receiver, value) {
      return J.getInterceptor$asx(receiver).set$length(receiver, value);
    },
    get$attributes$x: function(receiver) {
      return J.getInterceptor$x(receiver).get$attributes(receiver);
    },
    get$children$x: function(receiver) {
      return J.getInterceptor$x(receiver).get$children(receiver);
    },
    get$error$z: function(receiver) {
      return J.getInterceptor$z(receiver).get$error(receiver);
    },
    get$hashCode$: function(receiver) {
      return J.getInterceptor$(receiver).get$hashCode(receiver);
    },
    get$isEmpty$asx: function(receiver) {
      return J.getInterceptor$asx(receiver).get$isEmpty(receiver);
    },
    get$isNotEmpty$asx: function(receiver) {
      return J.getInterceptor$asx(receiver).get$isNotEmpty(receiver);
    },
    get$iterator$ax: function(receiver) {
      return J.getInterceptor$ax(receiver).get$iterator(receiver);
    },
    get$last$ax: function(receiver) {
      return J.getInterceptor$ax(receiver).get$last(receiver);
    },
    get$length$asx: function(receiver) {
      return J.getInterceptor$asx(receiver).get$length(receiver);
    },
    get$offset$x: function(receiver) {
      return J.getInterceptor$x(receiver).get$offset(receiver);
    },
    get$runtimeType$: function(receiver) {
      return J.getInterceptor$(receiver).get$runtimeType(receiver);
    },
    get$sign$in: function(receiver) {
      if (typeof receiver === "number")
        return receiver > 0 ? 1 : receiver < 0 ? -1 : receiver;
      return J.getInterceptor$in(receiver).get$sign(receiver);
    },
    get$target$x: function(receiver) {
      return J.getInterceptor$x(receiver).get$target(receiver);
    },
    $add$ansx: function(receiver, a0) {
      if (typeof receiver == "number" && typeof a0 == "number")
        return receiver + a0;
      return J.getInterceptor$ansx(receiver).$add(receiver, a0);
    },
    $eq$: function(receiver, a0) {
      if (receiver == null)
        return a0 == null;
      if (typeof receiver != "object")
        return a0 != null && receiver === a0;
      return J.getInterceptor$(receiver).$eq(receiver, a0);
    },
    $ge$n: function(receiver, a0) {
      if (typeof receiver == "number" && typeof a0 == "number")
        return receiver >= a0;
      return J.getInterceptor$n(receiver).$ge(receiver, a0);
    },
    $gt$n: function(receiver, a0) {
      if (typeof receiver == "number" && typeof a0 == "number")
        return receiver > a0;
      return J.getInterceptor$n(receiver).$gt(receiver, a0);
    },
    $index$asx: function(receiver, a0) {
      if (typeof a0 === "number")
        if (receiver.constructor == Array || typeof receiver == "string" || H.isJsIndexable(receiver, receiver[init.dispatchPropertyName]))
          if (a0 >>> 0 === a0 && a0 < receiver.length)
            return receiver[a0];
      return J.getInterceptor$asx(receiver).$index(receiver, a0);
    },
    $indexSet$ax: function(receiver, a0, a1) {
      return J.getInterceptor$ax(receiver).$indexSet(receiver, a0, a1);
    },
    $le$n: function(receiver, a0) {
      if (typeof receiver == "number" && typeof a0 == "number")
        return receiver <= a0;
      return J.getInterceptor$n(receiver).$le(receiver, a0);
    },
    $mul$ns: function(receiver, a0) {
      if (typeof receiver == "number" && typeof a0 == "number")
        return receiver * a0;
      return J.getInterceptor$ns(receiver).$mul(receiver, a0);
    },
    $sub$n: function(receiver, a0) {
      if (typeof receiver == "number" && typeof a0 == "number")
        return receiver - a0;
      return J.getInterceptor$n(receiver).$sub(receiver, a0);
    },
    _async$_add$1$x: function(receiver, a0) {
      return J.getInterceptor$x(receiver)._async$_add$1(receiver, a0);
    },
    _codeUnitAt$1$s: function(receiver, a0) {
      return J.getInterceptor$s(receiver)._codeUnitAt$1(receiver, a0);
    },
    _replaceChild$2$x: function(receiver, a0, a1) {
      return J.getInterceptor$x(receiver)._replaceChild$2(receiver, a0, a1);
    },
    add$1$ax: function(receiver, a0) {
      return J.getInterceptor$ax(receiver).add$1(receiver, a0);
    },
    addEventListener$2$x: function(receiver, a0, a1) {
      return J.getInterceptor$x(receiver).addEventListener$2(receiver, a0, a1);
    },
    addEventListener$3$x: function(receiver, a0, a1, a2) {
      return J.getInterceptor$x(receiver).addEventListener$3(receiver, a0, a1, a2);
    },
    cast$1$0$ax: function(receiver, $T1) {
      return J.getInterceptor$ax(receiver).cast$1$0(receiver, $T1);
    },
    clamp$2$n: function(receiver, a0, a1) {
      return J.getInterceptor$n(receiver).clamp$2(receiver, a0, a1);
    },
    compareTo$1$ns: function(receiver, a0) {
      return J.getInterceptor$ns(receiver).compareTo$1(receiver, a0);
    },
    contains$1$asx: function(receiver, a0) {
      return J.getInterceptor$asx(receiver).contains$1(receiver, a0);
    },
    contains$2$asx: function(receiver, a0, a1) {
      return J.getInterceptor$asx(receiver).contains$2(receiver, a0, a1);
    },
    elementAt$1$ax: function(receiver, a0) {
      return J.getInterceptor$ax(receiver).elementAt$1(receiver, a0);
    },
    expand$1$ax: function(receiver, a0) {
      return J.getInterceptor$ax(receiver).expand$1(receiver, a0);
    },
    fillRange$3$x: function(receiver, a0, a1, a2) {
      return J.getInterceptor$x(receiver).fillRange$3(receiver, a0, a1, a2);
    },
    floor$0$n: function(receiver) {
      return J.getInterceptor$n(receiver).floor$0(receiver);
    },
    fold$1$2$ax: function(receiver, a0, a1, $T1) {
      return J.getInterceptor$ax(receiver).fold$1$2(receiver, a0, a1, $T1);
    },
    forEach$1$ax: function(receiver, a0) {
      return J.getInterceptor$ax(receiver).forEach$1(receiver, a0);
    },
    lastWhere$2$orElse$ax: function(receiver, a0, a1) {
      return J.getInterceptor$ax(receiver).lastWhere$2$orElse(receiver, a0, a1);
    },
    matchAsPrefix$2$s: function(receiver, a0, a1) {
      return J.getInterceptor$s(receiver).matchAsPrefix$2(receiver, a0, a1);
    },
    noSuchMethod$1$: function(receiver, a0) {
      return J.getInterceptor$(receiver).noSuchMethod$1(receiver, a0);
    },
    remove$0$ax: function(receiver) {
      return J.getInterceptor$ax(receiver).remove$0(receiver);
    },
    removeAt$1$ax: function(receiver, a0) {
      return J.getInterceptor$ax(receiver).removeAt$1(receiver, a0);
    },
    removeEventListener$2$x: function(receiver, a0, a1) {
      return J.getInterceptor$x(receiver).removeEventListener$2(receiver, a0, a1);
    },
    removeEventListener$3$x: function(receiver, a0, a1, a2) {
      return J.getInterceptor$x(receiver).removeEventListener$3(receiver, a0, a1, a2);
    },
    replaceRange$3$s: function(receiver, a0, a1, a2) {
      return J.getInterceptor$s(receiver).replaceRange$3(receiver, a0, a1, a2);
    },
    replaceWith$1$x: function(receiver, a0) {
      return J.getInterceptor$x(receiver).replaceWith$1(receiver, a0);
    },
    round$0$n: function(receiver) {
      return J.getInterceptor$n(receiver).round$0(receiver);
    },
    roundToDouble$0$n: function(receiver) {
      return J.getInterceptor$n(receiver).roundToDouble$0(receiver);
    },
    skip$1$ax: function(receiver, a0) {
      return J.getInterceptor$ax(receiver).skip$1(receiver, a0);
    },
    sort$1$ax: function(receiver, a0) {
      return J.getInterceptor$ax(receiver).sort$1(receiver, a0);
    },
    startsWith$2$s: function(receiver, a0, a1) {
      return J.getInterceptor$s(receiver).startsWith$2(receiver, a0, a1);
    },
    substring$2$s: function(receiver, a0, a1) {
      return J.getInterceptor$s(receiver).substring$2(receiver, a0, a1);
    },
    toInt$0$n: function(receiver) {
      return J.getInterceptor$n(receiver).toInt$0(receiver);
    },
    toLowerCase$0$s: function(receiver) {
      return J.getInterceptor$s(receiver).toLowerCase$0(receiver);
    },
    toString$0$: function(receiver) {
      return J.getInterceptor$(receiver).toString$0(receiver);
    },
    toStringAsFixed$1$n: function(receiver, a0) {
      return J.getInterceptor$n(receiver).toStringAsFixed$1(receiver, a0);
    },
    trim$0$s: function(receiver) {
      return J.getInterceptor$s(receiver).trim$0(receiver);
    },
    trimLeft$0$s: function(receiver) {
      return J.getInterceptor$s(receiver).trimLeft$0(receiver);
    },
    trimRight$0$s: function(receiver) {
      return J.getInterceptor$s(receiver).trimRight$0(receiver);
    },
    Interceptor: function Interceptor() {
    },
    JSBool: function JSBool() {
    },
    JSNull: function JSNull() {
    },
    JSObject: function JSObject() {
    },
    JavaScriptObject: function JavaScriptObject() {
    },
    PlainJavaScriptObject: function PlainJavaScriptObject() {
    },
    UnknownJavaScriptObject: function UnknownJavaScriptObject() {
    },
    JavaScriptFunction: function JavaScriptFunction() {
    },
    JSArray: function JSArray(t0) {
      this.$ti = t0;
    },
    JSUnmodifiableArray: function JSUnmodifiableArray(t0) {
      this.$ti = t0;
    },
    ArrayIterator: function ArrayIterator(t0, t1, t2) {
      var _ = this;
      _.__interceptors$_iterable = t0;
      _.__interceptors$_length = t1;
      _.__interceptors$_index = 0;
      _.__interceptors$_current = null;
      _.$ti = t2;
    },
    JSNumber: function JSNumber() {
    },
    JSInt: function JSInt() {
    },
    JSDouble: function JSDouble() {
    },
    JSString: function JSString() {
    }
  },
  P = {
    _AsyncRun__initializeScheduleImmediate: function() {
      var div, span, t1 = {};
      if (self.scheduleImmediate != null)
        return P.async__AsyncRun__scheduleImmediateJsOverride$closure();
      if (self.MutationObserver != null && self.document != null) {
        div = self.document.createElement("div");
        span = self.document.createElement("span");
        t1.storedCallback = null;
        new self.MutationObserver(H.convertDartClosureToJS(new P._AsyncRun__initializeScheduleImmediate_internalCallback(t1), 1)).observe(div, {childList: true});
        return new P._AsyncRun__initializeScheduleImmediate_closure(t1, div, span);
      } else if (self.setImmediate != null)
        return P.async__AsyncRun__scheduleImmediateWithSetImmediate$closure();
      return P.async__AsyncRun__scheduleImmediateWithTimer$closure();
    },
    _AsyncRun__scheduleImmediateJsOverride: function(callback) {
      self.scheduleImmediate(H.convertDartClosureToJS(new P._AsyncRun__scheduleImmediateJsOverride_internalCallback(H.functionTypeCheck(callback, {func: 1, ret: -1})), 0));
    },
    _AsyncRun__scheduleImmediateWithSetImmediate: function(callback) {
      self.setImmediate(H.convertDartClosureToJS(new P._AsyncRun__scheduleImmediateWithSetImmediate_internalCallback(H.functionTypeCheck(callback, {func: 1, ret: -1})), 0));
    },
    _AsyncRun__scheduleImmediateWithTimer: function(callback) {
      P.Timer__createTimer(C.Duration_0, H.functionTypeCheck(callback, {func: 1, ret: -1}));
    },
    Timer__createTimer: function(duration, callback) {
      var milliseconds;
      H.functionTypeCheck(callback, {func: 1, ret: -1});
      milliseconds = C.JSInt_methods._tdivFast$1(duration._duration, 1000);
      return P._TimerImpl$(milliseconds < 0 ? 0 : milliseconds, callback);
    },
    Timer__createPeriodicTimer: function(duration, callback) {
      var milliseconds;
      H.functionTypeCheck(callback, {func: 1, ret: -1, args: [P.Timer]});
      milliseconds = C.JSInt_methods._tdivFast$1(duration._duration, 1000);
      return P._TimerImpl$periodic(milliseconds < 0 ? 0 : milliseconds, callback);
    },
    _TimerImpl$: function(milliseconds, callback) {
      var t1 = new P._TimerImpl(true);
      t1._TimerImpl$2(milliseconds, callback);
      return t1;
    },
    _TimerImpl$periodic: function(milliseconds, callback) {
      var t1 = new P._TimerImpl(false);
      t1._TimerImpl$periodic$2(milliseconds, callback);
      return t1;
    },
    _makeAsyncAwaitCompleter: function($T) {
      return new P._AsyncAwaitCompleter(new P._SyncCompleter(new P._Future($.Zone__current, [$T]), [$T]), [$T]);
    },
    _asyncStartSync: function(bodyFunction, completer) {
      H.functionTypeCheck(bodyFunction, {func: 1, ret: -1, args: [P.int,,]});
      H.interceptedTypeCheck(completer, "$is_AsyncAwaitCompleter");
      bodyFunction.call$2(0, null);
      completer.isSync = true;
      return completer._completer.future;
    },
    _asyncAwait: function(object, bodyFunction) {
      P._awaitOnObject(object, H.functionTypeCheck(bodyFunction, {func: 1, ret: -1, args: [P.int,,]}));
    },
    _asyncReturn: function(object, completer) {
      H.interceptedTypeCheck(completer, "$isCompleter").complete$1(0, object);
    },
    _asyncRethrow: function(object, completer) {
      H.interceptedTypeCheck(completer, "$isCompleter").completeError$2(H.unwrapException(object), H.getTraceFromException(object));
    },
    _awaitOnObject: function(object, bodyFunction) {
      var thenCallback, errorCallback, t1, future, _null = null;
      H.functionTypeCheck(bodyFunction, {func: 1, ret: -1, args: [P.int,,]});
      thenCallback = new P._awaitOnObject_closure(bodyFunction);
      errorCallback = new P._awaitOnObject_closure0(bodyFunction);
      t1 = J.getInterceptor$(object);
      if (!!t1.$is_Future)
        object._thenNoZoneRegistration$1$2(thenCallback, errorCallback, _null);
      else if (!!t1.$isFuture)
        object.then$1$2$onError(thenCallback, errorCallback, _null);
      else {
        future = new P._Future($.Zone__current, [null]);
        H.assertSubtypeOfRuntimeType(object, null);
        future._state = 4;
        future._resultOrListeners = object;
        future._thenNoZoneRegistration$1$2(thenCallback, _null, _null);
      }
    },
    _wrapJsFunctionForAsync: function($function) {
      var $protected = function(fn, ERROR) {
        return function(errorCode, result) {
          while (true)
            try {
              fn(errorCode, result);
              break;
            } catch (error) {
              result = error;
              errorCode = ERROR;
            }
        };
      }($function, 1);
      return $.Zone__current.registerBinaryCallback$3$1(new P._wrapJsFunctionForAsync_closure($protected), P.Null, P.int, null);
    },
    _asyncStarHelper: function(object, bodyFunctionOrErrorCode, controller) {
      var t1, t2;
      H.interceptedTypeCheck(controller, "$is_AsyncStarStreamController");
      if (bodyFunctionOrErrorCode === 0) {
        t1 = controller.cancelationCompleter;
        if (t1 != null)
          t1.complete$0(0);
        else
          controller.controller.close$0(0);
        return;
      } else if (bodyFunctionOrErrorCode === 1) {
        t1 = controller.cancelationCompleter;
        if (t1 != null)
          t1.completeError$2(H.unwrapException(object), H.getTraceFromException(object));
        else {
          t1 = H.unwrapException(object);
          t2 = H.getTraceFromException(object);
          controller.controller.addError$2(t1, t2);
          controller.controller.close$0(0);
        }
        return;
      }
      if (object instanceof P._IterationMarker) {
        if (controller.cancelationCompleter != null) {
          bodyFunctionOrErrorCode.call$2(2, null);
          return;
        }
        t1 = object.state;
        if (t1 === 0) {
          t1 = object.value;
          controller.controller.add$1(0, H.assertSubtypeOfRuntimeType(t1, H.getTypeArgumentByIndex(controller, 0)));
          P.scheduleMicrotask(new P._asyncStarHelper_closure(controller, bodyFunctionOrErrorCode));
          return;
        } else if (t1 === 1) {
          t1 = H.assertSubtype(H.interceptedTypeCheck(object.value, "$isStream"), "$isStream", [H.getTypeArgumentByIndex(controller, 0)], "$asStream");
          controller.controller.addStream$2$cancelOnError(0, t1, false).then$1(new P._asyncStarHelper_closure0(controller, bodyFunctionOrErrorCode));
          return;
        }
      }
      P._awaitOnObject(object, H.functionTypeCheck(bodyFunctionOrErrorCode, {func: 1, ret: -1, args: [P.int,,]}));
    },
    _streamOfController: function(controller) {
      var t1 = H.interceptedTypeCheck(controller, "$is_AsyncStarStreamController").controller;
      t1.toString;
      return new P._ControllerStream(t1, [H.getTypeArgumentByIndex(t1, 0)]);
    },
    _AsyncStarStreamController$: function(body, $T) {
      var t1 = new P._AsyncStarStreamController([$T]);
      t1._AsyncStarStreamController$1(body, $T);
      return t1;
    },
    _makeAsyncStarStreamController: function(body, $T) {
      return P._AsyncStarStreamController$(H.functionTypeCheck(body, {func: 1, ret: -1, args: [P.int,,]}), $T);
    },
    _IterationMarker_yieldStar: function(values) {
      return new P._IterationMarker(values, 1);
    },
    _IterationMarker_endOfIteration: function() {
      return C._IterationMarker_null_2;
    },
    _IterationMarker_yieldSingle: function(value) {
      return new P._IterationMarker(value, 0);
    },
    _IterationMarker_uncaughtError: function(error) {
      return new P._IterationMarker(error, 3);
    },
    _makeSyncStarIterable: function(body, $T) {
      return new P._SyncStarIterable(body, [$T]);
    },
    Future_Future$error: function(error, stackTrace, $T) {
      var t1;
      H.interceptedTypeCheck(stackTrace, "$isStackTrace");
      t1 = $.Zone__current;
      if (t1 !== C.C__RootZone)
        t1.toString;
      t1 = new P._Future(t1, [$T]);
      t1._asyncCompleteError$2(error, stackTrace);
      return t1;
    },
    Future_Future$delayed: function(duration, $T) {
      var result = new P._Future($.Zone__current, [$T]);
      P.Timer_Timer(duration, new P.Future_Future$delayed_closure(null, result));
      return result;
    },
    Future_wait: function(futures, $T) {
      var result, handleError, future, pos, e, st, t1, t2, t3, exception, _box_0 = {}, cleanUp = null,
        eagerError = false;
      H.assertSubtype(futures, "$isIterable", [[P.Future, $T]], "$asIterable");
      t1 = [P.List, $T];
      t2 = [t1];
      result = new P._Future($.Zone__current, t2);
      _box_0.values = null;
      _box_0.remaining = 0;
      _box_0.stackTrace = _box_0.error = null;
      handleError = new P.Future_wait_handleError(_box_0, cleanUp, eagerError, result);
      try {
        for (t3 = J.get$iterator$ax(futures); t3.moveNext$0();) {
          future = t3.get$current(t3);
          pos = _box_0.remaining;
          future.then$1$2$onError(new P.Future_wait_closure(_box_0, pos, result, cleanUp, eagerError, $T), handleError, null);
          ++_box_0.remaining;
        }
        t3 = _box_0.remaining;
        if (t3 === 0) {
          t2 = new P._Future($.Zone__current, t2);
          t2._asyncComplete$1(C.List_empty1);
          return t2;
        }
        t2 = new Array(t3);
        t2.fixed$length = Array;
        _box_0.values = H.setRuntimeTypeInfo(t2, [$T]);
      } catch (exception) {
        e = H.unwrapException(exception);
        st = H.getTraceFromException(exception);
        if (_box_0.remaining === 0 || H.boolConversionCheck(eagerError))
          return P.Future_Future$error(e, st, t1);
        else {
          _box_0.error = e;
          _box_0.stackTrace = st;
        }
      }
      return result;
    },
    _completeWithErrorCallback: function(result, error, stackTrace) {
      H.interceptedTypeCheck(stackTrace, "$isStackTrace");
      $.Zone__current.toString;
      result._completeError$2(error, stackTrace);
    },
    _Future$zoneValue: function(value, _zone, $T) {
      var t1 = new P._Future(_zone, [$T]);
      H.assertSubtypeOfRuntimeType(value, $T);
      t1._state = 4;
      t1._resultOrListeners = value;
      return t1;
    },
    _Future__chainForeignFuture: function(source, target) {
      var e, s, exception;
      target._state = 1;
      try {
        source.then$1$2$onError(new P._Future__chainForeignFuture_closure(target), new P._Future__chainForeignFuture_closure0(target), null);
      } catch (exception) {
        e = H.unwrapException(exception);
        s = H.getTraceFromException(exception);
        P.scheduleMicrotask(new P._Future__chainForeignFuture_closure1(target, e, s));
      }
    },
    _Future__chainCoreFuture: function(source, target) {
      var t1, listeners;
      for (; t1 = source._state, t1 === 2;)
        source = H.interceptedTypeCheck(source._resultOrListeners, "$is_Future");
      if (t1 >= 4) {
        listeners = target._removeListeners$0();
        target._state = source._state;
        target._resultOrListeners = source._resultOrListeners;
        P._Future__propagateToListeners(target, listeners);
      } else {
        listeners = H.interceptedTypeCheck(target._resultOrListeners, "$is_FutureListener");
        target._state = 2;
        target._resultOrListeners = source;
        source._prependListeners$1(listeners);
      }
    },
    _Future__propagateToListeners: function(source, listeners) {
      var _box_0, hasError, asyncError, t2, t3, listeners0, sourceResult, zone, t4, oldZone, current, result, _null = null, _box_1 = {},
        t1 = _box_1.source = source;
      for (; true;) {
        _box_0 = {};
        hasError = t1._state === 8;
        if (listeners == null) {
          if (hasError) {
            asyncError = H.interceptedTypeCheck(t1._resultOrListeners, "$isAsyncError");
            t1 = t1._zone;
            t2 = asyncError.error;
            t3 = asyncError.stackTrace;
            t1.toString;
            P._rootHandleUncaughtError(_null, _null, t1, t2, t3);
          }
          return;
        }
        for (; listeners0 = listeners._nextListener, listeners0 != null; listeners = listeners0) {
          listeners._nextListener = null;
          P._Future__propagateToListeners(_box_1.source, listeners);
        }
        t1 = _box_1.source;
        sourceResult = t1._resultOrListeners;
        _box_0.listenerHasError = hasError;
        _box_0.listenerValueOrError = sourceResult;
        t2 = !hasError;
        if (t2) {
          t3 = listeners.state;
          t3 = (t3 & 1) !== 0 || t3 === 8;
        } else
          t3 = true;
        if (t3) {
          t3 = listeners.result;
          zone = t3._zone;
          if (hasError) {
            t4 = t1._zone;
            t4.toString;
            t4 = t4 == zone;
            if (!t4)
              zone.toString;
            else
              t4 = true;
            t4 = !t4;
          } else
            t4 = false;
          if (t4) {
            H.interceptedTypeCheck(sourceResult, "$isAsyncError");
            t1 = t1._zone;
            t2 = sourceResult.error;
            t3 = sourceResult.stackTrace;
            t1.toString;
            P._rootHandleUncaughtError(_null, _null, t1, t2, t3);
            return;
          }
          oldZone = $.Zone__current;
          if (oldZone != zone)
            $.Zone__current = zone;
          else
            oldZone = _null;
          t1 = listeners.state;
          if (t1 === 8)
            new P._Future__propagateToListeners_handleWhenCompleteCallback(_box_1, _box_0, listeners, hasError).call$0();
          else if (t2) {
            if ((t1 & 1) !== 0)
              new P._Future__propagateToListeners_handleValueCallback(_box_0, listeners, sourceResult).call$0();
          } else if ((t1 & 2) !== 0)
            new P._Future__propagateToListeners_handleError(_box_1, _box_0, listeners).call$0();
          if (oldZone != null)
            $.Zone__current = oldZone;
          t1 = _box_0.listenerValueOrError;
          if (!!J.getInterceptor$(t1).$isFuture) {
            if (!!t1.$is_Future)
              if (t1._state >= 4) {
                current = H.interceptedTypeCheck(t3._resultOrListeners, "$is_FutureListener");
                t3._resultOrListeners = null;
                listeners = t3._reverseListeners$1(current);
                t3._state = t1._state;
                t3._resultOrListeners = t1._resultOrListeners;
                _box_1.source = t1;
                continue;
              } else
                P._Future__chainCoreFuture(t1, t3);
            else
              P._Future__chainForeignFuture(t1, t3);
            return;
          }
        }
        result = listeners.result;
        current = H.interceptedTypeCheck(result._resultOrListeners, "$is_FutureListener");
        result._resultOrListeners = null;
        listeners = result._reverseListeners$1(current);
        t1 = _box_0.listenerHasError;
        t2 = _box_0.listenerValueOrError;
        if (!t1) {
          H.assertSubtypeOfRuntimeType(t2, H.getTypeArgumentByIndex(result, 0));
          result._state = 4;
          result._resultOrListeners = t2;
        } else {
          H.interceptedTypeCheck(t2, "$isAsyncError");
          result._state = 8;
          result._resultOrListeners = t2;
        }
        _box_1.source = result;
        t1 = result;
      }
    },
    _registerErrorHandler: function(errorHandler, zone) {
      if (H.functionTypeTest(errorHandler, {func: 1, args: [P.Object, P.StackTrace]}))
        return zone.registerBinaryCallback$3$1(errorHandler, null, P.Object, P.StackTrace);
      if (H.functionTypeTest(errorHandler, {func: 1, args: [P.Object]}))
        return H.functionTypeCheck(errorHandler, {func: 1, ret: null, args: [P.Object]});
      throw H.wrapException(P.ArgumentError$value(errorHandler, "onError", "Error handler must accept one Object or one Object and a StackTrace as arguments, and return a a valid result"));
    },
    _microtaskLoop: function() {
      var t1, t2;
      for (; t1 = $._nextCallback, t1 != null;) {
        $._lastPriorityCallback = null;
        t2 = t1.next;
        $._nextCallback = t2;
        if (t2 == null)
          $._lastCallback = null;
        t1.callback.call$0();
      }
    },
    _startMicrotaskLoop: function() {
      $._isInCallbackLoop = true;
      try {
        P._microtaskLoop();
      } finally {
        $._lastPriorityCallback = null;
        $._isInCallbackLoop = false;
        if ($._nextCallback != null)
          $.$get$_AsyncRun__scheduleImmediateClosure().call$1(P.async___startMicrotaskLoop$closure());
      }
    },
    _scheduleAsyncCallback: function(callback) {
      var newEntry = new P._AsyncCallbackEntry(H.functionTypeCheck(callback, {func: 1, ret: -1}));
      if ($._nextCallback == null) {
        $._nextCallback = $._lastCallback = newEntry;
        if (!$._isInCallbackLoop)
          $.$get$_AsyncRun__scheduleImmediateClosure().call$1(P.async___startMicrotaskLoop$closure());
      } else
        $._lastCallback = $._lastCallback.next = newEntry;
    },
    _schedulePriorityAsyncCallback: function(callback) {
      var t1, entry, t2;
      H.functionTypeCheck(callback, {func: 1, ret: -1});
      t1 = $._nextCallback;
      if (t1 == null) {
        P._scheduleAsyncCallback(callback);
        $._lastPriorityCallback = $._lastCallback;
        return;
      }
      entry = new P._AsyncCallbackEntry(callback);
      t2 = $._lastPriorityCallback;
      if (t2 == null) {
        entry.next = t1;
        $._nextCallback = $._lastPriorityCallback = entry;
      } else {
        entry.next = t2.next;
        $._lastPriorityCallback = t2.next = entry;
        if (entry.next == null)
          $._lastCallback = entry;
      }
    },
    scheduleMicrotask: function(callback) {
      var currentZone, _null = null,
        t1 = {func: 1, ret: -1};
      H.functionTypeCheck(callback, t1);
      currentZone = $.Zone__current;
      if (C.C__RootZone === currentZone) {
        P._rootScheduleMicrotask(_null, _null, C.C__RootZone, callback);
        return;
      }
      currentZone.toString;
      P._rootScheduleMicrotask(_null, _null, currentZone, H.functionTypeCheck(currentZone.bindCallbackGuarded$1(callback), t1));
    },
    Stream_Stream$fromIterable: function(elements, $T) {
      return new P._GeneratedStreamImpl(new P.Stream_Stream$fromIterable_closure(H.assertSubtype(elements, "$isIterable", [$T], "$asIterable"), $T), [$T]);
    },
    Stream_Stream$periodic: function(period, computation, $T) {
      var watch, t2, t3, controller, t1 = {};
      H.functionTypeCheck(computation, {func: 1, ret: $T, args: [P.int]});
      t1.timer = null;
      t1.computationCount = 0;
      t1.controller = null;
      watch = new P.Stopwatch();
      if ($.Stopwatch__frequency == null) {
        H.Primitives_initTicker();
        $.Stopwatch__frequency = $.Primitives_timerFrequency;
      }
      t2 = new P.Stream_Stream$periodic_sendEvent(t1, watch, computation);
      t3 = new P.Stream_Stream$periodic_startPeriodicTimer(t1, period, t2);
      controller = t1.controller = P.StreamController_StreamController(new P.Stream_Stream$periodic_closure(t1), new P.Stream_Stream$periodic_closure0(watch, t3), new P.Stream_Stream$periodic_closure1(t1, watch), new P.Stream_Stream$periodic_closure2(t1, watch, period, t3, t2), true, $T);
      return new P._ControllerStream(controller, [H.getTypeArgumentByIndex(controller, 0)]);
    },
    StreamIterator_StreamIterator: function(stream, $T) {
      return new P._StreamIterator(H.assertSubtype(stream, "$isStream", [$T], "$asStream"), [$T]);
    },
    StreamController_StreamController: function(onCancel, onListen, onPause, onResume, sync, $T) {
      var t1 = {func: 1, ret: -1};
      H.functionTypeCheck(onListen, t1);
      H.functionTypeCheck(onPause, t1);
      H.functionTypeCheck(onResume, t1);
      H.functionTypeCheck(onCancel, {func: 1});
      return sync ? new P._SyncStreamController(onListen, onPause, onResume, onCancel, [$T]) : new P._AsyncStreamController(onListen, onPause, onResume, onCancel, [$T]);
    },
    _runGuarded: function(notificationHandler) {
      var e, s, exception, t1;
      H.functionTypeCheck(notificationHandler, {func: 1});
      if (notificationHandler == null)
        return;
      try {
        notificationHandler.call$0();
      } catch (exception) {
        e = H.unwrapException(exception);
        s = H.getTraceFromException(exception);
        t1 = $.Zone__current;
        t1.toString;
        P._rootHandleUncaughtError(null, null, t1, e, H.interceptedTypeCheck(s, "$isStackTrace"));
      }
    },
    _BufferingStreamSubscription$: function(onData, onError, onDone, cancelOnError, $T) {
      var t1 = $.Zone__current,
        t2 = cancelOnError ? 1 : 0;
      t2 = new P._BufferingStreamSubscription(t1, t2, [$T]);
      t2._BufferingStreamSubscription$4(onData, onError, onDone, cancelOnError, $T);
      return t2;
    },
    _nullDataHandler: function(value) {
    },
    _nullErrorHandler: function(error, stackTrace) {
      var t1;
      H.interceptedTypeCheck(stackTrace, "$isStackTrace");
      t1 = $.Zone__current;
      t1.toString;
      P._rootHandleUncaughtError(null, null, t1, error, stackTrace);
    },
    _runUserCode: function(userCode, onSuccess, onError, $T) {
      var e, s, replacement, error, stackTrace, exception, error0;
      H.functionTypeCheck(userCode, {func: 1, ret: $T});
      H.functionTypeCheck(onSuccess, {func: 1, args: [$T]});
      H.functionTypeCheck(onError, {func: 1, args: [, P.StackTrace]});
      try {
        onSuccess.call$1(userCode.call$0());
      } catch (exception) {
        e = H.unwrapException(exception);
        s = H.getTraceFromException(exception);
        $.Zone__current.toString;
        H.interceptedTypeCheck(s, "$isStackTrace");
        replacement = null;
        if (replacement == null)
          onError.call$2(e, s);
        else {
          error0 = J.get$error$z(replacement);
          error = error0;
          stackTrace = replacement.get$stackTrace();
          onError.call$2(error, stackTrace);
        }
      }
    },
    _cancelAndError: function(subscription, future, error, stackTrace) {
      var cancelFuture = subscription.cancel$0(0);
      if (cancelFuture != null && cancelFuture !== $.$get$Future__nullFuture())
        cancelFuture.whenComplete$1(new P._cancelAndError_closure(future, error, stackTrace));
      else
        future._completeError$2(error, stackTrace);
    },
    _cancelAndErrorClosure: function(subscription, future) {
      return new P._cancelAndErrorClosure_closure(subscription, future);
    },
    _ForwardingStreamSubscription$: function(_stream, onData, onError, onDone, cancelOnError, $S, $T) {
      var t1 = $.Zone__current,
        t2 = cancelOnError ? 1 : 0;
      t2 = new P._ForwardingStreamSubscription(_stream, t1, t2, [$S, $T]);
      t2._BufferingStreamSubscription$4(onData, onError, onDone, cancelOnError, $T);
      t2._ForwardingStreamSubscription$5(_stream, onData, onError, onDone, cancelOnError, $S, $T);
      return t2;
    },
    Timer_Timer: function(duration, callback) {
      var t2,
        t1 = {func: 1, ret: -1};
      H.functionTypeCheck(callback, t1);
      t2 = $.Zone__current;
      if (t2 === C.C__RootZone) {
        t2.toString;
        return P.Timer__createTimer(duration, callback);
      }
      return P.Timer__createTimer(duration, H.functionTypeCheck(t2.bindCallbackGuarded$1(callback), t1));
    },
    Timer_Timer$periodic: function(duration, callback) {
      var t2, boundCallback,
        t1 = {func: 1, ret: -1, args: [P.Timer]};
      H.functionTypeCheck(callback, t1);
      t2 = $.Zone__current;
      if (t2 === C.C__RootZone) {
        t2.toString;
        return P.Timer__createPeriodicTimer(duration, callback);
      }
      boundCallback = t2.bindUnaryCallbackGuarded$1$1(callback, P.Timer);
      $.Zone__current.toString;
      return P.Timer__createPeriodicTimer(duration, H.functionTypeCheck(boundCallback, t1));
    },
    _rootHandleUncaughtError: function($self, $parent, zone, error, stackTrace) {
      var t1 = {};
      t1.error = error;
      P._schedulePriorityAsyncCallback(new P._rootHandleUncaughtError_closure(t1, stackTrace));
    },
    _rootRun: function($self, $parent, zone, f, $R) {
      var old, t1;
      H.functionTypeCheck(f, {func: 1, ret: $R});
      t1 = $.Zone__current;
      if (t1 === zone)
        return f.call$0();
      $.Zone__current = zone;
      old = t1;
      try {
        t1 = f.call$0();
        return t1;
      } finally {
        $.Zone__current = old;
      }
    },
    _rootRunUnary: function($self, $parent, zone, f, arg, $R, $T) {
      var old, t1;
      H.functionTypeCheck(f, {func: 1, ret: $R, args: [$T]});
      H.assertSubtypeOfRuntimeType(arg, $T);
      t1 = $.Zone__current;
      if (t1 === zone)
        return f.call$1(arg);
      $.Zone__current = zone;
      old = t1;
      try {
        t1 = f.call$1(arg);
        return t1;
      } finally {
        $.Zone__current = old;
      }
    },
    _rootRunBinary: function($self, $parent, zone, f, arg1, arg2, $R, T1, T2) {
      var old, t1;
      H.functionTypeCheck(f, {func: 1, ret: $R, args: [T1, T2]});
      H.assertSubtypeOfRuntimeType(arg1, T1);
      H.assertSubtypeOfRuntimeType(arg2, T2);
      t1 = $.Zone__current;
      if (t1 === zone)
        return f.call$2(arg1, arg2);
      $.Zone__current = zone;
      old = t1;
      try {
        t1 = f.call$2(arg1, arg2);
        return t1;
      } finally {
        $.Zone__current = old;
      }
    },
    _rootScheduleMicrotask: function($self, $parent, zone, f) {
      var t1;
      H.functionTypeCheck(f, {func: 1, ret: -1});
      t1 = C.C__RootZone !== zone;
      if (t1)
        f = !(!t1 || false) ? zone.bindCallbackGuarded$1(f) : zone.bindCallback$1$1(f, -1);
      P._scheduleAsyncCallback(f);
    },
    _AsyncRun__initializeScheduleImmediate_internalCallback: function _AsyncRun__initializeScheduleImmediate_internalCallback(t0) {
      this._box_0 = t0;
    },
    _AsyncRun__initializeScheduleImmediate_closure: function _AsyncRun__initializeScheduleImmediate_closure(t0, t1, t2) {
      this._box_0 = t0;
      this.div = t1;
      this.span = t2;
    },
    _AsyncRun__scheduleImmediateJsOverride_internalCallback: function _AsyncRun__scheduleImmediateJsOverride_internalCallback(t0) {
      this.callback = t0;
    },
    _AsyncRun__scheduleImmediateWithSetImmediate_internalCallback: function _AsyncRun__scheduleImmediateWithSetImmediate_internalCallback(t0) {
      this.callback = t0;
    },
    _TimerImpl: function _TimerImpl(t0) {
      this._once = t0;
      this._handle = null;
      this._tick = 0;
    },
    _TimerImpl_internalCallback: function _TimerImpl_internalCallback(t0, t1) {
      this.$this = t0;
      this.callback = t1;
    },
    _TimerImpl$periodic_closure: function _TimerImpl$periodic_closure(t0, t1, t2, t3) {
      var _ = this;
      _.$this = t0;
      _.milliseconds = t1;
      _.start = t2;
      _.callback = t3;
    },
    _AsyncAwaitCompleter: function _AsyncAwaitCompleter(t0, t1) {
      this._completer = t0;
      this.isSync = false;
      this.$ti = t1;
    },
    _AsyncAwaitCompleter_complete_closure: function _AsyncAwaitCompleter_complete_closure(t0, t1) {
      this.$this = t0;
      this.value = t1;
    },
    _AsyncAwaitCompleter_completeError_closure: function _AsyncAwaitCompleter_completeError_closure(t0, t1, t2) {
      this.$this = t0;
      this.e = t1;
      this.st = t2;
    },
    _awaitOnObject_closure: function _awaitOnObject_closure(t0) {
      this.bodyFunction = t0;
    },
    _awaitOnObject_closure0: function _awaitOnObject_closure0(t0) {
      this.bodyFunction = t0;
    },
    _wrapJsFunctionForAsync_closure: function _wrapJsFunctionForAsync_closure(t0) {
      this.$protected = t0;
    },
    _asyncStarHelper_closure: function _asyncStarHelper_closure(t0, t1) {
      this.controller = t0;
      this.bodyFunctionOrErrorCode = t1;
    },
    _asyncStarHelper_closure0: function _asyncStarHelper_closure0(t0, t1) {
      this.controller = t0;
      this.bodyFunctionOrErrorCode = t1;
    },
    _AsyncStarStreamController: function _AsyncStarStreamController(t0) {
      var _ = this;
      _.controller = null;
      _.isSuspended = false;
      _.cancelationCompleter = null;
      _.$ti = t0;
    },
    _AsyncStarStreamController__resumeBody: function _AsyncStarStreamController__resumeBody(t0) {
      this.body = t0;
    },
    _AsyncStarStreamController__resumeBody_closure: function _AsyncStarStreamController__resumeBody_closure(t0) {
      this.body = t0;
    },
    _AsyncStarStreamController_closure0: function _AsyncStarStreamController_closure0(t0) {
      this._resumeBody = t0;
    },
    _AsyncStarStreamController_closure1: function _AsyncStarStreamController_closure1(t0, t1) {
      this.$this = t0;
      this._resumeBody = t1;
    },
    _AsyncStarStreamController_closure: function _AsyncStarStreamController_closure(t0, t1) {
      this.$this = t0;
      this.body = t1;
    },
    _AsyncStarStreamController__closure: function _AsyncStarStreamController__closure(t0) {
      this.body = t0;
    },
    _IterationMarker: function _IterationMarker(t0, t1) {
      this.value = t0;
      this.state = t1;
    },
    _SyncStarIterator: function _SyncStarIterator(t0, t1) {
      var _ = this;
      _._body = t0;
      _._suspendedBodies = _._nestedIterator = _._async$_current = null;
      _.$ti = t1;
    },
    _SyncStarIterable: function _SyncStarIterable(t0, t1) {
      this._outerHelper = t0;
      this.$ti = t1;
    },
    Future: function Future() {
    },
    Future_Future$delayed_closure: function Future_Future$delayed_closure(t0, t1) {
      this.computation = t0;
      this.result = t1;
    },
    Future_wait_handleError: function Future_wait_handleError(t0, t1, t2, t3) {
      var _ = this;
      _._box_0 = t0;
      _.cleanUp = t1;
      _.eagerError = t2;
      _.result = t3;
    },
    Future_wait_closure: function Future_wait_closure(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _._box_0 = t0;
      _.pos = t1;
      _.result = t2;
      _.cleanUp = t3;
      _.eagerError = t4;
      _.T = t5;
    },
    _Completer: function _Completer() {
    },
    _AsyncCompleter: function _AsyncCompleter(t0, t1) {
      this.future = t0;
      this.$ti = t1;
    },
    _SyncCompleter: function _SyncCompleter(t0, t1) {
      this.future = t0;
      this.$ti = t1;
    },
    _FutureListener: function _FutureListener(t0, t1, t2, t3, t4) {
      var _ = this;
      _._nextListener = null;
      _.result = t0;
      _.state = t1;
      _.callback = t2;
      _.errorCallback = t3;
      _.$ti = t4;
    },
    _Future: function _Future(t0, t1) {
      var _ = this;
      _._state = 0;
      _._zone = t0;
      _._resultOrListeners = null;
      _.$ti = t1;
    },
    _Future__addListener_closure: function _Future__addListener_closure(t0, t1) {
      this.$this = t0;
      this.listener = t1;
    },
    _Future__prependListeners_closure: function _Future__prependListeners_closure(t0, t1) {
      this._box_0 = t0;
      this.$this = t1;
    },
    _Future__chainForeignFuture_closure: function _Future__chainForeignFuture_closure(t0) {
      this.target = t0;
    },
    _Future__chainForeignFuture_closure0: function _Future__chainForeignFuture_closure0(t0) {
      this.target = t0;
    },
    _Future__chainForeignFuture_closure1: function _Future__chainForeignFuture_closure1(t0, t1, t2) {
      this.target = t0;
      this.e = t1;
      this.s = t2;
    },
    _Future__asyncComplete_closure: function _Future__asyncComplete_closure(t0, t1) {
      this.$this = t0;
      this.value = t1;
    },
    _Future__chainFuture_closure: function _Future__chainFuture_closure(t0, t1) {
      this.$this = t0;
      this.value = t1;
    },
    _Future__asyncCompleteError_closure: function _Future__asyncCompleteError_closure(t0, t1, t2) {
      this.$this = t0;
      this.error = t1;
      this.stackTrace = t2;
    },
    _Future__propagateToListeners_handleWhenCompleteCallback: function _Future__propagateToListeners_handleWhenCompleteCallback(t0, t1, t2, t3) {
      var _ = this;
      _._box_1 = t0;
      _._box_0 = t1;
      _.listener = t2;
      _.hasError = t3;
    },
    _Future__propagateToListeners_handleWhenCompleteCallback_closure: function _Future__propagateToListeners_handleWhenCompleteCallback_closure(t0) {
      this.originalSource = t0;
    },
    _Future__propagateToListeners_handleValueCallback: function _Future__propagateToListeners_handleValueCallback(t0, t1, t2) {
      this._box_0 = t0;
      this.listener = t1;
      this.sourceResult = t2;
    },
    _Future__propagateToListeners_handleError: function _Future__propagateToListeners_handleError(t0, t1, t2) {
      this._box_1 = t0;
      this._box_0 = t1;
      this.listener = t2;
    },
    _AsyncCallbackEntry: function _AsyncCallbackEntry(t0) {
      this.callback = t0;
      this.next = null;
    },
    Stream: function Stream() {
    },
    Stream_Stream$fromIterable_closure: function Stream_Stream$fromIterable_closure(t0, t1) {
      this.elements = t0;
      this.T = t1;
    },
    Stream_Stream$periodic_sendEvent: function Stream_Stream$periodic_sendEvent(t0, t1, t2) {
      this._box_0 = t0;
      this.watch = t1;
      this.computation = t2;
    },
    Stream_Stream$periodic_startPeriodicTimer: function Stream_Stream$periodic_startPeriodicTimer(t0, t1, t2) {
      this._box_0 = t0;
      this.period = t1;
      this.sendEvent = t2;
    },
    Stream_Stream$periodic_startPeriodicTimer_closure: function Stream_Stream$periodic_startPeriodicTimer_closure(t0) {
      this.sendEvent = t0;
    },
    Stream_Stream$periodic_closure0: function Stream_Stream$periodic_closure0(t0, t1) {
      this.watch = t0;
      this.startPeriodicTimer = t1;
    },
    Stream_Stream$periodic_closure1: function Stream_Stream$periodic_closure1(t0, t1) {
      this._box_0 = t0;
      this.watch = t1;
    },
    Stream_Stream$periodic_closure2: function Stream_Stream$periodic_closure2(t0, t1, t2, t3, t4) {
      var _ = this;
      _._box_0 = t0;
      _.watch = t1;
      _.period = t2;
      _.startPeriodicTimer = t3;
      _.sendEvent = t4;
    },
    Stream_Stream$periodic__closure: function Stream_Stream$periodic__closure(t0, t1, t2) {
      this._box_0 = t0;
      this.startPeriodicTimer = t1;
      this.sendEvent = t2;
    },
    Stream_Stream$periodic_closure: function Stream_Stream$periodic_closure(t0) {
      this._box_0 = t0;
    },
    Stream_length_closure: function Stream_length_closure(t0, t1) {
      this._box_0 = t0;
      this.$this = t1;
    },
    Stream_length_closure0: function Stream_length_closure0(t0, t1) {
      this._box_0 = t0;
      this.future = t1;
    },
    Stream_toList_closure: function Stream_toList_closure(t0, t1) {
      this.$this = t0;
      this.result = t1;
    },
    Stream_toList_closure0: function Stream_toList_closure0(t0, t1) {
      this.future = t0;
      this.result = t1;
    },
    Stream_last_closure: function Stream_last_closure(t0, t1) {
      this._box_0 = t0;
      this.$this = t1;
    },
    Stream_last_closure0: function Stream_last_closure0(t0, t1) {
      this._box_0 = t0;
      this.future = t1;
    },
    Stream_lastWhere_closure: function Stream_lastWhere_closure(t0, t1, t2, t3) {
      var _ = this;
      _._box_0 = t0;
      _.$this = t1;
      _.test = t2;
      _.future = t3;
    },
    Stream_lastWhere__closure: function Stream_lastWhere__closure(t0, t1) {
      this.test = t0;
      this.value = t1;
    },
    Stream_lastWhere__closure0: function Stream_lastWhere__closure0(t0, t1) {
      this._box_0 = t0;
      this.value = t1;
    },
    Stream_lastWhere_closure0: function Stream_lastWhere_closure0(t0, t1, t2, t3) {
      var _ = this;
      _._box_0 = t0;
      _.$this = t1;
      _.future = t2;
      _.orElse = t3;
    },
    StreamSubscription: function StreamSubscription() {
    },
    StreamTransformerBase: function StreamTransformerBase() {
    },
    _StreamController: function _StreamController() {
    },
    _StreamController__subscribe_closure: function _StreamController__subscribe_closure(t0) {
      this.$this = t0;
    },
    _StreamController__recordCancel_complete: function _StreamController__recordCancel_complete(t0) {
      this.$this = t0;
    },
    _SyncStreamControllerDispatch: function _SyncStreamControllerDispatch() {
    },
    _AsyncStreamControllerDispatch: function _AsyncStreamControllerDispatch() {
    },
    _AsyncStreamController: function _AsyncStreamController(t0, t1, t2, t3, t4) {
      var _ = this;
      _._varData = null;
      _._state = 0;
      _._doneFuture = null;
      _.onListen = t0;
      _.onPause = t1;
      _.onResume = t2;
      _.onCancel = t3;
      _.$ti = t4;
    },
    _SyncStreamController: function _SyncStreamController(t0, t1, t2, t3, t4) {
      var _ = this;
      _._varData = null;
      _._state = 0;
      _._doneFuture = null;
      _.onListen = t0;
      _.onPause = t1;
      _.onResume = t2;
      _.onCancel = t3;
      _.$ti = t4;
    },
    _ControllerStream: function _ControllerStream(t0, t1) {
      this._async$_controller = t0;
      this.$ti = t1;
    },
    _ControllerSubscription: function _ControllerSubscription(t0, t1, t2, t3) {
      var _ = this;
      _._async$_controller = t0;
      _._onDone = _._onError = _._async$_onData = null;
      _._zone = t1;
      _._state = t2;
      _._pending = _._cancelFuture = null;
      _.$ti = t3;
    },
    _AddStreamState: function _AddStreamState() {
    },
    _AddStreamState_cancel_closure: function _AddStreamState_cancel_closure(t0) {
      this.$this = t0;
    },
    _StreamControllerAddStreamState: function _StreamControllerAddStreamState(t0, t1, t2, t3) {
      var _ = this;
      _.varData = t0;
      _.addStreamFuture = t1;
      _.addSubscription = t2;
      _.$ti = t3;
    },
    _BufferingStreamSubscription: function _BufferingStreamSubscription(t0, t1, t2) {
      var _ = this;
      _._onDone = _._onError = _._async$_onData = null;
      _._zone = t0;
      _._state = t1;
      _._pending = _._cancelFuture = null;
      _.$ti = t2;
    },
    _BufferingStreamSubscription__sendError_sendError: function _BufferingStreamSubscription__sendError_sendError(t0, t1, t2) {
      this.$this = t0;
      this.error = t1;
      this.stackTrace = t2;
    },
    _BufferingStreamSubscription__sendDone_sendDone: function _BufferingStreamSubscription__sendDone_sendDone(t0) {
      this.$this = t0;
    },
    _StreamImpl: function _StreamImpl() {
    },
    _GeneratedStreamImpl: function _GeneratedStreamImpl(t0, t1) {
      this._pending = t0;
      this._isUsed = false;
      this.$ti = t1;
    },
    _IterablePendingEvents: function _IterablePendingEvents(t0, t1) {
      this._async$_iterator = t0;
      this._state = 0;
      this.$ti = t1;
    },
    _DelayedEvent: function _DelayedEvent() {
    },
    _DelayedData: function _DelayedData(t0, t1) {
      this.value = t0;
      this.next = null;
      this.$ti = t1;
    },
    _DelayedError: function _DelayedError(t0, t1) {
      this.error = t0;
      this.stackTrace = t1;
      this.next = null;
    },
    _DelayedDone: function _DelayedDone() {
    },
    _PendingEvents: function _PendingEvents() {
    },
    _PendingEvents_schedule_closure: function _PendingEvents_schedule_closure(t0, t1) {
      this.$this = t0;
      this.dispatch = t1;
    },
    _StreamImplEvents: function _StreamImplEvents(t0) {
      var _ = this;
      _.lastPendingEvent = _.firstPendingEvent = null;
      _._state = 0;
      _.$ti = t0;
    },
    _StreamIterator: function _StreamIterator(t0, t1) {
      var _ = this;
      _._subscription = null;
      _._stateData = t0;
      _._isPaused = false;
      _.$ti = t1;
    },
    _cancelAndError_closure: function _cancelAndError_closure(t0, t1, t2) {
      this.future = t0;
      this.error = t1;
      this.stackTrace = t2;
    },
    _cancelAndErrorClosure_closure: function _cancelAndErrorClosure_closure(t0, t1) {
      this.subscription = t0;
      this.future = t1;
    },
    _ForwardingStream: function _ForwardingStream() {
    },
    _ForwardingStreamSubscription: function _ForwardingStreamSubscription(t0, t1, t2, t3) {
      var _ = this;
      _._stream = t0;
      _._onDone = _._onError = _._async$_onData = _._subscription = null;
      _._zone = t1;
      _._state = t2;
      _._pending = _._cancelFuture = null;
      _.$ti = t3;
    },
    _ExpandStream: function _ExpandStream(t0, t1, t2) {
      this._expand = t0;
      this._async$_source = t1;
      this.$ti = t2;
    },
    _StateStreamSubscription: function _StateStreamSubscription(t0, t1, t2, t3, t4) {
      var _ = this;
      _._sharedState = t0;
      _._stream = t1;
      _._onDone = _._onError = _._async$_onData = _._subscription = null;
      _._zone = t2;
      _._state = t3;
      _._pending = _._cancelFuture = null;
      _.$ti = t4;
    },
    _SkipStream: function _SkipStream(t0, t1, t2) {
      this._count = t0;
      this._async$_source = t1;
      this.$ti = t2;
    },
    Timer: function Timer() {
    },
    AsyncError: function AsyncError(t0, t1) {
      this.error = t0;
      this.stackTrace = t1;
    },
    _Zone: function _Zone() {
    },
    _rootHandleUncaughtError_closure: function _rootHandleUncaughtError_closure(t0, t1) {
      this._box_0 = t0;
      this.stackTrace = t1;
    },
    _RootZone: function _RootZone() {
    },
    _RootZone_bindCallback_closure: function _RootZone_bindCallback_closure(t0, t1, t2) {
      this.$this = t0;
      this.f = t1;
      this.R = t2;
    },
    _RootZone_bindCallbackGuarded_closure: function _RootZone_bindCallbackGuarded_closure(t0, t1) {
      this.$this = t0;
      this.f = t1;
    },
    _RootZone_bindUnaryCallbackGuarded_closure: function _RootZone_bindUnaryCallbackGuarded_closure(t0, t1, t2) {
      this.$this = t0;
      this.f = t1;
      this.T = t2;
    },
    HashMap_HashMap: function($K, $V) {
      return new P._HashMap([$K, $V]);
    },
    _HashMap__getTableEntry: function(table, key) {
      var entry = table[key];
      return entry === table ? null : entry;
    },
    _HashMap__setTableEntry: function(table, key, value) {
      if (value == null)
        table[key] = table;
      else
        table[key] = value;
    },
    _HashMap__newHashTable: function() {
      var table = Object.create(null);
      P._HashMap__setTableEntry(table, "<non-identifier-key>", table);
      delete table["<non-identifier-key>"];
      return table;
    },
    LinkedHashMap_LinkedHashMap: function($K, $V) {
      return new H.JsLinkedHashMap([$K, $V]);
    },
    LinkedHashMap_LinkedHashMap$_literal: function(keyValuePairs, $K, $V) {
      H.listTypeCheck(keyValuePairs);
      return H.assertSubtype(H.fillLiteralMap(keyValuePairs, new H.JsLinkedHashMap([$K, $V])), "$isLinkedHashMap", [$K, $V], "$asLinkedHashMap");
    },
    LinkedHashMap_LinkedHashMap$_empty: function($K, $V) {
      return new H.JsLinkedHashMap([$K, $V]);
    },
    LinkedHashMap__makeEmpty: function() {
      return new H.JsLinkedHashMap([null, null]);
    },
    LinkedHashMap__makeLiteral: function(keyValuePairs) {
      return H.fillLiteralMap(keyValuePairs, new H.JsLinkedHashMap([null, null]));
    },
    HashSet_HashSet: function($E) {
      return new P._HashSet([$E]);
    },
    _HashSet__newHashTable: function() {
      var table = Object.create(null);
      table["<non-identifier-key>"] = table;
      delete table["<non-identifier-key>"];
      return table;
    },
    LinkedHashSet_LinkedHashSet: function($E) {
      return new P._LinkedHashSet([$E]);
    },
    LinkedHashSet_LinkedHashSet$_empty: function($E) {
      return new P._LinkedHashSet([$E]);
    },
    _LinkedHashSet__newHashTable: function() {
      var table = Object.create(null);
      table["<non-identifier-key>"] = table;
      delete table["<non-identifier-key>"];
      return table;
    },
    _LinkedHashSetIterator$: function(_set, _modifications, $E) {
      var t1 = new P._LinkedHashSetIterator(_set, _modifications, [$E]);
      t1._collection$_cell = _set._collection$_first;
      return t1;
    },
    HashMap_HashMap$from: function(other, $K, $V) {
      var result = P.HashMap_HashMap($K, $V);
      other.forEach$1(0, new P.HashMap_HashMap$from_closure(result, $K, $V));
      return H.assertSubtype(result, "$isHashMap", [$K, $V], "$asHashMap");
    },
    HashSet_HashSet$from: function(elements, $E) {
      var t1, _i,
        result = P.HashSet_HashSet($E);
      for (t1 = elements.length, _i = 0; _i < elements.length; elements.length === t1 || (0, H.throwConcurrentModificationError)(elements), ++_i)
        result.add$1(0, H.assertSubtypeOfRuntimeType(elements[_i], $E));
      return result;
    },
    IterableBase_iterableToShortString: function(iterable, leftDelimiter, rightDelimiter) {
      var parts, t1;
      if (P._isToStringVisiting(iterable)) {
        if (leftDelimiter === "(" && rightDelimiter === ")")
          return "(...)";
        return leftDelimiter + "..." + rightDelimiter;
      }
      parts = H.setRuntimeTypeInfo([], [P.String]);
      C.JSArray_methods.add$1($._toStringVisiting, iterable);
      try {
        P._iterablePartsToStrings(iterable, parts);
      } finally {
        if (0 >= $._toStringVisiting.length)
          return H.ioore($._toStringVisiting, -1);
        $._toStringVisiting.pop();
      }
      t1 = P.StringBuffer__writeAll(leftDelimiter, H.listSuperNativeTypeCheck(parts, "$isIterable"), ", ") + rightDelimiter;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    IterableBase_iterableToFullString: function(iterable, leftDelimiter, rightDelimiter) {
      var buffer, t1;
      if (P._isToStringVisiting(iterable))
        return leftDelimiter + "..." + rightDelimiter;
      buffer = new P.StringBuffer(leftDelimiter);
      C.JSArray_methods.add$1($._toStringVisiting, iterable);
      try {
        t1 = buffer;
        t1._contents = P.StringBuffer__writeAll(t1._contents, iterable, ", ");
      } finally {
        if (0 >= $._toStringVisiting.length)
          return H.ioore($._toStringVisiting, -1);
        $._toStringVisiting.pop();
      }
      buffer._contents += rightDelimiter;
      t1 = buffer._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    _isToStringVisiting: function(o) {
      var t1, i;
      for (t1 = $._toStringVisiting.length, i = 0; i < t1; ++i)
        if (o === $._toStringVisiting[i])
          return true;
      return false;
    },
    _iterablePartsToStrings: function(iterable, parts) {
      var it, $length, count, next, ultimateString, penultimateString, penultimate, ultimate, ultimate0, elision;
      H.assertSubtype(parts, "$isList", [P.String], "$asList");
      it = iterable.get$iterator(iterable);
      $length = 0;
      count = 0;
      while (true) {
        if (!($length < 80 || count < 3))
          break;
        if (!it.moveNext$0())
          return;
        next = H.S(it.get$current(it));
        C.JSArray_methods.add$1(parts, next);
        $length += next.length + 2;
        ++count;
      }
      if (!it.moveNext$0()) {
        if (count <= 5)
          return;
        if (0 >= parts.length)
          return H.ioore(parts, -1);
        ultimateString = parts.pop();
        if (0 >= parts.length)
          return H.ioore(parts, -1);
        penultimateString = parts.pop();
      } else {
        penultimate = it.get$current(it);
        ++count;
        if (!it.moveNext$0()) {
          if (count <= 4) {
            C.JSArray_methods.add$1(parts, H.S(penultimate));
            return;
          }
          ultimateString = H.S(penultimate);
          if (0 >= parts.length)
            return H.ioore(parts, -1);
          penultimateString = parts.pop();
          $length += ultimateString.length + 2;
        } else {
          ultimate = it.get$current(it);
          ++count;
          for (; it.moveNext$0(); penultimate = ultimate, ultimate = ultimate0) {
            ultimate0 = it.get$current(it);
            ++count;
            if (count > 100) {
              while (true) {
                if (!($length > 75 && count > 3))
                  break;
                if (0 >= parts.length)
                  return H.ioore(parts, -1);
                $length -= parts.pop().length + 2;
                --count;
              }
              C.JSArray_methods.add$1(parts, "...");
              return;
            }
          }
          penultimateString = H.S(penultimate);
          ultimateString = H.S(ultimate);
          $length += ultimateString.length + penultimateString.length + 4;
        }
      }
      if (count > parts.length + 2) {
        $length += 5;
        elision = "...";
      } else
        elision = null;
      while (true) {
        if (!($length > 80 && parts.length > 3))
          break;
        if (0 >= parts.length)
          return H.ioore(parts, -1);
        $length -= parts.pop().length + 2;
        if (elision == null) {
          $length += 5;
          elision = "...";
        }
      }
      if (elision != null)
        C.JSArray_methods.add$1(parts, elision);
      C.JSArray_methods.add$1(parts, penultimateString);
      C.JSArray_methods.add$1(parts, ultimateString);
    },
    LinkedHashMap_LinkedHashMap$from: function(other, $K, $V) {
      var result = P.LinkedHashMap_LinkedHashMap($K, $V);
      other.forEach$1(0, new P.LinkedHashMap_LinkedHashMap$from_closure(result, $K, $V));
      return result;
    },
    LinkedHashSet_LinkedHashSet$from: function(elements, $E) {
      var t1,
        result = P.LinkedHashSet_LinkedHashSet($E);
      for (t1 = J.get$iterator$ax(elements); t1.moveNext$0();)
        result.add$1(0, H.assertSubtypeOfRuntimeType(t1.get$current(t1), $E));
      return result;
    },
    ListMixin__compareAny: function(a, b) {
      return J.compareTo$1$ns(H.numberOrStringSuperNativeTypeCheck(a, "$isComparable"), H.numberOrStringSuperNativeTypeCheck(b, "$isComparable"));
    },
    MapBase_mapToString: function(m) {
      var result, t1 = {};
      if (P._isToStringVisiting(m))
        return "{...}";
      result = new P.StringBuffer("");
      try {
        C.JSArray_methods.add$1($._toStringVisiting, m);
        result._contents += "{";
        t1.first = true;
        J.forEach$1$ax(m, new P.MapBase_mapToString_closure(t1, result));
        result._contents += "}";
      } finally {
        if (0 >= $._toStringVisiting.length)
          return H.ioore($._toStringVisiting, -1);
        $._toStringVisiting.pop();
      }
      t1 = result._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    ListQueue$: function($E) {
      var t1 = new P.ListQueue([$E]),
        t2 = new Array(8);
      t2.fixed$length = Array;
      t1.set$_table(H.setRuntimeTypeInfo(t2, [$E]));
      return t1;
    },
    ListQueue__nextPowerOf2: function(number) {
      var nextNumber;
      number = (number << 1 >>> 0) - 1;
      for (; true; number = nextNumber) {
        nextNumber = (number & number - 1) >>> 0;
        if (nextNumber === 0)
          return number;
      }
    },
    _dynamicCompare: function(a, b) {
      return J.compareTo$1$ns(a, H.numberOrStringSuperNativeTypeCheck(b, "$isComparable"));
    },
    _defaultCompare: function($K) {
      if (H.functionTypeTest(P.core_Comparable_compare$closure(), {func: 1, ret: P.int, args: [$K, $K]}))
        return P.core_Comparable_compare$closure();
      return P.collection___dynamicCompare$closure();
    },
    SplayTreeMap$: function($K, $V) {
      var t1 = P._defaultCompare($K);
      return new P.SplayTreeMap(new P._SplayTreeMapNode(null, null, [$K, $V]), t1, new P.SplayTreeMap_closure($K), [$K, $V]);
    },
    _HashMap: function _HashMap(t0) {
      var _ = this;
      _._collection$_length = 0;
      _._collection$_keys = _._collection$_rest = _._collection$_nums = _._collection$_strings = null;
      _.$ti = t0;
    },
    _HashMapKeyIterable: function _HashMapKeyIterable(t0, t1) {
      this._collection$_map = t0;
      this.$ti = t1;
    },
    _HashMapKeyIterator: function _HashMapKeyIterator(t0, t1, t2) {
      var _ = this;
      _._collection$_map = t0;
      _._collection$_keys = t1;
      _._offset = 0;
      _._collection$_current = null;
      _.$ti = t2;
    },
    _HashSet: function _HashSet(t0) {
      var _ = this;
      _._collection$_length = 0;
      _._collection$_elements = _._collection$_rest = _._collection$_nums = _._collection$_strings = null;
      _.$ti = t0;
    },
    _HashSetIterator: function _HashSetIterator(t0, t1, t2) {
      var _ = this;
      _._set = t0;
      _._collection$_elements = t1;
      _._offset = 0;
      _._collection$_current = null;
      _.$ti = t2;
    },
    _LinkedHashSet: function _LinkedHashSet(t0) {
      var _ = this;
      _._collection$_length = 0;
      _._collection$_last = _._collection$_first = _._collection$_rest = _._collection$_nums = _._collection$_strings = null;
      _._collection$_modifications = 0;
      _.$ti = t0;
    },
    _LinkedHashSetCell: function _LinkedHashSetCell(t0) {
      this._collection$_element = t0;
      this._collection$_previous = this._collection$_next = null;
    },
    _LinkedHashSetIterator: function _LinkedHashSetIterator(t0, t1, t2) {
      var _ = this;
      _._set = t0;
      _._collection$_modifications = t1;
      _._collection$_current = _._collection$_cell = null;
      _.$ti = t2;
    },
    HashMap_HashMap$from_closure: function HashMap_HashMap$from_closure(t0, t1, t2) {
      this.result = t0;
      this.K = t1;
      this.V = t2;
    },
    IterableBase: function IterableBase() {
    },
    LinkedHashMap_LinkedHashMap$from_closure: function LinkedHashMap_LinkedHashMap$from_closure(t0, t1, t2) {
      this.result = t0;
      this.K = t1;
      this.V = t2;
    },
    LinkedHashSet: function LinkedHashSet() {
    },
    ListBase: function ListBase() {
    },
    ListMixin: function ListMixin() {
    },
    MapBase: function MapBase() {
    },
    MapBase_mapToString_closure: function MapBase_mapToString_closure(t0, t1) {
      this._box_0 = t0;
      this.result = t1;
    },
    MapMixin: function MapMixin() {
    },
    _UnmodifiableMapMixin: function _UnmodifiableMapMixin() {
    },
    MapView: function MapView() {
    },
    UnmodifiableMapView: function UnmodifiableMapView() {
    },
    ListQueue: function ListQueue(t0) {
      var _ = this;
      _._table = null;
      _._modificationCount = _._tail = _._head = 0;
      _.$ti = t0;
    },
    _ListQueueIterator: function _ListQueueIterator(t0, t1, t2, t3, t4) {
      var _ = this;
      _._queue = t0;
      _._end = t1;
      _._modificationCount = t2;
      _._position = t3;
      _._collection$_current = null;
      _.$ti = t4;
    },
    _SetBase: function _SetBase() {
    },
    _SplayTreeNode: function _SplayTreeNode() {
    },
    _SplayTreeMapNode: function _SplayTreeMapNode(t0, t1, t2) {
      var _ = this;
      _.value = t0;
      _.key = t1;
      _.right = _.left = null;
      _.$ti = t2;
    },
    _SplayTree: function _SplayTree() {
    },
    SplayTreeMap: function SplayTreeMap(t0, t1, t2, t3) {
      var _ = this;
      _._root = null;
      _._dummy = t0;
      _._comparator = t1;
      _._validKey = t2;
      _._splayCount = _._modificationCount = _._collection$_count = 0;
      _.$ti = t3;
    },
    SplayTreeMap_closure: function SplayTreeMap_closure(t0) {
      this.K = t0;
    },
    _SplayTreeIterator: function _SplayTreeIterator() {
    },
    _SplayTreeKeyIterable: function _SplayTreeKeyIterable(t0, t1) {
      this._tree = t0;
      this.$ti = t1;
    },
    _SplayTreeValueIterable: function _SplayTreeValueIterable(t0, t1) {
      this._collection$_map = t0;
      this.$ti = t1;
    },
    _SplayTreeKeyIterator: function _SplayTreeKeyIterator(t0, t1, t2, t3, t4) {
      var _ = this;
      _._tree = t0;
      _._workList = t1;
      _._modificationCount = t2;
      _._splayCount = t3;
      _._currentNode = null;
      _.$ti = t4;
    },
    _SplayTreeValueIterator: function _SplayTreeValueIterator(t0, t1, t2, t3, t4) {
      var _ = this;
      _._tree = t0;
      _._workList = t1;
      _._modificationCount = t2;
      _._splayCount = t3;
      _._currentNode = null;
      _.$ti = t4;
    },
    _SplayTreeNodeIterator: function _SplayTreeNodeIterator(t0, t1, t2, t3, t4) {
      var _ = this;
      _._tree = t0;
      _._workList = t1;
      _._modificationCount = t2;
      _._splayCount = t3;
      _._currentNode = null;
      _.$ti = t4;
    },
    _ListBase_Object_ListMixin: function _ListBase_Object_ListMixin() {
    },
    _SplayTreeMap__SplayTree_MapMixin: function _SplayTreeMap__SplayTree_MapMixin() {
    },
    _UnmodifiableMapView_MapView__UnmodifiableMapMixin: function _UnmodifiableMapView_MapView__UnmodifiableMapMixin() {
    },
    _parseJson: function(source, reviver) {
      var parsed, e, exception, t1;
      if (typeof source !== "string")
        throw H.wrapException(H.argumentErrorValue(source));
      parsed = null;
      try {
        parsed = JSON.parse(source);
      } catch (exception) {
        e = H.unwrapException(exception);
        t1 = P.FormatException$(String(e), null, null);
        throw H.wrapException(t1);
      }
      t1 = P._convertJsonToDartLazy(parsed);
      return t1;
    },
    _convertJsonToDartLazy: function(object) {
      var i;
      if (object == null)
        return;
      if (typeof object != "object")
        return object;
      if (Object.getPrototypeOf(object) !== Array.prototype)
        return new P._JsonMap(object, Object.create(null));
      for (i = 0; i < object.length; ++i)
        object[i] = P._convertJsonToDartLazy(object[i]);
      return object;
    },
    Utf8Decoder__convertIntercepted: function(allowMalformed, codeUnits, start, end) {
      H.assertSubtype(codeUnits, "$isList", [P.int], "$asList");
      if (codeUnits instanceof Uint8Array)
        return P.Utf8Decoder__convertInterceptedUint8List(false, codeUnits, start, end);
      return;
    },
    Utf8Decoder__convertInterceptedUint8List: function(allowMalformed, codeUnits, start, end) {
      var t1, $length,
        decoder = $.$get$Utf8Decoder__decoder();
      if (decoder == null)
        return;
      t1 = 0 === start;
      if (t1 && true)
        return P.Utf8Decoder__useTextDecoderChecked(decoder, codeUnits);
      $length = codeUnits.length;
      end = P.RangeError_checkValidRange(start, end, $length);
      if (t1 && end === $length)
        return P.Utf8Decoder__useTextDecoderChecked(decoder, codeUnits);
      return P.Utf8Decoder__useTextDecoderChecked(decoder, codeUnits.subarray(start, end));
    },
    Utf8Decoder__useTextDecoderChecked: function(decoder, codeUnits) {
      if (P.Utf8Decoder__unsafe(codeUnits))
        return;
      return P.Utf8Decoder__useTextDecoderUnchecked(decoder, codeUnits);
    },
    Utf8Decoder__useTextDecoderUnchecked: function(decoder, codeUnits) {
      var t1, exception;
      try {
        t1 = decoder.decode(codeUnits);
        return t1;
      } catch (exception) {
        H.unwrapException(exception);
      }
      return;
    },
    Utf8Decoder__unsafe: function(codeUnits) {
      var i,
        limit = codeUnits.length - 2;
      for (i = 0; i < limit; ++i)
        if (codeUnits[i] === 237)
          if ((codeUnits[i + 1] & 224) === 160)
            return true;
      return false;
    },
    Utf8Decoder__makeDecoder: function() {
      var t1, exception;
      try {
        t1 = new TextDecoder("utf-8", {fatal: true});
        return t1;
      } catch (exception) {
        H.unwrapException(exception);
      }
      return;
    },
    _scanOneByteCharacters: function(units, from, endIndex) {
      var t1, i, unit;
      H.assertSubtype(units, "$isList", [P.int], "$asList");
      if (typeof endIndex !== "number")
        return H.iae(endIndex);
      t1 = units.length;
      i = from;
      for (; i < endIndex; ++i) {
        if (i < 0 || i >= t1)
          return H.ioore(units, i);
        unit = units[i];
        if ((unit & 127) !== unit)
          return i - from;
      }
      return endIndex - from;
    },
    Base64Codec__checkPadding: function(source, sourceIndex, sourceEnd, firstPadding, paddingCount, $length) {
      if (C.JSInt_methods.$mod($length, 4) !== 0)
        throw H.wrapException(P.FormatException$("Invalid base64 padding, padded length must be multiple of four, is " + $length, source, sourceEnd));
      if (firstPadding + paddingCount !== $length)
        throw H.wrapException(P.FormatException$("Invalid base64 padding, '=' not at the end", source, sourceIndex));
      if (paddingCount > 2)
        throw H.wrapException(P.FormatException$("Invalid base64 padding, more than two '=' characters", source, sourceIndex));
    },
    JsonUnsupportedObjectError$: function(unsupportedObject, cause, partialResult) {
      return new P.JsonUnsupportedObjectError(unsupportedObject, cause);
    },
    _defaultToEncodable: function(object) {
      return object.toJson$0();
    },
    _JsonStringStringifier_stringify: function(object, toEncodable, indent) {
      var t1,
        output = new P.StringBuffer(""),
        stringifier = new P._JsonStringStringifier(output, [], P.convert___defaultToEncodable$closure());
      stringifier.writeObject$1(object);
      t1 = output._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    _JsonMap: function _JsonMap(t0, t1) {
      this._original = t0;
      this._processed = t1;
      this._convert$_data = null;
    },
    _JsonMapKeyIterable: function _JsonMapKeyIterable(t0) {
      this._convert$_parent = t0;
    },
    Base64Codec: function Base64Codec() {
    },
    Base64Encoder: function Base64Encoder() {
    },
    Codec: function Codec() {
    },
    Converter: function Converter() {
    },
    Encoding: function Encoding() {
    },
    JsonUnsupportedObjectError: function JsonUnsupportedObjectError(t0, t1) {
      this.unsupportedObject = t0;
      this.cause = t1;
    },
    JsonCyclicError: function JsonCyclicError(t0, t1) {
      this.unsupportedObject = t0;
      this.cause = t1;
    },
    JsonCodec: function JsonCodec() {
    },
    JsonEncoder: function JsonEncoder(t0) {
      this._toEncodable = t0;
    },
    JsonDecoder: function JsonDecoder(t0) {
      this._reviver = t0;
    },
    _JsonStringifier: function _JsonStringifier() {
    },
    _JsonStringifier_writeMap_closure: function _JsonStringifier_writeMap_closure(t0, t1) {
      this._box_0 = t0;
      this.keyValueList = t1;
    },
    _JsonStringStringifier: function _JsonStringStringifier(t0, t1, t2) {
      this._sink = t0;
      this._seen = t1;
      this._toEncodable = t2;
    },
    Utf8Codec: function Utf8Codec() {
    },
    Utf8Encoder: function Utf8Encoder() {
    },
    _Utf8Encoder: function _Utf8Encoder(t0) {
      this._bufferIndex = 0;
      this._convert$_buffer = t0;
    },
    Utf8Decoder: function Utf8Decoder(t0) {
      this._allowMalformed = t0;
    },
    _Utf8Decoder: function _Utf8Decoder(t0, t1) {
      var _ = this;
      _._allowMalformed = t0;
      _._stringSink = t1;
      _._isFirstCharacter = true;
      _._extraUnits = _._expectedUnits = _._convert$_value = 0;
    },
    int_parse: function(source, onError, radix) {
      var value;
      H.functionTypeCheck(onError, {func: 1, ret: P.int, args: [P.String]});
      value = H.Primitives_parseInt(source, radix);
      if (value != null)
        return value;
      if (onError != null)
        return onError.call$1(source);
      throw H.wrapException(P.FormatException$(source, null, null));
    },
    double_parse: function(source) {
      var value = H.Primitives_parseDouble(source);
      if (value != null)
        return value;
      throw H.wrapException(P.FormatException$("Invalid double", source, null));
    },
    Error__objectToString: function(object) {
      if (object instanceof H.Closure)
        return object.toString$0(0);
      return "Instance of '" + H.Primitives_objectTypeName(object) + "'";
    },
    List_List$filled: function($length, fill, $E) {
      var result, i;
      H.assertSubtypeOfRuntimeType(fill, $E);
      result = J.JSArray_JSArray$fixed($length, $E);
      if ($length !== 0 && true)
        for (i = 0; i < result.length; ++i)
          C.JSArray_methods.$indexSet(result, i, fill);
      return H.assertSubtype(result, "$isList", [$E], "$asList");
    },
    List_List$from: function(elements, growable, $E) {
      var t2,
        t1 = [$E],
        list = H.setRuntimeTypeInfo([], t1);
      for (t2 = J.get$iterator$ax(elements); t2.moveNext$0();)
        C.JSArray_methods.add$1(list, H.assertSubtypeOfRuntimeType(t2.get$current(t2), $E));
      if (growable)
        return list;
      return H.assertSubtype(J.JSArray_markFixedList(list), "$isList", t1, "$asList");
    },
    String_String$fromCharCodes: function(charCodes, start, end) {
      var len,
        t1 = P.int;
      H.assertSubtype(charCodes, "$isIterable", [t1], "$asIterable");
      if (typeof charCodes === "object" && charCodes !== null && charCodes.constructor === Array) {
        H.assertSubtype(charCodes, "$isJSArray", [t1], "$asJSArray");
        len = charCodes.length;
        end = P.RangeError_checkValidRange(start, end, len);
        if (start <= 0) {
          if (typeof end !== "number")
            return end.$lt();
          t1 = end < len;
        } else
          t1 = true;
        return H.Primitives_stringFromCharCodes(t1 ? C.JSArray_methods.sublist$2(charCodes, start, end) : charCodes);
      }
      if (!!J.getInterceptor$(charCodes).$isNativeUint8List)
        return H.Primitives_stringFromNativeUint8List(charCodes, start, P.RangeError_checkValidRange(start, end, charCodes.length));
      return P.String__stringFromIterable(charCodes, start, end);
    },
    String__stringFromIterable: function(charCodes, start, end) {
      var t1, it, i, list, _null = null;
      H.assertSubtype(charCodes, "$isIterable", [P.int], "$asIterable");
      if (start < 0)
        throw H.wrapException(P.RangeError$range(start, 0, charCodes.length, _null, _null));
      t1 = end == null;
      if (!t1 && end < start)
        throw H.wrapException(P.RangeError$range(end, start, charCodes.length, _null, _null));
      it = J.get$iterator$ax(charCodes);
      for (i = 0; i < start; ++i)
        if (!it.moveNext$0())
          throw H.wrapException(P.RangeError$range(start, 0, i, _null, _null));
      list = [];
      if (t1)
        for (; it.moveNext$0();)
          list.push(it.get$current(it));
      else
        for (i = start; i < end; ++i) {
          if (!it.moveNext$0())
            throw H.wrapException(P.RangeError$range(end, start, i, _null, _null));
          list.push(it.get$current(it));
        }
      return H.Primitives_stringFromCharCodes(list);
    },
    RegExp_RegExp: function(source) {
      return new H.JSSyntaxRegExp(source, H.JSSyntaxRegExp_makeNative(source, false, true, false));
    },
    StringBuffer__writeAll: function(string, objects, separator) {
      var iterator = J.get$iterator$ax(objects);
      if (!iterator.moveNext$0())
        return string;
      if (separator.length === 0) {
        do
          string += H.S(iterator.get$current(iterator));
        while (iterator.moveNext$0());
      } else {
        string += H.S(iterator.get$current(iterator));
        for (; iterator.moveNext$0();)
          string = string + separator + H.S(iterator.get$current(iterator));
      }
      return string;
    },
    NoSuchMethodError$: function(receiver, memberName, positionalArguments, namedArguments) {
      return new P.NoSuchMethodError(receiver, memberName, positionalArguments, namedArguments);
    },
    _Uri__uriEncode: function(canonicalTable, text, encoding, spaceToPlus) {
      var t1, bytes, i, t2, byte, t3,
        _s16_ = "0123456789ABCDEF";
      H.assertSubtype(canonicalTable, "$isList", [P.int], "$asList");
      if (encoding === C.C_Utf8Codec) {
        t1 = $.$get$_Uri__needsNoEncoding()._nativeRegExp;
        t1 = t1.test(text);
      } else
        t1 = false;
      if (t1)
        return text;
      H.assertSubtypeOfRuntimeType(text, H.getRuntimeTypeArgument(encoding, "Codec", 0));
      bytes = encoding.get$encoder().convert$1(text);
      for (t1 = bytes.length, i = 0, t2 = ""; i < t1; ++i) {
        byte = bytes[i];
        if (byte < 128) {
          t3 = byte >>> 4;
          if (t3 >= 8)
            return H.ioore(canonicalTable, t3);
          t3 = (canonicalTable[t3] & 1 << (byte & 15)) !== 0;
        } else
          t3 = false;
        if (t3)
          t2 += H.Primitives_stringFromCharCode(byte);
        else
          t2 = spaceToPlus && byte === 32 ? t2 + "+" : t2 + "%" + _s16_[byte >>> 4 & 15] + _s16_[byte & 15];
      }
      return t2.charCodeAt(0) == 0 ? t2 : t2;
    },
    Comparable_compare: function(a, b) {
      return J.compareTo$1$ns(H.numberOrStringSuperNativeTypeCheck(a, "$isComparable"), H.numberOrStringSuperNativeTypeCheck(b, "$isComparable"));
    },
    DateTime$_withValue: function(_value, isUtc) {
      var t1;
      if (Math.abs(_value) <= 864e13)
        t1 = false;
      else
        t1 = true;
      if (t1)
        H.throwExpression(P.ArgumentError$("DateTime is outside valid range: " + _value));
      return new P.DateTime(_value, isUtc);
    },
    DateTime__fourDigits: function(n) {
      var absN = Math.abs(n),
        sign = n < 0 ? "-" : "";
      if (absN >= 1000)
        return "" + n;
      if (absN >= 100)
        return sign + "0" + absN;
      if (absN >= 10)
        return sign + "00" + absN;
      return sign + "000" + absN;
    },
    DateTime__threeDigits: function(n) {
      if (n >= 100)
        return "" + n;
      if (n >= 10)
        return "0" + n;
      return "00" + n;
    },
    DateTime__twoDigits: function(n) {
      if (n >= 10)
        return "" + n;
      return "0" + n;
    },
    Duration$: function(microseconds, milliseconds, seconds) {
      return new P.Duration(1000000 * seconds + 1000 * milliseconds + microseconds);
    },
    Error_safeToString: function(object) {
      if (typeof object === "number" || typeof object === "boolean" || null == object)
        return J.toString$0$(object);
      if (typeof object === "string")
        return JSON.stringify(object);
      return P.Error__objectToString(object);
    },
    AssertionError$: function(message) {
      return new P.AssertionError(message);
    },
    ArgumentError$: function(message) {
      return new P.ArgumentError(false, null, null, message);
    },
    ArgumentError$value: function(value, $name, message) {
      return new P.ArgumentError(true, value, $name, message);
    },
    ArgumentError$notNull: function($name) {
      return new P.ArgumentError(false, null, $name, "Must not be null");
    },
    RangeError$value: function(value, $name) {
      return new P.RangeError(null, null, true, value, $name, "Value not in range");
    },
    RangeError$range: function(invalidValue, minValue, maxValue, $name, message) {
      return new P.RangeError(minValue, maxValue, true, invalidValue, $name, "Invalid value");
    },
    RangeError_checkValueInInterval: function(value, minValue, maxValue, $name) {
      var t1;
      if (value >= minValue) {
        if (typeof maxValue !== "number")
          return H.iae(maxValue);
        t1 = value > maxValue;
      } else
        t1 = true;
      if (t1)
        throw H.wrapException(P.RangeError$range(value, minValue, maxValue, $name, null));
    },
    RangeError_checkValidIndex: function(index, indexable, $name, $length) {
      if ($length == null)
        $length = indexable.get$length(indexable);
      if (typeof index !== "number")
        return H.iae(index);
      if (0 > index || index >= $length)
        throw H.wrapException(P.IndexError$(index, indexable, $name == null ? "index" : $name, null, $length));
    },
    RangeError_checkValidRange: function(start, end, $length) {
      var t1;
      if (typeof start !== "number")
        return H.iae(start);
      if (0 <= start) {
        if (typeof $length !== "number")
          return H.iae($length);
        t1 = start > $length;
      } else
        t1 = true;
      if (t1)
        throw H.wrapException(P.RangeError$range(start, 0, $length, "start", null));
      if (end != null) {
        if (!(start > end)) {
          if (typeof $length !== "number")
            return H.iae($length);
          t1 = end > $length;
        } else
          t1 = true;
        if (t1)
          throw H.wrapException(P.RangeError$range(end, start, $length, "end", null));
        return end;
      }
      return $length;
    },
    RangeError_checkNotNegative: function(value, $name) {
      if (typeof value !== "number")
        return value.$lt();
      if (value < 0)
        throw H.wrapException(P.RangeError$range(value, 0, null, $name, null));
    },
    IndexError$: function(invalidValue, indexable, $name, message, $length) {
      var t1 = H.intTypeCheck($length == null ? J.get$length$asx(indexable) : $length);
      return new P.IndexError(t1, true, invalidValue, $name, "Index out of range");
    },
    UnsupportedError$: function(message) {
      return new P.UnsupportedError(message);
    },
    UnimplementedError$: function(message) {
      return new P.UnimplementedError(message);
    },
    StateError$: function(message) {
      return new P.StateError(message);
    },
    ConcurrentModificationError$: function(modifiedObject) {
      return new P.ConcurrentModificationError(modifiedObject);
    },
    Exception_Exception: function(message) {
      return new P._Exception(message);
    },
    FormatException$: function(message, source, offset) {
      return new P.FormatException(message, source, offset);
    },
    List_List$generate: function($length, generator, growable, $E) {
      var result, t1, i;
      H.functionTypeCheck(generator, {func: 1, ret: $E, args: [P.int]});
      if (growable) {
        result = H.setRuntimeTypeInfo([], [$E]);
        C.JSArray_methods.set$length(result, $length);
      } else {
        t1 = new Array($length);
        t1.fixed$length = Array;
        result = H.setRuntimeTypeInfo(t1, [$E]);
      }
      for (i = 0; i < $length; ++i)
        C.JSArray_methods.$indexSet(result, i, generator.call$1(i));
      return result;
    },
    print: function(object) {
      H.printString(H.S(object));
    },
    Stopwatch$: function() {
      if ($.Stopwatch__frequency == null) {
        H.Primitives_initTicker();
        $.Stopwatch__frequency = $.Primitives_timerFrequency;
      }
      return new P.Stopwatch();
    },
    Uri_parse: function(uri) {
      var delta, t1, indices, schemeEnd, hostStart, portStart, pathStart, queryStart, fragmentStart, isSimple, scheme, t2, schemeAuth, queryStart0, pathStart0, _null = null,
        end = uri.length;
      if (end >= 5) {
        delta = ((J._codeUnitAt$1$s(uri, 4) ^ 58) * 3 | C.JSString_methods._codeUnitAt$1(uri, 0) ^ 100 | C.JSString_methods._codeUnitAt$1(uri, 1) ^ 97 | C.JSString_methods._codeUnitAt$1(uri, 2) ^ 116 | C.JSString_methods._codeUnitAt$1(uri, 3) ^ 97) >>> 0;
        if (delta === 0)
          return P.UriData__parse(end < end ? C.JSString_methods.substring$2(uri, 0, end) : uri, 5, _null).get$uri();
        else if (delta === 32)
          return P.UriData__parse(C.JSString_methods.substring$2(uri, 5, end), 0, _null).get$uri();
      }
      t1 = new Array(8);
      t1.fixed$length = Array;
      indices = H.setRuntimeTypeInfo(t1, [P.int]);
      C.JSArray_methods.$indexSet(indices, 0, 0);
      C.JSArray_methods.$indexSet(indices, 1, -1);
      C.JSArray_methods.$indexSet(indices, 2, -1);
      C.JSArray_methods.$indexSet(indices, 7, -1);
      C.JSArray_methods.$indexSet(indices, 3, 0);
      C.JSArray_methods.$indexSet(indices, 4, 0);
      C.JSArray_methods.$indexSet(indices, 5, end);
      C.JSArray_methods.$indexSet(indices, 6, end);
      if (P._scan(uri, 0, end, 0, indices) >= 14)
        C.JSArray_methods.$indexSet(indices, 7, end);
      schemeEnd = indices[1];
      if (typeof schemeEnd !== "number")
        return schemeEnd.$ge();
      if (schemeEnd >= 0)
        if (P._scan(uri, 0, schemeEnd, 20, indices) === 20)
          indices[7] = schemeEnd;
      t1 = indices[2];
      if (typeof t1 !== "number")
        return t1.$add();
      hostStart = t1 + 1;
      portStart = indices[3];
      pathStart = indices[4];
      queryStart = indices[5];
      fragmentStart = indices[6];
      if (typeof fragmentStart !== "number")
        return fragmentStart.$lt();
      if (typeof queryStart !== "number")
        return H.iae(queryStart);
      if (fragmentStart < queryStart)
        queryStart = fragmentStart;
      if (typeof pathStart !== "number")
        return pathStart.$lt();
      if (pathStart < hostStart)
        pathStart = queryStart;
      else if (pathStart <= schemeEnd)
        pathStart = schemeEnd + 1;
      if (typeof portStart !== "number")
        return portStart.$lt();
      if (portStart < hostStart)
        portStart = pathStart;
      t1 = indices[7];
      if (typeof t1 !== "number")
        return t1.$lt();
      isSimple = t1 < 0;
      if (isSimple)
        if (hostStart > schemeEnd + 3) {
          scheme = _null;
          isSimple = false;
        } else {
          t1 = portStart > 0;
          if (t1 && portStart + 1 === pathStart) {
            scheme = _null;
            isSimple = false;
          } else {
            if (!(queryStart < end && queryStart === pathStart + 2 && J.startsWith$2$s(uri, "..", pathStart)))
              t2 = queryStart > pathStart + 2 && J.startsWith$2$s(uri, "/..", queryStart - 3);
            else
              t2 = true;
            if (t2) {
              scheme = _null;
              isSimple = false;
            } else {
              if (schemeEnd === 4)
                if (J.startsWith$2$s(uri, "file", 0)) {
                  if (hostStart <= 0) {
                    if (!C.JSString_methods.startsWith$2(uri, "/", pathStart)) {
                      schemeAuth = "file:///";
                      delta = 3;
                    } else {
                      schemeAuth = "file://";
                      delta = 2;
                    }
                    uri = schemeAuth + C.JSString_methods.substring$2(uri, pathStart, end);
                    schemeEnd -= 0;
                    t1 = delta - 0;
                    queryStart += t1;
                    fragmentStart += t1;
                    end = uri.length;
                    hostStart = 7;
                    portStart = 7;
                    pathStart = 7;
                  } else if (pathStart === queryStart) {
                    queryStart0 = queryStart + 1;
                    ++fragmentStart;
                    uri = C.JSString_methods.replaceRange$3(uri, pathStart, queryStart, "/");
                    ++end;
                    queryStart = queryStart0;
                  }
                  scheme = "file";
                } else if (C.JSString_methods.startsWith$2(uri, "http", 0)) {
                  if (t1 && portStart + 3 === pathStart && C.JSString_methods.startsWith$2(uri, "80", portStart + 1)) {
                    pathStart0 = pathStart - 3;
                    queryStart -= 3;
                    fragmentStart -= 3;
                    uri = C.JSString_methods.replaceRange$3(uri, portStart, pathStart, "");
                    end -= 3;
                    pathStart = pathStart0;
                  }
                  scheme = "http";
                } else
                  scheme = _null;
              else if (schemeEnd === 5 && J.startsWith$2$s(uri, "https", 0)) {
                if (t1 && portStart + 4 === pathStart && J.startsWith$2$s(uri, "443", portStart + 1)) {
                  pathStart0 = pathStart - 4;
                  queryStart -= 4;
                  fragmentStart -= 4;
                  uri = J.replaceRange$3$s(uri, portStart, pathStart, "");
                  end -= 3;
                  pathStart = pathStart0;
                }
                scheme = "https";
              } else
                scheme = _null;
              isSimple = true;
            }
          }
        }
      else
        scheme = _null;
      if (isSimple) {
        t1 = uri.length;
        if (end < t1) {
          uri = J.substring$2$s(uri, 0, end);
          schemeEnd -= 0;
          hostStart -= 0;
          portStart -= 0;
          pathStart -= 0;
          queryStart -= 0;
          fragmentStart -= 0;
        }
        return new P._SimpleUri(uri, schemeEnd, hostStart, portStart, pathStart, queryStart, fragmentStart, scheme);
      }
      return P._Uri__Uri$notSimple(uri, 0, end, schemeEnd, hostStart, portStart, pathStart, queryStart, fragmentStart, scheme);
    },
    Uri__parseIPv4Address: function(host, start, end) {
      var t1, i, partStart, partIndex, char, part, partIndex0, _null = null,
        _s43_ = "IPv4 address should contain exactly 4 parts",
        _s37_ = "each part must be in the range 0..255",
        error = new P.Uri__parseIPv4Address_error(host),
        result = new Uint8Array(4);
      for (t1 = result.length, i = start, partStart = i, partIndex = 0; i < end; ++i) {
        char = C.JSString_methods.codeUnitAt$1(host, i);
        if (char !== 46) {
          if ((char ^ 48) > 9)
            error.call$2("invalid character", i);
        } else {
          if (partIndex === 3)
            error.call$2(_s43_, i);
          part = P.int_parse(C.JSString_methods.substring$2(host, partStart, i), _null, _null);
          if (typeof part !== "number")
            return part.$gt();
          if (part > 255)
            error.call$2(_s37_, partStart);
          partIndex0 = partIndex + 1;
          if (partIndex >= t1)
            return H.ioore(result, partIndex);
          result[partIndex] = part;
          partStart = i + 1;
          partIndex = partIndex0;
        }
      }
      if (partIndex !== 3)
        error.call$2(_s43_, end);
      part = P.int_parse(C.JSString_methods.substring$2(host, partStart, end), _null, _null);
      if (typeof part !== "number")
        return part.$gt();
      if (part > 255)
        error.call$2(_s37_, partStart);
      if (partIndex >= t1)
        return H.ioore(result, partIndex);
      result[partIndex] = part;
      return result;
    },
    Uri_parseIPv6Address: function(host, start, end) {
      var error, parseHex, parts, i, partStart, wildcardSeen, seenDot, char, atEnd, t1, last, bytes, t2, wildCardLength, index, value, j, t3;
      if (end == null)
        end = host.length;
      error = new P.Uri_parseIPv6Address_error(host);
      parseHex = new P.Uri_parseIPv6Address_parseHex(error, host);
      if (host.length < 2)
        error.call$1("address is too short");
      parts = H.setRuntimeTypeInfo([], [P.int]);
      for (i = start, partStart = i, wildcardSeen = false, seenDot = false; i < end; ++i) {
        char = C.JSString_methods.codeUnitAt$1(host, i);
        if (char === 58) {
          if (i === start) {
            ++i;
            if (C.JSString_methods.codeUnitAt$1(host, i) !== 58)
              error.call$2("invalid start colon.", i);
            partStart = i;
          }
          if (i === partStart) {
            if (wildcardSeen)
              error.call$2("only one wildcard `::` is allowed", i);
            C.JSArray_methods.add$1(parts, -1);
            wildcardSeen = true;
          } else
            C.JSArray_methods.add$1(parts, parseHex.call$2(partStart, i));
          partStart = i + 1;
        } else if (char === 46)
          seenDot = true;
      }
      if (parts.length === 0)
        error.call$1("too few parts");
      atEnd = partStart === end;
      t1 = C.JSArray_methods.get$last(parts);
      if (atEnd && t1 !== -1)
        error.call$2("expected a part after last `:`", end);
      if (!atEnd)
        if (!seenDot)
          C.JSArray_methods.add$1(parts, parseHex.call$2(partStart, end));
        else {
          last = P.Uri__parseIPv4Address(host, partStart, end);
          C.JSArray_methods.add$1(parts, (last[0] << 8 | last[1]) >>> 0);
          C.JSArray_methods.add$1(parts, (last[2] << 8 | last[3]) >>> 0);
        }
      if (wildcardSeen) {
        if (parts.length > 7)
          error.call$1("an address with a wildcard must have less than 7 parts");
      } else if (parts.length !== 8)
        error.call$1("an address without a wildcard must contain exactly 8 parts");
      bytes = new Uint8Array(16);
      for (t1 = parts.length, t2 = bytes.length, wildCardLength = 9 - t1, i = 0, index = 0; i < t1; ++i) {
        value = parts[i];
        if (value === -1)
          for (j = 0; j < wildCardLength; ++j) {
            if (index < 0 || index >= t2)
              return H.ioore(bytes, index);
            bytes[index] = 0;
            t3 = index + 1;
            if (t3 >= t2)
              return H.ioore(bytes, t3);
            bytes[t3] = 0;
            index += 2;
          }
        else {
          t3 = C.JSInt_methods._shrOtherPositive$1(value, 8);
          if (index < 0 || index >= t2)
            return H.ioore(bytes, index);
          bytes[index] = t3;
          t3 = index + 1;
          if (t3 >= t2)
            return H.ioore(bytes, t3);
          bytes[t3] = value & 255;
          index += 2;
        }
      }
      return bytes;
    },
    _Uri__Uri$notSimple: function(uri, start, end, schemeEnd, hostStart, portStart, pathStart, queryStart, fragmentStart, scheme) {
      var userInfoStart, userInfo, host, t1, port, path, query, _null = null;
      if (scheme == null)
        if (schemeEnd > start)
          scheme = P._Uri__makeScheme(uri, start, schemeEnd);
        else {
          if (schemeEnd === start)
            P._Uri__fail(uri, start, "Invalid empty scheme");
          scheme = "";
        }
      if (hostStart > start) {
        userInfoStart = schemeEnd + 3;
        userInfo = userInfoStart < hostStart ? P._Uri__makeUserInfo(uri, userInfoStart, hostStart - 1) : "";
        host = P._Uri__makeHost(uri, hostStart, portStart, false);
        if (typeof portStart !== "number")
          return portStart.$add();
        t1 = portStart + 1;
        if (typeof pathStart !== "number")
          return H.iae(pathStart);
        port = t1 < pathStart ? P._Uri__makePort(P.int_parse(J.substring$2$s(uri, t1, pathStart), new P._Uri__Uri$notSimple_closure(uri, portStart), _null), scheme) : _null;
      } else {
        port = _null;
        host = port;
        userInfo = "";
      }
      path = P._Uri__makePath(uri, pathStart, queryStart, _null, scheme, host != null);
      if (typeof queryStart !== "number")
        return queryStart.$lt();
      query = queryStart < fragmentStart ? P._Uri__makeQuery(uri, queryStart + 1, fragmentStart, _null) : _null;
      return new P._Uri(scheme, userInfo, host, port, path, query, fragmentStart < end ? P._Uri__makeFragment(uri, fragmentStart + 1, end) : _null);
    },
    _Uri__defaultPort: function(scheme) {
      if (scheme === "http")
        return 80;
      if (scheme === "https")
        return 443;
      return 0;
    },
    _Uri__fail: function(uri, index, message) {
      throw H.wrapException(P.FormatException$(message, uri, index));
    },
    _Uri__makePort: function(port, scheme) {
      if (port != null && port === P._Uri__defaultPort(scheme))
        return;
      return port;
    },
    _Uri__makeHost: function(host, start, end, strictIPv6) {
      var t1, i;
      if (host == null)
        return;
      if (start === end)
        return "";
      if (C.JSString_methods.codeUnitAt$1(host, start) === 91) {
        if (typeof end !== "number")
          return end.$sub();
        t1 = end - 1;
        if (C.JSString_methods.codeUnitAt$1(host, t1) !== 93)
          P._Uri__fail(host, start, "Missing end `]` to match `[` in host");
        P.Uri_parseIPv6Address(host, start + 1, t1);
        return C.JSString_methods.substring$2(host, start, end).toLowerCase();
      }
      if (typeof end !== "number")
        return H.iae(end);
      i = start;
      for (; i < end; ++i)
        if (C.JSString_methods.codeUnitAt$1(host, i) === 58) {
          P.Uri_parseIPv6Address(host, start, end);
          return "[" + host + "]";
        }
      return P._Uri__normalizeRegName(host, start, end);
    },
    _Uri__normalizeRegName: function(host, start, end) {
      var index, sectionStart, buffer, isNormalized, char, replacement, t1, slice, t2, sourceLength, tail;
      if (typeof end !== "number")
        return H.iae(end);
      index = start;
      sectionStart = index;
      buffer = null;
      isNormalized = true;
      for (; index < end;) {
        char = C.JSString_methods.codeUnitAt$1(host, index);
        if (char === 37) {
          replacement = P._Uri__normalizeEscape(host, index, true);
          t1 = replacement == null;
          if (t1 && isNormalized) {
            index += 3;
            continue;
          }
          if (buffer == null)
            buffer = new P.StringBuffer("");
          slice = C.JSString_methods.substring$2(host, sectionStart, index);
          t2 = buffer._contents += !isNormalized ? slice.toLowerCase() : slice;
          if (t1) {
            replacement = C.JSString_methods.substring$2(host, index, index + 3);
            sourceLength = 3;
          } else if (replacement === "%") {
            replacement = "%25";
            sourceLength = 1;
          } else
            sourceLength = 3;
          buffer._contents = t2 + replacement;
          index += sourceLength;
          sectionStart = index;
          isNormalized = true;
        } else {
          if (char < 127) {
            t1 = char >>> 4;
            if (t1 >= 8)
              return H.ioore(C.List_qNA, t1);
            t1 = (C.List_qNA[t1] & 1 << (char & 15)) !== 0;
          } else
            t1 = false;
          if (t1) {
            if (isNormalized && 65 <= char && 90 >= char) {
              if (buffer == null)
                buffer = new P.StringBuffer("");
              if (sectionStart < index) {
                buffer._contents += C.JSString_methods.substring$2(host, sectionStart, index);
                sectionStart = index;
              }
              isNormalized = false;
            }
            ++index;
          } else {
            if (char <= 93) {
              t1 = char >>> 4;
              if (t1 >= 8)
                return H.ioore(C.List_2Vk, t1);
              t1 = (C.List_2Vk[t1] & 1 << (char & 15)) !== 0;
            } else
              t1 = false;
            if (t1)
              P._Uri__fail(host, index, "Invalid character");
            else {
              if ((char & 64512) === 55296 && index + 1 < end) {
                tail = C.JSString_methods.codeUnitAt$1(host, index + 1);
                if ((tail & 64512) === 56320) {
                  char = 65536 | (char & 1023) << 10 | tail & 1023;
                  sourceLength = 2;
                } else
                  sourceLength = 1;
              } else
                sourceLength = 1;
              if (buffer == null)
                buffer = new P.StringBuffer("");
              slice = C.JSString_methods.substring$2(host, sectionStart, index);
              buffer._contents += !isNormalized ? slice.toLowerCase() : slice;
              buffer._contents += P._Uri__escapeChar(char);
              index += sourceLength;
              sectionStart = index;
            }
          }
        }
      }
      if (buffer == null)
        return C.JSString_methods.substring$2(host, start, end);
      if (sectionStart < end) {
        slice = C.JSString_methods.substring$2(host, sectionStart, end);
        buffer._contents += !isNormalized ? slice.toLowerCase() : slice;
      }
      t1 = buffer._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    _Uri__makeScheme: function(scheme, start, end) {
      var i, containsUpperCase, codeUnit, t1;
      if (start === end)
        return "";
      if (!P._Uri__isAlphabeticCharacter(J.getInterceptor$s(scheme)._codeUnitAt$1(scheme, start)))
        P._Uri__fail(scheme, start, "Scheme not starting with alphabetic character");
      for (i = start, containsUpperCase = false; i < end; ++i) {
        codeUnit = C.JSString_methods._codeUnitAt$1(scheme, i);
        if (codeUnit < 128) {
          t1 = codeUnit >>> 4;
          if (t1 >= 8)
            return H.ioore(C.List_JYB, t1);
          t1 = (C.List_JYB[t1] & 1 << (codeUnit & 15)) !== 0;
        } else
          t1 = false;
        if (!t1)
          P._Uri__fail(scheme, i, "Illegal scheme character");
        if (65 <= codeUnit && codeUnit <= 90)
          containsUpperCase = true;
      }
      scheme = C.JSString_methods.substring$2(scheme, start, end);
      return P._Uri__canonicalizeScheme(containsUpperCase ? scheme.toLowerCase() : scheme);
    },
    _Uri__canonicalizeScheme: function(scheme) {
      if (scheme === "http")
        return "http";
      if (scheme === "file")
        return "file";
      if (scheme === "https")
        return "https";
      if (scheme === "package")
        return "package";
      return scheme;
    },
    _Uri__makeUserInfo: function(userInfo, start, end) {
      if (userInfo == null)
        return "";
      return P._Uri__normalizeOrSubstring(userInfo, start, end, C.List_gRj, false);
    },
    _Uri__makePath: function(path, start, end, pathSegments, scheme, hasAuthority) {
      var result,
        isFile = scheme === "file",
        ensureLeadingSlash = isFile || hasAuthority,
        t1 = path == null;
      if (t1 && true)
        return isFile ? "/" : "";
      result = !t1 ? P._Uri__normalizeOrSubstring(path, start, end, C.List_qg4, true) : C.JSNull_methods.map$1$1(pathSegments, new P._Uri__makePath_closure(), P.String).join$1(0, "/");
      if (result.length === 0) {
        if (isFile)
          return "/";
      } else if (ensureLeadingSlash && !C.JSString_methods.startsWith$1(result, "/"))
        result = "/" + result;
      return P._Uri__normalizePath(result, scheme, hasAuthority);
    },
    _Uri__normalizePath: function(path, scheme, hasAuthority) {
      var t1 = scheme.length === 0;
      if (t1 && !hasAuthority && !C.JSString_methods.startsWith$1(path, "/"))
        return P._Uri__normalizeRelativePath(path, !t1 || hasAuthority);
      return P._Uri__removeDotSegments(path);
    },
    _Uri__makeQuery: function(query, start, end, queryParameters) {
      if (query != null)
        return P._Uri__normalizeOrSubstring(query, start, end, C.List_CVk, true);
      return;
    },
    _Uri__makeFragment: function(fragment, start, end) {
      if (fragment == null)
        return;
      return P._Uri__normalizeOrSubstring(fragment, start, end, C.List_CVk, true);
    },
    _Uri__normalizeEscape: function(source, index, lowerCase) {
      var firstDigit, secondDigit, firstDigitValue, secondDigitValue, value,
        t1 = index + 2;
      if (t1 >= source.length)
        return "%";
      firstDigit = C.JSString_methods.codeUnitAt$1(source, index + 1);
      secondDigit = C.JSString_methods.codeUnitAt$1(source, t1);
      firstDigitValue = H.hexDigitValue(firstDigit);
      secondDigitValue = H.hexDigitValue(secondDigit);
      if (firstDigitValue < 0 || secondDigitValue < 0)
        return "%";
      value = firstDigitValue * 16 + secondDigitValue;
      if (value < 127) {
        t1 = C.JSInt_methods._shrOtherPositive$1(value, 4);
        if (t1 >= 8)
          return H.ioore(C.List_nxB, t1);
        t1 = (C.List_nxB[t1] & 1 << (value & 15)) !== 0;
      } else
        t1 = false;
      if (t1)
        return H.Primitives_stringFromCharCode(lowerCase && 65 <= value && 90 >= value ? (value | 32) >>> 0 : value);
      if (firstDigit >= 97 || secondDigit >= 97)
        return C.JSString_methods.substring$2(source, index, index + 3).toUpperCase();
      return;
    },
    _Uri__escapeChar: function(char) {
      var t1, codeUnits, flag, encodedBytes, index, byte,
        _s16_ = "0123456789ABCDEF";
      if (char < 128) {
        t1 = new Array(3);
        t1.fixed$length = Array;
        codeUnits = H.setRuntimeTypeInfo(t1, [P.int]);
        C.JSArray_methods.$indexSet(codeUnits, 0, 37);
        C.JSArray_methods.$indexSet(codeUnits, 1, C.JSString_methods._codeUnitAt$1(_s16_, char >>> 4));
        C.JSArray_methods.$indexSet(codeUnits, 2, C.JSString_methods._codeUnitAt$1(_s16_, char & 15));
      } else {
        if (char > 2047)
          if (char > 65535) {
            flag = 240;
            encodedBytes = 4;
          } else {
            flag = 224;
            encodedBytes = 3;
          }
        else {
          flag = 192;
          encodedBytes = 2;
        }
        t1 = new Array(3 * encodedBytes);
        t1.fixed$length = Array;
        codeUnits = H.setRuntimeTypeInfo(t1, [P.int]);
        for (index = 0; --encodedBytes, encodedBytes >= 0; flag = 128) {
          byte = C.JSInt_methods._shrReceiverPositive$1(char, 6 * encodedBytes) & 63 | flag;
          C.JSArray_methods.$indexSet(codeUnits, index, 37);
          C.JSArray_methods.$indexSet(codeUnits, index + 1, C.JSString_methods._codeUnitAt$1(_s16_, byte >>> 4));
          C.JSArray_methods.$indexSet(codeUnits, index + 2, C.JSString_methods._codeUnitAt$1(_s16_, byte & 15));
          index += 3;
        }
      }
      return P.String_String$fromCharCodes(codeUnits, 0, null);
    },
    _Uri__normalizeOrSubstring: function(component, start, end, charTable, escapeDelimiters) {
      var t1 = P._Uri__normalize(component, start, end, H.assertSubtype(charTable, "$isList", [P.int], "$asList"), escapeDelimiters);
      return t1 == null ? C.JSString_methods.substring$2(component, start, end) : t1;
    },
    _Uri__normalize: function(component, start, end, charTable, escapeDelimiters) {
      var t1, index, sectionStart, buffer, char, t2, replacement, sourceLength, tail;
      H.assertSubtype(charTable, "$isList", [P.int], "$asList");
      t1 = !escapeDelimiters;
      index = start;
      sectionStart = index;
      buffer = null;
      while (true) {
        if (typeof index !== "number")
          return index.$lt();
        if (typeof end !== "number")
          return H.iae(end);
        if (!(index < end))
          break;
        c$0: {
          char = C.JSString_methods.codeUnitAt$1(component, index);
          if (char < 127) {
            t2 = char >>> 4;
            if (t2 >= 8)
              return H.ioore(charTable, t2);
            t2 = (charTable[t2] & 1 << (char & 15)) !== 0;
          } else
            t2 = false;
          if (t2)
            ++index;
          else {
            if (char === 37) {
              replacement = P._Uri__normalizeEscape(component, index, false);
              if (replacement == null) {
                index += 3;
                break c$0;
              }
              if ("%" === replacement) {
                replacement = "%25";
                sourceLength = 1;
              } else
                sourceLength = 3;
            } else {
              if (t1)
                if (char <= 93) {
                  t2 = char >>> 4;
                  if (t2 >= 8)
                    return H.ioore(C.List_2Vk, t2);
                  t2 = (C.List_2Vk[t2] & 1 << (char & 15)) !== 0;
                } else
                  t2 = false;
              else
                t2 = false;
              if (t2) {
                P._Uri__fail(component, index, "Invalid character");
                replacement = null;
                sourceLength = null;
              } else {
                if ((char & 64512) === 55296) {
                  t2 = index + 1;
                  if (t2 < end) {
                    tail = C.JSString_methods.codeUnitAt$1(component, t2);
                    if ((tail & 64512) === 56320) {
                      char = 65536 | (char & 1023) << 10 | tail & 1023;
                      sourceLength = 2;
                    } else
                      sourceLength = 1;
                  } else
                    sourceLength = 1;
                } else
                  sourceLength = 1;
                replacement = P._Uri__escapeChar(char);
              }
            }
            if (buffer == null)
              buffer = new P.StringBuffer("");
            buffer._contents += C.JSString_methods.substring$2(component, sectionStart, index);
            buffer._contents += H.S(replacement);
            if (typeof sourceLength !== "number")
              return H.iae(sourceLength);
            index += sourceLength;
            sectionStart = index;
          }
        }
      }
      if (buffer == null)
        return;
      if (typeof sectionStart !== "number")
        return sectionStart.$lt();
      if (sectionStart < end)
        buffer._contents += C.JSString_methods.substring$2(component, sectionStart, end);
      t1 = buffer._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    _Uri__mayContainDotSegments: function(path) {
      if (C.JSString_methods.startsWith$1(path, "."))
        return true;
      return C.JSString_methods.indexOf$1(path, "/.") !== -1;
    },
    _Uri__removeDotSegments: function(path) {
      var output, t1, t2, appendSlash, _i, segment, t3;
      if (!P._Uri__mayContainDotSegments(path))
        return path;
      output = H.setRuntimeTypeInfo([], [P.String]);
      for (t1 = path.split("/"), t2 = t1.length, appendSlash = false, _i = 0; _i < t2; ++_i) {
        segment = t1[_i];
        if (J.$eq$(segment, "..")) {
          t3 = output.length;
          if (t3 !== 0) {
            if (0 >= t3)
              return H.ioore(output, -1);
            output.pop();
            if (output.length === 0)
              C.JSArray_methods.add$1(output, "");
          }
          appendSlash = true;
        } else if ("." === segment)
          appendSlash = true;
        else {
          C.JSArray_methods.add$1(output, segment);
          appendSlash = false;
        }
      }
      if (appendSlash)
        C.JSArray_methods.add$1(output, "");
      return C.JSArray_methods.join$1(output, "/");
    },
    _Uri__normalizeRelativePath: function(path, allowScheme) {
      var output, t1, t2, appendSlash, _i, segment;
      if (!P._Uri__mayContainDotSegments(path))
        return !allowScheme ? P._Uri__escapeScheme(path) : path;
      output = H.setRuntimeTypeInfo([], [P.String]);
      for (t1 = path.split("/"), t2 = t1.length, appendSlash = false, _i = 0; _i < t2; ++_i) {
        segment = t1[_i];
        if (".." === segment)
          if (output.length !== 0 && C.JSArray_methods.get$last(output) !== "..") {
            if (0 >= output.length)
              return H.ioore(output, -1);
            output.pop();
            appendSlash = true;
          } else {
            C.JSArray_methods.add$1(output, "..");
            appendSlash = false;
          }
        else if ("." === segment)
          appendSlash = true;
        else {
          C.JSArray_methods.add$1(output, segment);
          appendSlash = false;
        }
      }
      t1 = output.length;
      if (t1 !== 0)
        if (t1 === 1) {
          if (0 >= t1)
            return H.ioore(output, 0);
          t1 = output[0].length === 0;
        } else
          t1 = false;
      else
        t1 = true;
      if (t1)
        return "./";
      if (appendSlash || C.JSArray_methods.get$last(output) === "..")
        C.JSArray_methods.add$1(output, "");
      if (!allowScheme) {
        if (0 >= output.length)
          return H.ioore(output, 0);
        C.JSArray_methods.$indexSet(output, 0, P._Uri__escapeScheme(output[0]));
      }
      return C.JSArray_methods.join$1(output, "/");
    },
    _Uri__escapeScheme: function(path) {
      var i, char, t2,
        t1 = path.length;
      if (t1 >= 2 && P._Uri__isAlphabeticCharacter(J._codeUnitAt$1$s(path, 0)))
        for (i = 1; i < t1; ++i) {
          char = C.JSString_methods._codeUnitAt$1(path, i);
          if (char === 58)
            return C.JSString_methods.substring$2(path, 0, i) + "%3A" + C.JSString_methods.substring$1(path, i + 1);
          if (char <= 127) {
            t2 = char >>> 4;
            if (t2 >= 8)
              return H.ioore(C.List_JYB, t2);
            t2 = (C.List_JYB[t2] & 1 << (char & 15)) === 0;
          } else
            t2 = true;
          if (t2)
            break;
        }
      return path;
    },
    _Uri__isAlphabeticCharacter: function(codeUnit) {
      var lowerCase = codeUnit | 32;
      return 97 <= lowerCase && lowerCase <= 122;
    },
    UriData__parse: function(text, start, sourceUri) {
      var t1, i, slashIndex, char, equalsIndex, lastSeparator, t2, data,
        _s17_ = "Invalid MIME type",
        indices = H.setRuntimeTypeInfo([start - 1], [P.int]);
      for (t1 = text.length, i = start, slashIndex = -1, char = null; i < t1; ++i) {
        char = C.JSString_methods._codeUnitAt$1(text, i);
        if (char === 44 || char === 59)
          break;
        if (char === 47) {
          if (slashIndex < 0) {
            slashIndex = i;
            continue;
          }
          throw H.wrapException(P.FormatException$(_s17_, text, i));
        }
      }
      if (slashIndex < 0 && i > start)
        throw H.wrapException(P.FormatException$(_s17_, text, i));
      for (; char !== 44;) {
        C.JSArray_methods.add$1(indices, i);
        ++i;
        for (equalsIndex = -1; i < t1; ++i) {
          char = C.JSString_methods._codeUnitAt$1(text, i);
          if (char === 61) {
            if (equalsIndex < 0)
              equalsIndex = i;
          } else if (char === 59 || char === 44)
            break;
        }
        if (equalsIndex >= 0)
          C.JSArray_methods.add$1(indices, equalsIndex);
        else {
          lastSeparator = C.JSArray_methods.get$last(indices);
          if (char !== 44 || i !== lastSeparator + 7 || !C.JSString_methods.startsWith$2(text, "base64", lastSeparator + 1))
            throw H.wrapException(P.FormatException$("Expecting '='", text, i));
          break;
        }
      }
      C.JSArray_methods.add$1(indices, i);
      t2 = i + 1;
      if ((indices.length & 1) === 1)
        text = C.C_Base64Codec.normalize$3(0, text, t2, t1);
      else {
        data = P._Uri__normalize(text, t2, t1, C.List_CVk, true);
        if (data != null)
          text = C.JSString_methods.replaceRange$3(text, t2, t1, data);
      }
      return new P.UriData(text, indices, sourceUri);
    },
    _createTables: function() {
      var _s77_ = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-._~!$&'()*+,;=",
        _s1_ = ".", _s1_0 = ":", _s1_1 = "/", _s1_2 = "?", _s1_3 = "#",
        tables = P.List_List$generate(22, new P._createTables_closure(), true, P.Uint8List),
        t1 = new P._createTables_build(tables),
        t2 = new P._createTables_setChars(),
        t3 = new P._createTables_setRange(),
        b = H.interceptedTypeCheck(t1.call$2(0, 225), "$isUint8List");
      t2.call$3(b, _s77_, 1);
      t2.call$3(b, _s1_, 14);
      t2.call$3(b, _s1_0, 34);
      t2.call$3(b, _s1_1, 3);
      t2.call$3(b, _s1_2, 172);
      t2.call$3(b, _s1_3, 205);
      b = H.interceptedTypeCheck(t1.call$2(14, 225), "$isUint8List");
      t2.call$3(b, _s77_, 1);
      t2.call$3(b, _s1_, 15);
      t2.call$3(b, _s1_0, 34);
      t2.call$3(b, _s1_1, 234);
      t2.call$3(b, _s1_2, 172);
      t2.call$3(b, _s1_3, 205);
      b = H.interceptedTypeCheck(t1.call$2(15, 225), "$isUint8List");
      t2.call$3(b, _s77_, 1);
      t2.call$3(b, "%", 225);
      t2.call$3(b, _s1_0, 34);
      t2.call$3(b, _s1_1, 9);
      t2.call$3(b, _s1_2, 172);
      t2.call$3(b, _s1_3, 205);
      b = H.interceptedTypeCheck(t1.call$2(1, 225), "$isUint8List");
      t2.call$3(b, _s77_, 1);
      t2.call$3(b, _s1_0, 34);
      t2.call$3(b, _s1_1, 10);
      t2.call$3(b, _s1_2, 172);
      t2.call$3(b, _s1_3, 205);
      b = H.interceptedTypeCheck(t1.call$2(2, 235), "$isUint8List");
      t2.call$3(b, _s77_, 139);
      t2.call$3(b, _s1_1, 131);
      t2.call$3(b, _s1_, 146);
      t2.call$3(b, _s1_2, 172);
      t2.call$3(b, _s1_3, 205);
      b = H.interceptedTypeCheck(t1.call$2(3, 235), "$isUint8List");
      t2.call$3(b, _s77_, 11);
      t2.call$3(b, _s1_1, 68);
      t2.call$3(b, _s1_, 18);
      t2.call$3(b, _s1_2, 172);
      t2.call$3(b, _s1_3, 205);
      b = H.interceptedTypeCheck(t1.call$2(4, 229), "$isUint8List");
      t2.call$3(b, _s77_, 5);
      t3.call$3(b, "AZ", 229);
      t2.call$3(b, _s1_0, 102);
      t2.call$3(b, "@", 68);
      t2.call$3(b, "[", 232);
      t2.call$3(b, _s1_1, 138);
      t2.call$3(b, _s1_2, 172);
      t2.call$3(b, _s1_3, 205);
      b = H.interceptedTypeCheck(t1.call$2(5, 229), "$isUint8List");
      t2.call$3(b, _s77_, 5);
      t3.call$3(b, "AZ", 229);
      t2.call$3(b, _s1_0, 102);
      t2.call$3(b, "@", 68);
      t2.call$3(b, _s1_1, 138);
      t2.call$3(b, _s1_2, 172);
      t2.call$3(b, _s1_3, 205);
      b = H.interceptedTypeCheck(t1.call$2(6, 231), "$isUint8List");
      t3.call$3(b, "19", 7);
      t2.call$3(b, "@", 68);
      t2.call$3(b, _s1_1, 138);
      t2.call$3(b, _s1_2, 172);
      t2.call$3(b, _s1_3, 205);
      b = H.interceptedTypeCheck(t1.call$2(7, 231), "$isUint8List");
      t3.call$3(b, "09", 7);
      t2.call$3(b, "@", 68);
      t2.call$3(b, _s1_1, 138);
      t2.call$3(b, _s1_2, 172);
      t2.call$3(b, _s1_3, 205);
      t2.call$3(H.interceptedTypeCheck(t1.call$2(8, 8), "$isUint8List"), "]", 5);
      b = H.interceptedTypeCheck(t1.call$2(9, 235), "$isUint8List");
      t2.call$3(b, _s77_, 11);
      t2.call$3(b, _s1_, 16);
      t2.call$3(b, _s1_1, 234);
      t2.call$3(b, _s1_2, 172);
      t2.call$3(b, _s1_3, 205);
      b = H.interceptedTypeCheck(t1.call$2(16, 235), "$isUint8List");
      t2.call$3(b, _s77_, 11);
      t2.call$3(b, _s1_, 17);
      t2.call$3(b, _s1_1, 234);
      t2.call$3(b, _s1_2, 172);
      t2.call$3(b, _s1_3, 205);
      b = H.interceptedTypeCheck(t1.call$2(17, 235), "$isUint8List");
      t2.call$3(b, _s77_, 11);
      t2.call$3(b, _s1_1, 9);
      t2.call$3(b, _s1_2, 172);
      t2.call$3(b, _s1_3, 205);
      b = H.interceptedTypeCheck(t1.call$2(10, 235), "$isUint8List");
      t2.call$3(b, _s77_, 11);
      t2.call$3(b, _s1_, 18);
      t2.call$3(b, _s1_1, 234);
      t2.call$3(b, _s1_2, 172);
      t2.call$3(b, _s1_3, 205);
      b = H.interceptedTypeCheck(t1.call$2(18, 235), "$isUint8List");
      t2.call$3(b, _s77_, 11);
      t2.call$3(b, _s1_, 19);
      t2.call$3(b, _s1_1, 234);
      t2.call$3(b, _s1_2, 172);
      t2.call$3(b, _s1_3, 205);
      b = H.interceptedTypeCheck(t1.call$2(19, 235), "$isUint8List");
      t2.call$3(b, _s77_, 11);
      t2.call$3(b, _s1_1, 234);
      t2.call$3(b, _s1_2, 172);
      t2.call$3(b, _s1_3, 205);
      b = H.interceptedTypeCheck(t1.call$2(11, 235), "$isUint8List");
      t2.call$3(b, _s77_, 11);
      t2.call$3(b, _s1_1, 10);
      t2.call$3(b, _s1_2, 172);
      t2.call$3(b, _s1_3, 205);
      b = H.interceptedTypeCheck(t1.call$2(12, 236), "$isUint8List");
      t2.call$3(b, _s77_, 12);
      t2.call$3(b, _s1_2, 12);
      t2.call$3(b, _s1_3, 205);
      b = H.interceptedTypeCheck(t1.call$2(13, 237), "$isUint8List");
      t2.call$3(b, _s77_, 13);
      t2.call$3(b, _s1_2, 13);
      t3.call$3(H.interceptedTypeCheck(t1.call$2(20, 245), "$isUint8List"), "az", 21);
      b = H.interceptedTypeCheck(t1.call$2(21, 245), "$isUint8List");
      t3.call$3(b, "az", 21);
      t3.call$3(b, "09", 21);
      t2.call$3(b, "+-.", 21);
      return tables;
    },
    _scan: function(uri, start, end, state, indices) {
      var tables, t1, i, table, char, transition;
      H.assertSubtype(indices, "$isList", [P.int], "$asList");
      tables = $.$get$_scannerTables();
      for (t1 = J.getInterceptor$s(uri), i = start; i < end; ++i) {
        if (state < 0 || state >= tables.length)
          return H.ioore(tables, state);
        table = tables[state];
        char = t1._codeUnitAt$1(uri, i) ^ 96;
        if (char > 95)
          char = 31;
        if (char >= table.length)
          return H.ioore(table, char);
        transition = table[char];
        state = transition & 31;
        C.JSArray_methods.$indexSet(indices, transition >>> 5, i);
      }
      return state;
    },
    NoSuchMethodError_toString_closure: function NoSuchMethodError_toString_closure(t0, t1) {
      this._box_0 = t0;
      this.sb = t1;
    },
    bool: function bool() {
    },
    Comparable: function Comparable() {
    },
    DateTime: function DateTime(t0, t1) {
      this._core$_value = t0;
      this.isUtc = t1;
    },
    double: function double() {
    },
    Duration: function Duration(t0) {
      this._duration = t0;
    },
    Duration_toString_sixDigits: function Duration_toString_sixDigits() {
    },
    Duration_toString_twoDigits: function Duration_toString_twoDigits() {
    },
    Error: function Error() {
    },
    AssertionError: function AssertionError(t0) {
      this.message = t0;
    },
    NullThrownError: function NullThrownError() {
    },
    ArgumentError: function ArgumentError(t0, t1, t2, t3) {
      var _ = this;
      _._hasValue = t0;
      _.invalidValue = t1;
      _.name = t2;
      _.message = t3;
    },
    RangeError: function RangeError(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.start = t0;
      _.end = t1;
      _._hasValue = t2;
      _.invalidValue = t3;
      _.name = t4;
      _.message = t5;
    },
    IndexError: function IndexError(t0, t1, t2, t3, t4) {
      var _ = this;
      _.length = t0;
      _._hasValue = t1;
      _.invalidValue = t2;
      _.name = t3;
      _.message = t4;
    },
    NoSuchMethodError: function NoSuchMethodError(t0, t1, t2, t3) {
      var _ = this;
      _._core$_receiver = t0;
      _._core$_memberName = t1;
      _._core$_arguments = t2;
      _._namedArguments = t3;
    },
    UnsupportedError: function UnsupportedError(t0) {
      this.message = t0;
    },
    UnimplementedError: function UnimplementedError(t0) {
      this.message = t0;
    },
    StateError: function StateError(t0) {
      this.message = t0;
    },
    ConcurrentModificationError: function ConcurrentModificationError(t0) {
      this.modifiedObject = t0;
    },
    OutOfMemoryError: function OutOfMemoryError() {
    },
    StackOverflowError: function StackOverflowError() {
    },
    CyclicInitializationError: function CyclicInitializationError(t0) {
      this.variableName = t0;
    },
    _Exception: function _Exception(t0) {
      this.message = t0;
    },
    FormatException: function FormatException(t0, t1, t2) {
      this.message = t0;
      this.source = t1;
      this.offset = t2;
    },
    Function: function Function() {
    },
    int: function int() {
    },
    Iterable: function Iterable() {
    },
    Iterator: function Iterator() {
    },
    List: function List() {
    },
    Map: function Map() {
    },
    Null: function Null() {
    },
    num: function num() {
    },
    Object: function Object() {
    },
    Set: function Set() {
    },
    StackTrace: function StackTrace() {
    },
    Stopwatch: function Stopwatch() {
      this._stop = this._core$_start = 0;
    },
    String: function String() {
    },
    StringBuffer: function StringBuffer(t0) {
      this._contents = t0;
    },
    Symbol0: function Symbol0() {
    },
    Type: function Type() {
    },
    Uri__parseIPv4Address_error: function Uri__parseIPv4Address_error(t0) {
      this.host = t0;
    },
    Uri_parseIPv6Address_error: function Uri_parseIPv6Address_error(t0) {
      this.host = t0;
    },
    Uri_parseIPv6Address_parseHex: function Uri_parseIPv6Address_parseHex(t0, t1) {
      this.error = t0;
      this.host = t1;
    },
    _Uri: function _Uri(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _.scheme = t0;
      _._userInfo = t1;
      _._host = t2;
      _._port = t3;
      _.path = t4;
      _._query = t5;
      _._fragment = t6;
      _._hashCodeCache = _._text = null;
    },
    _Uri__Uri$notSimple_closure: function _Uri__Uri$notSimple_closure(t0, t1) {
      this.uri = t0;
      this.portStart = t1;
    },
    _Uri__makePath_closure: function _Uri__makePath_closure() {
    },
    UriData: function UriData(t0, t1, t2) {
      this._text = t0;
      this._separatorIndices = t1;
      this._uriCache = t2;
    },
    _createTables_closure: function _createTables_closure() {
    },
    _createTables_build: function _createTables_build(t0) {
      this.tables = t0;
    },
    _createTables_setChars: function _createTables_setChars() {
    },
    _createTables_setRange: function _createTables_setRange() {
    },
    _SimpleUri: function _SimpleUri(t0, t1, t2, t3, t4, t5, t6, t7) {
      var _ = this;
      _._uri = t0;
      _._schemeEnd = t1;
      _._hostStart = t2;
      _._portStart = t3;
      _._pathStart = t4;
      _._queryStart = t5;
      _._fragmentStart = t6;
      _._schemeCache = t7;
      _._hashCodeCache = null;
    },
    _DataUri: function _DataUri(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _.scheme = t0;
      _._userInfo = t1;
      _._host = t2;
      _._port = t3;
      _.path = t4;
      _._query = t5;
      _._fragment = t6;
      _._hashCodeCache = _._text = null;
    },
    ServiceExtensionResponse__validateErrorCode: function(errorCode) {
      var _s9_ = "errorCode";
      if (errorCode == null)
        H.throwExpression(P.ArgumentError$notNull(_s9_));
      if (errorCode === -32602)
        return;
      if (typeof errorCode !== "number")
        return errorCode.$ge();
      if (errorCode >= -32016 && errorCode <= -32000)
        return;
      throw H.wrapException(P.ArgumentError$value(errorCode, _s9_, "Out of range"));
    },
    registerExtension: function(method, handler) {
      var t1;
      H.functionTypeCheck(handler, {func: 1, ret: [P.Future, P.ServiceExtensionResponse], args: [P.String, [P.Map, P.String, P.String]]});
      if (!C.JSString_methods.startsWith$1(method, "ext."))
        throw H.wrapException(P.ArgumentError$value(method, "method", "Must begin with ext."));
      t1 = $.$get$_extensions();
      if (t1.$index(0, method) != null)
        throw H.wrapException(P.ArgumentError$("Extension already registered: " + method));
      t1.$indexSet(0, method, handler);
    },
    postEvent: function(eventKind, eventData) {
      C.C_JsonCodec.encode$1(eventData);
    },
    Timeline_startSync: function($name, $arguments, flow) {
      var t1 = $.$get$Timeline__stack();
      (t1 && C.JSArray_methods).add$1(t1, null);
      return;
    },
    Timeline_finishSync: function() {
      var block,
        t1 = $.$get$Timeline__stack(),
        t2 = t1.length;
      if (t2 === 0)
        throw H.wrapException(P.StateError$("Uneven calls to startSync and finishSync"));
      if (0 >= t2)
        return H.ioore(t1, -1);
      block = t1.pop();
      if (block == null)
        return;
      P._argumentsAsJson(block._developer$_arguments);
      if (block._flow != null)
        P._argumentsAsJson(null);
    },
    Timeline_instantSync: function($name) {
      return;
    },
    _argumentsAsJson: function($arguments) {
      if ($arguments == null || $arguments.get$length($arguments) === 0)
        return "{}";
      return C.C_JsonCodec.encode$1($arguments);
    },
    ServiceExtensionResponse: function ServiceExtensionResponse(t0, t1, t2) {
      this._developer$_result = t0;
      this._errorCode = t1;
      this._errorDetail = t2;
    },
    _SyncBlock: function _SyncBlock() {
    },
    convertNativeToDart_Dictionary: function(object) {
      var dict, keys, t1, _i, key;
      if (object == null)
        return;
      dict = P.LinkedHashMap_LinkedHashMap$_empty(P.String, null);
      keys = Object.getOwnPropertyNames(object);
      for (t1 = keys.length, _i = 0; _i < keys.length; keys.length === t1 || (0, H.throwConcurrentModificationError)(keys), ++_i) {
        key = H.stringTypeCheck(keys[_i]);
        dict.$indexSet(0, key, object[key]);
      }
      return dict;
    },
    convertDartToNative_Dictionary: function(dict) {
      var object = {};
      dict.forEach$1(0, new P.convertDartToNative_Dictionary_closure(object));
      return object;
    },
    convertNativePromiseToDartFuture: function(promise) {
      var t1 = new P._Future($.Zone__current, [null]),
        completer = new P._AsyncCompleter(t1, [null]);
      promise.then(H.convertDartClosureToJS(new P.convertNativePromiseToDartFuture_closure(completer), 1))["catch"](H.convertDartClosureToJS(new P.convertNativePromiseToDartFuture_closure0(completer), 1));
      return t1;
    },
    Device_isOpera: function() {
      var t1 = $.Device__isOpera;
      return t1 == null ? $.Device__isOpera = J.contains$2$asx(window.navigator.userAgent, "Opera", 0) : t1;
    },
    Device_cssPrefix: function() {
      var t1,
        prefix = $.Device__cachedCssPrefix;
      if (prefix != null)
        return prefix;
      t1 = $.Device__isFirefox;
      if (t1 == null ? $.Device__isFirefox = J.contains$2$asx(window.navigator.userAgent, "Firefox", 0) : t1)
        prefix = "-moz-";
      else {
        t1 = $.Device__isIE;
        if (t1 == null)
          t1 = $.Device__isIE = !H.boolConversionCheck(P.Device_isOpera()) && J.contains$2$asx(window.navigator.userAgent, "Trident/", 0);
        if (t1)
          prefix = "-ms-";
        else
          prefix = H.boolConversionCheck(P.Device_isOpera()) ? "-o-" : "-webkit-";
      }
      return $.Device__cachedCssPrefix = prefix;
    },
    _StructuredClone: function _StructuredClone() {
    },
    _StructuredClone_walk_closure: function _StructuredClone_walk_closure(t0, t1) {
      this._box_0 = t0;
      this.$this = t1;
    },
    _AcceptStructuredClone: function _AcceptStructuredClone() {
    },
    _AcceptStructuredClone_walk_closure: function _AcceptStructuredClone_walk_closure(t0, t1) {
      this._box_0 = t0;
      this.$this = t1;
    },
    convertDartToNative_Dictionary_closure: function convertDartToNative_Dictionary_closure(t0) {
      this.object = t0;
    },
    _StructuredCloneDart2Js: function _StructuredCloneDart2Js(t0, t1) {
      this.values = t0;
      this.copies = t1;
    },
    _AcceptStructuredCloneDart2Js: function _AcceptStructuredCloneDart2Js(t0, t1) {
      this.values = t0;
      this.copies = t1;
      this.mustCopy = false;
    },
    convertNativePromiseToDartFuture_closure: function convertNativePromiseToDartFuture_closure(t0) {
      this.completer = t0;
    },
    convertNativePromiseToDartFuture_closure0: function convertNativePromiseToDartFuture_closure0(t0) {
      this.completer = t0;
    },
    FilteredElementList: function FilteredElementList(t0, t1) {
      this._node = t0;
      this._childNodes = t1;
    },
    FilteredElementList__iterable_closure: function FilteredElementList__iterable_closure() {
    },
    FilteredElementList__iterable_closure0: function FilteredElementList__iterable_closure0() {
    },
    FilteredElementList_removeRange_closure: function FilteredElementList_removeRange_closure() {
    },
    _completeRequest: function(request, $T) {
      var t2, t3,
        t1 = new P._Future($.Zone__current, [$T]),
        completer = new P._SyncCompleter(t1, [$T]);
      request.toString;
      t2 = W.Event;
      t3 = {func: 1, ret: -1, args: [t2]};
      W._EventStreamSubscription$(request, "success", H.functionTypeCheck(new P._completeRequest_closure(request, completer, $T), t3), false, t2);
      W._EventStreamSubscription$(request, "error", H.functionTypeCheck(completer.get$completeError(), t3), false, t2);
      return t1;
    },
    _completeRequest_closure: function _completeRequest_closure(t0, t1, t2) {
      this.request = t0;
      this.completer = t1;
      this.T = t2;
    },
    ObjectStore: function ObjectStore() {
    },
    Request: function Request() {
    },
    log: function(x) {
      return Math.log(x);
    },
    _JenkinsSmiHash_combine0: function(hash, value) {
      hash = 536870911 & hash + value;
      hash = 536870911 & hash + ((524287 & hash) << 10);
      return hash ^ hash >>> 6;
    },
    _JenkinsSmiHash_finish: function(hash) {
      hash = 536870911 & hash + ((67108863 & hash) << 3);
      hash ^= hash >>> 11;
      return 536870911 & hash + ((16383 & hash) << 15);
    },
    Point: function Point(t0, t1, t2) {
      this.x = t0;
      this.y = t1;
      this.$ti = t2;
    },
    _RectangleBase: function _RectangleBase() {
    },
    Rectangle: function Rectangle() {
    },
    Length: function Length() {
    },
    LengthList: function LengthList() {
    },
    Number: function Number() {
    },
    NumberList: function NumberList() {
    },
    PointList: function PointList() {
    },
    ScriptElement: function ScriptElement() {
    },
    StringList: function StringList() {
    },
    SvgElement: function SvgElement() {
    },
    Transform: function Transform() {
    },
    TransformList: function TransformList() {
    },
    _LengthList_Interceptor_ListMixin: function _LengthList_Interceptor_ListMixin() {
    },
    _LengthList_Interceptor_ListMixin_ImmutableListMixin: function _LengthList_Interceptor_ListMixin_ImmutableListMixin() {
    },
    _NumberList_Interceptor_ListMixin: function _NumberList_Interceptor_ListMixin() {
    },
    _NumberList_Interceptor_ListMixin_ImmutableListMixin: function _NumberList_Interceptor_ListMixin_ImmutableListMixin() {
    },
    _StringList_Interceptor_ListMixin: function _StringList_Interceptor_ListMixin() {
    },
    _StringList_Interceptor_ListMixin_ImmutableListMixin: function _StringList_Interceptor_ListMixin_ImmutableListMixin() {
    },
    _TransformList_Interceptor_ListMixin: function _TransformList_Interceptor_ListMixin() {
    },
    _TransformList_Interceptor_ListMixin_ImmutableListMixin: function _TransformList_Interceptor_ListMixin_ImmutableListMixin() {
    },
    ByteBuffer: function ByteBuffer() {
    },
    Endian: function Endian() {
    },
    ByteData: function ByteData() {
    },
    Int8List: function Int8List() {
    },
    Uint8List: function Uint8List() {
    },
    Uint8ClampedList: function Uint8ClampedList() {
    },
    Int16List: function Int16List() {
    },
    Uint16List: function Uint16List() {
    },
    Int32List: function Int32List() {
    },
    Uint32List: function Uint32List() {
    },
    Float32List: function Float32List() {
    },
    Float64List: function Float64List() {
    },
    AudioBuffer: function AudioBuffer() {
    },
    AudioParamMap: function AudioParamMap() {
    },
    AudioParamMap_keys_closure: function AudioParamMap_keys_closure(t0) {
      this.keys = t0;
    },
    AudioTrackList: function AudioTrackList() {
    },
    BaseAudioContext: function BaseAudioContext() {
    },
    OfflineAudioContext: function OfflineAudioContext() {
    },
    _AudioParamMap_Interceptor_MapMixin: function _AudioParamMap_Interceptor_MapMixin() {
    },
    SqlResultSetRowList: function SqlResultSetRowList() {
    },
    _SqlResultSetRowList_Interceptor_ListMixin: function _SqlResultSetRowList_Interceptor_ListMixin() {
    },
    _SqlResultSetRowList_Interceptor_ListMixin_ImmutableListMixin: function _SqlResultSetRowList_Interceptor_ListMixin_ImmutableListMixin() {
    },
    _convertDartFunctionFast: function(f) {
      var ret,
        existing = f.$dart_jsFunction;
      if (existing != null)
        return existing;
      ret = function(_call, f) {
        return function() {
          return _call(f, Array.prototype.slice.apply(arguments));
        };
      }(P._callDartFunctionFast, f);
      ret[$.$get$DART_CLOSURE_PROPERTY_NAME()] = f;
      f.$dart_jsFunction = ret;
      return ret;
    },
    _callDartFunctionFast: function(callback, $arguments) {
      H.listTypeCheck($arguments);
      H.interceptedTypeCheck(callback, "$isFunction");
      return H.Primitives_applyFunction(callback, $arguments, null);
    },
    allowInterop: function(f, $F) {
      H.assertIsSubtype($F, P.Function, "The type argument '", "' is not a subtype of the type variable bound '", "' of type variable 'F' in 'allowInterop'.");
      H.assertSubtypeOfRuntimeType(f, $F);
      if (typeof f == "function")
        return f;
      else
        return H.assertSubtypeOfRuntimeType(P._convertDartFunctionFast(f), $F);
    }
  },
  W = {
    document: function() {
      return document;
    },
    promiseToFuture: function(jsPromise, $T) {
      var t1 = new P._Future($.Zone__current, [$T]),
        completer = new P._AsyncCompleter(t1, [$T]);
      jsPromise.then(H.convertDartClosureToJS(new W.promiseToFuture_closure(completer, $T), 1), H.convertDartClosureToJS(new W.promiseToFuture_closure0(completer), 1));
      return t1;
    },
    CanvasElement_CanvasElement: function(height, width) {
      var e = document.createElement("canvas");
      if (width != null)
        e.width = width;
      if (height != null)
        e.height = height;
      return e;
    },
    Element_Element$html: function(html, treeSanitizer, validator) {
      var t1 = document.body,
        fragment = (t1 && C.BodyElement_methods).createFragment$3$treeSanitizer$validator(t1, html, treeSanitizer, validator);
      fragment.toString;
      t1 = W.Node;
      t1 = new H.WhereIterable(new W._ChildNodeListLazy(fragment), H.functionTypeCheck(new W.Element_Element$html_closure(), {func: 1, ret: P.bool, args: [t1]}), [t1]);
      return H.interceptedTypeCheck(t1.get$single(t1), "$isElement0");
    },
    Element__safeTagName: function(element) {
      var t1, t2, exception,
        result = "element tag unavailable";
      try {
        t1 = J.getInterceptor$x(element);
        t2 = t1.get$tagName(element);
        if (typeof t2 === "string")
          result = t1.get$tagName(element);
      } catch (exception) {
        H.unwrapException(exception);
      }
      return result;
    },
    _ElementFactoryProvider_createElement_tag: function(tag, typeExtension) {
      return document.createElement(tag);
    },
    FontFace_FontFace: function(family, source, descriptors) {
      var t1 = new FontFace(family, source, P.convertDartToNative_Dictionary(descriptors));
      return t1;
    },
    HttpRequest_request: function(url, responseType) {
      var t3,
        t1 = W.HttpRequest,
        t2 = new P._Future($.Zone__current, [t1]),
        completer = new P._AsyncCompleter(t2, [t1]),
        xhr = new XMLHttpRequest();
      C.HttpRequest_methods.open$3$async(xhr, "GET", url, true);
      xhr.responseType = responseType;
      t1 = W.ProgressEvent;
      t3 = {func: 1, ret: -1, args: [t1]};
      W._EventStreamSubscription$(xhr, "load", H.functionTypeCheck(new W.HttpRequest_request_closure(xhr, completer), t3), false, t1);
      W._EventStreamSubscription$(xhr, "error", H.functionTypeCheck(completer.get$completeError(), t3), false, t1);
      xhr.send();
      return t2;
    },
    InputElement_InputElement: function() {
      var exception, type = null,
        t1 = document.createElement("input"),
        e = H.interceptedTypeCheck(t1, "$isInputElement");
      if (type != null)
        try {
          e.type = H.stringTypeCheck(type);
        } catch (exception) {
          H.unwrapException(exception);
        }
      return e;
    },
    _JenkinsSmiHash_combine: function(hash, value) {
      hash = 536870911 & hash + value;
      hash = 536870911 & hash + ((524287 & hash) << 10);
      return hash ^ hash >>> 6;
    },
    _JenkinsSmiHash_hash4: function(a, b, c, d) {
      var t1 = W._JenkinsSmiHash_combine(W._JenkinsSmiHash_combine(W._JenkinsSmiHash_combine(W._JenkinsSmiHash_combine(0, a), b), c), d),
        hash = 536870911 & t1 + ((67108863 & t1) << 3);
      hash ^= hash >>> 11;
      return 536870911 & hash + ((16383 & hash) << 15);
    },
    _EventStreamSubscription$: function(_target, _eventType, onData, _useCapture, $T) {
      var t1 = onData == null ? null : W._wrapZone(new W._EventStreamSubscription_closure(onData), W.Event);
      t1 = new W._EventStreamSubscription(_target, _eventType, t1, false, [$T]);
      t1._tryResume$0();
      return t1;
    },
    _Html5NodeValidator$: function(uriPolicy) {
      var e = document.createElement("a"),
        t1 = new W._SameOriginUriPolicy(e, window.location);
      t1 = new W._Html5NodeValidator(t1);
      t1._Html5NodeValidator$1$uriPolicy(uriPolicy);
      return t1;
    },
    _Html5NodeValidator__standardAttributeValidator: function(element, attributeName, value, context) {
      H.interceptedTypeCheck(element, "$isElement0");
      H.stringTypeCheck(attributeName);
      H.stringTypeCheck(value);
      H.interceptedTypeCheck(context, "$is_Html5NodeValidator");
      return true;
    },
    _Html5NodeValidator__uriAttributeValidator: function(element, attributeName, value, context) {
      var t1, t2, t3;
      H.interceptedTypeCheck(element, "$isElement0");
      H.stringTypeCheck(attributeName);
      H.stringTypeCheck(value);
      t1 = H.interceptedTypeCheck(context, "$is_Html5NodeValidator").uriPolicy;
      t2 = t1._hiddenAnchor;
      t2.href = value;
      t3 = t2.hostname;
      t1 = t1._loc;
      if (!(t3 == t1.hostname && t2.port == t1.port && t2.protocol == t1.protocol))
        if (t3 === "")
          if (t2.port === "") {
            t1 = t2.protocol;
            t1 = t1 === ":" || t1 === "";
          } else
            t1 = false;
        else
          t1 = false;
      else
        t1 = true;
      return t1;
    },
    _TemplatingNodeValidator$: function() {
      var t1 = P.String,
        t2 = P.LinkedHashSet_LinkedHashSet$from(C.List_wSV, t1),
        t3 = H.getTypeArgumentByIndex(C.List_wSV, 0),
        t4 = H.functionTypeCheck(new W._TemplatingNodeValidator_closure(), {func: 1, ret: t1, args: [t3]}),
        t5 = H.setRuntimeTypeInfo(["TEMPLATE"], [t1]);
      t2 = new W._TemplatingNodeValidator(t2, P.LinkedHashSet_LinkedHashSet(t1), P.LinkedHashSet_LinkedHashSet(t1), P.LinkedHashSet_LinkedHashSet(t1), null);
      t2._SimpleNodeValidator$4$allowedAttributes$allowedElements$allowedUriAttributes(null, new H.MappedListIterable(C.List_wSV, t4, [t3, t1]), t5, null);
      return t2;
    },
    _convertNativeToDart_EventTarget: function(e) {
      var $window;
      if ("postMessage" in e) {
        $window = W._DOMWindowCrossFrame__createSafe(e);
        return $window;
      } else
        return H.interceptedTypeCheck(e, "$isEventTarget");
    },
    _convertNativeToDart_XHR_Response: function(o) {
      if (!!J.getInterceptor$(o).$isDocument)
        return o;
      return new P._AcceptStructuredCloneDart2Js([], []).convertNativeToDart_AcceptStructuredClone$2$mustCopy(o, true);
    },
    _DOMWindowCrossFrame__createSafe: function(w) {
      if (w === window)
        return H.interceptedTypeCheck(w, "$isWindowBase");
      else
        return new W._DOMWindowCrossFrame(w);
    },
    _wrapZone: function(callback, $T) {
      var t1;
      H.functionTypeCheck(callback, {func: 1, ret: -1, args: [$T]});
      t1 = $.Zone__current;
      if (t1 === C.C__RootZone)
        return callback;
      return t1.bindUnaryCallbackGuarded$1$1(callback, $T);
    },
    promiseToFuture_closure: function promiseToFuture_closure(t0, t1) {
      this.completer = t0;
      this.T = t1;
    },
    promiseToFuture_closure0: function promiseToFuture_closure0(t0) {
      this.completer = t0;
    },
    HtmlElement: function HtmlElement() {
    },
    AccessibleNodeList: function AccessibleNodeList() {
    },
    AnchorElement: function AnchorElement() {
    },
    AreaElement: function AreaElement() {
    },
    BaseElement: function BaseElement() {
    },
    Blob: function Blob() {
    },
    BodyElement: function BodyElement() {
    },
    CanvasElement: function CanvasElement() {
    },
    CanvasGradient: function CanvasGradient() {
    },
    CanvasRenderingContext2D: function CanvasRenderingContext2D() {
    },
    CharacterData: function CharacterData() {
    },
    CssNumericValue: function CssNumericValue() {
    },
    CssPerspective: function CssPerspective() {
    },
    CssRule: function CssRule() {
    },
    CssStyleDeclaration: function CssStyleDeclaration() {
    },
    CssStyleDeclarationBase: function CssStyleDeclarationBase() {
    },
    CssStyleSheet: function CssStyleSheet() {
    },
    CssStyleValue: function CssStyleValue() {
    },
    CssTransformComponent: function CssTransformComponent() {
    },
    CssTransformValue: function CssTransformValue() {
    },
    CssUnparsedValue: function CssUnparsedValue() {
    },
    DataTransferItemList: function DataTransferItemList() {
    },
    DivElement: function DivElement() {
    },
    Document: function Document() {
    },
    DomException: function DomException() {
    },
    DomRectList: function DomRectList() {
    },
    DomRectReadOnly: function DomRectReadOnly() {
    },
    DomStringList: function DomStringList() {
    },
    DomTokenList: function DomTokenList() {
    },
    _ChildrenElementList: function _ChildrenElementList(t0, t1) {
      this._html$_element = t0;
      this._childElements = t1;
    },
    _FrozenElementList: function _FrozenElementList(t0, t1) {
      this._nodeList = t0;
      this.$ti = t1;
    },
    Element0: function Element0() {
    },
    Element_Element$html_closure: function Element_Element$html_closure() {
    },
    Entry: function Entry() {
    },
    Entry_remove_closure: function Entry_remove_closure(t0) {
      this.completer = t0;
    },
    Entry_remove_closure0: function Entry_remove_closure0(t0) {
      this.completer = t0;
    },
    Event: function Event() {
    },
    EventTarget: function EventTarget() {
    },
    File: function File() {
    },
    FileList: function FileList() {
    },
    FileWriter: function FileWriter() {
    },
    FontFace: function FontFace() {
    },
    FontFaceSet: function FontFaceSet() {
    },
    FormElement: function FormElement() {
    },
    Gamepad: function Gamepad() {
    },
    History: function History() {
    },
    HtmlCollection: function HtmlCollection() {
    },
    HttpRequest: function HttpRequest() {
    },
    HttpRequest_request_closure: function HttpRequest_request_closure(t0, t1) {
      this.xhr = t0;
      this.completer = t1;
    },
    HttpRequestEventTarget: function HttpRequestEventTarget() {
    },
    ImageData: function ImageData() {
    },
    InputElement: function InputElement() {
    },
    KeyboardEvent: function KeyboardEvent() {
    },
    Location: function Location() {
    },
    MediaKeySession: function MediaKeySession() {
    },
    MediaList: function MediaList() {
    },
    MessagePort: function MessagePort() {
    },
    MetaElement: function MetaElement() {
    },
    MidiInputMap: function MidiInputMap() {
    },
    MidiInputMap_keys_closure: function MidiInputMap_keys_closure(t0) {
      this.keys = t0;
    },
    MidiOutputMap: function MidiOutputMap() {
    },
    MidiOutputMap_keys_closure: function MidiOutputMap_keys_closure(t0) {
      this.keys = t0;
    },
    MimeType: function MimeType() {
    },
    MimeTypeArray: function MimeTypeArray() {
    },
    MouseEvent: function MouseEvent() {
    },
    _ChildNodeListLazy: function _ChildNodeListLazy(t0) {
      this._this = t0;
    },
    Node: function Node() {
    },
    NodeList: function NodeList() {
    },
    ParagraphElement: function ParagraphElement() {
    },
    Plugin: function Plugin() {
    },
    PluginArray: function PluginArray() {
    },
    PointerEvent0: function PointerEvent0() {
    },
    PopStateEvent: function PopStateEvent() {
    },
    ProgressEvent: function ProgressEvent() {
    },
    Range: function Range() {
    },
    RtcStatsReport: function RtcStatsReport() {
    },
    RtcStatsReport_keys_closure: function RtcStatsReport_keys_closure(t0) {
      this.keys = t0;
    },
    SelectElement: function SelectElement() {
    },
    SourceBuffer: function SourceBuffer() {
    },
    SourceBufferList: function SourceBufferList() {
    },
    SpeechGrammar: function SpeechGrammar() {
    },
    SpeechGrammarList: function SpeechGrammarList() {
    },
    SpeechRecognitionResult: function SpeechRecognitionResult() {
    },
    Storage: function Storage() {
    },
    Storage_keys_closure: function Storage_keys_closure(t0) {
      this.keys = t0;
    },
    StyleElement: function StyleElement() {
    },
    StyleSheet: function StyleSheet() {
    },
    TableElement: function TableElement() {
    },
    TableRowElement: function TableRowElement() {
    },
    TableSectionElement: function TableSectionElement() {
    },
    TemplateElement: function TemplateElement() {
    },
    TextAreaElement: function TextAreaElement() {
    },
    TextTrack: function TextTrack() {
    },
    TextTrackCue: function TextTrackCue() {
    },
    TextTrackCueList: function TextTrackCueList() {
    },
    TextTrackList: function TextTrackList() {
    },
    TimeRanges: function TimeRanges() {
    },
    Touch: function Touch() {
    },
    TouchEvent: function TouchEvent() {
    },
    TouchList: function TouchList() {
    },
    TrackDefaultList: function TrackDefaultList() {
    },
    UIEvent: function UIEvent() {
    },
    Url: function Url() {
    },
    VideoTrackList: function VideoTrackList() {
    },
    WheelEvent: function WheelEvent() {
    },
    Window0: function Window0() {
    },
    Window_animationFrame_closure: function Window_animationFrame_closure(t0) {
      this.completer = t0;
    },
    _Attr: function _Attr() {
    },
    _CssRuleList: function _CssRuleList() {
    },
    _DomRect: function _DomRect() {
    },
    _GamepadList: function _GamepadList() {
    },
    _NamedNodeMap: function _NamedNodeMap() {
    },
    _SpeechRecognitionResultList: function _SpeechRecognitionResultList() {
    },
    _StyleSheetList: function _StyleSheetList() {
    },
    _AttributeMap: function _AttributeMap() {
    },
    _ElementAttributeMap: function _ElementAttributeMap(t0) {
      this._html$_element = t0;
    },
    _EventStream: function _EventStream(t0, t1, t2, t3) {
      var _ = this;
      _._html$_target = t0;
      _._eventType = t1;
      _._useCapture = t2;
      _.$ti = t3;
    },
    _ElementEventStreamImpl: function _ElementEventStreamImpl(t0, t1, t2, t3) {
      var _ = this;
      _._html$_target = t0;
      _._eventType = t1;
      _._useCapture = t2;
      _.$ti = t3;
    },
    _EventStreamSubscription: function _EventStreamSubscription(t0, t1, t2, t3, t4) {
      var _ = this;
      _._pauseCount = 0;
      _._html$_target = t0;
      _._eventType = t1;
      _._onData = t2;
      _._useCapture = t3;
      _.$ti = t4;
    },
    _EventStreamSubscription_closure: function _EventStreamSubscription_closure(t0) {
      this.onData = t0;
    },
    _Html5NodeValidator: function _Html5NodeValidator(t0) {
      this.uriPolicy = t0;
    },
    ImmutableListMixin: function ImmutableListMixin() {
    },
    NodeValidatorBuilder: function NodeValidatorBuilder(t0) {
      this._validators = t0;
    },
    NodeValidatorBuilder_allowsElement_closure: function NodeValidatorBuilder_allowsElement_closure(t0) {
      this.element = t0;
    },
    NodeValidatorBuilder_allowsAttribute_closure: function NodeValidatorBuilder_allowsAttribute_closure(t0, t1, t2) {
      this.element = t0;
      this.attributeName = t1;
      this.value = t2;
    },
    _SimpleNodeValidator: function _SimpleNodeValidator() {
    },
    _SimpleNodeValidator_closure: function _SimpleNodeValidator_closure() {
    },
    _SimpleNodeValidator_closure0: function _SimpleNodeValidator_closure0() {
    },
    _TemplatingNodeValidator: function _TemplatingNodeValidator(t0, t1, t2, t3, t4) {
      var _ = this;
      _._templateAttrs = t0;
      _.allowedElements = t1;
      _.allowedAttributes = t2;
      _.allowedUriAttributes = t3;
      _.uriPolicy = t4;
    },
    _TemplatingNodeValidator_closure: function _TemplatingNodeValidator_closure() {
    },
    _SvgNodeValidator: function _SvgNodeValidator() {
    },
    FixedSizeListIterator: function FixedSizeListIterator(t0, t1, t2) {
      var _ = this;
      _._array = t0;
      _._html$_length = t1;
      _._html$_position = -1;
      _._html$_current = null;
      _.$ti = t2;
    },
    _DOMWindowCrossFrame: function _DOMWindowCrossFrame(t0) {
      this._window = t0;
    },
    NodeValidator: function NodeValidator() {
    },
    _SameOriginUriPolicy: function _SameOriginUriPolicy(t0, t1) {
      this._hiddenAnchor = t0;
      this._loc = t1;
    },
    _ValidatingTreeSanitizer: function _ValidatingTreeSanitizer(t0) {
      this.validator = t0;
    },
    _ValidatingTreeSanitizer_sanitizeTree_walk: function _ValidatingTreeSanitizer_sanitizeTree_walk(t0) {
      this.$this = t0;
    },
    _CssStyleDeclaration_Interceptor_CssStyleDeclarationBase: function _CssStyleDeclaration_Interceptor_CssStyleDeclarationBase() {
    },
    _DomRectList_Interceptor_ListMixin: function _DomRectList_Interceptor_ListMixin() {
    },
    _DomRectList_Interceptor_ListMixin_ImmutableListMixin: function _DomRectList_Interceptor_ListMixin_ImmutableListMixin() {
    },
    _DomStringList_Interceptor_ListMixin: function _DomStringList_Interceptor_ListMixin() {
    },
    _DomStringList_Interceptor_ListMixin_ImmutableListMixin: function _DomStringList_Interceptor_ListMixin_ImmutableListMixin() {
    },
    _FileList_Interceptor_ListMixin: function _FileList_Interceptor_ListMixin() {
    },
    _FileList_Interceptor_ListMixin_ImmutableListMixin: function _FileList_Interceptor_ListMixin_ImmutableListMixin() {
    },
    _HtmlCollection_Interceptor_ListMixin: function _HtmlCollection_Interceptor_ListMixin() {
    },
    _HtmlCollection_Interceptor_ListMixin_ImmutableListMixin: function _HtmlCollection_Interceptor_ListMixin_ImmutableListMixin() {
    },
    _MidiInputMap_Interceptor_MapMixin: function _MidiInputMap_Interceptor_MapMixin() {
    },
    _MidiOutputMap_Interceptor_MapMixin: function _MidiOutputMap_Interceptor_MapMixin() {
    },
    _MimeTypeArray_Interceptor_ListMixin: function _MimeTypeArray_Interceptor_ListMixin() {
    },
    _MimeTypeArray_Interceptor_ListMixin_ImmutableListMixin: function _MimeTypeArray_Interceptor_ListMixin_ImmutableListMixin() {
    },
    _NodeList_Interceptor_ListMixin: function _NodeList_Interceptor_ListMixin() {
    },
    _NodeList_Interceptor_ListMixin_ImmutableListMixin: function _NodeList_Interceptor_ListMixin_ImmutableListMixin() {
    },
    _PluginArray_Interceptor_ListMixin: function _PluginArray_Interceptor_ListMixin() {
    },
    _PluginArray_Interceptor_ListMixin_ImmutableListMixin: function _PluginArray_Interceptor_ListMixin_ImmutableListMixin() {
    },
    _RtcStatsReport_Interceptor_MapMixin: function _RtcStatsReport_Interceptor_MapMixin() {
    },
    _SourceBufferList_EventTarget_ListMixin: function _SourceBufferList_EventTarget_ListMixin() {
    },
    _SourceBufferList_EventTarget_ListMixin_ImmutableListMixin: function _SourceBufferList_EventTarget_ListMixin_ImmutableListMixin() {
    },
    _SpeechGrammarList_Interceptor_ListMixin: function _SpeechGrammarList_Interceptor_ListMixin() {
    },
    _SpeechGrammarList_Interceptor_ListMixin_ImmutableListMixin: function _SpeechGrammarList_Interceptor_ListMixin_ImmutableListMixin() {
    },
    _Storage_Interceptor_MapMixin: function _Storage_Interceptor_MapMixin() {
    },
    _TextTrackCueList_Interceptor_ListMixin: function _TextTrackCueList_Interceptor_ListMixin() {
    },
    _TextTrackCueList_Interceptor_ListMixin_ImmutableListMixin: function _TextTrackCueList_Interceptor_ListMixin_ImmutableListMixin() {
    },
    _TextTrackList_EventTarget_ListMixin: function _TextTrackList_EventTarget_ListMixin() {
    },
    _TextTrackList_EventTarget_ListMixin_ImmutableListMixin: function _TextTrackList_EventTarget_ListMixin_ImmutableListMixin() {
    },
    _TouchList_Interceptor_ListMixin: function _TouchList_Interceptor_ListMixin() {
    },
    _TouchList_Interceptor_ListMixin_ImmutableListMixin: function _TouchList_Interceptor_ListMixin_ImmutableListMixin() {
    },
    __CssRuleList_Interceptor_ListMixin: function __CssRuleList_Interceptor_ListMixin() {
    },
    __CssRuleList_Interceptor_ListMixin_ImmutableListMixin: function __CssRuleList_Interceptor_ListMixin_ImmutableListMixin() {
    },
    __GamepadList_Interceptor_ListMixin: function __GamepadList_Interceptor_ListMixin() {
    },
    __GamepadList_Interceptor_ListMixin_ImmutableListMixin: function __GamepadList_Interceptor_ListMixin_ImmutableListMixin() {
    },
    __NamedNodeMap_Interceptor_ListMixin: function __NamedNodeMap_Interceptor_ListMixin() {
    },
    __NamedNodeMap_Interceptor_ListMixin_ImmutableListMixin: function __NamedNodeMap_Interceptor_ListMixin_ImmutableListMixin() {
    },
    __SpeechRecognitionResultList_Interceptor_ListMixin: function __SpeechRecognitionResultList_Interceptor_ListMixin() {
    },
    __SpeechRecognitionResultList_Interceptor_ListMixin_ImmutableListMixin: function __SpeechRecognitionResultList_Interceptor_ListMixin_ImmutableListMixin() {
    },
    __StyleSheetList_Interceptor_ListMixin: function __StyleSheetList_Interceptor_ListMixin() {
    },
    __StyleSheetList_Interceptor_ListMixin_ImmutableListMixin: function __StyleSheetList_Interceptor_ListMixin_ImmutableListMixin() {
    }
  },
  Y = {HeapPriorityQueue: function HeapPriorityQueue(t0, t1, t2) {
      var _ = this;
      _.comparison = t0;
      _._priority_queue$_queue = t1;
      _._priority_queue$_length = 0;
      _.$ti = t2;
    },
    TextTreeConfiguration$: function(addBlankLineIfNoChildren, afterDescriptionIfBody, afterName, afterProperties, beforeProperties, bodyIndent, footer, isBlankLineBetweenPropertiesAndChildren, isNameOnOwnLine, lineBreak, lineBreakProperties, linkCharacter, prefixLastChildLineOne, prefixLineOne, prefixOtherLines, prefixOtherLinesRootNode, propertyPrefixIfChildren, propertyPrefixNoChildren, propertySeparator, showChildren) {
      return new Y.TextTreeConfiguration(prefixLineOne, prefixOtherLines, prefixLastChildLineOne, prefixOtherLinesRootNode, propertyPrefixIfChildren, propertyPrefixNoChildren, linkCharacter, C.JSString_methods.$mul(" ", linkCharacter.length), lineBreak, lineBreakProperties, afterName, afterDescriptionIfBody, beforeProperties, afterProperties, propertySeparator, bodyIndent, showChildren, addBlankLineIfNoChildren, isNameOnOwnLine, footer, isBlankLineBetweenPropertiesAndChildren);
    },
    DiagnosticsNode_DiagnosticsNode$message: function(message, style) {
      var _null = null;
      return Y.DiagnosticsProperty$("", _null, C.C__NoDefaultValue, message, _null, _null, C.DiagnosticLevel_3, false, false, true, style, _null, P.Null);
    },
    DiagnosticsProperty$: function($name, value, defaultValue, description, ifEmpty, ifNull, level, missingIfNull, showName, showSeparator, style, tooltip, $T) {
      var t1;
      if (ifNull == null)
        t1 = missingIfNull ? "MISSING" : null;
      else
        t1 = ifNull;
      return new Y.DiagnosticsProperty(description, t1, ifEmpty, tooltip, missingIfNull, value, defaultValue, level, $name, showSeparator, showName, style, [$T]);
    },
    shortHash: function(object) {
      return C.JSString_methods.padLeft$2(C.JSInt_methods.toRadixString$1(J.get$hashCode$(object) & 1048575, 16), 5, "0");
    },
    describeEnum: function(enumEntry) {
      var description = J.toString$0$(enumEntry);
      return C.JSString_methods.substring$1(description, J.getInterceptor$asx(description).indexOf$1(description, ".") + 1);
    },
    DiagnosticLevel: function DiagnosticLevel(t0, t1) {
      this.index = t0;
      this._diagnostics$_name = t1;
    },
    DiagnosticsTreeStyle: function DiagnosticsTreeStyle(t0) {
      this._diagnostics$_name = t0;
    },
    TextTreeConfiguration: function TextTreeConfiguration(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t20) {
      var _ = this;
      _.prefixLineOne = t0;
      _.prefixOtherLines = t1;
      _.prefixLastChildLineOne = t2;
      _.prefixOtherLinesRootNode = t3;
      _.propertyPrefixIfChildren = t4;
      _.propertyPrefixNoChildren = t5;
      _.linkCharacter = t6;
      _.childLinkSpace = t7;
      _.lineBreak = t8;
      _.lineBreakProperties = t9;
      _.afterName = t10;
      _.afterDescriptionIfBody = t11;
      _.beforeProperties = t12;
      _.afterProperties = t13;
      _.propertySeparator = t14;
      _.bodyIndent = t15;
      _.showChildren = t16;
      _.addBlankLineIfNoChildren = t17;
      _.isNameOnOwnLine = t18;
      _.footer = t19;
      _.isBlankLineBetweenPropertiesAndChildren = t20;
    },
    _PrefixedStringBuilder: function _PrefixedStringBuilder(t0, t1, t2) {
      var _ = this;
      _.prefixLineOne = t0;
      _.prefixOtherLines = t1;
      _._buffer = t2;
      _._atLineStart = true;
      _._hasMultipleLines = false;
    },
    _NoDefaultValue: function _NoDefaultValue() {
    },
    DiagnosticsNode: function DiagnosticsNode() {
    },
    DiagnosticsNode_toStringDeep_closure: function DiagnosticsNode_toStringDeep_closure(t0) {
      this.minLevel = t0;
    },
    DiagnosticsProperty: function DiagnosticsProperty(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12) {
      var _ = this;
      _._description = t0;
      _.ifNull = t1;
      _.ifEmpty = t2;
      _.tooltip = t3;
      _.missingIfNull = t4;
      _._diagnostics$_value = t5;
      _._valueComputed = true;
      _._diagnostics$_exception = null;
      _.defaultValue = t6;
      _._defaultLevel = t7;
      _.name = t8;
      _.showSeparator = t9;
      _.showName = t10;
      _.style = t11;
      _.$ti = t12;
    },
    DiagnosticableNode: function DiagnosticableNode(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.value = t0;
      _._cachedBuilder = null;
      _.name = t1;
      _.showSeparator = t2;
      _.showName = t3;
      _.style = t4;
      _.$ti = t5;
    },
    _DiagnosticableTreeNode: function _DiagnosticableTreeNode(t0, t1, t2, t3, t4) {
      var _ = this;
      _.value = t0;
      _._cachedBuilder = null;
      _.name = t1;
      _.showSeparator = t2;
      _.showName = t3;
      _.style = t4;
    },
    DiagnosticPropertiesBuilder: function DiagnosticPropertiesBuilder(t0, t1) {
      this.properties = t0;
      this.defaultDiagnosticsTreeStyle = t1;
      this.emptyBodyDescription = null;
    },
    Diagnosticable: function Diagnosticable() {
    },
    DiagnosticableTree: function DiagnosticableTree() {
    },
    DiagnosticableTreeMixin: function DiagnosticableTreeMixin() {
    },
    DiagnosticableTreeMixin_toStringShallow_closure: function DiagnosticableTreeMixin_toStringShallow_closure(t0) {
      this.minLevel = t0;
    },
    MouseTrackerAnnotation: function MouseTrackerAnnotation() {
    },
    _TrackedAnnotation: function _TrackedAnnotation(t0, t1) {
      this.annotation = t0;
      this.activeDevices = t1;
    },
    MouseTracker: function MouseTracker(t0, t1, t2) {
      this.annotationFinder = t0;
      this._trackedAnnotations = t1;
      this._lastMouseEvent = t2;
    },
    MouseTracker__scheduleMousePositionCheck_closure: function MouseTracker__scheduleMousePositionCheck_closure(t0) {
      this.$this = t0;
    },
    MouseTracker_collectMousePositions_exitAnnotation: function MouseTracker_collectMousePositions_exitAnnotation(t0) {
      this.$this = t0;
    },
    MouseTracker_collectMousePositions_exitAllDevices: function MouseTracker_collectMousePositions_exitAllDevices(t0) {
      this.exitAnnotation = t0;
    },
    DialogTheme: function DialogTheme(t0, t1, t2, t3, t4) {
      var _ = this;
      _.backgroundColor = t0;
      _.elevation = t1;
      _.shape = t2;
      _.titleTextStyle = t3;
      _.contentTextStyle = t4;
    },
    InkHighlight: function InkHighlight(t0, t1, t2, t3, t4, t5, t6, t7, t8) {
      var _ = this;
      _._ink_highlight$_shape = t0;
      _._borderRadius = t1;
      _._customBorder = t2;
      _._rectCallback = t3;
      _._ink_highlight$_textDirection = t4;
      _._alphaController = _._alpha = null;
      _._ink_highlight$_active = true;
      _._ink_well$_color = t5;
      _._material$_controller = t6;
      _.referenceBox = t7;
      _.onRemoved = t8;
      _._debugDisposed = false;
    },
    BorderSide_merge: function(a, b) {
      var t1 = a.style,
        aIsNone = t1 === C.BorderStyle_0 && a.width === 0,
        bIsNone = b.style === C.BorderStyle_0 && b.width === 0;
      if (aIsNone && bIsNone)
        return C.BorderSide_m7u;
      if (aIsNone)
        return b;
      if (bIsNone)
        return a;
      return new Y.BorderSide(a.color, a.width + b.width, t1);
    },
    BorderSide_canMerge: function(a, b) {
      var t2,
        t1 = a.style;
      if (!(t1 === C.BorderStyle_0 && a.width === 0))
        t2 = b.style === C.BorderStyle_0 && b.width === 0;
      else
        t2 = true;
      if (t2)
        return true;
      return t1 === b.style && J.$eq$(a.color, b.color);
    },
    BorderSide_lerp: function(a, b, t) {
      var width, t1, t2, colorA, colorB;
      if (t === 0)
        return a;
      if (t === 1)
        return b;
      width = Q.lerpDouble(a.width, b.width, t);
      if (typeof width !== "number")
        return width.$lt();
      if (width < 0)
        return C.BorderSide_m7u;
      t1 = a.style;
      t2 = b.style;
      if (t1 === t2)
        return new Y.BorderSide(Q.Color_lerp(a.color, b.color, t), width, t1);
      switch (t1) {
        case C.BorderStyle_1:
          colorA = a.color;
          break;
        case C.BorderStyle_0:
          t1 = a.color._value;
          colorA = Q.Color$fromARGB(0, (16711680 & t1) >>> 16, (65280 & t1) >>> 8, (255 & t1) >>> 0);
          break;
        default:
          colorA = null;
      }
      switch (t2) {
        case C.BorderStyle_1:
          colorB = b.color;
          break;
        case C.BorderStyle_0:
          t1 = b.color._value;
          colorB = Q.Color$fromARGB(0, (16711680 & t1) >>> 16, (65280 & t1) >>> 8, (255 & t1) >>> 0);
          break;
        default:
          colorB = null;
      }
      return new Y.BorderSide(Q.Color_lerp(colorA, colorB, t), width, C.BorderStyle_1);
    },
    ShapeBorder_lerp: function(a, b, t) {
      var t1,
        result = b != null ? b.lerpFrom$2(a, t) : null;
      if (result == null && a != null)
        result = a.lerpTo$2(b, t);
      if (result == null) {
        if (typeof t !== "number")
          return t.$lt();
        t1 = t < 0.5 ? a : b;
      } else
        t1 = result;
      return t1;
    },
    _CompoundBorder_lerp: function(a, b, t) {
      var index, localA, localB, t1, localResult,
        aList = a instanceof Y._CompoundBorder ? a.borders : H.setRuntimeTypeInfo([a], [Y.ShapeBorder]),
        bList = b instanceof Y._CompoundBorder ? b.borders : H.setRuntimeTypeInfo([b], [Y.ShapeBorder]),
        results = H.setRuntimeTypeInfo([], [Y.ShapeBorder]),
        $length = Math.max(aList.length, bList.length);
      for (index = 0; index < $length; ++index) {
        localA = index < aList.length ? aList[index] : null;
        localB = index < bList.length ? bList[index] : null;
        t1 = localA != null;
        if (t1 && localB != null) {
          localResult = localA.lerpTo$2(localB, t);
          if (localResult == null)
            localResult = localB.lerpFrom$2(localA, t);
          if (localResult != null) {
            C.JSArray_methods.add$1(results, localResult);
            continue;
          }
        }
        if (localB != null)
          C.JSArray_methods.add$1(results, localB.scale$1(0, t));
        if (t1) {
          if (typeof t !== "number")
            return H.iae(t);
          C.JSArray_methods.add$1(results, localA.scale$1(0, 1 - t));
        }
      }
      return new Y._CompoundBorder(results);
    },
    paintBorder: function(canvas, rect, bottom, left, right, $top) {
      var t1, path, t2, t3, t4, t5, t6,
        paint = new Q.Paint(new Q.PaintData());
      paint.set$strokeWidth(0);
      t1 = H.setRuntimeTypeInfo([], [T.Subpath]);
      path = new Q.Path(t1, C.PathFillType_0);
      switch ($top.style) {
        case C.BorderStyle_1:
          paint.set$color(0, $top.color);
          C.JSArray_methods.set$length(t1, 0);
          t2 = rect.left;
          t3 = rect.top;
          path.moveTo$2(0, t2, t3);
          t4 = rect.right;
          path.lineTo$2(0, t4, t3);
          t5 = $top.width;
          if (t5 === 0)
            paint.set$style(0, C.PaintingStyle_1);
          else {
            paint.set$style(0, C.PaintingStyle_0);
            t6 = right.width;
            if (typeof t4 !== "number")
              return t4.$sub();
            if (typeof t3 !== "number")
              return t3.$add();
            t5 = t3 + t5;
            path.lineTo$2(0, t4 - t6, t5);
            t6 = left.width;
            if (typeof t2 !== "number")
              return t2.$add();
            path.lineTo$2(0, t2 + t6, t5);
          }
          canvas.drawPath$2(path, paint);
          break;
        case C.BorderStyle_0:
          break;
      }
      switch (right.style) {
        case C.BorderStyle_1:
          paint.set$color(0, right.color);
          C.JSArray_methods.set$length(t1, 0);
          t2 = rect.right;
          t3 = rect.top;
          path.moveTo$2(0, t2, t3);
          t4 = rect.bottom;
          path.lineTo$2(0, t2, t4);
          t5 = right.width;
          if (t5 === 0)
            paint.set$style(0, C.PaintingStyle_1);
          else {
            paint.set$style(0, C.PaintingStyle_0);
            if (typeof t2 !== "number")
              return t2.$sub();
            t2 -= t5;
            if (typeof t4 !== "number")
              return t4.$sub();
            path.lineTo$2(0, t2, t4 - bottom.width);
            if (typeof t3 !== "number")
              return t3.$add();
            path.lineTo$2(0, t2, t3 + $top.width);
          }
          canvas.drawPath$2(path, paint);
          break;
        case C.BorderStyle_0:
          break;
      }
      switch (bottom.style) {
        case C.BorderStyle_1:
          paint.set$color(0, bottom.color);
          C.JSArray_methods.set$length(t1, 0);
          t2 = rect.right;
          t3 = rect.bottom;
          path.moveTo$2(0, t2, t3);
          t4 = rect.left;
          path.lineTo$2(0, t4, t3);
          t5 = bottom.width;
          if (t5 === 0)
            paint.set$style(0, C.PaintingStyle_1);
          else {
            paint.set$style(0, C.PaintingStyle_0);
            t6 = left.width;
            if (typeof t4 !== "number")
              return t4.$add();
            if (typeof t3 !== "number")
              return t3.$sub();
            t5 = t3 - t5;
            path.lineTo$2(0, t4 + t6, t5);
            t6 = right.width;
            if (typeof t2 !== "number")
              return t2.$sub();
            path.lineTo$2(0, t2 - t6, t5);
          }
          canvas.drawPath$2(path, paint);
          break;
        case C.BorderStyle_0:
          break;
      }
      switch (left.style) {
        case C.BorderStyle_1:
          paint.set$color(0, left.color);
          C.JSArray_methods.set$length(t1, 0);
          t1 = rect.left;
          t2 = rect.bottom;
          path.moveTo$2(0, t1, t2);
          t3 = rect.top;
          path.lineTo$2(0, t1, t3);
          t4 = left.width;
          if (t4 === 0)
            paint.set$style(0, C.PaintingStyle_1);
          else {
            paint.set$style(0, C.PaintingStyle_0);
            if (typeof t1 !== "number")
              return t1.$add();
            t1 += t4;
            if (typeof t3 !== "number")
              return t3.$add();
            path.lineTo$2(0, t1, t3 + $top.width);
            if (typeof t2 !== "number")
              return t2.$sub();
            path.lineTo$2(0, t1, t2 - bottom.width);
          }
          canvas.drawPath$2(path, paint);
          break;
        case C.BorderStyle_0:
          break;
      }
    },
    BorderStyle: function BorderStyle(t0) {
      this._borders$_name = t0;
    },
    BorderSide: function BorderSide(t0, t1, t2) {
      this.color = t0;
      this.width = t1;
      this.style = t2;
    },
    ShapeBorder: function ShapeBorder() {
    },
    _CompoundBorder: function _CompoundBorder(t0) {
      this.borders = t0;
    },
    _CompoundBorder_dimensions_closure: function _CompoundBorder_dimensions_closure() {
    },
    _CompoundBorder_scale_closure: function _CompoundBorder_scale_closure(t0) {
      this.t = t0;
    },
    _CompoundBorder_toString_closure: function _CompoundBorder_toString_closure() {
    },
    IconTheme_merge: function(child, data) {
      return new T.Builder(new Y.IconTheme_merge_closure(null, data, child), null);
    },
    IconTheme__getInheritedIconThemeData: function(context) {
      var iconTheme = H.interceptedTypeCheck(context.inheritFromWidgetOfExactType$1(C.Type_IconTheme_U8c), "$isIconTheme"),
        t1 = iconTheme == null ? null : iconTheme.data;
      return t1 == null ? C.IconThemeData_Color_4278190080_1_24 : t1;
    },
    IconTheme: function IconTheme(t0, t1, t2) {
      this.data = t0;
      this.child = t1;
      this.key = t2;
    },
    IconTheme_merge_closure: function IconTheme_merge_closure(t0, t1, t2) {
      this.key = t0;
      this.data = t1;
      this.child = t2;
    },
    BouncingScrollSimulation: function BouncingScrollSimulation(t0, t1, t2, t3) {
      var _ = this;
      _.leadingExtent = t0;
      _.trailingExtent = t1;
      _.spring = t2;
      _._springTime = _._springSimulation = _._frictionSimulation = null;
      _._timeOffset = 0;
      _.tolerance = t3;
    },
    ClampingScrollSimulation: function ClampingScrollSimulation(t0, t1, t2) {
      var _ = this;
      _.position = t0;
      _.velocity = t1;
      _._distance = _._scroll_simulation$_duration = null;
      _.tolerance = t2;
    }
  },
  N = {
    Hook_shouldPreserveState: function(hook1, hook2) {
      var t1, i1, i2,
        p1 = hook1.keys,
        p2 = hook2.keys;
      if (p1 == null ? p2 == null : p1 === p2)
        return true;
      t1 = p1 == null || p2 == null;
      if (t1 || J.get$length$asx(p1) != J.get$length$asx(p2))
        return false;
      i1 = J.get$iterator$ax(p1);
      i2 = J.get$iterator$ax(p2);
      for (; true;) {
        if (!i1.moveNext$0() || !i2.moveNext$0())
          return true;
        if (!J.$eq$(i1.get$current(i1), i2.get$current(i2)))
          return false;
      }
    },
    Hook: function Hook() {
    },
    HookState: function HookState() {
    },
    HookElement: function HookElement(t0, t1, t2, t3) {
      var _ = this;
      _._hooks = _._hookIndex = _._currentHook = null;
      _._didFinishBuildOnce = false;
      _._debugIsInitHook = _._debugShouldDispose = _._debugDidReassemble = null;
      _._framework$_state = t0;
      _._framework$_parent = _._framework$_child = null;
      _._cachedHash = t1;
      _._depth = _._slot = null;
      _._widget = t2;
      _._owner = null;
      _._active = false;
      _._debugLifecycleState = t3;
      _._dependencies = _._inheritedWidgets = null;
      _._hadUnsatisfiedDependencies = false;
      _._dirty = true;
      _._debugAllowIgnoredCallsToMarkNeedsBuild = _._debugBuiltOnce = _._inDirtyList = false;
    },
    HookWidget: function HookWidget() {
    },
    _HookWidgetState: function _HookWidgetState(t0) {
      this._widget = null;
      this._debugLifecycleState = t0;
      this._element = null;
    },
    HookBuilder: function HookBuilder(t0, t1) {
      this.builder = t0;
      this.key = t1;
    },
    BindingBase: function BindingBase() {
    },
    BindingBase_lockEvents_closure: function BindingBase_lockEvents_closure(t0) {
      this.$this = t0;
    },
    BindingBase_registerSignalServiceExtension_closure: function BindingBase_registerSignalServiceExtension_closure(t0) {
      this.callback = t0;
    },
    BindingBase_registerNumericServiceExtension_closure: function BindingBase_registerNumericServiceExtension_closure(t0, t1, t2, t3) {
      var _ = this;
      _.$this = t0;
      _.name = t1;
      _.setter = t2;
      _.getter = t3;
    },
    BindingBase_registerServiceExtension_closure: function BindingBase_registerServiceExtension_closure(t0, t1) {
      this.methodName = t0;
      this.callback = t1;
    },
    BindingBase_registerServiceExtension__closure: function BindingBase_registerServiceExtension__closure() {
    },
    FlutterErrorDetailsForPointerEventDispatcher$: function(context, $event, exception, hitTestEntry, informationCollector, library, stack) {
      return new N.FlutterErrorDetailsForPointerEventDispatcher(exception, stack, library, context, informationCollector, false);
    },
    GestureBinding: function GestureBinding() {
    },
    GestureBinding_dispatchEvent_closure: function GestureBinding_dispatchEvent_closure(t0) {
      this.event = t0;
    },
    GestureBinding_dispatchEvent_closure0: function GestureBinding_dispatchEvent_closure0(t0, t1) {
      this.event = t0;
      this.entry = t1;
    },
    FlutterErrorDetailsForPointerEventDispatcher: function FlutterErrorDetailsForPointerEventDispatcher(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.exception = t0;
      _.stack = t1;
      _.library = t2;
      _.context = t3;
      _.informationCollector = t4;
      _.silent = t5;
    },
    TapDownDetails: function TapDownDetails(t0) {
      this.globalPosition = t0;
    },
    TapUpDetails: function TapUpDetails() {
    },
    TapGestureRecognizer: function TapGestureRecognizer(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _.onTapCancel = _.onTap = _.onTapUp = _.onTapDown = null;
      _._wonArenaForPrimaryPointer = _._sentTapDown = false;
      _._finalPosition = null;
      _.deadline = t0;
      _.postAcceptSlopTolerance = t1;
      _.state = t2;
      _.initialPosition = _.primaryPointer = null;
      _._gestureAccepted = false;
      _._recognizer$_timer = null;
      _._recognizer$_entries = t3;
      _._trackedPointers = t4;
      _.debugOwner = t5;
      _._recognizer$_kind = t6;
    },
    TapGestureRecognizer__checkDown_closure: function TapGestureRecognizer__checkDown_closure(t0) {
      this.$this = t0;
    },
    SnackBarClosedReason: function SnackBarClosedReason(t0) {
      this._snack_bar$_name = t0;
    },
    SnackBar: function SnackBar() {
    },
    PaintingBinding: function PaintingBinding() {
    },
    Tolerance$: function(distance, velocity) {
      return new N.Tolerance(distance, velocity);
    },
    Tolerance: function Tolerance(t0, t1) {
      this.distance = t0;
      this.velocity = t1;
    },
    debugDumpSemanticsTree: function(childOrder) {
      var t1 = $.RendererBinding__instance;
      if (t1 != null)
        t1.RendererBinding__pipelineOwner._rootNode;
      D.print__debugPrintThrottled$closure().call$1("Semantics not collected.");
    },
    RendererBinding: function RendererBinding() {
    },
    RendererBinding__createMouseTracker_closure: function RendererBinding__createMouseTracker_closure(t0) {
      this.$this = t0;
    },
    flipScrollDirection: function(direction) {
      switch (direction) {
        case C.ScrollDirection_0:
          return C.ScrollDirection_0;
        case C.ScrollDirection_1:
          return C.ScrollDirection_2;
        case C.ScrollDirection_2:
          return C.ScrollDirection_1;
      }
      return;
    },
    ScrollDirection: function ScrollDirection(t0) {
      this._viewport_offset$_name = t0;
    },
    ViewportOffset: function ViewportOffset() {
    },
    timeDilation: function(value) {
      var t1;
      if ($._timeDilation == value)
        return;
      t1 = $.SchedulerBinding__instance;
      if (t1 != null)
        t1.resetEpoch$0();
      $._timeDilation = value;
    },
    SchedulerBinding__parseAppLifecycleMessage: function(message) {
      switch (message) {
        case "AppLifecycleState.paused":
          return C.AppLifecycleState_2;
        case "AppLifecycleState.resumed":
          return C.AppLifecycleState_0;
        case "AppLifecycleState.inactive":
          return C.AppLifecycleState_1;
        case "AppLifecycleState.suspending":
          return C.AppLifecycleState_3;
      }
      return;
    },
    SchedulerBinding__taskSorter: function(e1, e2) {
      H.interceptedTypeCheck(e1, "$is_TaskEntry");
      H.interceptedTypeCheck(e2, "$is_TaskEntry");
      return -C.JSInt_methods.compareTo$1(e1.priority, e2.priority);
    },
    defaultSchedulingStrategy: function(priority, scheduler) {
      var t1 = scheduler.SchedulerBinding__transientCallbacks;
      if (t1.get$length(t1) > 0)
        return priority >= 100000;
      return true;
    },
    _TaskEntry: function _TaskEntry() {
    },
    _FrameCallbackEntry: function _FrameCallbackEntry(t0) {
      this.callback = t0;
      this.debugStack = null;
    },
    SchedulerPhase: function SchedulerPhase(t0, t1) {
      this.index = t0;
      this._name = t1;
    },
    SchedulerBinding: function SchedulerBinding() {
    },
    SchedulerBinding_endOfFrame_closure: function SchedulerBinding_endOfFrame_closure(t0) {
      this.$this = t0;
    },
    SchedulerBinding_scheduleWarmUpFrame_closure: function SchedulerBinding_scheduleWarmUpFrame_closure(t0) {
      this.$this = t0;
    },
    SchedulerBinding_scheduleWarmUpFrame_closure0: function SchedulerBinding_scheduleWarmUpFrame_closure0(t0, t1) {
      this.$this = t0;
      this.hadScheduledFrame = t1;
    },
    SchedulerBinding_scheduleWarmUpFrame_closure1: function SchedulerBinding_scheduleWarmUpFrame_closure1(t0) {
      this.$this = t0;
    },
    SchedulerBinding_handleBeginFrame_closure: function SchedulerBinding_handleBeginFrame_closure(t0) {
      this.$this = t0;
    },
    SchedulerBinding_handleBeginFrame_closure0: function SchedulerBinding_handleBeginFrame_closure0(t0) {
      this.$this = t0;
    },
    SchedulerBinding_handleDrawFrame_closure: function SchedulerBinding_handleDrawFrame_closure(t0) {
      this.$this = t0;
    },
    SemanticsBinding: function SemanticsBinding() {
    },
    ServicesBinding__parseLicenses: function(rawLicenses) {
      var _licenseSeparator, result, licenses, t1, _i, license, t2, split;
      H.stringTypeCheck(rawLicenses);
      _licenseSeparator = "\n" + C.JSString_methods.$mul("-", 80) + "\n";
      result = H.setRuntimeTypeInfo([], [F.LicenseEntry]);
      licenses = rawLicenses.split(_licenseSeparator);
      for (t1 = licenses.length, _i = 0; _i < t1; ++_i) {
        license = licenses[_i];
        t2 = J.getInterceptor$asx(license);
        split = t2.indexOf$1(license, "\n\n");
        if (split >= 0) {
          t2.substring$2(license, 0, split).split("\n");
          t2.substring$1(license, split + 2);
          C.JSArray_methods.add$1(result, new F.LicenseEntryWithLineBreaks());
        } else
          C.JSArray_methods.add$1(result, new F.LicenseEntryWithLineBreaks());
      }
      return result;
    },
    ServicesBinding: function ServicesBinding() {
    },
    ServicesBinding__addLicenses_closure: function ServicesBinding__addLicenses_closure(t0) {
      this.rawLicenses = t0;
    },
    ServicesBinding__addLicenses_closure0: function ServicesBinding__addLicenses_closure0(t0, t1) {
      this.parsedLicenses = t0;
      this.rawLicenses = t1;
    },
    _WidgetsFlutterBinding_BindingBase_GestureBinding_ServicesBinding_SchedulerBinding_PaintingBinding_SemanticsBinding_RendererBinding_initServiceExtensions_closure: function _WidgetsFlutterBinding_BindingBase_GestureBinding_ServicesBinding_SchedulerBinding_PaintingBinding_SemanticsBinding_RendererBinding_initServiceExtensions_closure() {
    },
    _WidgetsFlutterBinding_BindingBase_GestureBinding_ServicesBinding_SchedulerBinding_PaintingBinding_SemanticsBinding_RendererBinding_initServiceExtensions_closure0: function _WidgetsFlutterBinding_BindingBase_GestureBinding_ServicesBinding_SchedulerBinding_PaintingBinding_SemanticsBinding_RendererBinding_initServiceExtensions_closure0() {
    },
    _WidgetsFlutterBinding_BindingBase_GestureBinding_ServicesBinding_SchedulerBinding_PaintingBinding_SemanticsBinding_RendererBinding_initServiceExtensions_closure1: function _WidgetsFlutterBinding_BindingBase_GestureBinding_ServicesBinding_SchedulerBinding_PaintingBinding_SemanticsBinding_RendererBinding_initServiceExtensions_closure1() {
    },
    _WidgetsFlutterBinding_BindingBase_GestureBinding_ServicesBinding_SchedulerBinding_initServiceExtensions_closure: function _WidgetsFlutterBinding_BindingBase_GestureBinding_ServicesBinding_SchedulerBinding_initServiceExtensions_closure() {
    },
    _WidgetsFlutterBinding_BindingBase_GestureBinding_ServicesBinding_SchedulerBinding_initServiceExtensions_closure0: function _WidgetsFlutterBinding_BindingBase_GestureBinding_ServicesBinding_SchedulerBinding_initServiceExtensions_closure0() {
    },
    WidgetsBindingObserver: function WidgetsBindingObserver() {
    },
    WidgetsBinding: function WidgetsBinding() {
    },
    _WidgetsFlutterBinding_BindingBase_GestureBinding_ServicesBinding_SchedulerBinding_PaintingBinding_SemanticsBinding_RendererBinding_WidgetsBinding_initServiceExtensions_closure: function _WidgetsFlutterBinding_BindingBase_GestureBinding_ServicesBinding_SchedulerBinding_PaintingBinding_SemanticsBinding_RendererBinding_WidgetsBinding_initServiceExtensions_closure(t0) {
      this.$this = t0;
    },
    _WidgetsFlutterBinding_BindingBase_GestureBinding_ServicesBinding_SchedulerBinding_PaintingBinding_SemanticsBinding_RendererBinding_WidgetsBinding_initServiceExtensions__closure: function _WidgetsFlutterBinding_BindingBase_GestureBinding_ServicesBinding_SchedulerBinding_PaintingBinding_SemanticsBinding_RendererBinding_WidgetsBinding_initServiceExtensions__closure() {
    },
    _WidgetsFlutterBinding_BindingBase_GestureBinding_ServicesBinding_SchedulerBinding_PaintingBinding_SemanticsBinding_RendererBinding_WidgetsBinding_initServiceExtensions__closure0: function _WidgetsFlutterBinding_BindingBase_GestureBinding_ServicesBinding_SchedulerBinding_PaintingBinding_SemanticsBinding_RendererBinding_WidgetsBinding_initServiceExtensions__closure0(t0) {
      this.$this = t0;
    },
    WidgetsBinding_deferFirstFrameReport_closure: function WidgetsBinding_deferFirstFrameReport_closure(t0) {
      this.$this = t0;
    },
    WidgetsBinding_allowFirstFrameReport_closure: function WidgetsBinding_allowFirstFrameReport_closure(t0) {
      this.$this = t0;
    },
    _WidgetsFlutterBinding_BindingBase_GestureBinding_ServicesBinding_SchedulerBinding_PaintingBinding_SemanticsBinding_RendererBinding_WidgetsBinding_drawFrame_closure: function _WidgetsFlutterBinding_BindingBase_GestureBinding_ServicesBinding_SchedulerBinding_PaintingBinding_SemanticsBinding_RendererBinding_WidgetsBinding_drawFrame_closure(t0) {
      this.$this = t0;
    },
    RenderObjectToWidgetAdapter: function RenderObjectToWidgetAdapter(t0, t1, t2, t3, t4) {
      var _ = this;
      _.child = t0;
      _.container = t1;
      _.debugShortDescription = t2;
      _.key = t3;
      _.$ti = t4;
    },
    RenderObjectToWidgetAdapter_attachToRenderTree_closure: function RenderObjectToWidgetAdapter_attachToRenderTree_closure(t0, t1, t2) {
      this._box_0 = t0;
      this.$this = t1;
      this.owner = t2;
    },
    RenderObjectToWidgetAdapter_attachToRenderTree_closure0: function RenderObjectToWidgetAdapter_attachToRenderTree_closure0(t0) {
      this._box_0 = t0;
    },
    RenderObjectToWidgetElement: function RenderObjectToWidgetElement(t0, t1, t2, t3) {
      var _ = this;
      _._framework$_parent = _._ancestorRenderObjectElement = _._renderObject = _._newWidget = _._child = null;
      _._cachedHash = t0;
      _._depth = _._slot = null;
      _._widget = t1;
      _._owner = null;
      _._active = false;
      _._debugLifecycleState = t2;
      _._dependencies = _._inheritedWidgets = null;
      _._hadUnsatisfiedDependencies = false;
      _._dirty = true;
      _._debugAllowIgnoredCallsToMarkNeedsBuild = _._debugBuiltOnce = _._inDirtyList = false;
      _.$ti = t3;
    },
    WidgetsFlutterBinding: function WidgetsFlutterBinding(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t30, t31, t32, t33, t34, t35, t36, t37, t38) {
      var _ = this;
      _.WidgetsBinding__buildOwner = t0;
      _.WidgetsBinding__observers = t1;
      _.WidgetsBinding__needToReportFirstFrame = t2;
      _.WidgetsBinding__deferFirstFrameReportCount = t3;
      _.WidgetsBinding_debugBuildingDirtyElements = t4;
      _.WidgetsBinding__renderViewElement = t5;
      _.RendererBinding__mouseTracker = t6;
      _.RendererBinding__pipelineOwner = t7;
      _.RendererBinding__semanticsHandle = t8;
      _.SemanticsBinding__accessibilityFeatures = t9;
      _.PaintingBinding__imageCache = t10;
      _.PaintingBinding__kDecodedCacheRatioCap = t11;
      _.SchedulerBinding__lifecycleState = t12;
      _.SchedulerBinding_schedulingStrategy = t13;
      _.SchedulerBinding__taskQueue = t14;
      _.SchedulerBinding__hasRequestedAnEventLoopCallback = t15;
      _.SchedulerBinding__nextFrameCallbackId = t16;
      _.SchedulerBinding__transientCallbacks = t17;
      _.SchedulerBinding__removedIds = t18;
      _.SchedulerBinding__persistentCallbacks = t19;
      _.SchedulerBinding__postFrameCallbacks = t20;
      _.SchedulerBinding__nextFrameCompleter = t21;
      _.SchedulerBinding__hasScheduledFrame = t22;
      _.SchedulerBinding__schedulerPhase = t23;
      _.SchedulerBinding__framesEnabled = t24;
      _.SchedulerBinding__warmUpFrame = t25;
      _.SchedulerBinding__firstRawTimeStampInEpoch = t26;
      _.SchedulerBinding__epochStart = t27;
      _.SchedulerBinding__lastRawTimeStamp = t28;
      _.SchedulerBinding__currentFrameTimeStamp = t29;
      _.SchedulerBinding__profileFrameNumber = t30;
      _.SchedulerBinding__profileFrameStopwatch = t31;
      _.SchedulerBinding__debugBanner = t32;
      _.SchedulerBinding__ignoreNextEngineDrawFrame = t33;
      _.GestureBinding__pendingPointerEvents = t34;
      _.GestureBinding_pointerRouter = t35;
      _.GestureBinding_gestureArena = t36;
      _.GestureBinding_pointerSignalResolver = t37;
      _.GestureBinding__hitTests = t38;
      _._lockCount = 0;
    },
    _WidgetsFlutterBinding_BindingBase_GestureBinding: function _WidgetsFlutterBinding_BindingBase_GestureBinding() {
    },
    _WidgetsFlutterBinding_BindingBase_GestureBinding_ServicesBinding: function _WidgetsFlutterBinding_BindingBase_GestureBinding_ServicesBinding() {
    },
    _WidgetsFlutterBinding_BindingBase_GestureBinding_ServicesBinding_SchedulerBinding: function _WidgetsFlutterBinding_BindingBase_GestureBinding_ServicesBinding_SchedulerBinding() {
    },
    _WidgetsFlutterBinding_BindingBase_GestureBinding_ServicesBinding_SchedulerBinding_PaintingBinding: function _WidgetsFlutterBinding_BindingBase_GestureBinding_ServicesBinding_SchedulerBinding_PaintingBinding() {
    },
    _WidgetsFlutterBinding_BindingBase_GestureBinding_ServicesBinding_SchedulerBinding_PaintingBinding_SemanticsBinding: function _WidgetsFlutterBinding_BindingBase_GestureBinding_ServicesBinding_SchedulerBinding_PaintingBinding_SemanticsBinding() {
    },
    _WidgetsFlutterBinding_BindingBase_GestureBinding_ServicesBinding_SchedulerBinding_PaintingBinding_SemanticsBinding_RendererBinding: function _WidgetsFlutterBinding_BindingBase_GestureBinding_ServicesBinding_SchedulerBinding_PaintingBinding_SemanticsBinding_RendererBinding() {
    },
    _WidgetsFlutterBinding_BindingBase_GestureBinding_ServicesBinding_SchedulerBinding_PaintingBinding_SemanticsBinding_RendererBinding_WidgetsBinding: function _WidgetsFlutterBinding_BindingBase_GestureBinding_ServicesBinding_SchedulerBinding_PaintingBinding_SemanticsBinding_RendererBinding_WidgetsBinding() {
    },
    Widget_canUpdate: function(oldWidget, newWidget) {
      return J.get$runtimeType$(oldWidget).$eq(0, J.get$runtimeType$(newWidget)) && J.$eq$(oldWidget.key, newWidget.key);
    },
    _InactiveElements__deactivateRecursively: function(element) {
      H.interceptedTypeCheck(element, "$isElement");
      element.deactivate$0();
      element.visitChildren$1(N.framework__InactiveElements__deactivateRecursively$closure());
    },
    Element__sort: function(a, b) {
      var t1, t2;
      H.interceptedTypeCheck(a, "$isElement");
      H.interceptedTypeCheck(b, "$isElement");
      t1 = a._depth;
      t2 = b._depth;
      if (typeof t1 !== "number")
        return t1.$lt();
      if (typeof t2 !== "number")
        return H.iae(t2);
      if (t1 < t2)
        return -1;
      if (t2 < t1)
        return 1;
      t1 = b._dirty;
      if (t1 && !a._dirty)
        return -1;
      if (a._dirty && !t1)
        return 1;
      return 0;
    },
    Element__activateRecursively: function(element) {
      H.interceptedTypeCheck(element, "$isElement");
      element.activate$0();
      element.visitChildren$1(N.framework_Element__activateRecursively$closure());
    },
    ErrorWidget__stringify: function(exception) {
      var t1, exception;
      try {
        t1 = J.toString$0$(exception);
        return t1;
      } catch (exception) {
        H.unwrapException(exception);
      }
      return "Error";
    },
    StatefulElement$: function(widget) {
      var t1 = widget.createState$0(),
        t2 = ($.Element__nextHashCode + 1) % 16777215;
      $.Element__nextHashCode = t2;
      t2 = new N.StatefulElement(t1, t2, widget, C._ElementLifecycle_0);
      t1._element = t2;
      t1.set$_widget(widget);
      return t2;
    },
    _debugReportException: function(context, exception, stack, informationCollector) {
      var details;
      H.interceptedTypeCheck(stack, "$isStackTrace");
      details = U.FlutterErrorDetails$(context, exception, H.functionTypeCheck(informationCollector, {func: 1, ret: -1, args: [P.StringBuffer]}), "widgets library", false, stack);
      U.assertions_FlutterError_dumpErrorToConsole$closure().call$1(details);
      return details;
    },
    UniqueKey: function UniqueKey() {
    },
    GlobalKey: function GlobalKey() {
    },
    LabeledGlobalKey: function LabeledGlobalKey(t0, t1) {
      this._debugLabel = t0;
      this.$ti = t1;
    },
    GlobalObjectKey: function GlobalObjectKey(t0, t1) {
      this.value = t0;
      this.$ti = t1;
    },
    TypeMatcher: function TypeMatcher(t0) {
      this.$ti = t0;
    },
    Widget: function Widget() {
    },
    StatelessWidget: function StatelessWidget() {
    },
    StatefulWidget: function StatefulWidget() {
    },
    _StateLifecycle: function _StateLifecycle(t0) {
      this._framework$_name = t0;
    },
    State: function State() {
    },
    ProxyWidget: function ProxyWidget() {
    },
    ParentDataWidget: function ParentDataWidget() {
    },
    InheritedWidget: function InheritedWidget() {
    },
    RenderObjectWidget: function RenderObjectWidget() {
    },
    LeafRenderObjectWidget: function LeafRenderObjectWidget() {
    },
    SingleChildRenderObjectWidget: function SingleChildRenderObjectWidget() {
    },
    MultiChildRenderObjectWidget: function MultiChildRenderObjectWidget() {
    },
    _ElementLifecycle: function _ElementLifecycle(t0) {
      this._framework$_name = t0;
    },
    _InactiveElements: function _InactiveElements(t0) {
      this._locked = false;
      this._elements = t0;
    },
    _InactiveElements__unmount_closure: function _InactiveElements__unmount_closure(t0, t1) {
      this.$this = t0;
      this.element = t1;
    },
    BuildContext: function BuildContext() {
    },
    BuildOwner: function BuildOwner(t0, t1, t2) {
      var _ = this;
      _.onBuildScheduled = null;
      _._inactiveElements = t0;
      _._dirtyElements = t1;
      _._scheduledFlushDirtyElements = false;
      _._dirtyElementsNeedsResorting = null;
      _.focusManager = t2;
      _._debugStateLockLevel = 0;
      _._debugBuilding = false;
      _._debugElementsThatWillNeedToBeRebuiltDueToGlobalKeyShenanigans = _._debugCurrentBuildTarget = null;
    },
    BuildOwner_buildScope_closure: function BuildOwner_buildScope_closure(t0, t1) {
      this._box_0 = t0;
      this.$this = t1;
    },
    BuildOwner_finalizeTree_closure: function BuildOwner_finalizeTree_closure(t0) {
      this.$this = t0;
    },
    Element: function Element() {
    },
    Element_renderObject_visit: function Element_renderObject_visit(t0) {
      this._box_0 = t0;
    },
    Element_updateSlotForChild_visit: function Element_updateSlotForChild_visit(t0) {
      this.newSlot = t0;
    },
    Element__updateDepth_closure: function Element__updateDepth_closure(t0) {
      this.expectedDepth = t0;
    },
    Element_detachRenderObject_closure: function Element_detachRenderObject_closure() {
    },
    Element_attachRenderObject_closure: function Element_attachRenderObject_closure(t0) {
      this.newSlot = t0;
    },
    Element_debugDescribeChildren_closure: function Element_debugDescribeChildren_closure(t0) {
      this.children = t0;
    },
    ErrorWidget: function ErrorWidget(t0, t1) {
      this.message = t0;
      this.key = t1;
    },
    ErrorWidget_closure: function ErrorWidget_closure() {
    },
    ComponentElement: function ComponentElement() {
    },
    StatelessElement: function StatelessElement(t0, t1, t2) {
      var _ = this;
      _._framework$_parent = _._framework$_child = null;
      _._cachedHash = t0;
      _._depth = _._slot = null;
      _._widget = t1;
      _._owner = null;
      _._active = false;
      _._debugLifecycleState = t2;
      _._dependencies = _._inheritedWidgets = null;
      _._hadUnsatisfiedDependencies = false;
      _._dirty = true;
      _._debugAllowIgnoredCallsToMarkNeedsBuild = _._debugBuiltOnce = _._inDirtyList = false;
    },
    StatefulElement: function StatefulElement(t0, t1, t2, t3) {
      var _ = this;
      _._framework$_state = t0;
      _._framework$_parent = _._framework$_child = null;
      _._cachedHash = t1;
      _._depth = _._slot = null;
      _._widget = t2;
      _._owner = null;
      _._active = false;
      _._debugLifecycleState = t3;
      _._dependencies = _._inheritedWidgets = null;
      _._hadUnsatisfiedDependencies = false;
      _._dirty = true;
      _._debugAllowIgnoredCallsToMarkNeedsBuild = _._debugBuiltOnce = _._inDirtyList = false;
    },
    ProxyElement: function ProxyElement() {
    },
    ParentDataElement: function ParentDataElement(t0, t1, t2, t3) {
      var _ = this;
      _._framework$_parent = _._framework$_child = null;
      _._cachedHash = t0;
      _._depth = _._slot = null;
      _._widget = t1;
      _._owner = null;
      _._active = false;
      _._debugLifecycleState = t2;
      _._dependencies = _._inheritedWidgets = null;
      _._hadUnsatisfiedDependencies = false;
      _._dirty = true;
      _._debugAllowIgnoredCallsToMarkNeedsBuild = _._debugBuiltOnce = _._inDirtyList = false;
      _.$ti = t3;
    },
    ParentDataElement__applyParentData_applyParentDataToChild: function ParentDataElement__applyParentData_applyParentDataToChild(t0) {
      this.widget = t0;
    },
    InheritedElement: function InheritedElement(t0, t1, t2, t3) {
      var _ = this;
      _._dependents = t0;
      _._framework$_parent = _._framework$_child = null;
      _._cachedHash = t1;
      _._depth = _._slot = null;
      _._widget = t2;
      _._owner = null;
      _._active = false;
      _._debugLifecycleState = t3;
      _._dependencies = _._inheritedWidgets = null;
      _._hadUnsatisfiedDependencies = false;
      _._dirty = true;
      _._debugAllowIgnoredCallsToMarkNeedsBuild = _._debugBuiltOnce = _._inDirtyList = false;
    },
    RenderObjectElement: function RenderObjectElement() {
    },
    RenderObjectElement_updateChildren_replaceWithNullIfForgotten: function RenderObjectElement_updateChildren_replaceWithNullIfForgotten(t0) {
      this.forgottenChildren = t0;
    },
    RootRenderObjectElement: function RootRenderObjectElement() {
    },
    LeafRenderObjectElement: function LeafRenderObjectElement(t0, t1, t2) {
      var _ = this;
      _._framework$_parent = _._ancestorRenderObjectElement = _._renderObject = null;
      _._cachedHash = t0;
      _._depth = _._slot = null;
      _._widget = t1;
      _._owner = null;
      _._active = false;
      _._debugLifecycleState = t2;
      _._dependencies = _._inheritedWidgets = null;
      _._hadUnsatisfiedDependencies = false;
      _._dirty = true;
      _._debugAllowIgnoredCallsToMarkNeedsBuild = _._debugBuiltOnce = _._inDirtyList = false;
    },
    SingleChildRenderObjectElement: function SingleChildRenderObjectElement(t0, t1, t2) {
      var _ = this;
      _._framework$_parent = _._ancestorRenderObjectElement = _._renderObject = _._framework$_child = null;
      _._cachedHash = t0;
      _._depth = _._slot = null;
      _._widget = t1;
      _._owner = null;
      _._active = false;
      _._debugLifecycleState = t2;
      _._dependencies = _._inheritedWidgets = null;
      _._hadUnsatisfiedDependencies = false;
      _._dirty = true;
      _._debugAllowIgnoredCallsToMarkNeedsBuild = _._debugBuiltOnce = _._inDirtyList = false;
    },
    MultiChildRenderObjectElement: function MultiChildRenderObjectElement(t0, t1, t2, t3) {
      var _ = this;
      _._children = null;
      _._forgottenChildren = t0;
      _._framework$_parent = _._ancestorRenderObjectElement = _._renderObject = null;
      _._cachedHash = t1;
      _._depth = _._slot = null;
      _._widget = t2;
      _._owner = null;
      _._active = false;
      _._debugLifecycleState = t3;
      _._dependencies = _._inheritedWidgets = null;
      _._hadUnsatisfiedDependencies = false;
      _._dirty = true;
      _._debugAllowIgnoredCallsToMarkNeedsBuild = _._debugBuiltOnce = _._inDirtyList = false;
    },
    MultiChildRenderObjectElement_children_closure: function MultiChildRenderObjectElement_children_closure(t0) {
      this.$this = t0;
    },
    _TypedDataBuffer: function _TypedDataBuffer() {
    },
    _IntBuffer: function _IntBuffer() {
    },
    Uint8Buffer: function Uint8Buffer(t0, t1) {
      this._typed_buffers$_buffer = t0;
      this._typed_buffers$_length = t1;
    }
  },
  E = {
    useMemoized: function(valueBuilder, $T) {
      H.functionTypeCheck(valueBuilder, {func: 1, ret: $T});
      H.assertSubtype(C.List_empty0, "$isList", [P.Object], "$asList");
      return $.HookElement__currentContext._use$1$1(new E._MemoizedHook(valueBuilder, C.List_empty0, [$T]), $T);
    },
    _AnimationControllerHook: function _AnimationControllerHook(t0, t1, t2, t3, t4, t5, t6, t7) {
      var _ = this;
      _.duration = t0;
      _.debugLabel = t1;
      _.initialValue = t2;
      _.lowerBound = t3;
      _.upperBound = t4;
      _.vsync = t5;
      _.animationBehavior = t6;
      _.keys = t7;
    },
    _AnimationControllerHookState: function _AnimationControllerHookState() {
      this._hook = this._framework0$_element = this._animationController = null;
    },
    _SingleTickerProviderHook: function _SingleTickerProviderHook(t0) {
      this.keys = t0;
    },
    _TickerProviderHookState: function _TickerProviderHookState() {
      this._hook = this._framework0$_element = this._hooks$_ticker = null;
    },
    _StreamHook: function _StreamHook(t0, t1, t2, t3, t4) {
      var _ = this;
      _.stream = t0;
      _.initialData = t1;
      _.preserveState = t2;
      _.keys = t3;
      _.$ti = t4;
    },
    _StreamHookState: function _StreamHookState(t0) {
      var _ = this;
      _._hook = _._framework0$_element = _._summary = _._hooks$_subscription = null;
      _.$ti = t0;
    },
    _StreamHookState__subscribe_closure: function _StreamHookState__subscribe_closure(t0) {
      this.$this = t0;
    },
    _StreamHookState__subscribe__closure1: function _StreamHookState__subscribe__closure1(t0, t1) {
      this.$this = t0;
      this.data = t1;
    },
    _StreamHookState__subscribe_closure1: function _StreamHookState__subscribe_closure1(t0) {
      this.$this = t0;
    },
    _StreamHookState__subscribe__closure: function _StreamHookState__subscribe__closure(t0, t1) {
      this.$this = t0;
      this.error = t1;
    },
    _StreamHookState__subscribe_closure0: function _StreamHookState__subscribe_closure0(t0) {
      this.$this = t0;
    },
    _StreamHookState__subscribe__closure0: function _StreamHookState__subscribe__closure0(t0) {
      this.$this = t0;
    },
    _PageControllerHook: function _PageControllerHook(t0, t1, t2, t3) {
      var _ = this;
      _.initialPage = t0;
      _.viewportFraction = t1;
      _.keepPage = t2;
      _.keys = t3;
    },
    _PageControllerHookState: function _PageControllerHookState() {
      this._hook = this._framework0$_element = this._pageController = null;
    },
    UseScrollController: function UseScrollController() {
    },
    _ScrollControllerHook: function _ScrollControllerHook(t0, t1, t2, t3) {
      var _ = this;
      _.debugLabel = t0;
      _.initialScrollOffset = t1;
      _.keepScrollOffset = t2;
      _.keys = t3;
    },
    _ScrollControllerHookState: function _ScrollControllerHookState() {
      this._hook = this._framework0$_element = this._scrollController = null;
    },
    _TrackingScrollControllerHook: function _TrackingScrollControllerHook(t0, t1, t2, t3) {
      var _ = this;
      _.debugLabel = t0;
      _.initialScrollOffset = t1;
      _.keepScrollOffset = t2;
      _.keys = t3;
    },
    _TrackingScrollControllerHookState: function _TrackingScrollControllerHookState() {
      this._hook = this._framework0$_element = this._trackingScrollController = null;
    },
    _ListenableHook: function _ListenableHook(t0, t1) {
      this.listenable = t0;
      this.keys = t1;
    },
    _ListenableStateHook: function _ListenableStateHook() {
      this._hook = this._framework0$_element = null;
    },
    _ListenableStateHook__listener_closure: function _ListenableStateHook__listener_closure() {
    },
    _MemoizedHook: function _MemoizedHook(t0, t1, t2) {
      this.valueBuilder = t0;
      this.keys = t1;
      this.$ti = t2;
    },
    _MemoizedHookState: function _MemoizedHookState(t0) {
      var _ = this;
      _._hook = _._framework0$_element = _.value = null;
      _.$ti = t0;
    },
    _EffectHook: function _EffectHook(t0, t1) {
      this.effect = t0;
      this.keys = t1;
    },
    _EffectHookState: function _EffectHookState() {
      this._hook = this._framework0$_element = this.disposer = null;
    },
    MaterialColor: function MaterialColor(t0, t1) {
      this._swatch = t0;
      this._value = t1;
    },
    FloatingActionButton$: function(child, mini, onPressed) {
      var t1 = mini ? C.BoxConstraints_40_40_40_40 : C.BoxConstraints_56_56_56_56;
      return new E.FloatingActionButton(child, onPressed, 6, t1, null);
    },
    _DefaultHeroTag: function _DefaultHeroTag() {
    },
    FloatingActionButton: function FloatingActionButton(t0, t1, t2, t3, t4) {
      var _ = this;
      _.child = t0;
      _.onPressed = t1;
      _.disabledElevation = t2;
      _._sizeConstraints = t3;
      _.key = t4;
    },
    ColorSwatch: function ColorSwatch() {
    },
    ImageCache: function ImageCache(t0, t1) {
      this._pendingImages = t0;
      this._image_cache$_cache = t1;
    },
    _CachedImage: function _CachedImage() {
    },
    RenderProxyBox: function RenderProxyBox() {
    },
    RenderProxyBoxMixin: function RenderProxyBoxMixin() {
    },
    HitTestBehavior: function HitTestBehavior(t0) {
      this._proxy_box$_name = t0;
    },
    RenderProxyBoxWithHitTestBehavior: function RenderProxyBoxWithHitTestBehavior() {
    },
    RenderConstrainedBox: function RenderConstrainedBox(t0, t1) {
      var _ = this;
      _._additionalConstraints = t0;
      _.RenderObjectWithChildMixin__child = t1;
      _._cachedBaselines = _._size = _._cachedIntrinsicDimensions = null;
      _._debugActivePointers = 0;
      _.debugCreator = _.parentData = null;
      _._debugDoingThisLayout = _._debugDoingThisResize = false;
      _._debugCanParentUseSize = null;
      _._debugMutationsLocked = false;
      _._needsLayout = true;
      _._relayoutBoundary = null;
      _._doingThisLayoutWithCallback = false;
      _._constraints = null;
      _._debugDoingThisPaint = false;
      _._layer = null;
      _._needsCompositingBitsUpdate = false;
      _._needsCompositing = null;
      _._needsPaint = true;
      _._cachedSemanticsConfiguration = null;
      _._needsSemanticsUpdate = true;
      _._semantics = null;
      _._node$_depth = 0;
      _._node$_parent = _._node$_owner = null;
    },
    RenderLimitedBox: function RenderLimitedBox(t0, t1, t2) {
      var _ = this;
      _._maxWidth = t0;
      _._maxHeight = t1;
      _.RenderObjectWithChildMixin__child = t2;
      _._cachedBaselines = _._size = _._cachedIntrinsicDimensions = null;
      _._debugActivePointers = 0;
      _.debugCreator = _.parentData = null;
      _._debugDoingThisLayout = _._debugDoingThisResize = false;
      _._debugCanParentUseSize = null;
      _._debugMutationsLocked = false;
      _._needsLayout = true;
      _._relayoutBoundary = null;
      _._doingThisLayoutWithCallback = false;
      _._constraints = null;
      _._debugDoingThisPaint = false;
      _._layer = null;
      _._needsCompositingBitsUpdate = false;
      _._needsCompositing = null;
      _._needsPaint = true;
      _._cachedSemanticsConfiguration = null;
      _._needsSemanticsUpdate = true;
      _._semantics = null;
      _._node$_depth = 0;
      _._node$_parent = _._node$_owner = null;
    },
    RenderOpacity: function RenderOpacity(t0, t1, t2, t3) {
      var _ = this;
      _._proxy_box$_alpha = t0;
      _._proxy_box$_opacity = t1;
      _._alwaysIncludeSemantics = t2;
      _.RenderObjectWithChildMixin__child = t3;
      _._cachedBaselines = _._size = _._cachedIntrinsicDimensions = null;
      _._debugActivePointers = 0;
      _.debugCreator = _.parentData = null;
      _._debugDoingThisLayout = _._debugDoingThisResize = false;
      _._debugCanParentUseSize = null;
      _._debugMutationsLocked = false;
      _._needsLayout = true;
      _._relayoutBoundary = null;
      _._doingThisLayoutWithCallback = false;
      _._constraints = null;
      _._debugDoingThisPaint = false;
      _._layer = null;
      _._needsCompositingBitsUpdate = false;
      _._needsCompositing = null;
      _._needsPaint = true;
      _._cachedSemanticsConfiguration = null;
      _._needsSemanticsUpdate = true;
      _._semantics = null;
      _._node$_depth = 0;
      _._node$_parent = _._node$_owner = null;
    },
    RenderAnimatedOpacity: function RenderAnimatedOpacity(t0, t1) {
      var _ = this;
      _._proxy_box$_opacity = _._currentlyNeedsCompositing = _._proxy_box$_alpha = null;
      _._alwaysIncludeSemantics = t0;
      _.RenderObjectWithChildMixin__child = t1;
      _._cachedBaselines = _._size = _._cachedIntrinsicDimensions = null;
      _._debugActivePointers = 0;
      _.debugCreator = _.parentData = null;
      _._debugDoingThisLayout = _._debugDoingThisResize = false;
      _._debugCanParentUseSize = null;
      _._debugMutationsLocked = false;
      _._needsLayout = true;
      _._relayoutBoundary = null;
      _._doingThisLayoutWithCallback = false;
      _._constraints = null;
      _._debugDoingThisPaint = false;
      _._layer = null;
      _._needsCompositingBitsUpdate = false;
      _._needsCompositing = null;
      _._needsPaint = true;
      _._cachedSemanticsConfiguration = null;
      _._needsSemanticsUpdate = true;
      _._semantics = null;
      _._node$_depth = 0;
      _._node$_parent = _._node$_owner = null;
    },
    CustomClipper: function CustomClipper() {
    },
    ShapeBorderClipper: function ShapeBorderClipper(t0, t1) {
      this.shape = t0;
      this.textDirection = t1;
    },
    _RenderCustomClip: function _RenderCustomClip() {
    },
    RenderClipPath: function RenderClipPath(t0, t1, t2) {
      var _ = this;
      _._clipper = t0;
      _._clip = null;
      _.clipBehavior = t1;
      _._debugText = _._debugPaint = null;
      _.RenderObjectWithChildMixin__child = t2;
      _._cachedBaselines = _._size = _._cachedIntrinsicDimensions = null;
      _._debugActivePointers = 0;
      _.debugCreator = _.parentData = null;
      _._debugDoingThisLayout = _._debugDoingThisResize = false;
      _._debugCanParentUseSize = null;
      _._debugMutationsLocked = false;
      _._needsLayout = true;
      _._relayoutBoundary = null;
      _._doingThisLayoutWithCallback = false;
      _._constraints = null;
      _._debugDoingThisPaint = false;
      _._layer = null;
      _._needsCompositingBitsUpdate = false;
      _._needsCompositing = null;
      _._needsPaint = true;
      _._cachedSemanticsConfiguration = null;
      _._needsSemanticsUpdate = true;
      _._semantics = null;
      _._node$_depth = 0;
      _._node$_parent = _._node$_owner = null;
    },
    _RenderPhysicalModelBase: function _RenderPhysicalModelBase() {
    },
    RenderPhysicalModel: function RenderPhysicalModel(t0, t1, t2, t3, t4, t5, t6, t7) {
      var _ = this;
      _._proxy_box$_shape = t0;
      _._proxy_box$_borderRadius = t1;
      _._proxy_box$_elevation = t2;
      _._proxy_box$_shadowColor = t3;
      _._proxy_box$_color = t4;
      _._clipper = t5;
      _._clip = null;
      _.clipBehavior = t6;
      _._debugText = _._debugPaint = null;
      _.RenderObjectWithChildMixin__child = t7;
      _._cachedBaselines = _._size = _._cachedIntrinsicDimensions = null;
      _._debugActivePointers = 0;
      _.debugCreator = _.parentData = null;
      _._debugDoingThisLayout = _._debugDoingThisResize = false;
      _._debugCanParentUseSize = null;
      _._debugMutationsLocked = false;
      _._needsLayout = true;
      _._relayoutBoundary = null;
      _._doingThisLayoutWithCallback = false;
      _._constraints = null;
      _._debugDoingThisPaint = false;
      _._layer = null;
      _._needsCompositingBitsUpdate = false;
      _._needsCompositing = null;
      _._needsPaint = true;
      _._cachedSemanticsConfiguration = null;
      _._needsSemanticsUpdate = true;
      _._semantics = null;
      _._node$_depth = 0;
      _._node$_parent = _._node$_owner = null;
    },
    RenderPhysicalModel_paint_closure: function RenderPhysicalModel_paint_closure(t0, t1, t2) {
      this.$this = t0;
      this.context = t1;
      this.offset = t2;
    },
    RenderPhysicalShape: function RenderPhysicalShape(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _._proxy_box$_elevation = t0;
      _._proxy_box$_shadowColor = t1;
      _._proxy_box$_color = t2;
      _._clipper = t3;
      _._clip = null;
      _.clipBehavior = t4;
      _._debugText = _._debugPaint = null;
      _.RenderObjectWithChildMixin__child = t5;
      _._cachedBaselines = _._size = _._cachedIntrinsicDimensions = null;
      _._debugActivePointers = 0;
      _.debugCreator = _.parentData = null;
      _._debugDoingThisLayout = _._debugDoingThisResize = false;
      _._debugCanParentUseSize = null;
      _._debugMutationsLocked = false;
      _._needsLayout = true;
      _._relayoutBoundary = null;
      _._doingThisLayoutWithCallback = false;
      _._constraints = null;
      _._debugDoingThisPaint = false;
      _._layer = null;
      _._needsCompositingBitsUpdate = false;
      _._needsCompositing = null;
      _._needsPaint = true;
      _._cachedSemanticsConfiguration = null;
      _._needsSemanticsUpdate = true;
      _._semantics = null;
      _._node$_depth = 0;
      _._node$_parent = _._node$_owner = null;
    },
    RenderPhysicalShape_paint_closure: function RenderPhysicalShape_paint_closure(t0, t1, t2) {
      this.$this = t0;
      this.context = t1;
      this.offset = t2;
    },
    DecorationPosition: function DecorationPosition(t0) {
      this._proxy_box$_name = t0;
    },
    RenderDecoratedBox: function RenderDecoratedBox(t0, t1, t2, t3) {
      var _ = this;
      _._painter = null;
      _._proxy_box$_decoration = t0;
      _._proxy_box$_position = t1;
      _._configuration = t2;
      _.RenderObjectWithChildMixin__child = t3;
      _._cachedBaselines = _._size = _._cachedIntrinsicDimensions = null;
      _._debugActivePointers = 0;
      _.debugCreator = _.parentData = null;
      _._debugDoingThisLayout = _._debugDoingThisResize = false;
      _._debugCanParentUseSize = null;
      _._debugMutationsLocked = false;
      _._needsLayout = true;
      _._relayoutBoundary = null;
      _._doingThisLayoutWithCallback = false;
      _._constraints = null;
      _._debugDoingThisPaint = false;
      _._layer = null;
      _._needsCompositingBitsUpdate = false;
      _._needsCompositing = null;
      _._needsPaint = true;
      _._cachedSemanticsConfiguration = null;
      _._needsSemanticsUpdate = true;
      _._semantics = null;
      _._node$_depth = 0;
      _._node$_parent = _._node$_owner = null;
    },
    RenderTransform: function RenderTransform(t0, t1) {
      var _ = this;
      _._proxy_box$_textDirection = _._proxy_box$_alignment = _._origin = null;
      _.transformHitTests = t0;
      _._transform = null;
      _.RenderObjectWithChildMixin__child = t1;
      _._cachedBaselines = _._size = _._cachedIntrinsicDimensions = null;
      _._debugActivePointers = 0;
      _.debugCreator = _.parentData = null;
      _._debugDoingThisLayout = _._debugDoingThisResize = false;
      _._debugCanParentUseSize = null;
      _._debugMutationsLocked = false;
      _._needsLayout = true;
      _._relayoutBoundary = null;
      _._doingThisLayoutWithCallback = false;
      _._constraints = null;
      _._debugDoingThisPaint = false;
      _._layer = null;
      _._needsCompositingBitsUpdate = false;
      _._needsCompositing = null;
      _._needsPaint = true;
      _._cachedSemanticsConfiguration = null;
      _._needsSemanticsUpdate = true;
      _._semantics = null;
      _._node$_depth = 0;
      _._node$_parent = _._node$_owner = null;
    },
    RenderFractionalTranslation: function RenderFractionalTranslation(t0, t1, t2) {
      var _ = this;
      _._translation = t0;
      _.transformHitTests = t1;
      _.RenderObjectWithChildMixin__child = t2;
      _._cachedBaselines = _._size = _._cachedIntrinsicDimensions = null;
      _._debugActivePointers = 0;
      _.debugCreator = _.parentData = null;
      _._debugDoingThisLayout = _._debugDoingThisResize = false;
      _._debugCanParentUseSize = null;
      _._debugMutationsLocked = false;
      _._needsLayout = true;
      _._relayoutBoundary = null;
      _._doingThisLayoutWithCallback = false;
      _._constraints = null;
      _._debugDoingThisPaint = false;
      _._layer = null;
      _._needsCompositingBitsUpdate = false;
      _._needsCompositing = null;
      _._needsPaint = true;
      _._cachedSemanticsConfiguration = null;
      _._needsSemanticsUpdate = true;
      _._semantics = null;
      _._node$_depth = 0;
      _._node$_parent = _._node$_owner = null;
    },
    RenderPointerListener: function RenderPointerListener(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9) {
      var _ = this;
      _.onPointerDown = t0;
      _.onPointerMove = t1;
      _._onPointerEnter = t2;
      _._onPointerHover = t3;
      _._onPointerExit = t4;
      _.onPointerUp = t5;
      _.onPointerCancel = t6;
      _.onPointerSignal = t7;
      _._hoverAnnotation = null;
      _.behavior = t8;
      _.RenderObjectWithChildMixin__child = t9;
      _._cachedBaselines = _._size = _._cachedIntrinsicDimensions = null;
      _._debugActivePointers = 0;
      _.debugCreator = _.parentData = null;
      _._debugDoingThisLayout = _._debugDoingThisResize = false;
      _._debugCanParentUseSize = null;
      _._debugMutationsLocked = false;
      _._needsLayout = true;
      _._relayoutBoundary = null;
      _._doingThisLayoutWithCallback = false;
      _._constraints = null;
      _._debugDoingThisPaint = false;
      _._layer = null;
      _._needsCompositingBitsUpdate = false;
      _._needsCompositing = null;
      _._needsPaint = true;
      _._cachedSemanticsConfiguration = null;
      _._needsSemanticsUpdate = true;
      _._semantics = null;
      _._node$_depth = 0;
      _._node$_parent = _._node$_owner = null;
    },
    RenderRepaintBoundary: function RenderRepaintBoundary(t0) {
      var _ = this;
      _._debugAsymmetricPaintCount = _._debugSymmetricPaintCount = 0;
      _.RenderObjectWithChildMixin__child = t0;
      _._cachedBaselines = _._size = _._cachedIntrinsicDimensions = null;
      _._debugActivePointers = 0;
      _.debugCreator = _.parentData = null;
      _._debugDoingThisLayout = _._debugDoingThisResize = false;
      _._debugCanParentUseSize = null;
      _._debugMutationsLocked = false;
      _._needsLayout = true;
      _._relayoutBoundary = null;
      _._doingThisLayoutWithCallback = false;
      _._constraints = null;
      _._debugDoingThisPaint = false;
      _._layer = null;
      _._needsCompositingBitsUpdate = false;
      _._needsCompositing = null;
      _._needsPaint = true;
      _._cachedSemanticsConfiguration = null;
      _._needsSemanticsUpdate = true;
      _._semantics = null;
      _._node$_depth = 0;
      _._node$_parent = _._node$_owner = null;
    },
    RenderIgnorePointer: function RenderIgnorePointer(t0, t1, t2) {
      var _ = this;
      _._ignoring = t0;
      _._ignoringSemantics = t1;
      _.RenderObjectWithChildMixin__child = t2;
      _._cachedBaselines = _._size = _._cachedIntrinsicDimensions = null;
      _._debugActivePointers = 0;
      _.debugCreator = _.parentData = null;
      _._debugDoingThisLayout = _._debugDoingThisResize = false;
      _._debugCanParentUseSize = null;
      _._debugMutationsLocked = false;
      _._needsLayout = true;
      _._relayoutBoundary = null;
      _._doingThisLayoutWithCallback = false;
      _._constraints = null;
      _._debugDoingThisPaint = false;
      _._layer = null;
      _._needsCompositingBitsUpdate = false;
      _._needsCompositing = null;
      _._needsPaint = true;
      _._cachedSemanticsConfiguration = null;
      _._needsSemanticsUpdate = true;
      _._semantics = null;
      _._node$_depth = 0;
      _._node$_parent = _._node$_owner = null;
    },
    RenderOffstage: function RenderOffstage(t0, t1) {
      var _ = this;
      _._proxy_box$_offstage = t0;
      _.RenderObjectWithChildMixin__child = t1;
      _._cachedBaselines = _._size = _._cachedIntrinsicDimensions = null;
      _._debugActivePointers = 0;
      _.debugCreator = _.parentData = null;
      _._debugDoingThisLayout = _._debugDoingThisResize = false;
      _._debugCanParentUseSize = null;
      _._debugMutationsLocked = false;
      _._needsLayout = true;
      _._relayoutBoundary = null;
      _._doingThisLayoutWithCallback = false;
      _._constraints = null;
      _._debugDoingThisPaint = false;
      _._layer = null;
      _._needsCompositingBitsUpdate = false;
      _._needsCompositing = null;
      _._needsPaint = true;
      _._cachedSemanticsConfiguration = null;
      _._needsSemanticsUpdate = true;
      _._semantics = null;
      _._node$_depth = 0;
      _._node$_parent = _._node$_owner = null;
    },
    RenderAbsorbPointer: function RenderAbsorbPointer(t0, t1, t2) {
      var _ = this;
      _._absorbing = t0;
      _._ignoringSemantics = t1;
      _.RenderObjectWithChildMixin__child = t2;
      _._cachedBaselines = _._size = _._cachedIntrinsicDimensions = null;
      _._debugActivePointers = 0;
      _.debugCreator = _.parentData = null;
      _._debugDoingThisLayout = _._debugDoingThisResize = false;
      _._debugCanParentUseSize = null;
      _._debugMutationsLocked = false;
      _._needsLayout = true;
      _._relayoutBoundary = null;
      _._doingThisLayoutWithCallback = false;
      _._constraints = null;
      _._debugDoingThisPaint = false;
      _._layer = null;
      _._needsCompositingBitsUpdate = false;
      _._needsCompositing = null;
      _._needsPaint = true;
      _._cachedSemanticsConfiguration = null;
      _._needsSemanticsUpdate = true;
      _._semantics = null;
      _._node$_depth = 0;
      _._node$_parent = _._node$_owner = null;
    },
    RenderSemanticsGestureHandler: function RenderSemanticsGestureHandler(t0, t1, t2, t3, t4) {
      var _ = this;
      _._validActions = null;
      _._proxy_box$_onTap = t0;
      _._proxy_box$_onLongPress = t1;
      _._onHorizontalDragUpdate = t2;
      _._onVerticalDragUpdate = t3;
      _.RenderObjectWithChildMixin__child = t4;
      _._cachedBaselines = _._size = _._cachedIntrinsicDimensions = null;
      _._debugActivePointers = 0;
      _.debugCreator = _.parentData = null;
      _._debugDoingThisLayout = _._debugDoingThisResize = false;
      _._debugCanParentUseSize = null;
      _._debugMutationsLocked = false;
      _._needsLayout = true;
      _._relayoutBoundary = null;
      _._doingThisLayoutWithCallback = false;
      _._constraints = null;
      _._debugDoingThisPaint = false;
      _._layer = null;
      _._needsCompositingBitsUpdate = false;
      _._needsCompositing = null;
      _._needsPaint = true;
      _._cachedSemanticsConfiguration = null;
      _._needsSemanticsUpdate = true;
      _._semantics = null;
      _._node$_depth = 0;
      _._node$_parent = _._node$_owner = null;
    },
    RenderSemanticsAnnotations: function RenderSemanticsAnnotations(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t30, t31, t32, t33, t34, t35, t36, t37, t38, t39, t40, t41, t42, t43, t44, t45, t46, t47) {
      var _ = this;
      _._container = t0;
      _._explicitChildNodes = t1;
      _._excludeSemantics = t2;
      _._checked = t3;
      _._enabled = t4;
      _._selected = t5;
      _._button = t6;
      _._header = t7;
      _._textField = t8;
      _._focused = t9;
      _._inMutuallyExclusiveGroup = t10;
      _._obscured = t11;
      _._multiline = t12;
      _._scopesRoute = t13;
      _._namesRoute = t14;
      _._hidden = t15;
      _._image = t16;
      _._liveRegion = t17;
      _._toggled = t18;
      _._proxy_box$_label = t19;
      _._proxy_box$_value = t20;
      _._proxy_box$_increasedValue = t21;
      _._proxy_box$_decreasedValue = t22;
      _._proxy_box$_hint = t23;
      _._proxy_box$_hintOverrides = t24;
      _._proxy_box$_textDirection = t25;
      _._proxy_box$_sortKey = t26;
      _._proxy_box$_onTap = t27;
      _._onDismiss = t28;
      _._proxy_box$_onLongPress = t29;
      _._onScrollLeft = t30;
      _._onScrollRight = t31;
      _._onScrollUp = t32;
      _._onScrollDown = t33;
      _._onIncrease = t34;
      _._onDecrease = t35;
      _._onCopy = t36;
      _._onCut = t37;
      _._onPaste = t38;
      _._onMoveCursorForwardByCharacter = t39;
      _._onMoveCursorBackwardByCharacter = t40;
      _._onMoveCursorForwardByWord = t41;
      _._onMoveCursorBackwardByWord = t42;
      _._onSetSelection = t43;
      _._onDidGainAccessibilityFocus = t44;
      _._onDidLoseAccessibilityFocus = t45;
      _._proxy_box$_customSemanticsActions = t46;
      _.RenderObjectWithChildMixin__child = t47;
      _._cachedBaselines = _._size = _._cachedIntrinsicDimensions = null;
      _._debugActivePointers = 0;
      _.debugCreator = _.parentData = null;
      _._debugDoingThisLayout = _._debugDoingThisResize = false;
      _._debugCanParentUseSize = null;
      _._debugMutationsLocked = false;
      _._needsLayout = true;
      _._relayoutBoundary = null;
      _._doingThisLayoutWithCallback = false;
      _._constraints = null;
      _._debugDoingThisPaint = false;
      _._layer = null;
      _._needsCompositingBitsUpdate = false;
      _._needsCompositing = null;
      _._needsPaint = true;
      _._cachedSemanticsConfiguration = null;
      _._needsSemanticsUpdate = true;
      _._semantics = null;
      _._node$_depth = 0;
      _._node$_parent = _._node$_owner = null;
    },
    RenderBlockSemantics: function RenderBlockSemantics(t0, t1) {
      var _ = this;
      _._blocking = t0;
      _.RenderObjectWithChildMixin__child = t1;
      _._cachedBaselines = _._size = _._cachedIntrinsicDimensions = null;
      _._debugActivePointers = 0;
      _.debugCreator = _.parentData = null;
      _._debugDoingThisLayout = _._debugDoingThisResize = false;
      _._debugCanParentUseSize = null;
      _._debugMutationsLocked = false;
      _._needsLayout = true;
      _._relayoutBoundary = null;
      _._doingThisLayoutWithCallback = false;
      _._constraints = null;
      _._debugDoingThisPaint = false;
      _._layer = null;
      _._needsCompositingBitsUpdate = false;
      _._needsCompositing = null;
      _._needsPaint = true;
      _._cachedSemanticsConfiguration = null;
      _._needsSemanticsUpdate = true;
      _._semantics = null;
      _._node$_depth = 0;
      _._node$_parent = _._node$_owner = null;
    },
    RenderExcludeSemantics: function RenderExcludeSemantics(t0, t1) {
      var _ = this;
      _._excluding = t0;
      _.RenderObjectWithChildMixin__child = t1;
      _._cachedBaselines = _._size = _._cachedIntrinsicDimensions = null;
      _._debugActivePointers = 0;
      _.debugCreator = _.parentData = null;
      _._debugDoingThisLayout = _._debugDoingThisResize = false;
      _._debugCanParentUseSize = null;
      _._debugMutationsLocked = false;
      _._needsLayout = true;
      _._relayoutBoundary = null;
      _._doingThisLayoutWithCallback = false;
      _._constraints = null;
      _._debugDoingThisPaint = false;
      _._layer = null;
      _._needsCompositingBitsUpdate = false;
      _._needsCompositing = null;
      _._needsPaint = true;
      _._cachedSemanticsConfiguration = null;
      _._needsSemanticsUpdate = true;
      _._semantics = null;
      _._node$_depth = 0;
      _._node$_parent = _._node$_owner = null;
    },
    RenderIndexedSemantics: function RenderIndexedSemantics(t0, t1) {
      var _ = this;
      _._proxy_box$_index = t0;
      _.RenderObjectWithChildMixin__child = t1;
      _._cachedBaselines = _._size = _._cachedIntrinsicDimensions = null;
      _._debugActivePointers = 0;
      _.debugCreator = _.parentData = null;
      _._debugDoingThisLayout = _._debugDoingThisResize = false;
      _._debugCanParentUseSize = null;
      _._debugMutationsLocked = false;
      _._needsLayout = true;
      _._relayoutBoundary = null;
      _._doingThisLayoutWithCallback = false;
      _._constraints = null;
      _._debugDoingThisPaint = false;
      _._layer = null;
      _._needsCompositingBitsUpdate = false;
      _._needsCompositing = null;
      _._needsPaint = true;
      _._cachedSemanticsConfiguration = null;
      _._needsSemanticsUpdate = true;
      _._semantics = null;
      _._node$_depth = 0;
      _._node$_parent = _._node$_owner = null;
    },
    _RenderProxyBox_RenderBox_RenderObjectWithChildMixin: function _RenderProxyBox_RenderBox_RenderObjectWithChildMixin() {
    },
    _RenderProxyBox_RenderBox_RenderObjectWithChildMixin_RenderProxyBoxMixin: function _RenderProxyBox_RenderBox_RenderObjectWithChildMixin_RenderProxyBoxMixin() {
    },
    SemanticsEvent: function SemanticsEvent() {
    },
    TapSemanticEvent: function TapSemanticEvent(t0) {
      this.type = t0;
    },
    PrimaryScrollController: function PrimaryScrollController(t0, t1, t2) {
      this.controller = t0;
      this.child = t1;
      this.key = t2;
    },
    Matrix4_tryInvert: function(other) {
      var r = new E.Matrix4(new Float64Array(16));
      if (r.copyInverse$1(other) === 0)
        return;
      return r;
    },
    Matrix4_Matrix4$identity: function() {
      var t1 = new E.Matrix4(new Float64Array(16));
      t1.setIdentity$0();
      return t1;
    },
    Matrix4_Matrix4$translationValues0: function(x, y, z) {
      var t1 = new Float64Array(16),
        t2 = new E.Matrix4(t1);
      t2.setIdentity$0();
      t1[14] = z;
      C.NativeFloat64List_methods.$indexSet(t1, 13, y);
      C.NativeFloat64List_methods.$indexSet(t1, 12, x);
      return t2;
    },
    Matrix4: function Matrix4(t0) {
      this._m4storage = t0;
    },
    Vector3: function Vector3(t0) {
      this._v3storage = t0;
    },
    Vector4: function Vector4(t0) {
      this._v4storage = t0;
    },
    debugInstrumentAction: function(description, action, $T) {
      var t1 = H.functionTypeCheck(action, {func: 1, ret: [P.Future, $T]}).call$0();
      return t1;
    }
  },
  F = {
    h: function(f) {
      return new N.HookBuilder(new F.h_closure(f), null);
    },
    c: function(v) {
      return new Q.Color((v & 4294967295) >>> 0);
    },
    inset: function(v) {
      return new V.EdgeInsets(v, v, v, v);
    },
    txt: function(t, s, c, w) {
      var _null = null;
      H.stringTypeCheck(t);
      if (w >= 9)
        return H.ioore(C.List_27p, w);
      return L.Text$(t, A.TextStyle$0(_null, _null, c, _null, _null, _null, _null, _null, _null, s, _null, C.List_27p[w], _null, _null, true, _null, _null, _null, _null, _null, _null), C.TextAlign_2);
    },
    sb: function(w, h, c) {
      return new T.SizedBox(h, w, c, null);
    },
    flex: function(w, d, m, c, l) {
      var t1, t2, t3, t4, t5;
      if (d >= 2)
        return H.ioore(C.List_Axis_0_Axis_1, d);
      t1 = C.List_Axis_0_Axis_1[d];
      if (m >= 6)
        return H.ioore(C.List_8pF, m);
      t2 = C.List_8pF[m];
      if (c >= 5)
        return H.ioore(C.List_JMD, c);
      t3 = C.List_JMD[c];
      if (l >= 2)
        return H.ioore(C.List_TextDirection_0_TextDirection_1, l);
      t4 = C.List_TextDirection_0_TextDirection_1[l];
      t5 = N.Widget;
      return T.Flex$(H.assertSubtype(J.cast$1$0$ax(w, t5), "$isList", [t5], "$asList"), t3, t1, null, t2, C.MainAxisSize_1, null, t4, C.VerticalDirection_1);
    },
    box: function(c, i, m, h, w, b, r) {
      var _null = null,
        t1 = F.inset(m),
        t2 = F.inset(i),
        t3 = r == null ? 0 : r;
      t3 = new Q.Radius(t3, t3);
      return M.Container$(_null, c, _null, _null, S.BoxDecoration$(_null, new K.BorderRadius(t3, t3, t3, t3), _null, b, _null, _null, C.BoxShape_0), h, t1, t2, w);
    },
    tr: function(o, x, w) {
      return T.Opacity$(new T.Transform0(E.Matrix4_Matrix4$translationValues0(x, 0, 0), null, true, w, null), o);
    },
    scaff: function(b, i, t, w) {
      return new M.Scaffold(w, E.FloatingActionButton$(L.Icon$(i, $.$get$dark()), false, H.functionTypeCheck(t, {func: 1, ret: -1})), C.C__CenterFloatFloatingActionButtonLocation, b, null);
    },
    run: function(c) {
      return F.h(new F.run_closure());
    },
    home: function() {
      return F.h(new F.home_closure());
    },
    tabs: function(d) {
      return F.h(new F.tabs_closure(d));
    },
    list: function(it, c, h, l, b, p, s, x, o) {
      var t2, t3, t4, t5, _null = null,
        t1 = s.maxWidth;
      if (typeof t1 !== "number")
        return t1.$mul();
      t2 = H.intTypeCheck(J.$add$ansx(J.get$length$asx(it), 1));
      t3 = G.SliverChildBuilderDelegate$(new F.list_closure(h, l, p, b, it), true, true, true, t2);
      t4 = c == null && true;
      t5 = c == null && true;
      t5 = t5 ? C.AlwaysScrollableScrollPhysics_null : _null;
      return F.tr(o, t1 * x, new B.ListView(t3, _null, C.Axis_1, false, c, t4, t5, false, _null, t2, C.DragStartBehavior_0, _null));
    },
    header: function(t, l, p) {
      var t3, _null = null,
        t1 = F.txt(t, 48, $.$get$dark(), 8),
        t2 = l ? C.IconData_58824_MaterialIcons_true : C.IconData_58820_MaterialIcons_true;
      t2 = L.Icon$(t2, $.$get$dark());
      t3 = l ? 1 : 0;
      return F.box(F.flex([t1, new R.Spacer(_null), new B.IconButton(t2, new F.header_closure(p, l), _null)], 0, 2, 2, t3), 24, 0, 100, _null, _null, _null);
    },
    overview: function(i, aa) {
      return F.h(new F.overview_closure(i));
    },
    detail: function(item, a) {
      var t1 = J.expand$1$ax(J.$index$asx(item, "stats"), new F.detail_closure()).toList$0(0);
      J.add$1$ax(t1, F.graph(item, a));
      return F.box(F.flex(t1, 1, 2, 2, 1), 0, 24, 340, null, $.$get$sDark(), 24);
    },
    graph: function(item, a) {
      return F.flex(J.expand$1$ax(J.$index$asx(item, "wayp"), new F.graph_closure(a)).skip$1(0, 1).toList$0(0), 0, 2, 1, 1);
    },
    h_closure: function h_closure(t0) {
      this.f = t0;
    },
    run_closure: function run_closure() {
    },
    run__closure: function run__closure() {
    },
    run___closure: function run___closure() {
    },
    run__closure0: function run__closure0(t0) {
      this.c = t0;
    },
    home_closure: function home_closure() {
    },
    home__closure: function home__closure(t0) {
      this.c = t0;
    },
    home___closure0: function home___closure0() {
    },
    home___closure: function home___closure() {
    },
    home__closure0: function home__closure0() {
    },
    home__closure1: function home__closure1() {
    },
    tabs_closure: function tabs_closure(t0) {
      this.d = t0;
    },
    tabs__closure: function tabs__closure(t0, t1, t2, t3, t4) {
      var _ = this;
      _.p = t0;
      _.d = t1;
      _.sc = t2;
      _.pii = t3;
      _.pi = t4;
    },
    tabs___closure: function tabs___closure(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.d = t0;
      _.sc = t1;
      _.pii = t2;
      _.p = t3;
      _.s = t4;
      _.pi = t5;
    },
    tabs____closure: function tabs____closure(t0) {
      this.pii = t0;
    },
    tabs____closure0: function tabs____closure0(t0) {
      this.pi = t0;
    },
    list_closure: function list_closure(t0, t1, t2, t3, t4) {
      var _ = this;
      _.h = t0;
      _.l = t1;
      _.p = t2;
      _.b = t3;
      _.it = t4;
    },
    header_closure: function header_closure(t0, t1) {
      this.p = t0;
      this.l = t1;
    },
    overview_closure: function overview_closure(t0) {
      this.i = t0;
    },
    overview__closure: function overview__closure(t0) {
      this.ac = t0;
    },
    detail_closure: function detail_closure() {
    },
    graph_closure: function graph_closure(t0) {
      this.a = t0;
    },
    LP: function LP(t0, t1, t2, t3) {
      var _ = this;
      _.i = t0;
      _.a = t1;
      _.color = t2;
      _._repaint = t3;
    },
    LP_paint_np: function LP_paint_np() {
    },
    LP_paint_closure: function LP_paint_closure(t0) {
      this.$this = t0;
    },
    LP_paint_closure0: function LP_paint_closure0(t0) {
      this.ps = t0;
    },
    LP_paint_ha: function LP_paint_ha(t0, t1, t2) {
      this.c = t0;
      this.p = t1;
      this.np = t2;
    },
    LicenseEntry: function LicenseEntry() {
    },
    LicenseEntryWithLineBreaks: function LicenseEntryWithLineBreaks() {
    },
    PointerCancelEvent$: function(buttons, device, distance, distanceMax, kind, obscured, orientation, pointer, position, pressure, pressureMax, pressureMin, radiusMajor, radiusMax, radiusMin, radiusMinor, size, tilt, timeStamp) {
      return new F.PointerCancelEvent(timeStamp, pointer, kind, device, position, C.Offset_0_0, buttons, false, false, pressure, pressureMin, pressureMax, distance, distanceMax, size, radiusMajor, radiusMinor, radiusMin, radiusMax, orientation, tilt, 0, false);
    },
    PointerEvent: function PointerEvent() {
    },
    PointerAddedEvent: function PointerAddedEvent(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t20, t21, t22) {
      var _ = this;
      _.timeStamp = t0;
      _.pointer = t1;
      _.kind = t2;
      _.device = t3;
      _.position = t4;
      _.delta = t5;
      _.buttons = t6;
      _.down = t7;
      _.obscured = t8;
      _.pressure = t9;
      _.pressureMin = t10;
      _.pressureMax = t11;
      _.distance = t12;
      _.distanceMax = t13;
      _.size = t14;
      _.radiusMajor = t15;
      _.radiusMinor = t16;
      _.radiusMin = t17;
      _.radiusMax = t18;
      _.orientation = t19;
      _.tilt = t20;
      _.platformData = t21;
      _.synthesized = t22;
    },
    PointerRemovedEvent: function PointerRemovedEvent(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t20, t21, t22) {
      var _ = this;
      _.timeStamp = t0;
      _.pointer = t1;
      _.kind = t2;
      _.device = t3;
      _.position = t4;
      _.delta = t5;
      _.buttons = t6;
      _.down = t7;
      _.obscured = t8;
      _.pressure = t9;
      _.pressureMin = t10;
      _.pressureMax = t11;
      _.distance = t12;
      _.distanceMax = t13;
      _.size = t14;
      _.radiusMajor = t15;
      _.radiusMinor = t16;
      _.radiusMin = t17;
      _.radiusMax = t18;
      _.orientation = t19;
      _.tilt = t20;
      _.platformData = t21;
      _.synthesized = t22;
    },
    PointerHoverEvent: function PointerHoverEvent(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t20, t21, t22) {
      var _ = this;
      _.timeStamp = t0;
      _.pointer = t1;
      _.kind = t2;
      _.device = t3;
      _.position = t4;
      _.delta = t5;
      _.buttons = t6;
      _.down = t7;
      _.obscured = t8;
      _.pressure = t9;
      _.pressureMin = t10;
      _.pressureMax = t11;
      _.distance = t12;
      _.distanceMax = t13;
      _.size = t14;
      _.radiusMajor = t15;
      _.radiusMinor = t16;
      _.radiusMin = t17;
      _.radiusMax = t18;
      _.orientation = t19;
      _.tilt = t20;
      _.platformData = t21;
      _.synthesized = t22;
    },
    PointerEnterEvent: function PointerEnterEvent() {
    },
    PointerExitEvent: function PointerExitEvent() {
    },
    PointerDownEvent: function PointerDownEvent(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t20, t21, t22) {
      var _ = this;
      _.timeStamp = t0;
      _.pointer = t1;
      _.kind = t2;
      _.device = t3;
      _.position = t4;
      _.delta = t5;
      _.buttons = t6;
      _.down = t7;
      _.obscured = t8;
      _.pressure = t9;
      _.pressureMin = t10;
      _.pressureMax = t11;
      _.distance = t12;
      _.distanceMax = t13;
      _.size = t14;
      _.radiusMajor = t15;
      _.radiusMinor = t16;
      _.radiusMin = t17;
      _.radiusMax = t18;
      _.orientation = t19;
      _.tilt = t20;
      _.platformData = t21;
      _.synthesized = t22;
    },
    PointerMoveEvent: function PointerMoveEvent(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t20, t21, t22) {
      var _ = this;
      _.timeStamp = t0;
      _.pointer = t1;
      _.kind = t2;
      _.device = t3;
      _.position = t4;
      _.delta = t5;
      _.buttons = t6;
      _.down = t7;
      _.obscured = t8;
      _.pressure = t9;
      _.pressureMin = t10;
      _.pressureMax = t11;
      _.distance = t12;
      _.distanceMax = t13;
      _.size = t14;
      _.radiusMajor = t15;
      _.radiusMinor = t16;
      _.radiusMin = t17;
      _.radiusMax = t18;
      _.orientation = t19;
      _.tilt = t20;
      _.platformData = t21;
      _.synthesized = t22;
    },
    PointerUpEvent: function PointerUpEvent(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t20, t21, t22) {
      var _ = this;
      _.timeStamp = t0;
      _.pointer = t1;
      _.kind = t2;
      _.device = t3;
      _.position = t4;
      _.delta = t5;
      _.buttons = t6;
      _.down = t7;
      _.obscured = t8;
      _.pressure = t9;
      _.pressureMin = t10;
      _.pressureMax = t11;
      _.distance = t12;
      _.distanceMax = t13;
      _.size = t14;
      _.radiusMajor = t15;
      _.radiusMinor = t16;
      _.radiusMin = t17;
      _.radiusMax = t18;
      _.orientation = t19;
      _.tilt = t20;
      _.platformData = t21;
      _.synthesized = t22;
    },
    PointerSignalEvent: function PointerSignalEvent() {
    },
    PointerScrollEvent: function PointerScrollEvent(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t20, t21, t22, t23) {
      var _ = this;
      _.scrollDelta = t0;
      _.timeStamp = t1;
      _.pointer = t2;
      _.kind = t3;
      _.device = t4;
      _.position = t5;
      _.delta = t6;
      _.buttons = t7;
      _.down = t8;
      _.obscured = t9;
      _.pressure = t10;
      _.pressureMin = t11;
      _.pressureMax = t12;
      _.distance = t13;
      _.distanceMax = t14;
      _.size = t15;
      _.radiusMajor = t16;
      _.radiusMinor = t17;
      _.radiusMin = t18;
      _.radiusMax = t19;
      _.orientation = t20;
      _.tilt = t21;
      _.platformData = t22;
      _.synthesized = t23;
    },
    PointerCancelEvent: function PointerCancelEvent(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t20, t21, t22) {
      var _ = this;
      _.timeStamp = t0;
      _.pointer = t1;
      _.kind = t2;
      _.device = t3;
      _.position = t4;
      _.delta = t5;
      _.buttons = t6;
      _.down = t7;
      _.obscured = t8;
      _.pressure = t9;
      _.pressureMin = t10;
      _.pressureMax = t11;
      _.distance = t12;
      _.distanceMax = t13;
      _.size = t14;
      _.radiusMajor = t15;
      _.radiusMinor = t16;
      _.radiusMin = t17;
      _.radiusMax = t18;
      _.orientation = t19;
      _.tilt = t20;
      _.platformData = t21;
      _.synthesized = t22;
    },
    _TapTracker: function _TapTracker(t0, t1, t2) {
      var _ = this;
      _.pointer = t0;
      _.entry = t1;
      _._multitap$_initialPosition = t2;
      _._isTrackingPointer = false;
    },
    DoubleTapGestureRecognizer: function DoubleTapGestureRecognizer(t0, t1, t2) {
      var _ = this;
      _._firstTap = _._doubleTapTimer = _.onDoubleTap = null;
      _._trackers = t0;
      _.debugOwner = t1;
      _._recognizer$_kind = t2;
    },
    BoxBorder_lerp: function(a, b, t) {
      var t2, t0,
        t1 = J.getInterceptor$(a);
      if (!!t1.$isBorder || a == null)
        t2 = b instanceof F.Border || b == null;
      else
        t2 = false;
      if (t2)
        return F.Border_lerp(H.interceptedTypeCheck(a, "$isBorder"), H.interceptedTypeCheck(b, "$isBorder"), t);
      t1 = !!t1.$isBorderDirectional;
      if (t1 || a == null)
        t2 = b instanceof F.BorderDirectional || b == null;
      else
        t2 = false;
      if (t2)
        return F.BorderDirectional_lerp(H.interceptedTypeCheck(a, "$isBorderDirectional"), H.interceptedTypeCheck(b, "$isBorderDirectional"), t);
      if (b instanceof F.Border && t1) {
        if (typeof t !== "number")
          return H.iae(t);
        t = 1 - t;
        t0 = b;
        b = a;
        a = t0;
      }
      t1 = J.getInterceptor$(a);
      if (!!t1.$isBorder && b instanceof F.BorderDirectional) {
        t1 = b.start;
        if (t1.$eq(0, C.BorderSide_m7u) && b.end.$eq(0, C.BorderSide_m7u))
          return new F.Border(Y.BorderSide_lerp(a.top, b.top, t), Y.BorderSide_lerp(a.right, C.BorderSide_m7u, t), Y.BorderSide_lerp(a.bottom, b.bottom, t), Y.BorderSide_lerp(a.left, C.BorderSide_m7u, t));
        t2 = a.left;
        if (t2.$eq(0, C.BorderSide_m7u) && a.right.$eq(0, C.BorderSide_m7u))
          return new F.BorderDirectional(Y.BorderSide_lerp(a.top, b.top, t), Y.BorderSide_lerp(C.BorderSide_m7u, t1, t), Y.BorderSide_lerp(C.BorderSide_m7u, b.end, t), Y.BorderSide_lerp(a.bottom, b.bottom, t));
        if (typeof t !== "number")
          return t.$lt();
        if (t < 0.5) {
          t1 = t * 2;
          return new F.Border(Y.BorderSide_lerp(a.top, b.top, t), Y.BorderSide_lerp(a.right, C.BorderSide_m7u, t1), Y.BorderSide_lerp(a.bottom, b.bottom, t), Y.BorderSide_lerp(t2, C.BorderSide_m7u, t1));
        }
        t2 = (t - 0.5) * 2;
        return new F.BorderDirectional(Y.BorderSide_lerp(a.top, b.top, t), Y.BorderSide_lerp(C.BorderSide_m7u, t1, t2), Y.BorderSide_lerp(C.BorderSide_m7u, b.end, t2), Y.BorderSide_lerp(a.bottom, b.bottom, t));
      }
      throw H.wrapException(U.FlutterError$("BoxBorder.lerp can only interpolate Border and BorderDirectional classes.\nBoxBorder.lerp() was called with two objects of type " + t1.get$runtimeType(a).toString$0(0) + " and " + J.get$runtimeType$(b).toString$0(0) + ":\n  " + H.S(a) + "\n  " + H.S(b) + "\nHowever, only Border and BorderDirectional classes are supported by this method. For a more general interpolation method, consider using ShapeBorder.lerp instead."));
    },
    BoxBorder__paintUniformBorderWithRadius: function(canvas, rect, side, borderRadius) {
      var outer, width,
        paint = new Q.Paint(new Q.PaintData());
      paint.set$color(0, side.color);
      outer = borderRadius.toRRect$1(rect);
      width = side.width;
      if (width === 0) {
        paint.set$style(0, C.PaintingStyle_1);
        paint.set$strokeWidth(0);
        canvas.drawRRect$2(outer, paint);
      } else
        canvas.drawDRRect$3(outer, outer.inflate$1(-width), paint);
    },
    BoxBorder__paintUniformBorderWithCircle: function(canvas, rect, side) {
      var paint = side.toPaint$0(),
        t1 = rect.get$shortestSide();
      canvas.drawCircle$3(rect.get$center(), (t1 - side.width) / 2, paint);
    },
    BoxBorder__paintUniformBorderWithRectangle: function(canvas, rect, side) {
      var paint = side.toPaint$0();
      canvas.drawRect$2(rect.inflate$1(-(side.width / 2)), paint);
    },
    Border_lerp: function(a, b, t) {
      var t1 = a == null;
      if (t1 && b == null)
        return;
      if (t1)
        return b.scale$1(0, t);
      if (b == null) {
        if (typeof t !== "number")
          return H.iae(t);
        return a.scale$1(0, 1 - t);
      }
      return new F.Border(Y.BorderSide_lerp(a.top, b.top, t), Y.BorderSide_lerp(a.right, b.right, t), Y.BorderSide_lerp(a.bottom, b.bottom, t), Y.BorderSide_lerp(a.left, b.left, t));
    },
    BorderDirectional_lerp: function(a, b, t) {
      var t2, t3,
        t1 = a == null;
      if (t1 && b == null)
        return;
      if (t1)
        return b.scale$1(0, t);
      if (b == null) {
        if (typeof t !== "number")
          return H.iae(t);
        return a.scale$1(0, 1 - t);
      }
      t1 = Y.BorderSide_lerp(a.top, b.top, t);
      t2 = Y.BorderSide_lerp(a.end, b.end, t);
      t3 = Y.BorderSide_lerp(a.bottom, b.bottom, t);
      return new F.BorderDirectional(t1, Y.BorderSide_lerp(a.start, b.start, t), t2, t3);
    },
    BoxShape: function BoxShape(t0) {
      this._box_border$_name = t0;
    },
    BoxBorder: function BoxBorder() {
    },
    Border: function Border(t0, t1, t2, t3) {
      var _ = this;
      _.top = t0;
      _.right = t1;
      _.bottom = t2;
      _.left = t3;
    },
    BorderDirectional: function BorderDirectional(t0, t1, t2, t3) {
      var _ = this;
      _.top = t0;
      _.start = t1;
      _.end = t2;
      _.bottom = t3;
    },
    _startIsTopLeft: function(direction, textDirection, verticalDirection) {
      switch (direction) {
        case C.Axis_0:
          switch (textDirection) {
            case C.TextDirection_1:
              return true;
            case C.TextDirection_0:
              return false;
          }
          break;
        case C.Axis_1:
          switch (verticalDirection) {
            case C.VerticalDirection_1:
              return true;
            case C.VerticalDirection_0:
              return false;
          }
          break;
      }
      return;
    },
    FlexFit: function FlexFit(t0) {
      this._flex$_name = t0;
    },
    FlexParentData: function FlexParentData(t0, t1, t2) {
      var _ = this;
      _.fit = _.flex = null;
      _.ContainerParentDataMixin_previousSibling = t0;
      _.ContainerParentDataMixin_nextSibling = t1;
      _.offset = t2;
    },
    MainAxisSize: function MainAxisSize(t0) {
      this._flex$_name = t0;
    },
    MainAxisAlignment: function MainAxisAlignment(t0) {
      this._flex$_name = t0;
    },
    CrossAxisAlignment: function CrossAxisAlignment(t0) {
      this._flex$_name = t0;
    },
    RenderFlex: function RenderFlex(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11) {
      var _ = this;
      _._flex$_direction = t0;
      _._mainAxisAlignment = t1;
      _._mainAxisSize = t2;
      _._crossAxisAlignment = t3;
      _._flex$_textDirection = t4;
      _._verticalDirection = t5;
      _._flex$_textBaseline = t6;
      _._flex$_overflow = null;
      _.DebugOverflowIndicatorMixin__indicatorLabel = t7;
      _.DebugOverflowIndicatorMixin__overflowReportNeeded = t8;
      _.ContainerRenderObjectMixin__childCount = t9;
      _.ContainerRenderObjectMixin__firstChild = t10;
      _.ContainerRenderObjectMixin__lastChild = t11;
      _._cachedBaselines = _._size = _._cachedIntrinsicDimensions = null;
      _._debugActivePointers = 0;
      _.debugCreator = _.parentData = null;
      _._debugDoingThisLayout = _._debugDoingThisResize = false;
      _._debugCanParentUseSize = null;
      _._debugMutationsLocked = false;
      _._needsLayout = true;
      _._relayoutBoundary = null;
      _._doingThisLayoutWithCallback = false;
      _._constraints = null;
      _._debugDoingThisPaint = false;
      _._layer = null;
      _._needsCompositingBitsUpdate = false;
      _._needsCompositing = null;
      _._needsPaint = true;
      _._cachedSemanticsConfiguration = null;
      _._needsSemanticsUpdate = true;
      _._semantics = null;
      _._node$_depth = 0;
      _._node$_parent = _._node$_owner = null;
    },
    _RenderFlex_RenderBox_ContainerRenderObjectMixin: function _RenderFlex_RenderBox_ContainerRenderObjectMixin() {
    },
    _RenderFlex_RenderBox_ContainerRenderObjectMixin_RenderBoxContainerDefaultsMixin: function _RenderFlex_RenderBox_ContainerRenderObjectMixin_RenderBoxContainerDefaultsMixin() {
    },
    _RenderFlex_RenderBox_ContainerRenderObjectMixin_RenderBoxContainerDefaultsMixin_DebugOverflowIndicatorMixin: function _RenderFlex_RenderBox_ContainerRenderObjectMixin_RenderBoxContainerDefaultsMixin_DebugOverflowIndicatorMixin() {
    },
    KeepAliveParentDataMixin: function KeepAliveParentDataMixin() {
    },
    RenderSliverWithKeepAliveMixin: function RenderSliverWithKeepAliveMixin() {
    },
    SliverMultiBoxAdaptorParentData: function SliverMultiBoxAdaptorParentData(t0, t1, t2) {
      var _ = this;
      _.index = null;
      _._keptAlive = false;
      _.KeepAliveParentDataMixin_keepAlive = t0;
      _.ContainerParentDataMixin_previousSibling = t1;
      _.ContainerParentDataMixin_nextSibling = t2;
      _.layoutOffset = 0;
    },
    RenderSliverMultiBoxAdaptor: function RenderSliverMultiBoxAdaptor() {
    },
    RenderSliverMultiBoxAdaptor__createOrObtainChild_closure: function RenderSliverMultiBoxAdaptor__createOrObtainChild_closure(t0, t1, t2) {
      this.$this = t0;
      this.index = t1;
      this.after = t2;
    },
    RenderSliverMultiBoxAdaptor_collectGarbage_closure: function RenderSliverMultiBoxAdaptor_collectGarbage_closure(t0, t1) {
      this._box_0 = t0;
      this.$this = t1;
    },
    RenderSliverMultiBoxAdaptor_collectGarbage__closure: function RenderSliverMultiBoxAdaptor_collectGarbage__closure() {
    },
    _RenderSliverMultiBoxAdaptor_RenderSliver_ContainerRenderObjectMixin: function _RenderSliverMultiBoxAdaptor_RenderSliver_ContainerRenderObjectMixin() {
    },
    _RenderSliverMultiBoxAdaptor_RenderSliver_ContainerRenderObjectMixin_RenderSliverHelpers: function _RenderSliverMultiBoxAdaptor_RenderSliver_ContainerRenderObjectMixin_RenderSliverHelpers() {
    },
    _RenderSliverMultiBoxAdaptor_RenderSliver_ContainerRenderObjectMixin_RenderSliverHelpers_RenderSliverWithKeepAliveMixin: function _RenderSliverMultiBoxAdaptor_RenderSliver_ContainerRenderObjectMixin_RenderSliverHelpers_RenderSliverWithKeepAliveMixin() {
    },
    _SliverMultiBoxAdaptorParentData_SliverLogicalParentData_ContainerParentDataMixin: function _SliverMultiBoxAdaptorParentData_SliverLogicalParentData_ContainerParentDataMixin() {
    },
    _SliverMultiBoxAdaptorParentData_SliverLogicalParentData_ContainerParentDataMixin_KeepAliveParentDataMixin: function _SliverMultiBoxAdaptorParentData_SliverLogicalParentData_ContainerParentDataMixin_KeepAliveParentDataMixin() {
    },
    PlatformException$: function(code, details, message) {
      return new F.PlatformException(code, message, details);
    },
    MethodCall0: function MethodCall0(t0, t1) {
      this.method = t0;
      this.$arguments = t1;
    },
    PlatformException: function PlatformException(t0, t1, t2) {
      this.code = t0;
      this.message = t1;
      this.details = t2;
    },
    MissingPluginException: function MissingPluginException(t0) {
      this.message = t0;
    },
    MediaQueryData$: function(accessibleNavigation, alwaysUse24HourFormat, boldText, devicePixelRatio, disableAnimations, invertColors, padding, size, textScaleFactor, viewInsets) {
      return new F.MediaQueryData(size, devicePixelRatio, textScaleFactor, viewInsets, padding, false, accessibleNavigation, invertColors, disableAnimations, boldText);
    },
    MediaQuery_of: function(context, nullOk) {
      var query = H.interceptedTypeCheck(context.inheritFromWidgetOfExactType$1(C.Type_MediaQuery_nDB), "$isMediaQuery");
      if (query != null)
        return query.data;
      if (nullOk)
        return;
      throw H.wrapException(U.FlutterError$("MediaQuery.of() called with a context that does not contain a MediaQuery.\nNo MediaQuery ancestor could be found starting from the context that was passed to MediaQuery.of(). This can happen because you do not have a WidgetsApp or MaterialApp widget (those widgets introduce a MediaQuery), or it can happen if the context you use comes from a widget above those widgets.\nThe context used was:\n  " + context.toString$0(0)));
    },
    MediaQueryData: function MediaQueryData(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9) {
      var _ = this;
      _.size = t0;
      _.devicePixelRatio = t1;
      _.textScaleFactor = t2;
      _.viewInsets = t3;
      _.padding = t4;
      _.alwaysUse24HourFormat = t5;
      _.accessibleNavigation = t6;
      _.invertColors = t7;
      _.disableAnimations = t8;
      _.boldText = t9;
    },
    MediaQuery: function MediaQuery(t0, t1, t2) {
      this.data = t0;
      this.child = t1;
      this.key = t2;
    },
    ScrollController: function ScrollController(t0, t1, t2, t3, t4) {
      var _ = this;
      _._initialScrollOffset = t0;
      _.keepScrollOffset = t1;
      _.debugLabel = t2;
      _._positions = t3;
      _._listeners = t4;
    },
    ScrollController_animateTo_closure: function ScrollController_animateTo_closure() {
    },
    TrackingScrollController: function TrackingScrollController(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _._positionToListener = t0;
      _._lastUpdatedOffset = _._lastUpdated = null;
      _._initialScrollOffset = t1;
      _.keepScrollOffset = t2;
      _.debugLabel = t3;
      _._positions = t4;
      _._listeners = t5;
    },
    TrackingScrollController_attach_closure: function TrackingScrollController_attach_closure(t0, t1) {
      this.$this = t0;
      this.position = t1;
    },
    Scrollable$: function(axisDirection, controller, dragStartBehavior, physics, semanticChildCount, viewportBuilder) {
      return new F.Scrollable0(axisDirection, controller, physics, viewportBuilder, semanticChildCount, dragStartBehavior, null);
    },
    Scrollable0: function Scrollable0(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _.axisDirection = t0;
      _.controller = t1;
      _.physics = t2;
      _.viewportBuilder = t3;
      _.semanticChildCount = t4;
      _.dragStartBehavior = t5;
      _.key = t6;
    },
    _ScrollableScope: function _ScrollableScope(t0, t1, t2) {
      this.position = t0;
      this.child = t1;
      this.key = t2;
    },
    ScrollableState: function ScrollableState(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _._physics = _._scrollable$_configuration = _._scrollable$_position = null;
      _._scrollSemanticsKey = t0;
      _._gestureDetectorKey = t1;
      _._ignorePointerKey = t2;
      _._gestureRecognizers = t3;
      _._shouldIgnorePointer = false;
      _._hold = _._drag = _._lastAxisDirection = _._lastCanDrag = null;
      _.TickerProviderStateMixin__tickers = t4;
      _._widget = null;
      _._debugLifecycleState = t5;
      _._element = null;
    },
    ScrollableState_setCanDrag_closure: function ScrollableState_setCanDrag_closure() {
    },
    ScrollableState_setCanDrag_closure0: function ScrollableState_setCanDrag_closure0(t0) {
      this.$this = t0;
    },
    ScrollableState_setCanDrag_closure1: function ScrollableState_setCanDrag_closure1() {
    },
    ScrollableState_setCanDrag_closure2: function ScrollableState_setCanDrag_closure2(t0) {
      this.$this = t0;
    },
    _ScrollSemantics: function _ScrollSemantics(t0, t1, t2, t3, t4) {
      var _ = this;
      _.position = t0;
      _.allowImplicitScrolling = t1;
      _.semanticChildCount = t2;
      _.child = t3;
      _.key = t4;
    },
    _RenderScrollSemantics: function _RenderScrollSemantics(t0, t1, t2, t3) {
      var _ = this;
      _._scrollable$_position = t0;
      _._allowImplicitScrolling = t1;
      _._semanticChildCount = t2;
      _._innerNode = null;
      _.RenderObjectWithChildMixin__child = t3;
      _._cachedBaselines = _._size = _._cachedIntrinsicDimensions = null;
      _._debugActivePointers = 0;
      _.debugCreator = _.parentData = null;
      _._debugDoingThisLayout = _._debugDoingThisResize = false;
      _._debugCanParentUseSize = null;
      _._debugMutationsLocked = false;
      _._needsLayout = true;
      _._relayoutBoundary = null;
      _._doingThisLayoutWithCallback = false;
      _._constraints = null;
      _._debugDoingThisPaint = false;
      _._layer = null;
      _._needsCompositingBitsUpdate = false;
      _._needsCompositing = null;
      _._needsPaint = true;
      _._cachedSemanticsConfiguration = null;
      _._needsSemanticsUpdate = true;
      _._semantics = null;
      _._node$_depth = 0;
      _._node$_parent = _._node$_owner = null;
    },
    _ScrollableState_State_TickerProviderStateMixin: function _ScrollableState_State_TickerProviderStateMixin() {
    },
    compute: function(callback, message, debugLabel, $Q, $R) {
      return F.compute$body(H.functionTypeCheck(callback, {func: 1, ret: $R, args: [$Q]}), H.assertSubtypeOfRuntimeType(message, $Q), debugLabel, $Q, $R, $R);
    },
    compute$body: function(callback, message, debugLabel, $Q, $R, $async$type) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter($async$type),
        $async$returnValue;
      var $async$compute = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$returnValue = callback.call$1(message);
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$compute, $async$completer);
    },
    main: function() {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(null),
        t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12;
      var $async$main = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 2;
              return P._asyncAwait(Q.webOnlyInitializePlatform(), $async$main);
            case 2:
              // returning from await.
              t1 = X.ThemeData_ThemeData(C.Brightness_0, null, null);
              t2 = F.home();
              if ($.WidgetsBinding__instance == null) {
                t3 = N.Element;
                t4 = P.HashSet_HashSet(t3);
                t3 = H.setRuntimeTypeInfo([], [t3]);
                t5 = new O.FocusScopeNode();
                t6 = new O.FocusManager(t5);
                t5._manager = t6;
                t5 = H.setRuntimeTypeInfo([], [N.WidgetsBindingObserver]);
                t7 = [N._TaskEntry,,];
                t8 = new Array(7);
                t8.fixed$length = Array;
                t8 = H.setRuntimeTypeInfo(t8, [t7]);
                t9 = P.int;
                t10 = P.HashSet_HashSet(t9);
                t11 = [{func: 1, ret: -1, args: [P.Duration]}];
                t12 = H.setRuntimeTypeInfo([], t11);
                t11 = H.setRuntimeTypeInfo([], t11);
                if ($.Stopwatch__frequency == null) {
                  H.Primitives_initTicker();
                  $.Stopwatch__frequency = $.Primitives_timerFrequency;
                }
                new N.WidgetsFlutterBinding(new N.BuildOwner(new N._InactiveElements(t4), t3, t6), t5, true, 0, false, null, null, null, null, null, null, 25, null, N.binding__defaultSchedulingStrategy$closure(), new Y.HeapPriorityQueue(N.binding_SchedulerBinding__taskSorter$closure(), t8, [t7]), false, 0, P.LinkedHashMap_LinkedHashMap$_empty(t9, N._FrameCallbackEntry), t10, t12, t11, null, false, C.SchedulerPhase_0, true, false, null, C.Duration_0, C.Duration_0, null, 0, new P.Stopwatch(), null, false, P.ListQueue$(F.PointerEvent), new O.PointerRouter(P.LinkedHashMap_LinkedHashMap$_empty(t9, [P.LinkedHashSet, {func: 1, ret: -1, args: [F.PointerEvent]}]), P.LinkedHashSet_LinkedHashSet({func: 1, ret: -1, args: [F.PointerEvent]})), new D.GestureArenaManager(P.LinkedHashMap_LinkedHashMap$_empty(t9, D._GestureArena)), new G.PointerSignalResolver(), P.LinkedHashMap_LinkedHashMap$_empty(t9, O.HitTestResult)).BindingBase$0();
              }
              t3 = $.WidgetsBinding__instance;
              t4 = t3.RendererBinding__pipelineOwner._rootNode;
              t5 = S.RenderBox;
              t3.WidgetsBinding__renderViewElement = new N.RenderObjectToWidgetAdapter(new S.MaterialApp(t2, t1, null), t4, "[root]", new N.GlobalObjectKey(t4, [[N.State, N.StatefulWidget]]), [t5]).attachToRenderTree$2(t3.WidgetsBinding__buildOwner, H.assertSubtype(t3.WidgetsBinding__renderViewElement, "$isRenderObjectToWidgetElement", [t5], "$asRenderObjectToWidgetElement"));
              t3.scheduleWarmUpFrame$0();
              // implicit return
              return P._asyncReturn(null, $async$completer);
          }
      });
      return P._asyncStartSync($async$main, $async$completer);
    }
  },
  X = {
    parseSvgPathData: function(svg) {
      var parser, t1, t2, path, normalizer, t3, t4, t5, target, t6, t7, t8, t9, t10, t11, t12, _null = null;
      if (svg == null)
        return;
      if (svg === "")
        return new Q.Path(H.setRuntimeTypeInfo([], [T.Subpath]), C.PathFillType_0);
      parser = new T.SvgPathStringSource();
      parser._previousCommand = C.SvgPathSegType_0;
      parser.set$_codePoints(new H.CodeUnits(svg));
      parser._idx = 0;
      parser._skipOptionalSvgSpaces$0();
      t1 = H.setRuntimeTypeInfo([], [T.Subpath]);
      t2 = new Q.Path(t1, C.PathFillType_0);
      path = new X.FlutterPathProxy(t2);
      normalizer = new T.SvgPathNormalizer(C._PathOffset_0_0, C._PathOffset_0_0, C._PathOffset_0_0, C.SvgPathSegType_0);
      for (t3 = parser.parseSegments$0(), t3 = new P._SyncStarIterator(t3._outerHelper(), [H.getTypeArgumentByIndex(t3, 0)]), t4 = [T.PathCommand]; t3.moveNext$0();) {
        t5 = t3.get$current(t3);
        switch (t5.command) {
          case C.SvgPathSegType_9:
            target = 1;
            break;
          case C.SvgPathSegType_7:
            target = 2;
            break;
          case C.SvgPathSegType_17:
            target = 3;
            break;
          case C.SvgPathSegType_3:
          case C.SvgPathSegType_5:
          case C.SvgPathSegType_13:
          case C.SvgPathSegType_15:
          case C.SvgPathSegType_19:
          case C.SvgPathSegType_11:
            target = 4;
            break;
          case C.SvgPathSegType_12:
            target = 5;
            break;
          case C.SvgPathSegType_14:
            target = 6;
            break;
          case C.SvgPathSegType_1:
            target = 7;
            break;
          default:
            target = 8;
            break;
        }
        c$0:
          for (; true;)
            switch (target) {
              case 1:
                t6 = t5.point1;
                t7 = normalizer._currentPoint;
                t8 = t6.dx;
                t9 = t7.dx;
                t6 = t6.dy;
                t7 = t7.dy;
                t5.point1 = new T._PathOffset(t8 + t9, t6 + t7);
                t6 = t5.targetPoint;
                t5.targetPoint = new T._PathOffset(t6.dx + t9, t6.dy + t7);
                break c$0;
              case 2:
                t6 = t5.point1;
                t7 = normalizer._currentPoint;
                t5.point1 = new T._PathOffset(t6.dx + t7.dx, t6.dy + t7.dy);
                target = 3;
                continue c$0;
              case 3:
                t6 = t5.point2;
                t7 = normalizer._currentPoint;
                t5.point2 = new T._PathOffset(t6.dx + t7.dx, t6.dy + t7.dy);
                target = 4;
                continue c$0;
              case 4:
                t6 = t5.targetPoint;
                t7 = normalizer._currentPoint;
                t5.targetPoint = new T._PathOffset(t6.dx + t7.dx, t6.dy + t7.dy);
                break c$0;
              case 5:
                t5.targetPoint = new T._PathOffset(t5.targetPoint.dx, normalizer._currentPoint.dy);
                break c$0;
              case 6:
                t5.targetPoint = new T._PathOffset(normalizer._currentPoint.dx, t5.targetPoint.dy);
                break c$0;
              case 7:
                t5.targetPoint = normalizer._subPathPoint;
                break c$0;
              case 8:
                break c$0;
            }
        switch (t5.command) {
          case C.SvgPathSegType_3:
          case C.SvgPathSegType_2:
            target = 1;
            break;
          case C.SvgPathSegType_5:
          case C.SvgPathSegType_4:
          case C.SvgPathSegType_13:
          case C.SvgPathSegType_12:
          case C.SvgPathSegType_15:
          case C.SvgPathSegType_14:
            target = 2;
            break;
          case C.SvgPathSegType_1:
            target = 3;
            break;
          case C.SvgPathSegType_17:
          case C.SvgPathSegType_16:
            target = 4;
            break;
          case C.SvgPathSegType_7:
          case C.SvgPathSegType_6:
            target = 5;
            break;
          case C.SvgPathSegType_19:
          case C.SvgPathSegType_18:
            target = 6;
            break;
          case C.SvgPathSegType_9:
          case C.SvgPathSegType_8:
            target = 7;
            break;
          case C.SvgPathSegType_11:
          case C.SvgPathSegType_10:
            target = 8;
            break;
          default:
            target = 9;
            break;
        }
        c$3:
          for (; true;)
            switch (target) {
              case 1:
                t6 = normalizer._subPathPoint = t5.targetPoint;
                t7 = t6.dx;
                t6 = t6.dy;
                C.JSArray_methods.add$1(t1, new T.Subpath(t7, t6, H.setRuntimeTypeInfo([], t4)));
                (t1.length === 0 ? _null : C.JSArray_methods.get$last(t1)).currentX = t7;
                (t1.length === 0 ? _null : C.JSArray_methods.get$last(t1)).currentY = t6;
                t8 = t1.length === 0 ? _null : C.JSArray_methods.get$last(t1);
                t8 = t8 == null ? _null : t8.commands;
                (t8 && C.JSArray_methods).add$1(t8, new T.MoveTo(t7, t6, 0));
                break c$3;
              case 2:
                t6 = t5.targetPoint;
                t7 = t6.dx;
                t6 = t6.dy;
                t8 = t1.length === 0 ? _null : C.JSArray_methods.get$last(t1);
                t8 = t8 == null ? _null : t8.commands;
                (t8 && C.JSArray_methods).add$1(t8, new T.LineTo(t7, t6, 1));
                (t1.length === 0 ? _null : C.JSArray_methods.get$last(t1)).currentX = t7;
                (t1.length === 0 ? _null : C.JSArray_methods.get$last(t1)).currentY = t6;
                break c$3;
              case 3:
                if (t1.length === 0)
                  C.JSArray_methods.add$1(t1, new T.Subpath(0, 0, H.setRuntimeTypeInfo([], t4)));
                t6 = t1.length === 0 ? _null : C.JSArray_methods.get$last(t1);
                t6 = t6 == null ? _null : t6.commands;
                (t6 && C.JSArray_methods).add$1(t6, new T.CloseCommand(3));
                t6 = (t1.length === 0 ? _null : C.JSArray_methods.get$last(t1)).startX;
                t7 = (t1.length === 0 ? _null : C.JSArray_methods.get$last(t1)).startY;
                (t1.length === 0 ? _null : C.JSArray_methods.get$last(t1)).currentX = t6;
                (t1.length === 0 ? _null : C.JSArray_methods.get$last(t1)).currentY = t7;
                break c$3;
              case 4:
                t6 = normalizer._lastCommand;
                t6 = t6 === C.SvgPathSegType_6 || t6 === C.SvgPathSegType_7 || t6 === C.SvgPathSegType_16 || t6 === C.SvgPathSegType_17;
                t7 = normalizer._currentPoint;
                if (!t6)
                  t5.point1 = t7;
                else {
                  t6 = normalizer._controlPoint;
                  t5.point1 = new T._PathOffset(2 * t7.dx - t6.dx, 2 * t7.dy - t6.dy);
                }
                target = 5;
                continue c$3;
              case 5:
                t6 = normalizer._controlPoint = t5.point2;
                t7 = t5.point1;
                t8 = t7.dx;
                t7 = t7.dy;
                t9 = t6.dx;
                t6 = t6.dy;
                t10 = t5.targetPoint;
                t11 = t10.dx;
                t10 = t10.dy;
                if (t1.length === 0)
                  C.JSArray_methods.add$1(t1, new T.Subpath(0, 0, H.setRuntimeTypeInfo([], t4)));
                t12 = t1.length === 0 ? _null : C.JSArray_methods.get$last(t1);
                t12 = t12 == null ? _null : t12.commands;
                (t12 && C.JSArray_methods).add$1(t12, new T.BezierCurveTo(t8, t7, t9, t6, t11, t10, 5));
                (t1.length === 0 ? _null : C.JSArray_methods.get$last(t1)).currentX = t11;
                (t1.length === 0 ? _null : C.JSArray_methods.get$last(t1)).currentY = t10;
                break c$3;
              case 6:
                t6 = normalizer._lastCommand;
                t6 = t6 === C.SvgPathSegType_8 || t6 === C.SvgPathSegType_9 || t6 === C.SvgPathSegType_18 || t6 === C.SvgPathSegType_19;
                t7 = normalizer._currentPoint;
                if (!t6)
                  t5.point1 = t7;
                else {
                  t6 = normalizer._controlPoint;
                  t5.point1 = new T._PathOffset(2 * t7.dx - t6.dx, 2 * t7.dy - t6.dy);
                }
                target = 7;
                continue c$3;
              case 7:
                t6 = normalizer._controlPoint = t5.point1;
                t7 = normalizer._currentPoint;
                t8 = t7.dx;
                t9 = 2 * t6.dx;
                t8 = (t8 + t9) * 0.3333333333333333;
                t7 = t7.dy;
                t6 = 2 * t6.dy;
                t7 = (t7 + t6) * 0.3333333333333333;
                t5.point1 = new T._PathOffset(t8, t7);
                t10 = t5.targetPoint;
                t11 = t10.dx;
                t9 = (t11 + t9) * 0.3333333333333333;
                t10 = t10.dy;
                t6 = (t10 + t6) * 0.3333333333333333;
                t5.point2 = new T._PathOffset(t9, t6);
                if (t1.length === 0)
                  C.JSArray_methods.add$1(t1, new T.Subpath(0, 0, H.setRuntimeTypeInfo([], t4)));
                t12 = t1.length === 0 ? _null : C.JSArray_methods.get$last(t1);
                t12 = t12 == null ? _null : t12.commands;
                (t12 && C.JSArray_methods).add$1(t12, new T.BezierCurveTo(t8, t7, t9, t6, t11, t10, 5));
                (t1.length === 0 ? _null : C.JSArray_methods.get$last(t1)).currentX = t11;
                (t1.length === 0 ? _null : C.JSArray_methods.get$last(t1)).currentY = t10;
                break c$3;
              case 8:
                if (!normalizer._decomposeArcToCubic$3(normalizer._currentPoint, t5, path)) {
                  t6 = t5.targetPoint;
                  t7 = t6.dx;
                  t6 = t6.dy;
                  t8 = t1.length === 0 ? _null : C.JSArray_methods.get$last(t1);
                  t8 = t8 == null ? _null : t8.commands;
                  (t8 && C.JSArray_methods).add$1(t8, new T.LineTo(t7, t6, 1));
                  (t1.length === 0 ? _null : C.JSArray_methods.get$last(t1)).currentX = t7;
                  (t1.length === 0 ? _null : C.JSArray_methods.get$last(t1)).currentY = t6;
                }
                break c$3;
              case 9:
                H.throwExpression(P.StateError$("Invalid command type in path"));
                break c$3;
            }
        t6 = t5.targetPoint;
        normalizer._currentPoint = t6;
        t5 = t5.command;
        if (!(t5 === C.SvgPathSegType_6 || t5 === C.SvgPathSegType_7 || t5 === C.SvgPathSegType_16 || t5 === C.SvgPathSegType_17))
          t7 = !(t5 === C.SvgPathSegType_8 || t5 === C.SvgPathSegType_9 || t5 === C.SvgPathSegType_18 || t5 === C.SvgPathSegType_19);
        else
          t7 = false;
        if (t7)
          normalizer._controlPoint = t6;
        normalizer._lastCommand = t5;
      }
      return t2;
    },
    FlutterPathProxy: function FlutterPathProxy(t0) {
      this.path = t0;
    },
    AnimationStatus: function AnimationStatus(t0) {
      this._animation$_name = t0;
    },
    Animation: function Animation() {
    },
    ThemeData_ThemeData: function(brightness, platform, textTheme) {
      var toggleableActiveColor, accentColor, accentColorBrightness, accentIsDark, canvasColor, bottomAppBarColor, cardColor, dividerColor, primaryIsDark0, secondary, t1, t2, t3, t4, t5, t6, t7, t8, t9, colorScheme, selectedRowColor, unselectedWidgetColor, secondaryHeaderColor, textSelectionColor, textSelectionHandleColor, backgroundColor, dialogBackgroundColor, indicatorColor, hintColor, errorColor, primaryIconTheme, accentIconTheme, iconTheme, typography, primaryTextTheme, accentTextTheme, buttonColor, buttonTheme, disabledColor, highlightColor, splashColor, sliderTheme, chipTheme, _null = null,
        isDark = brightness === C.Brightness_0,
        primaryColor = isDark ? C.Map_HFpTk.$index(0, 900) : C.MaterialColor_Map_JNwaj_4280391411,
        primaryColorBrightness = X.ThemeData_estimateBrightnessForColor(primaryColor),
        primaryColorLight = isDark ? C.Map_HFpTk.$index(0, 500) : C.Map_JNwaj.$index(0, 100),
        primaryColorDark = isDark ? C.Color_4278190080 : C.Map_JNwaj.$index(0, 700),
        primaryIsDark = primaryColorBrightness === C.Brightness_0;
      if (isDark)
        toggleableActiveColor = C.Map_iTYZn.$index(0, 200);
      else
        toggleableActiveColor = C.Map_JNwaj.$index(0, 600);
      accentColor = isDark ? C.Map_iTYZn.$index(0, 200) : C.Map_JNwaj.$index(0, 500);
      accentColorBrightness = X.ThemeData_estimateBrightnessForColor(accentColor);
      accentIsDark = accentColorBrightness === C.Brightness_0;
      canvasColor = isDark ? C.Map_HFpTk.$index(0, 850) : C.Map_HFpTk.$index(0, 50);
      bottomAppBarColor = isDark ? C.Map_HFpTk.$index(0, 800) : C.Color_4294967295;
      cardColor = isDark ? C.Map_HFpTk.$index(0, 800) : C.Color_4294967295;
      dividerColor = isDark ? C.Color_536870911 : C.Color_520093696;
      primaryIsDark0 = X.ThemeData_estimateBrightnessForColor(C.MaterialColor_Map_JNwaj_4280391411) === C.Brightness_0;
      if (accentColor == null)
        secondary = isDark ? C.Map_iTYZn.$index(0, 200) : C.MaterialColor_Map_JNwaj_4280391411;
      else
        secondary = accentColor;
      t1 = X.ThemeData_estimateBrightnessForColor(secondary);
      if (primaryColorDark == null)
        t2 = isDark ? C.Color_4278190080 : C.Map_JNwaj.$index(0, 700);
      else
        t2 = primaryColorDark;
      t3 = isDark ? C.Map_iTYZn.$index(0, 700) : C.Map_JNwaj.$index(0, 700);
      if (cardColor == null)
        t4 = isDark ? C.Map_HFpTk.$index(0, 800) : C.Color_4294967295;
      else
        t4 = cardColor;
      t5 = isDark ? C.Map_HFpTk.$index(0, 700) : C.Map_JNwaj.$index(0, 200);
      t6 = C.Map_JNc9P.$index(0, 700);
      t7 = primaryIsDark0 ? C.Color_4294967295 : C.Color_4278190080;
      t1 = t1 === C.Brightness_0 ? C.Color_4294967295 : C.Color_4278190080;
      t8 = isDark ? C.Color_4294967295 : C.Color_4278190080;
      t9 = primaryIsDark0 ? C.Color_4294967295 : C.Color_4278190080;
      colorScheme = A.ColorScheme$(t5, brightness, t6, t9, isDark ? C.Color_4278190080 : C.Color_4294967295, t7, t1, t8, C.MaterialColor_Map_JNwaj_4280391411, t2, secondary, t3, t4);
      selectedRowColor = C.Map_HFpTk.$index(0, 100);
      unselectedWidgetColor = isDark ? C.Color_3019898879 : C.Color_2315255808;
      secondaryHeaderColor = isDark ? C.Map_HFpTk.$index(0, 700) : C.Map_JNwaj.$index(0, 50);
      textSelectionColor = isDark ? accentColor : C.Map_JNwaj.$index(0, 200);
      textSelectionHandleColor = isDark ? C.Map_iTYZn.$index(0, 400) : C.Map_JNwaj.$index(0, 300);
      backgroundColor = isDark ? C.Map_HFpTk.$index(0, 700) : C.Map_JNwaj.$index(0, 200);
      dialogBackgroundColor = isDark ? C.Map_HFpTk.$index(0, 800) : C.Color_4294967295;
      indicatorColor = J.$eq$(accentColor, primaryColor) ? C.Color_4294967295 : accentColor;
      hintColor = isDark ? C.Color_2164260863 : C.Color_2315255808;
      errorColor = C.Map_JNc9P.$index(0, 700);
      primaryIconTheme = primaryIsDark ? C.IconThemeData_Color_4294967295_null_null : C.IconThemeData_Color_4278190080_null_null;
      accentIconTheme = accentIsDark ? C.IconThemeData_Color_4294967295_null_null : C.IconThemeData_Color_4278190080_null_null;
      iconTheme = isDark ? C.IconThemeData_Color_4294967295_null_null : C.IconThemeData_Color_3707764736_null_null;
      if (platform == null)
        platform = T.defaultTargetPlatform();
      typography = U.Typography_Typography(_null, _null, _null, platform, _null, _null);
      textTheme = (isDark ? typography.white : typography.black).merge$1(textTheme);
      primaryTextTheme = (primaryIsDark ? typography.white : typography.black).merge$1(_null);
      accentTextTheme = (accentIsDark ? typography.white : typography.black).merge$1(_null);
      buttonColor = isDark ? C.Map_JNwaj.$index(0, 600) : C.Map_HFpTk.$index(0, 300);
      buttonTheme = M.ButtonThemeData$(false, buttonColor, colorScheme, _null, 36, _null, C.ButtonBarLayoutBehavior_1, C.MaterialTapTargetSize_0, 88, _null, _null, _null, C.ButtonTextTheme_0);
      disabledColor = isDark ? C.Color_1308622847 : C.Color_1627389952;
      highlightColor = isDark ? C.Color_1087163596 : C.Color_1723645116;
      splashColor = isDark ? C.Color_1087163596 : C.Color_1724434632;
      sliderTheme = Q.SliderThemeData_SliderThemeData$fromPrimaryColors(primaryColor, primaryColorDark, primaryColorLight, accentTextTheme.body2);
      chipTheme = K.ChipThemeData_ChipThemeData$fromDefaults(brightness, textTheme.body2, primaryColor);
      return X.ThemeData$raw(accentColor, accentColorBrightness, accentIconTheme, accentTextTheme, C.AppBarTheme_7mv, backgroundColor, bottomAppBarColor, C.BottomAppBarTheme_null_null_null, brightness, buttonColor, buttonTheme, canvasColor, cardColor, C.CardTheme_eHw, chipTheme, colorScheme, _null, C.Color_4282549748, dialogBackgroundColor, C.DialogTheme_maI, disabledColor, dividerColor, errorColor, highlightColor, hintColor, iconTheme, indicatorColor, C.C_InputDecorationTheme, C.MaterialTapTargetSize_0, C.C_PageTransitionsTheme, platform, primaryColor, primaryColorBrightness, primaryColorDark, primaryColorLight, primaryIconTheme, primaryTextTheme, canvasColor, secondaryHeaderColor, selectedRowColor, sliderTheme, splashColor, C.C__InkSplashFactory, C.TabBarTheme_IDd, textSelectionColor, textSelectionHandleColor, textTheme, toggleableActiveColor, typography, unselectedWidgetColor);
    },
    ThemeData$raw: function(accentColor, accentColorBrightness, accentIconTheme, accentTextTheme, appBarTheme, backgroundColor, bottomAppBarColor, bottomAppBarTheme, brightness, buttonColor, buttonTheme, canvasColor, cardColor, cardTheme, chipTheme, colorScheme, cupertinoOverrideTheme, cursorColor, dialogBackgroundColor, dialogTheme, disabledColor, dividerColor, errorColor, highlightColor, hintColor, iconTheme, indicatorColor, inputDecorationTheme, materialTapTargetSize, pageTransitionsTheme, platform, primaryColor, primaryColorBrightness, primaryColorDark, primaryColorLight, primaryIconTheme, primaryTextTheme, scaffoldBackgroundColor, secondaryHeaderColor, selectedRowColor, sliderTheme, splashColor, splashFactory, tabBarTheme, textSelectionColor, textSelectionHandleColor, textTheme, toggleableActiveColor, typography, unselectedWidgetColor) {
      return new X.ThemeData(brightness, primaryColor, primaryColorBrightness, primaryColorLight, primaryColorDark, canvasColor, accentColor, accentColorBrightness, scaffoldBackgroundColor, bottomAppBarColor, cardColor, dividerColor, highlightColor, splashColor, splashFactory, selectedRowColor, unselectedWidgetColor, disabledColor, buttonTheme, buttonColor, secondaryHeaderColor, textSelectionColor, cursorColor, textSelectionHandleColor, backgroundColor, dialogBackgroundColor, indicatorColor, hintColor, errorColor, toggleableActiveColor, textTheme, primaryTextTheme, accentTextTheme, inputDecorationTheme, iconTheme, primaryIconTheme, accentIconTheme, sliderTheme, tabBarTheme, cardTheme, chipTheme, platform, materialTapTargetSize, pageTransitionsTheme, appBarTheme, bottomAppBarTheme, colorScheme, dialogTheme, typography, cupertinoOverrideTheme);
    },
    ThemeData_ThemeData$fallback: function() {
      return X.ThemeData_ThemeData(C.Brightness_1, null, null);
    },
    ThemeData_localize: function(baseTheme, localTextGeometry) {
      return $.$get$ThemeData__localizedThemeDataCache().putIfAbsent$2(0, new X._IdentityThemeDataCacheKey(baseTheme, localTextGeometry), new X.ThemeData_localize_closure(baseTheme, localTextGeometry));
    },
    ThemeData_estimateBrightnessForColor: function(color) {
      var t1 = color._value;
      t1 = 0.2126 * Q.Color__linearizeColorComponent(((16711680 & t1) >>> 16) / 255) + 0.7152 * Q.Color__linearizeColorComponent(((65280 & t1) >>> 8) / 255) + 0.0722 * Q.Color__linearizeColorComponent(((255 & t1) >>> 0) / 255) + 0.05;
      if (t1 * t1 > 0.15)
        return C.Brightness_1;
      return C.Brightness_0;
    },
    MaterialTapTargetSize: function MaterialTapTargetSize(t0) {
      this._theme_data$_name = t0;
    },
    ThemeData: function ThemeData(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t30, t31, t32, t33, t34, t35, t36, t37, t38, t39, t40, t41, t42, t43, t44, t45, t46, t47, t48, t49) {
      var _ = this;
      _.brightness = t0;
      _.primaryColor = t1;
      _.primaryColorBrightness = t2;
      _.primaryColorLight = t3;
      _.primaryColorDark = t4;
      _.canvasColor = t5;
      _.accentColor = t6;
      _.accentColorBrightness = t7;
      _.scaffoldBackgroundColor = t8;
      _.bottomAppBarColor = t9;
      _.cardColor = t10;
      _.dividerColor = t11;
      _.highlightColor = t12;
      _.splashColor = t13;
      _.splashFactory = t14;
      _.selectedRowColor = t15;
      _.unselectedWidgetColor = t16;
      _.disabledColor = t17;
      _.buttonTheme = t18;
      _.buttonColor = t19;
      _.secondaryHeaderColor = t20;
      _.textSelectionColor = t21;
      _.cursorColor = t22;
      _.textSelectionHandleColor = t23;
      _.backgroundColor = t24;
      _.dialogBackgroundColor = t25;
      _.indicatorColor = t26;
      _.hintColor = t27;
      _.errorColor = t28;
      _.toggleableActiveColor = t29;
      _.textTheme = t30;
      _.primaryTextTheme = t31;
      _.accentTextTheme = t32;
      _.inputDecorationTheme = t33;
      _.iconTheme = t34;
      _.primaryIconTheme = t35;
      _.accentIconTheme = t36;
      _.sliderTheme = t37;
      _.tabBarTheme = t38;
      _.cardTheme = t39;
      _.chipTheme = t40;
      _.platform = t41;
      _.materialTapTargetSize = t42;
      _.pageTransitionsTheme = t43;
      _.appBarTheme = t44;
      _.bottomAppBarTheme = t45;
      _.colorScheme = t46;
      _.dialogTheme = t47;
      _.typography = t48;
      _.cupertinoOverrideTheme = t49;
    },
    ThemeData_localize_closure: function ThemeData_localize_closure(t0, t1) {
      this.baseTheme = t0;
      this.localTextGeometry = t1;
    },
    MaterialBasedCupertinoThemeData: function MaterialBasedCupertinoThemeData(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _._materialTheme = t0;
      _._brightness = t1;
      _._primaryColor = t2;
      _._primaryContrastingColor = t3;
      _._textTheme = t4;
      _._barBackgroundColor = t5;
      _._scaffoldBackgroundColor = t6;
    },
    _IdentityThemeDataCacheKey: function _IdentityThemeDataCacheKey(t0, t1) {
      this.baseTheme = t0;
      this.localTextGeometry = t1;
    },
    _FifoCache: function _FifoCache(t0, t1, t2) {
      this._cache = t0;
      this._maximumSize = t1;
      this.$ti = t2;
    },
    CircleBorder: function CircleBorder(t0) {
      this.side = t0;
    },
    RoundedRectangleBorder: function RoundedRectangleBorder(t0, t1) {
      this.side = t0;
      this.borderRadius = t1;
    },
    _RoundedRectangleToCircleBorder: function _RoundedRectangleToCircleBorder(t0, t1, t2) {
      this.side = t0;
      this.borderRadius = t1;
      this.circleness = t2;
    },
    RenderSliverFixedExtentBoxAdaptor: function RenderSliverFixedExtentBoxAdaptor() {
    },
    SystemChrome_setApplicationSwitcherDescription: function(description) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(-1);
      var $async$SystemChrome_setApplicationSwitcherDescription = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 2;
              return P._asyncAwait(C.OptionalMethodChannel_cWd.invokeMethod$1$2("SystemChrome.setApplicationSwitcherDescription", P.LinkedHashMap_LinkedHashMap$_literal(["label", description.label, "primaryColor", description.primaryColor], P.String, null), -1), $async$SystemChrome_setApplicationSwitcherDescription);
            case 2:
              // returning from await.
              // implicit return
              return P._asyncReturn(null, $async$completer);
          }
      });
      return P._asyncStartSync($async$SystemChrome_setApplicationSwitcherDescription, $async$completer);
    },
    ApplicationSwitcherDescription: function ApplicationSwitcherDescription(t0, t1) {
      this.label = t0;
      this.primaryColor = t1;
    },
    SystemUiOverlayStyle: function SystemUiOverlayStyle() {
    },
    TextSelection$: function(baseOffset, extentOffset) {
      var t1, t2;
      if (typeof baseOffset !== "number")
        return baseOffset.$lt();
      if (typeof extentOffset !== "number")
        return H.iae(extentOffset);
      t1 = baseOffset < extentOffset;
      if (t1)
        t2 = extentOffset;
      else
        t2 = baseOffset;
      if (t1)
        t1 = baseOffset;
      else
        t1 = extentOffset;
      return new X.TextSelection(baseOffset, extentOffset, t1, t2);
    },
    TextRange: function TextRange() {
    },
    TextSelection: function TextSelection(t0, t1, t2, t3) {
      var _ = this;
      _.baseOffset = t0;
      _.extentOffset = t1;
      _.start = t2;
      _.end = t3;
    },
    IconData: function IconData(t0, t1, t2) {
      this.codePoint = t0;
      this.fontFamily = t1;
      this.matchTextDirection = t2;
    },
    ModalBarrier$: function(barrierSemanticsDismissible, color, dismissible, semanticsLabel) {
      return new X.ModalBarrier(color, false, true, semanticsLabel, null);
    },
    ModalBarrier: function ModalBarrier(t0, t1, t2, t3, t4) {
      var _ = this;
      _.color = t0;
      _.dismissible = t1;
      _.barrierSemanticsDismissible = t2;
      _.semanticsLabel = t3;
      _.key = t4;
    },
    ModalBarrier_build_closure: function ModalBarrier_build_closure(t0, t1) {
      this.$this = t0;
      this.context = t1;
    },
    OverlayEntry$: function(builder, maintainState) {
      return new X.OverlayEntry(builder, maintainState, new N.LabeledGlobalKey(null, [X._OverlayEntryState]));
    },
    OverlayEntry: function OverlayEntry(t0, t1, t2) {
      var _ = this;
      _.builder = t0;
      _._opaque = false;
      _._maintainState = t1;
      _._overlay = null;
      _._key = t2;
    },
    OverlayEntry_remove_closure: function OverlayEntry_remove_closure(t0, t1) {
      this.$this = t0;
      this.overlay = t1;
    },
    _OverlayEntry: function _OverlayEntry(t0, t1) {
      this.entry = t0;
      this.key = t1;
    },
    _OverlayEntryState: function _OverlayEntryState(t0) {
      this._widget = null;
      this._debugLifecycleState = t0;
      this._element = null;
    },
    _OverlayEntryState__markNeedsBuild_closure: function _OverlayEntryState__markNeedsBuild_closure() {
    },
    Overlay: function Overlay(t0, t1) {
      this.initialEntries = t0;
      this.key = t1;
    },
    OverlayState: function OverlayState(t0, t1, t2) {
      var _ = this;
      _._entries = t0;
      _.TickerProviderStateMixin__tickers = t1;
      _._widget = null;
      _._debugLifecycleState = t2;
      _._element = null;
    },
    OverlayState_insert_closure: function OverlayState_insert_closure(t0, t1, t2) {
      this.$this = t0;
      this.above = t1;
      this.entry = t2;
    },
    OverlayState_insertAll_closure: function OverlayState_insertAll_closure(t0, t1, t2) {
      this.$this = t0;
      this.above = t1;
      this.entries = t2;
    },
    OverlayState__remove_closure: function OverlayState__remove_closure() {
    },
    OverlayState__didChangeEntryOpacity_closure: function OverlayState__didChangeEntryOpacity_closure() {
    },
    _Theatre: function _Theatre(t0, t1, t2) {
      this.onstage = t0;
      this.offstage = t1;
      this.key = t2;
    },
    _TheatreElement: function _TheatreElement(t0, t1, t2, t3) {
      var _ = this;
      _._offstage = _._onstage = null;
      _._forgottenOffstageChildren = t0;
      _._framework$_parent = _._ancestorRenderObjectElement = _._renderObject = null;
      _._cachedHash = t1;
      _._depth = _._slot = null;
      _._widget = t2;
      _._owner = null;
      _._active = false;
      _._debugLifecycleState = t3;
      _._dependencies = _._inheritedWidgets = null;
      _._hadUnsatisfiedDependencies = false;
      _._dirty = true;
      _._debugAllowIgnoredCallsToMarkNeedsBuild = _._debugBuiltOnce = _._inDirtyList = false;
    },
    _RenderTheatre: function _RenderTheatre(t0, t1, t2, t3) {
      var _ = this;
      _.ContainerRenderObjectMixin__childCount = t0;
      _.ContainerRenderObjectMixin__firstChild = t1;
      _.ContainerRenderObjectMixin__lastChild = t2;
      _.RenderObjectWithChildMixin__child = t3;
      _._cachedBaselines = _._size = _._cachedIntrinsicDimensions = null;
      _._debugActivePointers = 0;
      _.debugCreator = _.parentData = null;
      _._debugDoingThisLayout = _._debugDoingThisResize = false;
      _._debugCanParentUseSize = null;
      _._debugMutationsLocked = false;
      _._needsLayout = true;
      _._relayoutBoundary = null;
      _._doingThisLayoutWithCallback = false;
      _._constraints = null;
      _._debugDoingThisPaint = false;
      _._layer = null;
      _._needsCompositingBitsUpdate = false;
      _._needsCompositing = null;
      _._needsPaint = true;
      _._cachedSemanticsConfiguration = null;
      _._needsSemanticsUpdate = true;
      _._semantics = null;
      _._node$_depth = 0;
      _._node$_parent = _._node$_owner = null;
    },
    _OverlayState_State_TickerProviderStateMixin: function _OverlayState_State_TickerProviderStateMixin() {
    },
    __RenderTheatre_RenderBox_RenderObjectWithChildMixin: function __RenderTheatre_RenderBox_RenderObjectWithChildMixin() {
    },
    __RenderTheatre_RenderBox_RenderObjectWithChildMixin_RenderProxyBoxMixin: function __RenderTheatre_RenderBox_RenderObjectWithChildMixin_RenderProxyBoxMixin() {
    },
    __RenderTheatre_RenderBox_RenderObjectWithChildMixin_RenderProxyBoxMixin_ContainerRenderObjectMixin: function __RenderTheatre_RenderBox_RenderObjectWithChildMixin_RenderProxyBoxMixin_ContainerRenderObjectMixin() {
    }
  },
  G = {
    AnimationController$: function(animationBehavior, debugLabel, duration, lowerBound, upperBound, value, vsync) {
      var t1 = {func: 1, ret: -1, args: [X.AnimationStatus]},
        t2 = {func: 1, ret: -1};
      t2 = new G.AnimationController(lowerBound, upperBound, debugLabel, animationBehavior, duration, C._AnimationDirection_0, C.AnimationStatus_0, new R.ObserverList(H.setRuntimeTypeInfo([], [t1]), [t1]), new R.ObserverList(H.setRuntimeTypeInfo([], [t2]), [t2]));
      t2._ticker = vsync.createTicker$1(t2.get$_animation_controller$_tick());
      t2._internalSetValue$1(value == null ? lowerBound : value);
      return t2;
    },
    AnimationController$unbounded: function(debugLabel, value, vsync) {
      var t1 = {func: 1, ret: -1, args: [X.AnimationStatus]},
        t2 = {func: 1, ret: -1};
      t2 = new G.AnimationController(-1 / 0, 1 / 0, debugLabel, C.AnimationBehavior_1, null, C._AnimationDirection_0, C.AnimationStatus_0, new R.ObserverList(H.setRuntimeTypeInfo([], [t1]), [t1]), new R.ObserverList(H.setRuntimeTypeInfo([], [t2]), [t2]));
      t2._ticker = vsync.createTicker$1(t2.get$_animation_controller$_tick());
      t2._internalSetValue$1(value);
      return t2;
    },
    _AnimationDirection: function _AnimationDirection(t0) {
      this._animation_controller$_name = t0;
    },
    AnimationBehavior: function AnimationBehavior(t0) {
      this._animation_controller$_name = t0;
    },
    AnimationController: function AnimationController(t0, t1, t2, t3, t4, t5, t6, t7, t8) {
      var _ = this;
      _.lowerBound = t0;
      _.upperBound = t1;
      _.debugLabel = t2;
      _.animationBehavior = t3;
      _.duration = t4;
      _._lastElapsedDuration = _._animation_controller$_value = _._simulation = _._ticker = null;
      _._direction = t5;
      _._status = null;
      _._lastReportedStatus = t6;
      _.AnimationLocalStatusListenersMixin__statusListeners = t7;
      _.AnimationLocalListenersMixin__listeners = t8;
    },
    _InterpolationSimulation: function _InterpolationSimulation(t0, t1, t2, t3, t4) {
      var _ = this;
      _._durationInSeconds = t0;
      _._begin = t1;
      _._animation_controller$_end = t2;
      _._curve = t3;
      _.tolerance = t4;
    },
    _RepeatingSimulation: function _RepeatingSimulation(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.min = t0;
      _.max = t1;
      _.reverse = t2;
      _._periodInSeconds = t3;
      _._initialT = t4;
      _.tolerance = t5;
    },
    _AnimationController_Animation_AnimationEagerListenerMixin: function _AnimationController_Animation_AnimationEagerListenerMixin() {
    },
    _AnimationController_Animation_AnimationEagerListenerMixin_AnimationLocalListenersMixin: function _AnimationController_Animation_AnimationEagerListenerMixin_AnimationLocalListenersMixin() {
    },
    _AnimationController_Animation_AnimationEagerListenerMixin_AnimationLocalListenersMixin_AnimationLocalStatusListenersMixin: function _AnimationController_Animation_AnimationEagerListenerMixin_AnimationLocalListenersMixin_AnimationLocalStatusListenersMixin() {
    },
    WriteBuffer$: function() {
      var t1 = new G.WriteBuffer(),
        t2 = new Uint8Array(0);
      t1._serialization$_buffer = new N.Uint8Buffer(t2, t2.length);
      t2 = new DataView(new ArrayBuffer(8));
      t1._eightBytes = t2;
      t2 = t2.buffer;
      t2.toString;
      t1._eightBytesAsList = H.NativeUint8List_NativeUint8List$view(t2, 0, null);
      return t1;
    },
    WriteBuffer: function WriteBuffer() {
      this._eightBytesAsList = this._eightBytes = this._serialization$_buffer = null;
    },
    ReadBuffer: function ReadBuffer(t0) {
      this.data = t0;
      this._serialization$_position = 0;
    },
    _synthesiseDownButtons: function(buttons, kind) {
      switch (kind) {
        case C.PointerDeviceKind_0:
        case C.PointerDeviceKind_2:
        case C.PointerDeviceKind_3:
          if (typeof buttons !== "number")
            return buttons.$or();
          return (buttons | 1) >>> 0;
        default:
          return buttons;
      }
    },
    PointerEventConverter__ensureStateForPointer: function(datum, position) {
      return $.PointerEventConverter__pointers.putIfAbsent$2(0, datum.device, new G.PointerEventConverter__ensureStateForPointer_closure(position));
    },
    PointerEventConverter_expand: function(data, devicePixelRatio) {
      return G.PointerEventConverter_expand$body(H.assertSubtype(data, "$isIterable", [Q.PointerData], "$asIterable"), devicePixelRatio);
    },
    PointerEventConverter_expand$body: function($async$data, $async$devicePixelRatio) {
      return P._makeSyncStarIterable(function() {
        var data = $async$data,
          devicePixelRatio = $async$devicePixelRatio;
        var $async$goto = 0, $async$handler = 2, $async$currentError, t1, radiusMax, _i, datum, t2, t3, position, timeStamp, kind, t4, alreadyAdded, state, t5, t6, t7, t8, t9, t10, t11, t12;
        return function $async$PointerEventConverter_expand($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                t1 = data.length, radiusMax = 0 / devicePixelRatio, _i = 0;
              case 3:
                // for condition
                if (!(_i < data.length)) {
                  // goto after for
                  $async$goto = 5;
                  break;
                }
                datum = data[_i];
                t2 = datum.physicalX;
                t3 = datum.physicalY;
                if (typeof t2 !== "number") {
                  t2.$div();
                  // goto return
                  $async$goto = 1;
                  break;
                }
                t2 /= devicePixelRatio;
                if (typeof t3 !== "number") {
                  t3.$div();
                  // goto return
                  $async$goto = 1;
                  break;
                }
                t3 /= devicePixelRatio;
                position = new Q.Offset(t2, t3);
                timeStamp = datum.timeStamp;
                kind = datum.kind;
                t4 = datum.signalKind;
                $async$goto = t4 == null || t4 === C.PointerSignalKind_0 ? 6 : 8;
                break;
              case 6:
                // then
                t4 = datum.change;
              case 9:
                // switch
                switch (t4) {
                  case C.PointerChange_1:
                    // goto case
                    $async$goto = 11;
                    break;
                  case C.PointerChange_3:
                    // goto case
                    $async$goto = 12;
                    break;
                  case C.PointerChange_4:
                    // goto case
                    $async$goto = 13;
                    break;
                  case C.PointerChange_5:
                    // goto case
                    $async$goto = 14;
                    break;
                  case C.PointerChange_6:
                    // goto case
                    $async$goto = 15;
                    break;
                  case C.PointerChange_0:
                    // goto case
                    $async$goto = 16;
                    break;
                  case C.PointerChange_2:
                    // goto case
                    $async$goto = 17;
                    break;
                  default:
                    // goto after switch
                    $async$goto = 10;
                    break;
                }
                break;
              case 11:
                // case
                G.PointerEventConverter__ensureStateForPointer(datum, position);
                $async$goto = 18;
                return new F.PointerAddedEvent(timeStamp, 0, kind, datum.device, position, C.Offset_0_0, 0, false, false, 0, datum.pressureMin, datum.pressureMax, 0, 0, 0, 0, 0, radiusMax, radiusMax, 0, datum.tilt, 0, false);
              case 18:
                // after yield
                // goto after switch
                $async$goto = 10;
                break;
              case 12:
                // case
                t4 = datum.device;
                alreadyAdded = $.PointerEventConverter__pointers.containsKey$1(0, t4);
                state = G.PointerEventConverter__ensureStateForPointer(datum, position);
                $async$goto = !alreadyAdded ? 19 : 20;
                break;
              case 19:
                // then
                $async$goto = 21;
                return new F.PointerAddedEvent(timeStamp, 0, kind, t4, position, C.Offset_0_0, 0, false, false, 0, datum.pressureMin, datum.pressureMax, 0, 0, 0, 0, 0, radiusMax, radiusMax, 0, datum.tilt, 0, false);
              case 21:
                // after yield
              case 20:
                // join
                t5 = state.lastPosition;
                t6 = t5._dx;
                if (typeof t6 !== "number") {
                  H.iae(t6);
                  // goto return
                  $async$goto = 1;
                  break;
                }
                t5 = t5._dy;
                if (typeof t5 !== "number") {
                  H.iae(t5);
                  // goto return
                  $async$goto = 1;
                  break;
                }
                $async$goto = 22;
                return new F.PointerHoverEvent(timeStamp, 0, kind, t4, position, new Q.Offset(t2 - t6, t3 - t5), datum.buttons, false, false, 0, datum.pressureMin, datum.pressureMax, 0, 0, 0, radiusMax, radiusMax, radiusMax, radiusMax, 0, datum.tilt, 0, false);
              case 22:
                // after yield
                state.lastPosition = position;
                // goto after switch
                $async$goto = 10;
                break;
              case 13:
                // case
                t4 = datum.device;
                alreadyAdded = $.PointerEventConverter__pointers.containsKey$1(0, t4);
                state = G.PointerEventConverter__ensureStateForPointer(datum, position);
                $async$goto = !alreadyAdded ? 23 : 24;
                break;
              case 23:
                // then
                $async$goto = 25;
                return new F.PointerAddedEvent(timeStamp, 0, kind, t4, position, C.Offset_0_0, 0, false, false, 0, datum.pressureMin, datum.pressureMax, 0, 0, 0, 0, 0, radiusMax, radiusMax, 0, datum.tilt, 0, false);
              case 25:
                // after yield
              case 24:
                // join
                $async$goto = !state.lastPosition.$eq(0, position) ? 26 : 27;
                break;
              case 26:
                // then
                t5 = state.lastPosition;
                t6 = t5._dx;
                if (typeof t6 !== "number") {
                  H.iae(t6);
                  // goto return
                  $async$goto = 1;
                  break;
                }
                t5 = t5._dy;
                if (typeof t5 !== "number") {
                  H.iae(t5);
                  // goto return
                  $async$goto = 1;
                  break;
                }
                $async$goto = 28;
                return new F.PointerHoverEvent(timeStamp, 0, kind, t4, position, new Q.Offset(t2 - t6, t3 - t5), datum.buttons, false, false, 0, datum.pressureMin, datum.pressureMax, 0, 0, 0, radiusMax, radiusMax, radiusMax, radiusMax, 0, datum.tilt, 0, true);
              case 28:
                // after yield
                state.lastPosition = position;
              case 27:
                // join
                t2 = $._PointerState__pointerCount + 1;
                state._converter$_pointer = $._PointerState__pointerCount = t2;
                state._down = true;
                $async$goto = 29;
                return new F.PointerDownEvent(timeStamp, t2, kind, t4, position, C.Offset_0_0, G._synthesiseDownButtons(datum.buttons, kind), true, false, datum.pressure, datum.pressureMin, datum.pressureMax, 0, 0, 0, radiusMax, radiusMax, radiusMax, radiusMax, 0, datum.tilt, 0, false);
              case 29:
                // after yield
                // goto after switch
                $async$goto = 10;
                break;
              case 14:
                // case
                t4 = datum.device;
                state = $.PointerEventConverter__pointers.$index(0, t4);
                t5 = state._converter$_pointer;
                t6 = state.lastPosition;
                t7 = t6._dx;
                if (typeof t7 !== "number") {
                  H.iae(t7);
                  // goto return
                  $async$goto = 1;
                  break;
                }
                t6 = t6._dy;
                if (typeof t6 !== "number") {
                  H.iae(t6);
                  // goto return
                  $async$goto = 1;
                  break;
                }
                t8 = G._synthesiseDownButtons(datum.buttons, kind);
                t9 = datum.pressure;
                t10 = datum.pressureMin;
                t11 = datum.pressureMax;
                t12 = datum.tilt;
                datum.toString;
                $async$goto = 30;
                return new F.PointerMoveEvent(timeStamp, t5, kind, t4, position, new Q.Offset(t2 - t7, t3 - t6), t8, true, false, t9, t10, t11, 0, 0, 0, radiusMax, radiusMax, radiusMax, radiusMax, 0, t12, 0, false);
              case 30:
                // after yield
                state.lastPosition = position;
                // goto after switch
                $async$goto = 10;
                break;
              case 15:
                // case
              case 16:
                // case
                t5 = datum.device;
                state = $.PointerEventConverter__pointers.$index(0, t5);
                $async$goto = !position.$eq(0, state.lastPosition) ? 31 : 32;
                break;
              case 31:
                // then
                t6 = state._converter$_pointer;
                t7 = state.lastPosition;
                t8 = t7._dx;
                if (typeof t8 !== "number") {
                  H.iae(t8);
                  // goto return
                  $async$goto = 1;
                  break;
                }
                t7 = t7._dy;
                if (typeof t7 !== "number") {
                  H.iae(t7);
                  // goto return
                  $async$goto = 1;
                  break;
                }
                $async$goto = 33;
                return new F.PointerMoveEvent(timeStamp, t6, kind, t5, position, new Q.Offset(t2 - t8, t3 - t7), G._synthesiseDownButtons(datum.buttons, kind), true, false, datum.pressure, datum.pressureMin, datum.pressureMax, 0, 0, 0, radiusMax, radiusMax, radiusMax, radiusMax, 0, datum.tilt, 0, true);
              case 33:
                // after yield
                state.lastPosition = position;
              case 32:
                // join
                state._down = false;
                $async$goto = t4 === C.PointerChange_6 ? 34 : 36;
                break;
              case 34:
                // then
                $async$goto = 37;
                return new F.PointerUpEvent(timeStamp, state._converter$_pointer, kind, t5, position, C.Offset_0_0, datum.buttons, false, false, datum.pressure, datum.pressureMin, datum.pressureMax, 0, 0, 0, radiusMax, radiusMax, radiusMax, radiusMax, 0, datum.tilt, 0, false);
              case 37:
                // after yield
                // goto join
                $async$goto = 35;
                break;
              case 36:
                // else
                $async$goto = 38;
                return new F.PointerCancelEvent(timeStamp, state._converter$_pointer, kind, t5, position, C.Offset_0_0, datum.buttons, false, false, datum.pressure, datum.pressureMin, datum.pressureMax, 0, 0, 0, radiusMax, radiusMax, radiusMax, radiusMax, 0, datum.tilt, 0, false);
              case 38:
                // after yield
              case 35:
                // join
                // goto after switch
                $async$goto = 10;
                break;
              case 17:
                // case
                t4 = datum.device;
                state = $.PointerEventConverter__pointers.$index(0, t4);
                $async$goto = state._down ? 39 : 40;
                break;
              case 39:
                // then
                $async$goto = 41;
                return new F.PointerCancelEvent(timeStamp, state._converter$_pointer, kind, t4, state.lastPosition, C.Offset_0_0, datum.buttons, false, false, datum.pressure, datum.pressureMin, datum.pressureMax, 0, 0, 0, radiusMax, radiusMax, radiusMax, radiusMax, 0, datum.tilt, 0, false);
              case 41:
                // after yield
              case 40:
                // join
                $async$goto = !position.$eq(0, state.lastPosition) ? 42 : 43;
                break;
              case 42:
                // then
                t5 = datum.buttons;
                t6 = state.lastPosition;
                t7 = t6._dx;
                if (typeof t7 !== "number") {
                  H.iae(t7);
                  // goto return
                  $async$goto = 1;
                  break;
                }
                t6 = t6._dy;
                if (typeof t6 !== "number") {
                  H.iae(t6);
                  // goto return
                  $async$goto = 1;
                  break;
                }
                $async$goto = 44;
                return new F.PointerHoverEvent(timeStamp, 0, kind, t4, position, new Q.Offset(t2 - t7, t3 - t6), t5, false, false, 0, datum.pressureMin, datum.pressureMax, 0, 0, 0, radiusMax, radiusMax, radiusMax, radiusMax, 0, datum.tilt, 0, true);
              case 44:
                // after yield
              case 43:
                // join
                $.PointerEventConverter__pointers.remove$1(0, t4);
                t2 = datum.pressureMin;
                t3 = datum.pressureMax;
                datum.toString;
                $async$goto = 45;
                return new F.PointerRemovedEvent(timeStamp, 0, kind, t4, null, C.Offset_0_0, 0, false, false, 0, t2, t3, 0, 0, 0, 0, 0, radiusMax, radiusMax, 0, 0, 0, false);
              case 45:
                // after yield
                // goto after switch
                $async$goto = 10;
                break;
              case 10:
                // after switch
                // goto join
                $async$goto = 7;
                break;
              case 8:
                // else
              case 46:
                // switch
                switch (t4) {
                  case C.PointerSignalKind_1:
                    // goto case
                    $async$goto = 48;
                    break;
                  case C.PointerSignalKind_0:
                    // goto case
                    $async$goto = 49;
                    break;
                  case C.PointerSignalKind_2:
                    // goto case
                    $async$goto = 50;
                    break;
                  default:
                    // goto after switch
                    $async$goto = 47;
                    break;
                }
                break;
              case 48:
                // case
                state = G.PointerEventConverter__ensureStateForPointer(datum, position);
                $async$goto = !state.lastPosition.$eq(0, position) ? 51 : 52;
                break;
              case 51:
                // then
                $async$goto = state._down ? 53 : 55;
                break;
              case 53:
                // then
                t4 = state._converter$_pointer;
                t5 = datum.device;
                t6 = state.lastPosition;
                t7 = t6._dx;
                if (typeof t7 !== "number") {
                  H.iae(t7);
                  // goto return
                  $async$goto = 1;
                  break;
                }
                t6 = t6._dy;
                if (typeof t6 !== "number") {
                  H.iae(t6);
                  // goto return
                  $async$goto = 1;
                  break;
                }
                $async$goto = 56;
                return new F.PointerMoveEvent(timeStamp, t4, kind, t5, position, new Q.Offset(t2 - t7, t3 - t6), G._synthesiseDownButtons(datum.buttons, kind), true, false, datum.pressure, datum.pressureMin, datum.pressureMax, 0, 0, 0, radiusMax, radiusMax, radiusMax, radiusMax, 0, datum.tilt, 0, true);
              case 56:
                // after yield
                // goto join
                $async$goto = 54;
                break;
              case 55:
                // else
                t4 = datum.device;
                t5 = state.lastPosition;
                t6 = t5._dx;
                if (typeof t6 !== "number") {
                  H.iae(t6);
                  // goto return
                  $async$goto = 1;
                  break;
                }
                t5 = t5._dy;
                if (typeof t5 !== "number") {
                  H.iae(t5);
                  // goto return
                  $async$goto = 1;
                  break;
                }
                $async$goto = 57;
                return new F.PointerHoverEvent(timeStamp, 0, kind, t4, position, new Q.Offset(t2 - t6, t3 - t5), datum.buttons, false, false, 0, datum.pressureMin, datum.pressureMax, 0, 0, 0, radiusMax, radiusMax, radiusMax, radiusMax, 0, datum.tilt, 0, true);
              case 57:
                // after yield
              case 54:
                // join
                state.lastPosition = position;
              case 52:
                // join
                t2 = datum.scrollDeltaX;
                t3 = datum.scrollDeltaY;
                if (typeof t2 !== "number") {
                  t2.$div();
                  // goto return
                  $async$goto = 1;
                  break;
                }
                if (typeof t3 !== "number") {
                  t3.$div();
                  // goto return
                  $async$goto = 1;
                  break;
                }
                $async$goto = 58;
                return new F.PointerScrollEvent(new Q.Offset(t2 / devicePixelRatio, t3 / devicePixelRatio), timeStamp, 0, kind, datum.device, position, C.Offset_0_0, 0, false, false, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, false);
              case 58:
                // after yield
                // goto after switch
                $async$goto = 47;
                break;
              case 49:
                // case
                // goto after switch
                $async$goto = 47;
                break;
              case 50:
                // case
                // goto after switch
                $async$goto = 47;
                break;
              case 47:
                // after switch
              case 7:
                // join
              case 4:
                // for update
                data.length === t1 || (0, H.throwConcurrentModificationError)(data), ++_i;
                // goto for condition
                $async$goto = 3;
                break;
              case 5:
                // after for
              case 1:
                // return
                return P._IterationMarker_endOfIteration();
              case 2:
                // rethrow
                return P._IterationMarker_uncaughtError($async$currentError);
            }
        };
      }, F.PointerEvent);
    },
    _PointerState: function _PointerState(t0) {
      this._converter$_pointer = null;
      this._down = false;
      this.lastPosition = t0;
    },
    PointerEventConverter__ensureStateForPointer_closure: function PointerEventConverter__ensureStateForPointer_closure(t0) {
      this.position = t0;
    },
    PointerSignalResolver: function PointerSignalResolver() {
      this._currentEvent = this._firstRegisteredCallback = null;
    },
    PointerSignalResolver_resolve_closure: function PointerSignalResolver_resolve_closure(t0) {
      this.event = t0;
    },
    flipAxis: function(direction) {
      switch (direction) {
        case C.Axis_0:
          return C.Axis_1;
        case C.Axis_1:
          return C.Axis_0;
      }
      return;
    },
    axisDirectionToAxis: function(axisDirection) {
      switch (axisDirection) {
        case C.AxisDirection_0:
        case C.AxisDirection_2:
          return C.Axis_1;
        case C.AxisDirection_3:
        case C.AxisDirection_1:
          return C.Axis_0;
      }
      return;
    },
    textDirectionToAxisDirection: function(textDirection) {
      switch (textDirection) {
        case C.TextDirection_0:
          return C.AxisDirection_3;
        case C.TextDirection_1:
          return C.AxisDirection_1;
      }
      return;
    },
    flipAxisDirection: function(axisDirection) {
      switch (axisDirection) {
        case C.AxisDirection_0:
          return C.AxisDirection_2;
        case C.AxisDirection_1:
          return C.AxisDirection_3;
        case C.AxisDirection_2:
          return C.AxisDirection_0;
        case C.AxisDirection_3:
          return C.AxisDirection_1;
      }
      return;
    },
    axisDirectionIsReversed: function(axisDirection) {
      switch (axisDirection) {
        case C.AxisDirection_0:
        case C.AxisDirection_3:
          return true;
        case C.AxisDirection_2:
        case C.AxisDirection_1:
          return false;
      }
      return;
    },
    RenderComparison: function RenderComparison(t0, t1) {
      this.index = t0;
      this._basic_types$_name = t1;
    },
    Axis: function Axis(t0) {
      this._basic_types$_name = t0;
    },
    VerticalDirection: function VerticalDirection(t0) {
      this._basic_types$_name = t0;
    },
    AxisDirection: function AxisDirection(t0) {
      this._basic_types$_name = t0;
    },
    applyGrowthDirectionToAxisDirection: function(axisDirection, growthDirection) {
      switch (growthDirection) {
        case C.GrowthDirection_0:
          return axisDirection;
        case C.GrowthDirection_1:
          return G.flipAxisDirection(axisDirection);
      }
      return;
    },
    applyGrowthDirectionToScrollDirection: function(scrollDirection, growthDirection) {
      switch (growthDirection) {
        case C.GrowthDirection_0:
          return scrollDirection;
        case C.GrowthDirection_1:
          return N.flipScrollDirection(scrollDirection);
      }
      return;
    },
    SliverConstraints$: function(axisDirection, cacheOrigin, crossAxisDirection, crossAxisExtent, growthDirection, overlap, precedingScrollExtent, remainingCacheExtent, remainingPaintExtent, scrollOffset, userScrollDirection, viewportMainAxisExtent) {
      return new G.SliverConstraints(axisDirection, growthDirection, userScrollDirection, scrollOffset, precedingScrollExtent, overlap, remainingPaintExtent, crossAxisExtent, crossAxisDirection, viewportMainAxisExtent, cacheOrigin, remainingCacheExtent);
    },
    SliverGeometry$: function(cacheExtent, hasVisualOverflow, hitTestExtent, layoutExtent, maxPaintExtent, paintExtent, scrollExtent, scrollOffsetCorrection) {
      var t1 = layoutExtent == null ? paintExtent : layoutExtent,
        t2 = hitTestExtent == null ? paintExtent : hitTestExtent,
        t3 = cacheExtent == null ? layoutExtent : cacheExtent;
      if (t3 == null)
        t3 = paintExtent;
      return new G.SliverGeometry(scrollExtent, paintExtent, t1, maxPaintExtent, t2, paintExtent > 0, hasVisualOverflow, scrollOffsetCorrection, t3);
    },
    GrowthDirection: function GrowthDirection(t0) {
      this._sliver$_name = t0;
    },
    SliverConstraints: function SliverConstraints(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11) {
      var _ = this;
      _.axisDirection = t0;
      _.growthDirection = t1;
      _.userScrollDirection = t2;
      _.scrollOffset = t3;
      _.precedingScrollExtent = t4;
      _.overlap = t5;
      _.remainingPaintExtent = t6;
      _.crossAxisExtent = t7;
      _.crossAxisDirection = t8;
      _.viewportMainAxisExtent = t9;
      _.cacheOrigin = t10;
      _.remainingCacheExtent = t11;
    },
    SliverGeometry: function SliverGeometry(t0, t1, t2, t3, t4, t5, t6, t7, t8) {
      var _ = this;
      _.scrollExtent = t0;
      _.paintExtent = t1;
      _.layoutExtent = t2;
      _.maxPaintExtent = t3;
      _.hitTestExtent = t4;
      _.visible = t5;
      _.hasVisualOverflow = t6;
      _.scrollOffsetCorrection = t7;
      _.cacheExtent = t8;
    },
    SliverHitTestEntry: function SliverHitTestEntry(t0, t1, t2) {
      this.mainAxisPosition = t0;
      this.crossAxisPosition = t1;
      this.target = t2;
    },
    SliverLogicalParentData: function SliverLogicalParentData() {
    },
    SliverPhysicalParentData: function SliverPhysicalParentData(t0) {
      this.paintOffset = t0;
    },
    SliverPhysicalContainerParentData: function SliverPhysicalContainerParentData(t0, t1, t2) {
      this.ContainerParentDataMixin_previousSibling = t0;
      this.ContainerParentDataMixin_nextSibling = t1;
      this.paintOffset = t2;
    },
    RenderSliver: function RenderSliver() {
    },
    RenderSliverHelpers: function RenderSliverHelpers() {
    },
    _SliverPhysicalContainerParentData_SliverPhysicalParentData_ContainerParentDataMixin: function _SliverPhysicalContainerParentData_SliverPhysicalParentData_ContainerParentDataMixin() {
    },
    DecorationTween: function DecorationTween(t0, t1) {
      this.begin = t0;
      this.end = t1;
    },
    BorderRadiusTween: function BorderRadiusTween(t0, t1) {
      this.begin = t0;
      this.end = t1;
    },
    TextStyleTween: function TextStyleTween(t0, t1) {
      this.begin = t0;
      this.end = t1;
    },
    ImplicitlyAnimatedWidget: function ImplicitlyAnimatedWidget() {
    },
    ImplicitlyAnimatedWidgetState: function ImplicitlyAnimatedWidgetState() {
    },
    ImplicitlyAnimatedWidgetState_didUpdateWidget_closure: function ImplicitlyAnimatedWidgetState_didUpdateWidget_closure(t0) {
      this.$this = t0;
    },
    ImplicitlyAnimatedWidgetState__constructTweens_closure: function ImplicitlyAnimatedWidgetState__constructTweens_closure(t0, t1) {
      this._box_0 = t0;
      this.$this = t1;
    },
    AnimatedWidgetBaseState: function AnimatedWidgetBaseState() {
    },
    AnimatedWidgetBaseState__handleAnimationChanged_closure: function AnimatedWidgetBaseState__handleAnimationChanged_closure() {
    },
    AnimatedDefaultTextStyle: function AnimatedDefaultTextStyle(t0, t1, t2, t3, t4) {
      var _ = this;
      _.child = t0;
      _.style = t1;
      _.curve = t2;
      _.duration = t3;
      _.key = t4;
    },
    _AnimatedDefaultTextStyleState: function _AnimatedDefaultTextStyleState(t0, t1) {
      var _ = this;
      _._animation = _._controller = _._style = null;
      _.SingleTickerProviderStateMixin__ticker = t0;
      _._widget = null;
      _._debugLifecycleState = t1;
      _._element = null;
    },
    _AnimatedDefaultTextStyleState_forEachTween_closure: function _AnimatedDefaultTextStyleState_forEachTween_closure() {
    },
    AnimatedPhysicalModel: function AnimatedPhysicalModel(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10) {
      var _ = this;
      _.child = t0;
      _.shape = t1;
      _.clipBehavior = t2;
      _.borderRadius = t3;
      _.elevation = t4;
      _.color = t5;
      _.animateColor = t6;
      _.shadowColor = t7;
      _.curve = t8;
      _.duration = t9;
      _.key = t10;
    },
    _AnimatedPhysicalModelState: function _AnimatedPhysicalModelState(t0, t1) {
      var _ = this;
      _._animation = _._controller = _._implicit_animations$_shadowColor = _._implicit_animations$_color = _._implicit_animations$_elevation = _._implicit_animations$_borderRadius = null;
      _.SingleTickerProviderStateMixin__ticker = t0;
      _._widget = null;
      _._debugLifecycleState = t1;
      _._element = null;
    },
    _AnimatedPhysicalModelState_forEachTween_closure: function _AnimatedPhysicalModelState_forEachTween_closure() {
    },
    _AnimatedPhysicalModelState_forEachTween_closure0: function _AnimatedPhysicalModelState_forEachTween_closure0() {
    },
    _AnimatedPhysicalModelState_forEachTween_closure1: function _AnimatedPhysicalModelState_forEachTween_closure1() {
    },
    _AnimatedPhysicalModelState_forEachTween_closure2: function _AnimatedPhysicalModelState_forEachTween_closure2() {
    },
    _ImplicitlyAnimatedWidgetState_State_SingleTickerProviderStateMixin: function _ImplicitlyAnimatedWidgetState_State_SingleTickerProviderStateMixin() {
    },
    OverscrollNotification$: function(context, dragDetails, metrics, overscroll, velocity) {
      return new G.OverscrollNotification(dragDetails, overscroll, velocity, metrics, context);
    },
    defaultScrollNotificationPredicate: function(notification) {
      return notification._scroll_notification$_depth === 0;
    },
    ViewportNotificationMixin: function ViewportNotificationMixin() {
    },
    ScrollNotification: function ScrollNotification() {
    },
    ScrollStartNotification: function ScrollStartNotification(t0, t1, t2) {
      var _ = this;
      _.dragDetails = t0;
      _.metrics = t1;
      _.context = t2;
      _._scroll_notification$_depth = 0;
    },
    ScrollUpdateNotification: function ScrollUpdateNotification(t0, t1, t2, t3) {
      var _ = this;
      _.dragDetails = t0;
      _.scrollDelta = t1;
      _.metrics = t2;
      _.context = t3;
      _._scroll_notification$_depth = 0;
    },
    OverscrollNotification: function OverscrollNotification(t0, t1, t2, t3, t4) {
      var _ = this;
      _.dragDetails = t0;
      _.overscroll = t1;
      _.velocity = t2;
      _.metrics = t3;
      _.context = t4;
      _._scroll_notification$_depth = 0;
    },
    ScrollEndNotification: function ScrollEndNotification(t0, t1, t2) {
      var _ = this;
      _.dragDetails = t0;
      _.metrics = t1;
      _.context = t2;
      _._scroll_notification$_depth = 0;
    },
    UserScrollNotification: function UserScrollNotification(t0, t1, t2) {
      var _ = this;
      _.direction = t0;
      _.metrics = t1;
      _.context = t2;
      _._scroll_notification$_depth = 0;
    },
    _kDefaultSemanticIndexCallback: function(_, localIndex) {
      return localIndex;
    },
    SliverChildBuilderDelegate$: function(builder, addAutomaticKeepAlives, addRepaintBoundaries, addSemanticIndexes, childCount) {
      return new G.SliverChildBuilderDelegate(builder, childCount, true, true, true);
    },
    SliverMultiBoxAdaptorElement__extrapolateMaxScrollOffset: function(firstIndex, lastIndex, leadingScrollOffset, trailingScrollOffset, childCount) {
      if (lastIndex === childCount - 1)
        return trailingScrollOffset;
      if (typeof lastIndex !== "number")
        return lastIndex.$sub();
      if (typeof firstIndex !== "number")
        return H.iae(firstIndex);
      return trailingScrollOffset + (trailingScrollOffset - leadingScrollOffset) / (lastIndex - firstIndex + 1) * (childCount - lastIndex - 1);
    },
    SliverChildDelegate: function SliverChildDelegate() {
    },
    SliverChildBuilderDelegate: function SliverChildBuilderDelegate(t0, t1, t2, t3, t4) {
      var _ = this;
      _.builder = t0;
      _.childCount = t1;
      _.addAutomaticKeepAlives = t2;
      _.addRepaintBoundaries = t3;
      _.addSemanticIndexes = t4;
    },
    SliverWithKeepAliveWidget: function SliverWithKeepAliveWidget() {
    },
    SliverMultiBoxAdaptorWidget: function SliverMultiBoxAdaptorWidget() {
    },
    SliverList: function SliverList(t0, t1) {
      this.delegate = t0;
      this.key = t1;
    },
    SliverFillViewport: function SliverFillViewport(t0, t1, t2) {
      this.viewportFraction = t0;
      this.delegate = t1;
      this.key = t2;
    },
    SliverMultiBoxAdaptorElement: function SliverMultiBoxAdaptorElement(t0, t1, t2, t3, t4) {
      var _ = this;
      _._childWidgets = t0;
      _._sliver0$_childElements = t1;
      _._currentlyUpdatingChildIndex = _._currentBeforeChild = null;
      _._didUnderflow = false;
      _._framework$_parent = _._ancestorRenderObjectElement = _._renderObject = null;
      _._cachedHash = t2;
      _._depth = _._slot = null;
      _._widget = t3;
      _._owner = null;
      _._active = false;
      _._debugLifecycleState = t4;
      _._dependencies = _._inheritedWidgets = null;
      _._hadUnsatisfiedDependencies = false;
      _._dirty = true;
      _._debugAllowIgnoredCallsToMarkNeedsBuild = _._debugBuiltOnce = _._inDirtyList = false;
    },
    SliverMultiBoxAdaptorElement_performRebuild_processElement: function SliverMultiBoxAdaptorElement_performRebuild_processElement(t0) {
      this.$this = t0;
    },
    SliverMultiBoxAdaptorElement__build_closure: function SliverMultiBoxAdaptorElement__build_closure(t0, t1) {
      this.$this = t0;
      this.index = t1;
    },
    SliverMultiBoxAdaptorElement_createChild_closure: function SliverMultiBoxAdaptorElement_createChild_closure(t0, t1, t2) {
      this.$this = t0;
      this.after = t1;
      this.index = t2;
    },
    SliverMultiBoxAdaptorElement_removeChild_closure: function SliverMultiBoxAdaptorElement_removeChild_closure(t0, t1) {
      this.$this = t0;
      this.index = t1;
    },
    KeepAlive: function KeepAlive(t0, t1, t2) {
      this.keepAlive = t0;
      this.child = t1;
      this.key = t2;
    }
  },
  S = {
    ProxyAnimation$: function(animation) {
      var t1 = {func: 1, ret: -1, args: [X.AnimationStatus]},
        t2 = {func: 1, ret: -1};
      t2 = new S.ProxyAnimation(new R.ObserverList(H.setRuntimeTypeInfo([], [t1]), [t1]), new R.ObserverList(H.setRuntimeTypeInfo([], [t2]), [t2]), 0);
      t2.set$_animations$_parent(animation);
      if (t2._animations$_parent == null) {
        t2._animations$_status = C.AnimationStatus_0;
        t2._animations$_value = 0;
      }
      return t2;
    },
    CurvedAnimation$: function(curve, $parent, reverseCurve) {
      var t1 = new S.CurvedAnimation($parent, curve, reverseCurve);
      t1._updateCurveDirection$1($parent.get$status($parent));
      $parent.addStatusListener$1(t1.get$_updateCurveDirection());
      return t1;
    },
    TrainHoppingAnimation$: function(_currentTrain, _nextTrain, onSwitchedTrain) {
      var t3, t4,
        t1 = {func: 1, ret: -1, args: [X.AnimationStatus]},
        t2 = {func: 1, ret: -1};
      t1 = new S.TrainHoppingAnimation(_currentTrain, _nextTrain, onSwitchedTrain, new R.ObserverList(H.setRuntimeTypeInfo([], [t1]), [t1]), new R.ObserverList(H.setRuntimeTypeInfo([], [t2]), [t2]));
      if (_nextTrain != null)
        if (J.$eq$(_currentTrain.get$value(_currentTrain), _nextTrain.get$value(_nextTrain))) {
          t1.set$_currentTrain(_nextTrain);
          t1.set$_nextTrain(null);
        } else if (J.$gt$n(_currentTrain.get$value(_currentTrain), _nextTrain.get$value(_nextTrain)))
          t1._mode = C._TrainHoppingMode_1;
        else
          t1._mode = C._TrainHoppingMode_0;
      t1._currentTrain.addStatusListener$1(t1.get$_statusChangeHandler());
      t3 = t1.get$_valueChangeHandler();
      t1._currentTrain.addListener$1(0, t3);
      t4 = t1._nextTrain;
      if (t4 != null) {
        H.functionTypeCheck(t3, t2);
        t4.didRegisterListener$0();
        t2 = t4.AnimationLocalListenersMixin__listeners;
        H.assertSubtypeOfRuntimeType(t3, H.getTypeArgumentByIndex(t2, 0));
        t2._isDirty = true;
        C.JSArray_methods.add$1(t2._list, t3);
      }
      return t1;
    },
    _AlwaysCompleteAnimation: function _AlwaysCompleteAnimation() {
    },
    _AlwaysDismissedAnimation: function _AlwaysDismissedAnimation() {
    },
    AnimationWithParentMixin: function AnimationWithParentMixin() {
    },
    ProxyAnimation: function ProxyAnimation(t0, t1, t2) {
      var _ = this;
      _._animations$_parent = _._animations$_value = _._animations$_status = null;
      _.AnimationLocalStatusListenersMixin__statusListeners = t0;
      _.AnimationLocalListenersMixin__listeners = t1;
      _.AnimationLazyListenerMixin__listenerCounter = t2;
    },
    ReverseAnimation: function ReverseAnimation(t0, t1, t2) {
      this.parent = t0;
      this.AnimationLocalStatusListenersMixin__statusListeners = t1;
      this.AnimationLazyListenerMixin__listenerCounter = t2;
    },
    CurvedAnimation: function CurvedAnimation(t0, t1, t2) {
      var _ = this;
      _.parent = t0;
      _.curve = t1;
      _.reverseCurve = t2;
      _._curveDirection = null;
    },
    _TrainHoppingMode: function _TrainHoppingMode(t0) {
      this._animations$_name = t0;
    },
    TrainHoppingAnimation: function TrainHoppingAnimation(t0, t1, t2, t3, t4) {
      var _ = this;
      _._currentTrain = t0;
      _._nextTrain = t1;
      _._mode = null;
      _.onSwitchedTrain = t2;
      _._lastValue = _._lastStatus = null;
      _.AnimationLocalStatusListenersMixin__statusListeners = t3;
      _.AnimationLocalListenersMixin__listeners = t4;
    },
    CompoundAnimation: function CompoundAnimation() {
    },
    AnimationMin: function AnimationMin(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.first = t0;
      _.next = t1;
      _._lastValue = _._lastStatus = null;
      _.AnimationLocalStatusListenersMixin__statusListeners = t2;
      _.AnimationLocalListenersMixin__listeners = t3;
      _.AnimationLazyListenerMixin__listenerCounter = t4;
      _.$ti = t5;
    },
    _CompoundAnimation_Animation_AnimationLazyListenerMixin: function _CompoundAnimation_Animation_AnimationLazyListenerMixin() {
    },
    _CompoundAnimation_Animation_AnimationLazyListenerMixin_AnimationLocalListenersMixin: function _CompoundAnimation_Animation_AnimationLazyListenerMixin_AnimationLocalListenersMixin() {
    },
    _CompoundAnimation_Animation_AnimationLazyListenerMixin_AnimationLocalListenersMixin_AnimationLocalStatusListenersMixin: function _CompoundAnimation_Animation_AnimationLazyListenerMixin_AnimationLocalListenersMixin_AnimationLocalStatusListenersMixin() {
    },
    _CurvedAnimation_Animation_AnimationWithParentMixin: function _CurvedAnimation_Animation_AnimationWithParentMixin() {
    },
    _ProxyAnimation_Animation_AnimationLazyListenerMixin: function _ProxyAnimation_Animation_AnimationLazyListenerMixin() {
    },
    _ProxyAnimation_Animation_AnimationLazyListenerMixin_AnimationLocalListenersMixin: function _ProxyAnimation_Animation_AnimationLazyListenerMixin_AnimationLocalListenersMixin() {
    },
    _ProxyAnimation_Animation_AnimationLazyListenerMixin_AnimationLocalListenersMixin_AnimationLocalStatusListenersMixin: function _ProxyAnimation_Animation_AnimationLazyListenerMixin_AnimationLocalListenersMixin_AnimationLocalStatusListenersMixin() {
    },
    _ReverseAnimation_Animation_AnimationLazyListenerMixin: function _ReverseAnimation_Animation_AnimationLazyListenerMixin() {
    },
    _ReverseAnimation_Animation_AnimationLazyListenerMixin_AnimationLocalStatusListenersMixin: function _ReverseAnimation_Animation_AnimationLazyListenerMixin_AnimationLocalStatusListenersMixin() {
    },
    _TrainHoppingAnimation_Animation_AnimationEagerListenerMixin: function _TrainHoppingAnimation_Animation_AnimationEagerListenerMixin() {
    },
    _TrainHoppingAnimation_Animation_AnimationEagerListenerMixin_AnimationLocalListenersMixin: function _TrainHoppingAnimation_Animation_AnimationEagerListenerMixin_AnimationLocalListenersMixin() {
    },
    _TrainHoppingAnimation_Animation_AnimationEagerListenerMixin_AnimationLocalListenersMixin_AnimationLocalStatusListenersMixin: function _TrainHoppingAnimation_Animation_AnimationEagerListenerMixin_AnimationLocalListenersMixin_AnimationLocalStatusListenersMixin() {
    },
    AnimationLazyListenerMixin: function AnimationLazyListenerMixin() {
    },
    AnimationEagerListenerMixin: function AnimationEagerListenerMixin() {
    },
    AnimationLocalListenersMixin: function AnimationLocalListenersMixin() {
    },
    AnimationLocalListenersMixin_notifyListeners_closure: function AnimationLocalListenersMixin_notifyListeners_closure(t0) {
      this.$this = t0;
    },
    AnimationLocalStatusListenersMixin: function AnimationLocalStatusListenersMixin() {
    },
    AnimationLocalStatusListenersMixin_notifyStatusListeners_closure: function AnimationLocalStatusListenersMixin_notifyStatusListeners_closure(t0) {
      this.$this = t0;
    },
    DragStartBehavior: function DragStartBehavior(t0) {
      this._recognizer$_name = t0;
    },
    GestureRecognizer: function GestureRecognizer() {
    },
    GestureRecognizer_invokeCallback_closure: function GestureRecognizer_invokeCallback_closure(t0, t1) {
      this.$this = t0;
      this.name = t1;
    },
    OneSequenceGestureRecognizer: function OneSequenceGestureRecognizer() {
    },
    GestureRecognizerState: function GestureRecognizerState(t0) {
      this._recognizer$_name = t0;
    },
    PrimaryPointerGestureRecognizer: function PrimaryPointerGestureRecognizer() {
    },
    _GestureRecognizer_GestureArenaMember_DiagnosticableTreeMixin: function _GestureRecognizer_GestureArenaMember_DiagnosticableTreeMixin() {
    },
    MaterialApp: function MaterialApp(t0, t1, t2) {
      this.home = t0;
      this.theme = t1;
      this.key = t2;
    },
    _MaterialScrollBehavior: function _MaterialScrollBehavior() {
    },
    _MaterialAppState: function _MaterialAppState(t0) {
      var _ = this;
      _._widget = _._navigatorObservers = _._heroController = null;
      _._debugLifecycleState = t0;
      _._element = null;
    },
    _MaterialAppState_build_closure: function _MaterialAppState_build_closure() {
    },
    _MaterialAppState_build_closure0: function _MaterialAppState_build_closure0() {
    },
    BoxDecoration$: function(border, borderRadius, boxShadow, color, gradient, image, shape) {
      return new S.BoxDecoration(color, image, border, borderRadius, boxShadow, gradient, shape);
    },
    BoxDecoration_lerp: function(a, b, t) {
      var t1, t2, t3, t4, t5, t6, t7;
      if (t === 0)
        return a;
      if (t === 1)
        return b;
      t1 = Q.Color_lerp(a.color, b.color, t);
      if (typeof t !== "number")
        return t.$lt();
      t2 = t < 0.5;
      t3 = t2 ? a.image : b.image;
      t4 = F.BoxBorder_lerp(a.border, b.border, t);
      t5 = K.BorderRadiusGeometry_lerp(a.borderRadius, b.borderRadius, t);
      t6 = O.BoxShadow_lerpList(a.boxShadow, b.boxShadow, t);
      t7 = T.Gradient_lerp(a.gradient, b.gradient, t);
      return S.BoxDecoration$(t4, t5, t6, t1, t7, t3, t2 ? a.shape : b.shape);
    },
    BoxDecoration: function BoxDecoration(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _.color = t0;
      _.image = t1;
      _.border = t2;
      _.borderRadius = t3;
      _.boxShadow = t4;
      _.gradient = t5;
      _.shape = t6;
    },
    _BoxDecorationPainter: function _BoxDecorationPainter(t0, t1) {
      var _ = this;
      _._box_decoration$_decoration = t0;
      _._imagePainter = _._rectForCachedBackgroundPaint = _._cachedBackgroundPaint = null;
      _.onChanged = t1;
    },
    StadiumBorder: function StadiumBorder(t0) {
      this.side = t0;
    },
    _StadiumToCircleBorder: function _StadiumToCircleBorder(t0, t1) {
      this.side = t0;
      this.circleness = t1;
    },
    _StadiumToRoundedRectangleBorder: function _StadiumToRoundedRectangleBorder(t0, t1, t2) {
      this.side = t0;
      this.borderRadius = t1;
      this.rectness = t2;
    },
    BoxConstraints$tight: function(size) {
      var t1 = size._dx,
        t2 = size._dy;
      return new S.BoxConstraints(t1, t1, t2, t2);
    },
    BoxConstraints$tightFor: function(height, width) {
      var t3, t4,
        t1 = width != null,
        t2 = t1 ? width : 0;
      t1 = t1 ? width : 1 / 0;
      t3 = height != null;
      t4 = t3 ? height : 0;
      return new S.BoxConstraints(t2, t1, t4, t3 ? height : 1 / 0);
    },
    BoxConstraints: function BoxConstraints(t0, t1, t2, t3) {
      var _ = this;
      _.minWidth = t0;
      _.maxWidth = t1;
      _.minHeight = t2;
      _.maxHeight = t3;
    },
    BoxHitTestEntry: function BoxHitTestEntry(t0, t1) {
      this.localPosition = t0;
      this.target = t1;
    },
    BoxParentData: function BoxParentData(t0) {
      this.offset = t0;
    },
    ContainerBoxParentData: function ContainerBoxParentData() {
    },
    _IntrinsicDimensionsCacheEntry: function _IntrinsicDimensionsCacheEntry() {
    },
    RenderBox: function RenderBox() {
    },
    RenderBox_getDistanceToActualBaseline_closure: function RenderBox_getDistanceToActualBaseline_closure(t0, t1) {
      this.$this = t0;
      this.baseline = t1;
    },
    RenderBoxContainerDefaultsMixin: function RenderBoxContainerDefaultsMixin() {
    },
    _ContainerBoxParentData_BoxParentData_ContainerParentDataMixin: function _ContainerBoxParentData_BoxParentData_ContainerParentDataMixin() {
    },
    WidgetsApp: function WidgetsApp(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t20, t21, t22, t23) {
      var _ = this;
      _.navigatorKey = t0;
      _.onGenerateRoute = t1;
      _.pageRouteBuilder = t2;
      _.home = t3;
      _.routes = t4;
      _.onUnknownRoute = t5;
      _.initialRoute = t6;
      _.navigatorObservers = t7;
      _.builder = t8;
      _.title = t9;
      _.onGenerateTitle = t10;
      _.textStyle = t11;
      _.color = t12;
      _.locale = t13;
      _.localizationsDelegates = t14;
      _.localeResolutionCallback = t15;
      _.supportedLocales = t16;
      _.showPerformanceOverlay = t17;
      _.checkerboardRasterCacheImages = t18;
      _.checkerboardOffscreenLayers = t19;
      _.showSemanticsDebugger = t20;
      _.inspectorSelectButtonBuilder = t21;
      _.debugShowCheckedModeBanner = t22;
      _.key = t23;
    },
    _WidgetsAppState: function _WidgetsAppState(t0) {
      var _ = this;
      _._widget = _._app$_locale = _._navigator = null;
      _._debugLifecycleState = t0;
      _._element = null;
    },
    _WidgetsAppState__onGenerateRoute_closure: function _WidgetsAppState__onGenerateRoute_closure(t0) {
      this.$this = t0;
    },
    _WidgetsAppState_didChangeLocale_closure: function _WidgetsAppState_didChangeLocale_closure(t0, t1) {
      this.$this = t0;
      this.newLocale = t1;
    },
    _WidgetsAppState_didChangeAccessibilityFeatures_closure: function _WidgetsAppState_didChangeAccessibilityFeatures_closure() {
    },
    _WidgetsAppState_didChangeMetrics_closure: function _WidgetsAppState_didChangeMetrics_closure() {
    },
    _WidgetsAppState_didChangeTextScaleFactor_closure: function _WidgetsAppState_didChangeTextScaleFactor_closure() {
    },
    _WidgetsAppState_didChangePlatformBrightness_closure: function _WidgetsAppState_didChangePlatformBrightness_closure() {
    },
    PageStorageBucket__maybeAddKey: function(context, keys) {
      var widget;
      H.assertSubtype(keys, "$isList", [[S.PageStorageKey,,]], "$asList");
      widget = context.get$widget();
      widget.key;
      return !(widget instanceof S.PageStorage);
    },
    PageStorage_of: function(context) {
      var widget = H.interceptedTypeCheck(context.ancestorWidgetOfExactType$1(C.Type_PageStorage_Jik), "$isPageStorage");
      return widget == null ? null : widget.bucket;
    },
    PageStorageKey: function PageStorageKey() {
    },
    _StorageEntryIdentifier: function _StorageEntryIdentifier(t0) {
      this.keys = t0;
    },
    PageStorageBucket: function PageStorageBucket() {
      this._storage = null;
    },
    PageStorageBucket__allKeys_closure: function PageStorageBucket__allKeys_closure(t0) {
      this.keys = t0;
    },
    PageStorage: function PageStorage(t0, t1, t2) {
      this.child = t0;
      this.bucket = t1;
      this.key = t2;
    },
    setEquals: function(a, b, $T) {
      var t1 = [$T];
      H.assertSubtype(a, "$isSet", t1, "$asSet");
      H.assertSubtype(b, "$isSet", t1, "$asSet");
      if (a == null)
        return b == null;
      if (b == null || a._collection$_length !== b._collection$_length)
        return false;
      for (t1 = P._LinkedHashSetIterator$(a, a._collection$_modifications, H.getTypeArgumentByIndex(a, 0)); t1.moveNext$0();)
        if (!b.contains$1(0, t1._collection$_current))
          return false;
      return true;
    },
    listEquals: function(a, b, $T) {
      var index,
        t1 = [$T];
      H.assertSubtype(a, "$isList", t1, "$asList");
      H.assertSubtype(b, "$isList", t1, "$asList");
      if (a == null)
        return b == null;
      if (b == null || a.length !== b.length)
        return false;
      for (index = 0; index < a.length; ++index) {
        t1 = a[index];
        if (index >= b.length)
          return H.ioore(b, index);
        if (!J.$eq$(t1, b[index]))
          return false;
      }
      return true;
    }
  },
  Z = {Curve: function Curve() {
    }, _Linear: function _Linear() {
    }, Interval: function Interval(t0, t1, t2) {
      this.begin = t0;
      this.end = t1;
      this.curve = t2;
    }, Threshold: function Threshold(t0) {
      this.threshold = t0;
    }, Cubic: function Cubic(t0, t1, t2, t3) {
      var _ = this;
      _.a = t0;
      _.b = t1;
      _.c = t2;
      _.d = t3;
    }, FlippedCurve: function FlippedCurve(t0) {
      this.curve = t0;
    }, _DecelerateCurve: function _DecelerateCurve() {
    }, RawMaterialButton: function RawMaterialButton(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11) {
      var _ = this;
      _.onPressed = t0;
      _.textStyle = t1;
      _.fillColor = t2;
      _.elevation = t3;
      _.highlightElevation = t4;
      _.disabledElevation = t5;
      _.constraints = t6;
      _.shape = t7;
      _.child = t8;
      _.materialTapTargetSize = t9;
      _.clipBehavior = t10;
      _.key = t11;
    }, _RawMaterialButtonState: function _RawMaterialButtonState(t0) {
      var _ = this;
      _._highlight = false;
      _._widget = null;
      _._debugLifecycleState = t0;
      _._element = null;
    }, _RawMaterialButtonState__handleHighlightChanged_closure: function _RawMaterialButtonState__handleHighlightChanged_closure(t0, t1) {
      this.$this = t0;
      this.value = t1;
    }, _InputPadding: function _InputPadding(t0, t1, t2) {
      this.minSize = t0;
      this.child = t1;
      this.key = t2;
    }, _RenderInputPadding: function _RenderInputPadding(t0, t1) {
      var _ = this;
      _._minSize = t0;
      _.RenderObjectWithChildMixin__child = t1;
      _._cachedBaselines = _._size = _._cachedIntrinsicDimensions = null;
      _._debugActivePointers = 0;
      _.debugCreator = _.parentData = null;
      _._debugDoingThisLayout = _._debugDoingThisResize = false;
      _._debugCanParentUseSize = null;
      _._debugMutationsLocked = false;
      _._needsLayout = true;
      _._relayoutBoundary = null;
      _._doingThisLayoutWithCallback = false;
      _._constraints = null;
      _._debugDoingThisPaint = false;
      _._layer = null;
      _._needsCompositingBitsUpdate = false;
      _._needsCompositing = null;
      _._needsPaint = true;
      _._cachedSemanticsConfiguration = null;
      _._needsSemanticsUpdate = true;
      _._semantics = null;
      _._node$_depth = 0;
      _._node$_parent = _._node$_owner = null;
    }, DrawerController: function DrawerController() {
    }, DrawerControllerState: function DrawerControllerState() {
    }, _DrawerControllerState_State_SingleTickerProviderStateMixin: function _DrawerControllerState_State_SingleTickerProviderStateMixin() {
    }, ClipContext: function ClipContext() {
    }, ClipContext_clipPathAndPaint_closure: function ClipContext_clipPathAndPaint_closure(t0, t1) {
      this.$this = t0;
      this.path = t1;
    }, ClipContext_clipRRectAndPaint_closure: function ClipContext_clipRRectAndPaint_closure(t0, t1) {
      this.$this = t0;
      this.rrect = t1;
    }, ClipContext_clipRectAndPaint_closure: function ClipContext_clipRectAndPaint_closure(t0, t1) {
      this.$this = t0;
      this.rect = t1;
    },
    Decoration_lerp: function(a, b, t) {
      var _null = null,
        t1 = a == null;
      if (t1 && b == null)
        return;
      if (t1) {
        t1 = b.lerpFrom$2(_null, t);
        return t1 == null ? b : t1;
      }
      if (b == null) {
        t1 = a.lerpTo$2(_null, t);
        return t1 == null ? a : t1;
      }
      if (t === 0)
        return a;
      if (t === 1)
        return b;
      t1 = b.lerpFrom$2(a, t);
      if (t1 == null)
        t1 = a.lerpTo$2(b, t);
      if (t1 == null) {
        if (typeof t !== "number")
          return t.$lt();
        if (t < 0.5) {
          t1 = a.lerpTo$2(_null, t * 2);
          if (t1 == null)
            t1 = a;
        } else {
          t1 = b.lerpFrom$2(_null, (t - 0.5) * 2);
          if (t1 == null)
            t1 = b;
        }
      }
      return t1;
    },
    Decoration: function Decoration() {
    },
    BoxPainter: function BoxPainter() {
    }
  },
  R = {
    Tween$: function(begin, end, $T) {
      return new R.Tween(begin, end, [$T]);
    },
    CurveTween$: function(curve) {
      return new R.CurveTween(curve);
    },
    Animatable: function Animatable() {
    },
    _AnimatedEvaluation: function _AnimatedEvaluation(t0, t1, t2) {
      this.parent = t0;
      this._evaluatable = t1;
      this.$ti = t2;
    },
    _ChainedEvaluation: function _ChainedEvaluation(t0, t1, t2) {
      this._tween$_parent = t0;
      this._evaluatable = t1;
      this.$ti = t2;
    },
    Tween: function Tween(t0, t1, t2) {
      this.begin = t0;
      this.end = t1;
      this.$ti = t2;
    },
    ReverseTween: function ReverseTween(t0, t1, t2, t3) {
      var _ = this;
      _.parent = t0;
      _.begin = t1;
      _.end = t2;
      _.$ti = t3;
    },
    ColorTween: function ColorTween(t0, t1) {
      this.begin = t0;
      this.end = t1;
    },
    RectTween: function RectTween() {
    },
    IntTween: function IntTween(t0, t1) {
      this.begin = t0;
      this.end = t1;
    },
    CurveTween: function CurveTween(t0) {
      this.curve = t0;
    },
    __AnimatedEvaluation_Animation_AnimationWithParentMixin: function __AnimatedEvaluation_Animation_AnimationWithParentMixin() {
    },
    ObserverList: function ObserverList(t0, t1) {
      var _ = this;
      _._list = t0;
      _._isDirty = false;
      _._observer_list$_set = null;
      _.$ti = t1;
    },
    Velocity: function Velocity(t0) {
      this.pixelsPerSecond = t0;
    },
    VelocityEstimate: function VelocityEstimate(t0, t1, t2, t3) {
      var _ = this;
      _.pixelsPerSecond = t0;
      _.confidence = t1;
      _.duration = t2;
      _.offset = t3;
    },
    _PointAtTime: function _PointAtTime(t0, t1) {
      this.time = t0;
      this.point = t1;
    },
    VelocityTracker: function VelocityTracker(t0) {
      this._samples = t0;
      this._velocity_tracker$_index = 0;
    },
    InkResponse$: function(borderRadius, child, containedInkWell, customBorder, enableFeedback, excludeFromSemantics, highlightColor, highlightShape, key, onDoubleTap, onHighlightChanged, onLongPress, onTap, onTapCancel, onTapDown, radius, splashColor, splashFactory) {
      return new R.InkResponse(child, onTap, onTapDown, onTapCancel, onDoubleTap, onLongPress, onHighlightChanged, containedInkWell, highlightShape, radius, borderRadius, customBorder, highlightColor, splashColor, splashFactory, true, false, key);
    },
    InteractiveInkFeature: function InteractiveInkFeature() {
    },
    InteractiveInkFeatureFactory: function InteractiveInkFeatureFactory() {
    },
    InkResponse: function InkResponse(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17) {
      var _ = this;
      _.child = t0;
      _.onTap = t1;
      _.onTapDown = t2;
      _.onTapCancel = t3;
      _.onDoubleTap = t4;
      _.onLongPress = t5;
      _.onHighlightChanged = t6;
      _.containedInkWell = t7;
      _.highlightShape = t8;
      _.radius = t9;
      _.borderRadius = t10;
      _.customBorder = t11;
      _.highlightColor = t12;
      _.splashColor = t13;
      _.splashFactory = t14;
      _.enableFeedback = t15;
      _.excludeFromSemantics = t16;
      _.key = t17;
    },
    _InkResponseState: function _InkResponseState(t0, t1, t2) {
      var _ = this;
      _._lastHighlight = _._currentSplash = _._splashes = null;
      _.AutomaticKeepAliveClientMixin__keepAliveHandle = t0;
      _._widget = null;
      _._debugLifecycleState = t1;
      _._element = null;
      _.$ti = t2;
    },
    _InkResponseState__createInkFeature_onRemoved: function _InkResponseState__createInkFeature_onRemoved(t0, t1) {
      this._box_0 = t0;
      this.$this = t1;
    },
    _InkResponseState_build_closure: function _InkResponseState_build_closure(t0, t1) {
      this.$this = t0;
      this.context = t1;
    },
    InkWell: function InkWell(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17) {
      var _ = this;
      _.child = t0;
      _.onTap = t1;
      _.onTapDown = t2;
      _.onTapCancel = t3;
      _.onDoubleTap = t4;
      _.onLongPress = t5;
      _.onHighlightChanged = t6;
      _.containedInkWell = t7;
      _.highlightShape = t8;
      _.radius = t9;
      _.borderRadius = t10;
      _.customBorder = t11;
      _.highlightColor = t12;
      _.splashColor = t13;
      _.splashFactory = t14;
      _.enableFeedback = t15;
      _.excludeFromSemantics = t16;
      _.key = t17;
    },
    __InkResponseState_State_AutomaticKeepAliveClientMixin: function __InkResponseState_State_AutomaticKeepAliveClientMixin() {
    },
    TextTheme$: function(body1, body2, button, caption, display1, display2, display3, display4, headline, overline, subhead, subtitle, title) {
      return new R.TextTheme(display4, display3, display2, display1, headline, title, subhead, body2, body1, caption, button, subtitle, overline);
    },
    TextTheme_lerp: function(a, b, t) {
      var t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, _null = null,
        t1 = a == null,
        t2 = t1 ? _null : a.display4,
        t3 = b == null;
      t2 = A.TextStyle_lerp(t2, t3 ? _null : b.display4, t);
      t4 = t1 ? _null : a.display3;
      t4 = A.TextStyle_lerp(t4, t3 ? _null : b.display3, t);
      t5 = t1 ? _null : a.display2;
      t5 = A.TextStyle_lerp(t5, t3 ? _null : b.display2, t);
      t6 = t1 ? _null : a.display1;
      t6 = A.TextStyle_lerp(t6, t3 ? _null : b.display1, t);
      t7 = t1 ? _null : a.headline;
      t7 = A.TextStyle_lerp(t7, t3 ? _null : b.headline, t);
      t8 = t1 ? _null : a.title;
      t8 = A.TextStyle_lerp(t8, t3 ? _null : b.title, t);
      t9 = t1 ? _null : a.subhead;
      t9 = A.TextStyle_lerp(t9, t3 ? _null : b.subhead, t);
      t10 = t1 ? _null : a.body2;
      t10 = A.TextStyle_lerp(t10, t3 ? _null : b.body2, t);
      t11 = t1 ? _null : a.body1;
      t11 = A.TextStyle_lerp(t11, t3 ? _null : b.body1, t);
      t12 = t1 ? _null : a.caption;
      t12 = A.TextStyle_lerp(t12, t3 ? _null : b.caption, t);
      t13 = t1 ? _null : a.button;
      t13 = A.TextStyle_lerp(t13, t3 ? _null : b.button, t);
      t14 = t1 ? _null : a.subtitle;
      t14 = A.TextStyle_lerp(t14, t3 ? _null : b.subtitle, t);
      t1 = t1 ? _null : a.overline;
      return R.TextTheme$(t11, t10, t13, t12, t6, t5, t4, t2, t7, A.TextStyle_lerp(t1, t3 ? _null : b.overline, t), t9, t14, t8);
    },
    TextTheme: function TextTheme(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12) {
      var _ = this;
      _.display4 = t0;
      _.display3 = t1;
      _.display2 = t2;
      _.display1 = t3;
      _.headline = t4;
      _.title = t5;
      _.subhead = t6;
      _.body2 = t7;
      _.body1 = t8;
      _.caption = t9;
      _.button = t10;
      _.subtitle = t11;
      _.overline = t12;
    },
    ScrollPositionWithSingleContext$: function(context, debugLabel, initialPixels, keepScrollOffset, oldPosition, physics) {
      var t1 = {func: 1, ret: -1},
        t2 = [t1];
      t1 = [t1];
      t1 = new R.ScrollPositionWithSingleContext(C.ScrollDirection_0, physics, context, keepScrollOffset, debugLabel, new B.ValueNotifier(false, new R.ObserverList(H.setRuntimeTypeInfo([], t2), t1), [P.bool]), new R.ObserverList(H.setRuntimeTypeInfo([], t2), t1));
      t1.ScrollPosition$5$context$debugLabel$keepScrollOffset$oldPosition$physics(context, debugLabel, keepScrollOffset, oldPosition, physics);
      t1.ScrollPositionWithSingleContext$6$context$debugLabel$initialPixels$keepScrollOffset$oldPosition$physics(context, debugLabel, initialPixels, keepScrollOffset, oldPosition, physics);
      return t1;
    },
    ScrollPositionWithSingleContext: function ScrollPositionWithSingleContext(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _._heldPreviousVelocity = 0;
      _._userScrollDirection = t0;
      _._currentDrag = null;
      _.physics = t1;
      _.context = t2;
      _.keepScrollOffset = t3;
      _.debugLabel = t4;
      _._viewportDimension = _._pixels = _._maxScrollExtent = _._minScrollExtent = null;
      _._haveDimensions = false;
      _._didChangeViewportDimensionOrReceiveCorrection = true;
      _._semanticActions = null;
      _.isScrollingNotifier = t5;
      _._activity = null;
      _._listeners = t6;
    },
    Spacer: function Spacer(t0) {
      this.key = t0;
    }
  },
  L = {CupertinoLocalizations: function CupertinoLocalizations() {
    }, _CupertinoLocalizationsDelegate: function _CupertinoLocalizationsDelegate() {
    }, DefaultCupertinoLocalizations: function DefaultCupertinoLocalizations() {
    }, InputDecorationTheme: function InputDecorationTheme() {
    }, ImageStreamCompleter: function ImageStreamCompleter() {
    }, RenderPerformanceOverlay: function RenderPerformanceOverlay(t0, t1, t2, t3) {
      var _ = this;
      _._optionsMask = t0;
      _._rasterizerThreshold = t1;
      _._checkerboardRasterCacheImages = t2;
      _._checkerboardOffscreenLayers = t3;
      _._cachedBaselines = _._size = _._cachedIntrinsicDimensions = null;
      _._debugActivePointers = 0;
      _.debugCreator = _.parentData = null;
      _._debugDoingThisLayout = _._debugDoingThisResize = false;
      _._debugCanParentUseSize = null;
      _._debugMutationsLocked = false;
      _._needsLayout = true;
      _._relayoutBoundary = null;
      _._doingThisLayoutWithCallback = false;
      _._constraints = null;
      _._debugDoingThisPaint = false;
      _._layer = null;
      _._needsCompositingBitsUpdate = false;
      _._needsCompositing = null;
      _._needsPaint = true;
      _._cachedSemanticsConfiguration = null;
      _._needsSemanticsUpdate = true;
      _._semantics = null;
      _._node$_depth = 0;
      _._node$_parent = _._node$_owner = null;
    }, AutomaticKeepAlive: function AutomaticKeepAlive(t0, t1) {
      this.child = t0;
      this.key = t1;
    }, _AutomaticKeepAliveState: function _AutomaticKeepAliveState(t0) {
      var _ = this;
      _._automatic_keep_alive$_child = _._handles = null;
      _._keepingAlive = false;
      _._widget = null;
      _._debugLifecycleState = t0;
      _._element = null;
    }, _AutomaticKeepAliveState__addClient_closure: function _AutomaticKeepAliveState__addClient_closure(t0) {
      this.$this = t0;
    }, _AutomaticKeepAliveState__getChildElement_closure: function _AutomaticKeepAliveState__getChildElement_closure(t0) {
      this._box_0 = t0;
    }, _AutomaticKeepAliveState__createCallback_closure: function _AutomaticKeepAliveState__createCallback_closure(t0, t1) {
      this.$this = t0;
      this.handle = t1;
    }, _AutomaticKeepAliveState__createCallback__closure: function _AutomaticKeepAliveState__createCallback__closure(t0) {
      this.$this = t0;
    }, _AutomaticKeepAliveState__createCallback__closure0: function _AutomaticKeepAliveState__createCallback__closure0(t0) {
      this.$this = t0;
    }, _AutomaticKeepAliveState__createCallback___closure: function _AutomaticKeepAliveState__createCallback___closure(t0) {
      this.$this = t0;
    }, KeepAliveNotification: function KeepAliveNotification(t0) {
      this.handle = t0;
    }, KeepAliveHandle: function KeepAliveHandle(t0) {
      this._listeners = t0;
    }, AutomaticKeepAliveClientMixin: function AutomaticKeepAliveClientMixin() {
    },
    FocusScope_of: function(context) {
      var scope = H.interceptedTypeCheck(context.inheritFromWidgetOfExactType$1(C.Type__FocusScopeMarker_xw8), "$is_FocusScopeMarker"),
        t1 = scope == null ? null : scope.node;
      return t1 == null ? context._owner.focusManager.rootScope : t1;
    },
    _FocusScopeMarker: function _FocusScopeMarker(t0, t1, t2) {
      this.node = t0;
      this.child = t1;
      this.key = t2;
    },
    FocusScope: function FocusScope(t0, t1, t2, t3) {
      var _ = this;
      _.node = t0;
      _.autofocus = t1;
      _.child = t2;
      _.key = t3;
    },
    _FocusScopeState: function _FocusScopeState(t0) {
      var _ = this;
      _._didAutofocus = false;
      _._widget = null;
      _._debugLifecycleState = t0;
      _._element = null;
    },
    Icon$: function(icon, color) {
      return new L.Icon(icon, color, null);
    },
    Icon: function Icon(t0, t1, t2) {
      this.icon = t0;
      this.color = t1;
      this.key = t2;
    },
    _loadAll: function(locale, allDelegates) {
      var t2, output, types, delegates, _i, delegate, t3, inputValue, futureValue, _box_1 = {},
        t1 = [L.LocalizationsDelegate,,];
      H.assertSubtype(allDelegates, "$isIterable", [t1], "$asIterable");
      t2 = P.Type;
      output = P.LinkedHashMap_LinkedHashMap$_empty(t2, null);
      _box_1.pendingList = null;
      types = P.LinkedHashSet_LinkedHashSet(t2);
      delegates = H.setRuntimeTypeInfo([], [t1]);
      for (t1 = allDelegates.length, _i = 0; _i < allDelegates.length; allDelegates.length === t1 || (0, H.throwConcurrentModificationError)(allDelegates), ++_i) {
        delegate = allDelegates[_i];
        delegate.toString;
        t2 = H.getRuntimeTypeArgumentIntercepted(J.getInterceptor$(delegate), delegate, "LocalizationsDelegate", 0);
        if (!types.contains$1(0, new H.TypeImpl(t2)) && delegate.isSupported$1(locale)) {
          types.add$1(0, new H.TypeImpl(t2));
          C.JSArray_methods.add$1(delegates, delegate);
        }
      }
      for (t1 = delegates.length, t2 = [L._Pending], _i = 0; _i < delegates.length; delegates.length === t1 || (0, H.throwConcurrentModificationError)(delegates), ++_i) {
        t3 = {};
        delegate = delegates[_i];
        inputValue = delegate.load$1(0, locale);
        t3.completedValue = null;
        futureValue = inputValue.then$1$1(new L._loadAll_closure(t3), null);
        t3 = t3.completedValue;
        if (t3 != null)
          output.$indexSet(0, new H.TypeImpl(H.getRuntimeTypeArgument(delegate, "LocalizationsDelegate", 0)), t3);
        else {
          t3 = _box_1.pendingList;
          if (t3 == null)
            t3 = _box_1.pendingList = H.setRuntimeTypeInfo([], t2);
          C.JSArray_methods.add$1(t3, new L._Pending(delegate, futureValue));
        }
      }
      t1 = _box_1.pendingList;
      if (t1 == null)
        return new O.SynchronousFuture(output, [[P.Map, P.Type,,]]);
      t2 = [P.Future,,];
      t3 = H.getTypeArgumentByIndex(t1, 0);
      return P.Future_wait(new H.MappedListIterable(t1, H.functionTypeCheck(new L._loadAll_closure0(), {func: 1, ret: t2, args: [t3]}), [t3, t2]), null).then$1$1(new L._loadAll_closure1(_box_1, output), [P.Map, P.Type,,]);
    },
    Localizations_localeOf: function(context, nullOk) {
      var scope = H.interceptedTypeCheck(context.inheritFromWidgetOfExactType$1(C.Type__LocalizationsScope_Lpb), "$is_LocalizationsScope");
      if (scope == null)
        return;
      return scope.localizationsState._localizations$_locale;
    },
    Localizations_of: function(context, type, $T) {
      var scope = H.interceptedTypeCheck(context.inheritFromWidgetOfExactType$1(C.Type__LocalizationsScope_Lpb), "$is_LocalizationsScope"),
        t1 = scope == null ? null : scope.localizationsState;
      return t1 == null ? null : H.assertSubtypeOfRuntimeType(J.$index$asx(t1._typeToResources, type), $T);
    },
    _Pending: function _Pending(t0, t1) {
      this.delegate = t0;
      this.futureValue = t1;
    },
    _loadAll_closure: function _loadAll_closure(t0) {
      this._box_0 = t0;
    },
    _loadAll_closure0: function _loadAll_closure0() {
    },
    _loadAll_closure1: function _loadAll_closure1(t0, t1) {
      this._box_1 = t0;
      this.output = t1;
    },
    LocalizationsDelegate: function LocalizationsDelegate() {
    },
    WidgetsLocalizations: function WidgetsLocalizations() {
    },
    _WidgetsLocalizationsDelegate: function _WidgetsLocalizationsDelegate() {
    },
    DefaultWidgetsLocalizations: function DefaultWidgetsLocalizations() {
    },
    _LocalizationsScope: function _LocalizationsScope(t0, t1, t2, t3) {
      var _ = this;
      _.localizationsState = t0;
      _.typeToResources = t1;
      _.child = t2;
      _.key = t3;
    },
    Localizations: function Localizations(t0, t1, t2, t3) {
      var _ = this;
      _.locale = t0;
      _.delegates = t1;
      _.child = t2;
      _.key = t3;
    },
    _LocalizationsState: function _LocalizationsState(t0, t1, t2) {
      var _ = this;
      _._localizedResourcesScopeKey = t0;
      _._typeToResources = t1;
      _._widget = _._localizations$_locale = null;
      _._debugLifecycleState = t2;
      _._element = null;
    },
    _LocalizationsState_load_closure: function _LocalizationsState_load_closure(t0) {
      this._box_0 = t0;
    },
    _LocalizationsState_load_closure0: function _LocalizationsState_load_closure0(t0, t1) {
      this.$this = t0;
      this.locale = t1;
    },
    _LocalizationsState_load__closure: function _LocalizationsState_load__closure(t0, t1, t2) {
      this.$this = t0;
      this.value = t1;
      this.locale = t2;
    },
    GlowingOverscrollIndicator$: function(axisDirection, child, color) {
      return new L.GlowingOverscrollIndicator(axisDirection, color, child, null);
    },
    _GlowController$: function(axis, color, vsync) {
      var t4, t5, t6, decelerator, _null = null,
        t1 = P.double,
        t2 = [t1],
        t3 = new R.Tween(0, 0, t2);
      t2 = new R.Tween(0, 0, t2);
      t4 = {func: 1, ret: -1};
      t5 = new L._GlowController(C._GlowState_0, t3, t2, 0.5, 0.5, color, axis, new R.ObserverList(H.setRuntimeTypeInfo([], [t4]), [t4]));
      t6 = G.AnimationController$(C.AnimationBehavior_0, _null, _null, 0, 1, _null, vsync);
      t6.addStatusListener$1(t5.get$_changePhase());
      t5._glowController = t6;
      decelerator = S.CurvedAnimation$(C.C__DecelerateCurve, t6, _null);
      decelerator.parent.addListener$1(0, H.functionTypeCheck(t5.get$notifyListeners(), t4));
      H.assertSubtype(decelerator, "$isAnimation", [t1], "$asAnimation");
      t5.set$_glowOpacity(new R._AnimatedEvaluation(decelerator, t3, [t1]));
      t5.set$_glowSize(new R._AnimatedEvaluation(decelerator, t2, [t1]));
      t5._displacementTicker = vsync.createTicker$1(t5.get$_tickDisplacement());
      return t5;
    },
    GlowingOverscrollIndicator: function GlowingOverscrollIndicator(t0, t1, t2, t3) {
      var _ = this;
      _.axisDirection = t0;
      _.color = t1;
      _.child = t2;
      _.key = t3;
    },
    _GlowingOverscrollIndicatorState: function _GlowingOverscrollIndicatorState(t0, t1, t2) {
      var _ = this;
      _._lastNotificationType = _._leadingAndTrailingListener = _._trailingController = _._leadingController = null;
      _._accepted = t0;
      _.TickerProviderStateMixin__tickers = t1;
      _._widget = null;
      _._debugLifecycleState = t2;
      _._element = null;
    },
    _GlowState: function _GlowState(t0) {
      this._overscroll_indicator$_name = t0;
    },
    _GlowController: function _GlowController(t0, t1, t2, t3, t4, t5, t6, t7) {
      var _ = this;
      _._overscroll_indicator$_state = t0;
      _._pullRecedeTimer = _._glowController = null;
      _._glowOpacityTween = t1;
      _._glowOpacity = null;
      _._glowSizeTween = t2;
      _._displacementTickerLastElapsed = _._displacementTicker = _._glowSize = null;
      _._displacementTarget = t3;
      _._displacement = t4;
      _._pullDistance = 0;
      _._overscroll_indicator$_color = t5;
      _._axis = t6;
      _._listeners = t7;
    },
    _GlowController_pull_closure: function _GlowController_pull_closure(t0) {
      this.$this = t0;
    },
    _GlowingOverscrollIndicatorPainter: function _GlowingOverscrollIndicatorPainter(t0, t1, t2, t3) {
      var _ = this;
      _.leadingController = t0;
      _.trailingController = t1;
      _.axisDirection = t2;
      _._repaint = t3;
    },
    OverscrollIndicatorNotification: function OverscrollIndicatorNotification(t0, t1) {
      this.leading = t0;
      this.ViewportNotificationMixin__depth = t1;
    },
    _OverscrollIndicatorNotification_Notification_ViewportNotificationMixin: function _OverscrollIndicatorNotification_Notification_ViewportNotificationMixin() {
    },
    __GlowingOverscrollIndicatorState_State_TickerProviderStateMixin: function __GlowingOverscrollIndicatorState_State_TickerProviderStateMixin() {
    },
    PerformanceOverlay: function PerformanceOverlay(t0, t1, t2, t3) {
      var _ = this;
      _.optionsMask = t0;
      _.checkerboardRasterCacheImages = t1;
      _.checkerboardOffscreenLayers = t2;
      _.key = t3;
    },
    BouncingScrollPhysics__applyFriction: function(extentOutside, absDelta, gamma) {
      var deltaToLimit, total;
      if (extentOutside > 0) {
        deltaToLimit = extentOutside / gamma;
        if (absDelta < deltaToLimit)
          return absDelta * gamma;
        total = 0 + extentOutside;
        absDelta -= deltaToLimit;
      } else
        total = 0;
      return total + absDelta;
    },
    ScrollPhysics: function ScrollPhysics() {
    },
    BouncingScrollPhysics: function BouncingScrollPhysics(t0) {
      this.parent = t0;
    },
    ClampingScrollPhysics: function ClampingScrollPhysics(t0) {
      this.parent = t0;
    },
    AlwaysScrollableScrollPhysics: function AlwaysScrollableScrollPhysics(t0) {
      this.parent = t0;
    },
    DefaultTextStyle$: function(child, maxLines, overflow, softWrap, style, textAlign) {
      return new L.DefaultTextStyle(style, textAlign, true, overflow, maxLines, child, null);
    },
    Text$: function(data, style, textAlign) {
      return new L.Text(data, style, textAlign, null);
    },
    DefaultTextStyle: function DefaultTextStyle(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _.style = t0;
      _.textAlign = t1;
      _.softWrap = t2;
      _.overflow = t3;
      _.maxLines = t4;
      _.child = t5;
      _.key = t6;
    },
    Text: function Text(t0, t1, t2, t3) {
      var _ = this;
      _.data = t0;
      _.style = t1;
      _.textAlign = t2;
      _.key = t3;
    },
    SvgPathSegType: function SvgPathSegType(t0) {
      this._path_segment_type$_name = t0;
    }
  },
  D = {
    CupertinoPageRoute__isPopGestureEnabled: function(route, $T) {
      H.assertSubtype(route, "$isPageRoute", [$T], "$asPageRoute");
      if (route.get$isFirst())
        return false;
      if (route.get$willHandlePopInternally())
        return false;
      if (route._routes$_controller._status !== C.AnimationStatus_3)
        return false;
      if ($.$get$CupertinoPageRoute__popGestureInProgress().contains$1(0, route))
        return false;
      return true;
    },
    CupertinoPageRoute__startPopGesture: function(route, $T) {
      var t2, t3, t1 = {};
      H.assertSubtype(route, "$isPageRoute", [$T], "$asPageRoute");
      $.$get$CupertinoPageRoute__popGestureInProgress().add$1(0, route);
      t1.backController = null;
      t2 = route._navigator$_navigator;
      t3 = route._routes$_controller;
      t2.didStartUserGesture$0();
      return t1.backController = new D._CupertinoBackGestureController(t2, t3, new D.CupertinoPageRoute__startPopGesture_closure(t1, route), [$T]);
    },
    CupertinoPageRoute_buildPageTransitions: function(route, context, animation, secondaryAnimation, child, $T) {
      var t1, t2;
      H.assertSubtype(route, "$isPageRoute", [$T], "$asPageRoute");
      t1 = [P.double];
      H.assertSubtype(animation, "$isAnimation", t1, "$asAnimation");
      H.assertSubtype(secondaryAnimation, "$isAnimation", t1, "$asAnimation");
      t1 = $.$get$CupertinoPageRoute__popGestureInProgress().contains$1(0, route);
      t1 = t1 ? animation : S.CurvedAnimation$(C.Cubic_xDo, animation, C.Cubic_JUR);
      t2 = Q.Offset;
      return new D.CupertinoPageTransition(t1.drive$1$1($.$get$_kRightMiddleTween(), t2), S.CurvedAnimation$(C.Cubic_xDo, secondaryAnimation, C.Cubic_JUR).drive$1$1($.$get$_kMiddleLeftTween(), t2), S.CurvedAnimation$(C.Cubic_xDo, animation, null).drive$1$1($.$get$_kGradientShadowTween(), Z.Decoration), new D._CupertinoBackGestureDetector(child, new D.CupertinoPageRoute_buildPageTransitions_closure(route, $T), new D.CupertinoPageRoute_buildPageTransitions_closure0(route, $T), null, [$T]), null);
    },
    _CupertinoEdgeShadowDecoration_lerp: function(a, b, t) {
      var t1 = a == null;
      if (t1 && b == null)
        return;
      t1 = t1 ? null : a.edgeGradient;
      return new D._CupertinoEdgeShadowDecoration(T.LinearGradient_lerp(t1, b == null ? null : b.edgeGradient, t));
    },
    CupertinoPageRoute__startPopGesture_closure: function CupertinoPageRoute__startPopGesture_closure(t0, t1) {
      this._box_0 = t0;
      this.route = t1;
    },
    CupertinoPageRoute_buildPageTransitions_closure: function CupertinoPageRoute_buildPageTransitions_closure(t0, t1) {
      this.route = t0;
      this.T = t1;
    },
    CupertinoPageRoute_buildPageTransitions_closure0: function CupertinoPageRoute_buildPageTransitions_closure0(t0, t1) {
      this.route = t0;
      this.T = t1;
    },
    CupertinoPageTransition: function CupertinoPageTransition(t0, t1, t2, t3, t4) {
      var _ = this;
      _._primaryPositionAnimation = t0;
      _._secondaryPositionAnimation = t1;
      _._primaryShadowAnimation = t2;
      _.child = t3;
      _.key = t4;
    },
    _CupertinoBackGestureDetector: function _CupertinoBackGestureDetector(t0, t1, t2, t3, t4) {
      var _ = this;
      _.child = t0;
      _.enabledCallback = t1;
      _.onStartPopGesture = t2;
      _.key = t3;
      _.$ti = t4;
    },
    _CupertinoBackGestureDetectorState: function _CupertinoBackGestureDetectorState(t0, t1) {
      var _ = this;
      _._widget = _._recognizer = _._backGestureController = null;
      _._debugLifecycleState = t0;
      _._element = null;
      _.$ti = t1;
    },
    _CupertinoBackGestureController: function _CupertinoBackGestureController(t0, t1, t2, t3) {
      var _ = this;
      _.navigator = t0;
      _.controller = t1;
      _.onEnded = t2;
      _._animating = false;
      _.$ti = t3;
    },
    _CupertinoEdgeShadowDecoration: function _CupertinoEdgeShadowDecoration(t0) {
      this.edgeGradient = t0;
    },
    _CupertinoEdgeShadowPainter: function _CupertinoEdgeShadowPainter(t0, t1) {
      this._route$_decoration = t0;
      this.onChanged = t1;
    },
    Key: function Key() {
    },
    LocalKey: function LocalKey() {
    },
    ValueKey: function ValueKey(t0, t1) {
      this.value = t0;
      this.$ti = t1;
    },
    _TypeLiteral: function _TypeLiteral(t0) {
      this.$ti = t0;
    },
    debugPrintThrottled: function(message, wrapWidth) {
      var t1, t2,
        messageLines = message == null ? null : H.setRuntimeTypeInfo(message.split("\n"), [P.String]);
      if (messageLines == null)
        messageLines = H.setRuntimeTypeInfo(["null"], [P.String]);
      if (wrapWidth != null) {
        t1 = P.String;
        t2 = H.getTypeArgumentByIndex(messageLines, 0);
        $.$get$_debugPrintBuffer().addAll$1(0, new H.ExpandIterable(messageLines, H.functionTypeCheck(new D.debugPrintThrottled_closure(wrapWidth), {func: 1, ret: [P.Iterable, t1], args: [t2]}), [t2, t1]));
      } else
        $.$get$_debugPrintBuffer().addAll$1(0, messageLines);
      if (!$._debugPrintScheduled)
        D._debugPrintTask();
    },
    _debugPrintTask: function() {
      var line,
        t1 = $._debugPrintScheduled = false,
        t2 = $.$get$_debugPrintStopwatch();
      if (P.Duration$(t2.get$elapsedMicroseconds(), 0, 0)._duration > 1000000) {
        t2.stop$0(0);
        t2.reset$0(0);
        $._debugPrintedCharacters = 0;
      }
      while (true) {
        if ($._debugPrintedCharacters < 12288) {
          t2 = $.$get$_debugPrintBuffer();
          t2 = !t2.get$isEmpty(t2);
        } else
          t2 = t1;
        if (!t2)
          break;
        line = $.$get$_debugPrintBuffer().removeFirst$0();
        $._debugPrintedCharacters = $._debugPrintedCharacters + line.length;
        H.printString(H.S(line));
      }
      t1 = $.$get$_debugPrintBuffer();
      if (!t1.get$isEmpty(t1)) {
        $._debugPrintScheduled = true;
        $._debugPrintedCharacters = 0;
        P.Timer_Timer(C.Duration_1000000, D.print___debugPrintTask$closure());
        if ($._debugPrintCompleter == null) {
          t1 = -1;
          $._debugPrintCompleter = new P._AsyncCompleter(new P._Future($.Zone__current, [t1]), [t1]);
        }
      } else {
        $.$get$_debugPrintStopwatch().start$0(0);
        t1 = $._debugPrintCompleter;
        if (t1 != null)
          t1.complete$0(0);
        $._debugPrintCompleter = null;
      }
    },
    debugPrintDone: function() {
      var t1 = $._debugPrintCompleter;
      t1 = t1 == null ? null : t1.future;
      if (t1 == null) {
        t1 = new P._Future($.Zone__current, [-1]);
        t1._asyncComplete$1(null);
      }
      return t1;
    },
    debugWordWrap: function($async$message, $async$width, $async$wrapIndent) {
      return P._makeSyncStarIterable(function() {
        var message = $async$message,
          width = $async$width,
          wrapIndent = $async$wrapIndent;
        var $async$goto = 0, $async$handler = 2, $async$currentError, t2, prefix, index, index0, start, startForLengthCalculations, addPrefix, mode, lastWordStart, lastWordEnd, t3, t1;
        return function $async$debugWordWrap($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            $async$outer:
              switch ($async$goto) {
                case 0:
                  // Function start
                  t1 = message.length;
                  if (t1 >= width) {
                    t2 = J.trimLeft$0$s(message);
                    if (0 >= t2.length) {
                      H.ioore(t2, 0);
                      // goto return
                      $async$goto = 1;
                      break;
                    }
                    t2 = t2[0] === "#";
                  } else
                    t2 = true;
                  $async$goto = t2 ? 3 : 4;
                  break;
                case 3:
                  // then
                  $async$goto = 5;
                  return message;
                case 5:
                  // after yield
                  // goto return
                  $async$goto = 1;
                  break;
                case 4:
                  // join
                  t2 = $.$get$_indentPattern();
                  t2 = t2._execAnchored$2(message, 0)._match;
                  if (0 >= t2.length) {
                    H.ioore(t2, 0);
                    // goto return
                    $async$goto = 1;
                    break;
                  }
                  prefix = wrapIndent + C.JSString_methods.$mul(" ", t2[0].length);
                  index = prefix.length;
                  t2 = J.getInterceptor$s(message), index0 = index, start = 0, startForLengthCalculations = 0, addPrefix = false, mode = C._WordWrapParseMode_0, lastWordStart = null, lastWordEnd = null;
                case 6:
                  // for condition
                  // trivial condition
                case 8:
                  // switch
                  switch (mode) {
                    case C._WordWrapParseMode_0:
                      // goto case
                      $async$goto = 10;
                      break;
                    case C._WordWrapParseMode_1:
                      // goto case
                      $async$goto = 11;
                      break;
                    case C._WordWrapParseMode_2:
                      // goto case
                      $async$goto = 12;
                      break;
                    default:
                      // goto after switch
                      $async$goto = 9;
                      break;
                  }
                  break;
                case 10:
                  // case
                  while (true) {
                    if (index0 < t1) {
                      if (index0 < 0) {
                        H.ioore(message, index0);
                        // goto return
                        $async$goto = 1;
                        break $async$outer;
                      }
                      t3 = message[index0] === " ";
                    } else
                      t3 = false;
                    if (!t3)
                      break;
                    ++index0;
                  }
                  lastWordStart = index0;
                  mode = C._WordWrapParseMode_1;
                  // goto after switch
                  $async$goto = 9;
                  break;
                case 11:
                  // case
                  while (true) {
                    if (index0 < t1) {
                      if (index0 < 0) {
                        H.ioore(message, index0);
                        // goto return
                        $async$goto = 1;
                        break $async$outer;
                      }
                      t3 = message[index0] !== " ";
                    } else
                      t3 = false;
                    if (!t3)
                      break;
                    ++index0;
                  }
                  mode = C._WordWrapParseMode_2;
                  // goto after switch
                  $async$goto = 9;
                  break;
                case 12:
                  // case
                  t3 = index0 - startForLengthCalculations;
                  $async$goto = t3 > width || index0 === t1 ? 13 : 15;
                  break;
                case 13:
                  // then
                  if (t3 <= width || lastWordEnd == null)
                    lastWordEnd = index0;
                  $async$goto = addPrefix ? 16 : 18;
                  break;
                case 16:
                  // then
                  $async$goto = 19;
                  return prefix + t2.substring$2(message, start, lastWordEnd);
                case 19:
                  // after yield
                  // goto join
                  $async$goto = 17;
                  break;
                case 18:
                  // else
                  $async$goto = 20;
                  return t2.substring$2(message, start, lastWordEnd);
                case 20:
                  // after yield
                  addPrefix = true;
                case 17:
                  // join
                  if (lastWordEnd >= t1) {
                    // goto return
                    $async$goto = 1;
                    break;
                  }
                  if (lastWordEnd === index0) {
                    while (true) {
                      if (index0 < t1) {
                        if (index0 < 0) {
                          H.ioore(message, index0);
                          // goto return
                          $async$goto = 1;
                          break $async$outer;
                        }
                        t3 = message[index0] === " ";
                      } else
                        t3 = false;
                      if (!t3)
                        break;
                      ++index0;
                    }
                    start = index0;
                    mode = C._WordWrapParseMode_1;
                  } else {
                    start = lastWordStart;
                    mode = C._WordWrapParseMode_2;
                  }
                  if (typeof start !== "number") {
                    start.$sub();
                    // goto return
                    $async$goto = 1;
                    break;
                  }
                  startForLengthCalculations = start - index;
                  lastWordEnd = null;
                  // goto join
                  $async$goto = 14;
                  break;
                case 15:
                  // else
                  lastWordEnd = index0;
                  mode = C._WordWrapParseMode_0;
                case 14:
                  // join
                  // goto after switch
                  $async$goto = 9;
                  break;
                case 9:
                  // after switch
                  // goto for condition
                  $async$goto = 6;
                  break;
                case 7:
                  // after for
                case 1:
                  // return
                  return P._IterationMarker_endOfIteration();
                case 2:
                  // rethrow
                  return P._IterationMarker_uncaughtError($async$currentError);
              }
        };
      }, P.String);
    },
    debugPrintThrottled_closure: function debugPrintThrottled_closure(t0) {
      this.wrapWidth = t0;
    },
    _WordWrapParseMode: function _WordWrapParseMode(t0) {
      this._print$_name = t0;
    },
    GestureDisposition: function GestureDisposition(t0) {
      this._arena$_name = t0;
    },
    GestureArenaMember: function GestureArenaMember() {
    },
    GestureArenaEntry: function GestureArenaEntry(t0, t1, t2) {
      this._arena = t0;
      this._pointer = t1;
      this._member = t2;
    },
    _GestureArena: function _GestureArena(t0) {
      var _ = this;
      _.members = t0;
      _.isOpen = true;
      _.hasPendingSweep = _.isHeld = false;
      _.eagerWinner = null;
    },
    GestureArenaManager: function GestureArenaManager(t0) {
      this._arenas = t0;
    },
    GestureArenaManager_add_closure: function GestureArenaManager_add_closure(t0, t1) {
      this.$this = t0;
      this.pointer = t1;
    },
    GestureArenaManager__tryToResolveArena_closure: function GestureArenaManager__tryToResolveArena_closure(t0, t1, t2) {
      this.$this = t0;
      this.pointer = t1;
      this.state = t2;
    },
    _maxBy: function(input, keyFunc, $T) {
      var maxValue, maxKey, _i, value, key;
      H.assertSubtype(input, "$isIterable", [$T], "$asIterable");
      H.functionTypeCheck(keyFunc, {func: 1, args: [$T]});
      for (maxValue = null, maxKey = null, _i = 0; _i < 4; ++_i) {
        value = input[_i];
        key = keyFunc.call$1(value);
        if (maxKey == null || J.$gt$n(key, maxKey)) {
          maxKey = key;
          maxValue = value;
        }
      }
      return maxValue;
    },
    MaterialPointArcTween: function MaterialPointArcTween(t0, t1) {
      var _ = this;
      _._arc$_dirty = true;
      _._endAngle = _._beginAngle = _._arc$_radius = _._center = null;
      _.begin = t0;
      _.end = t1;
    },
    MaterialPointArcTween__initialize_sweepAngle: function MaterialPointArcTween__initialize_sweepAngle(t0, t1) {
      this.$this = t0;
      this.distanceFromAtoB = t1;
    },
    _CornerId: function _CornerId(t0) {
      this._arc$_name = t0;
    },
    _Diagonal: function _Diagonal(t0, t1) {
      this.beginId = t0;
      this.endId = t1;
    },
    MaterialRectArcTween: function MaterialRectArcTween(t0, t1) {
      var _ = this;
      _._arc$_dirty = true;
      _._endArc = _._beginArc = null;
      _.begin = t0;
      _.end = t1;
    },
    MaterialRectArcTween__initialize_closure: function MaterialRectArcTween__initialize_closure(t0, t1) {
      this.$this = t0;
      this.centersVector = t1;
    },
    BottomAppBarTheme: function BottomAppBarTheme(t0, t1, t2) {
      this.color = t0;
      this.elevation = t1;
      this.shape = t2;
    },
    FrictionSimulation: function FrictionSimulation(t0, t1, t2, t3, t4) {
      var _ = this;
      _._friction_simulation$_drag = t0;
      _._dragLog = t1;
      _._friction_simulation$_x = t2;
      _._v = t3;
      _.tolerance = t4;
    },
    GestureDetector$: function(behavior, child, dragStartBehavior, excludeFromSemantics, key, onDoubleTap, onHorizontalDragCancel, onHorizontalDragDown, onHorizontalDragEnd, onHorizontalDragUpdate, onLongPress, onPanDown, onPanEnd, onPanUpdate, onTap, onTapCancel, onTapDown, onVerticalDragEnd, onVerticalDragUpdate) {
      return new D.GestureDetector(child, onTapDown, onTap, onTapCancel, onDoubleTap, onLongPress, onVerticalDragUpdate, onVerticalDragEnd, onHorizontalDragDown, onHorizontalDragUpdate, onHorizontalDragEnd, onHorizontalDragCancel, onPanDown, onPanUpdate, onPanEnd, behavior, excludeFromSemantics, dragStartBehavior, key);
    },
    RawGestureDetector$: function(behavior, child, excludeFromSemantics, gestures, key) {
      return new D.RawGestureDetector(child, gestures, behavior, excludeFromSemantics, key);
    },
    GestureRecognizerFactory: function GestureRecognizerFactory() {
    },
    GestureRecognizerFactoryWithHandlers: function GestureRecognizerFactoryWithHandlers(t0, t1, t2) {
      this._constructor = t0;
      this._initializer = t1;
      this.$ti = t2;
    },
    GestureDetector: function GestureDetector(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18) {
      var _ = this;
      _.child = t0;
      _.onTapDown = t1;
      _.onTap = t2;
      _.onTapCancel = t3;
      _.onDoubleTap = t4;
      _.onLongPress = t5;
      _.onVerticalDragUpdate = t6;
      _.onVerticalDragEnd = t7;
      _.onHorizontalDragDown = t8;
      _.onHorizontalDragUpdate = t9;
      _.onHorizontalDragEnd = t10;
      _.onHorizontalDragCancel = t11;
      _.onPanDown = t12;
      _.onPanUpdate = t13;
      _.onPanEnd = t14;
      _.behavior = t15;
      _.excludeFromSemantics = t16;
      _.dragStartBehavior = t17;
      _.key = t18;
    },
    GestureDetector_build_closure: function GestureDetector_build_closure(t0) {
      this.$this = t0;
    },
    GestureDetector_build_closure0: function GestureDetector_build_closure0(t0) {
      this.$this = t0;
    },
    GestureDetector_build_closure1: function GestureDetector_build_closure1(t0) {
      this.$this = t0;
    },
    GestureDetector_build_closure2: function GestureDetector_build_closure2(t0) {
      this.$this = t0;
    },
    GestureDetector_build_closure3: function GestureDetector_build_closure3(t0) {
      this.$this = t0;
    },
    GestureDetector_build_closure4: function GestureDetector_build_closure4(t0) {
      this.$this = t0;
    },
    GestureDetector_build_closure5: function GestureDetector_build_closure5(t0) {
      this.$this = t0;
    },
    GestureDetector_build_closure6: function GestureDetector_build_closure6(t0) {
      this.$this = t0;
    },
    GestureDetector_build_closure7: function GestureDetector_build_closure7(t0) {
      this.$this = t0;
    },
    GestureDetector_build_closure8: function GestureDetector_build_closure8(t0) {
      this.$this = t0;
    },
    GestureDetector_build_closure9: function GestureDetector_build_closure9(t0) {
      this.$this = t0;
    },
    GestureDetector_build_closure10: function GestureDetector_build_closure10(t0) {
      this.$this = t0;
    },
    RawGestureDetector: function RawGestureDetector(t0, t1, t2, t3, t4) {
      var _ = this;
      _.child = t0;
      _.gestures = t1;
      _.behavior = t2;
      _.excludeFromSemantics = t3;
      _.key = t4;
    },
    RawGestureDetectorState: function RawGestureDetectorState(t0, t1) {
      var _ = this;
      _._gesture_detector$_recognizers = t0;
      _._widget = null;
      _._debugLifecycleState = t1;
      _._element = null;
    },
    RawGestureDetectorState_replaceGestureRecognizers_closure: function RawGestureDetectorState_replaceGestureRecognizers_closure(t0) {
      this.semanticsGestureHandler = t0;
    },
    _GestureSemantics: function _GestureSemantics(t0, t1, t2) {
      this.owner = t0;
      this.child = t1;
      this.key = t2;
    },
    PageController: function PageController(t0, t1, t2, t3, t4, t5, t6, t7) {
      var _ = this;
      _.initialPage = t0;
      _.keepPage = t1;
      _.viewportFraction = t2;
      _._initialScrollOffset = t3;
      _.keepScrollOffset = t4;
      _.debugLabel = t5;
      _._positions = t6;
      _._listeners = t7;
    },
    PageMetrics: function PageMetrics(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.viewportFraction = t0;
      _.minScrollExtent = t1;
      _.maxScrollExtent = t2;
      _.pixels = t3;
      _.viewportDimension = t4;
      _.axisDirection = t5;
    },
    _PagePosition: function _PagePosition(t0, t1, t2, t3, t4, t5, t6, t7, t8) {
      var _ = this;
      _._pageToUseOnStartup = t0;
      _._viewportFraction = t1;
      _._heldPreviousVelocity = 0;
      _._userScrollDirection = t2;
      _._currentDrag = null;
      _.physics = t3;
      _.context = t4;
      _.keepScrollOffset = t5;
      _.debugLabel = t6;
      _._viewportDimension = _._pixels = _._maxScrollExtent = _._minScrollExtent = null;
      _._haveDimensions = false;
      _._didChangeViewportDimensionOrReceiveCorrection = true;
      _._semanticActions = null;
      _.isScrollingNotifier = t7;
      _._activity = null;
      _._listeners = t8;
    },
    PageScrollPhysics: function PageScrollPhysics(t0) {
      this.parent = t0;
    },
    PageView: function PageView(t0, t1, t2, t3) {
      var _ = this;
      _.reverse = t0;
      _.controller = t1;
      _.childrenDelegate = t2;
      _.key = t3;
    },
    _PageViewState: function _PageViewState(t0) {
      var _ = this;
      _._lastReportedPage = 0;
      _._widget = null;
      _._debugLifecycleState = t0;
      _._element = null;
    },
    _PageViewState_build_closure0: function _PageViewState_build_closure0(t0) {
      this.$this = t0;
    },
    _PageViewState_build_closure: function _PageViewState_build_closure(t0, t1) {
      this.$this = t0;
      this.axisDirection = t1;
    }
  },
  K = {CupertinoTheme: function CupertinoTheme(t0, t1, t2) {
      this.data = t0;
      this.child = t1;
      this.key = t2;
    }, CupertinoThemeData: function CupertinoThemeData() {
    },
    ChipThemeData$: function(backgroundColor, brightness, deleteIconColor, disabledColor, labelPadding, labelStyle, padding, secondaryLabelStyle, secondarySelectedColor, selectedColor, shape) {
      return new K.ChipThemeData(backgroundColor, deleteIconColor, disabledColor, selectedColor, secondarySelectedColor, labelPadding, padding, shape, labelStyle, secondaryLabelStyle, brightness);
    },
    ChipThemeData_ChipThemeData$fromDefaults: function(brightness, labelStyle, secondaryColor) {
      var backgroundColor, deleteIconColor, disabledColor, selectedColor, t4, t5, t6, secondarySelectedColor, secondaryLabelStyle,
        primaryColor = brightness === C.Brightness_1 ? C.Color_4278190080 : C.Color_4294967295,
        t1 = primaryColor._value,
        t2 = (16711680 & t1) >>> 16,
        t3 = (65280 & t1) >>> 8;
      t1 = (255 & t1) >>> 0;
      backgroundColor = Q.Color$fromARGB(31, t2, t3, t1);
      deleteIconColor = Q.Color$fromARGB(222, t2, t3, t1);
      disabledColor = Q.Color$fromARGB(12, t2, t3, t1);
      selectedColor = Q.Color$fromARGB(61, t2, t3, t1);
      t4 = secondaryColor._value;
      t5 = (16711680 & t4) >>> 16;
      t6 = (65280 & t4) >>> 8;
      t4 = (255 & t4) >>> 0;
      secondarySelectedColor = Q.Color$fromARGB(61, t5, t6, t4);
      secondaryLabelStyle = labelStyle.copyWith$1$color(Q.Color$fromARGB(222, t5, t6, t4));
      return K.ChipThemeData$(backgroundColor, brightness, deleteIconColor, disabledColor, C.EdgeInsets_8_0_8_0, labelStyle.copyWith$1$color(Q.Color$fromARGB(222, t2, t3, t1)), C.EdgeInsets_4_4_4_4, secondaryLabelStyle, secondarySelectedColor, selectedColor, C.StadiumBorder_wjC);
    },
    ChipThemeData_lerp: function(a, b, t) {
      var t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, _null = null,
        t1 = a == null;
      if (t1 && b == null)
        return;
      t2 = t1 ? _null : a.backgroundColor;
      t3 = b == null;
      t2 = Q.Color_lerp(t2, t3 ? _null : b.backgroundColor, t);
      t4 = t1 ? _null : a.deleteIconColor;
      t4 = Q.Color_lerp(t4, t3 ? _null : b.deleteIconColor, t);
      t5 = t1 ? _null : a.disabledColor;
      t5 = Q.Color_lerp(t5, t3 ? _null : b.disabledColor, t);
      t6 = t1 ? _null : a.selectedColor;
      t6 = Q.Color_lerp(t6, t3 ? _null : b.selectedColor, t);
      t7 = t1 ? _null : a.secondarySelectedColor;
      t7 = Q.Color_lerp(t7, t3 ? _null : b.secondarySelectedColor, t);
      t8 = t1 ? _null : a.labelPadding;
      t8 = V.EdgeInsetsGeometry_lerp(t8, t3 ? _null : b.labelPadding, t);
      t9 = t1 ? _null : a.padding;
      t9 = V.EdgeInsetsGeometry_lerp(t9, t3 ? _null : b.padding, t);
      t10 = t1 ? _null : a.shape;
      t10 = Y.ShapeBorder_lerp(t10, t3 ? _null : b.shape, t);
      t11 = t1 ? _null : a.labelStyle;
      t11 = A.TextStyle_lerp(t11, t3 ? _null : b.labelStyle, t);
      t12 = t1 ? _null : a.secondaryLabelStyle;
      t12 = A.TextStyle_lerp(t12, t3 ? _null : b.secondaryLabelStyle, t);
      if (t < 0.5) {
        t1 = t1 ? _null : a.brightness;
        if (t1 == null)
          t1 = C.Brightness_1;
      } else {
        t1 = t3 ? _null : b.brightness;
        if (t1 == null)
          t1 = C.Brightness_1;
      }
      return K.ChipThemeData$(t2, t1, t4, t5, t8, t11, t9, t12, t7, t6, t10);
    },
    ChipThemeData: function ChipThemeData(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10) {
      var _ = this;
      _.backgroundColor = t0;
      _.deleteIconColor = t1;
      _.disabledColor = t2;
      _.selectedColor = t3;
      _.secondarySelectedColor = t4;
      _.labelPadding = t5;
      _.padding = t6;
      _.shape = t7;
      _.labelStyle = t8;
      _.secondaryLabelStyle = t9;
      _.brightness = t10;
    },
    _FadeUpwardsPageTransition: function _FadeUpwardsPageTransition(t0, t1, t2, t3) {
      var _ = this;
      _._positionAnimation = t0;
      _._opacityAnimation = t1;
      _.child = t2;
      _.key = t3;
    },
    PageTransitionsBuilder: function PageTransitionsBuilder() {
    },
    FadeUpwardsPageTransitionsBuilder: function FadeUpwardsPageTransitionsBuilder() {
    },
    CupertinoPageTransitionsBuilder: function CupertinoPageTransitionsBuilder() {
    },
    PageTransitionsTheme: function PageTransitionsTheme() {
    },
    PageTransitionsTheme__all_closure: function PageTransitionsTheme__all_closure(t0) {
      this.builders = t0;
    },
    Theme_of: function(context) {
      var t1, theme,
        inheritedTheme = H.interceptedTypeCheck(context.inheritFromWidgetOfExactType$1(C.Type__InheritedTheme_pIu), "$is_InheritedTheme"),
        category = L.Localizations_of(context, C.Type_MaterialLocalizations_flR, U.MaterialLocalizations) == null ? null : C.ScriptCategory_0;
      if (category == null)
        category = C.ScriptCategory_0;
      t1 = inheritedTheme == null ? null : inheritedTheme.theme;
      theme = t1 == null ? null : t1.data;
      if (theme == null)
        theme = $.$get$Theme__kFallbackTheme();
      return X.ThemeData_localize(theme, theme.typography.geometryThemeFor$1(category));
    },
    Theme: function Theme(t0, t1, t2, t3) {
      var _ = this;
      _.data = t0;
      _.isMaterialAppTheme = t1;
      _.child = t2;
      _.key = t3;
    },
    _InheritedTheme: function _InheritedTheme(t0, t1, t2) {
      this.theme = t0;
      this.child = t1;
      this.key = t2;
    },
    ThemeDataTween: function ThemeDataTween(t0, t1) {
      this.begin = t0;
      this.end = t1;
    },
    AnimatedTheme: function AnimatedTheme(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.data = t0;
      _.isMaterialAppTheme = t1;
      _.child = t2;
      _.curve = t3;
      _.duration = t4;
      _.key = t5;
    },
    _AnimatedThemeState: function _AnimatedThemeState(t0, t1) {
      var _ = this;
      _._animation = _._controller = _._data = null;
      _.SingleTickerProviderStateMixin__ticker = t0;
      _._widget = null;
      _._debugLifecycleState = t1;
      _._element = null;
    },
    _AnimatedThemeState_forEachTween_closure: function _AnimatedThemeState_forEachTween_closure() {
    },
    AlignmentGeometry_lerp: function(a, b, t) {
      var t1 = a == null;
      if (t1 && b == null)
        return;
      if (t1)
        return b.$mul(0, t);
      if (b == null) {
        if (typeof t !== "number")
          return H.iae(t);
        return a.$mul(0, 1 - t);
      }
      if (!!a.$isAlignment && !!b.$isAlignment)
        return K.Alignment_lerp(a, b, t);
      if (!!a.$isAlignmentDirectional && !!b.$isAlignmentDirectional)
        return K.AlignmentDirectional_lerp(a, b, t);
      return new K._MixedAlignment(Q.lerpDouble(a.get$_x(), b.get$_x(), t), Q.lerpDouble(a.get$_alignment$_start(a), b.get$_alignment$_start(b), t), Q.lerpDouble(a.get$_y(), b.get$_y(), t));
    },
    Alignment_lerp: function(a, b, t) {
      return new K.Alignment(Q.lerpDouble(a.x, b.x, t), Q.lerpDouble(a.y, b.y, t));
    },
    AlignmentDirectional_lerp: function(a, b, t) {
      return new K.AlignmentDirectional(Q.lerpDouble(a.start, b.start, t), Q.lerpDouble(a.y, b.y, t));
    },
    AlignmentDirectional__stringify: function(start, y) {
      var t2, t3,
        t1 = start === -1;
      if (t1 && y === -1)
        return "AlignmentDirectional.topStart";
      t2 = start === 0;
      if (t2 && y === -1)
        return "AlignmentDirectional.topCenter";
      t3 = start === 1;
      if (t3 && y === -1)
        return "AlignmentDirectional.topEnd";
      if (t1 && y === 0)
        return "AlignmentDirectional.centerStart";
      if (t2 && y === 0)
        return "AlignmentDirectional.center";
      if (t3 && y === 0)
        return "AlignmentDirectional.centerEnd";
      if (t1 && y === 1)
        return "AlignmentDirectional.bottomStart";
      if (t2 && y === 1)
        return "AlignmentDirectional.bottomCenter";
      if (t3 && y === 1)
        return "AlignmentDirectional.bottomEnd";
      return "AlignmentDirectional(" + J.toStringAsFixed$1$n(start, 1) + ", " + J.toStringAsFixed$1$n(y, 1) + ")";
    },
    AlignmentGeometry: function AlignmentGeometry() {
    },
    Alignment: function Alignment(t0, t1) {
      this.x = t0;
      this.y = t1;
    },
    AlignmentDirectional: function AlignmentDirectional(t0, t1) {
      this.start = t0;
      this.y = t1;
    },
    _MixedAlignment: function _MixedAlignment(t0, t1, t2) {
      this._x = t0;
      this._alignment$_start = t1;
      this._y = t2;
    },
    BorderRadiusGeometry_lerp: function(a, b, t) {
      var t1 = a == null;
      if (t1 && b == null)
        return;
      if (t1)
        a = C.BorderRadius_tLn;
      return a.add$1(0, (b == null ? C.BorderRadius_tLn : b).subtract$1(a).$mul(0, t));
    },
    BorderRadius$circular: function(radius) {
      var t1 = new Q.Radius(radius, radius);
      return new K.BorderRadius(t1, t1, t1, t1);
    },
    BorderRadius_lerp: function(a, b, t) {
      var t1 = a == null;
      if (t1 && b == null)
        return;
      if (t1)
        return b.$mul(0, t);
      if (b == null) {
        if (typeof t !== "number")
          return H.iae(t);
        return a.$mul(0, 1 - t);
      }
      return new K.BorderRadius(Q.Radius_lerp(a.topLeft, b.topLeft, t), Q.Radius_lerp(a.topRight, b.topRight, t), Q.Radius_lerp(a.bottomLeft, b.bottomLeft, t), Q.Radius_lerp(a.bottomRight, b.bottomRight, t));
    },
    BorderRadiusGeometry: function BorderRadiusGeometry() {
    },
    BorderRadius: function BorderRadius(t0, t1, t2, t3) {
      var _ = this;
      _.topLeft = t0;
      _.topRight = t1;
      _.bottomLeft = t2;
      _.bottomRight = t3;
    },
    _MixedBorderRadius: function _MixedBorderRadius(t0, t1, t2, t3, t4, t5, t6, t7) {
      var _ = this;
      _._topLeft = t0;
      _._topRight = t1;
      _._bottomLeft = t2;
      _._bottomRight = t3;
      _._topStart = t4;
      _._topEnd = t5;
      _._bottomStart = t6;
      _._bottomEnd = t7;
    },
    PaintingContext__repaintCompositedChild: function(child, childContext, debugAlsoPaintedParent) {
      var t1 = child._layer;
      if (t1 == null)
        child._layer = new T.OffsetLayer(C.Offset_0_0);
      else
        t1.removeAllChildren$0();
      childContext = new K.PaintingContext(child, child._layer, child.get$paintBounds());
      child._paintWithContext$2(childContext, C.Offset_0_0);
      childContext.stopRecordingIfNeeded$0();
    },
    FlutterErrorDetailsForRendering$: function(context, exception, informationCollector, library, renderObject, stack) {
      return new K.FlutterErrorDetailsForRendering(renderObject, exception, stack, library, context, informationCollector, false);
    },
    _SemanticsGeometry__transformRect: function(rect, $parent, child) {
      var transform;
      if (rect == null)
        return;
      if (rect.get$isEmpty(rect))
        return C.Rect_0_0_0_0;
      transform = $._SemanticsGeometry__transformRectTransform;
      if (transform == null)
        transform = $._SemanticsGeometry__transformRectTransform = new E.Matrix4(new Float64Array(16));
      transform.setIdentity$0();
      $parent.applyPaintTransform$2(child, transform);
      return T.MatrixUtils_inverseTransformRect(transform, rect);
    },
    _SemanticsGeometry__intersectRects: function(a, b) {
      if (a == null)
        return b;
      if (b == null)
        return a;
      return a.intersect$1(b);
    },
    ParentData: function ParentData() {
    },
    PaintingContext: function PaintingContext(t0, t1, t2) {
      var _ = this;
      _._webOnlyPaintedBy = t0;
      _._containerLayer = t1;
      _.estimatedBounds = t2;
      _._object$_canvas = _._recorder = _._currentLayer = null;
    },
    PaintingContext_pushClipRect_closure: function PaintingContext_pushClipRect_closure(t0, t1, t2) {
      this.$this = t0;
      this.painter = t1;
      this.offset = t2;
    },
    PaintingContext_pushClipPath_closure: function PaintingContext_pushClipPath_closure(t0, t1, t2) {
      this.$this = t0;
      this.painter = t1;
      this.offset = t2;
    },
    Constraints: function Constraints() {
    },
    SemanticsHandle: function SemanticsHandle(t0, t1) {
      this._object$_owner = t0;
      this.listener = t1;
    },
    PipelineOwner: function PipelineOwner(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _.onNeedVisualUpdate = t0;
      _.onSemanticsOwnerCreated = t1;
      _.onSemanticsOwnerDisposed = t2;
      _._rootNode = null;
      _._nodesNeedingLayout = t3;
      _._debugAllowMutationsToDirtySubtrees = _._debugDoingLayout = false;
      _._nodesNeedingCompositingBitsUpdate = t4;
      _._nodesNeedingPaint = t5;
      _._debugDoingPaint = false;
      _._semanticsOwner = null;
      _._outstandingSemanticsHandles = 0;
      _._debugDoingSemantics = false;
      _._nodesNeedingSemantics = t6;
    },
    PipelineOwner_flushLayout_closure: function PipelineOwner_flushLayout_closure() {
    },
    PipelineOwner_flushLayout_closure0: function PipelineOwner_flushLayout_closure0() {
    },
    PipelineOwner_flushLayout_closure1: function PipelineOwner_flushLayout_closure1() {
    },
    PipelineOwner_flushCompositingBits_closure: function PipelineOwner_flushCompositingBits_closure() {
    },
    PipelineOwner_flushCompositingBits_closure0: function PipelineOwner_flushCompositingBits_closure0() {
    },
    PipelineOwner_flushCompositingBits_closure1: function PipelineOwner_flushCompositingBits_closure1() {
    },
    PipelineOwner_flushPaint_closure: function PipelineOwner_flushPaint_closure() {
    },
    PipelineOwner_flushPaint_closure0: function PipelineOwner_flushPaint_closure0() {
    },
    PipelineOwner_flushPaint_closure1: function PipelineOwner_flushPaint_closure1() {
    },
    PipelineOwner_flushSemantics_closure: function PipelineOwner_flushSemantics_closure() {
    },
    PipelineOwner_flushSemantics_closure0: function PipelineOwner_flushSemantics_closure0() {
    },
    PipelineOwner_flushSemantics_closure1: function PipelineOwner_flushSemantics_closure1() {
    },
    RenderObject: function RenderObject() {
    },
    RenderObject__debugReportException_closure: function RenderObject__debugReportException_closure(t0) {
      this.$this = t0;
    },
    RenderObject__debugReportException_closure_visitor: function RenderObject__debugReportException_closure_visitor(t0, t1, t2, t3) {
      var _ = this;
      _._box_0 = t0;
      _.maxLines = t1;
      _.descendants = t2;
      _.maxDepth = t3;
    },
    RenderObject__cleanRelayoutBoundary_closure: function RenderObject__cleanRelayoutBoundary_closure() {
    },
    RenderObject_invokeLayoutCallback_closure: function RenderObject_invokeLayoutCallback_closure(t0, t1, t2) {
      this.$this = t0;
      this.callback = t1;
      this.T = t2;
    },
    RenderObject__updateCompositingBits_closure: function RenderObject__updateCompositingBits_closure(t0) {
      this.$this = t0;
    },
    RenderObject_clearSemantics_closure: function RenderObject_clearSemantics_closure() {
    },
    RenderObject__getSemanticsForParent_closure: function RenderObject__getSemanticsForParent_closure(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _._box_0 = t0;
      _.$this = t1;
      _.childrenMergeIntoParent = t2;
      _.fragments = t3;
      _.toBeMarkedExplicit = t4;
      _.config = t5;
      _.producesForkingFragment = t6;
    },
    RenderObjectWithChildMixin: function RenderObjectWithChildMixin() {
    },
    ContainerParentDataMixin: function ContainerParentDataMixin() {
    },
    ContainerRenderObjectMixin: function ContainerRenderObjectMixin() {
    },
    FlutterErrorDetailsForRendering: function FlutterErrorDetailsForRendering(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _.renderObject = t0;
      _.exception = t1;
      _.stack = t2;
      _.library = t3;
      _.context = t4;
      _.informationCollector = t5;
      _.silent = t6;
    },
    _SemanticsFragment: function _SemanticsFragment() {
    },
    _ContainerSemanticsFragment: function _ContainerSemanticsFragment(t0, t1) {
      this.interestingFragments = t0;
      this.dropsSemanticsOfPreviousSiblings = t1;
    },
    _InterestingSemanticsFragment: function _InterestingSemanticsFragment() {
    },
    _RootSemanticsFragment: function _RootSemanticsFragment(t0, t1, t2) {
      var _ = this;
      _._object$_children = t0;
      _._ancestorChain = t1;
      _._object$_tagsForChildren = null;
      _.dropsSemanticsOfPreviousSiblings = t2;
    },
    _SwitchableSemanticsFragment: function _SwitchableSemanticsFragment(t0, t1, t2, t3, t4) {
      var _ = this;
      _._mergeIntoParent = t0;
      _._config = t1;
      _._isConfigWritable = false;
      _._object$_children = t2;
      _._isExplicit = false;
      _._ancestorChain = t3;
      _._object$_tagsForChildren = null;
      _.dropsSemanticsOfPreviousSiblings = t4;
    },
    _AbortingSemanticsFragment: function _AbortingSemanticsFragment(t0, t1) {
      this._ancestorChain = t0;
      this._object$_tagsForChildren = null;
      this.dropsSemanticsOfPreviousSiblings = t1;
    },
    _SemanticsGeometry: function _SemanticsGeometry() {
      var _ = this;
      _._rect = _._object$_transform = _._semanticsClipRect = _._paintClipRect = null;
      _._markAsHidden = false;
    },
    _RenderObject_AbstractNode_DiagnosticableTreeMixin: function _RenderObject_AbstractNode_DiagnosticableTreeMixin() {
    },
    RelativeRect: function RelativeRect(t0, t1, t2, t3) {
      var _ = this;
      _.left = t0;
      _.top = t1;
      _.right = t2;
      _.bottom = t3;
    },
    StackParentData: function StackParentData(t0, t1, t2) {
      var _ = this;
      _.height = _.width = _.left = _.bottom = _.right = _.top = null;
      _.ContainerParentDataMixin_previousSibling = t0;
      _.ContainerParentDataMixin_nextSibling = t1;
      _.offset = t2;
    },
    StackFit: function StackFit(t0) {
      this._stack$_name = t0;
    },
    Overflow: function Overflow(t0) {
      this._stack$_name = t0;
    },
    RenderStack: function RenderStack(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _._hasVisualOverflow = false;
      _._stack$_resolvedAlignment = null;
      _._stack$_alignment = t0;
      _._stack$_textDirection = t1;
      _._fit = t2;
      _._overflow = t3;
      _.ContainerRenderObjectMixin__childCount = t4;
      _.ContainerRenderObjectMixin__firstChild = t5;
      _.ContainerRenderObjectMixin__lastChild = t6;
      _._cachedBaselines = _._size = _._cachedIntrinsicDimensions = null;
      _._debugActivePointers = 0;
      _.debugCreator = _.parentData = null;
      _._debugDoingThisLayout = _._debugDoingThisResize = false;
      _._debugCanParentUseSize = null;
      _._debugMutationsLocked = false;
      _._needsLayout = true;
      _._relayoutBoundary = null;
      _._doingThisLayoutWithCallback = false;
      _._constraints = null;
      _._debugDoingThisPaint = false;
      _._layer = null;
      _._needsCompositingBitsUpdate = false;
      _._needsCompositing = null;
      _._needsPaint = true;
      _._cachedSemanticsConfiguration = null;
      _._needsSemanticsUpdate = true;
      _._semantics = null;
      _._node$_depth = 0;
      _._node$_parent = _._node$_owner = null;
    },
    _RenderStack_RenderBox_ContainerRenderObjectMixin: function _RenderStack_RenderBox_ContainerRenderObjectMixin() {
    },
    _RenderStack_RenderBox_ContainerRenderObjectMixin_RenderBoxContainerDefaultsMixin: function _RenderStack_RenderBox_ContainerRenderObjectMixin_RenderBoxContainerDefaultsMixin() {
    },
    Navigator_of: function(context) {
      var t1 = context.ancestorStateOfType$1(C.C_TypeMatcher1);
      return H.interceptedTypeCheck(t1, "$isNavigatorState");
    },
    RoutePopDisposition: function RoutePopDisposition(t0) {
      this._navigator$_name = t0;
    },
    Route: function Route() {
    },
    RouteSettings: function RouteSettings(t0, t1, t2) {
      this.name = t0;
      this.isInitialRoute = t1;
      this.$arguments = t2;
    },
    NavigatorObserver: function NavigatorObserver() {
    },
    Navigator: function Navigator(t0, t1, t2, t3, t4) {
      var _ = this;
      _.initialRoute = t0;
      _.onGenerateRoute = t1;
      _.onUnknownRoute = t2;
      _.observers = t3;
      _.key = t4;
    },
    NavigatorState: function NavigatorState(t0, t1, t2, t3, t4, t5, t6, t7) {
      var _ = this;
      _._overlayKey = t0;
      _._history = t1;
      _._poppedRoutes = t2;
      _.focusScopeNode = t3;
      _._initialOverlayEntries = t4;
      _._debugLocked = false;
      _._userGesturesInProgress = 0;
      _._activePointers = t5;
      _.TickerProviderStateMixin__tickers = t6;
      _._widget = null;
      _._debugLifecycleState = t7;
      _._element = null;
    },
    NavigatorState_initState_closure: function NavigatorState_initState_closure() {
    },
    NavigatorState__cancelActivePointers_closure: function NavigatorState__cancelActivePointers_closure(t0) {
      this.absorber = t0;
    },
    _NavigatorState_State_TickerProviderStateMixin: function _NavigatorState_State_TickerProviderStateMixin() {
    },
    ScrollBehavior: function ScrollBehavior() {
    },
    ScrollConfiguration: function ScrollConfiguration(t0, t1, t2) {
      this.behavior = t0;
      this.child = t1;
      this.key = t2;
    },
    SlideTransition$: function(child, position, textDirection, transformHitTests) {
      return new K.SlideTransition(textDirection, transformHitTests, child, position, null);
    },
    ScaleTransition$: function(child, scale) {
      return new K.ScaleTransition(child, scale, null);
    },
    RotationTransition$: function(child, turns) {
      return new K.RotationTransition(child, turns, null);
    },
    FadeTransition$: function(child, opacity) {
      return new K.FadeTransition(opacity, child, null);
    },
    AnimatedBuilder$: function(animation, builder, child) {
      return new K.AnimatedBuilder(builder, child, animation, null);
    },
    AnimatedWidget: function AnimatedWidget() {
    },
    _AnimatedState: function _AnimatedState(t0) {
      this._widget = null;
      this._debugLifecycleState = t0;
      this._element = null;
    },
    _AnimatedState__handleChange_closure: function _AnimatedState__handleChange_closure() {
    },
    SlideTransition: function SlideTransition(t0, t1, t2, t3, t4) {
      var _ = this;
      _.textDirection = t0;
      _.transformHitTests = t1;
      _.child = t2;
      _.listenable = t3;
      _.key = t4;
    },
    ScaleTransition: function ScaleTransition(t0, t1, t2) {
      this.child = t0;
      this.listenable = t1;
      this.key = t2;
    },
    RotationTransition: function RotationTransition(t0, t1, t2) {
      this.child = t0;
      this.listenable = t1;
      this.key = t2;
    },
    FadeTransition: function FadeTransition(t0, t1, t2) {
      this.opacity = t0;
      this.child = t1;
      this.key = t2;
    },
    DecoratedBoxTransition: function DecoratedBoxTransition(t0, t1, t2, t3) {
      var _ = this;
      _.decoration = t0;
      _.child = t1;
      _.listenable = t2;
      _.key = t3;
    },
    AnimatedBuilder: function AnimatedBuilder(t0, t1, t2, t3) {
      var _ = this;
      _.builder = t0;
      _.child = t1;
      _.listenable = t2;
      _.key = t3;
    },
    WebOnlyNavigatorObserver: function WebOnlyNavigatorObserver() {
      this._navigator$_navigator = null;
    }
  },
  U = {
    FlutterErrorDetails$: function(context, exception, informationCollector, library, silent, stack) {
      return new U.FlutterErrorDetails(exception, stack, library, context, informationCollector, false);
    },
    FlutterError$: function(message) {
      return new U.FlutterError(message);
    },
    FlutterError_dumpErrorToConsole: function(details, forceReport) {
      var header, footer, t1, verb, t2, errorName, prefix, message, t3, t4, stackLines, stackList, throwPattern, assertPattern, assertMatch, ourLibraryPattern, ourFault, information;
      if ($.FlutterError__errorCount === 0 || false) {
        header = ("\u2550\u2550\u2561 EXCEPTION CAUGHT BY " + details.library + " \u255e").toUpperCase();
        footer = C.JSString_methods.$mul("\u2550", 100);
        D.print__debugPrintThrottled$closure().call$1(header + C.JSString_methods.$mul("\u2550", footer.length - header.length));
        t1 = details.context;
        verb = "thrown" + (t1 != null ? " " + t1 : "");
        t1 = details.exception;
        t2 = J.getInterceptor$(t1);
        if (!!t2.$isNullThrownError)
          D.debugPrintThrottled("The null value was " + verb + ".", 100);
        else if (typeof t1 === "number")
          D.debugPrintThrottled("The number " + H.S(t1) + " was " + verb + ".", 100);
        else {
          if (!!t2.$isAssertionError)
            errorName = "assertion";
          else if (typeof t1 === "string")
            errorName = "message";
          else
            errorName = !!t2.$isError || !!t2.$isException ? t2.get$runtimeType(t1).toString$0(0) : t2.get$runtimeType(t1).toString$0(0) + " object";
          prefix = t2.get$runtimeType(t1).toString$0(0) + ": ";
          message = details.exceptionAsString$0();
          if (C.JSString_methods.startsWith$1(message, prefix))
            message = C.JSString_methods.substring$1(message, prefix.length);
          D.debugPrintThrottled("The following " + errorName + " was " + verb + ":\n" + message, 100);
        }
        t3 = details.stack;
        t4 = t3 != null;
        stackLines = t4 ? H.setRuntimeTypeInfo(C.JSString_methods.trimRight$0(t3.toString$0(0)).split("\n"), [P.String]) : null;
        if (!!t2.$isAssertionError && !t1.$isFlutterError) {
          if (stackLines != null) {
            stackList = H.SubListIterable$(stackLines, 0, 2, H.getTypeArgumentByIndex(stackLines, 0)).toList$0(0);
            if (stackList.length >= 2) {
              throwPattern = P.RegExp_RegExp("^#0 +_AssertionError._throwNew \\(dart:.+\\)$");
              assertPattern = P.RegExp_RegExp("^#1 +[^(]+ \\((.+?):([0-9]+)(?::[0-9]+)?\\)$");
              if (0 >= stackList.length)
                return H.ioore(stackList, 0);
              t1 = H.stringTypeCheck(stackList[0]);
              if (typeof t1 !== "string")
                H.throwExpression(H.argumentErrorValue(t1));
              if (throwPattern._nativeRegExp.test(t1)) {
                if (1 >= stackList.length)
                  return H.ioore(stackList, 1);
                assertMatch = assertPattern.firstMatch$1(stackList[1]);
                if (assertMatch != null) {
                  ourLibraryPattern = P.RegExp_RegExp("^package:flutter/");
                  t1 = assertMatch._match;
                  if (1 >= t1.length)
                    return H.ioore(t1, 1);
                  t1 = t1[1];
                  if (typeof t1 !== "string")
                    H.throwExpression(H.argumentErrorValue(t1));
                  ourFault = ourLibraryPattern._nativeRegExp.test(t1);
                } else
                  ourFault = true;
              } else
                ourFault = true;
            } else
              ourFault = true;
          } else
            ourFault = true;
          if (ourFault) {
            D.debugPrintThrottled("\nEither the assertion indicates an error in the framework itself, or we should provide substantially more information in this error message to help you determine and fix the underlying cause.", 100);
            D.debugPrintThrottled("In either case, please report this assertion by filing a bug on GitHub:", 100);
            D.print__debugPrintThrottled$closure().call$1("  https://github.com/flutter/flutter/issues/new?template=BUG.md");
          }
        }
        if (t4) {
          D.debugPrintThrottled("\nWhen the exception was thrown, this was the stack:", 100);
          stackLines = U.FlutterError_defaultStackFilter(stackLines);
          for (t1 = C.JSArray_methods.get$iterator(stackLines); t1.moveNext$0();)
            D.debugPrintThrottled(t1.get$current(t1), 100);
        }
        t1 = details.informationCollector;
        if (t1 != null) {
          information = new P.StringBuffer("");
          t1.call$1(information);
          t1 = information._contents;
          D.debugPrintThrottled("\n" + C.JSString_methods.trimRight$0(t1.charCodeAt(0) == 0 ? t1 : t1), 100);
        }
        D.print__debugPrintThrottled$closure().call$1(footer);
      } else {
        t1 = details.exceptionAsString$0().split("\n");
        if (0 >= t1.length)
          return H.ioore(t1, 0);
        D.print__debugPrintThrottled$closure().call$1("Another exception was thrown: " + J.trimLeft$0$s(t1[0]));
      }
      $.FlutterError__errorCount = $.FlutterError__errorCount + 1;
    },
    FlutterError_defaultStackFilter: function($frames) {
      var stackParser, packageParser, t2, result, skipped, t3, match, t4, packageMatch, where,
        t1 = P.String;
      H.assertSubtype($frames, "$isIterable", [t1], "$asIterable");
      stackParser = P.RegExp_RegExp("^#[0-9]+ +([^.]+).* \\(([^/\\\\]*)[/\\\\].+:[0-9]+(?::[0-9]+)?\\)$");
      packageParser = P.RegExp_RegExp("^([^:]+):(.+)$");
      t2 = [t1];
      result = H.setRuntimeTypeInfo([], t2);
      skipped = H.setRuntimeTypeInfo([], t2);
      for (t2 = J.get$iterator$ax($frames); t2.moveNext$0();) {
        t3 = t2.get$current(t2);
        match = stackParser.firstMatch$1(t3);
        if (match != null) {
          t4 = match._match;
          if (2 >= t4.length)
            return H.ioore(t4, 2);
          if (C.JSArray_methods.contains$1(C.List_cg9, t4[2])) {
            if (2 >= t4.length)
              return H.ioore(t4, 2);
            packageMatch = packageParser.firstMatch$1(t4[2]);
            if (packageMatch != null) {
              t3 = packageMatch._match;
              if (1 >= t3.length)
                return H.ioore(t3, 1);
              t3 = t3[1] === "package";
            } else
              t3 = false;
            if (t3) {
              t3 = packageMatch._match;
              if (2 >= t3.length)
                return H.ioore(t3, 2);
              C.JSArray_methods.add$1(skipped, "package " + H.S(t3[2]));
            } else {
              if (2 >= t4.length)
                return H.ioore(t4, 2);
              C.JSArray_methods.add$1(skipped, "package " + H.S(t4[2]));
            }
            continue;
          }
          if (1 >= t4.length)
            return H.ioore(t4, 1);
          if (C.JSArray_methods.contains$1(C.List_ifn, t4[1])) {
            if (1 >= t4.length)
              return H.ioore(t4, 1);
            C.JSArray_methods.add$1(skipped, "class " + H.S(t4[1]));
            continue;
          }
        }
        C.JSArray_methods.add$1(result, t3);
      }
      t2 = skipped.length;
      if (t2 === 1)
        C.JSArray_methods.add$1(result, "(elided one frame from " + C.JSArray_methods.get$single(skipped) + ")");
      else if (t2 > 1) {
        where = P.LinkedHashSet_LinkedHashSet$from(skipped, t1).toList$0(0);
        C.JSArray_methods.sort$0(where);
        t1 = where.length;
        if (t1 > 1)
          C.JSArray_methods.$indexSet(where, t1 - 1, "and " + H.S(C.JSArray_methods.get$last(where)));
        t1 = where.length;
        t2 = skipped.length;
        if (t1 > 2)
          C.JSArray_methods.add$1(result, "(elided " + t2 + " frames from " + C.JSArray_methods.join$1(where, ", ") + ")");
        else
          C.JSArray_methods.add$1(result, "(elided " + t2 + " frames from " + C.JSArray_methods.join$1(where, " ") + ")");
      }
      return result;
    },
    FlutterErrorDetails: function FlutterErrorDetails(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.exception = t0;
      _.stack = t1;
      _.library = t2;
      _.context = t3;
      _.informationCollector = t4;
      _.silent = t5;
    },
    FlutterError: function FlutterError(t0) {
      this.message = t0;
    },
    _getClipCallback: function(referenceBox, containedInkWell, rectCallback) {
      if (containedInkWell)
        return new U._getClipCallback_closure(referenceBox);
      return;
    },
    _getTargetRadius: function(referenceBox, containedInkWell, rectCallback, position) {
      var size, d1, t1, d2, t2, d3, d4;
      if (containedInkWell) {
        size = referenceBox._size;
        size.toString;
        d1 = position.$sub(0, C.Offset_0_0).get$distance();
        t1 = size._dx;
        if (typeof t1 !== "number")
          return H.iae(t1);
        t1 = 0 + t1;
        d2 = position.$sub(0, new Q.Offset(t1, 0)).get$distance();
        t2 = size._dy;
        if (typeof t2 !== "number")
          return H.iae(t2);
        t2 = 0 + t2;
        d3 = position.$sub(0, new Q.Offset(0, t2)).get$distance();
        d4 = position.$sub(0, new Q.Offset(t1, t2)).get$distance();
        return Math.ceil(Math.max(Math.max(d1, d2), Math.max(d3, d4)));
      }
      return 35;
    },
    _getClipCallback_closure: function _getClipCallback_closure(t0) {
      this.referenceBox = t0;
    },
    _InkSplashFactory: function _InkSplashFactory() {
    },
    InkSplash: function InkSplash(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10) {
      var _ = this;
      _._ink_splash$_position = t0;
      _._ink_splash$_borderRadius = t1;
      _._ink_splash$_customBorder = t2;
      _._targetRadius = t3;
      _._clipCallback = t4;
      _._repositionToReferenceBox = t5;
      _._ink_splash$_textDirection = t6;
      _._ink_splash$_alphaController = _._ink_splash$_alpha = _._radiusController = _._radius = null;
      _._ink_well$_color = t7;
      _._material$_controller = t8;
      _.referenceBox = t9;
      _.onRemoved = t10;
      _._debugDisposed = false;
    },
    MaterialLocalizations: function MaterialLocalizations() {
    },
    _MaterialLocalizationsDelegate: function _MaterialLocalizationsDelegate() {
    },
    DefaultMaterialLocalizations: function DefaultMaterialLocalizations() {
    },
    TabBarTheme: function TabBarTheme(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.indicator = t0;
      _.indicatorSize = t1;
      _.labelColor = t2;
      _.labelStyle = t3;
      _.unselectedLabelColor = t4;
      _.unselectedLabelStyle = t5;
    },
    Typography_Typography: function(black, dense, englishLike, platform, tall, white) {
      switch (platform) {
        case C.TargetPlatform_2:
          if (black == null)
            black = C.TextTheme_6TA;
          if (white == null)
            white = C.TextTheme_cg9;
          break;
        case C.TargetPlatform_0:
        case C.TargetPlatform_1:
          if (black == null)
            black = C.TextTheme_IQy;
          if (white == null)
            white = C.TextTheme_Wzh;
          break;
      }
      if (englishLike == null)
        englishLike = C.TextTheme_8Wd;
      if (dense == null)
        dense = C.TextTheme_2Vk;
      return new U.Typography(black, white, englishLike, dense, tall == null ? C.TextTheme_AgA : tall);
    },
    ScriptCategory: function ScriptCategory(t0) {
      this._typography$_name = t0;
    },
    Typography: function Typography(t0, t1, t2, t3, t4) {
      var _ = this;
      _.black = t0;
      _.white = t1;
      _.englishLike = t2;
      _.dense = t3;
      _.tall = t4;
    },
    TextPainter$: function(ellipsis, locale, maxLines, strutStyle, text, textAlign, textDirection, textScaleFactor) {
      return new U.TextPainter(text, textAlign, textDirection, textScaleFactor, ellipsis, locale, maxLines, strutStyle);
    },
    TextPainter: function TextPainter(t0, t1, t2, t3, t4, t5, t6, t7) {
      var _ = this;
      _._text_painter$_paragraph = null;
      _._text_painter$_needsLayout = true;
      _._text_painter$_text = t0;
      _._text_painter$_textAlign = t1;
      _._text_painter$_textDirection = t2;
      _._textScaleFactor = t3;
      _._text_painter$_ellipsis = t4;
      _._text_painter$_locale = t5;
      _._text_painter$_maxLines = t6;
      _._text_painter$_strutStyle = t7;
      _._lastMaxWidth = _._lastMinWidth = null;
    },
    RenderSliverList: function RenderSliverList(t0, t1, t2, t3, t4) {
      var _ = this;
      _._childManager = t0;
      _._keepAliveBucket = t1;
      _.ContainerRenderObjectMixin__childCount = t2;
      _.ContainerRenderObjectMixin__firstChild = t3;
      _.ContainerRenderObjectMixin__lastChild = t4;
      _.debugCreator = _.parentData = _._geometry = null;
      _._debugDoingThisLayout = _._debugDoingThisResize = false;
      _._debugCanParentUseSize = null;
      _._debugMutationsLocked = false;
      _._needsLayout = true;
      _._relayoutBoundary = null;
      _._doingThisLayoutWithCallback = false;
      _._constraints = null;
      _._debugDoingThisPaint = false;
      _._layer = null;
      _._needsCompositingBitsUpdate = false;
      _._needsCompositing = null;
      _._needsPaint = true;
      _._cachedSemanticsConfiguration = null;
      _._needsSemanticsUpdate = true;
      _._semantics = null;
      _._node$_depth = 0;
      _._node$_parent = _._node$_owner = null;
    },
    RenderSliverList_performLayout_advance: function RenderSliverList_performLayout_advance(t0, t1, t2) {
      this._box_0 = t0;
      this.$this = t1;
      this.childConstraints = t2;
    },
    StringCodec: function StringCodec() {
    },
    JSONMessageCodec0: function JSONMessageCodec0() {
    },
    JSONMethodCodec: function JSONMethodCodec() {
    },
    StandardMessageCodec: function StandardMessageCodec() {
    },
    StandardMessageCodec_writeValue_closure: function StandardMessageCodec_writeValue_closure(t0, t1) {
      this.$this = t0;
      this.buffer = t1;
    },
    NotificationListener$: function(child, onNotification, $T) {
      return new U.NotificationListener(child, onNotification, null, [$T]);
    },
    Notification0: function Notification0() {
    },
    NotificationListener: function NotificationListener(t0, t1, t2, t3) {
      var _ = this;
      _.child = t0;
      _.onNotification = t1;
      _.key = t2;
      _.$ti = t3;
    },
    LayoutChangedNotification: function LayoutChangedNotification() {
    },
    TickerMode_of: function(context) {
      var t1 = H.interceptedTypeCheck(context.inheritFromWidgetOfExactType$1(C.Type_TickerMode_zTp), "$isTickerMode") == null && null;
      return t1 !== false;
    },
    TickerMode: function TickerMode(t0, t1, t2) {
      this.enabled = t0;
      this.child = t1;
      this.key = t2;
    },
    SingleTickerProviderStateMixin: function SingleTickerProviderStateMixin() {
    },
    TickerProviderStateMixin: function TickerProviderStateMixin() {
    },
    _WidgetTicker: function _WidgetTicker(t0, t1, t2) {
      var _ = this;
      _._creator = t0;
      _._future = null;
      _._muted = false;
      _._startTime = null;
      _._onTick = t1;
      _._animationId = null;
      _.debugLabel = t2;
      _._debugCreationStack = null;
    },
    Title$: function(child, color, title) {
      return new U.Title(title, color, child, null);
    },
    Title: function Title(t0, t1, t2, t3) {
      var _ = this;
      _.title = t0;
      _.color = t1;
      _.child = t2;
      _.key = t3;
    },
    profile: function($function) {
      H.functionTypeCheck($function, {func: 1, ret: -1});
      $function.call$0();
    },
    createLocalImageConfiguration: function(context) {
      var t1, t2;
      H.interceptedTypeCheck(context.inheritFromWidgetOfExactType$1(C.Type_DefaultAssetBundle_8cA), "$isDefaultAssetBundle");
      t1 = $.$get$rootBundle();
      t2 = F.MediaQuery_of(context, true);
      t2 = t2 == null ? null : t2.devicePixelRatio;
      if (t2 == null)
        t2 = 1;
      return new M.ImageConfiguration(t1, t2, L.Localizations_localeOf(context, true), T.Directionality_of(context), null, T.defaultTargetPlatform());
    }
  },
  B = {
    _MergingListenable$: function(_children) {
      var t1 = {func: 1, ret: -1};
      t1 = new B._MergingListenable(_children, new R.ObserverList(H.setRuntimeTypeInfo([], [t1]), [t1]));
      t1._MergingListenable$1(_children);
      return t1;
    },
    Listenable: function Listenable() {
    },
    ChangeNotifier: function ChangeNotifier() {
    },
    ChangeNotifier_notifyListeners_closure: function ChangeNotifier_notifyListeners_closure(t0) {
      this.$this = t0;
    },
    _MergingListenable: function _MergingListenable(t0, t1) {
      this._change_notifier$_children = t0;
      this._listeners = t1;
    },
    ValueNotifier: function ValueNotifier(t0, t1, t2) {
      this._change_notifier$_value = t0;
      this._listeners = t1;
      this.$ti = t2;
    },
    AbstractNode: function AbstractNode() {
    },
    _Vector: function _Vector(t0, t1, t2) {
      this._lsq_solver$_offset = t0;
      this._lsq_solver$_length = t1;
      this._lsq_solver$_elements = t2;
    },
    _Matrix: function _Matrix(t0, t1) {
      this._columns = t0;
      this._lsq_solver$_elements = t1;
    },
    PolynomialFit: function PolynomialFit(t0) {
      this.coefficients = t0;
      this.confidence = null;
    },
    LeastSquaresSolver: function LeastSquaresSolver(t0, t1, t2) {
      this.x = t0;
      this.y = t1;
      this.w = t2;
    },
    IconButton: function IconButton(t0, t1, t2) {
      this.icon = t0;
      this.onPressed = t1;
      this.key = t2;
    },
    MultiChildLayoutParentData: function MultiChildLayoutParentData(t0, t1, t2) {
      var _ = this;
      _.id = null;
      _.ContainerParentDataMixin_previousSibling = t0;
      _.ContainerParentDataMixin_nextSibling = t1;
      _.offset = t2;
    },
    MultiChildLayoutDelegate: function MultiChildLayoutDelegate() {
    },
    RenderCustomMultiChildLayoutBox: function RenderCustomMultiChildLayoutBox(t0, t1, t2, t3) {
      var _ = this;
      _._custom_layout$_delegate = t0;
      _.ContainerRenderObjectMixin__childCount = t1;
      _.ContainerRenderObjectMixin__firstChild = t2;
      _.ContainerRenderObjectMixin__lastChild = t3;
      _._cachedBaselines = _._size = _._cachedIntrinsicDimensions = null;
      _._debugActivePointers = 0;
      _.debugCreator = _.parentData = null;
      _._debugDoingThisLayout = _._debugDoingThisResize = false;
      _._debugCanParentUseSize = null;
      _._debugMutationsLocked = false;
      _._needsLayout = true;
      _._relayoutBoundary = null;
      _._doingThisLayoutWithCallback = false;
      _._constraints = null;
      _._debugDoingThisPaint = false;
      _._layer = null;
      _._needsCompositingBitsUpdate = false;
      _._needsCompositing = null;
      _._needsPaint = true;
      _._cachedSemanticsConfiguration = null;
      _._needsSemanticsUpdate = true;
      _._semantics = null;
      _._node$_depth = 0;
      _._node$_parent = _._node$_owner = null;
    },
    _RenderCustomMultiChildLayoutBox_RenderBox_ContainerRenderObjectMixin: function _RenderCustomMultiChildLayoutBox_RenderBox_ContainerRenderObjectMixin() {
    },
    _RenderCustomMultiChildLayoutBox_RenderBox_ContainerRenderObjectMixin_RenderBoxContainerDefaultsMixin: function _RenderCustomMultiChildLayoutBox_RenderBox_ContainerRenderObjectMixin_RenderBoxContainerDefaultsMixin() {
    },
    BinaryMessages__sendPlatformMessage: function(channel, message) {
      var t1 = P.ByteData,
        t2 = new P._Future($.Zone__current, [t1]);
      $.$get$window().sendPlatformMessage$3(channel, message, new B.BinaryMessages__sendPlatformMessage_closure(new P._AsyncCompleter(t2, [t1])));
      return t2;
    },
    BinaryMessages_handlePlatformMessage: function(channel, data, callback) {
      H.functionTypeCheck(callback, {func: 1, ret: -1, args: [P.ByteData]});
      return B.BinaryMessages_handlePlatformMessage$body(channel, data, callback);
    },
    BinaryMessages_handlePlatformMessage$body: function(channel, data, callback) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(-1),
        $async$handler = 1, $async$currentError, $async$next = [], handler, exception, stack, exception0, t1, response, $async$exception0;
      var $async$BinaryMessages_handlePlatformMessage = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              response = null;
              $async$handler = 3;
              handler = $.BinaryMessages__handlers.$index(0, channel);
              $async$goto = handler != null ? 6 : 7;
              break;
            case 6:
              // then
              $async$goto = 8;
              return P._asyncAwait(handler.call$1(data), $async$BinaryMessages_handlePlatformMessage);
            case 8:
              // returning from await.
              response = $async$result;
            case 7:
              // join
              $async$next.push(5);
              // goto finally
              $async$goto = 4;
              break;
            case 3:
              // catch
              $async$handler = 2;
              $async$exception0 = $async$currentError;
              exception = H.unwrapException($async$exception0);
              stack = H.getTraceFromException($async$exception0);
              t1 = U.FlutterErrorDetails$("during a platform message callback", exception, null, "services library", false, stack);
              U.assertions_FlutterError_dumpErrorToConsole$closure().call$1(t1);
              $async$next.push(5);
              // goto finally
              $async$goto = 4;
              break;
            case 2:
              // uncaught
              $async$next = [1];
            case 4:
              // finally
              $async$handler = 1;
              callback.call$1(response);
              // goto the next finally handler
              $async$goto = $async$next.pop();
              break;
            case 5:
              // after finally
              // implicit return
              return P._asyncReturn(null, $async$completer);
            case 1:
              // rethrow
              return P._asyncRethrow($async$currentError, $async$completer);
          }
      });
      return P._asyncStartSync($async$BinaryMessages_handlePlatformMessage, $async$completer);
    },
    BinaryMessages_send: function(channel, message) {
      $.BinaryMessages__mockHandlers.$index(0, channel);
      return B.BinaryMessages__sendPlatformMessage(channel, message);
    },
    BinaryMessages_setMessageHandler: function(channel, handler) {
      H.functionTypeCheck(handler, {func: 1, ret: [P.Future, P.ByteData], args: [P.ByteData]});
      if (handler == null)
        $.BinaryMessages__handlers.remove$1(0, channel);
      else
        $.BinaryMessages__handlers.$indexSet(0, channel, handler);
    },
    BinaryMessages__sendPlatformMessage_closure: function BinaryMessages__sendPlatformMessage_closure(t0) {
      this.completer = t0;
    },
    ConnectionState: function ConnectionState(t0) {
      this._async0$_name = t0;
    },
    AsyncSnapshot: function AsyncSnapshot(t0, t1, t2, t3) {
      var _ = this;
      _.connectionState = t0;
      _.data = t1;
      _.error = t2;
      _.$ti = t3;
    },
    FutureBuilder: function FutureBuilder(t0, t1, t2, t3) {
      var _ = this;
      _.future = t0;
      _.builder = t1;
      _.key = t2;
      _.$ti = t3;
    },
    _FutureBuilderState: function _FutureBuilderState(t0, t1) {
      var _ = this;
      _._widget = _._snapshot = _._activeCallbackIdentity = null;
      _._debugLifecycleState = t0;
      _._element = null;
      _.$ti = t1;
    },
    _FutureBuilderState__subscribe_closure: function _FutureBuilderState__subscribe_closure(t0, t1) {
      this.$this = t0;
      this.callbackIdentity = t1;
    },
    _FutureBuilderState__subscribe__closure0: function _FutureBuilderState__subscribe__closure0(t0, t1) {
      this.$this = t0;
      this.data = t1;
    },
    _FutureBuilderState__subscribe_closure0: function _FutureBuilderState__subscribe_closure0(t0, t1) {
      this.$this = t0;
      this.callbackIdentity = t1;
    },
    _FutureBuilderState__subscribe__closure: function _FutureBuilderState__subscribe__closure(t0, t1) {
      this.$this = t0;
      this.error = t1;
    },
    ScrollView: function ScrollView() {
    },
    ScrollView_build_closure: function ScrollView_build_closure(t0, t1, t2) {
      this.$this = t0;
      this.axisDirection = t1;
      this.slivers = t2;
    },
    BoxScrollView: function BoxScrollView() {
    },
    ListView: function ListView(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11) {
      var _ = this;
      _.childrenDelegate = t0;
      _.padding = t1;
      _.scrollDirection = t2;
      _.reverse = t3;
      _.controller = t4;
      _.primary = t5;
      _.physics = t6;
      _.shrinkWrap = t7;
      _.cacheExtent = t8;
      _.semanticChildCount = t9;
      _.dragStartBehavior = t10;
      _.key = t11;
    },
    nearEqual: function(a, b, epsilon) {
      if (a == null || b == null)
        return a == b;
      if (typeof a !== "number")
        return a.$gt();
      return a > b - epsilon && a < b + epsilon || a === b;
    }
  },
  T = {
    defaultTargetPlatform: function() {
      return C.TargetPlatform_0;
    },
    TargetPlatform: function TargetPlatform(t0) {
      this._platform$_name = t0;
    },
    LongPressStartDetails: function LongPressStartDetails() {
    },
    LongPressMoveUpdateDetails: function LongPressMoveUpdateDetails() {
    },
    LongPressEndDetails: function LongPressEndDetails() {
    },
    LongPressGestureRecognizer: function LongPressGestureRecognizer(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _._longPressAccepted = false;
      _.onLongPressEnd = _.onLongPressUp = _.onLongPressMoveUpdate = _.onLongPressStart = _.onLongPress = _._longPressOrigin = null;
      _.deadline = t0;
      _.postAcceptSlopTolerance = t1;
      _.state = t2;
      _.initialPosition = _.primaryPointer = null;
      _._gestureAccepted = false;
      _._recognizer$_timer = null;
      _._recognizer$_entries = t3;
      _._trackedPointers = t4;
      _.debugOwner = t5;
      _._recognizer$_kind = t6;
    },
    _interpolateColorsAndStops: function(aColors, aStops, bColors, bStops, t) {
      var t2, interpolatedColors, i, interpolatedStops,
        t1 = [Q.Color];
      H.assertSubtype(aColors, "$isList", t1, "$asList");
      t2 = [P.double];
      H.assertSubtype(aStops, "$isList", t2, "$asList");
      H.assertSubtype(bColors, "$isList", t1, "$asList");
      H.assertSubtype(bStops, "$isList", t2, "$asList");
      interpolatedColors = H.setRuntimeTypeInfo([], t1);
      for (i = 0; i < aColors.length; ++i) {
        t1 = aColors[i];
        if (i >= bColors.length)
          return H.ioore(bColors, i);
        C.JSArray_methods.add$1(interpolatedColors, Q.Color_lerp(t1, bColors[i], t));
      }
      t1 = aStops == null;
      if (!t1 || bStops != null) {
        if (t1)
          aStops = C.List_0_1;
        if (bStops == null)
          bStops = C.List_0_1;
        interpolatedStops = H.setRuntimeTypeInfo([], t2);
        for (i = 0; i < aStops.length; ++i) {
          t1 = aStops[i];
          if (i >= bStops.length)
            return H.ioore(bStops, i);
          C.JSArray_methods.add$1(interpolatedStops, J.clamp$2$n(Q.lerpDouble(t1, bStops[i], t), 0, 1));
        }
      } else
        interpolatedStops = null;
      return new T._ColorsAndStops(interpolatedColors, interpolatedStops);
    },
    Gradient_lerp: function(a, b, t) {
      return;
    },
    LinearGradient$: function(begin, colors, end, stops, tileMode) {
      return new T.LinearGradient(begin, end, tileMode, colors, stops);
    },
    LinearGradient_lerp: function(a, b, t) {
      var interpolated, t2, t3,
        t1 = a == null;
      if (t1 && b == null)
        return;
      if (t1)
        return b.scale$1(0, t);
      if (b == null) {
        if (typeof t !== "number")
          return H.iae(t);
        return a.scale$1(0, 1 - t);
      }
      interpolated = T._interpolateColorsAndStops(a.colors, a.stops, b.colors, b.stops, t);
      t1 = K.AlignmentGeometry_lerp(a.begin, b.begin, t);
      t2 = K.AlignmentGeometry_lerp(a.end, b.end, t);
      if (typeof t !== "number")
        return t.$lt();
      t3 = t < 0.5 ? a.tileMode : b.tileMode;
      return T.LinearGradient$(t1, interpolated.colors, t2, interpolated.stops, t3);
    },
    _ColorsAndStops: function _ColorsAndStops(t0, t1) {
      this.colors = t0;
      this.stops = t1;
    },
    Gradient: function Gradient() {
    },
    Gradient__impliedStops_closure: function Gradient__impliedStops_closure(t0) {
      this.separation = t0;
    },
    LinearGradient: function LinearGradient(t0, t1, t2, t3, t4) {
      var _ = this;
      _.begin = t0;
      _.end = t1;
      _.tileMode = t2;
      _.colors = t3;
      _.stops = t4;
    },
    LinearGradient_scale_closure: function LinearGradient_scale_closure(t0) {
      this.factor = t0;
    },
    Simulation: function Simulation() {
    },
    DebugOverflowIndicatorMixin: function DebugOverflowIndicatorMixin() {
    },
    PhysicalModelLayer$: function(clipBehavior, clipPath, color, elevation, shadowColor) {
      return new T.PhysicalModelLayer(clipPath, clipBehavior, elevation, color, shadowColor);
    },
    Layer: function Layer() {
    },
    PictureLayer: function PictureLayer(t0) {
      var _ = this;
      _.canvasBounds = t0;
      _._picture = null;
      _._willChangeHint = _._isComplexHint = false;
      _._layer$_webOnlyPaintedBy = null;
      _._needsAddToScene = true;
      _.debugCreator = _._layer$_previousSibling = _._layer$_nextSibling = _._engineLayer = _._subtreeNeedsAddToScene = null;
      _._node$_depth = 0;
      _._node$_parent = _._node$_owner = null;
    },
    PerformanceOverlayLayer: function PerformanceOverlayLayer(t0, t1, t2, t3, t4) {
      var _ = this;
      _._overlayRect = t0;
      _.optionsMask = t1;
      _.rasterizerThreshold = t2;
      _.checkerboardRasterCacheImages = t3;
      _.checkerboardOffscreenLayers = t4;
      _._layer$_webOnlyPaintedBy = null;
      _._needsAddToScene = true;
      _.debugCreator = _._layer$_previousSibling = _._layer$_nextSibling = _._engineLayer = _._subtreeNeedsAddToScene = null;
      _._node$_depth = 0;
      _._node$_parent = _._node$_owner = null;
    },
    ContainerLayer: function ContainerLayer() {
    },
    OffsetLayer: function OffsetLayer(t0) {
      var _ = this;
      _._layer$_offset = t0;
      _._layer$_webOnlyPaintedBy = _._layer$_lastChild = _._layer$_firstChild = null;
      _._needsAddToScene = true;
      _.debugCreator = _._layer$_previousSibling = _._layer$_nextSibling = _._engineLayer = _._subtreeNeedsAddToScene = null;
      _._node$_depth = 0;
      _._node$_parent = _._node$_owner = null;
    },
    ClipRectLayer: function ClipRectLayer(t0, t1) {
      var _ = this;
      _._clipRect = t0;
      _._clipBehavior = t1;
      _._layer$_webOnlyPaintedBy = _._layer$_lastChild = _._layer$_firstChild = null;
      _._needsAddToScene = true;
      _.debugCreator = _._layer$_previousSibling = _._layer$_nextSibling = _._engineLayer = _._subtreeNeedsAddToScene = null;
      _._node$_depth = 0;
      _._node$_parent = _._node$_owner = null;
    },
    ClipPathLayer: function ClipPathLayer(t0, t1) {
      var _ = this;
      _._clipPath = t0;
      _._clipBehavior = t1;
      _._layer$_webOnlyPaintedBy = _._layer$_lastChild = _._layer$_firstChild = null;
      _._needsAddToScene = true;
      _.debugCreator = _._layer$_previousSibling = _._layer$_nextSibling = _._engineLayer = _._subtreeNeedsAddToScene = null;
      _._node$_depth = 0;
      _._node$_parent = _._node$_owner = null;
    },
    TransformLayer: function TransformLayer(t0, t1) {
      var _ = this;
      _._layer$_transform = t0;
      _._invertedTransform = _._lastEffectiveTransform = null;
      _._inverseDirty = true;
      _._layer$_offset = t1;
      _._layer$_webOnlyPaintedBy = _._layer$_lastChild = _._layer$_firstChild = null;
      _._needsAddToScene = true;
      _.debugCreator = _._layer$_previousSibling = _._layer$_nextSibling = _._engineLayer = _._subtreeNeedsAddToScene = null;
      _._node$_depth = 0;
      _._node$_parent = _._node$_owner = null;
    },
    OpacityLayer: function OpacityLayer(t0, t1) {
      var _ = this;
      _._layer$_alpha = t0;
      _._layer$_offset = t1;
      _._layer$_webOnlyPaintedBy = _._layer$_lastChild = _._layer$_firstChild = null;
      _._needsAddToScene = true;
      _.debugCreator = _._layer$_previousSibling = _._layer$_nextSibling = _._engineLayer = _._subtreeNeedsAddToScene = null;
      _._node$_depth = 0;
      _._node$_parent = _._node$_owner = null;
    },
    PhysicalModelLayer: function PhysicalModelLayer(t0, t1, t2, t3, t4) {
      var _ = this;
      _._clipPath = t0;
      _._clipBehavior = t1;
      _._layer$_elevation = t2;
      _._layer$_color = t3;
      _._layer$_shadowColor = t4;
      _._layer$_webOnlyPaintedBy = _._layer$_lastChild = _._layer$_firstChild = null;
      _._needsAddToScene = true;
      _.debugCreator = _._layer$_previousSibling = _._layer$_nextSibling = _._engineLayer = _._subtreeNeedsAddToScene = null;
      _._node$_depth = 0;
      _._node$_parent = _._node$_owner = null;
    },
    AnnotatedRegionLayer: function AnnotatedRegionLayer(t0, t1, t2, t3) {
      var _ = this;
      _.value = t0;
      _.size = t1;
      _.offset = t2;
      _._layer$_webOnlyPaintedBy = _._layer$_lastChild = _._layer$_firstChild = null;
      _._needsAddToScene = true;
      _.debugCreator = _._layer$_previousSibling = _._layer$_nextSibling = _._engineLayer = _._subtreeNeedsAddToScene = null;
      _._node$_depth = 0;
      _._node$_parent = _._node$_owner = null;
      _.$ti = t3;
    },
    _Layer_AbstractNode_DiagnosticableTreeMixin: function _Layer_AbstractNode_DiagnosticableTreeMixin() {
    },
    RenderShiftedBox: function RenderShiftedBox() {
    },
    RenderPadding: function RenderPadding(t0, t1, t2) {
      var _ = this;
      _._resolvedPadding = null;
      _._shifted_box$_padding = t0;
      _._shifted_box$_textDirection = t1;
      _.RenderObjectWithChildMixin__child = t2;
      _._cachedBaselines = _._size = _._cachedIntrinsicDimensions = null;
      _._debugActivePointers = 0;
      _.debugCreator = _.parentData = null;
      _._debugDoingThisLayout = _._debugDoingThisResize = false;
      _._debugCanParentUseSize = null;
      _._debugMutationsLocked = false;
      _._needsLayout = true;
      _._relayoutBoundary = null;
      _._doingThisLayoutWithCallback = false;
      _._constraints = null;
      _._debugDoingThisPaint = false;
      _._layer = null;
      _._needsCompositingBitsUpdate = false;
      _._needsCompositing = null;
      _._needsPaint = true;
      _._cachedSemanticsConfiguration = null;
      _._needsSemanticsUpdate = true;
      _._semantics = null;
      _._node$_depth = 0;
      _._node$_parent = _._node$_owner = null;
    },
    RenderAligningShiftedBox: function RenderAligningShiftedBox() {
    },
    RenderPositionedBox: function RenderPositionedBox(t0, t1, t2, t3, t4) {
      var _ = this;
      _._widthFactor = t0;
      _._heightFactor = t1;
      _._resolvedAlignment = null;
      _._alignment = t2;
      _._shifted_box$_textDirection = t3;
      _.RenderObjectWithChildMixin__child = t4;
      _._cachedBaselines = _._size = _._cachedIntrinsicDimensions = null;
      _._debugActivePointers = 0;
      _.debugCreator = _.parentData = null;
      _._debugDoingThisLayout = _._debugDoingThisResize = false;
      _._debugCanParentUseSize = null;
      _._debugMutationsLocked = false;
      _._needsLayout = true;
      _._relayoutBoundary = null;
      _._doingThisLayoutWithCallback = false;
      _._constraints = null;
      _._debugDoingThisPaint = false;
      _._layer = null;
      _._needsCompositingBitsUpdate = false;
      _._needsCompositing = null;
      _._needsPaint = true;
      _._cachedSemanticsConfiguration = null;
      _._needsSemanticsUpdate = true;
      _._semantics = null;
      _._node$_depth = 0;
      _._node$_parent = _._node$_owner = null;
    },
    _RenderShiftedBox_RenderBox_RenderObjectWithChildMixin: function _RenderShiftedBox_RenderBox_RenderObjectWithChildMixin() {
    },
    RenderSliverPadding: function RenderSliverPadding(t0, t1, t2) {
      var _ = this;
      _._sliver_padding$_resolvedPadding = null;
      _._sliver_padding$_padding = t0;
      _._sliver_padding$_textDirection = t1;
      _.RenderObjectWithChildMixin__child = t2;
      _.debugCreator = _.parentData = _._geometry = null;
      _._debugDoingThisLayout = _._debugDoingThisResize = false;
      _._debugCanParentUseSize = null;
      _._debugMutationsLocked = false;
      _._needsLayout = true;
      _._relayoutBoundary = null;
      _._doingThisLayoutWithCallback = false;
      _._constraints = null;
      _._debugDoingThisPaint = false;
      _._layer = null;
      _._needsCompositingBitsUpdate = false;
      _._needsCompositing = null;
      _._needsPaint = true;
      _._cachedSemanticsConfiguration = null;
      _._needsSemanticsUpdate = true;
      _._semantics = null;
      _._node$_depth = 0;
      _._node$_parent = _._node$_owner = null;
    },
    _RenderSliverPadding_RenderSliver_RenderObjectWithChildMixin: function _RenderSliverPadding_RenderSliver_RenderObjectWithChildMixin() {
    },
    Directionality_of: function(context) {
      var widget = H.interceptedTypeCheck(context.inheritFromWidgetOfExactType$1(C.Type_Directionality_8Om), "$isDirectionality");
      return widget == null ? null : widget.textDirection;
    },
    Opacity$: function(child, opacity) {
      return new T.Opacity(opacity, child, null);
    },
    CustomPaint$: function(child, foregroundPainter, painter) {
      return new T.CustomPaint(painter, foregroundPainter, child, null);
    },
    Transform$: function(alignment, child, transform, transformHitTests) {
      return new T.Transform0(transform, alignment, transformHitTests, child, null);
    },
    getAxisDirectionFromAxisReverseAndDirectionality: function(context, axis, reverse) {
      var axisDirection;
      switch (axis) {
        case C.Axis_0:
          axisDirection = G.textDirectionToAxisDirection(T.Directionality_of(context));
          return axisDirection;
        case C.Axis_1:
          return C.AxisDirection_2;
      }
      return;
    },
    Stack$: function(alignment, children, fit) {
      return new T.Stack(alignment, fit, children, null);
    },
    Positioned$: function(bottom, child, height, key, left, right, $top, width) {
      return new T.Positioned(left, $top, right, bottom, width, height, child, key);
    },
    Flex$: function(children, crossAxisAlignment, direction, key, mainAxisAlignment, mainAxisSize, textBaseline, textDirection, verticalDirection) {
      return new T.Flex(direction, mainAxisAlignment, mainAxisSize, crossAxisAlignment, textDirection, verticalDirection, textBaseline, children, key);
    },
    RichText$: function(locale, maxLines, overflow, softWrap, text, textAlign, textDirection, textScaleFactor) {
      return new T.RichText(text, textAlign, textDirection, true, overflow, textScaleFactor, maxLines, locale, null);
    },
    Listener$: function(behavior, child, onPointerCancel, onPointerDown, onPointerSignal, onPointerUp) {
      return new T.Listener(onPointerDown, onPointerUp, onPointerCancel, onPointerSignal, behavior, child, null);
    },
    Semantics$: function(button, child, container, enabled, explicitChildNodes, label, onDismiss, scopesRoute, textDirection) {
      var _null = null;
      return new T.Semantics(new A.SemanticsProperties(enabled, _null, _null, _null, button, _null, _null, _null, _null, _null, _null, scopesRoute, _null, _null, _null, label, _null, _null, _null, _null, _null, textDirection, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, onDismiss, _null), container, explicitChildNodes, false, child, _null);
    },
    Directionality: function Directionality(t0, t1, t2) {
      this.textDirection = t0;
      this.child = t1;
      this.key = t2;
    },
    Opacity: function Opacity(t0, t1, t2) {
      this.opacity = t0;
      this.child = t1;
      this.key = t2;
    },
    CustomPaint: function CustomPaint(t0, t1, t2, t3) {
      var _ = this;
      _.painter = t0;
      _.foregroundPainter = t1;
      _.child = t2;
      _.key = t3;
    },
    ClipPath: function ClipPath(t0, t1, t2, t3) {
      var _ = this;
      _.clipper = t0;
      _.clipBehavior = t1;
      _.child = t2;
      _.key = t3;
    },
    PhysicalModel: function PhysicalModel(t0, t1, t2, t3, t4, t5, t6, t7) {
      var _ = this;
      _.shape = t0;
      _.clipBehavior = t1;
      _.borderRadius = t2;
      _.elevation = t3;
      _.color = t4;
      _.shadowColor = t5;
      _.child = t6;
      _.key = t7;
    },
    PhysicalShape: function PhysicalShape(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _.clipper = t0;
      _.clipBehavior = t1;
      _.elevation = t2;
      _.color = t3;
      _.shadowColor = t4;
      _.child = t5;
      _.key = t6;
    },
    Transform0: function Transform0(t0, t1, t2, t3, t4) {
      var _ = this;
      _.transform = t0;
      _.alignment = t1;
      _.transformHitTests = t2;
      _.child = t3;
      _.key = t4;
    },
    FractionalTranslation: function FractionalTranslation(t0, t1, t2, t3) {
      var _ = this;
      _.translation = t0;
      _.transformHitTests = t1;
      _.child = t2;
      _.key = t3;
    },
    Padding: function Padding(t0, t1, t2) {
      this.padding = t0;
      this.child = t1;
      this.key = t2;
    },
    Align: function Align(t0, t1, t2, t3, t4) {
      var _ = this;
      _.alignment = t0;
      _.widthFactor = t1;
      _.heightFactor = t2;
      _.child = t3;
      _.key = t4;
    },
    Center: function Center(t0, t1, t2, t3, t4) {
      var _ = this;
      _.alignment = t0;
      _.widthFactor = t1;
      _.heightFactor = t2;
      _.child = t3;
      _.key = t4;
    },
    LayoutId: function LayoutId(t0, t1, t2) {
      this.id = t0;
      this.child = t1;
      this.key = t2;
    },
    CustomMultiChildLayout: function CustomMultiChildLayout(t0, t1, t2) {
      this.delegate = t0;
      this.children = t1;
      this.key = t2;
    },
    SizedBox: function SizedBox(t0, t1, t2, t3) {
      var _ = this;
      _.width = t0;
      _.height = t1;
      _.child = t2;
      _.key = t3;
    },
    ConstrainedBox: function ConstrainedBox(t0, t1, t2) {
      this.constraints = t0;
      this.child = t1;
      this.key = t2;
    },
    LimitedBox: function LimitedBox(t0, t1, t2, t3) {
      var _ = this;
      _.maxWidth = t0;
      _.maxHeight = t1;
      _.child = t2;
      _.key = t3;
    },
    Offstage: function Offstage(t0, t1, t2) {
      this.offstage = t0;
      this.child = t1;
      this.key = t2;
    },
    _OffstageElement: function _OffstageElement(t0, t1, t2) {
      var _ = this;
      _._framework$_parent = _._ancestorRenderObjectElement = _._renderObject = _._framework$_child = null;
      _._cachedHash = t0;
      _._depth = _._slot = null;
      _._widget = t1;
      _._owner = null;
      _._active = false;
      _._debugLifecycleState = t2;
      _._dependencies = _._inheritedWidgets = null;
      _._hadUnsatisfiedDependencies = false;
      _._dirty = true;
      _._debugAllowIgnoredCallsToMarkNeedsBuild = _._debugBuiltOnce = _._inDirtyList = false;
    },
    SliverPadding: function SliverPadding(t0, t1, t2) {
      this.padding = t0;
      this.child = t1;
      this.key = t2;
    },
    Stack: function Stack(t0, t1, t2, t3) {
      var _ = this;
      _.alignment = t0;
      _.fit = t1;
      _.children = t2;
      _.key = t3;
    },
    Positioned: function Positioned(t0, t1, t2, t3, t4, t5, t6, t7) {
      var _ = this;
      _.left = t0;
      _.top = t1;
      _.right = t2;
      _.bottom = t3;
      _.width = t4;
      _.height = t5;
      _.child = t6;
      _.key = t7;
    },
    PositionedDirectional: function PositionedDirectional(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.start = t0;
      _.top = t1;
      _.bottom = t2;
      _.width = t3;
      _.child = t4;
      _.key = t5;
    },
    Flex: function Flex(t0, t1, t2, t3, t4, t5, t6, t7, t8) {
      var _ = this;
      _.direction = t0;
      _.mainAxisAlignment = t1;
      _.mainAxisSize = t2;
      _.crossAxisAlignment = t3;
      _.textDirection = t4;
      _.verticalDirection = t5;
      _.textBaseline = t6;
      _.children = t7;
      _.key = t8;
    },
    Flexible: function Flexible() {
    },
    Expanded: function Expanded(t0, t1, t2, t3) {
      var _ = this;
      _.flex = t0;
      _.fit = t1;
      _.child = t2;
      _.key = t3;
    },
    RichText: function RichText(t0, t1, t2, t3, t4, t5, t6, t7, t8) {
      var _ = this;
      _.text = t0;
      _.textAlign = t1;
      _.textDirection = t2;
      _.softWrap = t3;
      _.overflow = t4;
      _.textScaleFactor = t5;
      _.maxLines = t6;
      _.locale = t7;
      _.key = t8;
    },
    DefaultAssetBundle: function DefaultAssetBundle() {
    },
    Listener: function Listener(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _.onPointerDown = t0;
      _.onPointerUp = t1;
      _.onPointerCancel = t2;
      _.onPointerSignal = t3;
      _.behavior = t4;
      _.child = t5;
      _.key = t6;
    },
    RepaintBoundary: function RepaintBoundary(t0, t1) {
      this.child = t0;
      this.key = t1;
    },
    IgnorePointer: function IgnorePointer(t0, t1, t2, t3) {
      var _ = this;
      _.ignoring = t0;
      _.ignoringSemantics = t1;
      _.child = t2;
      _.key = t3;
    },
    AbsorbPointer: function AbsorbPointer(t0, t1, t2) {
      this.absorbing = t0;
      this.child = t1;
      this.key = t2;
    },
    Semantics: function Semantics(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.properties = t0;
      _.container = t1;
      _.explicitChildNodes = t2;
      _.excludeSemantics = t3;
      _.child = t4;
      _.key = t5;
    },
    BlockSemantics: function BlockSemantics(t0, t1) {
      this.child = t0;
      this.key = t1;
    },
    ExcludeSemantics: function ExcludeSemantics(t0, t1, t2) {
      this.excluding = t0;
      this.child = t1;
      this.key = t2;
    },
    IndexedSemantics: function IndexedSemantics(t0, t1, t2) {
      this.index = t0;
      this.child = t1;
      this.key = t2;
    },
    KeyedSubtree: function KeyedSubtree(t0, t1) {
      this.child = t0;
      this.key = t1;
    },
    Builder: function Builder(t0, t1) {
      this.builder = t0;
      this.key = t1;
    },
    _globalBoundingBoxFor: function(context) {
      var box = H.interceptedTypeCheck(context.get$renderObject(), "$isRenderBox"),
        t1 = box.getTransformTo$1(0, null),
        t2 = box._size,
        t3 = t2._dx;
      t2 = t2._dy;
      if (typeof t3 !== "number")
        return H.iae(t3);
      if (typeof t2 !== "number")
        return H.iae(t2);
      return T.MatrixUtils_transformRect(t1, new Q.Rect(0, 0, 0 + t3, 0 + t2));
    },
    Hero__allHeroesFor: function(context, isUserGestureTransition) {
      var result = P.LinkedHashMap_LinkedHashMap$_empty(P.Object, T._HeroState);
      context.toString;
      context.visitChildren$1(H.functionTypeCheck(new T.Hero__allHeroesFor_visitor(isUserGestureTransition, result), {func: 1, ret: -1, args: [N.Element]}));
      return result;
    },
    HeroFlightDirection: function HeroFlightDirection(t0) {
      this._heroes$_name = t0;
    },
    Hero: function Hero(t0, t1, t2) {
      this.tag = t0;
      this.child = t1;
      this.key = t2;
    },
    Hero__allHeroesFor_visitor: function Hero__allHeroesFor_visitor(t0, t1) {
      this.isUserGestureTransition = t0;
      this.result = t1;
    },
    _HeroState: function _HeroState(t0, t1) {
      var _ = this;
      _._heroes$_key = t0;
      _._widget = _._placeholderSize = null;
      _._debugLifecycleState = t1;
      _._element = null;
    },
    _HeroState_startFlight_closure: function _HeroState_startFlight_closure(t0, t1) {
      this.$this = t0;
      this.box = t1;
    },
    _HeroState_endFlight_closure: function _HeroState_endFlight_closure(t0) {
      this.$this = t0;
    },
    _HeroFlightManifest: function _HeroFlightManifest(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9) {
      var _ = this;
      _.type = t0;
      _.overlay = t1;
      _.navigatorRect = t2;
      _.fromRoute = t3;
      _.toRoute = t4;
      _.fromHero = t5;
      _.toHero = t6;
      _.createRectTween = t7;
      _.shuttleBuilder = t8;
      _.isUserGestureTransition = t9;
    },
    _HeroFlight: function _HeroFlight(t0, t1) {
      var _ = this;
      _.onFlightEnded = t0;
      _.shuttle = _.heroRectTween = null;
      _._heroOpacity = t1;
      _.overlayEntry = _.manifest = _._proxyAnimation = null;
      _._aborted = false;
    },
    _HeroFlight__buildOverlay_closure: function _HeroFlight__buildOverlay_closure(t0) {
      this.$this = t0;
    },
    HeroController: function HeroController(t0, t1) {
      this.createRectTween = t0;
      this._flights = t1;
      this._navigator$_navigator = null;
    },
    HeroController__maybeStartHeroTransition_closure: function HeroController__maybeStartHeroTransition_closure(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.$this = t0;
      _.from = t1;
      _.to = t2;
      _.animation = t3;
      _.flightType = t4;
      _.isUserGestureTransition = t5;
    },
    HeroController_closure: function HeroController_closure() {
    },
    IconThemeData_lerp: function(a, b, t) {
      var t4, _null = null,
        t1 = a == null,
        t2 = t1 ? _null : a.color,
        t3 = b == null;
      t2 = Q.Color_lerp(t2, t3 ? _null : b.color, t);
      t4 = t1 ? _null : a.get$opacity(a);
      t4 = Q.lerpDouble(t4, t3 ? _null : b.get$opacity(b), t);
      t1 = t1 ? _null : a.size;
      return new T.IconThemeData(t2, t4, Q.lerpDouble(t1, t3 ? _null : b.size, t));
    },
    IconThemeData: function IconThemeData(t0, t1, t2) {
      this.color = t0;
      this._opacity = t1;
      this.size = t2;
    },
    ModalRoute_of: function(context, $T) {
      var widget = H.interceptedTypeCheck(context.inheritFromWidgetOfExactType$1(C.Type__ModalScopeStatus_sUr), "$is_ModalScopeStatus"),
        t1 = widget == null ? null : widget.route;
      return H.assertSubtype(t1, "$isModalRoute", [$T], "$asModalRoute");
    },
    OverlayRoute: function OverlayRoute() {
    },
    TransitionRoute: function TransitionRoute() {
    },
    TransitionRoute__updateSecondaryAnimation_closure: function TransitionRoute__updateSecondaryAnimation_closure(t0, t1, t2) {
      this._box_0 = t0;
      this.$this = t1;
      this.nextRoute = t2;
    },
    LocalHistoryEntry: function LocalHistoryEntry() {
    },
    LocalHistoryRoute: function LocalHistoryRoute() {
    },
    _ModalScopeStatus: function _ModalScopeStatus(t0, t1, t2, t3, t4) {
      var _ = this;
      _.isCurrent = t0;
      _.canPop = t1;
      _.route = t2;
      _.child = t3;
      _.key = t4;
    },
    _ModalScope: function _ModalScope(t0, t1, t2) {
      this.route = t0;
      this.key = t1;
      this.$ti = t2;
    },
    _ModalScopeState: function _ModalScopeState(t0, t1) {
      var _ = this;
      _._widget = _._listenable = _._page = null;
      _._debugLifecycleState = t0;
      _._element = null;
      _.$ti = t1;
    },
    _ModalScopeState__forceRebuildPage_closure: function _ModalScopeState__forceRebuildPage_closure(t0) {
      this.$this = t0;
    },
    _ModalScopeState_build_closure0: function _ModalScopeState_build_closure0(t0) {
      this.$this = t0;
    },
    _ModalScopeState_build_closure: function _ModalScopeState_build_closure(t0) {
      this.$this = t0;
    },
    ModalRoute: function ModalRoute() {
    },
    ModalRoute_offstage_closure: function ModalRoute_offstage_closure(t0, t1) {
      this.$this = t0;
      this.value = t1;
    },
    ModalRoute_changedInternalState_closure: function ModalRoute_changedInternalState_closure() {
    },
    _ModalRoute_TransitionRoute_LocalHistoryRoute: function _ModalRoute_TransitionRoute_LocalHistoryRoute() {
    },
    webOnlyInitializeEngine: function() {
      var t1 = {};
      if ($._engineInitialized)
        return;
      P.registerExtension("ext.flutter.disassemble", new T.webOnlyInitializeEngine_closure());
      $._engineInitialized = true;
      $.$get$domRenderer();
      t1.waitingForAnimation = false;
      $.$get$window().set$webOnlyScheduleFrameCallback(new T.webOnlyInitializeEngine_closure0(t1));
      if ($.Keyboard__instance == null)
        $.Keyboard__instance = T.Keyboard$_();
    },
    BitmapCanvas$: function(bounds) {
      var t1 = H.interceptedTypeCheck(W._ElementFactoryProvider_createElement_tag("flt-canvas", null), "$isElement0"),
        t2 = H.setRuntimeTypeInfo([], [W.Element0]),
        t3 = window.devicePixelRatio,
        t4 = H.setRuntimeTypeInfo([], [T._SaveStackEntry]),
        t5 = new T.Matrix40(new Float64Array(16));
      t5.setIdentity$0();
      t5 = new T.BitmapCanvas(bounds, t1, t2, t3, t4, null, t5);
      t5.BitmapCanvas$1(bounds);
      return t5;
    },
    _stringForBlendMode: function(blendMode) {
      if (blendMode == null)
        return;
      switch (blendMode) {
        case C.BlendMode_3:
          return "source-over";
        case C.BlendMode_5:
          return "source-in";
        case C.BlendMode_7:
          return "source-out";
        case C.BlendMode_9:
          return "source-atop";
        case C.BlendMode_4:
          return "destination-over";
        case C.BlendMode_6:
          return "destination-in";
        case C.BlendMode_8:
          return "destination-out";
        case C.BlendMode_10:
          return "destination-atop";
        case C.BlendMode_12:
          return "lighten";
        case C.BlendMode_1:
          return "copy";
        case C.BlendMode_11:
          return "xor";
        case C.BlendMode_24:
        case C.BlendMode_13:
          return "multiply";
        case C.BlendMode_14:
          return "screen";
        case C.BlendMode_15:
          return "overlay";
        case C.BlendMode_16:
          return "darken";
        case C.BlendMode_17:
          return "lighten";
        case C.BlendMode_18:
          return "color-dodge";
        case C.BlendMode_19:
          return "color-burn";
        case C.BlendMode_20:
          return "hard-light";
        case C.BlendMode_21:
          return "soft-light";
        case C.BlendMode_22:
          return "difference";
        case C.BlendMode_23:
          return "exclusion";
        case C.BlendMode_25:
          return "hue";
        case C.BlendMode_26:
          return "saturation";
        case C.BlendMode_27:
          return "color";
        case C.BlendMode_28:
          return "luminosity";
        default:
          throw H.wrapException(P.UnimplementedError$("Flutter Web does not support the blend mode: " + blendMode.toString$0(0)));
      }
    },
    _stringForStrokeCap: function(strokeCap) {
      switch (strokeCap) {
        case C.StrokeCap_0:
          return "butt";
        case C.StrokeCap_1:
          return "round";
        case C.StrokeCap_2:
        default:
          return "square";
      }
    },
    _clipContent: function(clipStack, $content, offset, currentTransform) {
      var t1, clipDefs, len, root, curElement, clipIndex, entry, t2, newElement, rect, newClipTransform, clipOffsetX, clipOffsetY, t3, newClipTransform0, t4, value, borderRadius, t5, t6, bounds, sb, clipElement, reverseTransformDiv,
        _s9_ = "transform",
        _s16_ = "transform-origin",
        _s16_0 = "url(#svgClipText";
      H.assertSubtype(clipStack, "$isList", [T._SaveClipEntry], "$asList");
      t1 = [W.Element0];
      clipDefs = H.setRuntimeTypeInfo([], t1);
      for (len = clipStack.length, root = null, curElement = null, clipIndex = 0; clipIndex < len; ++clipIndex, curElement = reverseTransformDiv) {
        if (clipIndex >= clipStack.length)
          return H.ioore(clipStack, clipIndex);
        entry = clipStack[clipIndex];
        t2 = document;
        newElement = t2.createElement("div");
        if (root == null)
          root = newElement;
        else {
          $.$get$domRenderer().toString;
          curElement.appendChild(newElement);
        }
        rect = entry.rect;
        newClipTransform = entry.currentTransform;
        if (rect != null) {
          clipOffsetX = rect.left;
          clipOffsetY = rect.top;
          t3 = new Float64Array(16);
          newClipTransform0 = new T.Matrix40(t3);
          newClipTransform0.setFrom$1(newClipTransform);
          newClipTransform0.translate$2(0, clipOffsetX, clipOffsetY);
          t4 = newElement.style;
          t4.overflow = "hidden";
          value = T.float64ListToCssTransform(t3);
          t3 = (t4 && C.CssStyleDeclaration_methods)._browserPropertyName$1(t4, _s9_);
          t4.setProperty(t3, value, "");
          t3 = C.CssStyleDeclaration_methods._browserPropertyName$1(t4, _s16_);
          t4.setProperty(t3, "0 0 0", "");
          t3 = rect.right;
          if (typeof t3 !== "number")
            return t3.$sub();
          if (typeof clipOffsetX !== "number")
            return H.iae(clipOffsetX);
          t3 = H.S(t3 - clipOffsetX) + "px";
          t4.width = t3;
          t3 = rect.bottom;
          if (typeof t3 !== "number")
            return t3.$sub();
          if (typeof clipOffsetY !== "number")
            return H.iae(clipOffsetY);
          t3 = H.S(t3 - clipOffsetY) + "px";
          t4.height = t3;
          newClipTransform = newClipTransform0;
        } else {
          t3 = entry.rrect;
          if (t3 != null) {
            borderRadius = H.S(t3.tlRadiusX) + "px " + H.S(t3.trRadiusX) + "px " + H.S(t3.brRadiusX) + "px " + H.S(t3.blRadiusX) + "px";
            clipOffsetX = t3.left;
            clipOffsetY = t3.top;
            t4 = new Float64Array(16);
            newClipTransform0 = new T.Matrix40(t4);
            newClipTransform0.setFrom$1(newClipTransform);
            newClipTransform0.translate$2(0, clipOffsetX, clipOffsetY);
            t5 = newElement.style;
            t6 = (t5 && C.CssStyleDeclaration_methods)._browserPropertyName$1(t5, "border-radius");
            t5.setProperty(t6, borderRadius, "");
            t5.overflow = "hidden";
            value = T.float64ListToCssTransform(t4);
            t4 = C.CssStyleDeclaration_methods._browserPropertyName$1(t5, _s9_);
            t5.setProperty(t4, value, "");
            t4 = C.CssStyleDeclaration_methods._browserPropertyName$1(t5, _s16_);
            t5.setProperty(t4, "0 0 0", "");
            t4 = t3.right;
            if (typeof t4 !== "number")
              return t4.$sub();
            if (typeof clipOffsetX !== "number")
              return H.iae(clipOffsetX);
            t4 = H.S(t4 - clipOffsetX) + "px";
            t5.width = t4;
            t3 = t3.bottom;
            if (typeof t3 !== "number")
              return t3.$sub();
            if (typeof clipOffsetY !== "number")
              return H.iae(clipOffsetY);
            t3 = H.S(t3 - clipOffsetY) + "px";
            t5.height = t3;
            newClipTransform = newClipTransform0;
          } else {
            t3 = entry.path;
            if (t3 != null) {
              t4 = newElement.style;
              value = T.float64ListToCssTransform(newClipTransform._engine$_m4storage);
              t5 = (t4 && C.CssStyleDeclaration_methods)._browserPropertyName$1(t4, _s9_);
              t4.setProperty(t5, value, "");
              bounds = t3.getBounds$0(0);
              sb = new P.StringBuffer("");
              t4 = '<svg width="' + H.S(bounds.right) + '" height="' + H.S(bounds.bottom) + '" style="position:absolute">';
              sb._contents = t4;
              t4 += "<defs>";
              sb._contents = t4;
              t5 = $._clipTextCounter + 1;
              $._clipTextCounter = t5;
              t5 = t4 + ("<clipPath id=" + ("svgClipText" + t5) + ">");
              sb._contents = t5;
              sb._contents = t5 + '<path fill="#FFFFFF" d="';
              T.pathToSvg(t3, sb, 0, 0);
              t3 = sb._contents += '"></path></clipPath></defs></svg';
              clipElement = W.Element_Element$html(t3.charCodeAt(0) == 0 ? t3 : t3, new T._NullTreeSanitizer0(), null);
              t3 = $.$get$domRenderer();
              value = _s16_0 + $._clipTextCounter + ")";
              t3.toString;
              t3 = newElement.style;
              t4 = (t3 && C.CssStyleDeclaration_methods)._browserPropertyName$1(t3, "clip-path");
              t3.setProperty(t4, value, "");
              value = _s16_0 + $._clipTextCounter + ")";
              t3 = newElement.style;
              t4 = (t3 && C.CssStyleDeclaration_methods)._browserPropertyName$1(t3, "-webkit-clip-path");
              t3.setProperty(t4, value, "");
              C.JSArray_methods.add$1(clipDefs, clipElement);
            }
          }
        }
        reverseTransformDiv = t2.createElement("div");
        t2 = reverseTransformDiv.style;
        t3 = new T.Matrix40(new Float64Array(16));
        t3.setFrom$1(newClipTransform);
        t3.copyInverse$1(t3);
        value = T.float64ListToCssTransform(T.transformWithOffset(t3, new Q.Offset(0, 0))._engine$_m4storage);
        t3 = (t2 && C.CssStyleDeclaration_methods)._browserPropertyName$1(t2, _s9_);
        t2.setProperty(t3, value, "");
        t3 = C.CssStyleDeclaration_methods._browserPropertyName$1(t2, _s16_);
        t2.setProperty(t3, "0 0 0", "");
        newElement.appendChild(reverseTransformDiv);
      }
      t2 = root.style;
      t2.position = "absolute";
      $.$get$domRenderer().toString;
      curElement.appendChild($content);
      t2 = $content.style;
      t3 = T.float64ListToCssTransform(T.transformWithOffset(currentTransform, new Q.Offset(offset._dx, offset._dy))._engine$_m4storage);
      C.CssStyleDeclaration_methods._setPropertyHelper$3(t2, (t2 && C.CssStyleDeclaration_methods)._browserPropertyName$1(t2, _s9_), t3, "");
      t1 = H.setRuntimeTypeInfo([root], t1);
      C.JSArray_methods.addAll$1(t1, clipDefs);
      return t1;
    },
    _detectBrowserEngine: function() {
      var vendor = window.navigator.vendor;
      if (vendor === "Google Inc.")
        return C.BrowserEngine_0;
      else if (vendor === "Apple Computer, Inc.")
        return C.BrowserEngine_1;
      P.print("WARNING: failed to detect current browser engine.");
      return C.BrowserEngine_2;
    },
    transformWithOffset: function(transform, offset) {
      var effectiveTransform;
      if (offset.$eq(0, C.Offset_0_0))
        return transform;
      effectiveTransform = new T.Matrix40(new Float64Array(16));
      effectiveTransform.setFrom$1(transform);
      effectiveTransform.translate$3(0, offset._dx, offset._dy, 0);
      return effectiveTransform;
    },
    _isFlutterEntry: function(state) {
      var t1 = J.getInterceptor$(state);
      return !!t1.$isMap && J.$eq$(t1.$index(state, "flutter"), true);
    },
    Keyboard$_: function() {
      var t1 = new T.Keyboard(new T.JSONMessageCodec());
      t1.Keyboard$_$0();
      return t1;
    },
    _noopCallback: function(data) {
      H.interceptedTypeCheck(data, "$isByteData");
    },
    pathToSvg: function(path, sb, offsetX, offsetY) {
      var t1, t2, _i, t3, t4, _i0, command, t5, t6, t7, t8, t9, t10, t11, rrect, left, right, $top, bottom, t0, trRadiusX, tlRadiusX, trRadiusY, tlRadiusY, blRadiusX, brRadiusX, blRadiusY, brRadiusY, width, horizontalSwap, height, verticalSwap;
      for (t1 = path.subpaths, t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i)
        for (t3 = t1[_i].commands, t4 = t3.length, _i0 = 0; _i0 < t3.length; t3.length === t4 || (0, H.throwConcurrentModificationError)(t3), ++_i0) {
          command = t3[_i0];
          switch (command.type) {
            case 0:
              H.interceptedTypeCheck(command, "$isMoveTo");
              t5 = command.x;
              if (typeof t5 !== "number")
                return t5.$add();
              t5 = "M " + H.S(t5 + offsetX) + " ";
              t6 = command.y;
              if (typeof t6 !== "number")
                return t6.$add();
              sb._contents += t5 + H.S(t6 + offsetY);
              break;
            case 1:
              H.interceptedTypeCheck(command, "$isLineTo");
              t5 = command.x;
              if (typeof t5 !== "number")
                return t5.$add();
              t5 = "L " + H.S(t5 + offsetX) + " ";
              t6 = command.y;
              if (typeof t6 !== "number")
                return t6.$add();
              sb._contents += t5 + H.S(t6 + offsetY);
              break;
            case 5:
              H.interceptedTypeCheck(command, "$isBezierCurveTo");
              sb._contents += "C " + H.S(command.x1 + offsetX) + " " + H.S(command.y1 + offsetY) + " " + H.S(command.x2 + offsetX) + " " + H.S(command.y2 + offsetY) + " " + H.S(command.x3 + offsetX) + " " + H.S(command.y3 + offsetY);
              break;
            case 4:
              H.interceptedTypeCheck(command, "$isQuadraticCurveTo");
              sb._contents += "Q " + H.S(command.get$x1(command).$add(0, offsetX)) + " " + H.S(command.get$y1(command).$add(0, offsetY)) + " " + H.S(command.get$x2(command).$add(0, offsetX)) + " " + H.S(command.get$y2(command).$add(0, offsetY));
              break;
            case 3:
              sb._contents += "Z";
              break;
            case 2:
              H.interceptedTypeCheck(command, "$isEllipse");
              t5 = command.endAngle;
              t6 = command.startAngle;
              t7 = command.x;
              t8 = command.y;
              t9 = command.radiusX;
              t10 = command.radiusY;
              t11 = command.rotation;
              if (C.JSNumber_methods.$mod(t5 - t6, 6.283185307179586) === 0) {
                if (typeof t7 !== "number")
                  return t7.$add();
                t5 = t7 + offsetX;
                if (typeof t8 !== "number")
                  return t8.$add();
                t8 += offsetY;
                T._writeEllipse(sb, t5, t8, t9, t10, t11, -3.141592653589793, 0, false, true);
                T._writeEllipse(sb, t5, t8, t9, t10, t11, 0, 3.141592653589793, false, false);
              } else {
                if (typeof t7 !== "number")
                  return t7.$add();
                if (typeof t8 !== "number")
                  return t8.$add();
                T._writeEllipse(sb, t7 + offsetX, t8 + offsetY, t9, t10, t11, t6, t5, false, false);
              }
              break;
            case 7:
              rrect = H.interceptedTypeCheck(command, "$isRRectCommand").rrect;
              t5 = rrect.left;
              if (typeof t5 !== "number")
                return t5.$add();
              left = t5 + offsetX;
              t5 = rrect.right;
              if (typeof t5 !== "number")
                return t5.$add();
              right = t5 + offsetX;
              t5 = rrect.top;
              if (typeof t5 !== "number")
                return t5.$add();
              $top = t5 + offsetY;
              t5 = rrect.bottom;
              if (typeof t5 !== "number")
                return t5.$add();
              bottom = t5 + offsetY;
              if (left > right) {
                t0 = right;
                right = left;
                left = t0;
              }
              if ($top > bottom) {
                t0 = bottom;
                bottom = $top;
                $top = t0;
              }
              t5 = rrect.trRadiusX;
              if (typeof t5 !== "number")
                return t5.abs$0();
              trRadiusX = Math.abs(t5);
              t5 = rrect.tlRadiusX;
              if (typeof t5 !== "number")
                return t5.abs$0();
              tlRadiusX = Math.abs(t5);
              t5 = rrect.trRadiusY;
              if (typeof t5 !== "number")
                return t5.abs$0();
              trRadiusY = Math.abs(t5);
              t5 = rrect.tlRadiusY;
              if (typeof t5 !== "number")
                return t5.abs$0();
              tlRadiusY = Math.abs(t5);
              t5 = rrect.blRadiusX;
              if (typeof t5 !== "number")
                return t5.abs$0();
              blRadiusX = Math.abs(t5);
              t5 = rrect.brRadiusX;
              if (typeof t5 !== "number")
                return t5.abs$0();
              brRadiusX = Math.abs(t5);
              t5 = rrect.blRadiusY;
              if (typeof t5 !== "number")
                return t5.abs$0();
              blRadiusY = Math.abs(t5);
              t5 = rrect.brRadiusY;
              if (typeof t5 !== "number")
                return t5.abs$0();
              brRadiusY = Math.abs(t5);
              sb._contents += "L " + H.S(left + trRadiusX) + " " + H.S($top) + " ";
              t5 = right - trRadiusX;
              sb._contents += "M " + H.S(t5) + " " + H.S($top) + " ";
              T._writeEllipse(sb, t5, $top + trRadiusY, trRadiusX, trRadiusY, 0, 4.71238898038469, 6.283185307179586, false, false);
              t5 = bottom - brRadiusY;
              sb._contents += "L " + H.S(right) + " " + H.S(t5) + " ";
              T._writeEllipse(sb, right - brRadiusX, t5, brRadiusX, brRadiusY, 0, 0, 1.5707963267948966, false, false);
              t5 = left + blRadiusX;
              sb._contents += "L " + H.S(t5) + " " + H.S(bottom) + " ";
              T._writeEllipse(sb, t5, bottom - blRadiusY, blRadiusX, blRadiusY, 0, 1.5707963267948966, 3.141592653589793, false, false);
              t5 = $top + tlRadiusY;
              sb._contents += "L " + H.S(left) + " " + H.S(t5) + " ";
              T._writeEllipse(sb, left + tlRadiusX, t5, tlRadiusX, tlRadiusY, 0, 3.141592653589793, 4.71238898038469, false, false);
              break;
            case 6:
              H.interceptedTypeCheck(command, "$isRectCommand");
              width = command.width;
              horizontalSwap = width < 0;
              t5 = command.x;
              if (horizontalSwap) {
                if (typeof t5 !== "number")
                  return t5.$sub();
                t5 -= width;
              }
              if (typeof t5 !== "number")
                return H.iae(t5);
              left = offsetX + t5;
              if (horizontalSwap)
                width = -width;
              height = command.height;
              verticalSwap = height < 0;
              t5 = command.y;
              if (verticalSwap) {
                if (typeof t5 !== "number")
                  return t5.$sub();
                t5 -= height;
              }
              if (typeof t5 !== "number")
                return H.iae(t5);
              $top = offsetY + t5;
              if (verticalSwap)
                height = -height;
              sb._contents += "M " + H.S(left) + " " + H.S($top) + " ";
              t5 = left + width;
              sb._contents += "L " + H.S(t5) + " " + H.S($top) + " ";
              t6 = $top + height;
              sb._contents += "L " + H.S(t5) + " " + H.S(t6) + " ";
              sb._contents += "L " + H.S(left) + " " + H.S(t6) + " ";
              sb._contents += "L " + H.S(left) + " " + H.S($top) + " ";
              break;
            default:
              throw H.wrapException(P.UnimplementedError$("Unknown path command " + command.toString$0(0)));
          }
        }
    },
    _writeEllipse: function(sb, cx, cy, radiusX, radiusY, rotation, startAngle, endAngle, antiClockwise, moveToStartPoint) {
      var t1,
        cosRotation = Math.cos(rotation),
        sinRotation = Math.sin(rotation),
        x = Math.cos(startAngle) * radiusX,
        y = Math.sin(startAngle) * radiusY,
        xe = Math.cos(endAngle) * radiusX,
        ye = Math.sin(endAngle) * radiusY;
      if (moveToStartPoint)
        sb._contents += "M " + H.S(cx + (cosRotation * x - sinRotation * y)) + " " + H.S(cy + (sinRotation * x + cosRotation * y)) + " ";
      t1 = "A " + H.S(radiusX) + " " + H.S(radiusY) + " " + H.S(rotation / 3.141592653589793 * 180) + " ";
      t1 += Math.abs(endAngle - startAngle) > 3.141592653589793 ? 1 : 0;
      sb._contents += t1 + " 1 " + H.S(cx + (cosRotation * xe - sinRotation * ye)) + " " + H.S(cy + (sinRotation * xe + cosRotation * ye));
    },
    _pointerButtonFromHtmlEvent: function($event) {
      var t1 = J.getInterceptor$($event);
      if (!!t1.$isPointerEvent0)
        return $event.button === 2 ? 2 : 1;
      else if (!!t1.$isMouseEvent)
        return $event.button === 2 ? 2 : 1;
      return 1;
    },
    _eventTimeStampToDuration: function(milliseconds) {
      var ms = J.toInt$0$n(milliseconds);
      return P.Duration$(C.JSNumber_methods.toInt$0((milliseconds - ms) * 1000), ms, 0);
    },
    _convertWheelEventToPointerData: function($event) {
      var t1, t2, data, t3,
        deltaX = ($event && C.WheelEvent_methods).get$deltaX($event),
        deltaY = C.WheelEvent_methods.get$deltaY($event);
      switch (C.WheelEvent_methods.get$deltaMode($event)) {
        case 1:
          if (typeof deltaX !== "number")
            return deltaX.$mul();
          deltaX *= 32;
          if (typeof deltaY !== "number")
            return deltaY.$mul();
          deltaY *= 32;
          break;
        case 2:
          t1 = $.$get$window();
          t2 = t1.get$physicalSize()._dx;
          if (typeof deltaX !== "number")
            return deltaX.$mul();
          if (typeof t2 !== "number")
            return H.iae(t2);
          deltaX *= t2;
          t1 = t1.get$physicalSize()._dy;
          if (typeof deltaY !== "number")
            return deltaY.$mul();
          if (typeof t1 !== "number")
            return H.iae(t1);
          deltaY *= t1;
          break;
        case 0:
        default:
          break;
      }
      data = H.setRuntimeTypeInfo([], [Q.PointerData]);
      if (!$._isWheelDeviceAdded) {
        $._isWheelDeviceAdded = true;
        t1 = T._eventTimeStampToDuration($event.timeStamp);
        t2 = $event.clientX;
        t3 = $event.clientY;
        C.JSArray_methods.add$1(data, Q.PointerData$($event.buttons, C.PointerChange_1, -1, C.PointerDeviceKind_1, t2, t3, 1, 1, 0, deltaX, deltaY, C.PointerSignalKind_0, 0, t1));
      }
      t1 = T._eventTimeStampToDuration($event.timeStamp);
      t2 = $event.clientX;
      t3 = $event.clientY;
      C.JSArray_methods.add$1(data, Q.PointerData$($event.buttons, C.PointerChange_3, -1, C.PointerDeviceKind_1, t2, t3, 1, 1, 0, deltaX, deltaY, C.PointerSignalKind_1, 0, t1));
      return data;
    },
    _addWheelEventListener: function(listener) {
      var eventOptions, t1;
      H.functionTypeCheck(listener, {func: 1, ret: -1, args: [W.WheelEvent]});
      eventOptions = {};
      eventOptions.passive = false;
      t1 = $.PointerBinding__instance.domRenderer._glassPaneElement;
      t1.addEventListener.apply(t1, ["wheel", P.allowInterop(new T._addWheelEventListener_closure(listener), {func: 1, ret: -1, args: [,]}), eventOptions]);
    },
    Incrementable$: function(semanticsObject) {
      var t1 = new T.Incrementable(W.InputElement_InputElement(), semanticsObject);
      t1.Incrementable$1(semanticsObject);
      return t1;
    },
    SemanticsObject$: function(id, owner) {
      var t1 = H.interceptedTypeCheck(W._ElementFactoryProvider_createElement_tag("flt-semantics", null), "$isElement0"),
        t2 = P.LinkedHashMap_LinkedHashMap(T.Role, T.RoleManager),
        t3 = t1.style;
      t3.position = "absolute";
      if (id === 0) {
        t3 = t1.style;
        C.CssStyleDeclaration_methods._setPropertyHelper$3(t3, (t3 && C.CssStyleDeclaration_methods)._browserPropertyName$1(t3, "filter"), "opacity(0%)", "");
        t3 = t1.style;
        t3.color = "rgba(0,0,0,0)";
      }
      return new T.SemanticsObject(id, owner, t1, t2);
    },
    EngineSemanticsOwner$_: function() {
      var t1 = P.int,
        t2 = T.SemanticsObject;
      t2 = new T.EngineSemanticsOwner(P.LinkedHashMap_LinkedHashMap$_empty(t1, t2), P.LinkedHashMap_LinkedHashMap$_empty(t1, t2), H.setRuntimeTypeInfo([], [t2]), H.setRuntimeTypeInfo([], [{func: 1, ret: -1}]), new T.EngineSemanticsOwner_closure(), C.GestureMode_1, H.setRuntimeTypeInfo([], [{func: 1, ret: -1, args: [T.GestureMode]}]));
      t2.EngineSemanticsOwner$_$0();
      return t2;
    },
    EngineSemanticsOwner_instance: function() {
      var t1 = $.EngineSemanticsOwner__instance;
      return t1 == null ? $.EngineSemanticsOwner__instance = T.EngineSemanticsOwner$_() : t1;
    },
    longestIncreasingSubsequence: function(list) {
      var len, predecessors, mins, longest, i, elem, t3, hi, lo, mid, t4, seq, k,
        t1 = P.int,
        t2 = [t1];
      H.assertSubtype(list, "$isList", t2, "$asList");
      len = list.length;
      predecessors = H.setRuntimeTypeInfo([], t2);
      mins = H.setRuntimeTypeInfo([0], t2);
      for (longest = 0, i = 0; i < len; ++i) {
        t2 = list.length;
        if (i >= t2)
          return H.ioore(list, i);
        elem = list[i];
        for (t3 = mins.length, hi = longest, lo = 1; lo <= hi;) {
          mid = C.JSInt_methods._tdivFast$1(lo + hi, 2);
          if (mid < 0 || mid >= t3)
            return H.ioore(mins, mid);
          t4 = mins[mid];
          if (t4 >= t2)
            return H.ioore(list, t4);
          if (list[t4] < elem)
            lo = mid + 1;
          else
            hi = mid - 1;
        }
        t2 = lo - 1;
        if (t2 < 0 || t2 >= t3)
          return H.ioore(mins, t2);
        C.JSArray_methods.add$1(predecessors, mins[t2]);
        if (lo >= mins.length)
          C.JSArray_methods.add$1(mins, i);
        else
          C.JSArray_methods.$indexSet(mins, lo, i);
        if (lo > longest)
          longest = lo;
      }
      t2 = new Array(longest);
      t2.fixed$length = Array;
      seq = H.setRuntimeTypeInfo(t2, [t1]);
      if (longest < 0 || longest >= mins.length)
        return H.ioore(mins, longest);
      k = mins[longest];
      for (i = longest - 1; i >= 0; --i) {
        C.JSArray_methods.$indexSet(seq, i, k);
        if (k < 0 || k >= predecessors.length)
          return H.ioore(predecessors, k);
        k = predecessors[k];
      }
      return seq;
    },
    MethodCall$: function(method, $arguments) {
      return new T.MethodCall(method, $arguments);
    },
    ElevationShadow_applyShadowElevation: function(style, color, dp) {
      var t2,
        _s10_ = "box-shadow",
        t1 = color._value,
        rgb = "" + ((16711680 & t1) >>> 16) + ", " + ((65280 & t1) >>> 8) + ", " + ((255 & t1) >>> 0);
      if (dp === 2) {
        t1 = "0 2px 2px 0 rgba(" + rgb + ", 0.14), 0 3px 1px -2px rgba(" + rgb + ", 0.12), 0 1px 5px 0 rgba(" + rgb + ", 0.2)";
        C.CssStyleDeclaration_methods._setPropertyHelper$3(style, (style && C.CssStyleDeclaration_methods)._browserPropertyName$1(style, _s10_), t1, "");
      } else if (dp === 3) {
        t1 = "0 3px 4px 0 rgba(" + rgb + ", 0.14), 0 3px 3px -2px rgba(" + rgb + ", 0.12), 0 1px 8px 0 rgba(" + rgb + ", 0.2)";
        C.CssStyleDeclaration_methods._setPropertyHelper$3(style, (style && C.CssStyleDeclaration_methods)._browserPropertyName$1(style, _s10_), t1, "");
      } else if (dp === 4) {
        t1 = "0 4px 5px 0 rgba(" + rgb + ", 0.14), 0 1px 10px 0 rgba(" + rgb + ", 0.12), 0 2px 4px -1px rgba(" + rgb + ", 0.2)";
        C.CssStyleDeclaration_methods._setPropertyHelper$3(style, (style && C.CssStyleDeclaration_methods)._browserPropertyName$1(style, _s10_), t1, "");
      } else if (dp === 6) {
        t1 = "0 6px 10px 0 rgba(" + rgb + ", 0.14), 0 1px 18px 0 rgba(" + rgb + ", 0.12), 0 3px 5px -1px rgba(" + rgb + ", 0.2)";
        C.CssStyleDeclaration_methods._setPropertyHelper$3(style, (style && C.CssStyleDeclaration_methods)._browserPropertyName$1(style, _s10_), t1, "");
      } else if (dp === 8) {
        t1 = "0 8px 10px 1px rgba(" + rgb + ", 0.14), 0 3px 14px 2px rgba(" + rgb + ", 0.12), 0 5px 5px -3px rgba(" + rgb + ", 0.2)";
        C.CssStyleDeclaration_methods._setPropertyHelper$3(style, (style && C.CssStyleDeclaration_methods)._browserPropertyName$1(style, _s10_), t1, "");
      } else if (dp === 12) {
        t1 = "0 12px 17px 2px rgba(" + rgb + ", 0.14), 0 5px 22px 4px rgba(" + rgb + ", 0.12), 0 7px 8px -4px rgba(" + rgb + ", 0.2)";
        C.CssStyleDeclaration_methods._setPropertyHelper$3(style, (style && C.CssStyleDeclaration_methods)._browserPropertyName$1(style, _s10_), t1, "");
      } else {
        t1 = style && C.CssStyleDeclaration_methods;
        if (dp === 16) {
          t2 = "0 16px 24px 2px rgba(" + rgb + ", 0.14), 0  6px 30px 5px rgba(" + rgb + ", 0.12), 0  8px 10px -5px rgba(" + rgb + ", 0.2)";
          C.CssStyleDeclaration_methods._setPropertyHelper$3(style, t1._browserPropertyName$1(style, _s10_), t2, "");
        } else {
          t2 = "0 24px 38px 3px rgba(" + rgb + ", 0.14), 0  9px 46px 8px rgba(" + rgb + ", 0.12), 0  11px 15px -7px rgba(" + rgb + ", 0.2)";
          C.CssStyleDeclaration_methods._setPropertyHelper$3(style, t1._browserPropertyName$1(style, _s10_), t2, "");
        }
      }
    },
    ElevationShadow_applyShadow: function(style, elevation, color) {
      C.CssStyleDeclaration_methods._setPropertyHelper$3(style, (style && C.CssStyleDeclaration_methods)._browserPropertyName$1(style, "transition"), "box-shadow .28s cubic-bezier(.4, 0, .2, 1)", "");
      if (typeof elevation !== "number")
        return elevation.$le();
      if (elevation <= 0)
        C.CssStyleDeclaration_methods._setPropertyHelper$3(style, C.CssStyleDeclaration_methods._browserPropertyName$1(style, "box-shadow"), "none", "");
      else if (elevation <= 1)
        T.ElevationShadow_applyShadowElevation(style, color, 2);
      else if (elevation <= 2)
        T.ElevationShadow_applyShadowElevation(style, color, 4);
      else if (elevation <= 3)
        T.ElevationShadow_applyShadowElevation(style, color, 6);
      else if (elevation <= 4)
        T.ElevationShadow_applyShadowElevation(style, color, 8);
      else if (elevation <= 5)
        T.ElevationShadow_applyShadowElevation(style, color, 16);
      else
        T.ElevationShadow_applyShadowElevation(style, color, 24);
    },
    ElevationShadow_computeCanvasShadows: function(elevation, color) {
      if (typeof elevation !== "number")
        return elevation.$le();
      if (elevation <= 0)
        return C.List_empty6;
      else if (elevation <= 1)
        return T.ElevationShadow_computeShadowElevation(color, 2);
      else if (elevation <= 2)
        return T.ElevationShadow_computeShadowElevation(color, 4);
      else if (elevation <= 3)
        return T.ElevationShadow_computeShadowElevation(color, 6);
      else if (elevation <= 4)
        return T.ElevationShadow_computeShadowElevation(color, 8);
      else if (elevation <= 5)
        return T.ElevationShadow_computeShadowElevation(color, 16);
      else
        return T.ElevationShadow_computeShadowElevation(color, 24);
    },
    ElevationShadow_computeShadowRect: function(r, elevation) {
      var t1, t2, t3, t4;
      if (typeof elevation !== "number")
        return elevation.$le();
      if (elevation <= 0)
        return r;
      else if (elevation <= 1) {
        t1 = r.left;
        if (typeof t1 !== "number")
          return t1.$sub();
        t2 = r.top;
        if (typeof t2 !== "number")
          return t2.$sub();
        t3 = r.right;
        if (typeof t3 !== "number")
          return t3.$add();
        t4 = r.bottom;
        if (typeof t4 !== "number")
          return t4.$add();
        return new Q.Rect(t1 - 2.5, t2 - 1.5, t3 + 3, t4 + 4);
      } else if (elevation <= 2) {
        t1 = r.left;
        if (typeof t1 !== "number")
          return t1.$sub();
        t2 = r.top;
        if (typeof t2 !== "number")
          return t2.$sub();
        t3 = r.right;
        if (typeof t3 !== "number")
          return t3.$add();
        t4 = r.bottom;
        if (typeof t4 !== "number")
          return t4.$add();
        return new Q.Rect(t1 - 5, t2 - 3, t3 + 6, t4 + 7);
      } else if (elevation <= 3) {
        t1 = r.left;
        if (typeof t1 !== "number")
          return t1.$sub();
        t2 = r.top;
        if (typeof t2 !== "number")
          return t2.$sub();
        t3 = r.right;
        if (typeof t3 !== "number")
          return t3.$add();
        t4 = r.bottom;
        if (typeof t4 !== "number")
          return t4.$add();
        return new Q.Rect(t1 - 9, t2 - 8, t3 + 9, t4 + 11);
      } else if (elevation <= 4) {
        t1 = r.left;
        if (typeof t1 !== "number")
          return t1.$sub();
        t2 = r.top;
        if (typeof t2 !== "number")
          return t2.$sub();
        t3 = r.right;
        if (typeof t3 !== "number")
          return t3.$add();
        t4 = r.bottom;
        if (typeof t4 !== "number")
          return t4.$add();
        return new Q.Rect(t1 - 10, t2 - 6, t3 + 10, t4 + 14);
      } else {
        t1 = r.left;
        t2 = r.top;
        t3 = r.right;
        t4 = r.bottom;
        if (elevation <= 5) {
          if (typeof t1 !== "number")
            return t1.$sub();
          if (typeof t2 !== "number")
            return t2.$sub();
          if (typeof t3 !== "number")
            return t3.$add();
          if (typeof t4 !== "number")
            return t4.$add();
          return new Q.Rect(t1 - 15, t2 - 9, t3 + 20, t4 + 30);
        } else {
          if (typeof t1 !== "number")
            return t1.$sub();
          if (typeof t2 !== "number")
            return t2.$sub();
          if (typeof t3 !== "number")
            return t3.$add();
          if (typeof t4 !== "number")
            return t4.$add();
          return new Q.Rect(t1 - 23, t2 - 14, t3 + 23, t4 + 45);
        }
      }
    },
    ElevationShadow_computeShadowElevation: function(color, dp) {
      var t1 = color._value,
        red = (16711680 & t1) >>> 16,
        green = (65280 & t1) >>> 8,
        blue = (255 & t1) >>> 0,
        penumbraColor = Q.Color$fromARGB(36, red, green, blue),
        ambientShadowColor = Q.Color$fromARGB(31, red, green, blue),
        umbraColor = Q.Color$fromARGB(51, red, green, blue),
        result = H.setRuntimeTypeInfo([], [T.CanvasShadow]);
      if (dp === 2) {
        C.JSArray_methods.add$1(result, T.CanvasShadow$(1, penumbraColor, 0, 2, 0));
        C.JSArray_methods.add$1(result, T.CanvasShadow$(0.5, ambientShadowColor, 0, 3, -2));
        C.JSArray_methods.add$1(result, T.CanvasShadow$(2.5, umbraColor, 0, 1, 0));
      } else if (dp === 3) {
        C.JSArray_methods.add$1(result, T.CanvasShadow$(4, penumbraColor, 0, 1.5, 0));
        C.JSArray_methods.add$1(result, T.CanvasShadow$(1.5, ambientShadowColor, 0, 3, -2));
        C.JSArray_methods.add$1(result, T.CanvasShadow$(4, umbraColor, 0, 1, 0));
      } else if (dp === 4) {
        C.JSArray_methods.add$1(result, T.CanvasShadow$(2.5, penumbraColor, 0, 4, 0));
        C.JSArray_methods.add$1(result, T.CanvasShadow$(5, ambientShadowColor, 0, 1, 0));
        C.JSArray_methods.add$1(result, T.CanvasShadow$(2, umbraColor, 0, 2, -1));
      } else if (dp === 6) {
        C.JSArray_methods.add$1(result, T.CanvasShadow$(5, penumbraColor, 0, 6, 0));
        C.JSArray_methods.add$1(result, T.CanvasShadow$(9, ambientShadowColor, 0, 1, 0));
        C.JSArray_methods.add$1(result, T.CanvasShadow$(2.5, umbraColor, 0, 3, -1));
      } else if (dp === 8) {
        C.JSArray_methods.add$1(result, T.CanvasShadow$(10, penumbraColor, 0, 4, 1));
        C.JSArray_methods.add$1(result, T.CanvasShadow$(7, ambientShadowColor, 0, 3, 2));
        C.JSArray_methods.add$1(result, T.CanvasShadow$(2.5, umbraColor, 0, 5, -3));
      } else if (dp === 12) {
        C.JSArray_methods.add$1(result, T.CanvasShadow$(8.5, penumbraColor, 0, 12, 2));
        C.JSArray_methods.add$1(result, T.CanvasShadow$(11, ambientShadowColor, 0, 5, 4));
        C.JSArray_methods.add$1(result, T.CanvasShadow$(4, umbraColor, 0, 7, -4));
      } else if (dp === 16) {
        C.JSArray_methods.add$1(result, T.CanvasShadow$(12, penumbraColor, 0, 16, 2));
        C.JSArray_methods.add$1(result, T.CanvasShadow$(15, ambientShadowColor, 0, 6, 5));
        C.JSArray_methods.add$1(result, T.CanvasShadow$(5, umbraColor, 0, 0, -5));
      } else {
        C.JSArray_methods.add$1(result, T.CanvasShadow$(18, penumbraColor, 0, 24, 3));
        C.JSArray_methods.add$1(result, T.CanvasShadow$(23, ambientShadowColor, 0, 9, 8));
        C.JSArray_methods.add$1(result, T.CanvasShadow$(7.5, umbraColor, 0, 11, -7));
      }
      return result;
    },
    CanvasShadow$: function($blur, color, offsetX, offsetY, spread) {
      return new T.CanvasShadow(offsetX, offsetY, $blur, color);
    },
    _FontManager__FontManager: function() {
      var t1 = [[P.Future, -1]];
      if ($.$get$supportsFontLoadingApi())
        return new T._FontManager(H.setRuntimeTypeInfo([], t1));
      else
        return new T._PolyfillFontManager(H.setRuntimeTypeInfo([], t1));
    },
    TextMeasurementService$_: function(rulerCacheCapacity) {
      var t1 = new T.TextMeasurementService(rulerCacheCapacity, W.CanvasElement_CanvasElement(null, null).getContext("2d"), H.interceptedTypeCheck(W._ElementFactoryProvider_createElement_tag("flt-ruler-host", null), "$isElement0"), P.LinkedHashMap_LinkedHashMap$_empty(T.ParagraphGeometricStyle, T.ParagraphRuler));
      t1.TextMeasurementService$_$1$rulerCacheCapacity(rulerCacheCapacity);
      return t1;
    },
    TextMeasurementService__applySubPixelRoundingHack: function(minIntrinsicWidth, maxIntrinsicWidth) {
      if (minIntrinsicWidth <= maxIntrinsicWidth)
        return maxIntrinsicWidth;
      if (minIntrinsicWidth - maxIntrinsicWidth < 2)
        return minIntrinsicWidth;
      throw H.wrapException(P.Exception_Exception("minIntrinsicWidth (" + H.S(minIntrinsicWidth) + ") is greater than maxIntrinsicWidth (" + H.S(maxIntrinsicWidth) + ")."));
    },
    ParagraphGeometricStyle$: function(decoration, ellipsis, fontFamily, fontSize, fontStyle, fontWeight, letterSpacing, lineHeight, maxLines, wordSpacing) {
      return new T.ParagraphGeometricStyle(fontWeight, fontStyle, fontFamily, fontSize, lineHeight, maxLines, letterSpacing, wordSpacing, decoration, ellipsis);
    },
    RulerCacheEntry$: function(constraintWidth, alphabeticBaseline, height, ideographicBaseline, isSingleLine, lineHeight, maxIntrinsicWidth, minIntrinsicWidth, width) {
      return new T.RulerCacheEntry(constraintWidth, isSingleLine, width, height, lineHeight, minIntrinsicWidth, maxIntrinsicWidth, alphabeticBaseline, ideographicBaseline);
    },
    _emptyCallback: function(_) {
    },
    _styleEditingElement: function(domElement) {
      var t1 = domElement.style;
      t1.position = "fixed";
      t1.whiteSpace = "pre";
      t1 = domElement.style;
      t1.overflow = "hidden";
      C.CssStyleDeclaration_methods._setPropertyHelper$3(t1, (t1 && C.CssStyleDeclaration_methods)._browserPropertyName$1(t1, "transform"), "translate(-99999px, -99999px)", "");
      t1.width = "1px";
      t1.height = "1px";
      t1 = $._browserEngine;
      if ((t1 == null ? $._browserEngine = T._detectBrowserEngine() : t1) === C.BrowserEngine_1)
        C.Window_methods.get$animationFrame(window).then$1$1(new T._styleEditingElement_closure(domElement), null);
    },
    _getInputTypeFromString: function(inputType) {
      switch (inputType) {
        case "TextInputType.multiline":
          return C.InputType_1;
        case "TextInputType.text":
        default:
          return C.InputType_0;
      }
    },
    _getTypeFromElement: function(domElement) {
      var contentEditable,
        t1 = J.getInterceptor$(domElement);
      if (!!t1.$isInputElement)
        return C.ElementType_0;
      if (!!t1.$isTextAreaElement)
        return C.ElementType_1;
      contentEditable = domElement.contentEditable;
      if (contentEditable != null && contentEditable.length !== 0 && contentEditable !== "inherit")
        return C.ElementType_2;
      return;
    },
    TextEditingElement$: function() {
      return new T.TextEditingElement(H.setRuntimeTypeInfo([], [[P.StreamSubscription,,]]));
    },
    float64ListToCssTransform: function(matrix) {
      var tx, ty,
        t1 = matrix[0];
      if (t1 === 1 && matrix[1] === 0 && matrix[2] === 0 && matrix[3] === 0 && matrix[4] === 0 && matrix[5] === 1 && matrix[6] === 0 && matrix[7] === 0 && matrix[8] === 0 && matrix[9] === 0 && matrix[10] === 1 && matrix[11] === 0 && matrix[14] === 0 && matrix[15] === 1) {
        tx = matrix[12];
        ty = matrix[13];
        return "translate(" + H.S(tx) + "px, " + H.S(ty) + "px)";
      } else
        return "matrix3d(" + H.S(t1) + "," + H.S(matrix[1]) + "," + H.S(matrix[2]) + "," + H.S(matrix[3]) + "," + H.S(matrix[4]) + "," + H.S(matrix[5]) + "," + H.S(matrix[6]) + "," + H.S(matrix[7]) + "," + H.S(matrix[8]) + "," + H.S(matrix[9]) + "," + H.S(matrix[10]) + "," + H.S(matrix[11]) + "," + H.S(matrix[12]) + "," + H.S(matrix[13]) + "," + H.S(matrix[14]) + "," + H.S(matrix[15]) + ")";
    },
    localClipRectToGlobalClip: function(localClip, transform) {
      return T.localClipToGlobalClip(localClip.bottom, localClip.left, localClip.right, localClip.top, transform);
    },
    localClipToGlobalClip: function(localBottom, localLeft, localRight, localTop, transform) {
      var t1, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33, argStorage, t2, t3, t4, t5, t6, t7, t8, t9, t10,
        pointData = new Float64Array(16);
      C.NativeFloat64List_methods.$indexSet(pointData, 0, localLeft);
      C.NativeFloat64List_methods.$indexSet(pointData, 4, localTop);
      t1 = pointData.length;
      if (12 >= t1)
        return H.ioore(pointData, 12);
      pointData[12] = 1;
      C.NativeFloat64List_methods.$indexSet(pointData, 1, localRight);
      C.NativeFloat64List_methods.$indexSet(pointData, 5, localTop);
      if (13 >= t1)
        return H.ioore(pointData, 13);
      pointData[13] = 1;
      C.NativeFloat64List_methods.$indexSet(pointData, 2, localLeft);
      C.NativeFloat64List_methods.$indexSet(pointData, 6, localBottom);
      if (14 >= t1)
        return H.ioore(pointData, 14);
      pointData[14] = 1;
      C.NativeFloat64List_methods.$indexSet(pointData, 3, localRight);
      C.NativeFloat64List_methods.$indexSet(pointData, 7, localBottom);
      if (15 >= t1)
        return H.ioore(pointData, 15);
      pointData[15] = 1;
      m00 = pointData[0];
      m01 = pointData[4];
      m02 = pointData[8];
      m03 = pointData[12];
      m10 = pointData[1];
      m11 = pointData[5];
      m12 = pointData[9];
      m13 = pointData[13];
      m20 = pointData[2];
      m21 = pointData[6];
      m22 = pointData[10];
      m23 = pointData[14];
      m30 = pointData[3];
      m31 = pointData[7];
      m32 = pointData[11];
      m33 = pointData[15];
      argStorage = transform._engine$_m4storage;
      pointData[0] = m00 * argStorage[0] + m01 * argStorage[4] + m02 * argStorage[8] + m03 * argStorage[12];
      pointData[4] = m00 * argStorage[1] + m01 * argStorage[5] + m02 * argStorage[9] + m03 * argStorage[13];
      pointData[8] = m00 * argStorage[2] + m01 * argStorage[6] + m02 * argStorage[10] + m03 * argStorage[14];
      pointData[12] = m00 * argStorage[3] + m01 * argStorage[7] + m02 * argStorage[11] + m03 * argStorage[15];
      pointData[1] = m10 * argStorage[0] + m11 * argStorage[4] + m12 * argStorage[8] + m13 * argStorage[12];
      pointData[5] = m10 * argStorage[1] + m11 * argStorage[5] + m12 * argStorage[9] + m13 * argStorage[13];
      pointData[9] = m10 * argStorage[2] + m11 * argStorage[6] + m12 * argStorage[10] + m13 * argStorage[14];
      pointData[13] = m10 * argStorage[3] + m11 * argStorage[7] + m12 * argStorage[11] + m13 * argStorage[15];
      pointData[2] = m20 * argStorage[0] + m21 * argStorage[4] + m22 * argStorage[8] + m23 * argStorage[12];
      pointData[6] = m20 * argStorage[1] + m21 * argStorage[5] + m22 * argStorage[9] + m23 * argStorage[13];
      pointData[10] = m20 * argStorage[2] + m21 * argStorage[6] + m22 * argStorage[10] + m23 * argStorage[14];
      pointData[14] = m20 * argStorage[3] + m21 * argStorage[7] + m22 * argStorage[11] + m23 * argStorage[15];
      pointData[3] = m30 * argStorage[0] + m31 * argStorage[4] + m32 * argStorage[8] + m33 * argStorage[12];
      pointData[7] = m30 * argStorage[1] + m31 * argStorage[5] + m32 * argStorage[9] + m33 * argStorage[13];
      pointData[11] = m30 * argStorage[2] + m31 * argStorage[6] + m32 * argStorage[10] + m33 * argStorage[14];
      pointData[15] = m30 * argStorage[3] + m31 * argStorage[7] + m32 * argStorage[11] + m33 * argStorage[15];
      t1 = pointData[0];
      t2 = pointData[1];
      t3 = Math.min(t1, t2);
      t4 = pointData[2];
      t3 = Math.min(t3, t4);
      t5 = pointData[3];
      t3 = Math.min(t3, t5);
      t6 = pointData[4];
      t7 = pointData[5];
      t8 = Math.min(t6, t7);
      t9 = pointData[6];
      t8 = Math.min(t8, t9);
      t10 = pointData[7];
      return new Q.Rect(t3, Math.min(t8, t10), Math.max(Math.max(Math.max(t1, t2), t4), t5), Math.max(Math.max(Math.max(t6, t7), t9), t10));
    },
    Matrix4_Matrix4$translationValues: function(x, y, z) {
      var t1 = new T.Matrix40(new Float64Array(16));
      t1.setIdentity$0();
      t1.setTranslationRaw$3(x, y, z);
      return t1;
    },
    Vector3_Vector3: function(x, y, z) {
      var t1 = new T.Vector30(new Float64Array(3));
      t1.setValues$3(x, y, z);
      return t1;
    },
    webOnlyInitializeEngine_closure: function webOnlyInitializeEngine_closure() {
    },
    webOnlyInitializeEngine_closure0: function webOnlyInitializeEngine_closure0(t0) {
      this._box_0 = t0;
    },
    webOnlyInitializeEngine__closure: function webOnlyInitializeEngine__closure(t0) {
      this._box_0 = t0;
    },
    AlarmClock: function AlarmClock(t0) {
      var _ = this;
      _._timestampFunction = t0;
      _.callback = _._datetime = _._timer = null;
    },
    AssetManager: function AssetManager() {
    },
    AssetManagerException: function AssetManagerException(t0, t1) {
      this.url = t0;
      this.httpStatus = t1;
    },
    BitmapCanvas: function BitmapCanvas(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _.bounds = t0;
      _.rootElement = t1;
      _._cachedLastStyle = _._ctx = _._canvas = null;
      _._engine$_children = t2;
      _._heightInBitmapPixels = _._widthInBitmapPixels = null;
      _._saveCount = 0;
      _._devicePixelRatio = t3;
      _._prevFilter = "none";
      _._prevStrokeStyle = _._prevFillStyle = null;
      _.SaveStackTracking__saveStack = t4;
      _.SaveStackTracking__clipStack = t5;
      _.SaveStackTracking__currentTransform = t6;
    },
    _NullTreeSanitizer0: function _NullTreeSanitizer0() {
    },
    BrowserEngine: function BrowserEngine(t0) {
      this._engine$_name = t0;
    },
    PrerollContext: function PrerollContext(t0) {
      this.rasterCache = t0;
    },
    PaintContext: function PaintContext(t0, t1) {
      this.canvas = t0;
      this.rasterCache = t1;
    },
    LayerScene: function LayerScene() {
    },
    CompositorContext: function CompositorContext() {
    },
    Rasterizer: function Rasterizer(t0, t1) {
      this.surface = t0;
      this.context = t1;
    },
    Surface: function Surface(t0, t1) {
      this.canvasCache = t0;
      this.submitFunction = t1;
    },
    _CanvasCache: function _CanvasCache() {
      this._canvas = null;
    },
    DomCanvas: function DomCanvas(t0, t1, t2, t3) {
      var _ = this;
      _.rootElement = t0;
      _.SaveElementStackTracking__saveStack = t1;
      _.SaveElementStackTracking__elementStack = t2;
      _.SaveElementStackTracking__currentTransform = t3;
    },
    DomRenderer: function DomRenderer(t0) {
      var _ = this;
      _._glassPaneElement = _._staleHotRestartState = _._sceneElement = _._sceneHostElement = _._viewportMeta = _._styleElement = _._resizeSubscription = null;
      _.rootElement = t0;
      _._debugFrameStatistics = null;
    },
    DomRenderer_reset_closure: function DomRenderer_reset_closure(t0, t1, t2) {
      this._box_0 = t0;
      this.$this = t1;
      this.initialInnerWidth = t2;
    },
    EngineCanvas: function EngineCanvas() {
    },
    _SaveStackEntry: function _SaveStackEntry(t0, t1) {
      this.transform = t0;
      this.clipStack = t1;
    },
    _SaveClipEntry: function _SaveClipEntry(t0, t1, t2, t3) {
      var _ = this;
      _.rect = t0;
      _.rrect = t1;
      _.path = t2;
      _.currentTransform = t3;
    },
    SaveStackTracking: function SaveStackTracking() {
    },
    BrowserHistory: function BrowserHistory() {
      this._userProvidedRouteName = this._unsubscribe = this._locationStrategy = null;
    },
    BrowserHistory__popStateListener_closure: function BrowserHistory__popStateListener_closure() {
    },
    BrowserHistory__popStateListener_closure0: function BrowserHistory__popStateListener_closure0() {
    },
    _SaveElementStackEntry: function _SaveElementStackEntry(t0, t1) {
      this.savedElement = t0;
      this.transform = t1;
    },
    SaveElementStackTracking: function SaveElementStackTracking() {
    },
    Keyboard: function Keyboard(t0) {
      this._keyupListener = this._keydownListener = null;
      this._messageCodec = t0;
    },
    Keyboard$__closure: function Keyboard$__closure(t0) {
      this.$this = t0;
    },
    Keyboard$__closure0: function Keyboard$__closure0(t0) {
      this.$this = t0;
    },
    Keyboard$__closure1: function Keyboard$__closure1(t0) {
      this.$this = t0;
    },
    PointerBinding: function PointerBinding(t0) {
      this.domRenderer = t0;
      this._adapter = this._detector = null;
    },
    PointerSupportDetector: function PointerSupportDetector() {
    },
    BaseAdapter: function BaseAdapter() {
    },
    BaseAdapter__addEventListener_closure: function BaseAdapter__addEventListener_closure(t0) {
      this.handler = t0;
    },
    PointerAdapter: function PointerAdapter(t0, t1, t2) {
      this.domRenderer = t0;
      this._callback = t1;
      this._isDownMap = t2;
    },
    PointerAdapter__setup_closure: function PointerAdapter__setup_closure(t0) {
      this.$this = t0;
    },
    PointerAdapter__setup_closure0: function PointerAdapter__setup_closure0(t0) {
      this.$this = t0;
    },
    PointerAdapter__setup_closure1: function PointerAdapter__setup_closure1(t0) {
      this.$this = t0;
    },
    PointerAdapter__setup_closure2: function PointerAdapter__setup_closure2(t0) {
      this.$this = t0;
    },
    PointerAdapter__setup_closure3: function PointerAdapter__setup_closure3(t0) {
      this.$this = t0;
    },
    TouchAdapter: function TouchAdapter(t0, t1, t2) {
      this.domRenderer = t0;
      this._callback = t1;
      this._isDownMap = t2;
    },
    TouchAdapter__setup_closure: function TouchAdapter__setup_closure(t0) {
      this.$this = t0;
    },
    TouchAdapter__setup_closure0: function TouchAdapter__setup_closure0(t0) {
      this.$this = t0;
    },
    TouchAdapter__setup_closure1: function TouchAdapter__setup_closure1(t0) {
      this.$this = t0;
    },
    TouchAdapter__setup_closure2: function TouchAdapter__setup_closure2(t0) {
      this.$this = t0;
    },
    MouseAdapter: function MouseAdapter(t0, t1, t2) {
      this.domRenderer = t0;
      this._callback = t1;
      this._isDownMap = t2;
    },
    MouseAdapter__setup_closure: function MouseAdapter__setup_closure(t0) {
      this.$this = t0;
    },
    MouseAdapter__setup_closure0: function MouseAdapter__setup_closure0(t0) {
      this.$this = t0;
    },
    MouseAdapter__setup_closure1: function MouseAdapter__setup_closure1(t0) {
      this.$this = t0;
    },
    MouseAdapter__setup_closure2: function MouseAdapter__setup_closure2(t0) {
      this.$this = t0;
    },
    _addWheelEventListener_closure: function _addWheelEventListener_closure(t0) {
      this.listener = t0;
    },
    RecordingCanvas: function RecordingCanvas(t0, t1) {
      var _ = this;
      _._paintBounds = t0;
      _._engine$_commands = t1;
      _._didDraw = _._hasArbitraryPaint = false;
      _.saveCount = 1;
    },
    PaintCommand: function PaintCommand() {
    },
    PaintSave: function PaintSave() {
    },
    PaintRestore: function PaintRestore() {
    },
    PaintTranslate: function PaintTranslate(t0, t1) {
      this.dx = t0;
      this.dy = t1;
    },
    PaintScale: function PaintScale(t0, t1) {
      this.sx = t0;
      this.sy = t1;
    },
    PaintRotate: function PaintRotate(t0) {
      this.radians = t0;
    },
    PaintTransform: function PaintTransform(t0) {
      this.matrix4 = t0;
    },
    PaintClipRect: function PaintClipRect(t0) {
      this.rect = t0;
    },
    PaintClipRRect: function PaintClipRRect(t0) {
      this.rrect = t0;
    },
    PaintClipPath: function PaintClipPath(t0) {
      this.path = t0;
    },
    PaintDrawRect: function PaintDrawRect(t0, t1) {
      this.rect = t0;
      this.paint = t1;
    },
    PaintDrawRRect: function PaintDrawRRect(t0, t1) {
      this.rrect = t0;
      this.paint = t1;
    },
    PaintDrawDRRect: function PaintDrawDRRect(t0, t1, t2) {
      this.outer = t0;
      this.inner = t1;
      this.paint = t2;
    },
    PaintDrawCircle: function PaintDrawCircle(t0, t1, t2) {
      this.c = t0;
      this.radius = t1;
      this.paint = t2;
    },
    PaintDrawPath: function PaintDrawPath(t0, t1) {
      this.path = t0;
      this.paint = t1;
    },
    PaintDrawShadow: function PaintDrawShadow(t0, t1, t2, t3) {
      var _ = this;
      _.path = t0;
      _.color = t1;
      _.elevation = t2;
      _.transparentOccluder = t3;
    },
    PaintDrawParagraph: function PaintDrawParagraph(t0, t1) {
      this.paragraph = t0;
      this.offset = t1;
    },
    Subpath: function Subpath(t0, t1, t2) {
      var _ = this;
      _.startX = t0;
      _.startY = t1;
      _.currentY = _.currentX = 0;
      _.commands = t2;
    },
    PathCommand: function PathCommand() {
    },
    MoveTo: function MoveTo(t0, t1, t2) {
      this.x = t0;
      this.y = t1;
      this.type = t2;
    },
    LineTo: function LineTo(t0, t1, t2) {
      this.x = t0;
      this.y = t1;
      this.type = t2;
    },
    Ellipse: function Ellipse(t0, t1, t2, t3, t4, t5, t6, t7, t8) {
      var _ = this;
      _.x = t0;
      _.y = t1;
      _.radiusX = t2;
      _.radiusY = t3;
      _.rotation = t4;
      _.startAngle = t5;
      _.endAngle = t6;
      _.anticlockwise = t7;
      _.type = t8;
    },
    BezierCurveTo: function BezierCurveTo(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _.x1 = t0;
      _.y1 = t1;
      _.x2 = t2;
      _.y2 = t3;
      _.x3 = t4;
      _.y3 = t5;
      _.type = t6;
    },
    RectCommand: function RectCommand(t0, t1, t2, t3, t4) {
      var _ = this;
      _.x = t0;
      _.y = t1;
      _.width = t2;
      _.height = t3;
      _.type = t4;
    },
    RRectCommand: function RRectCommand(t0, t1) {
      this.rrect = t0;
      this.type = t1;
    },
    CloseCommand: function CloseCommand(t0) {
      this.type = t0;
    },
    _PaintBounds: function _PaintBounds(t0, t1) {
      var _ = this;
      _.maxPaintBounds = t0;
      _._didPaintInsideClipArea = false;
      _._clipStack = _._transforms = _._engine$_bottom = _._engine$_right = _._engine$_top = _._engine$_left = null;
      _._currentMatrixIsIdentity = true;
      _._currentMatrix = t1;
      _._clipRectInitialized = false;
      _._currentClipBottom = _._currentClipRight = _._currentClipTop = _._currentClipLeft = 0;
    },
    _CheckableKind: function _CheckableKind(t0) {
      this._engine$_name = t0;
    },
    Checkable: function Checkable(t0) {
      this._engine$_kind = null;
      this.semanticsObject = t0;
    },
    Incrementable: function Incrementable(t0, t1) {
      var _ = this;
      _._engine$_element = t0;
      _._currentSurrogateValue = 1;
      _._gestureModeListener = null;
      _._pendingResync = false;
      _.semanticsObject = t1;
    },
    Incrementable_closure: function Incrementable_closure(t0, t1) {
      this.$this = t0;
      this.semanticsObject = t1;
    },
    Incrementable_closure0: function Incrementable_closure0(t0) {
      this.$this = t0;
    },
    LabelAndValue: function LabelAndValue(t0) {
      this._auxiliaryValueElement = null;
      this.semanticsObject = t0;
    },
    Scrollable: function Scrollable(t0) {
      var _ = this;
      _._scrollListener = _._gestureModeListener = null;
      _._effectiveNeutralScrollPosition = 0;
      _.semanticsObject = t0;
    },
    Scrollable_update_closure: function Scrollable_update_closure(t0) {
      this.$this = t0;
    },
    Scrollable_update_closure0: function Scrollable_update_closure0(t0) {
      this.$this = t0;
    },
    Scrollable_update_closure1: function Scrollable_update_closure1(t0) {
      this.$this = t0;
    },
    SemanticsUpdate: function SemanticsUpdate(t0) {
      this._engine$_nodeUpdates = t0;
    },
    SemanticsNodeUpdate: function SemanticsNodeUpdate(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t20) {
      var _ = this;
      _.id = t0;
      _.flags = t1;
      _.actions = t2;
      _.textSelectionBase = t3;
      _.textSelectionExtent = t4;
      _.scrollChildren = t5;
      _.scrollIndex = t6;
      _.scrollPosition = t7;
      _.scrollExtentMax = t8;
      _.scrollExtentMin = t9;
      _.rect = t10;
      _.label = t11;
      _.hint = t12;
      _.value = t13;
      _.increasedValue = t14;
      _.decreasedValue = t15;
      _.textDirection = t16;
      _.transform = t17;
      _.childrenInTraversalOrder = t18;
      _.childrenInHitTestOrder = t19;
      _.additionalActions = t20;
    },
    Role: function Role(t0) {
      this._engine$_name = t0;
    },
    closure: function closure() {
    },
    closure0: function closure0() {
    },
    closure1: function closure1() {
    },
    closure2: function closure2() {
    },
    closure3: function closure3() {
    },
    closure4: function closure4() {
    },
    RoleManager: function RoleManager() {
    },
    SemanticsObject: function SemanticsObject(t0, t1, t2, t3) {
      var _ = this;
      _._additionalActions = _._childrenInHitTestOrder = _._engine$_childrenInTraversalOrder = _._engine$_transform = _._engine$_textDirection = _._engine$_decreasedValue = _._engine$_increasedValue = _._engine$_value = _._engine$_hint = _._engine$_label = _._engine$_rect = _._engine$_scrollExtentMin = _._engine$_scrollExtentMax = _._engine$_scrollPosition = _._engine$_scrollIndex = _._scrollChildren = _._textSelectionExtent = _._textSelectionBase = _._engine$_actions = _._engine$_flags = null;
      _.id = t0;
      _.owner = t1;
      _.element = t2;
      _._dirtyFields = -1;
      _._engine$_parent = _._childContainerElement = null;
      _._roleManagers = t3;
      _.horizontalContainerAdjustment = _.verticalContainerAdjustment = 0;
      _._previousChildrenInTraversalOrder = null;
    },
    AccessibilityMode: function AccessibilityMode(t0) {
      this._engine$_name = t0;
    },
    GestureMode: function GestureMode(t0) {
      this._engine$_name = t0;
    },
    EngineSemanticsOwner: function EngineSemanticsOwner(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _._semanticsTree = t0;
      _._attachments = t1;
      _._detachments = t2;
      _._oneTimePostUpdateCallbacks = t3;
      _._rootSemanticsElement = null;
      _._now = t4;
      _._semanticsActivationTimer = _._semanticsPlaceholder = null;
      _._semanticsActivationAttempts = 0;
      _._semanticsEnabled = _._schedulePlaceholderRemoval = false;
      _._gestureMode = t5;
      _._gestureModeClock = null;
      _._gestureModeListeners = t6;
    },
    EngineSemanticsOwner$__closure: function EngineSemanticsOwner$__closure(t0) {
      this.$this = t0;
    },
    EngineSemanticsOwner_closure: function EngineSemanticsOwner_closure() {
    },
    EngineSemanticsOwner__tryEnableSemantics_closure: function EngineSemanticsOwner__tryEnableSemantics_closure(t0) {
      this.$this = t0;
    },
    EngineSemanticsOwner_autoEnableOnTap_closure: function EngineSemanticsOwner_autoEnableOnTap_closure(t0) {
      this.$this = t0;
    },
    EngineSemanticsOwner__getGestureModeClock_closure: function EngineSemanticsOwner__getGestureModeClock_closure(t0) {
      this.$this = t0;
    },
    Tappable: function Tappable(t0) {
      this._clickListener = null;
      this.semanticsObject = t0;
    },
    Tappable_update_closure: function Tappable_update_closure(t0) {
      this.$this = t0;
    },
    TextField: function TextField(t0) {
      this.persistentTextEditingElement = null;
      this.semanticsObject = t0;
    },
    TextField__initializeForBlink_closure: function TextField__initializeForBlink_closure(t0) {
      this.$this = t0;
    },
    TextField__initializeForWebkit_closure: function TextField__initializeForWebkit_closure(t0, t1) {
      this._box_0 = t0;
      this.$this = t1;
    },
    TextField__initializeForWebkit_closure0: function TextField__initializeForWebkit_closure0(t0, t1) {
      this._box_0 = t0;
      this.$this = t1;
    },
    MethodCall: function MethodCall(t0, t1) {
      this.method = t0;
      this.$arguments = t1;
    },
    StringCodec0: function StringCodec0() {
    },
    JSONMessageCodec: function JSONMessageCodec() {
    },
    JSONMethodCodec0: function JSONMethodCodec0() {
    },
    CanvasShadow: function CanvasShadow(t0, t1, t2, t3) {
      var _ = this;
      _.offsetX = t0;
      _.offsetY = t1;
      _.blur = t2;
      _.color = t3;
    },
    FontCollection: function FontCollection() {
      this._testFontManager = this._assetFontManager = null;
    },
    _FontManager: function _FontManager(t0) {
      this._fontLoadingFutures = t0;
    },
    _FontManager_registerAsset_closure: function _FontManager_registerAsset_closure(t0) {
      this.fontFace = t0;
    },
    _FontManager_registerAsset_closure0: function _FontManager_registerAsset_closure0(t0) {
      this.family = t0;
    },
    _PolyfillFontManager: function _PolyfillFontManager(t0) {
      this._fontLoadingFutures = t0;
    },
    _PolyfillFontManager_registerAsset__watchWidth: function _PolyfillFontManager_registerAsset__watchWidth(t0, t1, t2, t3, t4) {
      var _ = this;
      _._box_0 = t0;
      _.paragraph = t1;
      _.sansSerifWidth = t2;
      _.completer = t3;
      _.family = t4;
    },
    _PolyfillFontManager_registerAsset_closure: function _PolyfillFontManager_registerAsset_closure(t0) {
      this.fontStyleMap = t0;
    },
    TextMeasurementService: function TextMeasurementService(t0, t1, t2, t3) {
      var _ = this;
      _.rulerCacheCapacity = t0;
      _.canvasContext = t1;
      _._rulerHost = t2;
      _._rulers = t3;
      _._rulerCacheCleanupScheduled = false;
    },
    TextMeasurementService$__closure: function TextMeasurementService$__closure(t0) {
      this.$this = t0;
    },
    TextMeasurementService__scheduleRulerCacheCleanup_closure: function TextMeasurementService__scheduleRulerCacheCleanup_closure(t0) {
      this.$this = t0;
    },
    TextMeasurementService_cleanUpRulerCache_closure: function TextMeasurementService_cleanUpRulerCache_closure() {
    },
    ParagraphGeometricStyle: function ParagraphGeometricStyle(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9) {
      var _ = this;
      _.fontWeight = t0;
      _.fontStyle = t1;
      _.fontFamily = t2;
      _.fontSize = t3;
      _.lineHeight = t4;
      _.maxLines = t5;
      _.letterSpacing = t6;
      _.wordSpacing = t7;
      _.decoration = t8;
      _.ellipsis = t9;
      _._cssFontString = _._cachedHashCode = null;
    },
    TextDimensions: function TextDimensions(t0) {
      this._engine$_element = t0;
      this._cachedBoundingClientRect = null;
    },
    ParagraphRuler: function ParagraphRuler(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9) {
      var _ = this;
      _.style = t0;
      _._probe = t1;
      _._cachedAlphabeticBaseline = null;
      _._singleLineHost = t2;
      _.singleLineDimensions = t3;
      _._minIntrinsicHost = t4;
      _.minIntrinsicDimensions = t5;
      _._constrainedHost = t6;
      _.constrainedDimensions = t7;
      _._lineHeightDimensions = _._lineHeightHost = null;
      _._hitCount = 0;
      _._debugIsDisposed = false;
      _._engine$_paragraph = null;
      _._measurementCache = t8;
      _._mruList = t9;
    },
    RulerCacheEntry: function RulerCacheEntry(t0, t1, t2, t3, t4, t5, t6, t7, t8) {
      var _ = this;
      _.constraintWidth = t0;
      _.isSingleLine = t1;
      _.width = t2;
      _.height = t3;
      _.lineHeight = t4;
      _.minIntrinsicWidth = t5;
      _.maxIntrinsicWidth = t6;
      _.alphabeticBaseline = t7;
      _.ideographicBaseline = t8;
    },
    _styleEditingElement_closure: function _styleEditingElement_closure(t0) {
      this.domElement = t0;
    },
    EditingState: function EditingState(t0, t1, t2) {
      this.text = t0;
      this.baseOffset = t1;
      this.extentOffset = t2;
    },
    InputType: function InputType(t0) {
      this._engine$_name = t0;
    },
    InputConfiguration: function InputConfiguration(t0) {
      this.inputType = t0;
    },
    ElementType: function ElementType(t0) {
      this._engine$_name = t0;
    },
    TextEditingElement: function TextEditingElement(t0) {
      var _ = this;
      _._engine$_enabled = false;
      _._onChange = _._lastEditingState = _.domElement = null;
      _._subscriptions = t0;
    },
    TextEditingElement_enable_closure: function TextEditingElement_enable_closure(t0) {
      this.$this = t0;
    },
    PersistentTextEditingElement: function PersistentTextEditingElement(t0) {
      var _ = this;
      _._engine$_enabled = false;
      _._onChange = _._lastEditingState = _.domElement = null;
      _._subscriptions = t0;
    },
    HybridTextEditing: function HybridTextEditing(t0, t1) {
      var _ = this;
      _._defaultEditingElement = t0;
      _._clientId = _._customEditingElement = null;
      _._isEditing = false;
      _._engine$_configuration = null;
      _._subscriptions = t1;
    },
    Matrix40: function Matrix40(t0) {
      this._engine$_m4storage = t0;
    },
    Vector30: function Vector30(t0) {
      this._engine$_v3storage = t0;
    },
    _BitmapCanvas_EngineCanvas_SaveStackTracking: function _BitmapCanvas_EngineCanvas_SaveStackTracking() {
    },
    _DomCanvas_EngineCanvas_SaveElementStackTracking: function _DomCanvas_EngineCanvas_SaveElementStackTracking() {
    },
    PathProxy: function PathProxy() {
    },
    _PathOffset: function _PathOffset(t0, t1) {
      this.dx = t0;
      this.dy = t1;
    },
    SvgPathStringSource: function SvgPathStringSource() {
      this._idx = this._codePoints = this._previousCommand = null;
    },
    PathSegmentData: function PathSegmentData(t0) {
      var _ = this;
      _.command = t0;
      _.point2 = _.point1 = _.targetPoint = null;
      _.arcLarge = _.arcSweep = false;
    },
    SvgPathNormalizer: function SvgPathNormalizer(t0, t1, t2, t3) {
      var _ = this;
      _._currentPoint = t0;
      _._subPathPoint = t1;
      _._controlPoint = t2;
      _._lastCommand = t3;
    },
    Matrix41: function Matrix41(t0) {
      this._vector_math$_m4storage = t0;
    },
    Vector31: function Vector31(t0) {
      this._vector_math$_v3storage = t0;
    },
    Vector40: function Vector40(t0) {
      this._vector_math$_v4storage = t0;
    },
    MatrixUtils_getAsTranslation: function(transform) {
      var values = transform._m4storage;
      if (values[0] === 1 && values[1] === 0 && values[2] === 0 && values[3] === 0 && values[4] === 0 && values[5] === 1 && values[6] === 0 && values[7] === 0 && values[8] === 0 && values[9] === 0 && values[10] === 1 && values[11] === 0 && values[14] === 0 && values[15] === 1)
        return new Q.Offset(values[12], values[13]);
      return;
    },
    MatrixUtils_matrixEquals: function(a, b) {
      var t1, t2, t3;
      if (a == b)
        return true;
      if (a == null)
        return T.MatrixUtils_isIdentity(b);
      if (b == null)
        return T.MatrixUtils_isIdentity(a);
      t1 = a._m4storage;
      t2 = t1[0];
      t3 = b._m4storage;
      return t2 === t3[0] && t1[1] === t3[1] && t1[2] === t3[2] && t1[3] === t3[3] && t1[4] === t3[4] && t1[5] === t3[5] && t1[6] === t3[6] && t1[7] === t3[7] && t1[8] === t3[8] && t1[9] === t3[9] && t1[10] === t3[10] && t1[11] === t3[11] && t1[12] === t3[12] && t1[13] === t3[13] && t1[14] === t3[14] && t1[15] === t3[15];
    },
    MatrixUtils_isIdentity: function(a) {
      var t1 = a._m4storage;
      return t1[0] === 1 && t1[1] === 0 && t1[2] === 0 && t1[3] === 0 && t1[4] === 0 && t1[5] === 1 && t1[6] === 0 && t1[7] === 0 && t1[8] === 0 && t1[9] === 0 && t1[10] === 1 && t1[11] === 0 && t1[12] === 0 && t1[13] === 0 && t1[14] === 0 && t1[15] === 1;
    },
    MatrixUtils_transformPoint: function(transform, point) {
      var t1 = point._dx,
        t2 = point._dy,
        position3 = new E.Vector3(new Float64Array(3));
      position3.setValues$3(t1, t2, 0);
      t1 = transform.perspectiveTransform$1(position3)._v3storage;
      return new Q.Offset(t1[0], t1[1]);
    },
    MatrixUtils_transformRect: function(transform, rect) {
      var point3, point4, t4, t5, t6,
        t1 = rect.left,
        t2 = rect.top,
        point1 = T.MatrixUtils_transformPoint(transform, new Q.Offset(t1, t2)),
        t3 = rect.right,
        point2 = T.MatrixUtils_transformPoint(transform, new Q.Offset(t3, t2));
      t2 = rect.bottom;
      point3 = T.MatrixUtils_transformPoint(transform, new Q.Offset(t1, t2));
      point4 = T.MatrixUtils_transformPoint(transform, new Q.Offset(t3, t2));
      t2 = point1._dx;
      t3 = point2._dx;
      t1 = point3._dx;
      t4 = point4._dx;
      t5 = Math.min(H.checkNum(t1), H.checkNum(t4));
      t5 = Math.min(H.checkNum(t3), t5);
      t5 = Math.min(H.checkNum(t2), t5);
      point1 = point1._dy;
      point2 = point2._dy;
      point3 = point3._dy;
      point4 = point4._dy;
      t6 = Math.min(H.checkNum(point3), H.checkNum(point4));
      t6 = Math.min(H.checkNum(point2), t6);
      t6 = Math.min(H.checkNum(point1), t6);
      t4 = Math.max(H.checkNum(t1), H.checkNum(t4));
      t4 = Math.max(H.checkNum(t3), t4);
      t4 = Math.max(H.checkNum(t2), t4);
      point4 = Math.max(H.checkNum(point3), H.checkNum(point4));
      point4 = Math.max(H.checkNum(point2), point4);
      return new Q.Rect(t5, t6, t4, Math.max(H.checkNum(point1), point4));
    },
    MatrixUtils_inverseTransformRect: function(transform, rect) {
      var transform0;
      if (T.MatrixUtils_isIdentity(transform))
        return rect;
      transform0 = new E.Matrix4(new Float64Array(16));
      transform0.setFrom$1(transform);
      transform0.copyInverse$1(transform0);
      return T.MatrixUtils_transformRect(transform0, rect);
    }
  },
  O = {SynchronousFuture: function SynchronousFuture(t0, t1) {
      this._synchronous_future$_value = t0;
      this.$ti = t1;
    }, SynchronousFuture_whenComplete_closure: function SynchronousFuture_whenComplete_closure(t0) {
      this.$this = t0;
    }, DragDownDetails: function DragDownDetails(t0) {
      this.globalPosition = t0;
    }, DragStartDetails: function DragStartDetails(t0, t1) {
      this.sourceTimeStamp = t0;
      this.globalPosition = t1;
    }, DragUpdateDetails: function DragUpdateDetails(t0, t1, t2, t3) {
      var _ = this;
      _.sourceTimeStamp = t0;
      _.delta = t1;
      _.primaryDelta = t2;
      _.globalPosition = t3;
    }, DragEndDetails: function DragEndDetails(t0, t1) {
      this.velocity = t0;
      this.primaryVelocity = t1;
    }, HitTestEntry: function HitTestEntry(t0) {
      this.target = t0;
    }, HitTestResult: function HitTestResult(t0) {
      this._path = t0;
    }, _DragState: function _DragState(t0) {
      this._monodrag$_name = t0;
    }, DragGestureRecognizer: function DragGestureRecognizer() {
    }, DragGestureRecognizer_addAllowedPointer_closure: function DragGestureRecognizer_addAllowedPointer_closure(t0) {
      this.$this = t0;
    }, DragGestureRecognizer_handleEvent_closure: function DragGestureRecognizer_handleEvent_closure(t0, t1, t2) {
      this.$this = t0;
      this.event = t1;
      this.delta = t2;
    }, DragGestureRecognizer_acceptGesture_closure: function DragGestureRecognizer_acceptGesture_closure(t0, t1) {
      this.$this = t0;
      this.timestamp = t1;
    }, DragGestureRecognizer_acceptGesture_closure0: function DragGestureRecognizer_acceptGesture_closure0(t0, t1, t2) {
      this._box_0 = t0;
      this.$this = t1;
      this.timestamp = t2;
    }, DragGestureRecognizer_didStopTrackingLastPointer_closure: function DragGestureRecognizer_didStopTrackingLastPointer_closure(t0, t1) {
      this.$this = t0;
      this.velocity = t1;
    }, DragGestureRecognizer_didStopTrackingLastPointer_closure0: function DragGestureRecognizer_didStopTrackingLastPointer_closure0(t0, t1) {
      this.estimate = t0;
      this.velocity = t1;
    }, DragGestureRecognizer_didStopTrackingLastPointer_closure1: function DragGestureRecognizer_didStopTrackingLastPointer_closure1(t0) {
      this.$this = t0;
    }, DragGestureRecognizer_didStopTrackingLastPointer_closure2: function DragGestureRecognizer_didStopTrackingLastPointer_closure2(t0) {
      this.estimate = t0;
    }, VerticalDragGestureRecognizer: function VerticalDragGestureRecognizer(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _.dragStartBehavior = t0;
      _.maxFlingVelocity = _.minFlingVelocity = _.minFlingDistance = _.onCancel = _.onEnd = _.onUpdate = _.onStart = _.onDown = null;
      _._monodrag$_state = t1;
      _._lastPendingEventTimestamp = _._pendingDragOffset = _._initialPosition = null;
      _._velocityTrackers = t2;
      _._recognizer$_entries = t3;
      _._trackedPointers = t4;
      _.debugOwner = t5;
      _._recognizer$_kind = t6;
    }, HorizontalDragGestureRecognizer: function HorizontalDragGestureRecognizer(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _.dragStartBehavior = t0;
      _.maxFlingVelocity = _.minFlingVelocity = _.minFlingDistance = _.onCancel = _.onEnd = _.onUpdate = _.onStart = _.onDown = null;
      _._monodrag$_state = t1;
      _._lastPendingEventTimestamp = _._pendingDragOffset = _._initialPosition = null;
      _._velocityTrackers = t2;
      _._recognizer$_entries = t3;
      _._trackedPointers = t4;
      _.debugOwner = t5;
      _._recognizer$_kind = t6;
    }, PanGestureRecognizer: function PanGestureRecognizer(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _.dragStartBehavior = t0;
      _.maxFlingVelocity = _.minFlingVelocity = _.minFlingDistance = _.onCancel = _.onEnd = _.onUpdate = _.onStart = _.onDown = null;
      _._monodrag$_state = t1;
      _._lastPendingEventTimestamp = _._pendingDragOffset = _._initialPosition = null;
      _._velocityTrackers = t2;
      _._recognizer$_entries = t3;
      _._trackedPointers = t4;
      _.debugOwner = t5;
      _._recognizer$_kind = t6;
    }, PointerRouter: function PointerRouter(t0, t1) {
      this._routeMap = t0;
      this._globalRoutes = t1;
    }, PointerRouter_addRoute_closure: function PointerRouter_addRoute_closure() {
    }, PointerRouter__dispatch_closure: function PointerRouter__dispatch_closure(t0) {
      this.event = t0;
    }, FlutterErrorDetailsForPointerRouter: function FlutterErrorDetailsForPointerRouter(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.exception = t0;
      _.stack = t1;
      _.library = t2;
      _.context = t3;
      _.informationCollector = t4;
      _.silent = t5;
    },
    BoxShadow_lerp: function(a, b, t) {
      var t1 = a == null;
      if (t1 && b == null)
        return;
      if (t1)
        return b.scale$1(0, t);
      if (b == null) {
        if (typeof t !== "number")
          return H.iae(t);
        return a.scale$1(0, 1 - t);
      }
      return new O.BoxShadow(Q.Color_lerp(a.color, b.color, t), Q.Offset_lerp(a.offset, b.offset, t), Q.lerpDouble(a.blurRadius, b.blurRadius, t), Q.lerpDouble(a.spreadRadius, b.spreadRadius, t));
    },
    BoxShadow_lerpList: function(a, b, t) {
      var t2, result, commonLength, i, t3, t4, t5, t6,
        t1 = [O.BoxShadow];
      H.assertSubtype(a, "$isList", t1, "$asList");
      H.assertSubtype(b, "$isList", t1, "$asList");
      t2 = a == null;
      if (t2 && b == null)
        return;
      if (t2)
        a = H.setRuntimeTypeInfo([], t1);
      if (b == null)
        b = H.setRuntimeTypeInfo([], t1);
      result = H.setRuntimeTypeInfo([], t1);
      commonLength = Math.min(a.length, b.length);
      for (i = 0; i < commonLength; ++i) {
        if (i >= a.length)
          return H.ioore(a, i);
        t1 = a[i];
        if (i >= b.length)
          return H.ioore(b, i);
        C.JSArray_methods.add$1(result, O.BoxShadow_lerp(t1, b[i], t));
      }
      for (i = commonLength; t1 = a.length, i < t1; ++i) {
        if (i < 0)
          return H.ioore(a, i);
        t1 = a[i];
        if (typeof t !== "number")
          return H.iae(t);
        t2 = 1 - t;
        t3 = t1.color;
        t4 = t1.offset;
        t5 = t4._dx;
        if (typeof t5 !== "number")
          return t5.$mul();
        t4 = t4._dy;
        if (typeof t4 !== "number")
          return t4.$mul();
        t6 = t1.blurRadius;
        if (typeof t6 !== "number")
          return t6.$mul();
        t1 = t1.spreadRadius;
        if (typeof t1 !== "number")
          return t1.$mul();
        C.JSArray_methods.add$1(result, new O.BoxShadow(t3, new Q.Offset(t5 * t2, t4 * t2), t6 * t2, t1 * t2));
      }
      for (i = commonLength; t1 = b.length, i < t1; ++i) {
        if (i < 0)
          return H.ioore(b, i);
        t1 = b[i];
        t2 = t1.color;
        t3 = t1.offset;
        t4 = t3._dx;
        if (typeof t4 !== "number")
          return t4.$mul();
        if (typeof t !== "number")
          return H.iae(t);
        t3 = t3._dy;
        if (typeof t3 !== "number")
          return t3.$mul();
        t5 = t1.blurRadius;
        if (typeof t5 !== "number")
          return t5.$mul();
        t1 = t1.spreadRadius;
        if (typeof t1 !== "number")
          return t1.$mul();
        C.JSArray_methods.add$1(result, new O.BoxShadow(t2, new Q.Offset(t4 * t, t3 * t), t5 * t, t1 * t));
      }
      return result;
    },
    BoxShadow: function BoxShadow(t0, t1, t2, t3) {
      var _ = this;
      _.color = t0;
      _.offset = t1;
      _.blurRadius = t2;
      _.spreadRadius = t3;
    },
    FocusScopeNode: function FocusScopeNode() {
      var _ = this;
      _._lastChild = _._firstChild = _._previousSibling = _._nextSibling = _._parent = _._manager = null;
    },
    FocusScopeNode__updateManager_update: function FocusScopeNode__updateManager_update(t0) {
      this.manager = t0;
    },
    FocusManager: function FocusManager(t0) {
      this.rootScope = t0;
      this._currentFocus = null;
      this._haveScheduledUpdate = false;
    },
    _FocusScopeNode_Object_DiagnosticableTreeMixin: function _FocusScopeNode_Object_DiagnosticableTreeMixin() {
    }
  },
  V = {AppBarTheme: function AppBarTheme(t0, t1, t2, t3, t4) {
      var _ = this;
      _.brightness = t0;
      _.color = t1;
      _.elevation = t2;
      _.iconTheme = t3;
      _.textTheme = t4;
    }, MaterialPageRoute: function MaterialPageRoute(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13) {
      var _ = this;
      _.builder = t0;
      _.fullscreenDialog = t1;
      _.focusScopeNode = t2;
      _._routes$_offstage = false;
      _._secondaryAnimationProxy = _._animationProxy = null;
      _._willPopCallbacks = t3;
      _._scopeKey = t4;
      _._subtreeKey = t5;
      _._storageBucket = t6;
      _._modalScopeCache = _._modalBarrier = null;
      _.LocalHistoryRoute__localHistory = t7;
      _._transitionCompleter = t8;
      _._result = _._routes$_controller = _._routes$_animation = null;
      _._secondaryAnimation = t9;
      _._overlayEntries = t10;
      _._navigator$_navigator = null;
      _.settings = t11;
      _._popCompleter = t12;
      _.$ti = t13;
    },
    EdgeInsetsGeometry_lerp: function(a, b, t) {
      var t1 = a == null;
      if (t1 && b == null)
        return;
      if (t1)
        return b.$mul(0, t);
      if (b == null)
        return a.$mul(0, 1 - t);
      if (!!a.$isEdgeInsets && !!b.$isEdgeInsets)
        return V.EdgeInsets_lerp(a, b, t);
      if (!!a.$isEdgeInsetsDirectional && !!b.$isEdgeInsetsDirectional)
        return V.EdgeInsetsDirectional_lerp(a, b, t);
      return new V._MixedEdgeInsets(Q.lerpDouble(a.get$left(a), b.get$left(b), t), Q.lerpDouble(a.get$right(a), b.get$right(b), t), Q.lerpDouble(a.get$start(a), b.get$start(b), t), Q.lerpDouble(a.get$end(a), b.get$end(b), t), Q.lerpDouble(a.get$top(a), b.get$top(b), t), Q.lerpDouble(a.get$bottom(a), b.get$bottom(b), t));
    },
    EdgeInsets$fromWindowPadding: function(padding, devicePixelRatio) {
      return new V.EdgeInsets(padding.left / devicePixelRatio, padding.top / devicePixelRatio, padding.right / devicePixelRatio, padding.bottom / devicePixelRatio);
    },
    EdgeInsets_lerp: function(a, b, t) {
      return new V.EdgeInsets(Q.lerpDouble(a._left, b._left, t), Q.lerpDouble(a._top, b._top, t), Q.lerpDouble(a._right, b._right, t), Q.lerpDouble(a._bottom, b._bottom, t));
    },
    EdgeInsetsDirectional_lerp: function(a, b, t) {
      return new V.EdgeInsetsDirectional(Q.lerpDouble(a._edge_insets$_start, b._edge_insets$_start, t), Q.lerpDouble(a._top, b._top, t), Q.lerpDouble(a._edge_insets$_end, b._edge_insets$_end, t), Q.lerpDouble(a._bottom, b._bottom, t));
    },
    EdgeInsetsGeometry: function EdgeInsetsGeometry() {
    },
    EdgeInsets: function EdgeInsets(t0, t1, t2, t3) {
      var _ = this;
      _._left = t0;
      _._top = t1;
      _._right = t2;
      _._bottom = t3;
    },
    EdgeInsetsDirectional: function EdgeInsetsDirectional(t0, t1, t2, t3) {
      var _ = this;
      _._edge_insets$_start = t0;
      _._top = t1;
      _._edge_insets$_end = t2;
      _._bottom = t3;
    },
    _MixedEdgeInsets: function _MixedEdgeInsets(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.left = t0;
      _.right = t1;
      _.start = t2;
      _.end = t3;
      _.top = t4;
      _.bottom = t5;
    },
    RenderCustomPaint__updateSemanticsChildren: function(oldSemantics, newChildSemantics) {
      var t1, t2, newChildrenBottom, oldChildrenBottom, newChildren, haveOldChildren, oldChild, newSemantics, newChild, oldKeyedChildren, oldChildrenTop, newChildrenTop, _box_0 = {};
      _box_0.newChildSemantics = newChildSemantics;
      t1 = A.SemanticsNode;
      H.assertSubtype(oldSemantics, "$isList", [t1], "$asList");
      H.assertSubtype(newChildSemantics, "$isList", [V.CustomPainterSemantics], "$asList");
      if (oldSemantics == null)
        oldSemantics = C.List_empty3;
      if (newChildSemantics == null)
        newChildSemantics = C.List_empty4;
      _box_0.newChildSemantics = newChildSemantics;
      t2 = J.get$length$asx(newChildSemantics);
      if (typeof t2 !== "number")
        return t2.$sub();
      newChildrenBottom = t2 - 1;
      oldChildrenBottom = oldSemantics.length - 1;
      t2 = J.get$length$asx(newChildSemantics);
      if (typeof t2 !== "number")
        return H.iae(t2);
      t2 = new Array(t2);
      t2.fixed$length = Array;
      newChildren = H.setRuntimeTypeInfo(t2, [t1]);
      haveOldChildren = 0 <= oldChildrenBottom;
      t2 = 0 <= newChildrenBottom;
      while (true) {
        if (!(haveOldChildren && t2))
          break;
        if (0 >= oldSemantics.length)
          return H.ioore(oldSemantics, 0);
        oldChild = oldSemantics[0];
        newSemantics = J.$index$asx(newChildSemantics, 0);
        oldChild.key;
        C.JSNull_methods.get$key(newSemantics);
        break;
      }
      while (true) {
        if (!(haveOldChildren && t2))
          break;
        if (oldChildrenBottom < 0 || oldChildrenBottom >= oldSemantics.length)
          return H.ioore(oldSemantics, oldChildrenBottom);
        oldChild = oldSemantics[oldChildrenBottom];
        newChild = J.$index$asx(newChildSemantics, newChildrenBottom);
        oldChild.key;
        C.JSNull_methods.get$key(newChild);
        break;
      }
      if (haveOldChildren) {
        oldKeyedChildren = P.LinkedHashMap_LinkedHashMap$_empty(D.Key, t1);
        for (t1 = oldSemantics.length, oldChildrenTop = 0; oldChildrenTop <= oldChildrenBottom;) {
          if (oldChildrenTop >= t1)
            return H.ioore(oldSemantics, oldChildrenTop);
          oldSemantics[oldChildrenTop].key;
          ++oldChildrenTop;
        }
        haveOldChildren = true;
      } else {
        oldChildrenTop = 0;
        oldKeyedChildren = null;
      }
      for (newChildrenTop = 0; newChildrenTop <= newChildrenBottom;) {
        newSemantics = J.$index$asx(_box_0.newChildSemantics, newChildrenTop);
        if (haveOldChildren) {
          oldChild = oldKeyedChildren.$index(0, C.JSNull_methods.get$key(newSemantics));
          if (oldChild != null) {
            newSemantics.get$key(newSemantics);
            oldChild = null;
          }
        } else
          oldChild = null;
        C.JSArray_methods.$indexSet(newChildren, newChildrenTop, V.RenderCustomPaint__updateSemanticsChild(oldChild, newSemantics));
        ++newChildrenTop;
      }
      t1 = _box_0.newChildSemantics;
      t2 = J.get$length$asx(t1);
      if (typeof t2 !== "number")
        return t2.$sub();
      newChildrenBottom = t2 - 1;
      oldChildrenBottom = oldSemantics.length - 1;
      while (true) {
        if (!(oldChildrenTop <= oldChildrenBottom && newChildrenTop <= newChildrenBottom))
          break;
        if (oldChildrenTop >= oldSemantics.length)
          return H.ioore(oldSemantics, oldChildrenTop);
        C.JSArray_methods.$indexSet(newChildren, newChildrenTop, V.RenderCustomPaint__updateSemanticsChild(oldSemantics[oldChildrenTop], J.$index$asx(t1, newChildrenTop)));
        ++newChildrenTop;
        ++oldChildrenTop;
      }
      return newChildren;
    },
    RenderCustomPaint__updateSemanticsChild: function(oldChild, newSemantics) {
      var t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, newChild, properties, config;
      if (oldChild == null) {
        t1 = C.JSNull_methods.get$key(newSemantics);
        t2 = $.$get$SemanticsNode__kEmptyConfig();
        t3 = t2._isMergingSemanticsOfDescendants;
        t4 = t2._actions;
        t5 = t2._customSemanticsActions;
        t6 = t2._actionsAsBits;
        t7 = t2._flags;
        t8 = t2._label;
        t9 = t2._semantics$_value;
        t10 = t2._decreasedValue;
        t11 = t2._increasedValue;
        t12 = t2._hint;
        t13 = t2._elevation;
        t14 = t2._thickness;
        t2 = t2._semantics$_textDirection;
        t15 = ($.SemanticsNode__lastIdentifier + 1) % 65535;
        $.SemanticsNode__lastIdentifier = t15;
        newChild = new A.SemanticsNode(t1, t15, null, C.Rect_0_0_0_0, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t2);
      } else
        newChild = oldChild;
      properties = newSemantics.get$properties();
      t1 = {func: 1, ret: -1};
      config = new A.SemanticsConfiguration(P.LinkedHashMap_LinkedHashMap$_empty(Q.SemanticsAction, {func: 1, ret: -1, args: [,]}), P.LinkedHashMap_LinkedHashMap$_empty(A.CustomSemanticsAction, t1));
      properties.get$sortKey();
      config._sortKey = properties.get$sortKey();
      config._hasBeenAnnotated = true;
      properties.get$checked(properties);
      t2 = properties.get$checked(properties);
      config._setFlag$2(C.SemanticsFlag_1, true);
      config._setFlag$2(C.SemanticsFlag_2, t2);
      properties.get$selected(properties);
      config._setFlag$2(C.SemanticsFlag_4, properties.get$selected(properties));
      properties.get$button(properties);
      config._setFlag$2(C.SemanticsFlag_8, properties.get$button(properties));
      properties.get$textField();
      config._setFlag$2(C.SemanticsFlag_16, properties.get$textField());
      properties.get$focused(properties);
      config._setFlag$2(C.SemanticsFlag_32, properties.get$focused(properties));
      properties.get$enabled(properties);
      t2 = properties.get$enabled(properties);
      config._setFlag$2(C.SemanticsFlag_64, true);
      config._setFlag$2(C.SemanticsFlag_128, t2);
      properties.get$inMutuallyExclusiveGroup();
      config._setFlag$2(C.SemanticsFlag_256, properties.get$inMutuallyExclusiveGroup());
      properties.get$obscured();
      config._setFlag$2(C.SemanticsFlag_1024, properties.get$obscured());
      properties.get$hidden(properties);
      config._setFlag$2(C.SemanticsFlag_8192, properties.get$hidden(properties));
      properties.get$header();
      config._setFlag$2(C.SemanticsFlag_512, properties.get$header());
      properties.get$scopesRoute();
      config._setFlag$2(C.SemanticsFlag_2048, properties.get$scopesRoute());
      properties.get$namesRoute();
      config._setFlag$2(C.SemanticsFlag_4096, properties.get$namesRoute());
      properties.get$liveRegion();
      config._setFlag$2(C.SemanticsFlag_32768, properties.get$liveRegion());
      properties.get$toggled();
      t2 = properties.get$toggled();
      config._setFlag$2(C.SemanticsFlag_65536, true);
      config._setFlag$2(C.SemanticsFlag_131072, t2);
      properties.get$image(properties);
      config._setFlag$2(C.SemanticsFlag_16384, properties.get$image(properties));
      properties.get$label(properties);
      config._label = properties.get$label(properties);
      config._hasBeenAnnotated = true;
      properties.get$value(properties);
      config._semantics$_value = properties.get$value(properties);
      config._hasBeenAnnotated = true;
      properties.get$increasedValue();
      config._increasedValue = properties.get$increasedValue();
      config._hasBeenAnnotated = true;
      properties.get$decreasedValue();
      config._decreasedValue = properties.get$decreasedValue();
      config._hasBeenAnnotated = true;
      properties.get$hint(properties);
      config._hint = properties.get$hint(properties);
      config._hasBeenAnnotated = true;
      properties.get$textDirection();
      config._semantics$_textDirection = properties.get$textDirection();
      config._hasBeenAnnotated = true;
      properties.get$onTap();
      t2 = H.functionTypeCheck(properties.get$onTap(), t1);
      config._addArgumentlessAction$2(C.SemanticsAction_1, t2);
      config.set$_onTap(t2);
      properties.get$onLongPress();
      t2 = H.functionTypeCheck(properties.get$onLongPress(), t1);
      config._addArgumentlessAction$2(C.SemanticsAction_2, t2);
      config.set$_onLongPress(t2);
      properties.get$onScrollLeft();
      t2 = H.functionTypeCheck(properties.get$onScrollLeft(), t1);
      config._addArgumentlessAction$2(C.SemanticsAction_4, t2);
      config.set$_semantics$_onScrollLeft(t2);
      properties.get$onScrollRight();
      t2 = H.functionTypeCheck(properties.get$onScrollRight(), t1);
      config._addArgumentlessAction$2(C.SemanticsAction_8, t2);
      config.set$_semantics$_onScrollRight(t2);
      properties.get$onScrollUp();
      t2 = H.functionTypeCheck(properties.get$onScrollUp(), t1);
      config._addArgumentlessAction$2(C.SemanticsAction_16, t2);
      config.set$_semantics$_onScrollUp(t2);
      properties.get$onScrollDown();
      t2 = H.functionTypeCheck(properties.get$onScrollDown(), t1);
      config._addArgumentlessAction$2(C.SemanticsAction_32, t2);
      config.set$_semantics$_onScrollDown(t2);
      properties.get$onIncrease();
      t2 = H.functionTypeCheck(properties.get$onIncrease(), t1);
      config._addArgumentlessAction$2(C.SemanticsAction_64, t2);
      config.set$_semantics$_onIncrease(t2);
      properties.get$onDecrease();
      t2 = H.functionTypeCheck(properties.get$onDecrease(), t1);
      config._addArgumentlessAction$2(C.SemanticsAction_128, t2);
      config.set$_semantics$_onDecrease(t2);
      properties.get$onCopy(properties);
      t2 = H.functionTypeCheck(properties.get$onCopy(properties), t1);
      config._addArgumentlessAction$2(C.SemanticsAction_4096, t2);
      config.set$_semantics$_onCopy(t2);
      properties.get$onCut(properties);
      t2 = H.functionTypeCheck(properties.get$onCut(properties), t1);
      config._addArgumentlessAction$2(C.SemanticsAction_8192, t2);
      config.set$_semantics$_onCut(t2);
      properties.get$onPaste(properties);
      t2 = H.functionTypeCheck(properties.get$onPaste(properties), t1);
      config._addArgumentlessAction$2(C.SemanticsAction_16384, t2);
      config.set$_semantics$_onPaste(t2);
      properties.get$onMoveCursorForwardByCharacter();
      config.set$onMoveCursorForwardByCharacter(properties.get$onMoveCursorForwardByCharacter());
      properties.get$onMoveCursorBackwardByCharacter();
      config.set$onMoveCursorBackwardByCharacter(properties.get$onMoveCursorBackwardByCharacter());
      properties.get$onSetSelection();
      config.set$onSetSelection(properties.get$onSetSelection());
      properties.get$onDidGainAccessibilityFocus();
      t2 = H.functionTypeCheck(properties.get$onDidGainAccessibilityFocus(), t1);
      config._addArgumentlessAction$2(C.SemanticsAction_32768, t2);
      config.set$_semantics$_onDidGainAccessibilityFocus(t2);
      properties.get$onDidLoseAccessibilityFocus();
      t2 = H.functionTypeCheck(properties.get$onDidLoseAccessibilityFocus(), t1);
      config._addArgumentlessAction$2(C.SemanticsAction_65536, t2);
      config.set$_semantics$_onDidLoseAccessibilityFocus(t2);
      properties.get$onDismiss();
      t1 = H.functionTypeCheck(properties.get$onDismiss(), t1);
      config._addArgumentlessAction$2(C.SemanticsAction_262144, t1);
      config.set$_semantics$_onDismiss(t1);
      newChild.updateWith$2$childrenInInversePaintOrder$config(0, C.List_empty3, config);
      newChild.set$rect(0, newSemantics.get$rect(newSemantics));
      newChild.set$transform(0, newSemantics.get$transform(newSemantics));
      newChild.set$tags(newSemantics.get$tags());
      return newChild;
    },
    CustomPainter: function CustomPainter() {
    },
    CustomPainterSemantics: function CustomPainterSemantics() {
    },
    RenderCustomPaint: function RenderCustomPaint(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _._custom_paint$_painter = t0;
      _._foregroundPainter = t1;
      _._preferredSize = t2;
      _.isComplex = t3;
      _.willChange = t4;
      _._foregroundSemanticsNodes = _._backgroundSemanticsNodes = _._foregroundSemanticsBuilder = _._backgroundSemanticsBuilder = null;
      _.RenderObjectWithChildMixin__child = t5;
      _._cachedBaselines = _._size = _._cachedIntrinsicDimensions = null;
      _._debugActivePointers = 0;
      _.debugCreator = _.parentData = null;
      _._debugDoingThisLayout = _._debugDoingThisResize = false;
      _._debugCanParentUseSize = null;
      _._debugMutationsLocked = false;
      _._needsLayout = true;
      _._relayoutBoundary = null;
      _._doingThisLayoutWithCallback = false;
      _._constraints = null;
      _._debugDoingThisPaint = false;
      _._layer = null;
      _._needsCompositingBitsUpdate = false;
      _._needsCompositing = null;
      _._needsPaint = true;
      _._cachedSemanticsConfiguration = null;
      _._needsSemanticsUpdate = true;
      _._semantics = null;
      _._node$_depth = 0;
      _._node$_parent = _._node$_owner = null;
    },
    RenderErrorBox$: function(message) {
      var t1 = new V.RenderErrorBox(message);
      t1.get$isRepaintBoundary();
      t1.get$alwaysNeedsCompositing();
      t1._needsCompositing = false;
      t1.RenderErrorBox$1(message);
      return t1;
    },
    RenderErrorBox: function RenderErrorBox(t0) {
      var _ = this;
      _.message = t0;
      _._cachedBaselines = _._size = _._cachedIntrinsicDimensions = _._paragraph = null;
      _._debugActivePointers = 0;
      _.debugCreator = _.parentData = null;
      _._debugDoingThisLayout = _._debugDoingThisResize = false;
      _._debugCanParentUseSize = null;
      _._debugMutationsLocked = false;
      _._needsLayout = true;
      _._relayoutBoundary = null;
      _._doingThisLayoutWithCallback = false;
      _._constraints = null;
      _._debugDoingThisPaint = false;
      _._layer = null;
      _._needsCompositingBitsUpdate = false;
      _._needsCompositing = null;
      _._needsPaint = true;
      _._cachedSemanticsConfiguration = null;
      _._needsSemanticsUpdate = true;
      _._semantics = null;
      _._node$_depth = 0;
      _._node$_parent = _._node$_owner = null;
    },
    SystemSound_play: function(type) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(-1);
      var $async$SystemSound_play = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 2;
              return P._asyncAwait(C.OptionalMethodChannel_cWd.invokeMethod$1$2("SystemSound.play", type._system_sound$_name, null), $async$SystemSound_play);
            case 2:
              // returning from await.
              // implicit return
              return P._asyncReturn(null, $async$completer);
          }
      });
      return P._asyncStartSync($async$SystemSound_play, $async$completer);
    },
    SystemSoundType: function SystemSoundType(t0) {
      this._system_sound$_name = t0;
    },
    PageRoute: function PageRoute() {
    },
    PageRouteBuilder: function PageRouteBuilder(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15) {
      var _ = this;
      _.pageBuilder = t0;
      _.transitionsBuilder = t1;
      _.opaque = t2;
      _.fullscreenDialog = t3;
      _.focusScopeNode = t4;
      _._routes$_offstage = false;
      _._secondaryAnimationProxy = _._animationProxy = null;
      _._willPopCallbacks = t5;
      _._scopeKey = t6;
      _._subtreeKey = t7;
      _._storageBucket = t8;
      _._modalScopeCache = _._modalBarrier = null;
      _.LocalHistoryRoute__localHistory = t9;
      _._transitionCompleter = t10;
      _._result = _._routes$_controller = _._routes$_animation = null;
      _._secondaryAnimation = t11;
      _._overlayEntries = t12;
      _._navigator$_navigator = null;
      _.settings = t13;
      _._popCompleter = t14;
      _.$ti = t15;
    }
  },
  M = {
    ButtonThemeData$: function(alignedDropdown, buttonColor, colorScheme, disabledColor, height, highlightColor, layoutBehavior, materialTapTargetSize, minWidth, padding, shape, splashColor, textTheme) {
      return new M.ButtonThemeData(minWidth, height, textTheme, layoutBehavior, padding, shape, false, buttonColor, disabledColor, highlightColor, splashColor, colorScheme, materialTapTargetSize);
    },
    ButtonTextTheme: function ButtonTextTheme(t0) {
      this._button_theme$_name = t0;
    },
    ButtonBarLayoutBehavior: function ButtonBarLayoutBehavior(t0) {
      this._button_theme$_name = t0;
    },
    ButtonThemeData: function ButtonThemeData(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12) {
      var _ = this;
      _.minWidth = t0;
      _.height = t1;
      _.textTheme = t2;
      _.layoutBehavior = t3;
      _._padding = t4;
      _._shape = t5;
      _.alignedDropdown = t6;
      _._buttonColor = t7;
      _._disabledColor = t8;
      _._highlightColor = t9;
      _._splashColor = t10;
      _.colorScheme = t11;
      _._materialTapTargetSize = t12;
    },
    Material$: function(animationDuration, child, clipBehavior, color, elevation, key, shape, textStyle, type) {
      return new M.Material(child, type, elevation, color, textStyle, shape, clipBehavior, animationDuration, key);
    },
    _MaterialState__transparentInterior: function(clipBehavior, contents, context, shape) {
      var child = new M._ShapeBorderPaint(contents, shape, true, null);
      if (clipBehavior === C.Clip_0)
        return child;
      return new T.ClipPath(new E.ShapeBorderClipper(shape, T.Directionality_of(context)), clipBehavior, child, null);
    },
    MaterialType: function MaterialType(t0) {
      this._material$_name = t0;
    },
    Material: function Material(t0, t1, t2, t3, t4, t5, t6, t7, t8) {
      var _ = this;
      _.child = t0;
      _.type = t1;
      _.elevation = t2;
      _.color = t3;
      _.textStyle = t4;
      _.shape = t5;
      _.clipBehavior = t6;
      _.animationDuration = t7;
      _.key = t8;
    },
    _MaterialState: function _MaterialState(t0, t1, t2) {
      var _ = this;
      _._inkFeatureRenderer = t0;
      _.TickerProviderStateMixin__tickers = t1;
      _._widget = null;
      _._debugLifecycleState = t2;
      _._element = null;
    },
    _MaterialState_build_closure: function _MaterialState_build_closure(t0) {
      this.$this = t0;
    },
    _RenderInkFeatures: function _RenderInkFeatures(t0, t1) {
      var _ = this;
      _.vsync = t0;
      _._inkFeatures = null;
      _.RenderObjectWithChildMixin__child = t1;
      _._cachedBaselines = _._size = _._cachedIntrinsicDimensions = null;
      _._debugActivePointers = 0;
      _.debugCreator = _.parentData = null;
      _._debugDoingThisLayout = _._debugDoingThisResize = false;
      _._debugCanParentUseSize = null;
      _._debugMutationsLocked = false;
      _._needsLayout = true;
      _._relayoutBoundary = null;
      _._doingThisLayoutWithCallback = false;
      _._constraints = null;
      _._debugDoingThisPaint = false;
      _._layer = null;
      _._needsCompositingBitsUpdate = false;
      _._needsCompositing = null;
      _._needsPaint = true;
      _._cachedSemanticsConfiguration = null;
      _._needsSemanticsUpdate = true;
      _._semantics = null;
      _._node$_depth = 0;
      _._node$_parent = _._node$_owner = null;
    },
    _InkFeatures: function _InkFeatures(t0, t1, t2, t3) {
      var _ = this;
      _.color = t0;
      _.vsync = t1;
      _.child = t2;
      _.key = t3;
    },
    InkFeature: function InkFeature() {
    },
    ShapeBorderTween: function ShapeBorderTween(t0, t1) {
      this.begin = t0;
      this.end = t1;
    },
    _MaterialInterior: function _MaterialInterior(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9) {
      var _ = this;
      _.child = t0;
      _.shape = t1;
      _.borderOnForeground = t2;
      _.clipBehavior = t3;
      _.elevation = t4;
      _.color = t5;
      _.shadowColor = t6;
      _.curve = t7;
      _.duration = t8;
      _.key = t9;
    },
    _MaterialInteriorState: function _MaterialInteriorState(t0, t1) {
      var _ = this;
      _._animation = _._controller = _._border = _._shadowColor = _._material$_elevation = null;
      _.SingleTickerProviderStateMixin__ticker = t0;
      _._widget = null;
      _._debugLifecycleState = t1;
      _._element = null;
    },
    _MaterialInteriorState_forEachTween_closure: function _MaterialInteriorState_forEachTween_closure() {
    },
    _MaterialInteriorState_forEachTween_closure0: function _MaterialInteriorState_forEachTween_closure0() {
    },
    _MaterialInteriorState_forEachTween_closure1: function _MaterialInteriorState_forEachTween_closure1() {
    },
    _ShapeBorderPaint: function _ShapeBorderPaint(t0, t1, t2, t3) {
      var _ = this;
      _.child = t0;
      _.shape = t1;
      _.borderOnForeground = t2;
      _.key = t3;
    },
    _ShapeBorderPainter: function _ShapeBorderPainter(t0, t1, t2) {
      this.border = t0;
      this.textDirection = t1;
      this._repaint = t2;
    },
    __MaterialState_State_TickerProviderStateMixin: function __MaterialState_State_TickerProviderStateMixin() {
    },
    _ScaffoldSlot: function _ScaffoldSlot(t0) {
      this._scaffold$_name = t0;
    },
    ScaffoldPrelayoutGeometry: function ScaffoldPrelayoutGeometry(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _.floatingActionButtonSize = t0;
      _.bottomSheetSize = t1;
      _.contentBottom = t2;
      _.minInsets = t3;
      _.scaffoldSize = t4;
      _.snackBarSize = t5;
      _.textDirection = t6;
    },
    _TransitionSnapshotFabLocation: function _TransitionSnapshotFabLocation(t0, t1, t2, t3) {
      var _ = this;
      _.begin = t0;
      _.end = t1;
      _.animator = t2;
      _.progress = t3;
    },
    ScaffoldGeometry: function ScaffoldGeometry(t0, t1) {
      this.bottomNavigationBarTop = t0;
      this.floatingActionButtonArea = t1;
    },
    _ScaffoldGeometryNotifier: function _ScaffoldGeometryNotifier(t0, t1) {
      this.floatingActionButtonScale = null;
      this.geometry = t0;
      this._listeners = t1;
    },
    _ScaffoldLayout: function _ScaffoldLayout(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _.minInsets = t0;
      _.textDirection = t1;
      _.geometryNotifier = t2;
      _.previousFloatingActionButtonLocation = t3;
      _.currentFloatingActionButtonLocation = t4;
      _.floatingActionButtonMoveAnimationProgress = t5;
      _.floatingActionButtonMotionAnimator = t6;
      _._debugChildrenNeedingLayout = _._idToChild = null;
    },
    _FloatingActionButtonTransition: function _FloatingActionButtonTransition(t0, t1, t2, t3, t4) {
      var _ = this;
      _.child = t0;
      _.fabMoveAnimation = t1;
      _.fabMotionAnimator = t2;
      _.geometryNotifier = t3;
      _.key = t4;
    },
    _FloatingActionButtonTransitionState: function _FloatingActionButtonTransitionState(t0, t1) {
      var _ = this;
      _._previousChild = _._currentRotationAnimation = _._extendedCurrentScaleAnimation = _._currentScaleAnimation = _._currentController = _._previousRotationAnimation = _._previousScaleAnimation = _._previousController = null;
      _.TickerProviderStateMixin__tickers = t0;
      _._widget = null;
      _._debugLifecycleState = t1;
      _._element = null;
    },
    _FloatingActionButtonTransitionState__handlePreviousAnimationStatusChanged_closure: function _FloatingActionButtonTransitionState__handlePreviousAnimationStatusChanged_closure(t0, t1) {
      this.$this = t0;
      this.status = t1;
    },
    Scaffold: function Scaffold(t0, t1, t2, t3, t4) {
      var _ = this;
      _.body = t0;
      _.floatingActionButton = t1;
      _.floatingActionButtonLocation = t2;
      _.backgroundColor = t3;
      _.key = t4;
    },
    ScaffoldState: function ScaffoldState(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _._drawerKey = t0;
      _._endDrawerKey = t1;
      _._endDrawerOpened = false;
      _._snackBars = t2;
      _._accessibleNavigation = _._snackBarTimer = null;
      _._dismissedBottomSheets = t3;
      _._floatingActionButtonLocation = _._previousFloatingActionButtonLocation = _._floatingActionButtonAnimator = _._floatingActionButtonMoveController = _._currentBottomSheet = null;
      _._primaryScrollController = t4;
      _._geometryNotifier = null;
      _.TickerProviderStateMixin__tickers = t5;
      _._widget = null;
      _._debugLifecycleState = t6;
      _._element = null;
    },
    ScaffoldState_hideCurrentSnackBar_closure: function ScaffoldState_hideCurrentSnackBar_closure(t0, t1, t2) {
      this.$this = t0;
      this.completer = t1;
      this.reason = t2;
    },
    ScaffoldState__moveFloatingActionButton_closure: function ScaffoldState__moveFloatingActionButton_closure(t0, t1, t2) {
      this._box_0 = t0;
      this.$this = t1;
      this.newLocation = t2;
    },
    ScaffoldState_build_closure: function ScaffoldState_build_closure(t0, t1, t2, t3) {
      var _ = this;
      _.$this = t0;
      _.children = t1;
      _.minInsets = t2;
      _.textDirection = t3;
    },
    ScaffoldFeatureController: function ScaffoldFeatureController() {
    },
    _PersistentBottomSheet: function _PersistentBottomSheet() {
    },
    _ScaffoldScope: function _ScaffoldScope(t0, t1, t2) {
      this.hasDrawer = t0;
      this.child = t1;
      this.key = t2;
    },
    _ScaffoldState_State_TickerProviderStateMixin: function _ScaffoldState_State_TickerProviderStateMixin() {
    },
    __FloatingActionButtonTransitionState_State_TickerProviderStateMixin: function __FloatingActionButtonTransitionState_State_TickerProviderStateMixin() {
    },
    ImageConfiguration: function ImageConfiguration(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.bundle = t0;
      _.devicePixelRatio = t1;
      _.locale = t2;
      _.textDirection = t3;
      _.size = t4;
      _.platform = t5;
    },
    SpringDescription$withDampingRatio: function(mass, ratio, stiffness) {
      return new M.SpringDescription(mass, stiffness, ratio * 2 * Math.sqrt(mass * stiffness));
    },
    _SpringSolution__SpringSolution: function(spring, initialPosition, initialVelocity) {
      var r, r1, r2, c2, w,
        t1 = spring.damping,
        t2 = t1 * t1,
        t3 = spring.mass,
        t4 = 4 * t3 * spring.stiffness,
        cmk = t2 - t4;
      if (cmk === 0) {
        r = -t1 / (2 * t3);
        return new M._CriticalSolution(r, initialPosition, initialVelocity / (r * initialPosition));
      }
      if (cmk > 0) {
        t1 = -t1;
        t3 = 2 * t3;
        r1 = (t1 - Math.sqrt(cmk)) / t3;
        r2 = (t1 + Math.sqrt(cmk)) / t3;
        c2 = (initialVelocity - r1 * initialPosition) / (r2 - r1);
        return new M._OverdampedSolution(r1, r2, initialPosition - c2, c2);
      }
      w = Math.sqrt(t4 - t2) / (2 * t3);
      r = -(t1 / 2 * t3);
      return new M._UnderdampedSolution(w, r, initialPosition, (initialVelocity - r * initialPosition) / w);
    },
    SpringDescription: function SpringDescription(t0, t1, t2) {
      this.mass = t0;
      this.stiffness = t1;
      this.damping = t2;
    },
    SpringType: function SpringType(t0) {
      this._spring_simulation$_name = t0;
    },
    SpringSimulation: function SpringSimulation(t0, t1, t2) {
      this._endPosition = t0;
      this._solution = t1;
      this.tolerance = t2;
    },
    ScrollSpringSimulation: function ScrollSpringSimulation(t0, t1, t2) {
      this._endPosition = t0;
      this._solution = t1;
      this.tolerance = t2;
    },
    _CriticalSolution: function _CriticalSolution(t0, t1, t2) {
      this._r = t0;
      this._c1 = t1;
      this._c2 = t2;
    },
    _OverdampedSolution: function _OverdampedSolution(t0, t1, t2, t3) {
      var _ = this;
      _._r1 = t0;
      _._r2 = t1;
      _._c1 = t2;
      _._c2 = t3;
    },
    _UnderdampedSolution: function _UnderdampedSolution(t0, t1, t2, t3) {
      var _ = this;
      _._w = t0;
      _._r = t1;
      _._c1 = t2;
      _._c2 = t3;
    },
    TickerProvider: function TickerProvider() {
    },
    Ticker: function Ticker(t0, t1) {
      var _ = this;
      _._future = null;
      _._muted = false;
      _._startTime = null;
      _._onTick = t0;
      _._animationId = null;
      _.debugLabel = t1;
      _._debugCreationStack = null;
    },
    TickerFuture: function TickerFuture(t0) {
      this._primaryCompleter = t0;
      this._completed = null;
    },
    Container$: function(alignment, child, color, constraints, decoration, height, margin, padding, width) {
      var t1, t2, _null = null;
      if (decoration == null)
        t1 = color != null ? S.BoxDecoration$(_null, _null, _null, color, _null, _null, C.BoxShape_0) : _null;
      else
        t1 = decoration;
      if (width != null || height != null) {
        t2 = constraints == null ? _null : constraints.tighten$2$height$width(height, width);
        if (t2 == null)
          t2 = S.BoxConstraints$tightFor(height, width);
      } else
        t2 = constraints;
      return new M.Container(child, alignment, padding, t1, t2, margin, _null);
    },
    DecoratedBox: function DecoratedBox(t0, t1, t2, t3) {
      var _ = this;
      _.decoration = t0;
      _.position = t1;
      _.child = t2;
      _.key = t3;
    },
    Container: function Container(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _.child = t0;
      _.alignment = t1;
      _.padding = t2;
      _.decoration = t3;
      _.constraints = t4;
      _.margin = t5;
      _.key = t6;
    },
    ScrollActivity: function ScrollActivity() {
    },
    IdleScrollActivity: function IdleScrollActivity(t0) {
      this._delegate = t0;
    },
    HoldScrollActivity: function HoldScrollActivity(t0, t1) {
      this.onHoldCanceled = t0;
      this._delegate = t1;
    },
    ScrollDragController: function ScrollDragController(t0, t1, t2, t3, t4, t5, t6, t7) {
      var _ = this;
      _._delegate = t0;
      _.onDragCanceled = t1;
      _.carriedVelocity = t2;
      _.motionStartDistanceThreshold = t3;
      _._lastNonStationaryTimestamp = t4;
      _._retainMomentum = t5;
      _._offsetSinceLastStop = t6;
      _._lastDetails = t7;
    },
    DragScrollActivity: function DragScrollActivity(t0, t1) {
      this._scroll_activity$_controller = t0;
      this._delegate = t1;
    },
    BallisticScrollActivity: function BallisticScrollActivity(t0) {
      this._scroll_activity$_controller = null;
      this._delegate = t0;
    },
    DrivenScrollActivity: function DrivenScrollActivity(t0) {
      this._scroll_activity$_controller = this._scroll_activity$_completer = null;
      this._delegate = t0;
    },
    FixedScrollMetrics$: function(axisDirection, maxScrollExtent, minScrollExtent, pixels, viewportDimension) {
      return new M.FixedScrollMetrics(minScrollExtent, maxScrollExtent, pixels, viewportDimension, axisDirection);
    },
    ScrollMetrics: function ScrollMetrics() {
    },
    FixedScrollMetrics: function FixedScrollMetrics(t0, t1, t2, t3, t4) {
      var _ = this;
      _.minScrollExtent = t0;
      _.maxScrollExtent = t1;
      _.pixels = t2;
      _.viewportDimension = t3;
      _.axisDirection = t4;
    },
    Feedback_forTap: function(context) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(-1),
        $async$returnValue, t1;
      var $async$Feedback_forTap = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          $async$outer:
            switch ($async$goto) {
              case 0:
                // Function start
                context.get$renderObject().sendSemanticsEvent$1(C.TapSemanticEvent_tap);
                switch (K.Theme_of(context).platform) {
                  case C.TargetPlatform_0:
                  case C.TargetPlatform_1:
                    $async$returnValue = V.SystemSound_play(C.SystemSoundType_0);
                    // goto return
                    $async$goto = 1;
                    break $async$outer;
                  default:
                    t1 = new P._Future($.Zone__current, [-1]);
                    t1._asyncComplete$1(null);
                    $async$returnValue = t1;
                    // goto return
                    $async$goto = 1;
                    break $async$outer;
                }
              case 1:
                // return
                return P._asyncReturn($async$returnValue, $async$completer);
            }
      });
      return P._asyncStartSync($async$Feedback_forTap, $async$completer);
    },
    SystemNavigator_pop: function() {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(-1);
      var $async$SystemNavigator_pop = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 2;
              return P._asyncAwait(C.OptionalMethodChannel_cWd.invokeMethod$1$1("SystemNavigator.pop", null), $async$SystemNavigator_pop);
            case 2:
              // returning from await.
              // implicit return
              return P._asyncReturn(null, $async$completer);
          }
      });
      return P._asyncStartSync($async$SystemNavigator_pop, $async$completer);
    }
  },
  A = {CardTheme: function CardTheme(t0, t1, t2, t3, t4) {
      var _ = this;
      _.clipBehavior = t0;
      _.color = t1;
      _.elevation = t2;
      _.margin = t3;
      _.shape = t4;
    },
    ColorScheme$: function(background, brightness, error, onBackground, onError, onPrimary, onSecondary, onSurface, primary, primaryVariant, secondary, secondaryVariant, surface) {
      return new A.ColorScheme(primary, primaryVariant, secondary, secondaryVariant, surface, background, error, onPrimary, onSecondary, onSurface, onBackground, onError, brightness);
    },
    ColorScheme: function ColorScheme(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12) {
      var _ = this;
      _.primary = t0;
      _.primaryVariant = t1;
      _.secondary = t2;
      _.secondaryVariant = t3;
      _.surface = t4;
      _.background = t5;
      _.error = t6;
      _.onPrimary = t7;
      _.onSecondary = t8;
      _.onSurface = t9;
      _.onBackground = t10;
      _.onError = t11;
      _.brightness = t12;
    },
    FloatingActionButtonLocation: function FloatingActionButtonLocation() {
    },
    _CenterFloatFloatingActionButtonLocation: function _CenterFloatFloatingActionButtonLocation() {
    },
    FloatingActionButtonAnimator: function FloatingActionButtonAnimator() {
    },
    _ScalingFabMotionAnimator: function _ScalingFabMotionAnimator() {
    },
    _AnimationSwap: function _AnimationSwap(t0, t1, t2, t3, t4, t5, t6, t7) {
      var _ = this;
      _.parent = t0;
      _.swapThreshold = t1;
      _.first = t2;
      _.next = t3;
      _._lastValue = _._lastStatus = null;
      _.AnimationLocalStatusListenersMixin__statusListeners = t4;
      _.AnimationLocalListenersMixin__listeners = t5;
      _.AnimationLazyListenerMixin__listenerCounter = t6;
      _.$ti = t7;
    },
    TextStyle$0: function(background, backgroundColor, color, debugLabel, decoration, decorationColor, decorationStyle, fontFamily, fontFamilyFallback, fontSize, fontStyle, fontWeight, foreground, height, inherit, letterSpacing, locale, $package, shadows, textBaseline, wordSpacing) {
      return new A.TextStyle0(inherit, color, backgroundColor, fontFamily, fontFamilyFallback, $package, fontSize, fontWeight, fontStyle, letterSpacing, wordSpacing, textBaseline, height, locale, foreground, background, decoration, decorationColor, decorationStyle, debugLabel, shadows);
    },
    TextStyle_lerp: function(a, b, t) {
      var t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, _null = null,
        t1 = a == null;
      if (t1 && b == null)
        return;
      if (t1) {
        t1 = b.inherit;
        t2 = Q.Color_lerp(_null, b.color, t);
        t3 = Q.Color_lerp(_null, b.backgroundColor, t);
        if (typeof t !== "number")
          return t.$lt();
        t4 = t < 0.5;
        t5 = t4 ? _null : b.fontFamily;
        t6 = t4 ? _null : b.get$fontFamilyFallback();
        t7 = t4 ? _null : b.fontSize;
        t8 = Q.FontWeight_lerp(_null, b.fontWeight, t);
        t9 = t4 ? _null : b.fontStyle;
        t10 = t4 ? _null : b.letterSpacing;
        t11 = t4 ? _null : b.wordSpacing;
        t12 = t4 ? _null : b.textBaseline;
        t13 = t4 ? _null : b.height;
        t14 = t4 ? _null : b.locale;
        t15 = t4 ? _null : b.foreground;
        t16 = t4 ? _null : b.background;
        t17 = t4 ? _null : b.decoration;
        t18 = t4 ? _null : b.shadows;
        t19 = Q.Color_lerp(_null, b.decorationColor, t);
        return A.TextStyle$0(t16, t3, t2, _null, t17, t19, t4 ? _null : b.decorationStyle, t5, t6, t7, t9, t8, t15, t13, t1, t10, t14, _null, t18, t12, t11);
      }
      if (b == null) {
        t1 = a.inherit;
        t2 = Q.Color_lerp(a.color, _null, t);
        t3 = Q.Color_lerp(_null, a.backgroundColor, t);
        if (typeof t !== "number")
          return t.$lt();
        t4 = t < 0.5;
        t5 = t4 ? a.fontFamily : _null;
        t6 = t4 ? a.get$fontFamilyFallback() : _null;
        t7 = t4 ? a.fontSize : _null;
        t8 = Q.FontWeight_lerp(a.fontWeight, _null, t);
        t9 = t4 ? a.fontStyle : _null;
        t10 = t4 ? a.letterSpacing : _null;
        t11 = t4 ? a.wordSpacing : _null;
        t12 = t4 ? a.textBaseline : _null;
        t13 = t4 ? a.height : _null;
        t14 = t4 ? a.locale : _null;
        t15 = t4 ? a.foreground : _null;
        t16 = t4 ? a.background : _null;
        t17 = t4 ? a.shadows : _null;
        t18 = t4 ? a.decoration : _null;
        t19 = Q.Color_lerp(a.decorationColor, _null, t);
        return A.TextStyle$0(t16, t3, t2, _null, t18, t19, t4 ? a.decorationStyle : _null, t5, t6, t7, t9, t8, t15, t13, t1, t10, t14, _null, t17, t12, t11);
      }
      t1 = b.inherit;
      t2 = a.foreground;
      t3 = t2 == null;
      t4 = t3 && b.foreground == null ? Q.Color_lerp(a.color, b.color, t) : _null;
      t5 = a.background;
      t6 = t5 == null;
      t7 = t6 && b.background == null ? Q.Color_lerp(a.backgroundColor, b.backgroundColor, t) : _null;
      if (typeof t !== "number")
        return t.$lt();
      t8 = t < 0.5;
      t9 = t8 ? a.fontFamily : b.fontFamily;
      t10 = t8 ? a.get$fontFamilyFallback() : b.get$fontFamilyFallback();
      t11 = a.fontSize;
      t12 = t11 == null ? b.fontSize : t11;
      t13 = b.fontSize;
      t11 = Q.lerpDouble(t12, t13 == null ? t11 : t13, t);
      t12 = Q.FontWeight_lerp(a.fontWeight, b.fontWeight, t);
      t13 = t8 ? a.fontStyle : b.fontStyle;
      t14 = a.letterSpacing;
      t15 = t14 == null ? b.letterSpacing : t14;
      t16 = b.letterSpacing;
      t14 = Q.lerpDouble(t15, t16 == null ? t14 : t16, t);
      t15 = a.wordSpacing;
      t16 = t15 == null ? b.wordSpacing : t15;
      t17 = b.wordSpacing;
      t15 = Q.lerpDouble(t16, t17 == null ? t15 : t17, t);
      t16 = t8 ? a.textBaseline : b.textBaseline;
      t17 = a.height;
      t18 = t17 == null ? b.height : t17;
      t19 = b.height;
      t17 = Q.lerpDouble(t18, t19 == null ? t17 : t19, t);
      t18 = t8 ? a.locale : b.locale;
      if (!t3 || b.foreground != null)
        if (t8) {
          if (t3) {
            t2 = new Q.Paint(new Q.PaintData());
            t2.set$color(0, a.color);
          }
        } else {
          t2 = b.foreground;
          if (t2 == null) {
            t2 = new Q.Paint(new Q.PaintData());
            t2.set$color(0, b.color);
          }
        }
      else
        t2 = _null;
      if (!t6 || b.background != null)
        if (t8)
          if (t6) {
            t3 = new Q.Paint(new Q.PaintData());
            t3.set$color(0, a.backgroundColor);
          } else
            t3 = t5;
        else {
          t3 = b.background;
          if (t3 == null) {
            t3 = new Q.Paint(new Q.PaintData());
            t3.set$color(0, b.backgroundColor);
          }
        }
      else
        t3 = _null;
      t5 = t8 ? a.shadows : b.shadows;
      t6 = t8 ? a.decoration : b.decoration;
      t19 = Q.Color_lerp(a.decorationColor, b.decorationColor, t);
      return A.TextStyle$0(t3, t7, t4, _null, t6, t19, t8 ? a.decorationStyle : b.decorationStyle, t9, t10, t11, t13, t12, t2, t17, t1, t14, t18, _null, t5, t16, t15);
    },
    TextStyle0: function TextStyle0(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t20) {
      var _ = this;
      _.inherit = t0;
      _.color = t1;
      _.backgroundColor = t2;
      _.fontFamily = t3;
      _._text_style$_fontFamilyFallback = t4;
      _._package = t5;
      _.fontSize = t6;
      _.fontWeight = t7;
      _.fontStyle = t8;
      _.letterSpacing = t9;
      _.wordSpacing = t10;
      _.textBaseline = t11;
      _.height = t12;
      _.locale = t13;
      _.foreground = t14;
      _.background = t15;
      _.decoration = t16;
      _.decorationColor = t17;
      _.decorationStyle = t18;
      _.debugLabel = t19;
      _.shadows = t20;
    },
    RenderSliverFillViewport: function RenderSliverFillViewport(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _._sliver_fill$_viewportFraction = t0;
      _._childManager = t1;
      _._keepAliveBucket = t2;
      _.ContainerRenderObjectMixin__childCount = t3;
      _.ContainerRenderObjectMixin__firstChild = t4;
      _.ContainerRenderObjectMixin__lastChild = t5;
      _.debugCreator = _.parentData = _._geometry = null;
      _._debugDoingThisLayout = _._debugDoingThisResize = false;
      _._debugCanParentUseSize = null;
      _._debugMutationsLocked = false;
      _._needsLayout = true;
      _._relayoutBoundary = null;
      _._doingThisLayoutWithCallback = false;
      _._constraints = null;
      _._debugDoingThisPaint = false;
      _._layer = null;
      _._needsCompositingBitsUpdate = false;
      _._needsCompositing = null;
      _._needsPaint = true;
      _._cachedSemanticsConfiguration = null;
      _._needsSemanticsUpdate = true;
      _._semantics = null;
      _._node$_depth = 0;
      _._node$_parent = _._node$_owner = null;
    },
    ViewConfiguration: function ViewConfiguration(t0, t1) {
      this.size = t0;
      this.devicePixelRatio = t1;
    },
    RenderView: function RenderView(t0, t1, t2, t3) {
      var _ = this;
      _._view$_size = t0;
      _._view$_configuration = t1;
      _._view$_window = t2;
      _._rootTransform = null;
      _.RenderObjectWithChildMixin__child = t3;
      _.debugCreator = _.parentData = null;
      _._debugDoingThisLayout = _._debugDoingThisResize = false;
      _._debugCanParentUseSize = null;
      _._debugMutationsLocked = false;
      _._needsLayout = true;
      _._relayoutBoundary = null;
      _._doingThisLayoutWithCallback = false;
      _._constraints = null;
      _._debugDoingThisPaint = false;
      _._layer = null;
      _._needsCompositingBitsUpdate = false;
      _._needsCompositing = null;
      _._needsPaint = true;
      _._cachedSemanticsConfiguration = null;
      _._needsSemanticsUpdate = true;
      _._semantics = null;
      _._node$_depth = 0;
      _._node$_parent = _._node$_owner = null;
    },
    _RenderView_RenderObject_RenderObjectWithChildMixin: function _RenderView_RenderObject_RenderObjectWithChildMixin() {
    },
    CustomSemanticsAction_getIdentifier: function(action) {
      var result = $.CustomSemanticsAction__ids.$index(0, action);
      if (result == null) {
        result = $.CustomSemanticsAction__nextId;
        $.CustomSemanticsAction__nextId = result + 1;
        $.CustomSemanticsAction__ids.$indexSet(0, action, result);
        $.CustomSemanticsAction__actions.$indexSet(0, result, action);
      }
      return result;
    },
    SemanticsData__sortedListsEqual: function(left, right) {
      var i,
        t1 = [P.int];
      H.assertSubtype(left, "$isList", t1, "$asList");
      H.assertSubtype(right, "$isList", t1, "$asList");
      if (left.length !== right.length)
        return false;
      for (i = 0; i < left.length; ++i) {
        t1 = left[i];
        if (i >= right.length)
          return H.ioore(right, i);
        if (!J.$eq$(t1, right[i]))
          return false;
      }
      return true;
    },
    _pointInParentCoordinates: function(node, point) {
      var t1, vector;
      if (node._semantics$_transform == null)
        return point;
      t1 = new Float64Array(3);
      vector = new E.Vector3(t1);
      vector.setValues$3(point._dx, point._dy, 0);
      node._semantics$_transform.transform3$1(vector);
      return new Q.Offset(t1[0], t1[1]);
    },
    _childrenInDefaultOrder: function(children, textDirection) {
      var edges, t2, _i, child, t3, t4, t5, t6, verticalGroups, group, depth, edge, result,
        t1 = [A.SemanticsNode];
      H.assertSubtype(children, "$isList", t1, "$asList");
      edges = H.setRuntimeTypeInfo([], [A._BoxEdge]);
      for (t2 = children.length, _i = 0; _i < children.length; children.length === t2 || (0, H.throwConcurrentModificationError)(children), ++_i) {
        child = children[_i];
        t3 = child._semantics$_rect;
        t4 = t3.left;
        if (typeof t4 !== "number")
          return t4.$sub();
        t5 = t3.top;
        if (typeof t5 !== "number")
          return t5.$sub();
        t6 = t3.right;
        if (typeof t6 !== "number")
          return t6.$add();
        t3 = t3.bottom;
        if (typeof t3 !== "number")
          return t3.$add();
        C.JSArray_methods.add$1(edges, new A._BoxEdge(true, A._pointInParentCoordinates(child, new Q.Offset(t4 - -0.1, t5 - -0.1))._dy, child));
        C.JSArray_methods.add$1(edges, new A._BoxEdge(false, A._pointInParentCoordinates(child, new Q.Offset(t6 + -0.1, t3 + -0.1))._dy, child));
      }
      C.JSArray_methods.sort$0(edges);
      verticalGroups = H.setRuntimeTypeInfo([], [A._SemanticsSortGroup]);
      for (t2 = edges.length, group = null, depth = 0, _i = 0; _i < edges.length; edges.length === t2 || (0, H.throwConcurrentModificationError)(edges), ++_i) {
        edge = edges[_i];
        if (edge.isLeadingEdge) {
          ++depth;
          if (group == null)
            group = new A._SemanticsSortGroup(edge.offset, textDirection, H.setRuntimeTypeInfo([], t1));
          C.JSArray_methods.add$1(group.nodes, edge.node);
        } else
          --depth;
        if (depth === 0) {
          C.JSArray_methods.add$1(verticalGroups, group);
          group = null;
        }
      }
      C.JSArray_methods.sort$0(verticalGroups);
      result = H.setRuntimeTypeInfo([], t1);
      for (t1 = verticalGroups.length, _i = 0; _i < verticalGroups.length; verticalGroups.length === t1 || (0, H.throwConcurrentModificationError)(verticalGroups), ++_i)
        C.JSArray_methods.addAll$1(result, verticalGroups[_i].sortedWithinVerticalGroup$0());
      return result;
    },
    SemanticsConfiguration$: function() {
      return new A.SemanticsConfiguration(P.LinkedHashMap_LinkedHashMap$_empty(Q.SemanticsAction, {func: 1, ret: -1, args: [,]}), P.LinkedHashMap_LinkedHashMap$_empty(A.CustomSemanticsAction, {func: 1, ret: -1}));
    },
    _concatStrings: function(otherString, otherTextDirection, thisString, thisTextDirection) {
      var nestedLabel;
      if (otherString.length === 0)
        return thisString;
      if (thisTextDirection != otherTextDirection && otherTextDirection != null)
        switch (otherTextDirection) {
          case C.TextDirection_0:
            nestedLabel = "\u202b" + H.S(otherString) + "\u202c";
            break;
          case C.TextDirection_1:
            nestedLabel = "\u202a" + H.S(otherString) + "\u202c";
            break;
          default:
            nestedLabel = otherString;
        }
      else
        nestedLabel = otherString;
      if (thisString.length === 0)
        return nestedLabel;
      return thisString + "\n" + H.S(nestedLabel);
    },
    SemanticsTag: function SemanticsTag(t0) {
      this.name = t0;
    },
    CustomSemanticsAction: function CustomSemanticsAction() {
    },
    SemanticsData: function SemanticsData(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t20) {
      var _ = this;
      _.flags = t0;
      _.actions = t1;
      _.label = t2;
      _.value = t3;
      _.increasedValue = t4;
      _.decreasedValue = t5;
      _.hint = t6;
      _.textDirection = t7;
      _.textSelection = t8;
      _.scrollChildCount = t9;
      _.scrollIndex = t10;
      _.scrollPosition = t11;
      _.scrollExtentMax = t12;
      _.scrollExtentMin = t13;
      _.platformViewId = t14;
      _.rect = t15;
      _.tags = t16;
      _.transform = t17;
      _.elevation = t18;
      _.thickness = t19;
      _.customSemanticsActionIds = t20;
    },
    _SemanticsDiagnosticableNode: function _SemanticsDiagnosticableNode(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.childOrder = t0;
      _.value = t1;
      _._cachedBuilder = null;
      _.name = t2;
      _.showSeparator = t3;
      _.showName = t4;
      _.style = t5;
    },
    SemanticsProperties: function SemanticsProperties(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t30, t31, t32, t33, t34, t35, t36, t37, t38, t39, t40) {
      var _ = this;
      _.enabled = t0;
      _.checked = t1;
      _.toggled = t2;
      _.selected = t3;
      _.button = t4;
      _.header = t5;
      _.textField = t6;
      _.focused = t7;
      _.inMutuallyExclusiveGroup = t8;
      _.hidden = t9;
      _.obscured = t10;
      _.scopesRoute = t11;
      _.namesRoute = t12;
      _.image = t13;
      _.liveRegion = t14;
      _.label = t15;
      _.value = t16;
      _.increasedValue = t17;
      _.decreasedValue = t18;
      _.hint = t19;
      _.hintOverrides = t20;
      _.textDirection = t21;
      _.sortKey = t22;
      _.onTap = t23;
      _.onLongPress = t24;
      _.onScrollLeft = t25;
      _.onScrollRight = t26;
      _.onScrollUp = t27;
      _.onScrollDown = t28;
      _.onIncrease = t29;
      _.onDecrease = t30;
      _.onCopy = t31;
      _.onCut = t32;
      _.onPaste = t33;
      _.onMoveCursorForwardByCharacter = t34;
      _.onMoveCursorBackwardByCharacter = t35;
      _.onSetSelection = t36;
      _.onDidGainAccessibilityFocus = t37;
      _.onDidLoseAccessibilityFocus = t38;
      _.onDismiss = t39;
      _.customSemanticsActions = t40;
    },
    SemanticsNode: function SemanticsNode(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16) {
      var _ = this;
      _.key = t0;
      _.id = t1;
      _._showOnScreen = t2;
      _._semantics$_transform = null;
      _._semantics$_rect = t3;
      _.indexInParent = _.elevationAdjustment = _.parentPaintClipRect = _.parentSemanticsClipRect = null;
      _._isMergedIntoParent = false;
      _._mergeAllDescendantsIntoThisNode = t4;
      _._debugPreviousSnapshot = _._semantics$_children = null;
      _._semantics$_dirty = _._dead = false;
      _._actions = t5;
      _._customSemanticsActions = t6;
      _._actionsAsBits = t7;
      _.tags = null;
      _._flags = t8;
      _._label = t9;
      _._semantics$_value = t10;
      _._decreasedValue = t11;
      _._increasedValue = t12;
      _._hint = t13;
      _._elevation = t14;
      _._thickness = t15;
      _._hintOverrides = null;
      _._semantics$_textDirection = t16;
      _._isMultiline = _._platformViewId = _._scrollExtentMin = _._scrollExtentMax = _._scrollPosition = _._scrollIndex = _._scrollChildCount = _._textSelection = _._sortKey = null;
      _._node$_depth = 0;
      _._node$_parent = _._node$_owner = null;
    },
    SemanticsNode_getSemanticsData_closure: function SemanticsNode_getSemanticsData_closure(t0, t1, t2) {
      this._box_0 = t0;
      this.$this = t1;
      this.customSemanticsActionIds = t2;
    },
    SemanticsNode__childrenInTraversalOrder_closure: function SemanticsNode__childrenInTraversalOrder_closure() {
    },
    SemanticsNode_debugDescribeChildren_closure: function SemanticsNode_debugDescribeChildren_closure(t0) {
      this.childOrder = t0;
    },
    _BoxEdge: function _BoxEdge(t0, t1, t2) {
      this.isLeadingEdge = t0;
      this.offset = t1;
      this.node = t2;
    },
    _SemanticsSortGroup: function _SemanticsSortGroup(t0, t1, t2) {
      this.startOffset = t0;
      this.textDirection = t1;
      this.nodes = t2;
    },
    _SemanticsSortGroup_sortedWithinKnot_closure: function _SemanticsSortGroup_sortedWithinKnot_closure() {
    },
    _SemanticsSortGroup_sortedWithinKnot_search: function _SemanticsSortGroup_sortedWithinKnot_search(t0, t1, t2) {
      this.visitedIds = t0;
      this.edges = t1;
      this.sortedIds = t2;
    },
    _SemanticsSortGroup_sortedWithinKnot_closure0: function _SemanticsSortGroup_sortedWithinKnot_closure0() {
    },
    _SemanticsSortGroup_sortedWithinKnot_closure1: function _SemanticsSortGroup_sortedWithinKnot_closure1(t0) {
      this.nodeMap = t0;
    },
    _TraversalSortNode: function _TraversalSortNode(t0, t1, t2) {
      this.node = t0;
      this.sortKey = t1;
      this.position = t2;
    },
    SemanticsOwner: function SemanticsOwner(t0, t1, t2, t3, t4) {
      var _ = this;
      _._dirtyNodes = t0;
      _._nodes = t1;
      _._detachedNodes = t2;
      _._actions = t3;
      _._listeners = t4;
    },
    SemanticsOwner_sendSemanticsUpdate_closure: function SemanticsOwner_sendSemanticsUpdate_closure(t0) {
      this.$this = t0;
    },
    SemanticsOwner_sendSemanticsUpdate_closure0: function SemanticsOwner_sendSemanticsUpdate_closure0() {
    },
    SemanticsOwner_sendSemanticsUpdate_closure1: function SemanticsOwner_sendSemanticsUpdate_closure1() {
    },
    SemanticsOwner__getSemanticsActionHandlerForId_closure: function SemanticsOwner__getSemanticsActionHandlerForId_closure(t0, t1) {
      this._box_0 = t0;
      this.action = t1;
    },
    SemanticsConfiguration: function SemanticsConfiguration(t0, t1) {
      var _ = this;
      _._hasBeenAnnotated = _.isBlockingSemanticsOfPreviouslyPaintedNodes = _.explicitChildNodes = _._isSemanticBoundary = false;
      _._actions = t0;
      _._actionsAsBits = 0;
      _._platformViewId = _._scrollIndex = _._scrollChildCount = _._indexInParent = _._sortKey = _._onLongPress = _._onTap = null;
      _._isMergingSemanticsOfDescendants = false;
      _._customSemanticsActions = t1;
      _._hint = _._increasedValue = _._decreasedValue = _._semantics$_value = _._label = "";
      _._hintOverrides = null;
      _._thickness = _._elevation = 0;
      _._tagsForChildren = _._scrollExtentMin = _._scrollExtentMax = _._scrollPosition = _._textSelection = _._semantics$_textDirection = null;
      _._flags = 0;
    },
    SemanticsConfiguration__addArgumentlessAction_closure: function SemanticsConfiguration__addArgumentlessAction_closure(t0) {
      this.handler = t0;
    },
    SemanticsConfiguration_onMoveCursorForwardByCharacter_closure: function SemanticsConfiguration_onMoveCursorForwardByCharacter_closure(t0) {
      this.value = t0;
    },
    SemanticsConfiguration_onMoveCursorBackwardByCharacter_closure: function SemanticsConfiguration_onMoveCursorBackwardByCharacter_closure(t0) {
      this.value = t0;
    },
    SemanticsConfiguration_onSetSelection_closure: function SemanticsConfiguration_onSetSelection_closure(t0) {
      this.value = t0;
    },
    DebugSemanticsDumpOrder: function DebugSemanticsDumpOrder(t0) {
      this._semantics$_name = t0;
    },
    SemanticsSortKey: function SemanticsSortKey() {
    },
    OrdinalSortKey: function OrdinalSortKey(t0, t1) {
      this.order = t0;
      this.name = t1;
    },
    _SemanticsNode_AbstractNode_DiagnosticableTreeMixin: function _SemanticsNode_AbstractNode_DiagnosticableTreeMixin() {
    },
    BasicMessageChannel: function BasicMessageChannel(t0, t1, t2) {
      this.name = t0;
      this.codec = t1;
      this.$ti = t2;
    },
    BasicMessageChannel_setMessageHandler_closure: function BasicMessageChannel_setMessageHandler_closure(t0, t1) {
      this.$this = t0;
      this.handler = t1;
    },
    MethodChannel: function MethodChannel(t0, t1) {
      this.name = t0;
      this.codec = t1;
    },
    MethodChannel_setMethodCallHandler_closure: function MethodChannel_setMethodCallHandler_closure(t0, t1) {
      this.$this = t0;
      this.handler = t1;
    },
    OptionalMethodChannel: function OptionalMethodChannel(t0, t1) {
      this.name = t0;
      this.codec = t1;
    },
    _debugReportException0: function(context, exception, stack) {
      var details = U.FlutterErrorDetails$(context, exception, null, "widgets library", false, H.interceptedTypeCheck(stack, "$isStackTrace"));
      U.assertions_FlutterError_dumpErrorToConsole$closure().call$1(details);
      return details;
    },
    LayoutBuilder: function LayoutBuilder(t0, t1) {
      this.builder = t0;
      this.key = t1;
    },
    _LayoutBuilderElement: function _LayoutBuilderElement(t0, t1, t2) {
      var _ = this;
      _._framework$_parent = _._ancestorRenderObjectElement = _._renderObject = _._layout_builder$_child = null;
      _._cachedHash = t0;
      _._depth = _._slot = null;
      _._widget = t1;
      _._owner = null;
      _._active = false;
      _._debugLifecycleState = t2;
      _._dependencies = _._inheritedWidgets = null;
      _._hadUnsatisfiedDependencies = false;
      _._dirty = true;
      _._debugAllowIgnoredCallsToMarkNeedsBuild = _._debugBuiltOnce = _._inDirtyList = false;
    },
    _LayoutBuilderElement__layout_closure: function _LayoutBuilderElement__layout_closure(t0, t1) {
      this.$this = t0;
      this.constraints = t1;
    },
    _RenderLayoutBuilder: function _RenderLayoutBuilder(t0) {
      var _ = this;
      _._layout_builder$_callback = null;
      _.RenderObjectWithChildMixin__child = t0;
      _._cachedBaselines = _._size = _._cachedIntrinsicDimensions = null;
      _._debugActivePointers = 0;
      _.debugCreator = _.parentData = null;
      _._debugDoingThisLayout = _._debugDoingThisResize = false;
      _._debugCanParentUseSize = null;
      _._debugMutationsLocked = false;
      _._needsLayout = true;
      _._relayoutBoundary = null;
      _._doingThisLayoutWithCallback = false;
      _._constraints = null;
      _._debugDoingThisPaint = false;
      _._layer = null;
      _._needsCompositingBitsUpdate = false;
      _._needsCompositing = null;
      _._needsPaint = true;
      _._cachedSemanticsConfiguration = null;
      _._needsSemanticsUpdate = true;
      _._semantics = null;
      _._node$_depth = 0;
      _._node$_parent = _._node$_owner = null;
    },
    __RenderLayoutBuilder_RenderBox_RenderObjectWithChildMixin: function __RenderLayoutBuilder_RenderBox_RenderObjectWithChildMixin() {
    },
    ScrollPosition: function ScrollPosition() {
    },
    _ScrollPosition_ViewportOffset_ScrollMetrics: function _ScrollPosition_ViewportOffset_ScrollMetrics() {
    },
    hashObjects: function(objects) {
      var hash,
        t1 = J.fold$1$2$ax(H.assertSubtype(objects, "$isIterable", [P.Object], "$asIterable"), 0, new A.hashObjects_closure(), P.int);
      if (typeof t1 !== "number")
        return H.iae(t1);
      hash = 536870911 & t1 + ((67108863 & t1) << 3);
      hash ^= hash >>> 11;
      return 536870911 & hash + ((16383 & hash) << 15);
    },
    hashObjects_closure: function hashObjects_closure() {
    }
  },
  Q = {
    SliderThemeData$: function(activeTickMarkColor, activeTrackColor, disabledActiveTickMarkColor, disabledActiveTrackColor, disabledInactiveTickMarkColor, disabledInactiveTrackColor, disabledThumbColor, inactiveTickMarkColor, inactiveTrackColor, overlayColor, showValueIndicator, thumbColor, thumbShape, valueIndicatorColor, valueIndicatorShape, valueIndicatorTextStyle) {
      return new Q.SliderThemeData(activeTrackColor, inactiveTrackColor, disabledActiveTrackColor, disabledInactiveTrackColor, activeTickMarkColor, inactiveTickMarkColor, disabledActiveTickMarkColor, disabledInactiveTickMarkColor, thumbColor, disabledThumbColor, overlayColor, valueIndicatorColor, thumbShape, valueIndicatorShape, showValueIndicator, valueIndicatorTextStyle);
    },
    SliderThemeData_SliderThemeData$fromPrimaryColors: function(primaryColor, primaryColorDark, primaryColorLight, valueIndicatorTextStyle) {
      var t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15,
        t1 = primaryColor._value,
        t2 = (16711680 & t1) >>> 16,
        t3 = (65280 & t1) >>> 8;
      t1 = (255 & t1) >>> 0;
      t4 = Q.Color$fromARGB(255, t2, t3, t1);
      t5 = Q.Color$fromARGB(61, t2, t3, t1);
      t6 = primaryColorDark._value;
      t7 = (16711680 & t6) >>> 16;
      t8 = (65280 & t6) >>> 8;
      t6 = (255 & t6) >>> 0;
      t9 = Q.Color$fromARGB(82, t7, t8, t6);
      t10 = Q.Color$fromARGB(31, t7, t8, t6);
      t11 = primaryColorLight._value;
      t12 = (16711680 & t11) >>> 16;
      t13 = (65280 & t11) >>> 8;
      t11 = (255 & t11) >>> 0;
      t14 = Q.Color$fromARGB(138, t12, t13, t11);
      t15 = Q.Color$fromARGB(138, t2, t3, t1);
      t11 = Q.Color$fromARGB(31, t12, t13, t11);
      t13 = Q.Color$fromARGB(31, t7, t8, t6);
      t12 = Q.Color$fromARGB(255, t2, t3, t1);
      return Q.SliderThemeData$(t14, t4, t11, t9, t13, t10, Q.Color$fromARGB(82, t7, t8, t6), t15, t5, Q.Color$fromARGB(41, t2, t3, t1), C.ShowValueIndicator_0, t12, C.C_RoundSliderThumbShape, Q.Color$fromARGB(255, t2, t3, t1), C.C_PaddleSliderValueIndicatorShape, valueIndicatorTextStyle);
    },
    ShowValueIndicator: function ShowValueIndicator(t0) {
      this._slider_theme$_name = t0;
    },
    SliderThemeData: function SliderThemeData(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15) {
      var _ = this;
      _.activeTrackColor = t0;
      _.inactiveTrackColor = t1;
      _.disabledActiveTrackColor = t2;
      _.disabledInactiveTrackColor = t3;
      _.activeTickMarkColor = t4;
      _.inactiveTickMarkColor = t5;
      _.disabledActiveTickMarkColor = t6;
      _.disabledInactiveTickMarkColor = t7;
      _.thumbColor = t8;
      _.disabledThumbColor = t9;
      _.overlayColor = t10;
      _.valueIndicatorColor = t11;
      _.thumbShape = t12;
      _.valueIndicatorShape = t13;
      _.showValueIndicator = t14;
      _.valueIndicatorTextStyle = t15;
    },
    SliderComponentShape: function SliderComponentShape() {
    },
    RoundSliderThumbShape: function RoundSliderThumbShape() {
    },
    PaddleSliderValueIndicatorShape: function PaddleSliderValueIndicatorShape() {
    },
    TextSpan: function TextSpan(t0, t1, t2) {
      this.style = t0;
      this.text = t1;
      this.children = t2;
    },
    TextSpan_getSpanForPosition_closure: function TextSpan_getSpanForPosition_closure(t0, t1, t2) {
      this._box_0 = t0;
      this.targetOffset = t1;
      this.affinity = t2;
    },
    TextSpan_toPlainText_closure: function TextSpan_toPlainText_closure(t0) {
      this.buffer = t0;
    },
    TextSpan_debugDescribeChildren_closure: function TextSpan_debugDescribeChildren_closure() {
    },
    TextOverflow: function TextOverflow(t0) {
      this._paragraph$_name = t0;
    },
    RenderParagraph: function RenderParagraph(t0, t1, t2, t3, t4) {
      var _ = this;
      _._textPainter = t0;
      _._softWrap = t1;
      _._paragraph$_overflow = t2;
      _._needsClipping = false;
      _._overflowShader = null;
      _._recognizerOffsets = t3;
      _._recognizers = t4;
      _._cachedBaselines = _._size = _._cachedIntrinsicDimensions = null;
      _._debugActivePointers = 0;
      _.debugCreator = _.parentData = null;
      _._debugDoingThisLayout = _._debugDoingThisResize = false;
      _._debugCanParentUseSize = null;
      _._debugMutationsLocked = false;
      _._needsLayout = true;
      _._relayoutBoundary = null;
      _._doingThisLayoutWithCallback = false;
      _._constraints = null;
      _._debugDoingThisPaint = false;
      _._layer = null;
      _._needsCompositingBitsUpdate = false;
      _._needsCompositing = null;
      _._needsPaint = true;
      _._cachedSemanticsConfiguration = null;
      _._needsSemanticsUpdate = true;
      _._semantics = null;
      _._node$_depth = 0;
      _._node$_parent = _._node$_owner = null;
    },
    RenderParagraph_handleEvent_closure: function RenderParagraph_handleEvent_closure(t0) {
      this._box_0 = t0;
    },
    RenderParagraph_describeSemanticsConfiguration_closure: function RenderParagraph_describeSemanticsConfiguration_closure(t0, t1) {
      this._box_0 = t0;
      this.$this = t1;
    },
    RenderParagraph_assembleSemanticsNode_buildSemanticsConfig: function RenderParagraph_assembleSemanticsNode_buildSemanticsConfig(t0, t1, t2) {
      this._box_0 = t0;
      this.$this = t1;
      this.rawLabel = t2;
    },
    RenderViewportBase_showInViewport: function(curve, descendant, duration, offset, rect, viewport) {
      var leadingEdgeOffset, trailingEdgeOffset, currentOffset, t1, t2, targetOffset, transform, to;
      if (descendant == null)
        return rect;
      leadingEdgeOffset = viewport.getOffsetToReveal$3$rect(descendant, 0, rect);
      trailingEdgeOffset = viewport.getOffsetToReveal$3$rect(descendant, 1, rect);
      currentOffset = offset._pixels;
      t1 = leadingEdgeOffset.offset;
      t2 = trailingEdgeOffset.offset;
      if (typeof t1 !== "number")
        return t1.$lt();
      if (typeof t2 !== "number")
        return H.iae(t2);
      if (t1 < t2) {
        if (typeof currentOffset !== "number")
          return currentOffset.$sub();
        targetOffset = Math.abs(currentOffset - t1) < Math.abs(currentOffset - t2) ? leadingEdgeOffset : trailingEdgeOffset;
      } else {
        if (typeof currentOffset !== "number")
          return currentOffset.$gt();
        if (currentOffset > t1)
          targetOffset = leadingEdgeOffset;
        else {
          if (!(currentOffset < t2)) {
            transform = descendant.getTransformTo$1(0, H.interceptedTypeCheck(viewport._node$_parent, "$isRenderObject"));
            return T.MatrixUtils_transformRect(transform, rect == null ? descendant.get$paintBounds() : rect);
          }
          targetOffset = trailingEdgeOffset;
        }
      }
      to = J.clamp$2$n(targetOffset.offset, offset._minScrollExtent, offset._maxScrollExtent);
      offset.super$ViewportOffset$moveTo(0, to, curve, duration);
      return targetOffset.rect;
    },
    RevealedOffset: function RevealedOffset(t0, t1) {
      this.offset = t0;
      this.rect = t1;
    },
    RenderViewportBase: function RenderViewportBase() {
    },
    RenderViewportBase_visitChildrenForSemantics_closure: function RenderViewportBase_visitChildrenForSemantics_closure() {
    },
    RenderViewport: function RenderViewport(t0, t1, t2, t3, t4, t5, t6, t7) {
      var _ = this;
      _._anchor = t0;
      _._viewport$_maxScrollExtent = _._viewport$_minScrollExtent = _._viewport$_center = null;
      _._viewport$_hasVisualOverflow = false;
      _._axisDirection = t1;
      _._crossAxisDirection = t2;
      _._viewport$_offset = t3;
      _._cacheExtent = t4;
      _.ContainerRenderObjectMixin__childCount = t5;
      _.ContainerRenderObjectMixin__firstChild = t6;
      _.ContainerRenderObjectMixin__lastChild = t7;
      _._cachedBaselines = _._size = _._cachedIntrinsicDimensions = null;
      _._debugActivePointers = 0;
      _.debugCreator = _.parentData = null;
      _._debugDoingThisLayout = _._debugDoingThisResize = false;
      _._debugCanParentUseSize = null;
      _._debugMutationsLocked = false;
      _._needsLayout = true;
      _._relayoutBoundary = null;
      _._doingThisLayoutWithCallback = false;
      _._constraints = null;
      _._debugDoingThisPaint = false;
      _._layer = null;
      _._needsCompositingBitsUpdate = false;
      _._needsCompositing = null;
      _._needsPaint = true;
      _._cachedSemanticsConfiguration = null;
      _._needsSemanticsUpdate = true;
      _._semantics = null;
      _._node$_depth = 0;
      _._node$_parent = _._node$_owner = null;
    },
    _RenderViewportBase_RenderBox_ContainerRenderObjectMixin: function _RenderViewportBase_RenderBox_ContainerRenderObjectMixin() {
    },
    AssetBundle: function AssetBundle() {
    },
    CachingAssetBundle: function CachingAssetBundle() {
    },
    CachingAssetBundle_loadString_closure: function CachingAssetBundle_loadString_closure(t0, t1) {
      this.$this = t0;
      this.key = t1;
    },
    PlatformAssetBundle: function PlatformAssetBundle(t0, t1) {
      this._stringCache = t0;
      this._structuredDataCache = t1;
    },
    Viewport$: function(axisDirection, cacheExtent, offset, slivers) {
      return new Q.Viewport(axisDirection, offset, cacheExtent, slivers, null);
    },
    Viewport_getDefaultCrossAxisDirection: function(context, axisDirection) {
      switch (axisDirection) {
        case C.AxisDirection_0:
          return G.textDirectionToAxisDirection(T.Directionality_of(context));
        case C.AxisDirection_1:
          return C.AxisDirection_2;
        case C.AxisDirection_2:
          return G.textDirectionToAxisDirection(T.Directionality_of(context));
        case C.AxisDirection_3:
          return C.AxisDirection_2;
      }
      return;
    },
    Viewport: function Viewport(t0, t1, t2, t3, t4) {
      var _ = this;
      _.axisDirection = t0;
      _.offset = t1;
      _.cacheExtent = t2;
      _.children = t3;
      _.key = t4;
    },
    _ViewportElement: function _ViewportElement(t0, t1, t2, t3) {
      var _ = this;
      _._children = null;
      _._forgottenChildren = t0;
      _._framework$_parent = _._ancestorRenderObjectElement = _._renderObject = null;
      _._cachedHash = t1;
      _._depth = _._slot = null;
      _._widget = t2;
      _._owner = null;
      _._active = false;
      _._debugLifecycleState = t3;
      _._dependencies = _._inheritedWidgets = null;
      _._hadUnsatisfiedDependencies = false;
      _._dirty = true;
      _._debugAllowIgnoredCallsToMarkNeedsBuild = _._debugBuiltOnce = _._inDirtyList = false;
    },
    ensureLeading: function(str, leading) {
      return C.JSString_methods.startsWith$1(str, leading) ? str : leading + str;
    },
    Canvas$: function(recorder, cullRect) {
      var t2, t3,
        t1 = new Q.Canvas();
      if (recorder._isRecording)
        H.throwExpression(P.ArgumentError$('"recorder" must not already be associated with another Canvas.'));
      if (cullRect == null)
        cullRect = C.Rect_aha;
      recorder.cullRect = cullRect;
      recorder._isRecording = true;
      t2 = H.setRuntimeTypeInfo([], [T.PaintCommand]);
      t3 = new T.Matrix40(new Float64Array(16));
      t3.setIdentity$0();
      t1._ui$_canvas = recorder._ui$_canvas = new T.RecordingCanvas(new T._PaintBounds(cullRect, t3), t2);
      return t1;
    },
    _ellipseContains: function(px, py, centerX, centerY, radiusX, radiusY) {
      var dx = px - centerX,
        dy = py - centerY;
      if (typeof radiusX !== "number")
        return radiusX.$mul();
      if (typeof radiusY !== "number")
        return radiusY.$mul();
      return dx * dx / (radiusX * radiusX) + dy * dy / (radiusY * radiusY) < 1;
    },
    SceneBuilder_SceneBuilder: function() {
      var t1 = H.setRuntimeTypeInfo([], [Q.PersistedContainerSurface]),
        t2 = new Q.PersistedScene(H.setRuntimeTypeInfo([], [Q.PersistedSurface]), C.PersistedSurfaceReuseStrategy_0, C.C_Object),
        t3 = new T.Matrix40(new Float64Array(16));
      t3.setIdentity$0();
      t2._ui$_transform = t3;
      C.JSArray_methods.add$1(t1, t2);
      return new Q.SceneBuilder(t1);
    },
    _recycleCanvas: function(canvas) {
      var removedCanvas, t1;
      if (canvas instanceof T.BitmapCanvas && canvas._devicePixelRatio == window.devicePixelRatio) {
        C.JSArray_methods.add$1($._recycledCanvases, canvas);
        if ($._recycledCanvases.length > 30) {
          removedCanvas = C.JSArray_methods.removeAt$1($._recycledCanvases, 0);
          removedCanvas.super$EngineCanvas$dispose();
          t1 = $._browserEngine;
          if ((t1 == null ? $._browserEngine = T._detectBrowserEngine() : t1) === C.BrowserEngine_1) {
            t1 = removedCanvas._canvas;
            t1.width = t1.height = 0;
          }
        }
      }
    },
    standardPictureFactory: function(webOnlyPaintedBy, dx, dy, picture, hints) {
      return new Q.PersistedStandardPicture(dx, dy, picture, picture.recordingCanvas._paintBounds.computeBounds$0(), C.PersistedSurfaceReuseStrategy_0, webOnlyPaintedBy);
    },
    _pathToSvgClipPath: function(path, offsetX, offsetY) {
      var t2,
        bounds = path.getBounds$0(0),
        sb = new P.StringBuffer(""),
        t1 = '<svg width="' + H.S(bounds.right) + '" height="' + H.S(bounds.bottom) + '" style="position:absolute">';
      sb._contents = t1;
      t1 += "<defs>";
      sb._contents = t1;
      t2 = $._clipCounter + 1;
      $._clipCounter = t2;
      t2 = t1 + ("<clipPath id=" + ("svgClip" + t2) + ">");
      sb._contents = t2;
      sb._contents = t2 + '<path fill="#FFFFFF" d="';
      T.pathToSvg(path, sb, offsetX, offsetY);
      t2 = sb._contents += '"></path></clipPath></defs></svg';
      return t2.charCodeAt(0) == 0 ? t2 : t2;
    },
    Offset_lerp: function(a, b, t) {
      var t1 = a == null;
      if (t1 && b == null)
        return;
      if (t1)
        return b.$mul(0, t);
      if (b == null) {
        if (typeof t !== "number")
          return H.iae(t);
        return a.$mul(0, 1 - t);
      }
      return new Q.Offset(Q.lerpDouble(a._dx, b._dx, t), Q.lerpDouble(a._dy, b._dy, t));
    },
    Rect$fromPoints: function(a, b) {
      var t1 = a._dx,
        t2 = b._dx,
        t3 = Math.min(H.checkNum(t1), H.checkNum(t2)),
        t4 = a._dy,
        t5 = b._dy;
      return new Q.Rect(t3, Math.min(H.checkNum(t4), H.checkNum(t5)), Math.max(H.checkNum(t1), H.checkNum(t2)), Math.max(H.checkNum(t4), H.checkNum(t5)));
    },
    Rect_lerp: function(a, b, t) {
      var t2, t3, t4, k,
        t1 = a == null;
      if (t1 && b == null)
        return;
      if (t1) {
        t1 = b.left;
        if (typeof t1 !== "number")
          return t1.$mul();
        if (typeof t !== "number")
          return H.iae(t);
        t2 = b.top;
        if (typeof t2 !== "number")
          return t2.$mul();
        t3 = b.right;
        if (typeof t3 !== "number")
          return t3.$mul();
        t4 = b.bottom;
        if (typeof t4 !== "number")
          return t4.$mul();
        return new Q.Rect(t1 * t, t2 * t, t3 * t, t4 * t);
      }
      if (b == null) {
        if (typeof t !== "number")
          return H.iae(t);
        k = 1 - t;
        t1 = a.left;
        if (typeof t1 !== "number")
          return t1.$mul();
        t2 = a.top;
        if (typeof t2 !== "number")
          return t2.$mul();
        t3 = a.right;
        if (typeof t3 !== "number")
          return t3.$mul();
        t4 = a.bottom;
        if (typeof t4 !== "number")
          return t4.$mul();
        return new Q.Rect(t1 * k, t2 * k, t3 * k, t4 * k);
      }
      return new Q.Rect(Q.lerpDouble(a.left, b.left, t), Q.lerpDouble(a.top, b.top, t), Q.lerpDouble(a.right, b.right, t), Q.lerpDouble(a.bottom, b.bottom, t));
    },
    Radius_lerp: function(a, b, t) {
      var t2, k,
        t1 = a == null;
      if (t1 && b == null)
        return;
      if (t1) {
        t1 = b.x;
        if (typeof t1 !== "number")
          return t1.$mul();
        if (typeof t !== "number")
          return H.iae(t);
        t2 = b.y;
        if (typeof t2 !== "number")
          return t2.$mul();
        return new Q.Radius(t1 * t, t2 * t);
      }
      if (b == null) {
        if (typeof t !== "number")
          return H.iae(t);
        k = 1 - t;
        t1 = a.x;
        if (typeof t1 !== "number")
          return t1.$mul();
        t2 = a.y;
        if (typeof t2 !== "number")
          return t2.$mul();
        return new Q.Radius(t1 * k, t2 * k);
      }
      return new Q.Radius(Q.lerpDouble(a.x, b.x, t), Q.lerpDouble(a.y, b.y, t));
    },
    RRect$fromRectAndRadius: function(rect, radius) {
      var t1 = radius.x,
        t2 = radius.y;
      return new Q.RRect(rect.left, rect.top, rect.right, rect.bottom, t1, t2, t1, t2, t1, t2, t1, t2);
    },
    RRect$fromRectAndCorners: function(rect, bottomLeft, bottomRight, topLeft, topRight) {
      var t1 = bottomLeft.x,
        t2 = bottomLeft.y,
        t3 = rect.bottom,
        t4 = bottomRight.x,
        t5 = bottomRight.y,
        t6 = rect.left,
        t7 = rect.right,
        t8 = topLeft.x,
        t9 = topLeft.y;
      return new Q.RRect(t6, rect.top, t7, t3, t8, t9, topRight.x, topRight.y, t4, t5, t1, t2);
    },
    RRect$_raw: function(blRadiusX, blRadiusY, bottom, brRadiusX, brRadiusY, left, right, tlRadiusX, tlRadiusY, $top, trRadiusX, trRadiusY) {
      return new Q.RRect(left, $top, right, bottom, tlRadiusX, tlRadiusY, trRadiusX, trRadiusY, brRadiusX, brRadiusY, blRadiusX, blRadiusY);
    },
    hashValues: function(arg01, arg02, arg03, arg04, arg05, arg06, arg07, arg08, arg09, arg10, arg11, arg12, arg13, arg14, arg15, arg16, arg17, arg18, arg19, arg20) {
      var result = 37 * (13801 + J.get$hashCode$(arg01)) + J.get$hashCode$(arg02),
        t1 = J.getInterceptor$(arg03);
      if (!t1.$eq(arg03, C.C__HashEnd)) {
        result = 37 * result + t1.get$hashCode(arg03);
        t1 = J.getInterceptor$(arg04);
        if (!t1.$eq(arg04, C.C__HashEnd)) {
          result = 37 * result + t1.get$hashCode(arg04);
          t1 = J.getInterceptor$(arg05);
          if (!t1.$eq(arg05, C.C__HashEnd)) {
            result = 37 * result + t1.get$hashCode(arg05);
            t1 = J.getInterceptor$(arg06);
            if (!t1.$eq(arg06, C.C__HashEnd)) {
              result = 37 * result + t1.get$hashCode(arg06);
              t1 = J.getInterceptor$(arg07);
              if (!t1.$eq(arg07, C.C__HashEnd)) {
                result = 37 * result + t1.get$hashCode(arg07);
                t1 = J.getInterceptor$(arg08);
                if (!t1.$eq(arg08, C.C__HashEnd)) {
                  result = 37 * result + t1.get$hashCode(arg08);
                  t1 = J.getInterceptor$(arg09);
                  if (!t1.$eq(arg09, C.C__HashEnd)) {
                    result = 37 * result + t1.get$hashCode(arg09);
                    t1 = J.getInterceptor$(arg10);
                    if (!t1.$eq(arg10, C.C__HashEnd)) {
                      result = 37 * result + t1.get$hashCode(arg10);
                      t1 = J.getInterceptor$(arg11);
                      if (!t1.$eq(arg11, C.C__HashEnd)) {
                        result = 37 * result + t1.get$hashCode(arg11);
                        t1 = J.getInterceptor$(arg12);
                        if (!t1.$eq(arg12, C.C__HashEnd)) {
                          result = 37 * result + t1.get$hashCode(arg12);
                          t1 = J.getInterceptor$(arg13);
                          if (!t1.$eq(arg13, C.C__HashEnd)) {
                            result = 37 * result + t1.get$hashCode(arg13);
                            t1 = J.getInterceptor$(arg14);
                            if (!t1.$eq(arg14, C.C__HashEnd)) {
                              result = 37 * result + t1.get$hashCode(arg14);
                              t1 = J.getInterceptor$(arg15);
                              if (!t1.$eq(arg15, C.C__HashEnd)) {
                                result = 37 * result + t1.get$hashCode(arg15);
                                t1 = J.getInterceptor$(arg16);
                                if (!t1.$eq(arg16, C.C__HashEnd)) {
                                  result = 37 * result + t1.get$hashCode(arg16);
                                  t1 = J.getInterceptor$(arg17);
                                  if (!t1.$eq(arg17, C.C__HashEnd)) {
                                    result = 37 * result + t1.get$hashCode(arg17);
                                    t1 = J.getInterceptor$(arg18);
                                    if (!t1.$eq(arg18, C.C__HashEnd)) {
                                      result = 37 * result + t1.get$hashCode(arg18);
                                      t1 = J.getInterceptor$(arg19);
                                      if (!t1.$eq(arg19, C.C__HashEnd)) {
                                        result = 37 * result + t1.get$hashCode(arg19);
                                        if (arg20 !== C.C__HashEnd)
                                          result = 37 * result + J.get$hashCode$(arg20);
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      return result;
    },
    hashList: function(args) {
      var t1, result, _i;
      H.assertSubtype(args, "$isIterable", [P.Object], "$asIterable");
      if (args != null)
        for (t1 = args.length, result = 373, _i = 0; _i < args.length; args.length === t1 || (0, H.throwConcurrentModificationError)(args), ++_i)
          result = 37 * result + J.get$hashCode$(args[_i]);
      else
        result = 373;
      return result;
    },
    webOnlyInitializePlatform: function() {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(-1),
        t1, t2;
      var $async$webOnlyInitializePlatform = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $.$get$domRenderer().toString;
              t1 = $.$get$window()._browserHistory;
              t2 = t1._locationStrategy;
              if (C.C_HashLocationStrategy !== t2) {
                t1._tearoffStrategy$1(t2);
                t1._locationStrategy = C.C_HashLocationStrategy;
                t1._setupStrategy$1(C.C_HashLocationStrategy);
              }
              $async$goto = 2;
              return P._asyncAwait(Q.webOnlySetAssetManager(new T.AssetManager()), $async$webOnlyInitializePlatform);
            case 2:
              // returning from await.
              $async$goto = 3;
              return P._asyncAwait($._fontCollection.ensureFontsLoaded$0(), $async$webOnlyInitializePlatform);
            case 3:
              // returning from await.
              T.webOnlyInitializeEngine();
              $._webOnlyIsInitialized = true;
              // implicit return
              return P._asyncReturn(null, $async$completer);
          }
      });
      return P._asyncStartSync($async$webOnlyInitializePlatform, $async$completer);
    },
    webOnlySetAssetManager: function(assetManager) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(-1),
        $async$returnValue, t1;
      var $async$webOnlySetAssetManager = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              if (assetManager === $._assetManager) {
                // goto return
                $async$goto = 1;
                break;
              }
              $._assetManager = assetManager;
              t1 = $._fontCollection;
              if (t1 == null)
                t1 = $._fontCollection = new T.FontCollection();
              t1._testFontManager = t1._assetFontManager = null;
              if ($.$get$supportsFontLoadingApi())
                document.fonts.clear();
              t1 = $._assetManager;
              $async$goto = t1 != null ? 3 : 4;
              break;
            case 3:
              // then
              $async$goto = 5;
              return P._asyncAwait($._fontCollection.registerFonts$1(t1), $async$webOnlySetAssetManager);
            case 5:
              // returning from await.
            case 4:
              // join
              $.$get$domRenderer().toString;
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$webOnlySetAssetManager, $async$completer);
    },
    lerpDouble: function(a, b, t) {
      var t1 = a == null;
      if (t1 && b == null)
        return;
      if (t1)
        a = 0;
      if (b == null)
        b = 0;
      if (typeof t !== "number")
        return H.iae(t);
      return a + (b - a) * t;
    },
    _scaleAlpha: function(a, factor) {
      var t1 = a._value;
      if (typeof factor !== "number")
        return H.iae(factor);
      return Q.Color$fromARGB(H.intTypeCheck(C.JSInt_methods.clamp$2(C.JSNumber_methods.round$0(((4278190080 & t1) >>> 24) * factor), 0, 255)), (16711680 & t1) >>> 16, (65280 & t1) >>> 8, (255 & t1) >>> 0);
    },
    Color$fromARGB: function(a, r, g, b) {
      if (typeof a !== "number")
        return a.$and();
      return new Q.Color((((a & 255) << 24 | (r & 255) << 16 | (g & 255) << 8 | (b & 255) << 0) & 4294967295) >>> 0);
    },
    Color__linearizeColorComponent: function(component) {
      if (component <= 0.03928)
        return component / 12.92;
      return Math.pow((component + 0.055) / 1.055, 2.4);
    },
    Color_lerp: function(a, b, t) {
      var t2,
        t1 = a == null;
      if (t1 && b == null)
        return;
      if (t1)
        return Q._scaleAlpha(b, t);
      if (b == null) {
        if (typeof t !== "number")
          return H.iae(t);
        return Q._scaleAlpha(a, 1 - t);
      }
      t1 = a._value;
      t2 = b._value;
      return Q.Color$fromARGB(H.intTypeCheck(C.JSInt_methods.clamp$2(J.toInt$0$n(Q.lerpDouble((4278190080 & t1) >>> 24, (4278190080 & t2) >>> 24, t)), 0, 255)), H.intTypeCheck(C.JSInt_methods.clamp$2(J.toInt$0$n(Q.lerpDouble((16711680 & t1) >>> 16, (16711680 & t2) >>> 16, t)), 0, 255)), H.intTypeCheck(C.JSInt_methods.clamp$2(J.toInt$0$n(Q.lerpDouble((65280 & t1) >>> 8, (65280 & t2) >>> 8, t)), 0, 255)), H.intTypeCheck(C.JSInt_methods.clamp$2(J.toInt$0$n(Q.lerpDouble((255 & t1) >>> 0, (255 & t2) >>> 0, t)), 0, 255)));
    },
    Paint$: function() {
      return new Q.Paint(new Q.PaintData());
    },
    _GradientLinear$: function(from, to, colors, colorStops, tileMode) {
      if (colorStops == null) {
        if (colors.length !== 2)
          H.throwExpression(P.ArgumentError$('"colors" must have length 2 if "colorStops" is omitted.'));
      } else if (colors.length !== colorStops.length)
        H.throwExpression(P.ArgumentError$('"colors" and "colorStops" arguments must have equal length.'));
      return new Q._GradientLinear(from, to, colors, colorStops);
    },
    PointerData$: function(buttons, change, device, kind, physicalX, physicalY, pressure, pressureMax, pressureMin, scrollDeltaX, scrollDeltaY, signalKind, tilt, timeStamp) {
      return new Q.PointerData(timeStamp, change, kind, signalKind, device, physicalX, physicalY, buttons, pressure, pressureMin, pressureMax, tilt, scrollDeltaX, scrollDeltaY);
    },
    FontWeight_lerp: function(a, b, t) {
      var t2,
        t1 = a == null ? null : a.index;
      if (t1 == null)
        t1 = 3;
      t2 = b == null ? null : b.index;
      t1 = H.intTypeCheck(C.JSInt_methods.clamp$2(J.round$0$n(Q.lerpDouble(t1, t2 == null ? 3 : t2, t)), 0, 8));
      if (t1 < 0 || t1 >= 9)
        return H.ioore(C.List_27p, t1);
      return C.List_27p[t1];
    },
    textAlignToCssValue: function(align, textDirection) {
      switch (align) {
        case C.TextAlign_0:
          return "left";
        case C.TextAlign_1:
          return "right";
        case C.TextAlign_2:
          return "center";
        case C.TextAlign_3:
          return "justify";
        case C.TextAlign_4:
          switch (textDirection) {
            case C.TextDirection_1:
              return;
            case C.TextDirection_0:
              return "right";
          }
          break;
        case C.TextAlign_5:
          switch (textDirection) {
            case C.TextDirection_1:
              return "end";
            case C.TextDirection_0:
              return "left";
          }
          break;
      }
      throw H.wrapException(P.AssertionError$("Unsupported TextAlign value " + H.S(align)));
    },
    _listEquals: function(a, b, $T) {
      return true;
    },
    TextStyle$: function(background, color, decoration, decorationColor, decorationStyle, fontFamily, fontFamilyFallback, fontSize, fontStyle, fontWeight, foreground, height, letterSpacing, locale, shadows, textBaseline, wordSpacing) {
      var t1 = fontFamily == null,
        t2 = t1 ? "" : fontFamily;
      return new Q.TextStyle(color, decoration, decorationColor, decorationStyle, fontWeight, fontStyle, textBaseline, !t1, t2, fontFamilyFallback, fontSize, letterSpacing, wordSpacing, height, locale, background, foreground, shadows);
    },
    ParagraphStyle$: function(ellipsis, fontFamily, fontSize, fontStyle, fontWeight, height, locale, maxLines, strutStyle, textAlign, textDirection) {
      return new Q.ParagraphStyle(textAlign, textDirection, fontWeight, fontStyle, maxLines, fontFamily, fontSize, height, strutStyle, ellipsis, locale);
    },
    Paragraph$_: function(background, paint, paragraphElement, paragraphGeometricStyle, plainText, textAlign, textDirection) {
      return new Q.Paragraph(paragraphElement, paragraphGeometricStyle, plainText, paint, textAlign, textDirection, background);
    },
    ParagraphBuilder$: function(style) {
      var strutFontFamilies, cssStyle, t3,
        t1 = H.interceptedTypeCheck($.$get$domRenderer().createElement$1(0, "p"), "$isHtmlElement"),
        t2 = style._strutStyle;
      if (t2 != null) {
        strutFontFamilies = H.setRuntimeTypeInfo([], [P.String]);
        C.JSArray_methods.add$1(strutFontFamilies, t2._fontFamily);
        C.JSArray_methods.addAll$1(strutFontFamilies, t2._fontFamilyFallback);
      }
      cssStyle = t1.style;
      t2 = style._textAlign;
      if (t2 != null) {
        t3 = style._textDirection;
        t2 = Q.textAlignToCssValue(t2, t3 == null ? C.TextDirection_1 : t3);
        cssStyle.toString;
        cssStyle.textAlign = t2 == null ? "" : t2;
      }
      if (style.get$_webOnlyLineHeight() != null) {
        t2 = H.S(style.get$_webOnlyLineHeight());
        cssStyle.lineHeight = t2;
      }
      t2 = style._textDirection;
      if (t2 != null) {
        t2 = t2 === C.TextDirection_1 ? null : "rtl";
        cssStyle.toString;
        cssStyle.direction = t2 == null ? "" : t2;
      }
      t2 = style._fontSize;
      if (t2 != null) {
        t2 = "" + C.JSNumber_methods.floor$0(t2) + "px";
        cssStyle.fontSize = t2;
      }
      t2 = style._fontWeight;
      if (t2 != null) {
        t2 = Q.webOnlyFontWeightToCss(t2);
        cssStyle.toString;
        cssStyle.fontWeight = t2 == null ? "" : t2;
      }
      if (style.get$_effectiveFontFamily() != null) {
        t2 = style.get$_effectiveFontFamily();
        cssStyle.toString;
        cssStyle.fontFamily = t2 == null ? "" : t2;
      }
      return new Q.ParagraphBuilder(t1, style, []);
    },
    applyTextBackgroundToElement: function(element, style) {
      var newBackground = style._background;
      if (newBackground != null)
        $.$get$domRenderer().setElementStyle$3(element, "background-color", newBackground._paintData.color.toCssString$0());
    },
    applyTextStyleToElement: function(element, style) {
      var updateDecoration, textDecoration, decorationColor,
        cssStyle = element.style,
        color = style._color,
        t1 = style._foreground;
      if ((t1 == null ? null : t1._paintData.color) != null)
        color = t1._paintData.color;
      if (color != null) {
        t1 = color.toCssString$0();
        cssStyle.color = t1;
      }
      t1 = style._fontSize;
      if (t1 != null) {
        t1 = "" + C.JSNumber_methods.floor$0(t1) + "px";
        cssStyle.fontSize = t1;
      }
      t1 = style._fontWeight;
      if (t1 != null) {
        t1 = Q.webOnlyFontWeightToCss(t1);
        cssStyle.toString;
        cssStyle.fontWeight = t1 == null ? "" : t1;
      }
      style.get$_effectiveFontFamily();
      t1 = style.get$_effectiveFontFamily();
      cssStyle.fontFamily = t1;
      t1 = style._letterSpacing;
      if (t1 != null) {
        t1 = H.S(t1) + "px";
        cssStyle.letterSpacing = t1;
      }
      t1 = style._wordSpacing;
      if (t1 != null) {
        t1 = H.S(t1) + "px";
        cssStyle.wordSpacing = t1;
      }
      updateDecoration = style._decoration != null && true;
      if (updateDecoration) {
        t1 = style._decoration;
        if (t1 != null) {
          textDecoration = Q._textDecorationToCssString(t1, style._decorationStyle);
          if (textDecoration != null) {
            cssStyle.textDecoration = textDecoration;
            decorationColor = style._decorationColor;
            if (decorationColor != null) {
              t1 = decorationColor.toCssString$0();
              C.CssStyleDeclaration_methods._setPropertyHelper$3(cssStyle, (cssStyle && C.CssStyleDeclaration_methods)._browserPropertyName$1(cssStyle, "text-decoration-color"), t1, "");
            }
          }
        }
      }
    },
    _textDecorationToCssString: function(decoration, decorationStyle) {
      var t1;
      if (decoration != null) {
        t1 = decoration.contains$1(0, C.TextDecoration_1) ? "underline " : "";
        if (decoration.contains$1(0, C.TextDecoration_2))
          t1 += "overline ";
        if (decoration.contains$1(0, C.TextDecoration_4))
          t1 += "line-through ";
      } else
        t1 = "";
      if (decorationStyle != null)
        t1 += H.S(Q._decorationStyleToCssString(decorationStyle));
      return t1.length === 0 ? null : t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    _decorationStyleToCssString: function(decorationStyle) {
      switch (decorationStyle) {
        case C.TextDecorationStyle_3:
          return "dashed";
        case C.TextDecorationStyle_2:
          return "dotted";
        case C.TextDecorationStyle_1:
          return "double";
        case C.TextDecorationStyle_0:
          return "solid";
        case C.TextDecorationStyle_4:
          return "wavy";
        default:
          return;
      }
    },
    webOnlyFontWeightToCss: function(fontWeight) {
      if (fontWeight == null)
        return;
      switch (fontWeight.index) {
        case 0:
          return "100";
        case 1:
          return "200";
        case 2:
          return "300";
        case 3:
          return "normal";
        case 4:
          return "500";
        case 5:
          return "600";
        case 6:
          return "bold";
        case 7:
          return "800";
        case 8:
          return "900";
      }
      return "";
    },
    Locale__replaceDeprecatedLanguageSubtag: function(languageCode) {
      var _s3_ = "dtp";
      switch (languageCode) {
        case "in":
          return "id";
        case "iw":
          return "he";
        case "ji":
          return "yi";
        case "jw":
          return "jv";
        case "mo":
          return "ro";
        case "aam":
          return "aas";
        case "adp":
          return "dz";
        case "aue":
          return "ktz";
        case "ayx":
          return "nun";
        case "bgm":
          return "bcg";
        case "bjd":
          return "drl";
        case "ccq":
          return "rki";
        case "cjr":
          return "mom";
        case "cka":
          return "cmr";
        case "cmk":
          return "xch";
        case "coy":
          return "pij";
        case "cqu":
          return "quh";
        case "drh":
          return "khk";
        case "drw":
          return "prs";
        case "gav":
          return "dev";
        case "gfx":
          return "vaj";
        case "ggn":
          return "gvr";
        case "gti":
          return "nyc";
        case "guv":
          return "duz";
        case "hrr":
          return "jal";
        case "ibi":
          return "opa";
        case "ilw":
          return "gal";
        case "jeg":
          return "oyb";
        case "kgc":
          return "tdf";
        case "kgh":
          return "kml";
        case "koj":
          return "kwv";
        case "krm":
          return "bmf";
        case "ktr":
          return _s3_;
        case "kvs":
          return "gdj";
        case "kwq":
          return "yam";
        case "kxe":
          return "tvd";
        case "kzj":
          return _s3_;
        case "kzt":
          return _s3_;
        case "lii":
          return "raq";
        case "lmm":
          return "rmx";
        case "meg":
          return "cir";
        case "mst":
          return "mry";
        case "mwj":
          return "vaj";
        case "myt":
          return "mry";
        case "nad":
          return "xny";
        case "ncp":
          return "kdz";
        case "nnx":
          return "ngv";
        case "nts":
          return "pij";
        case "oun":
          return "vaj";
        case "pcr":
          return "adx";
        case "pmc":
          return "huw";
        case "pmu":
          return "phr";
        case "ppa":
          return "bfy";
        case "ppr":
          return "lcq";
        case "pry":
          return "prt";
        case "puz":
          return "pub";
        case "sca":
          return "hle";
        case "skk":
          return "oyb";
        case "tdu":
          return _s3_;
        case "thc":
          return "tpo";
        case "thx":
          return "oyb";
        case "tie":
          return "ras";
        case "tkk":
          return "twm";
        case "tlw":
          return "weo";
        case "tmp":
          return "tyj";
        case "tne":
          return "kak";
        case "tnf":
          return "prs";
        case "tsf":
          return "taj";
        case "uok":
          return "ema";
        case "xba":
          return "cax";
        case "xia":
          return "acn";
        case "xkh":
          return "waw";
        case "xsj":
          return "suj";
        case "ybd":
          return "rki";
        case "yma":
          return "lrr";
        case "ymt":
          return "mtm";
        case "yos":
          return "zom";
        case "yuu":
          return "yug";
        default:
          return languageCode;
      }
    },
    Locale__replaceDeprecatedRegionSubtag: function(regionCode) {
      switch (regionCode) {
        case "BU":
          return "MM";
        case "DD":
          return "DE";
        case "FX":
          return "FR";
        case "TP":
          return "TL";
        case "YD":
          return "YE";
        case "ZR":
          return "CD";
        default:
          return regionCode;
      }
    },
    Window__submitScene: function(canvas) {
      var t2, t3,
        t1 = $.Window__previousCanvas;
      if (canvas == t1)
        return;
      if (t1 != null)
        J.remove$0$ax(t1.rootElement);
      $.Window__previousCanvas = canvas;
      t1 = $.$get$domRenderer();
      t2 = t1.rootElement;
      t3 = canvas.rootElement;
      t1.toString;
      t2.appendChild(t3);
    },
    LocationStrategy: function LocationStrategy() {
    },
    HashLocationStrategy: function HashLocationStrategy() {
    },
    HashLocationStrategy_onPopState_closure: function HashLocationStrategy_onPopState_closure(t0, t1) {
      this.$this = t0;
      this.fn = t1;
    },
    HashLocationStrategy__waitForPopState_closure: function HashLocationStrategy__waitForPopState_closure(t0, t1) {
      this._box_0 = t0;
      this.completer = t1;
    },
    PlatformLocation: function PlatformLocation() {
    },
    BrowserPlatformLocation: function BrowserPlatformLocation() {
    },
    ClipOp: function ClipOp(t0) {
      this._ui$_name = t0;
    },
    PictureRecorder: function PictureRecorder() {
      this.cullRect = this._ui$_canvas = null;
      this._isRecording = false;
    },
    Canvas: function Canvas() {
      this._ui$_canvas = null;
    },
    Picture: function Picture(t0, t1) {
      this.recordingCanvas = t0;
      this.cullRect = t1;
    },
    PathFillType: function PathFillType(t0) {
      this._ui$_name = t0;
    },
    Path: function Path(t0, t1) {
      this.subpaths = t0;
      this.fillType = t1;
    },
    RawRecordingCanvas: function RawRecordingCanvas(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _.bounds = t0;
      _.rootElement = t1;
      _._cachedLastStyle = _._ctx = _._canvas = null;
      _._engine$_children = t2;
      _._heightInBitmapPixels = _._widthInBitmapPixels = null;
      _._saveCount = 0;
      _._devicePixelRatio = t3;
      _._prevFilter = "none";
      _._prevStrokeStyle = _._prevFillStyle = null;
      _.SaveStackTracking__saveStack = t4;
      _.SaveStackTracking__clipStack = t5;
      _.SaveStackTracking__currentTransform = t6;
    },
    Scene: function Scene(t0) {
      this.webOnlyRootElement = t0;
    },
    SceneBuilder: function SceneBuilder(t0) {
      this._surfaceStack = t0;
    },
    SceneBuilder_build_closure: function SceneBuilder_build_closure() {
    },
    PersistedSurfaceReuseStrategy: function PersistedSurfaceReuseStrategy(t0) {
      this._ui$_name = t0;
    },
    PersistedSurface: function PersistedSurface() {
    },
    PersistedLeafSurface: function PersistedLeafSurface() {
    },
    PersistedContainerSurface: function PersistedContainerSurface() {
    },
    PersistedContainerSurface_update_insertDomNodeIfMoved: function PersistedContainerSurface_update_insertDomNodeIfMoved(t0, t1, t2) {
      this._box_0 = t0;
      this.$this = t1;
      this.containerElement = t2;
    },
    PersistedScene: function PersistedScene(t0, t1, t2) {
      var _ = this;
      _._ui$_children = t0;
      _.reuseStrategy = t1;
      _.parent = _.rootElement = null;
      _.paintedBy = t2;
      _._globalClip = _._ui$_transform = _._descendants = null;
    },
    PersistedTransform: function PersistedTransform(t0, t1, t2, t3) {
      var _ = this;
      _.matrix4 = t0;
      _._ui$_children = t1;
      _.reuseStrategy = t2;
      _.parent = _.rootElement = null;
      _.paintedBy = t3;
      _._globalClip = _._ui$_transform = _._descendants = null;
    },
    PersistedOffset: function PersistedOffset(t0, t1, t2, t3, t4) {
      var _ = this;
      _.dx = t0;
      _.dy = t1;
      _._ui$_children = t2;
      _.reuseStrategy = t3;
      _.parent = _.rootElement = null;
      _.paintedBy = t4;
      _._globalClip = _._ui$_transform = _._descendants = null;
    },
    _DomClip: function _DomClip() {
    },
    PersistedClipRect: function PersistedClipRect(t0, t1, t2, t3, t4) {
      var _ = this;
      _.rect = t0;
      _._DomClip__childContainer = t1;
      _._ui$_children = t2;
      _.reuseStrategy = t3;
      _.parent = _.rootElement = null;
      _.paintedBy = t4;
      _._globalClip = _._ui$_transform = _._descendants = null;
    },
    PersistedOpacity: function PersistedOpacity(t0, t1, t2, t3, t4) {
      var _ = this;
      _.alpha = t0;
      _.offset = t1;
      _._ui$_children = t2;
      _.reuseStrategy = t3;
      _.parent = _.rootElement = null;
      _.paintedBy = t4;
      _._globalClip = _._ui$_transform = _._descendants = null;
    },
    _PersistedClipPath: function _PersistedClipPath(t0, t1, t2, t3) {
      var _ = this;
      _.clipPath = t0;
      _._clipElement = null;
      _._ui$_children = t1;
      _.reuseStrategy = t2;
      _.parent = _.rootElement = null;
      _.paintedBy = t3;
      _._globalClip = _._ui$_transform = _._descendants = null;
    },
    _NullTreeSanitizer: function _NullTreeSanitizer() {
    },
    _PaintRequest: function _PaintRequest(t0, t1) {
      this.canvasSize = t0;
      this.paintCallback = t1;
    },
    PersistedStandardPicture: function PersistedStandardPicture(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _._ui$_canvas = null;
      _.dx = t0;
      _.dy = t1;
      _.picture = t2;
      _.localPaintBounds = t3;
      _._globalCullRect = _._localCullRect = null;
      _.reuseStrategy = t4;
      _.parent = _.rootElement = null;
      _.paintedBy = t5;
      _._globalClip = _._ui$_transform = _._descendants = null;
    },
    PersistedStandardPicture__applyBitmapPaint_closure: function PersistedStandardPicture__applyBitmapPaint_closure(t0) {
      this.$this = t0;
    },
    PersistedPicture: function PersistedPicture() {
    },
    PersistedPhysicalShape: function PersistedPhysicalShape(t0, t1, t2, t3, t4, t5, t6, t7, t8) {
      var _ = this;
      _.path = t0;
      _.elevation = t1;
      _.color = t2;
      _.shadowColor = t3;
      _.clipBehavior = t4;
      _._clipElement = null;
      _._DomClip__childContainer = t5;
      _._ui$_children = t6;
      _.reuseStrategy = t7;
      _.parent = _.rootElement = null;
      _.paintedBy = t8;
      _._globalClip = _._ui$_transform = _._descendants = null;
    },
    OffsetBase: function OffsetBase() {
    },
    Offset: function Offset(t0, t1) {
      this._dx = t0;
      this._dy = t1;
    },
    Size: function Size(t0, t1) {
      this._dx = t0;
      this._dy = t1;
    },
    Rect: function Rect(t0, t1, t2, t3) {
      var _ = this;
      _.left = t0;
      _.top = t1;
      _.right = t2;
      _.bottom = t3;
    },
    Radius: function Radius(t0, t1) {
      this.x = t0;
      this.y = t1;
    },
    RRect: function RRect(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11) {
      var _ = this;
      _.left = t0;
      _.top = t1;
      _.right = t2;
      _.bottom = t3;
      _.tlRadiusX = t4;
      _.tlRadiusY = t5;
      _.trRadiusX = t6;
      _.trRadiusY = t7;
      _.brRadiusX = t8;
      _.brRadiusY = t9;
      _.blRadiusX = t10;
      _.blRadiusY = t11;
    },
    _HashEnd: function _HashEnd() {
    },
    Color: function Color(t0) {
      this._value = t0;
    },
    StrokeCap: function StrokeCap(t0) {
      this._ui$_name = t0;
    },
    PaintingStyle: function PaintingStyle(t0) {
      this._ui$_name = t0;
    },
    BlendMode: function BlendMode(t0) {
      this._ui$_name = t0;
    },
    Clip: function Clip(t0) {
      this._ui$_name = t0;
    },
    PaintData: function PaintData() {
      var _ = this;
      _.strokeJoin = _.strokeCap = _.strokeWidth = _.style = _.blendMode = null;
      _.isAntiAlias = true;
      _.colorFilter = _.filterQuality = _.maskFilter = _.shader = _.color = null;
    },
    Paint: function Paint(t0) {
      this._paintData = t0;
      this._frozen = false;
    },
    Shader: function Shader() {
    },
    Gradient0: function Gradient0() {
    },
    _GradientLinear: function _GradientLinear(t0, t1, t2, t3) {
      var _ = this;
      _.from = t0;
      _.to = t1;
      _.colors = t2;
      _.colorStops = t3;
    },
    BlurStyle: function BlurStyle(t0) {
      this._ui$_name = t0;
    },
    MaskFilter: function MaskFilter(t0, t1) {
      this._ui$_style = t0;
      this._sigma = t1;
    },
    Shadow: function Shadow() {
    },
    PointerChange: function PointerChange(t0) {
      this._ui$_name = t0;
    },
    PointerDeviceKind: function PointerDeviceKind(t0) {
      this._ui$_name = t0;
    },
    PointerSignalKind: function PointerSignalKind(t0) {
      this._ui$_name = t0;
    },
    PointerData: function PointerData(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13) {
      var _ = this;
      _.timeStamp = t0;
      _.change = t1;
      _.kind = t2;
      _.signalKind = t3;
      _.device = t4;
      _.physicalX = t5;
      _.physicalY = t6;
      _.buttons = t7;
      _.pressure = t8;
      _.pressureMin = t9;
      _.pressureMax = t10;
      _.tilt = t11;
      _.scrollDeltaX = t12;
      _.scrollDeltaY = t13;
    },
    PointerDataPacket: function PointerDataPacket(t0) {
      this.data = t0;
    },
    SemanticsAction: function SemanticsAction(t0) {
      this.index = t0;
    },
    SemanticsFlag: function SemanticsFlag(t0) {
      this.index = t0;
    },
    SemanticsUpdateBuilder: function SemanticsUpdateBuilder(t0) {
      this._nodeUpdates = t0;
    },
    FontWeight: function FontWeight(t0) {
      this.index = t0;
    },
    TextAlign: function TextAlign(t0) {
      this._ui$_name = t0;
    },
    TextBaseline: function TextBaseline(t0) {
      this._ui$_name = t0;
    },
    TextDecoration: function TextDecoration(t0) {
      this._mask = t0;
    },
    TextDecorationStyle: function TextDecorationStyle(t0) {
      this._ui$_name = t0;
    },
    TextStyle: function TextStyle(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17) {
      var _ = this;
      _._color = t0;
      _._decoration = t1;
      _._decorationColor = t2;
      _._decorationStyle = t3;
      _._fontWeight = t4;
      _._fontStyle = t5;
      _._textBaseline = t6;
      _._webOnlyIsFontFamilyProvided = t7;
      _._fontFamily = t8;
      _._fontFamilyFallback = t9;
      _._fontSize = t10;
      _._letterSpacing = t11;
      _._wordSpacing = t12;
      _._height = t13;
      _._locale = t14;
      _._background = t15;
      _._foreground = t16;
      _._shadows = t17;
    },
    ParagraphStyle: function ParagraphStyle(t0, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10) {
      var _ = this;
      _._textAlign = t0;
      _._textDirection = t1;
      _._fontWeight = t2;
      _._fontStyle = t3;
      _._maxLines = t4;
      _._fontFamily = t5;
      _._fontSize = t6;
      _._height = t7;
      _._strutStyle = t8;
      _._ellipsis = t9;
      _._locale = t10;
    },
    TextDirection: function TextDirection(t0) {
      this._ui$_name = t0;
    },
    TextBox: function TextBox(t0, t1, t2, t3, t4) {
      var _ = this;
      _.left = t0;
      _.top = t1;
      _.right = t2;
      _.bottom = t3;
      _.direction = t4;
    },
    TextAffinity: function TextAffinity(t0) {
      this._ui$_name = t0;
    },
    TextPosition: function TextPosition(t0, t1) {
      this.offset = t0;
      this.affinity = t1;
    },
    ParagraphConstraints: function ParagraphConstraints(t0) {
      this.width = t0;
    },
    Paragraph: function Paragraph(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _._paragraphElement = t0;
      _._paragraphGeometricStyle = t1;
      _._plainText = t2;
      _._paint = t3;
      _._textAlign = t4;
      _._textDirection = t5;
      _._background = t6;
      _._ideographicBaseline = _._alphabeticBaseline = _._maxIntrinsicWidth = _._minIntrinsicWidth = _._lineHeight = _._height = _._width = 0;
      _._didExceedMaxLines = false;
      _._lastUsedConstraints = null;
      _.webOnlyAlignOffset = 0;
      _._webOnlyIsLaidOut = _._webOnlyIsSingleLine = false;
    },
    Paragraph_getPositionForOffset__measureSingleLineWidth: function Paragraph_getPositionForOffset__measureSingleLineWidth(t0, t1) {
      this.$this = t0;
      this.instance = t1;
    },
    ParagraphBuilder: function ParagraphBuilder(t0, t1, t2) {
      this._paragraphElement = t0;
      this._paragraphStyle = t1;
      this._ops = t2;
    },
    ParagraphBuilder__buildRichText_currentElement: function ParagraphBuilder__buildRichText_currentElement(t0, t1) {
      this.$this = t0;
      this.elementStack = t1;
    },
    TileMode: function TileMode(t0) {
      this._ui$_name = t0;
    },
    AppLifecycleState: function AppLifecycleState(t0) {
      this._ui$_name = t0;
    },
    WindowPadding: function WindowPadding(t0, t1, t2, t3) {
      var _ = this;
      _.left = t0;
      _.top = t1;
      _.right = t2;
      _.bottom = t3;
    },
    Locale: function Locale(t0, t1) {
      this._languageCode = t0;
      this._countryCode = t1;
    },
    Window: function Window(t0, t1, t2, t3) {
      var _ = this;
      _._browserHistory = t0;
      _.devicePixelRatio = 1;
      _._physicalSize = t1;
      _._lastKnownWindowInnerHeight = _._lastKnownWindowInnerWidth = -1;
      _._onPlatformMessage = _._onSemanticsAction = _._onSemanticsEnabledChanged = _._onPointerDataPacket = _._onDrawFrame = _._onBeginFrame = _.webOnlyScheduleFrameCallback = _._onMetricsChanged = null;
      _._accessibilityFeatures = t2;
      _._rasterizer = t3;
    },
    Window__replyToPlatformMessage_closure: function Window__replyToPlatformMessage_closure(t0, t1) {
      this.callback = t0;
      this.data = t1;
    },
    Window_sendPlatformMessage_closure: function Window_sendPlatformMessage_closure(t0, t1) {
      this.$this = t0;
      this.callback = t1;
    },
    Window_sendPlatformMessage_closure0: function Window_sendPlatformMessage_closure0(t0, t1) {
      this.$this = t0;
      this.callback = t1;
    },
    Window_sendPlatformMessage_closure1: function Window_sendPlatformMessage_closure1(t0, t1, t2) {
      this.$this = t0;
      this.callback = t1;
      this.codec = t2;
    },
    AccessibilityFeatures: function AccessibilityFeatures(t0) {
      this._ui$_index = t0;
    },
    Brightness: function Brightness(t0) {
      this._ui$_name = t0;
    },
    _PersistedClipRect_PersistedContainerSurface__DomClip: function _PersistedClipRect_PersistedContainerSurface__DomClip() {
    },
    _PersistedPhysicalShape_PersistedContainerSurface__DomClip: function _PersistedPhysicalShape_PersistedContainerSurface__DomClip() {
    }
  };
  var holders = [C, H, J, P, W, Y, N, E, F, X, G, S, Z, R, L, D, K, U, B, T, O, V, M, A, Q];
  hunkHelpers.setFunctionNamesIfNecessary(holders);
  var $ = {};
  H.JS_CONST.prototype = {};
  J.Interceptor.prototype = {
    $eq: function(receiver, other) {
      return receiver === other;
    },
    get$hashCode: function(receiver) {
      return H.Primitives_objectHashCode(receiver);
    },
    toString$0: function(receiver) {
      return "Instance of '" + H.Primitives_objectTypeName(receiver) + "'";
    },
    noSuchMethod$1: function(receiver, invocation) {
      H.interceptedTypeCheck(invocation, "$isInvocation");
      throw H.wrapException(P.NoSuchMethodError$(receiver, invocation.get$memberName(), invocation.get$positionalArguments(), invocation.get$namedArguments()));
    },
    get$runtimeType: function(receiver) {
      return new H.TypeImpl(H.getRti(receiver));
    }
  };
  J.JSBool.prototype = {
    toString$0: function(receiver) {
      return String(receiver);
    },
    get$hashCode: function(receiver) {
      return receiver ? 519018 : 218159;
    },
    get$runtimeType: function(receiver) {
      return C.Type_bool_lhE;
    },
    $isbool: 1
  };
  J.JSNull.prototype = {
    $eq: function(receiver, other) {
      return null == other;
    },
    toString$0: function(receiver) {
      return "null";
    },
    get$hashCode: function(receiver) {
      return 0;
    },
    get$runtimeType: function(receiver) {
      return C.Type_Null_Yyn;
    },
    noSuchMethod$1: function(receiver, invocation) {
      return this.super$Interceptor$noSuchMethod(receiver, H.interceptedTypeCheck(invocation, "$isInvocation"));
    },
    $isNull: 1
  };
  J.JSObject.prototype = {};
  J.JavaScriptObject.prototype = {
    get$hashCode: function(receiver) {
      return 0;
    },
    get$runtimeType: function(receiver) {
      return C.Type_JSObject_8k0;
    },
    toString$0: function(receiver) {
      return String(receiver);
    }
  };
  J.PlainJavaScriptObject.prototype = {};
  J.UnknownJavaScriptObject.prototype = {};
  J.JavaScriptFunction.prototype = {
    toString$0: function(receiver) {
      var dartClosure = receiver[$.$get$DART_CLOSURE_PROPERTY_NAME()];
      if (dartClosure == null)
        return this.super$JavaScriptObject$toString(receiver);
      return "JavaScript function for " + H.S(J.toString$0$(dartClosure));
    },
    $signature: function() {
      return {func: 1, opt: [,,,,,,,,,,,,,,,,]};
    },
    $isFunction: 1
  };
  J.JSArray.prototype = {
    cast$1$0: function(receiver, $R) {
      return new H.CastList(receiver, [H.getTypeArgumentByIndex(receiver, 0), $R]);
    },
    add$1: function(receiver, value) {
      H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(receiver, 0));
      if (!!receiver.fixed$length)
        H.throwExpression(P.UnsupportedError$("add"));
      receiver.push(value);
    },
    removeAt$1: function(receiver, index) {
      var t1;
      if (!!receiver.fixed$length)
        H.throwExpression(P.UnsupportedError$("removeAt"));
      if (typeof index !== "number" || Math.floor(index) !== index)
        throw H.wrapException(H.argumentErrorValue(index));
      t1 = receiver.length;
      if (index >= t1)
        throw H.wrapException(P.RangeError$value(index, null));
      return receiver.splice(index, 1)[0];
    },
    insert$2: function(receiver, index, value) {
      H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(receiver, 0));
      if (!!receiver.fixed$length)
        H.throwExpression(P.UnsupportedError$("insert"));
      if (typeof index !== "number" || Math.floor(index) !== index)
        throw H.wrapException(H.argumentErrorValue(index));
      if (index < 0 || index > receiver.length)
        throw H.wrapException(P.RangeError$value(index, null));
      receiver.splice(index, 0, value);
    },
    insertAll$2: function(receiver, index, iterable) {
      var t1, insertionLength, end;
      H.assertSubtype(iterable, "$isIterable", [H.getTypeArgumentByIndex(receiver, 0)], "$asIterable");
      if (!!receiver.fixed$length)
        H.throwExpression(P.UnsupportedError$("insertAll"));
      P.RangeError_checkValueInInterval(index, 0, receiver.length, "index");
      t1 = J.getInterceptor$(iterable);
      if (!t1.$isEfficientLengthIterable)
        iterable = t1.toList$0(iterable);
      insertionLength = J.get$length$asx(iterable);
      t1 = receiver.length;
      if (typeof insertionLength !== "number")
        return H.iae(insertionLength);
      this.set$length(receiver, t1 + insertionLength);
      end = index + insertionLength;
      this.setRange$4(receiver, end, receiver.length, receiver, index);
      this.setRange$3(receiver, index, end, iterable);
    },
    remove$1: function(receiver, element) {
      var i;
      if (!!receiver.fixed$length)
        H.throwExpression(P.UnsupportedError$("remove"));
      for (i = 0; i < receiver.length; ++i)
        if (J.$eq$(receiver[i], element)) {
          receiver.splice(i, 1);
          return true;
        }
      return false;
    },
    expand$1$1: function(receiver, f, $T) {
      var t1 = H.getTypeArgumentByIndex(receiver, 0);
      return new H.ExpandIterable(receiver, H.functionTypeCheck(f, {func: 1, ret: [P.Iterable, $T], args: [t1]}), [t1, $T]);
    },
    expand$1: function($receiver, f) {
      return this.expand$1$1($receiver, f, null);
    },
    addAll$1: function(receiver, collection) {
      var t1;
      H.assertSubtype(collection, "$isIterable", [H.getTypeArgumentByIndex(receiver, 0)], "$asIterable");
      if (!!receiver.fixed$length)
        H.throwExpression(P.UnsupportedError$("addAll"));
      for (t1 = J.get$iterator$ax(collection); t1.moveNext$0();)
        receiver.push(t1.get$current(t1));
    },
    forEach$1: function(receiver, f) {
      var end, i;
      H.functionTypeCheck(f, {func: 1, ret: -1, args: [H.getTypeArgumentByIndex(receiver, 0)]});
      end = receiver.length;
      for (i = 0; i < end; ++i) {
        f.call$1(receiver[i]);
        if (receiver.length !== end)
          throw H.wrapException(P.ConcurrentModificationError$(receiver));
      }
    },
    join$1: function(receiver, separator) {
      var i,
        list = new Array(receiver.length);
      list.fixed$length = Array;
      for (i = 0; i < receiver.length; ++i)
        this.$indexSet(list, i, H.S(receiver[i]));
      return list.join(separator);
    },
    skip$1: function(receiver, n) {
      return H.SubListIterable$(receiver, n, null, H.getTypeArgumentByIndex(receiver, 0));
    },
    fold$1$2: function(receiver, initialValue, combine, $T) {
      var $length, value, i;
      H.assertSubtypeOfRuntimeType(initialValue, $T);
      H.functionTypeCheck(combine, {func: 1, ret: $T, args: [$T, H.getTypeArgumentByIndex(receiver, 0)]});
      $length = receiver.length;
      for (value = initialValue, i = 0; i < $length; ++i) {
        value = combine.call$2(value, receiver[i]);
        if (receiver.length !== $length)
          throw H.wrapException(P.ConcurrentModificationError$(receiver));
      }
      return value;
    },
    lastWhere$2$orElse: function(receiver, test, orElse) {
      var $length, i, element,
        t1 = H.getTypeArgumentByIndex(receiver, 0);
      H.functionTypeCheck(test, {func: 1, ret: P.bool, args: [t1]});
      H.functionTypeCheck(orElse, {func: 1, ret: t1});
      $length = receiver.length;
      for (i = $length - 1; i >= 0; --i) {
        element = receiver[i];
        if (H.boolConversionCheck(test.call$1(element)))
          return element;
        if ($length !== receiver.length)
          throw H.wrapException(P.ConcurrentModificationError$(receiver));
      }
      if (orElse != null)
        return orElse.call$0();
      throw H.wrapException(H.IterableElementError_noElement());
    },
    elementAt$1: function(receiver, index) {
      return this.$index(receiver, index);
    },
    sublist$2: function(receiver, start, end) {
      if (start < 0 || start > receiver.length)
        throw H.wrapException(P.RangeError$range(start, 0, receiver.length, "start", null));
      if (end == null)
        end = receiver.length;
      else if (end < start || end > receiver.length)
        throw H.wrapException(P.RangeError$range(end, start, receiver.length, "end", null));
      if (start === end)
        return H.setRuntimeTypeInfo([], [H.getTypeArgumentByIndex(receiver, 0)]);
      return H.setRuntimeTypeInfo(receiver.slice(start, end), [H.getTypeArgumentByIndex(receiver, 0)]);
    },
    sublist$1: function($receiver, start) {
      return this.sublist$2($receiver, start, null);
    },
    get$first: function(receiver) {
      if (receiver.length > 0)
        return receiver[0];
      throw H.wrapException(H.IterableElementError_noElement());
    },
    get$last: function(receiver) {
      var t1 = receiver.length;
      if (t1 > 0)
        return receiver[t1 - 1];
      throw H.wrapException(H.IterableElementError_noElement());
    },
    get$single: function(receiver) {
      var t1 = receiver.length;
      if (t1 === 1) {
        if (0 >= t1)
          return H.ioore(receiver, 0);
        return receiver[0];
      }
      if (t1 === 0)
        throw H.wrapException(H.IterableElementError_noElement());
      throw H.wrapException(H.IterableElementError_tooMany());
    },
    removeRange$2: function(receiver, start, end) {
      if (!!receiver.fixed$length)
        H.throwExpression(P.UnsupportedError$("removeRange"));
      P.RangeError_checkValidRange(start, end, receiver.length);
      receiver.splice(start, end - start);
    },
    setRange$4: function(receiver, start, end, iterable, skipCount) {
      var $length, t2, otherStart, otherList, i,
        t1 = H.getTypeArgumentByIndex(receiver, 0);
      H.assertSubtype(iterable, "$isIterable", [t1], "$asIterable");
      if (!!receiver.immutable$list)
        H.throwExpression(P.UnsupportedError$("setRange"));
      P.RangeError_checkValidRange(start, end, receiver.length);
      if (typeof end !== "number")
        return end.$sub();
      if (typeof start !== "number")
        return H.iae(start);
      $length = end - start;
      if ($length === 0)
        return;
      P.RangeError_checkNotNegative(skipCount, "skipCount");
      t2 = J.getInterceptor$(iterable);
      if (!!t2.$isList) {
        H.assertSubtype(iterable, "$isList", [t1], "$asList");
        otherStart = skipCount;
        otherList = iterable;
      } else {
        otherList = t2.skip$1(iterable, skipCount).toList$1$growable(0, false);
        otherStart = 0;
      }
      t1 = J.getInterceptor$asx(otherList);
      t2 = t1.get$length(otherList);
      if (typeof t2 !== "number")
        return H.iae(t2);
      if (otherStart + $length > t2)
        throw H.wrapException(H.IterableElementError_tooFew());
      if (otherStart < start)
        for (i = $length - 1; i >= 0; --i)
          receiver[start + i] = t1.$index(otherList, otherStart + i);
      else
        for (i = 0; i < $length; ++i)
          receiver[start + i] = t1.$index(otherList, otherStart + i);
    },
    setRange$3: function($receiver, start, end, iterable) {
      return this.setRange$4($receiver, start, end, iterable, 0);
    },
    any$1: function(receiver, test) {
      var end, i;
      H.functionTypeCheck(test, {func: 1, ret: P.bool, args: [H.getTypeArgumentByIndex(receiver, 0)]});
      end = receiver.length;
      for (i = 0; i < end; ++i) {
        if (H.boolConversionCheck(test.call$1(receiver[i])))
          return true;
        if (receiver.length !== end)
          throw H.wrapException(P.ConcurrentModificationError$(receiver));
      }
      return false;
    },
    sort$1: function(receiver, compare) {
      var t1 = H.getTypeArgumentByIndex(receiver, 0);
      H.functionTypeCheck(compare, {func: 1, ret: P.int, args: [t1, t1]});
      if (!!receiver.immutable$list)
        H.throwExpression(P.UnsupportedError$("sort"));
      H.Sort_sort(receiver, compare == null ? J._interceptors_JSArray__compareAny$closure() : compare, t1);
    },
    sort$0: function($receiver) {
      return this.sort$1($receiver, null);
    },
    indexOf$1: function(receiver, element) {
      var i;
      if (0 >= receiver.length)
        return -1;
      for (i = 0; i < receiver.length; ++i)
        if (J.$eq$(receiver[i], element))
          return i;
      return -1;
    },
    contains$1: function(receiver, other) {
      var i;
      for (i = 0; i < receiver.length; ++i)
        if (J.$eq$(receiver[i], other))
          return true;
      return false;
    },
    get$isEmpty: function(receiver) {
      return receiver.length === 0;
    },
    get$isNotEmpty: function(receiver) {
      return receiver.length !== 0;
    },
    toString$0: function(receiver) {
      return P.IterableBase_iterableToFullString(receiver, "[", "]");
    },
    toList$1$growable: function(receiver, growable) {
      var t1 = H.setRuntimeTypeInfo(receiver.slice(0), [H.getTypeArgumentByIndex(receiver, 0)]);
      return t1;
    },
    toList$0: function($receiver) {
      return this.toList$1$growable($receiver, true);
    },
    get$iterator: function(receiver) {
      return new J.ArrayIterator(receiver, receiver.length, [H.getTypeArgumentByIndex(receiver, 0)]);
    },
    get$hashCode: function(receiver) {
      return H.Primitives_objectHashCode(receiver);
    },
    get$length: function(receiver) {
      return receiver.length;
    },
    set$length: function(receiver, newLength) {
      var _s9_ = "newLength";
      if (!!receiver.fixed$length)
        H.throwExpression(P.UnsupportedError$("set length"));
      if (typeof newLength !== "number" || Math.floor(newLength) !== newLength)
        throw H.wrapException(P.ArgumentError$value(newLength, _s9_, null));
      if (newLength < 0)
        throw H.wrapException(P.RangeError$range(newLength, 0, null, _s9_, null));
      receiver.length = newLength;
    },
    $index: function(receiver, index) {
      H.intTypeCheck(index);
      if (typeof index !== "number" || Math.floor(index) !== index)
        throw H.wrapException(H.diagnoseIndexError(receiver, index));
      if (index >= receiver.length || index < 0)
        throw H.wrapException(H.diagnoseIndexError(receiver, index));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      H.intTypeCheck(index);
      H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(receiver, 0));
      if (!!receiver.immutable$list)
        H.throwExpression(P.UnsupportedError$("indexed set"));
      if (typeof index !== "number" || Math.floor(index) !== index)
        throw H.wrapException(H.diagnoseIndexError(receiver, index));
      if (index >= receiver.length || index < 0)
        throw H.wrapException(H.diagnoseIndexError(receiver, index));
      receiver[index] = value;
    },
    $add: function(receiver, other) {
      var t2, t3, totalLength,
        t1 = [H.getTypeArgumentByIndex(receiver, 0)];
      H.assertSubtype(other, "$isList", t1, "$asList");
      t2 = receiver.length;
      t3 = J.get$length$asx(other);
      if (typeof t3 !== "number")
        return H.iae(t3);
      totalLength = t2 + t3;
      t1 = H.setRuntimeTypeInfo([], t1);
      this.set$length(t1, totalLength);
      this.setRange$3(t1, 0, receiver.length, receiver);
      this.setRange$3(t1, receiver.length, totalLength, other);
      return t1;
    },
    $isEfficientLengthIterable: 1,
    $isIterable: 1,
    $isList: 1
  };
  J.JSUnmodifiableArray.prototype = {};
  J.ArrayIterator.prototype = {
    get$current: function(_) {
      return this.__interceptors$_current;
    },
    moveNext$0: function() {
      var t2, _this = this,
        t1 = _this.__interceptors$_iterable,
        $length = t1.length;
      if (_this.__interceptors$_length !== $length)
        throw H.wrapException(H.throwConcurrentModificationError(t1));
      t2 = _this.__interceptors$_index;
      if (t2 >= $length) {
        _this.set$__interceptors$_current(null);
        return false;
      }
      _this.set$__interceptors$_current(t1[t2]);
      ++_this.__interceptors$_index;
      return true;
    },
    set$__interceptors$_current: function(_current) {
      this.__interceptors$_current = H.assertSubtypeOfRuntimeType(_current, H.getTypeArgumentByIndex(this, 0));
    },
    $isIterator: 1
  };
  J.JSNumber.prototype = {
    compareTo$1: function(receiver, b) {
      var bIsNegative;
      H.numTypeCheck(b);
      if (typeof b !== "number")
        throw H.wrapException(H.argumentErrorValue(b));
      if (receiver < b)
        return -1;
      else if (receiver > b)
        return 1;
      else if (receiver === b) {
        if (receiver === 0) {
          bIsNegative = this.get$isNegative(b);
          if (this.get$isNegative(receiver) === bIsNegative)
            return 0;
          if (this.get$isNegative(receiver))
            return -1;
          return 1;
        }
        return 0;
      } else if (isNaN(receiver)) {
        if (isNaN(b))
          return 0;
        return 1;
      } else
        return -1;
    },
    get$isNegative: function(receiver) {
      return receiver === 0 ? 1 / receiver < 0 : receiver < 0;
    },
    get$sign: function(receiver) {
      var t1;
      if (receiver > 0)
        t1 = 1;
      else
        t1 = receiver < 0 ? -1 : receiver;
      return t1;
    },
    toInt$0: function(receiver) {
      var t1;
      if (receiver >= -2147483648 && receiver <= 2147483647)
        return receiver | 0;
      if (isFinite(receiver)) {
        t1 = receiver < 0 ? Math.ceil(receiver) : Math.floor(receiver);
        return t1 + 0;
      }
      throw H.wrapException(P.UnsupportedError$("" + receiver + ".toInt()"));
    },
    ceil$0: function(receiver) {
      var truncated, d;
      if (receiver >= 0) {
        if (receiver <= 2147483647) {
          truncated = receiver | 0;
          return receiver === truncated ? truncated : truncated + 1;
        }
      } else if (receiver >= -2147483648)
        return receiver | 0;
      d = Math.ceil(receiver);
      if (isFinite(d))
        return d;
      throw H.wrapException(P.UnsupportedError$("" + receiver + ".ceil()"));
    },
    floor$0: function(receiver) {
      var truncated, d;
      if (receiver >= 0) {
        if (receiver <= 2147483647)
          return receiver | 0;
      } else if (receiver >= -2147483648) {
        truncated = receiver | 0;
        return receiver === truncated ? truncated : truncated - 1;
      }
      d = Math.floor(receiver);
      if (isFinite(d))
        return d;
      throw H.wrapException(P.UnsupportedError$("" + receiver + ".floor()"));
    },
    round$0: function(receiver) {
      if (receiver > 0) {
        if (receiver !== 1 / 0)
          return Math.round(receiver);
      } else if (receiver > -1 / 0)
        return 0 - Math.round(0 - receiver);
      throw H.wrapException(P.UnsupportedError$("" + receiver + ".round()"));
    },
    roundToDouble$0: function(receiver) {
      if (receiver < 0)
        return -Math.round(-receiver);
      else
        return Math.round(receiver);
    },
    clamp$2: function(receiver, lowerLimit, upperLimit) {
      if (typeof lowerLimit !== "number")
        throw H.wrapException(H.argumentErrorValue(lowerLimit));
      if (typeof upperLimit !== "number")
        throw H.wrapException(H.argumentErrorValue(upperLimit));
      if (this.compareTo$1(lowerLimit, upperLimit) > 0)
        throw H.wrapException(H.argumentErrorValue(lowerLimit));
      if (this.compareTo$1(receiver, lowerLimit) < 0)
        return lowerLimit;
      if (this.compareTo$1(receiver, upperLimit) > 0)
        return upperLimit;
      return receiver;
    },
    toStringAsFixed$1: function(receiver, fractionDigits) {
      var result;
      if (fractionDigits > 20)
        throw H.wrapException(P.RangeError$range(fractionDigits, 0, 20, "fractionDigits", null));
      result = receiver.toFixed(fractionDigits);
      if (receiver === 0 && this.get$isNegative(receiver))
        return "-" + result;
      return result;
    },
    toRadixString$1: function(receiver, radix) {
      var result, match, t1, exponent;
      if (radix < 2 || radix > 36)
        throw H.wrapException(P.RangeError$range(radix, 2, 36, "radix", null));
      result = receiver.toString(radix);
      if (C.JSString_methods.codeUnitAt$1(result, result.length - 1) !== 41)
        return result;
      match = /^([\da-z]+)(?:\.([\da-z]+))?\(e\+(\d+)\)$/.exec(result);
      if (match == null)
        H.throwExpression(P.UnsupportedError$("Unexpected toString result: " + result));
      t1 = match.length;
      if (1 >= t1)
        return H.ioore(match, 1);
      result = match[1];
      if (3 >= t1)
        return H.ioore(match, 3);
      exponent = +match[3];
      t1 = match[2];
      if (t1 != null) {
        result += t1;
        exponent -= t1.length;
      }
      return result + C.JSString_methods.$mul("0", exponent);
    },
    toString$0: function(receiver) {
      if (receiver === 0 && 1 / receiver < 0)
        return "-0.0";
      else
        return "" + receiver;
    },
    get$hashCode: function(receiver) {
      var absolute, floorLog2, factor, scaled,
        intValue = receiver | 0;
      if (receiver === intValue)
        return 536870911 & intValue;
      absolute = Math.abs(receiver);
      floorLog2 = Math.log(absolute) / 0.6931471805599453 | 0;
      factor = Math.pow(2, floorLog2);
      scaled = absolute < 1 ? absolute / factor : factor / absolute;
      return 536870911 & ((scaled * 9007199254740992 | 0) + (scaled * 3542243181176521 | 0)) * 599197 + floorLog2 * 1259;
    },
    $add: function(receiver, other) {
      H.numTypeCheck(other);
      if (typeof other !== "number")
        throw H.wrapException(H.argumentErrorValue(other));
      return receiver + other;
    },
    $sub: function(receiver, other) {
      H.numTypeCheck(other);
      if (typeof other !== "number")
        throw H.wrapException(H.argumentErrorValue(other));
      return receiver - other;
    },
    $mul: function(receiver, other) {
      if (typeof other !== "number")
        throw H.wrapException(H.argumentErrorValue(other));
      return receiver * other;
    },
    $mod: function(receiver, other) {
      var result = receiver % other;
      if (result === 0)
        return 0;
      if (result > 0)
        return result;
      if (other < 0)
        return result - other;
      else
        return result + other;
    },
    $tdiv: function(receiver, other) {
      if ((receiver | 0) === receiver)
        if (other >= 1 || other < -1)
          return receiver / other | 0;
      return this._tdivSlow$1(receiver, other);
    },
    _tdivFast$1: function(receiver, other) {
      return (receiver | 0) === receiver ? receiver / other | 0 : this._tdivSlow$1(receiver, other);
    },
    _tdivSlow$1: function(receiver, other) {
      var quotient = receiver / other;
      if (quotient >= -2147483648 && quotient <= 2147483647)
        return quotient | 0;
      if (quotient > 0) {
        if (quotient !== 1 / 0)
          return Math.floor(quotient);
      } else if (quotient > -1 / 0)
        return Math.ceil(quotient);
      throw H.wrapException(P.UnsupportedError$("Result of truncating division is " + H.S(quotient) + ": " + H.S(receiver) + " ~/ " + H.S(other)));
    },
    _shrOtherPositive$1: function(receiver, other) {
      var t1;
      if (receiver > 0)
        t1 = this._shrBothPositive$1(receiver, other);
      else {
        t1 = other > 31 ? 31 : other;
        t1 = receiver >> t1 >>> 0;
      }
      return t1;
    },
    _shrReceiverPositive$1: function(receiver, other) {
      if (other < 0)
        throw H.wrapException(H.argumentErrorValue(other));
      return this._shrBothPositive$1(receiver, other);
    },
    _shrBothPositive$1: function(receiver, other) {
      return other > 31 ? 0 : receiver >>> other;
    },
    $gt: function(receiver, other) {
      H.numTypeCheck(other);
      if (typeof other !== "number")
        throw H.wrapException(H.argumentErrorValue(other));
      return receiver > other;
    },
    $le: function(receiver, other) {
      H.numTypeCheck(other);
      if (typeof other !== "number")
        throw H.wrapException(H.argumentErrorValue(other));
      return receiver <= other;
    },
    $ge: function(receiver, other) {
      if (typeof other !== "number")
        throw H.wrapException(H.argumentErrorValue(other));
      return receiver >= other;
    },
    get$runtimeType: function(receiver) {
      return C.Type_num_cv7;
    },
    $isComparable: 1,
    $asComparable: function() {
      return [P.num];
    },
    $isdouble: 1,
    $isnum: 1
  };
  J.JSInt.prototype = {
    get$sign: function(receiver) {
      var t1;
      if (receiver > 0)
        t1 = 1;
      else
        t1 = receiver < 0 ? -1 : receiver;
      return t1;
    },
    get$runtimeType: function(receiver) {
      return C.Type_int_tHn;
    },
    $isint: 1
  };
  J.JSDouble.prototype = {
    get$runtimeType: function(receiver) {
      return C.Type_double_K1J;
    }
  };
  J.JSString.prototype = {
    codeUnitAt$1: function(receiver, index) {
      if (typeof index !== "number" || Math.floor(index) !== index)
        throw H.wrapException(H.diagnoseIndexError(receiver, index));
      if (index < 0)
        throw H.wrapException(H.diagnoseIndexError(receiver, index));
      if (index >= receiver.length)
        H.throwExpression(H.diagnoseIndexError(receiver, index));
      return receiver.charCodeAt(index);
    },
    _codeUnitAt$1: function(receiver, index) {
      if (index >= receiver.length)
        throw H.wrapException(H.diagnoseIndexError(receiver, index));
      return receiver.charCodeAt(index);
    },
    matchAsPrefix$2: function(receiver, string, start) {
      var t1, i;
      if (start < 0 || start > string.length)
        throw H.wrapException(P.RangeError$range(start, 0, string.length, null, null));
      t1 = receiver.length;
      if (start + t1 > string.length)
        return;
      for (i = 0; i < t1; ++i)
        if (this.codeUnitAt$1(string, start + i) !== this._codeUnitAt$1(receiver, i))
          return;
      return new H.StringMatch(start, receiver);
    },
    $add: function(receiver, other) {
      H.stringTypeCheck(other);
      if (typeof other !== "string")
        throw H.wrapException(P.ArgumentError$value(other, null, null));
      return receiver + other;
    },
    endsWith$1: function(receiver, other) {
      var otherLength = other.length,
        t1 = receiver.length;
      if (otherLength > t1)
        return false;
      return other === this.substring$1(receiver, t1 - otherLength);
    },
    replaceRange$3: function(receiver, start, end, replacement) {
      var prefix, suffix;
      end = P.RangeError_checkValidRange(start, end, receiver.length);
      if (typeof end !== "number" || Math.floor(end) !== end)
        H.throwExpression(H.argumentErrorValue(end));
      prefix = receiver.substring(0, start);
      suffix = receiver.substring(end);
      return prefix + replacement + suffix;
    },
    startsWith$2: function(receiver, pattern, index) {
      var endIndex;
      if (index < 0 || index > receiver.length)
        throw H.wrapException(P.RangeError$range(index, 0, receiver.length, null, null));
      if (typeof pattern === "string") {
        endIndex = index + pattern.length;
        if (endIndex > receiver.length)
          return false;
        return pattern === receiver.substring(index, endIndex);
      }
      return J.matchAsPrefix$2$s(pattern, receiver, index) != null;
    },
    startsWith$1: function($receiver, pattern) {
      return this.startsWith$2($receiver, pattern, 0);
    },
    substring$2: function(receiver, startIndex, endIndex) {
      if (typeof startIndex !== "number" || Math.floor(startIndex) !== startIndex)
        H.throwExpression(H.argumentErrorValue(startIndex));
      if (endIndex == null)
        endIndex = receiver.length;
      if (typeof startIndex !== "number")
        return startIndex.$lt();
      if (startIndex < 0)
        throw H.wrapException(P.RangeError$value(startIndex, null));
      if (startIndex > endIndex)
        throw H.wrapException(P.RangeError$value(startIndex, null));
      if (endIndex > receiver.length)
        throw H.wrapException(P.RangeError$value(endIndex, null));
      return receiver.substring(startIndex, endIndex);
    },
    substring$1: function($receiver, startIndex) {
      return this.substring$2($receiver, startIndex, null);
    },
    toLowerCase$0: function(receiver) {
      return receiver.toLowerCase();
    },
    trim$0: function(receiver) {
      var startIndex, t1, endIndex0,
        result = receiver.trim(),
        endIndex = result.length;
      if (endIndex === 0)
        return result;
      if (this._codeUnitAt$1(result, 0) === 133) {
        startIndex = J.JSString__skipLeadingWhitespace(result, 1);
        if (startIndex === endIndex)
          return "";
      } else
        startIndex = 0;
      t1 = endIndex - 1;
      endIndex0 = this.codeUnitAt$1(result, t1) === 133 ? J.JSString__skipTrailingWhitespace(result, t1) : endIndex;
      if (startIndex === 0 && endIndex0 === endIndex)
        return result;
      return result.substring(startIndex, endIndex0);
    },
    trimLeft$0: function(receiver) {
      var result, startIndex;
      if (typeof receiver.trimLeft != "undefined") {
        result = receiver.trimLeft();
        if (result.length === 0)
          return result;
        startIndex = this._codeUnitAt$1(result, 0) === 133 ? J.JSString__skipLeadingWhitespace(result, 1) : 0;
      } else {
        startIndex = J.JSString__skipLeadingWhitespace(receiver, 0);
        result = receiver;
      }
      if (startIndex === 0)
        return result;
      if (startIndex === result.length)
        return "";
      return result.substring(startIndex);
    },
    trimRight$0: function(receiver) {
      var result, endIndex, t1;
      if (typeof receiver.trimRight != "undefined") {
        result = receiver.trimRight();
        endIndex = result.length;
        if (endIndex === 0)
          return result;
        t1 = endIndex - 1;
        if (this.codeUnitAt$1(result, t1) === 133)
          endIndex = J.JSString__skipTrailingWhitespace(result, t1);
      } else {
        endIndex = J.JSString__skipTrailingWhitespace(receiver, receiver.length);
        result = receiver;
      }
      if (endIndex === result.length)
        return result;
      if (endIndex === 0)
        return "";
      return result.substring(0, endIndex);
    },
    $mul: function(receiver, times) {
      var s, result;
      H.intTypeCheck(times);
      if (typeof times !== "number")
        return H.iae(times);
      if (0 >= times)
        return "";
      if (times === 1 || receiver.length === 0)
        return receiver;
      if (times !== times >>> 0)
        throw H.wrapException(C.C_OutOfMemoryError);
      for (s = receiver, result = ""; true;) {
        if ((times & 1) === 1)
          result = s + result;
        times = times >>> 1;
        if (times === 0)
          break;
        s += s;
      }
      return result;
    },
    padLeft$2: function(receiver, width, padding) {
      var delta = width - receiver.length;
      if (delta <= 0)
        return receiver;
      return this.$mul(padding, delta) + receiver;
    },
    indexOf$2: function(receiver, pattern, start) {
      var t1;
      if (start < 0 || start > receiver.length)
        throw H.wrapException(P.RangeError$range(start, 0, receiver.length, null, null));
      t1 = receiver.indexOf(pattern, start);
      return t1;
    },
    indexOf$1: function($receiver, pattern) {
      return this.indexOf$2($receiver, pattern, 0);
    },
    lastIndexOf$1: function(receiver, pattern) {
      var start = receiver.length,
        t1 = pattern.length;
      if (start + t1 > start)
        start -= t1;
      return receiver.lastIndexOf(pattern, start);
    },
    contains$2: function(receiver, other, startIndex) {
      if (startIndex > receiver.length)
        throw H.wrapException(P.RangeError$range(startIndex, 0, receiver.length, null, null));
      return H.stringContainsUnchecked(receiver, other, startIndex);
    },
    contains$1: function($receiver, other) {
      return this.contains$2($receiver, other, 0);
    },
    compareTo$1: function(receiver, other) {
      var t1;
      H.stringTypeCheck(other);
      if (typeof other !== "string")
        throw H.wrapException(H.argumentErrorValue(other));
      if (receiver === other)
        t1 = 0;
      else
        t1 = receiver < other ? -1 : 1;
      return t1;
    },
    toString$0: function(receiver) {
      return receiver;
    },
    get$hashCode: function(receiver) {
      var t1, hash, i;
      for (t1 = receiver.length, hash = 0, i = 0; i < t1; ++i) {
        hash = 536870911 & hash + receiver.charCodeAt(i);
        hash = 536870911 & hash + ((524287 & hash) << 10);
        hash ^= hash >> 6;
      }
      hash = 536870911 & hash + ((67108863 & hash) << 3);
      hash ^= hash >> 11;
      return 536870911 & hash + ((16383 & hash) << 15);
    },
    get$runtimeType: function(receiver) {
      return C.Type_String_k8F;
    },
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      H.intTypeCheck(index);
      if (index >= receiver.length || index < 0)
        throw H.wrapException(H.diagnoseIndexError(receiver, index));
      return receiver[index];
    },
    $isComparable: 1,
    $asComparable: function() {
      return [P.String];
    },
    $isPattern: 1,
    $isString: 1
  };
  H._CastIterableBase.prototype = {
    get$iterator: function(_) {
      return new H.CastIterator(J.get$iterator$ax(this.get$_source()), this.$ti);
    },
    get$length: function(_) {
      return J.get$length$asx(this.get$_source());
    },
    get$isEmpty: function(_) {
      return J.get$isEmpty$asx(this.get$_source());
    },
    get$isNotEmpty: function(_) {
      return J.get$isNotEmpty$asx(this.get$_source());
    },
    skip$1: function(_, count) {
      return H.CastIterable_CastIterable(J.skip$1$ax(this.get$_source(), count), H.getTypeArgumentByIndex(this, 0), H.getTypeArgumentByIndex(this, 1));
    },
    elementAt$1: function(_, index) {
      return H.subtypeOfRuntimeTypeCast(J.elementAt$1$ax(this.get$_source(), index), H.getTypeArgumentByIndex(this, 1));
    },
    get$last: function(_) {
      return H.subtypeOfRuntimeTypeCast(J.get$last$ax(this.get$_source()), H.getTypeArgumentByIndex(this, 1));
    },
    contains$1: function(_, other) {
      return J.contains$1$asx(this.get$_source(), other);
    },
    lastWhere$2$orElse: function(_, test, orElse) {
      var t2, t3, _this = this,
        t1 = H.getTypeArgumentByIndex(_this, 1);
      H.functionTypeCheck(test, {func: 1, ret: P.bool, args: [t1]});
      H.functionTypeCheck(orElse, {func: 1, ret: t1});
      t2 = _this.get$_source();
      t3 = orElse == null ? null : new H._CastIterableBase_lastWhere_closure(_this, orElse);
      return H.subtypeOfRuntimeTypeCast(J.lastWhere$2$orElse$ax(t2, new H._CastIterableBase_lastWhere_closure0(_this, test), t3), t1);
    },
    toString$0: function(_) {
      return J.toString$0$(this.get$_source());
    },
    $asIterable: function($S, $T) {
      return [$T];
    }
  };
  H._CastIterableBase_lastWhere_closure0.prototype = {
    call$1: function(element) {
      var t1 = this.$this;
      return this.test.call$1(H.subtypeOfRuntimeTypeCast(H.assertSubtypeOfRuntimeType(element, H.getTypeArgumentByIndex(t1, 0)), H.getTypeArgumentByIndex(t1, 1)));
    },
    $signature: function() {
      return {func: 1, ret: P.bool, args: [H.getTypeArgumentByIndex(this.$this, 0)]};
    }
  };
  H._CastIterableBase_lastWhere_closure.prototype = {
    call$0: function() {
      return H.subtypeOfRuntimeTypeCast(this.orElse.call$0(), H.getTypeArgumentByIndex(this.$this, 0));
    },
    $signature: function() {
      return {func: 1, ret: H.getTypeArgumentByIndex(this.$this, 0)};
    }
  };
  H.CastIterator.prototype = {
    moveNext$0: function() {
      return this._source.moveNext$0();
    },
    get$current: function(_) {
      var t1 = this._source;
      return H.subtypeOfRuntimeTypeCast(t1.get$current(t1), H.getTypeArgumentByIndex(this, 1));
    },
    $isIterator: 1,
    $asIterator: function($S, $T) {
      return [$T];
    }
  };
  H.CastIterable.prototype = {
    get$_source: function() {
      return this._source;
    }
  };
  H._EfficientLengthCastIterable.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function($S, $T) {
      return [$T];
    }
  };
  H._CastListBase.prototype = {
    $index: function(_, index) {
      return H.subtypeOfRuntimeTypeCast(J.$index$asx(this._source, H.intTypeCheck(index)), H.getTypeArgumentByIndex(this, 1));
    },
    $indexSet: function(_, index, value) {
      J.$indexSet$ax(this._source, H.intTypeCheck(index), H.subtypeOfRuntimeTypeCast(H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(this, 1)), H.getTypeArgumentByIndex(this, 0)));
    },
    set$length: function(_, $length) {
      J.set$length$asx(this._source, $length);
    },
    add$1: function(_, value) {
      J.add$1$ax(this._source, H.subtypeOfRuntimeTypeCast(H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(this, 1)), H.getTypeArgumentByIndex(this, 0)));
    },
    sort$1: function(_, compare) {
      var t1 = H.getTypeArgumentByIndex(this, 1);
      H.functionTypeCheck(compare, {func: 1, ret: P.int, args: [t1, t1]});
      t1 = compare == null ? null : new H._CastListBase_sort_closure(this, compare);
      J.sort$1$ax(this._source, t1);
    },
    removeAt$1: function(_, index) {
      return H.subtypeOfRuntimeTypeCast(J.removeAt$1$ax(this._source, index), H.getTypeArgumentByIndex(this, 1));
    },
    $isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function($S, $T) {
      return [$T];
    },
    $asListMixin: function($S, $T) {
      return [$T];
    },
    $isList: 1,
    $asList: function($S, $T) {
      return [$T];
    }
  };
  H._CastListBase_sort_closure.prototype = {
    call$2: function(v1, v2) {
      var t1 = this.$this,
        t2 = H.getTypeArgumentByIndex(t1, 0);
      H.assertSubtypeOfRuntimeType(v1, t2);
      H.assertSubtypeOfRuntimeType(v2, t2);
      t1 = H.getTypeArgumentByIndex(t1, 1);
      return this.compare.call$2(H.subtypeOfRuntimeTypeCast(v1, t1), H.subtypeOfRuntimeTypeCast(v2, t1));
    },
    $signature: function() {
      var t1 = H.getTypeArgumentByIndex(this.$this, 0);
      return {func: 1, ret: P.int, args: [t1, t1]};
    }
  };
  H.CastList.prototype = {
    get$_source: function() {
      return this._source;
    }
  };
  H.CodeUnits.prototype = {
    get$length: function(_) {
      return this._string.length;
    },
    $index: function(_, i) {
      return C.JSString_methods.codeUnitAt$1(this._string, H.intTypeCheck(i));
    },
    $asEfficientLengthIterable: function() {
      return [P.int];
    },
    $asUnmodifiableListMixin: function() {
      return [P.int];
    },
    $asListMixin: function() {
      return [P.int];
    },
    $asIterable: function() {
      return [P.int];
    },
    $asList: function() {
      return [P.int];
    }
  };
  H.EfficientLengthIterable.prototype = {};
  H.ListIterable.prototype = {
    get$iterator: function(_) {
      var _this = this;
      return new H.ListIterator(_this, _this.get$length(_this), [H.getRuntimeTypeArgument(_this, "ListIterable", 0)]);
    },
    forEach$1: function(_, action) {
      var $length, i, _this = this;
      H.functionTypeCheck(action, {func: 1, ret: -1, args: [H.getRuntimeTypeArgument(_this, "ListIterable", 0)]});
      $length = _this.get$length(_this);
      if (typeof $length !== "number")
        return H.iae($length);
      i = 0;
      for (; i < $length; ++i) {
        action.call$1(_this.elementAt$1(0, i));
        if ($length !== _this.get$length(_this))
          throw H.wrapException(P.ConcurrentModificationError$(_this));
      }
    },
    get$isEmpty: function(_) {
      return this.get$length(this) === 0;
    },
    get$last: function(_) {
      var t1, _this = this;
      if (_this.get$length(_this) === 0)
        throw H.wrapException(H.IterableElementError_noElement());
      t1 = _this.get$length(_this);
      if (typeof t1 !== "number")
        return t1.$sub();
      return _this.elementAt$1(0, t1 - 1);
    },
    contains$1: function(_, element) {
      var i, _this = this,
        $length = _this.get$length(_this);
      if (typeof $length !== "number")
        return H.iae($length);
      i = 0;
      for (; i < $length; ++i) {
        if (J.$eq$(_this.elementAt$1(0, i), element))
          return true;
        if ($length !== _this.get$length(_this))
          throw H.wrapException(P.ConcurrentModificationError$(_this));
      }
      return false;
    },
    lastWhere$2$orElse: function(_, test, orElse) {
      var $length, i, element, _this = this,
        t1 = H.getRuntimeTypeArgument(_this, "ListIterable", 0);
      H.functionTypeCheck(test, {func: 1, ret: P.bool, args: [t1]});
      H.functionTypeCheck(orElse, {func: 1, ret: t1});
      $length = _this.get$length(_this);
      if (typeof $length !== "number")
        return $length.$sub();
      i = $length - 1;
      for (; i >= 0; --i) {
        element = _this.elementAt$1(0, i);
        if (H.boolConversionCheck(test.call$1(element)))
          return element;
        if ($length !== _this.get$length(_this))
          throw H.wrapException(P.ConcurrentModificationError$(_this));
      }
      if (orElse != null)
        return orElse.call$0();
      throw H.wrapException(H.IterableElementError_noElement());
    },
    join$1: function(_, separator) {
      var first, t1, i, _this = this,
        $length = _this.get$length(_this);
      if (separator.length !== 0) {
        if ($length === 0)
          return "";
        first = H.S(_this.elementAt$1(0, 0));
        if ($length != _this.get$length(_this))
          throw H.wrapException(P.ConcurrentModificationError$(_this));
        if (typeof $length !== "number")
          return H.iae($length);
        t1 = first;
        i = 1;
        for (; i < $length; ++i) {
          t1 = t1 + separator + H.S(_this.elementAt$1(0, i));
          if ($length !== _this.get$length(_this))
            throw H.wrapException(P.ConcurrentModificationError$(_this));
        }
        return t1.charCodeAt(0) == 0 ? t1 : t1;
      } else {
        if (typeof $length !== "number")
          return H.iae($length);
        i = 0;
        t1 = "";
        for (; i < $length; ++i) {
          t1 += H.S(_this.elementAt$1(0, i));
          if ($length !== _this.get$length(_this))
            throw H.wrapException(P.ConcurrentModificationError$(_this));
        }
        return t1.charCodeAt(0) == 0 ? t1 : t1;
      }
    },
    where$1: function(_, test) {
      return this.super$Iterable$where(0, H.functionTypeCheck(test, {func: 1, ret: P.bool, args: [H.getRuntimeTypeArgument(this, "ListIterable", 0)]}));
    },
    skip$1: function(_, count) {
      return H.SubListIterable$(this, count, null, H.getRuntimeTypeArgument(this, "ListIterable", 0));
    },
    toList$1$growable: function(_, growable) {
      var result, t2, i, _this = this,
        t1 = H.getRuntimeTypeArgument(_this, "ListIterable", 0);
      if (growable) {
        result = H.setRuntimeTypeInfo([], [t1]);
        C.JSArray_methods.set$length(result, _this.get$length(_this));
      } else {
        t2 = _this.get$length(_this);
        if (typeof t2 !== "number")
          return H.iae(t2);
        t2 = new Array(t2);
        t2.fixed$length = Array;
        result = H.setRuntimeTypeInfo(t2, [t1]);
      }
      i = 0;
      while (true) {
        t1 = _this.get$length(_this);
        if (typeof t1 !== "number")
          return H.iae(t1);
        if (!(i < t1))
          break;
        C.JSArray_methods.$indexSet(result, i, _this.elementAt$1(0, i));
        ++i;
      }
      return result;
    },
    toList$0: function($receiver) {
      return this.toList$1$growable($receiver, true);
    }
  };
  H.SubListIterable.prototype = {
    get$_endIndex: function() {
      var t2,
        $length = J.get$length$asx(this._iterable),
        t1 = this._endOrLength;
      if (t1 != null) {
        if (typeof $length !== "number")
          return H.iae($length);
        t2 = t1 > $length;
      } else
        t2 = true;
      if (t2)
        return $length;
      return t1;
    },
    get$_startIndex: function() {
      var $length = J.get$length$asx(this._iterable),
        t1 = this._start;
      if (typeof $length !== "number")
        return H.iae($length);
      if (t1 > $length)
        return $length;
      return t1;
    },
    get$length: function(_) {
      var t2,
        $length = J.get$length$asx(this._iterable),
        t1 = this._start;
      if (typeof $length !== "number")
        return H.iae($length);
      if (t1 >= $length)
        return 0;
      t2 = this._endOrLength;
      if (t2 == null || t2 >= $length)
        return $length - t1;
      if (typeof t2 !== "number")
        return t2.$sub();
      return t2 - t1;
    },
    elementAt$1: function(_, index) {
      var realIndex, _this = this,
        t1 = _this.get$_startIndex();
      if (typeof t1 !== "number")
        return t1.$add();
      if (typeof index !== "number")
        return H.iae(index);
      realIndex = t1 + index;
      if (index >= 0) {
        t1 = _this.get$_endIndex();
        if (typeof t1 !== "number")
          return H.iae(t1);
        t1 = realIndex >= t1;
      } else
        t1 = true;
      if (t1)
        throw H.wrapException(P.IndexError$(index, _this, "index", null, null));
      return J.elementAt$1$ax(_this._iterable, realIndex);
    },
    skip$1: function(_, count) {
      var newStart, t1, _this = this;
      P.RangeError_checkNotNegative(count, "count");
      newStart = _this._start + count;
      t1 = _this._endOrLength;
      if (t1 != null && newStart >= t1)
        return new H.EmptyIterable(_this.$ti);
      return H.SubListIterable$(_this._iterable, newStart, t1, H.getTypeArgumentByIndex(_this, 0));
    },
    toList$1$growable: function(_, growable) {
      var t3, $length, result, t4, i, _this = this,
        start = _this._start,
        t1 = _this._iterable,
        t2 = J.getInterceptor$asx(t1),
        end = t2.get$length(t1),
        end0 = _this._endOrLength;
      if (end0 != null) {
        if (typeof end !== "number")
          return H.iae(end);
        t3 = end0 < end;
      } else
        t3 = false;
      if (t3)
        end = end0;
      if (typeof end !== "number")
        return end.$sub();
      $length = end - start;
      if ($length < 0)
        $length = 0;
      t3 = _this.$ti;
      if (growable) {
        result = H.setRuntimeTypeInfo([], t3);
        C.JSArray_methods.set$length(result, $length);
      } else {
        t4 = new Array($length);
        t4.fixed$length = Array;
        result = H.setRuntimeTypeInfo(t4, t3);
      }
      for (i = 0; i < $length; ++i) {
        C.JSArray_methods.$indexSet(result, i, t2.elementAt$1(t1, start + i));
        t3 = t2.get$length(t1);
        if (typeof t3 !== "number")
          return t3.$lt();
        if (t3 < end)
          throw H.wrapException(P.ConcurrentModificationError$(_this));
      }
      return result;
    },
    toList$0: function($receiver) {
      return this.toList$1$growable($receiver, true);
    }
  };
  H.ListIterator.prototype = {
    get$current: function(_) {
      return this._current;
    },
    moveNext$0: function() {
      var t3, _this = this,
        t1 = _this._iterable,
        t2 = J.getInterceptor$asx(t1),
        $length = t2.get$length(t1);
      if (_this._length != $length)
        throw H.wrapException(P.ConcurrentModificationError$(t1));
      t3 = _this._index;
      if (typeof $length !== "number")
        return H.iae($length);
      if (t3 >= $length) {
        _this.set$_current(null);
        return false;
      }
      _this.set$_current(t2.elementAt$1(t1, t3));
      ++_this._index;
      return true;
    },
    set$_current: function(_current) {
      this._current = H.assertSubtypeOfRuntimeType(_current, H.getTypeArgumentByIndex(this, 0));
    },
    $isIterator: 1
  };
  H.MappedIterable.prototype = {
    get$iterator: function(_) {
      return new H.MappedIterator(J.get$iterator$ax(this._iterable), this._f, this.$ti);
    },
    get$length: function(_) {
      return J.get$length$asx(this._iterable);
    },
    get$isEmpty: function(_) {
      return J.get$isEmpty$asx(this._iterable);
    },
    get$last: function(_) {
      return this._f.call$1(J.get$last$ax(this._iterable));
    },
    elementAt$1: function(_, index) {
      return this._f.call$1(J.elementAt$1$ax(this._iterable, index));
    },
    $asIterable: function($S, $T) {
      return [$T];
    }
  };
  H.EfficientLengthMappedIterable.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function($S, $T) {
      return [$T];
    }
  };
  H.MappedIterator.prototype = {
    moveNext$0: function() {
      var _this = this,
        t1 = _this._iterator;
      if (t1.moveNext$0()) {
        _this.set$_current(_this._f.call$1(t1.get$current(t1)));
        return true;
      }
      _this.set$_current(null);
      return false;
    },
    get$current: function(_) {
      return this._current;
    },
    set$_current: function(_current) {
      this._current = H.assertSubtypeOfRuntimeType(_current, H.getTypeArgumentByIndex(this, 1));
    },
    $asIterator: function($S, $T) {
      return [$T];
    }
  };
  H.MappedListIterable.prototype = {
    get$length: function(_) {
      return J.get$length$asx(this._source);
    },
    elementAt$1: function(_, index) {
      return this._f.call$1(J.elementAt$1$ax(this._source, index));
    },
    $asEfficientLengthIterable: function($S, $T) {
      return [$T];
    },
    $asListIterable: function($S, $T) {
      return [$T];
    },
    $asIterable: function($S, $T) {
      return [$T];
    }
  };
  H.WhereIterable.prototype = {
    get$iterator: function(_) {
      return new H.WhereIterator(J.get$iterator$ax(this._iterable), this._f, this.$ti);
    }
  };
  H.WhereIterator.prototype = {
    moveNext$0: function() {
      var t1, t2;
      for (t1 = this._iterator, t2 = this._f; t1.moveNext$0();)
        if (H.boolConversionCheck(t2.call$1(t1.get$current(t1))))
          return true;
      return false;
    },
    get$current: function(_) {
      var t1 = this._iterator;
      return t1.get$current(t1);
    }
  };
  H.ExpandIterable.prototype = {
    get$iterator: function(_) {
      return new H.ExpandIterator(J.get$iterator$ax(this._iterable), this._f, C.C_EmptyIterator, this.$ti);
    },
    $asIterable: function($S, $T) {
      return [$T];
    }
  };
  H.ExpandIterator.prototype = {
    get$current: function(_) {
      return this._current;
    },
    moveNext$0: function() {
      var t1, t2, _this = this;
      if (_this._currentExpansion == null)
        return false;
      for (t1 = _this._iterator, t2 = _this._f; !_this._currentExpansion.moveNext$0();) {
        _this.set$_current(null);
        if (t1.moveNext$0()) {
          _this.set$_currentExpansion(null);
          _this.set$_currentExpansion(J.get$iterator$ax(t2.call$1(t1.get$current(t1))));
        } else
          return false;
      }
      t1 = _this._currentExpansion;
      _this.set$_current(t1.get$current(t1));
      return true;
    },
    set$_currentExpansion: function(_currentExpansion) {
      this._currentExpansion = H.assertSubtype(_currentExpansion, "$isIterator", [H.getTypeArgumentByIndex(this, 1)], "$asIterator");
    },
    set$_current: function(_current) {
      this._current = H.assertSubtypeOfRuntimeType(_current, H.getTypeArgumentByIndex(this, 1));
    },
    $isIterator: 1,
    $asIterator: function($S, $T) {
      return [$T];
    }
  };
  H.TakeIterable.prototype = {
    get$iterator: function(_) {
      return new H.TakeIterator(J.get$iterator$ax(this._iterable), this._takeCount, this.$ti);
    }
  };
  H.EfficientLengthTakeIterable.prototype = {
    get$length: function(_) {
      var iterableLength = J.get$length$asx(this._iterable),
        t1 = this._takeCount;
      if (typeof iterableLength !== "number")
        return iterableLength.$gt();
      if (iterableLength > t1)
        return t1;
      return iterableLength;
    },
    $isEfficientLengthIterable: 1
  };
  H.TakeIterator.prototype = {
    moveNext$0: function() {
      if (--this._remaining >= 0)
        return this._iterator.moveNext$0();
      this._remaining = -1;
      return false;
    },
    get$current: function(_) {
      var t1;
      if (this._remaining < 0)
        return;
      t1 = this._iterator;
      return t1.get$current(t1);
    }
  };
  H.SkipIterable.prototype = {
    skip$1: function(_, count) {
      P.RangeError_checkNotNegative(count, "count");
      return new H.SkipIterable(this._iterable, this._skipCount + count, this.$ti);
    },
    get$iterator: function(_) {
      return new H.SkipIterator(J.get$iterator$ax(this._iterable), this._skipCount, this.$ti);
    }
  };
  H.EfficientLengthSkipIterable.prototype = {
    get$length: function(_) {
      var $length,
        t1 = J.get$length$asx(this._iterable);
      if (typeof t1 !== "number")
        return t1.$sub();
      $length = t1 - this._skipCount;
      if ($length >= 0)
        return $length;
      return 0;
    },
    skip$1: function(_, count) {
      P.RangeError_checkNotNegative(count, "count");
      return new H.EfficientLengthSkipIterable(this._iterable, this._skipCount + count, this.$ti);
    },
    $isEfficientLengthIterable: 1
  };
  H.SkipIterator.prototype = {
    moveNext$0: function() {
      var t1, i;
      for (t1 = this._iterator, i = 0; i < this._skipCount; ++i)
        t1.moveNext$0();
      this._skipCount = 0;
      return t1.moveNext$0();
    },
    get$current: function(_) {
      var t1 = this._iterator;
      return t1.get$current(t1);
    }
  };
  H.EmptyIterable.prototype = {
    get$iterator: function(_) {
      return C.C_EmptyIterator;
    },
    forEach$1: function(_, action) {
      H.functionTypeCheck(action, {func: 1, ret: -1, args: [H.getTypeArgumentByIndex(this, 0)]});
    },
    get$isEmpty: function(_) {
      return true;
    },
    get$length: function(_) {
      return 0;
    },
    get$last: function(_) {
      throw H.wrapException(H.IterableElementError_noElement());
    },
    elementAt$1: function(_, index) {
      throw H.wrapException(P.RangeError$range(index, 0, 0, "index", null));
    },
    contains$1: function(_, element) {
      return false;
    },
    lastWhere$2$orElse: function(_, test, orElse) {
      var t1 = H.getTypeArgumentByIndex(this, 0);
      H.functionTypeCheck(test, {func: 1, ret: P.bool, args: [t1]});
      H.functionTypeCheck(orElse, {func: 1, ret: t1});
      if (orElse != null)
        return orElse.call$0();
      throw H.wrapException(H.IterableElementError_noElement());
    },
    skip$1: function(_, count) {
      P.RangeError_checkNotNegative(count, "count");
      return this;
    }
  };
  H.EmptyIterator.prototype = {
    moveNext$0: function() {
      return false;
    },
    get$current: function(_) {
      return;
    },
    $isIterator: 1
  };
  H.FixedLengthListMixin.prototype = {
    set$length: function(receiver, newLength) {
      throw H.wrapException(P.UnsupportedError$("Cannot change the length of a fixed-length list"));
    },
    add$1: function(receiver, value) {
      H.assertSubtypeOfRuntimeType(value, H.getRuntimeTypeArgumentIntercepted(this, receiver, "FixedLengthListMixin", 0));
      throw H.wrapException(P.UnsupportedError$("Cannot add to a fixed-length list"));
    },
    removeAt$1: function(receiver, index) {
      throw H.wrapException(P.UnsupportedError$("Cannot remove from a fixed-length list"));
    }
  };
  H.UnmodifiableListMixin.prototype = {
    $indexSet: function(_, index, value) {
      H.intTypeCheck(index);
      H.assertSubtypeOfRuntimeType(value, H.getRuntimeTypeArgument(this, "UnmodifiableListMixin", 0));
      throw H.wrapException(P.UnsupportedError$("Cannot modify an unmodifiable list"));
    },
    set$length: function(_, newLength) {
      throw H.wrapException(P.UnsupportedError$("Cannot change the length of an unmodifiable list"));
    },
    add$1: function(_, value) {
      H.assertSubtypeOfRuntimeType(value, H.getRuntimeTypeArgument(this, "UnmodifiableListMixin", 0));
      throw H.wrapException(P.UnsupportedError$("Cannot add to an unmodifiable list"));
    },
    sort$1: function(_, compare) {
      var t1 = H.getRuntimeTypeArgument(this, "UnmodifiableListMixin", 0);
      H.functionTypeCheck(compare, {func: 1, ret: P.int, args: [t1, t1]});
      throw H.wrapException(P.UnsupportedError$("Cannot modify an unmodifiable list"));
    },
    removeAt$1: function(_, index) {
      throw H.wrapException(P.UnsupportedError$("Cannot remove from an unmodifiable list"));
    }
  };
  H.UnmodifiableListBase.prototype = {};
  H.ReversedListIterable.prototype = {
    get$length: function(_) {
      return J.get$length$asx(this._source);
    },
    elementAt$1: function(_, index) {
      var t1 = this._source,
        t2 = J.getInterceptor$asx(t1),
        t3 = t2.get$length(t1);
      if (typeof t3 !== "number")
        return t3.$sub();
      if (typeof index !== "number")
        return H.iae(index);
      return t2.elementAt$1(t1, t3 - 1 - index);
    }
  };
  H.Symbol.prototype = {
    get$hashCode: function(_) {
      var hash = this._hashCode;
      if (hash != null)
        return hash;
      hash = 536870911 & 664597 * J.get$hashCode$(this.__internal$_name);
      this._hashCode = hash;
      return hash;
    },
    toString$0: function(_) {
      return 'Symbol("' + H.S(this.__internal$_name) + '")';
    },
    $eq: function(_, other) {
      if (other == null)
        return false;
      return other instanceof H.Symbol && this.__internal$_name == other.__internal$_name;
    },
    $isSymbol0: 1
  };
  H.__CastListBase__CastIterableBase_ListMixin.prototype = {};
  H.ConstantMapView.prototype = {};
  H.ConstantMap.prototype = {
    get$isEmpty: function(_) {
      return this.get$length(this) === 0;
    },
    toString$0: function(_) {
      return P.MapBase_mapToString(this);
    },
    $indexSet: function(_, key, val) {
      H.assertSubtypeOfRuntimeType(key, H.getTypeArgumentByIndex(this, 0));
      H.assertSubtypeOfRuntimeType(val, H.getTypeArgumentByIndex(this, 1));
      return H.ConstantMap__throwUnmodifiable();
    },
    $isMap: 1
  };
  H.ConstantStringMap.prototype = {
    get$length: function(_) {
      return this.__js_helper$_length;
    },
    containsKey$1: function(_, key) {
      if (typeof key !== "string")
        return false;
      if ("__proto__" === key)
        return false;
      return this._jsObject.hasOwnProperty(key);
    },
    $index: function(_, key) {
      if (!this.containsKey$1(0, key))
        return;
      return this._fetch$1(key);
    },
    _fetch$1: function(key) {
      return this._jsObject[H.stringTypeCheck(key)];
    },
    forEach$1: function(_, f) {
      var keys, t2, i, key, _this = this,
        t1 = H.getTypeArgumentByIndex(_this, 1);
      H.functionTypeCheck(f, {func: 1, ret: -1, args: [H.getTypeArgumentByIndex(_this, 0), t1]});
      keys = _this._keys;
      for (t2 = keys.length, i = 0; i < t2; ++i) {
        key = keys[i];
        f.call$2(key, H.assertSubtypeOfRuntimeType(_this._fetch$1(key), t1));
      }
    },
    get$keys: function(_) {
      return new H._ConstantMapKeyIterable(this, [H.getTypeArgumentByIndex(this, 0)]);
    },
    get$values: function(_) {
      var _this = this;
      return H.MappedIterable_MappedIterable(_this._keys, new H.ConstantStringMap_values_closure(_this), H.getTypeArgumentByIndex(_this, 0), H.getTypeArgumentByIndex(_this, 1));
    }
  };
  H.ConstantStringMap_values_closure.prototype = {
    call$1: function(key) {
      var t1 = this.$this;
      return H.assertSubtypeOfRuntimeType(t1._fetch$1(H.assertSubtypeOfRuntimeType(key, H.getTypeArgumentByIndex(t1, 0))), H.getTypeArgumentByIndex(t1, 1));
    },
    $signature: function() {
      var t1 = this.$this;
      return {func: 1, ret: H.getTypeArgumentByIndex(t1, 1), args: [H.getTypeArgumentByIndex(t1, 0)]};
    }
  };
  H._ConstantMapKeyIterable.prototype = {
    get$iterator: function(_) {
      var t1 = this._map._keys;
      return new J.ArrayIterator(t1, t1.length, [H.getTypeArgumentByIndex(t1, 0)]);
    },
    get$length: function(_) {
      return this._map._keys.length;
    }
  };
  H.GeneralConstantMap.prototype = {
    _getMap$0: function() {
      var _this = this,
        backingMap = _this.$map;
      if (backingMap == null) {
        backingMap = new H.JsLinkedHashMap(_this.$ti);
        H.fillLiteralMap(_this._jsData, backingMap);
        _this.$map = backingMap;
      }
      return backingMap;
    },
    containsKey$1: function(_, key) {
      return this._getMap$0().containsKey$1(0, key);
    },
    $index: function(_, key) {
      return this._getMap$0().$index(0, key);
    },
    forEach$1: function(_, f) {
      H.functionTypeCheck(f, {func: 1, ret: -1, args: [H.getTypeArgumentByIndex(this, 0), H.getTypeArgumentByIndex(this, 1)]});
      this._getMap$0().forEach$1(0, f);
    },
    get$keys: function(_) {
      var t1 = this._getMap$0();
      return t1.get$keys(t1);
    },
    get$values: function(_) {
      var t1 = this._getMap$0();
      return t1.get$values(t1);
    },
    get$length: function(_) {
      var t1 = this._getMap$0();
      return t1.get$length(t1);
    }
  };
  H.Instantiation.prototype = {
    Instantiation$1: function(_genericClosure) {
      if (false)
        H.instantiatedGenericFunctionType(0, 0);
    },
    toString$0: function(_) {
      var types = "<" + C.JSArray_methods.join$1([new H.TypeImpl(H.getTypeArgumentByIndex(this, 0))], ", ") + ">";
      return H.S(this._genericClosure) + " with " + types;
    }
  };
  H.Instantiation1.prototype = {
    call$1: function(a0) {
      return this._genericClosure.call$1$1(a0, this.$ti[0]);
    },
    $signature: function() {
      return H.instantiatedGenericFunctionType(H.extractFunctionTypeObjectFromInternal(this._genericClosure), this.$ti);
    }
  };
  H.JSInvocationMirror.prototype = {
    get$memberName: function() {
      var t1 = this._memberName;
      return t1;
    },
    get$positionalArguments: function() {
      var t1, argumentCount, list, index, _this = this;
      if (_this._kind === 1)
        return C.List_empty0;
      t1 = _this._arguments;
      argumentCount = t1.length - _this._namedArgumentNames.length - _this._typeArgumentCount;
      if (argumentCount === 0)
        return C.List_empty0;
      list = [];
      for (index = 0; index < argumentCount; ++index) {
        if (index >= t1.length)
          return H.ioore(t1, index);
        list.push(t1[index]);
      }
      return J.JSArray_markUnmodifiableList(list);
    },
    get$namedArguments: function() {
      var t1, namedArgumentCount, t2, namedArgumentsStartIndex, t3, map, i, t4, t5, _this = this;
      if (_this._kind !== 0)
        return C.Map_empty;
      t1 = _this._namedArgumentNames;
      namedArgumentCount = t1.length;
      t2 = _this._arguments;
      namedArgumentsStartIndex = t2.length - namedArgumentCount - _this._typeArgumentCount;
      if (namedArgumentCount === 0)
        return C.Map_empty;
      t3 = P.Symbol0;
      map = new H.JsLinkedHashMap([t3, null]);
      for (i = 0; i < namedArgumentCount; ++i) {
        if (i >= t1.length)
          return H.ioore(t1, i);
        t4 = t1[i];
        t5 = namedArgumentsStartIndex + i;
        if (t5 < 0 || t5 >= t2.length)
          return H.ioore(t2, t5);
        map.$indexSet(0, new H.Symbol(t4), t2[t5]);
      }
      return new H.ConstantMapView(map, [t3, null]);
    },
    $isInvocation: 1
  };
  H.Primitives_initTicker_closure.prototype = {
    call$0: function() {
      return C.JSNumber_methods.floor$0(1000 * this.performance.now());
    },
    $signature: 53
  };
  H.Primitives_functionNoSuchMethod_closure.prototype = {
    call$2: function($name, argument) {
      var t1;
      H.stringTypeCheck($name);
      t1 = this._box_0;
      t1.names = t1.names + "$" + H.S($name);
      C.JSArray_methods.add$1(this.namedArgumentList, $name);
      C.JSArray_methods.add$1(this.$arguments, argument);
      ++t1.argumentCount;
    },
    $signature: 146
  };
  H.TypeErrorDecoder.prototype = {
    matchTypeError$1: function(message) {
      var result, t1, _this = this,
        match = new RegExp(_this._pattern).exec(message);
      if (match == null)
        return;
      result = Object.create(null);
      t1 = _this._arguments;
      if (t1 !== -1)
        result.arguments = match[t1 + 1];
      t1 = _this._argumentsExpr;
      if (t1 !== -1)
        result.argumentsExpr = match[t1 + 1];
      t1 = _this._expr;
      if (t1 !== -1)
        result.expr = match[t1 + 1];
      t1 = _this._method;
      if (t1 !== -1)
        result.method = match[t1 + 1];
      t1 = _this._receiver;
      if (t1 !== -1)
        result.receiver = match[t1 + 1];
      return result;
    }
  };
  H.NullError.prototype = {
    toString$0: function(_) {
      var t1 = this._method;
      if (t1 == null)
        return "NoSuchMethodError: " + H.S(this._message);
      return "NoSuchMethodError: method not found: '" + t1 + "' on null";
    }
  };
  H.JsNoSuchMethodError.prototype = {
    toString$0: function(_) {
      var t2, _this = this,
        _s38_ = "NoSuchMethodError: method not found: '",
        t1 = _this._method;
      if (t1 == null)
        return "NoSuchMethodError: " + H.S(_this._message);
      t2 = _this._receiver;
      if (t2 == null)
        return _s38_ + t1 + "' (" + H.S(_this._message) + ")";
      return _s38_ + t1 + "' on '" + t2 + "' (" + H.S(_this._message) + ")";
    }
  };
  H.UnknownJsTypeError.prototype = {
    toString$0: function(_) {
      var t1 = this._message;
      return t1.length === 0 ? "Error" : "Error: " + t1;
    }
  };
  H.ExceptionAndStackTrace.prototype = {
    get$stackTrace: function() {
      return this.stackTrace;
    }
  };
  H.unwrapException_saveStackTrace.prototype = {
    call$1: function(error) {
      if (!!J.getInterceptor$(error).$isError)
        if (error.$thrownJsError == null)
          error.$thrownJsError = this.ex;
      return error;
    },
    $signature: 4
  };
  H._StackTrace.prototype = {
    toString$0: function(_) {
      var trace,
        t1 = this._trace;
      if (t1 != null)
        return t1;
      t1 = this._exception;
      trace = t1 !== null && typeof t1 === "object" ? t1.stack : null;
      return this._trace = trace == null ? "" : trace;
    },
    $isStackTrace: 1
  };
  H.Closure.prototype = {
    toString$0: function(_) {
      return "Closure '" + H.Primitives_objectTypeName(this).trim() + "'";
    },
    $isFunction: 1,
    get$$call: function() {
      return this;
    },
    "call*": "call$1",
    $requiredArgCount: 1,
    $defaultValues: null
  };
  H.TearOffClosure.prototype = {};
  H.StaticClosure.prototype = {
    toString$0: function(_) {
      var $name = this.$static_name;
      if ($name == null)
        return "Closure of unknown static method";
      return "Closure '" + H.unminifyOrTag($name) + "'";
    }
  };
  H.BoundClosure.prototype = {
    $eq: function(_, other) {
      var _this = this;
      if (other == null)
        return false;
      if (_this === other)
        return true;
      if (!(other instanceof H.BoundClosure))
        return false;
      return _this._self === other._self && _this._target === other._target && _this._receiver === other._receiver;
    },
    get$hashCode: function(_) {
      var receiverHashCode,
        t1 = this._receiver;
      if (t1 == null)
        receiverHashCode = H.Primitives_objectHashCode(this._self);
      else
        receiverHashCode = typeof t1 !== "object" ? J.get$hashCode$(t1) : H.Primitives_objectHashCode(t1);
      return (receiverHashCode ^ H.Primitives_objectHashCode(this._target)) >>> 0;
    },
    toString$0: function(_) {
      var receiver = this._receiver;
      if (receiver == null)
        receiver = this._self;
      return "Closure '" + H.S(this.__js_helper$_name) + "' of " + ("Instance of '" + H.Primitives_objectTypeName(receiver) + "'");
    }
  };
  H.TypeErrorImplementation.prototype = {
    toString$0: function(_) {
      return this.message;
    },
    $isAssertionError: 1,
    get$message: function(receiver) {
      return this.message;
    }
  };
  H.CastErrorImplementation.prototype = {
    toString$0: function(_) {
      return this.message;
    }
  };
  H.RuntimeError.prototype = {
    toString$0: function(_) {
      return "RuntimeError: " + H.S(this.message);
    }
  };
  H._AssertionError.prototype = {
    toString$0: function(_) {
      return "Assertion failed: " + P.Error_safeToString(this.message);
    }
  };
  H.TypeImpl.prototype = {
    get$_typeName: function() {
      var t1 = this.__typeName;
      return t1 == null ? this.__typeName = H.runtimeTypeToString(this._rti) : t1;
    },
    toString$0: function(_) {
      return this.get$_typeName();
    },
    get$hashCode: function(_) {
      var t1 = this._hashCode;
      return t1 == null ? this._hashCode = C.JSString_methods.get$hashCode(this.get$_typeName()) : t1;
    },
    $eq: function(_, other) {
      if (other == null)
        return false;
      return other instanceof H.TypeImpl && this.get$_typeName() === other.get$_typeName();
    },
    $isType: 1
  };
  H.JsLinkedHashMap.prototype = {
    get$length: function(_) {
      return this.__js_helper$_length;
    },
    get$isEmpty: function(_) {
      return this.__js_helper$_length === 0;
    },
    get$isNotEmpty: function(_) {
      return !this.get$isEmpty(this);
    },
    get$keys: function(_) {
      return new H.LinkedHashMapKeyIterable(this, [H.getTypeArgumentByIndex(this, 0)]);
    },
    get$values: function(_) {
      var _this = this;
      return H.MappedIterable_MappedIterable(_this.get$keys(_this), new H.JsLinkedHashMap_values_closure(_this), H.getTypeArgumentByIndex(_this, 0), H.getTypeArgumentByIndex(_this, 1));
    },
    containsKey$1: function(_, key) {
      var strings, nums, _this = this;
      if (typeof key === "string") {
        strings = _this._strings;
        if (strings == null)
          return false;
        return _this._containsTableEntry$2(strings, key);
      } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
        nums = _this._nums;
        if (nums == null)
          return false;
        return _this._containsTableEntry$2(nums, key);
      } else
        return _this.internalContainsKey$1(key);
    },
    internalContainsKey$1: function(key) {
      var _this = this,
        rest = _this._rest;
      if (rest == null)
        return false;
      return _this.internalFindBucketIndex$2(_this._getTableBucket$2(rest, _this.internalComputeHashCode$1(key)), key) >= 0;
    },
    addAll$1: function(_, other) {
      H.assertSubtype(other, "$isMap", this.$ti, "$asMap").forEach$1(0, new H.JsLinkedHashMap_addAll_closure(this));
    },
    $index: function(_, key) {
      var strings, cell, t1, nums, _this = this;
      if (typeof key === "string") {
        strings = _this._strings;
        if (strings == null)
          return;
        cell = _this._getTableCell$2(strings, key);
        t1 = cell == null ? null : cell.hashMapCellValue;
        return t1;
      } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
        nums = _this._nums;
        if (nums == null)
          return;
        cell = _this._getTableCell$2(nums, key);
        t1 = cell == null ? null : cell.hashMapCellValue;
        return t1;
      } else
        return _this.internalGet$1(key);
    },
    internalGet$1: function(key) {
      var bucket, index, _this = this,
        rest = _this._rest;
      if (rest == null)
        return;
      bucket = _this._getTableBucket$2(rest, _this.internalComputeHashCode$1(key));
      index = _this.internalFindBucketIndex$2(bucket, key);
      if (index < 0)
        return;
      return bucket[index].hashMapCellValue;
    },
    $indexSet: function(_, key, value) {
      var strings, nums, _this = this;
      H.assertSubtypeOfRuntimeType(key, H.getTypeArgumentByIndex(_this, 0));
      H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(_this, 1));
      if (typeof key === "string") {
        strings = _this._strings;
        _this._addHashTableEntry$3(strings == null ? _this._strings = _this._newHashTable$0() : strings, key, value);
      } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
        nums = _this._nums;
        _this._addHashTableEntry$3(nums == null ? _this._nums = _this._newHashTable$0() : nums, key, value);
      } else
        _this.internalSet$2(key, value);
    },
    internalSet$2: function(key, value) {
      var rest, hash, bucket, index, _this = this;
      H.assertSubtypeOfRuntimeType(key, H.getTypeArgumentByIndex(_this, 0));
      H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(_this, 1));
      rest = _this._rest;
      if (rest == null)
        rest = _this._rest = _this._newHashTable$0();
      hash = _this.internalComputeHashCode$1(key);
      bucket = _this._getTableBucket$2(rest, hash);
      if (bucket == null)
        _this._setTableEntry$3(rest, hash, [_this._newLinkedCell$2(key, value)]);
      else {
        index = _this.internalFindBucketIndex$2(bucket, key);
        if (index >= 0)
          bucket[index].hashMapCellValue = value;
        else
          bucket.push(_this._newLinkedCell$2(key, value));
      }
    },
    putIfAbsent$2: function(_, key, ifAbsent) {
      var value, _this = this;
      H.assertSubtypeOfRuntimeType(key, H.getTypeArgumentByIndex(_this, 0));
      H.functionTypeCheck(ifAbsent, {func: 1, ret: H.getTypeArgumentByIndex(_this, 1)});
      if (_this.containsKey$1(0, key))
        return _this.$index(0, key);
      value = ifAbsent.call$0();
      _this.$indexSet(0, key, value);
      return value;
    },
    remove$1: function(_, key) {
      var _this = this;
      if (typeof key === "string")
        return _this._removeHashTableEntry$2(_this._strings, key);
      else if (typeof key === "number" && (key & 0x3ffffff) === key)
        return _this._removeHashTableEntry$2(_this._nums, key);
      else
        return _this.internalRemove$1(key);
    },
    internalRemove$1: function(key) {
      var hash, bucket, index, cell, _this = this,
        rest = _this._rest;
      if (rest == null)
        return;
      hash = _this.internalComputeHashCode$1(key);
      bucket = _this._getTableBucket$2(rest, hash);
      index = _this.internalFindBucketIndex$2(bucket, key);
      if (index < 0)
        return;
      cell = bucket.splice(index, 1)[0];
      _this._unlinkCell$1(cell);
      if (bucket.length === 0)
        _this._deleteTableEntry$2(rest, hash);
      return cell.hashMapCellValue;
    },
    clear$0: function(_) {
      var _this = this;
      if (_this.__js_helper$_length > 0) {
        _this._strings = _this._nums = _this._rest = _this._first = _this._last = null;
        _this.__js_helper$_length = 0;
        _this._modified$0();
      }
    },
    forEach$1: function(_, action) {
      var cell, modifications, _this = this;
      H.functionTypeCheck(action, {func: 1, ret: -1, args: [H.getTypeArgumentByIndex(_this, 0), H.getTypeArgumentByIndex(_this, 1)]});
      cell = _this._first;
      modifications = _this._modifications;
      for (; cell != null;) {
        action.call$2(cell.hashMapCellKey, cell.hashMapCellValue);
        if (modifications !== _this._modifications)
          throw H.wrapException(P.ConcurrentModificationError$(_this));
        cell = cell._next;
      }
    },
    _addHashTableEntry$3: function(table, key, value) {
      var cell, _this = this;
      H.assertSubtypeOfRuntimeType(key, H.getTypeArgumentByIndex(_this, 0));
      H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(_this, 1));
      cell = _this._getTableCell$2(table, key);
      if (cell == null)
        _this._setTableEntry$3(table, key, _this._newLinkedCell$2(key, value));
      else
        cell.hashMapCellValue = value;
    },
    _removeHashTableEntry$2: function(table, key) {
      var cell;
      if (table == null)
        return;
      cell = this._getTableCell$2(table, key);
      if (cell == null)
        return;
      this._unlinkCell$1(cell);
      this._deleteTableEntry$2(table, key);
      return cell.hashMapCellValue;
    },
    _modified$0: function() {
      this._modifications = this._modifications + 1 & 67108863;
    },
    _newLinkedCell$2: function(key, value) {
      var last, _this = this,
        cell = new H.LinkedHashMapCell(H.assertSubtypeOfRuntimeType(key, H.getTypeArgumentByIndex(_this, 0)), H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(_this, 1)));
      if (_this._first == null)
        _this._first = _this._last = cell;
      else {
        last = _this._last;
        cell._previous = last;
        _this._last = last._next = cell;
      }
      ++_this.__js_helper$_length;
      _this._modified$0();
      return cell;
    },
    _unlinkCell$1: function(cell) {
      var _this = this,
        previous = cell._previous,
        next = cell._next;
      if (previous == null)
        _this._first = next;
      else
        previous._next = next;
      if (next == null)
        _this._last = previous;
      else
        next._previous = previous;
      --_this.__js_helper$_length;
      _this._modified$0();
    },
    internalComputeHashCode$1: function(key) {
      return J.get$hashCode$(key) & 0x3ffffff;
    },
    internalFindBucketIndex$2: function(bucket, key) {
      var $length, i;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (i = 0; i < $length; ++i)
        if (J.$eq$(bucket[i].hashMapCellKey, key))
          return i;
      return -1;
    },
    toString$0: function(_) {
      return P.MapBase_mapToString(this);
    },
    _getTableCell$2: function(table, key) {
      return table[key];
    },
    _getTableBucket$2: function(table, key) {
      return table[key];
    },
    _setTableEntry$3: function(table, key, value) {
      table[key] = value;
    },
    _deleteTableEntry$2: function(table, key) {
      delete table[key];
    },
    _containsTableEntry$2: function(table, key) {
      return this._getTableCell$2(table, key) != null;
    },
    _newHashTable$0: function() {
      var _s20_ = "<non-identifier-key>",
        table = Object.create(null);
      this._setTableEntry$3(table, _s20_, table);
      this._deleteTableEntry$2(table, _s20_);
      return table;
    },
    $isLinkedHashMap: 1
  };
  H.JsLinkedHashMap_values_closure.prototype = {
    call$1: function(each) {
      var t1 = this.$this;
      return t1.$index(0, H.assertSubtypeOfRuntimeType(each, H.getTypeArgumentByIndex(t1, 0)));
    },
    $signature: function() {
      var t1 = this.$this;
      return {func: 1, ret: H.getTypeArgumentByIndex(t1, 1), args: [H.getTypeArgumentByIndex(t1, 0)]};
    }
  };
  H.JsLinkedHashMap_addAll_closure.prototype = {
    call$2: function(key, value) {
      var t1 = this.$this;
      t1.$indexSet(0, H.assertSubtypeOfRuntimeType(key, H.getTypeArgumentByIndex(t1, 0)), H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(t1, 1)));
    },
    $signature: function() {
      var t1 = this.$this;
      return {func: 1, ret: P.Null, args: [H.getTypeArgumentByIndex(t1, 0), H.getTypeArgumentByIndex(t1, 1)]};
    }
  };
  H.LinkedHashMapCell.prototype = {};
  H.LinkedHashMapKeyIterable.prototype = {
    get$length: function(_) {
      return this._map.__js_helper$_length;
    },
    get$isEmpty: function(_) {
      return this._map.__js_helper$_length === 0;
    },
    get$iterator: function(_) {
      var t1 = this._map,
        t2 = new H.LinkedHashMapKeyIterator(t1, t1._modifications, this.$ti);
      t2._cell = t1._first;
      return t2;
    },
    contains$1: function(_, element) {
      return this._map.containsKey$1(0, element);
    },
    forEach$1: function(_, f) {
      var t1, cell, modifications;
      H.functionTypeCheck(f, {func: 1, ret: -1, args: [H.getTypeArgumentByIndex(this, 0)]});
      t1 = this._map;
      cell = t1._first;
      modifications = t1._modifications;
      for (; cell != null;) {
        f.call$1(cell.hashMapCellKey);
        if (modifications !== t1._modifications)
          throw H.wrapException(P.ConcurrentModificationError$(t1));
        cell = cell._next;
      }
    }
  };
  H.LinkedHashMapKeyIterator.prototype = {
    get$current: function(_) {
      return this.__js_helper$_current;
    },
    moveNext$0: function() {
      var _this = this,
        t1 = _this._map;
      if (_this._modifications !== t1._modifications)
        throw H.wrapException(P.ConcurrentModificationError$(t1));
      else {
        t1 = _this._cell;
        if (t1 == null) {
          _this.set$__js_helper$_current(null);
          return false;
        } else {
          _this.set$__js_helper$_current(t1.hashMapCellKey);
          _this._cell = _this._cell._next;
          return true;
        }
      }
    },
    set$__js_helper$_current: function(_current) {
      this.__js_helper$_current = H.assertSubtypeOfRuntimeType(_current, H.getTypeArgumentByIndex(this, 0));
    },
    $isIterator: 1
  };
  H.initHooks_closure.prototype = {
    call$1: function(o) {
      return this.getTag(o);
    },
    $signature: 4
  };
  H.initHooks_closure0.prototype = {
    call$2: function(o, tag) {
      return this.getUnknownTag(o, tag);
    },
    $signature: 113
  };
  H.initHooks_closure1.prototype = {
    call$1: function(tag) {
      return this.prototypeForTag(H.stringTypeCheck(tag));
    },
    $signature: 123
  };
  H.JSSyntaxRegExp.prototype = {
    toString$0: function(_) {
      return "RegExp/" + this.pattern + "/";
    },
    get$_nativeAnchoredVersion: function() {
      var _this = this,
        t1 = _this._nativeAnchoredRegExp;
      if (t1 != null)
        return t1;
      t1 = _this._nativeRegExp;
      return _this._nativeAnchoredRegExp = H.JSSyntaxRegExp_makeNative(_this.pattern + "|()", t1.multiline, !t1.ignoreCase, true);
    },
    firstMatch$1: function(string) {
      var m;
      if (typeof string !== "string")
        H.throwExpression(H.argumentErrorValue(string));
      m = this._nativeRegExp.exec(string);
      if (m == null)
        return;
      return new H._MatchImplementation(m);
    },
    _execAnchored$2: function(string, start) {
      var match,
        regexp = this.get$_nativeAnchoredVersion();
      regexp.lastIndex = start;
      match = regexp.exec(string);
      if (match == null)
        return;
      if (0 >= match.length)
        return H.ioore(match, -1);
      if (match.pop() != null)
        return;
      return new H._MatchImplementation(match);
    },
    $isPattern: 1,
    $isRegExp: 1
  };
  H._MatchImplementation.prototype = {
    $index: function(_, index) {
      var t1;
      H.intTypeCheck(index);
      t1 = this._match;
      if (index < 0 || index >= t1.length)
        return H.ioore(t1, index);
      return t1[index];
    }
  };
  H.StringMatch.prototype = {
    $index: function(_, g) {
      H.intTypeCheck(g);
      if (g !== 0)
        H.throwExpression(P.RangeError$value(g, null));
      return this.pattern;
    }
  };
  H.NativeByteBuffer.prototype = {
    get$runtimeType: function(receiver) {
      return C.Type_ByteBuffer_RkP;
    },
    asInt64List$2: function(receiver, offsetInBytes, $length) {
      throw H.wrapException(P.UnsupportedError$("Int64List not supported by dart2js."));
    },
    $isNativeByteBuffer: 1,
    $isByteBuffer: 1
  };
  H.NativeTypedData.prototype = {
    _invalidPosition$3: function(receiver, position, $length, $name) {
      if (typeof position !== "number" || Math.floor(position) !== position)
        throw H.wrapException(P.ArgumentError$value(position, $name, "Invalid list position"));
      else
        throw H.wrapException(P.RangeError$range(position, 0, $length, $name, null));
    },
    _checkPosition$3: function(receiver, position, $length, $name) {
      if (position >>> 0 !== position || position > $length)
        this._invalidPosition$3(receiver, position, $length, $name);
    },
    $isNativeTypedData: 1
  };
  H.NativeByteData.prototype = {
    get$runtimeType: function(receiver) {
      return C.Type_ByteData_zNC;
    },
    getInt64$2: function(receiver, byteOffset, endian) {
      throw H.wrapException(P.UnsupportedError$("Int64 accessor not supported by dart2js."));
    },
    setInt64$3: function(receiver, byteOffset, value, endian) {
      throw H.wrapException(P.UnsupportedError$("Int64 accessor not supported by dart2js."));
    },
    $isByteData: 1
  };
  H.NativeTypedArray.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    },
    _setRangeFast$4: function(receiver, start, end, source, skipCount) {
      var count, sourceLength,
        targetLength = receiver.length;
      this._checkPosition$3(receiver, start, targetLength, "start");
      this._checkPosition$3(receiver, end, targetLength, "end");
      if (typeof end !== "number")
        return H.iae(end);
      if (start > end)
        throw H.wrapException(P.RangeError$range(start, 0, end, null, null));
      count = end - start;
      if (skipCount < 0)
        throw H.wrapException(P.ArgumentError$(skipCount));
      sourceLength = source.length;
      if (sourceLength - skipCount < count)
        throw H.wrapException(P.StateError$("Not enough elements"));
      if (skipCount !== 0 || sourceLength !== count)
        source = source.subarray(skipCount, skipCount + count);
      receiver.set(source, start);
    },
    $isJavaScriptIndexingBehavior: 1,
    $asJavaScriptIndexingBehavior: function() {
    }
  };
  H.NativeTypedArrayOfDouble.prototype = {
    $index: function(receiver, index) {
      H.intTypeCheck(index);
      H._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      H.intTypeCheck(index);
      H.doubleTypeCheck(value);
      H._checkValidIndex(index, receiver, receiver.length);
      receiver[index] = value;
    },
    $isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [P.double];
    },
    $asFixedLengthListMixin: function() {
      return [P.double];
    },
    $asListMixin: function() {
      return [P.double];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [P.double];
    },
    $isList: 1,
    $asList: function() {
      return [P.double];
    }
  };
  H.NativeTypedArrayOfInt.prototype = {
    $indexSet: function(receiver, index, value) {
      H.intTypeCheck(index);
      H.intTypeCheck(value);
      H._checkValidIndex(index, receiver, receiver.length);
      receiver[index] = value;
    },
    setRange$4: function(receiver, start, end, iterable, skipCount) {
      H.assertSubtype(iterable, "$isIterable", [P.int], "$asIterable");
      if (!!J.getInterceptor$(iterable).$isNativeTypedArrayOfInt) {
        this._setRangeFast$4(receiver, start, end, iterable, skipCount);
        return;
      }
      this.super$ListMixin$setRange(receiver, start, end, iterable, skipCount);
    },
    setRange$3: function($receiver, start, end, iterable) {
      return this.setRange$4($receiver, start, end, iterable, 0);
    },
    $isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [P.int];
    },
    $asFixedLengthListMixin: function() {
      return [P.int];
    },
    $asListMixin: function() {
      return [P.int];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [P.int];
    },
    $isList: 1,
    $asList: function() {
      return [P.int];
    }
  };
  H.NativeFloat32List.prototype = {
    get$runtimeType: function(receiver) {
      return C.Type_Float32List_LB7;
    },
    $isFloat32List: 1
  };
  H.NativeFloat64List.prototype = {
    get$runtimeType: function(receiver) {
      return C.Type_Float64List_LB7;
    },
    $isFloat64List: 1
  };
  H.NativeInt16List.prototype = {
    get$runtimeType: function(receiver) {
      return C.Type_Int16List_uXf;
    },
    $index: function(receiver, index) {
      H.intTypeCheck(index);
      H._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    }
  };
  H.NativeInt32List.prototype = {
    get$runtimeType: function(receiver) {
      return C.Type_Int32List_O50;
    },
    $index: function(receiver, index) {
      H.intTypeCheck(index);
      H._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    },
    $isInt32List: 1
  };
  H.NativeInt8List.prototype = {
    get$runtimeType: function(receiver) {
      return C.Type_Int8List_ekJ;
    },
    $index: function(receiver, index) {
      H.intTypeCheck(index);
      H._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    }
  };
  H.NativeUint16List.prototype = {
    get$runtimeType: function(receiver) {
      return C.Type_Uint16List_2bx;
    },
    $index: function(receiver, index) {
      H.intTypeCheck(index);
      H._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    }
  };
  H.NativeUint32List.prototype = {
    get$runtimeType: function(receiver) {
      return C.Type_Uint32List_2bx;
    },
    $index: function(receiver, index) {
      H.intTypeCheck(index);
      H._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    }
  };
  H.NativeUint8ClampedList.prototype = {
    get$runtimeType: function(receiver) {
      return C.Type_Uint8ClampedList_Jik;
    },
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      H.intTypeCheck(index);
      H._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    }
  };
  H.NativeUint8List.prototype = {
    get$runtimeType: function(receiver) {
      return C.Type_Uint8List_WLA;
    },
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      H.intTypeCheck(index);
      H._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    },
    $isNativeUint8List: 1,
    $isUint8List: 1
  };
  H._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin.prototype = {};
  H._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin.prototype = {};
  H._NativeTypedArrayOfInt_NativeTypedArray_ListMixin.prototype = {};
  H._NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin.prototype = {};
  P._AsyncRun__initializeScheduleImmediate_internalCallback.prototype = {
    call$1: function(_) {
      var t1 = this._box_0,
        f = t1.storedCallback;
      t1.storedCallback = null;
      f.call$0();
    },
    $signature: 6
  };
  P._AsyncRun__initializeScheduleImmediate_closure.prototype = {
    call$1: function(callback) {
      var t1, t2;
      this._box_0.storedCallback = H.functionTypeCheck(callback, {func: 1, ret: -1});
      t1 = this.div;
      t2 = this.span;
      t1.firstChild ? t1.removeChild(t2) : t1.appendChild(t2);
    },
    $signature: 114
  };
  P._AsyncRun__scheduleImmediateJsOverride_internalCallback.prototype = {
    call$0: function() {
      this.callback.call$0();
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 0
  };
  P._AsyncRun__scheduleImmediateWithSetImmediate_internalCallback.prototype = {
    call$0: function() {
      this.callback.call$0();
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 0
  };
  P._TimerImpl.prototype = {
    _TimerImpl$2: function(milliseconds, callback) {
      if (self.setTimeout != null)
        this._handle = self.setTimeout(H.convertDartClosureToJS(new P._TimerImpl_internalCallback(this, callback), 0), milliseconds);
      else
        throw H.wrapException(P.UnsupportedError$("`setTimeout()` not found."));
    },
    _TimerImpl$periodic$2: function(milliseconds, callback) {
      if (self.setTimeout != null)
        this._handle = self.setInterval(H.convertDartClosureToJS(new P._TimerImpl$periodic_closure(this, milliseconds, Date.now(), callback), 0), milliseconds);
      else
        throw H.wrapException(P.UnsupportedError$("Periodic timer."));
    },
    cancel$0: function(_) {
      var t1;
      if (self.setTimeout != null) {
        t1 = this._handle;
        if (t1 == null)
          return;
        if (this._once)
          self.clearTimeout(t1);
        else
          self.clearInterval(t1);
        this._handle = null;
      } else
        throw H.wrapException(P.UnsupportedError$("Canceling a timer."));
    },
    $isTimer: 1
  };
  P._TimerImpl_internalCallback.prototype = {
    call$0: function() {
      var t1 = this.$this;
      t1._handle = null;
      t1._tick = 1;
      this.callback.call$0();
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 1
  };
  P._TimerImpl$periodic_closure.prototype = {
    call$0: function() {
      var duration, _this = this,
        t1 = _this.$this,
        tick = t1._tick + 1,
        t2 = _this.milliseconds;
      if (t2 > 0) {
        duration = Date.now() - _this.start;
        if (duration > (tick + 1) * t2)
          tick = C.JSInt_methods.$tdiv(duration, t2);
      }
      t1._tick = tick;
      _this.callback.call$1(t1);
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 0
  };
  P._AsyncAwaitCompleter.prototype = {
    complete$1: function(_, value) {
      var t1, _this = this;
      H.futureOrCheck(value, {futureOr: 1, type: H.getTypeArgumentByIndex(_this, 0)});
      if (_this.isSync)
        _this._completer.complete$1(0, value);
      else if (H.checkSubtype(value, "$isFuture", _this.$ti, "$asFuture")) {
        t1 = _this._completer;
        value.then$1$2$onError(t1.get$complete(t1), t1.get$completeError(), -1);
      } else
        P.scheduleMicrotask(new P._AsyncAwaitCompleter_complete_closure(_this, value));
    },
    completeError$2: function(e, st) {
      if (this.isSync)
        this._completer.completeError$2(e, st);
      else
        P.scheduleMicrotask(new P._AsyncAwaitCompleter_completeError_closure(this, e, st));
    },
    $isCompleter: 1
  };
  P._AsyncAwaitCompleter_complete_closure.prototype = {
    call$0: function() {
      this.$this._completer.complete$1(0, this.value);
    },
    $signature: 0
  };
  P._AsyncAwaitCompleter_completeError_closure.prototype = {
    call$0: function() {
      this.$this._completer.completeError$2(this.e, this.st);
    },
    $signature: 0
  };
  P._awaitOnObject_closure.prototype = {
    call$1: function(result) {
      return this.bodyFunction.call$2(0, result);
    },
    $signature: 7
  };
  P._awaitOnObject_closure0.prototype = {
    call$2: function(error, stackTrace) {
      this.bodyFunction.call$2(1, new H.ExceptionAndStackTrace(error, H.interceptedTypeCheck(stackTrace, "$isStackTrace")));
    },
    "call*": "call$2",
    $requiredArgCount: 2,
    $signature: 29
  };
  P._wrapJsFunctionForAsync_closure.prototype = {
    call$2: function(errorCode, result) {
      this.$protected(H.intTypeCheck(errorCode), result);
    },
    $signature: 81
  };
  P._asyncStarHelper_closure.prototype = {
    call$0: function() {
      var t1 = this.controller,
        t2 = t1.controller,
        t3 = t2._state;
      if ((t3 & 1) !== 0 ? (t2.get$_subscription()._state & 4) !== 0 : (t3 & 2) === 0) {
        t1.isSuspended = true;
        return;
      }
      this.bodyFunctionOrErrorCode.call$2(null, 0);
    },
    $signature: 0
  };
  P._asyncStarHelper_closure0.prototype = {
    call$1: function(_) {
      var errorCode = this.controller.cancelationCompleter != null ? 2 : 0;
      this.bodyFunctionOrErrorCode.call$2(errorCode, null);
    },
    $signature: 6
  };
  P._AsyncStarStreamController.prototype = {
    add$1: function(_, $event) {
      return this.controller.add$1(0, H.assertSubtypeOfRuntimeType($event, H.getTypeArgumentByIndex(this, 0)));
    },
    _AsyncStarStreamController$1: function(body, $T) {
      var t1 = new P._AsyncStarStreamController__resumeBody(body);
      this.set$controller(0, P.StreamController_StreamController(new P._AsyncStarStreamController_closure(this, body), new P._AsyncStarStreamController_closure0(t1), null, new P._AsyncStarStreamController_closure1(this, t1), false, $T));
    },
    set$controller: function(_, controller) {
      this.controller = H.assertSubtype(controller, "$isStreamController", this.$ti, "$asStreamController");
    }
  };
  P._AsyncStarStreamController__resumeBody.prototype = {
    call$0: function() {
      P.scheduleMicrotask(new P._AsyncStarStreamController__resumeBody_closure(this.body));
    },
    $signature: 0
  };
  P._AsyncStarStreamController__resumeBody_closure.prototype = {
    call$0: function() {
      this.body.call$2(0, null);
    },
    $signature: 0
  };
  P._AsyncStarStreamController_closure0.prototype = {
    call$0: function() {
      this._resumeBody.call$0();
    },
    $signature: 0
  };
  P._AsyncStarStreamController_closure1.prototype = {
    call$0: function() {
      var t1 = this.$this;
      if (t1.isSuspended) {
        t1.isSuspended = false;
        this._resumeBody.call$0();
      }
    },
    $signature: 0
  };
  P._AsyncStarStreamController_closure.prototype = {
    call$0: function() {
      var t1 = this.$this;
      if ((t1.controller._state & 4) === 0) {
        t1.cancelationCompleter = new P._AsyncCompleter(new P._Future($.Zone__current, [null]), [null]);
        if (t1.isSuspended) {
          t1.isSuspended = false;
          P.scheduleMicrotask(new P._AsyncStarStreamController__closure(this.body));
        }
        return t1.cancelationCompleter.future;
      }
    },
    $signature: 30
  };
  P._AsyncStarStreamController__closure.prototype = {
    call$0: function() {
      this.body.call$2(2, null);
    },
    $signature: 0
  };
  P._IterationMarker.prototype = {
    toString$0: function(_) {
      return "IterationMarker(" + this.state + ", " + H.S(this.value) + ")";
    }
  };
  P._SyncStarIterator.prototype = {
    get$current: function(_) {
      var t1 = this._nestedIterator;
      if (t1 == null)
        return this._async$_current;
      return H.assertSubtypeOfRuntimeType(t1.get$current(t1), H.getTypeArgumentByIndex(this, 0));
    },
    moveNext$0: function() {
      var t1, value, state, inner, _this = this;
      for (; true;) {
        t1 = _this._nestedIterator;
        if (t1 != null)
          if (t1.moveNext$0())
            return true;
          else
            _this._nestedIterator = null;
        value = function(body, SUCCESS, ERROR) {
          var errorValue,
            errorCode = SUCCESS;
          while (true)
            try {
              return body(errorCode, errorValue);
            } catch (error) {
              errorValue = error;
              errorCode = ERROR;
            }
        }(_this._body, 0, 1);
        if (value instanceof P._IterationMarker) {
          state = value.state;
          if (state === 2) {
            t1 = _this._suspendedBodies;
            if (t1 == null || t1.length === 0) {
              _this.set$_async$_current(null);
              return false;
            }
            if (0 >= t1.length)
              return H.ioore(t1, -1);
            _this._body = t1.pop();
            continue;
          } else {
            t1 = value.value;
            if (state === 3)
              throw t1;
            else {
              inner = J.get$iterator$ax(t1);
              if (!!inner.$is_SyncStarIterator) {
                t1 = _this._suspendedBodies;
                if (t1 == null)
                  t1 = _this._suspendedBodies = [];
                C.JSArray_methods.add$1(t1, _this._body);
                _this._body = inner._body;
                continue;
              } else {
                _this._nestedIterator = inner;
                continue;
              }
            }
          }
        } else {
          _this.set$_async$_current(value);
          return true;
        }
      }
      return false;
    },
    set$_async$_current: function(_current) {
      this._async$_current = H.assertSubtypeOfRuntimeType(_current, H.getTypeArgumentByIndex(this, 0));
    },
    $isIterator: 1
  };
  P._SyncStarIterable.prototype = {
    get$iterator: function(_) {
      return new P._SyncStarIterator(this._outerHelper(), this.$ti);
    }
  };
  P.Future.prototype = {};
  P.Future_Future$delayed_closure.prototype = {
    call$0: function() {
      this.result._complete$1(null);
    },
    $signature: 0
  };
  P.Future_wait_handleError.prototype = {
    call$2: function(theError, theStackTrace) {
      var t1, t2, _this = this;
      H.interceptedTypeCheck(theStackTrace, "$isStackTrace");
      t1 = _this._box_0;
      t2 = --t1.remaining;
      if (t1.values != null) {
        t1.values = null;
        if (t1.remaining === 0 || _this.eagerError)
          _this.result._completeError$2(theError, theStackTrace);
        else {
          t1.error = theError;
          t1.stackTrace = theStackTrace;
        }
      } else if (t2 === 0 && !_this.eagerError)
        _this.result._completeError$2(t1.error, t1.stackTrace);
    },
    "call*": "call$2",
    $requiredArgCount: 2,
    $signature: 29
  };
  P.Future_wait_closure.prototype = {
    call$1: function(value) {
      var t1, t2, _this = this;
      H.assertSubtypeOfRuntimeType(value, _this.T);
      t1 = _this._box_0;
      --t1.remaining;
      t2 = t1.values;
      if (t2 != null) {
        C.JSArray_methods.$indexSet(t2, _this.pos, value);
        if (t1.remaining === 0)
          _this.result._completeWithValue$1(t1.values);
      } else if (t1.remaining === 0 && !_this.eagerError)
        _this.result._completeError$2(t1.error, t1.stackTrace);
    },
    $signature: function() {
      return {func: 1, ret: P.Null, args: [this.T]};
    }
  };
  P._Completer.prototype = {
    completeError$2: function(error, stackTrace) {
      H.interceptedTypeCheck(stackTrace, "$isStackTrace");
      if (error == null)
        error = new P.NullThrownError();
      if (this.future._state !== 0)
        throw H.wrapException(P.StateError$("Future already completed"));
      $.Zone__current.toString;
      this._completeError$2(error, stackTrace);
    },
    completeError$1: function(error) {
      return this.completeError$2(error, null);
    },
    $isCompleter: 1
  };
  P._AsyncCompleter.prototype = {
    complete$1: function(_, value) {
      var t1;
      H.futureOrCheck(value, {futureOr: 1, type: H.getTypeArgumentByIndex(this, 0)});
      t1 = this.future;
      if (t1._state !== 0)
        throw H.wrapException(P.StateError$("Future already completed"));
      t1._asyncComplete$1(value);
    },
    complete$0: function($receiver) {
      return this.complete$1($receiver, null);
    },
    _completeError$2: function(error, stackTrace) {
      this.future._asyncCompleteError$2(error, stackTrace);
    }
  };
  P._SyncCompleter.prototype = {
    complete$1: function(_, value) {
      var t1;
      H.futureOrCheck(value, {futureOr: 1, type: H.getTypeArgumentByIndex(this, 0)});
      t1 = this.future;
      if (t1._state !== 0)
        throw H.wrapException(P.StateError$("Future already completed"));
      t1._complete$1(value);
    },
    complete$0: function($receiver) {
      return this.complete$1($receiver, null);
    },
    _completeError$2: function(error, stackTrace) {
      this.future._completeError$2(error, stackTrace);
    }
  };
  P._FutureListener.prototype = {
    matchesErrorTest$1: function(asyncError) {
      if (this.state !== 6)
        return true;
      return this.result._zone.runUnary$2$2(H.functionTypeCheck(this.callback, {func: 1, ret: P.bool, args: [P.Object]}), asyncError.error, P.bool, P.Object);
    },
    handleError$1: function(asyncError) {
      var errorCallback = this.errorCallback,
        t1 = P.Object,
        t2 = {futureOr: 1, type: H.getTypeArgumentByIndex(this, 1)},
        t3 = this.result._zone;
      if (H.functionTypeTest(errorCallback, {func: 1, args: [P.Object, P.StackTrace]}))
        return H.futureOrCheck(t3.runBinary$3$3(errorCallback, asyncError.error, asyncError.stackTrace, null, t1, P.StackTrace), t2);
      else
        return H.futureOrCheck(t3.runUnary$2$2(H.functionTypeCheck(errorCallback, {func: 1, args: [P.Object]}), asyncError.error, null, t1), t2);
    }
  };
  P._Future.prototype = {
    then$1$2$onError: function(f, onError, $R) {
      var currentZone,
        t1 = H.getTypeArgumentByIndex(this, 0);
      H.functionTypeCheck(f, {func: 1, ret: {futureOr: 1, type: $R}, args: [t1]});
      currentZone = $.Zone__current;
      if (currentZone !== C.C__RootZone) {
        currentZone.toString;
        H.functionTypeCheck(f, {func: 1, ret: {futureOr: 1, type: $R}, args: [t1]});
        if (onError != null)
          onError = P._registerErrorHandler(onError, currentZone);
      }
      return this._thenNoZoneRegistration$1$2(f, onError, $R);
    },
    then$1$1: function(f, $R) {
      return this.then$1$2$onError(f, null, $R);
    },
    then$1: function(f) {
      return this.then$1$2$onError(f, null, null);
    },
    _thenNoZoneRegistration$1$2: function(f, onError, $E) {
      var result, t2,
        t1 = H.getTypeArgumentByIndex(this, 0);
      H.functionTypeCheck(f, {func: 1, ret: {futureOr: 1, type: $E}, args: [t1]});
      result = new P._Future($.Zone__current, [$E]);
      t2 = onError == null ? 1 : 3;
      this._addListener$1(new P._FutureListener(result, t2, f, onError, [t1, $E]));
      return result;
    },
    whenComplete$1: function(action) {
      var t1, result;
      H.functionTypeCheck(action, {func: 1});
      t1 = $.Zone__current;
      result = new P._Future(t1, this.$ti);
      if (t1 !== C.C__RootZone) {
        t1.toString;
        H.functionTypeCheck(action, {func: 1, ret: null});
      }
      t1 = H.getTypeArgumentByIndex(this, 0);
      this._addListener$1(new P._FutureListener(result, 8, action, null, [t1, t1]));
      return result;
    },
    _addListener$1: function(listener) {
      var source, _this = this,
        t1 = _this._state;
      if (t1 <= 1) {
        listener._nextListener = H.interceptedTypeCheck(_this._resultOrListeners, "$is_FutureListener");
        _this._resultOrListeners = listener;
      } else {
        if (t1 === 2) {
          source = H.interceptedTypeCheck(_this._resultOrListeners, "$is_Future");
          t1 = source._state;
          if (t1 < 4) {
            source._addListener$1(listener);
            return;
          }
          _this._state = t1;
          _this._resultOrListeners = source._resultOrListeners;
        }
        t1 = _this._zone;
        t1.toString;
        P._rootScheduleMicrotask(null, null, t1, H.functionTypeCheck(new P._Future__addListener_closure(_this, listener), {func: 1, ret: -1}));
      }
    },
    _prependListeners$1: function(listeners) {
      var t1, existingListeners, cursor, cursor0, source, _this = this, _box_0 = {};
      _box_0.listeners = listeners;
      if (listeners == null)
        return;
      t1 = _this._state;
      if (t1 <= 1) {
        existingListeners = H.interceptedTypeCheck(_this._resultOrListeners, "$is_FutureListener");
        cursor = _this._resultOrListeners = listeners;
        if (existingListeners != null) {
          for (; cursor0 = cursor._nextListener, cursor0 != null; cursor = cursor0)
            ;
          cursor._nextListener = existingListeners;
        }
      } else {
        if (t1 === 2) {
          source = H.interceptedTypeCheck(_this._resultOrListeners, "$is_Future");
          t1 = source._state;
          if (t1 < 4) {
            source._prependListeners$1(listeners);
            return;
          }
          _this._state = t1;
          _this._resultOrListeners = source._resultOrListeners;
        }
        _box_0.listeners = _this._reverseListeners$1(listeners);
        t1 = _this._zone;
        t1.toString;
        P._rootScheduleMicrotask(null, null, t1, H.functionTypeCheck(new P._Future__prependListeners_closure(_box_0, _this), {func: 1, ret: -1}));
      }
    },
    _removeListeners$0: function() {
      var current = H.interceptedTypeCheck(this._resultOrListeners, "$is_FutureListener");
      this._resultOrListeners = null;
      return this._reverseListeners$1(current);
    },
    _reverseListeners$1: function(listeners) {
      var current, prev, next;
      for (current = listeners, prev = null; current != null; prev = current, current = next) {
        next = current._nextListener;
        current._nextListener = prev;
      }
      return prev;
    },
    _complete$1: function(value) {
      var t2, listeners, _this = this,
        t1 = H.getTypeArgumentByIndex(_this, 0);
      H.futureOrCheck(value, {futureOr: 1, type: t1});
      t2 = _this.$ti;
      if (H.checkSubtype(value, "$isFuture", t2, "$asFuture"))
        if (H.checkSubtype(value, "$is_Future", t2, null))
          P._Future__chainCoreFuture(value, _this);
        else
          P._Future__chainForeignFuture(value, _this);
      else {
        listeners = _this._removeListeners$0();
        H.assertSubtypeOfRuntimeType(value, t1);
        _this._state = 4;
        _this._resultOrListeners = value;
        P._Future__propagateToListeners(_this, listeners);
      }
    },
    _completeWithValue$1: function(value) {
      var listeners, _this = this;
      H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(_this, 0));
      listeners = _this._removeListeners$0();
      _this._state = 4;
      _this._resultOrListeners = value;
      P._Future__propagateToListeners(_this, listeners);
    },
    _completeError$2: function(error, stackTrace) {
      var listeners, _this = this;
      H.interceptedTypeCheck(stackTrace, "$isStackTrace");
      listeners = _this._removeListeners$0();
      _this._state = 8;
      _this._resultOrListeners = new P.AsyncError(error, stackTrace);
      P._Future__propagateToListeners(_this, listeners);
    },
    _completeError$1: function(error) {
      return this._completeError$2(error, null);
    },
    _asyncComplete$1: function(value) {
      var t1, _this = this;
      H.futureOrCheck(value, {futureOr: 1, type: H.getTypeArgumentByIndex(_this, 0)});
      if (H.checkSubtype(value, "$isFuture", _this.$ti, "$asFuture")) {
        _this._chainFuture$1(value);
        return;
      }
      _this._state = 1;
      t1 = _this._zone;
      t1.toString;
      P._rootScheduleMicrotask(null, null, t1, H.functionTypeCheck(new P._Future__asyncComplete_closure(_this, value), {func: 1, ret: -1}));
    },
    _chainFuture$1: function(value) {
      var _this = this,
        t1 = _this.$ti;
      H.assertSubtype(value, "$isFuture", t1, "$asFuture");
      if (H.checkSubtype(value, "$is_Future", t1, null)) {
        if (value._state === 8) {
          _this._state = 1;
          t1 = _this._zone;
          t1.toString;
          P._rootScheduleMicrotask(null, null, t1, H.functionTypeCheck(new P._Future__chainFuture_closure(_this, value), {func: 1, ret: -1}));
        } else
          P._Future__chainCoreFuture(value, _this);
        return;
      }
      P._Future__chainForeignFuture(value, _this);
    },
    _asyncCompleteError$2: function(error, stackTrace) {
      var t1;
      H.interceptedTypeCheck(stackTrace, "$isStackTrace");
      this._state = 1;
      t1 = this._zone;
      t1.toString;
      P._rootScheduleMicrotask(null, null, t1, H.functionTypeCheck(new P._Future__asyncCompleteError_closure(this, error, stackTrace), {func: 1, ret: -1}));
    },
    $isFuture: 1
  };
  P._Future__addListener_closure.prototype = {
    call$0: function() {
      P._Future__propagateToListeners(this.$this, this.listener);
    },
    $signature: 0
  };
  P._Future__prependListeners_closure.prototype = {
    call$0: function() {
      P._Future__propagateToListeners(this.$this, this._box_0.listeners);
    },
    $signature: 0
  };
  P._Future__chainForeignFuture_closure.prototype = {
    call$1: function(value) {
      var t1 = this.target;
      t1._state = 0;
      t1._complete$1(value);
    },
    $signature: 6
  };
  P._Future__chainForeignFuture_closure0.prototype = {
    call$2: function(error, stackTrace) {
      H.interceptedTypeCheck(stackTrace, "$isStackTrace");
      this.target._completeError$2(error, stackTrace);
    },
    call$1: function(error) {
      return this.call$2(error, null);
    },
    "call*": "call$2",
    $defaultValues: function() {
      return [null];
    },
    $signature: 201
  };
  P._Future__chainForeignFuture_closure1.prototype = {
    call$0: function() {
      this.target._completeError$2(this.e, this.s);
    },
    $signature: 0
  };
  P._Future__asyncComplete_closure.prototype = {
    call$0: function() {
      var t1 = this.$this;
      t1._completeWithValue$1(H.assertSubtypeOfRuntimeType(this.value, H.getTypeArgumentByIndex(t1, 0)));
    },
    $signature: 0
  };
  P._Future__chainFuture_closure.prototype = {
    call$0: function() {
      P._Future__chainCoreFuture(this.value, this.$this);
    },
    $signature: 0
  };
  P._Future__asyncCompleteError_closure.prototype = {
    call$0: function() {
      this.$this._completeError$2(this.error, this.stackTrace);
    },
    $signature: 0
  };
  P._Future__propagateToListeners_handleWhenCompleteCallback.prototype = {
    call$0: function() {
      var e, s, t1, exception, t2, originalSource, _this = this, completeResult = null;
      try {
        t1 = _this.listener;
        completeResult = t1.result._zone.run$1$1(H.functionTypeCheck(t1.callback, {func: 1}), null);
      } catch (exception) {
        e = H.unwrapException(exception);
        s = H.getTraceFromException(exception);
        if (_this.hasError) {
          t1 = H.interceptedTypeCheck(_this._box_1.source._resultOrListeners, "$isAsyncError").error;
          t2 = e;
          t2 = t1 == null ? t2 == null : t1 === t2;
          t1 = t2;
        } else
          t1 = false;
        t2 = _this._box_0;
        if (t1)
          t2.listenerValueOrError = H.interceptedTypeCheck(_this._box_1.source._resultOrListeners, "$isAsyncError");
        else
          t2.listenerValueOrError = new P.AsyncError(e, s);
        t2.listenerHasError = true;
        return;
      }
      if (!!J.getInterceptor$(completeResult).$isFuture) {
        if (completeResult instanceof P._Future && completeResult._state >= 4) {
          if (completeResult._state === 8) {
            t1 = _this._box_0;
            t1.listenerValueOrError = H.interceptedTypeCheck(completeResult._resultOrListeners, "$isAsyncError");
            t1.listenerHasError = true;
          }
          return;
        }
        originalSource = _this._box_1.source;
        t1 = _this._box_0;
        t1.listenerValueOrError = completeResult.then$1$1(new P._Future__propagateToListeners_handleWhenCompleteCallback_closure(originalSource), null);
        t1.listenerHasError = false;
      }
    },
    $signature: 1
  };
  P._Future__propagateToListeners_handleWhenCompleteCallback_closure.prototype = {
    call$1: function(_) {
      return this.originalSource;
    },
    $signature: 186
  };
  P._Future__propagateToListeners_handleValueCallback.prototype = {
    call$0: function() {
      var e, s, t1, t2, t3, t4, exception, _this = this;
      try {
        t1 = _this.listener;
        t2 = H.getTypeArgumentByIndex(t1, 0);
        t3 = H.assertSubtypeOfRuntimeType(_this.sourceResult, t2);
        t4 = H.getTypeArgumentByIndex(t1, 1);
        _this._box_0.listenerValueOrError = t1.result._zone.runUnary$2$2(H.functionTypeCheck(t1.callback, {func: 1, ret: {futureOr: 1, type: t4}, args: [t2]}), t3, {futureOr: 1, type: t4}, t2);
      } catch (exception) {
        e = H.unwrapException(exception);
        s = H.getTraceFromException(exception);
        t1 = _this._box_0;
        t1.listenerValueOrError = new P.AsyncError(e, s);
        t1.listenerHasError = true;
      }
    },
    $signature: 1
  };
  P._Future__propagateToListeners_handleError.prototype = {
    call$0: function() {
      var asyncError, e, s, t1, t2, exception, t3, t4, _this = this;
      try {
        asyncError = H.interceptedTypeCheck(_this._box_1.source._resultOrListeners, "$isAsyncError");
        t1 = _this.listener;
        if (H.boolConversionCheck(t1.matchesErrorTest$1(asyncError)) && t1.errorCallback != null) {
          t2 = _this._box_0;
          t2.listenerValueOrError = t1.handleError$1(asyncError);
          t2.listenerHasError = false;
        }
      } catch (exception) {
        e = H.unwrapException(exception);
        s = H.getTraceFromException(exception);
        t1 = H.interceptedTypeCheck(_this._box_1.source._resultOrListeners, "$isAsyncError");
        t2 = t1.error;
        t3 = e;
        t4 = _this._box_0;
        if (t2 == null ? t3 == null : t2 === t3)
          t4.listenerValueOrError = t1;
        else
          t4.listenerValueOrError = new P.AsyncError(e, s);
        t4.listenerHasError = true;
      }
    },
    $signature: 1
  };
  P._AsyncCallbackEntry.prototype = {};
  P.Stream.prototype = {
    expand$1: function(_, convert) {
      var t1 = H.getRuntimeTypeArgument(this, "Stream", 0);
      return new P._ExpandStream(H.functionTypeCheck(convert, {func: 1, ret: [P.Iterable,,], args: [t1]}), this, [t1, null]);
    },
    get$length: function(_) {
      var t1 = {},
        future = new P._Future($.Zone__current, [P.int]);
      t1.count = 0;
      this.listen$4$cancelOnError$onDone$onError(new P.Stream_length_closure(t1, this), true, new P.Stream_length_closure0(t1, future), future.get$_completeError());
      return future;
    },
    toList$0: function(_) {
      var t1 = H.getRuntimeTypeArgument(this, "Stream", 0),
        result = H.setRuntimeTypeInfo([], [t1]),
        future = new P._Future($.Zone__current, [[P.List, t1]]);
      this.listen$4$cancelOnError$onDone$onError(new P.Stream_toList_closure(this, result), true, new P.Stream_toList_closure0(future, result), future.get$_completeError());
      return future;
    },
    skip$1: function(_, count) {
      P.RangeError_checkNotNegative(count, "count");
      return new P._SkipStream(count, this, [H.getRuntimeTypeArgument(this, "Stream", 0)]);
    },
    get$last: function(_) {
      var t1 = {},
        future = new P._Future($.Zone__current, [H.getRuntimeTypeArgument(this, "Stream", 0)]);
      t1.result = null;
      t1.foundResult = false;
      this.listen$4$cancelOnError$onDone$onError(new P.Stream_last_closure(t1, this), true, new P.Stream_last_closure0(t1, future), future.get$_completeError());
      return future;
    },
    lastWhere$2$orElse: function(_, test, orElse) {
      var future, _this = this, t1 = {},
        t2 = H.getRuntimeTypeArgument(_this, "Stream", 0);
      H.functionTypeCheck(test, {func: 1, ret: P.bool, args: [t2]});
      H.functionTypeCheck(orElse, {func: 1, ret: t2});
      future = new P._Future($.Zone__current, [t2]);
      t1.result = null;
      t1.foundResult = false;
      t1.subscription = null;
      t1.subscription = _this.listen$4$cancelOnError$onDone$onError(new P.Stream_lastWhere_closure(t1, _this, test, future), true, new P.Stream_lastWhere_closure0(t1, _this, future, orElse), future.get$_completeError());
      return future;
    }
  };
  P.Stream_Stream$fromIterable_closure.prototype = {
    call$0: function() {
      return new P._IterablePendingEvents(J.get$iterator$ax(this.elements), [this.T]);
    },
    $signature: function() {
      return {func: 1, ret: [P._IterablePendingEvents, this.T]};
    }
  };
  P.Stream_Stream$periodic_sendEvent.prototype = {
    call$0: function() {
      var data, e, s, exception, _this = this;
      _this.watch.reset$0(0);
      data = null;
      try {
        data = _this.computation.call$1(_this._box_0.computationCount++);
      } catch (exception) {
        e = H.unwrapException(exception);
        s = H.getTraceFromException(exception);
        _this._box_0.controller.addError$2(e, s);
        return;
      }
      _this._box_0.controller.add$1(0, data);
    },
    $signature: 1
  };
  P.Stream_Stream$periodic_startPeriodicTimer.prototype = {
    call$0: function() {
      this._box_0.timer = P.Timer_Timer$periodic(this.period, new P.Stream_Stream$periodic_startPeriodicTimer_closure(this.sendEvent));
    },
    $signature: 1
  };
  P.Stream_Stream$periodic_startPeriodicTimer_closure.prototype = {
    call$1: function(timer) {
      H.interceptedTypeCheck(timer, "$isTimer");
      this.sendEvent.call$0();
    },
    $signature: 48
  };
  P.Stream_Stream$periodic_closure0.prototype = {
    call$0: function() {
      this.watch.start$0(0);
      this.startPeriodicTimer.call$0();
    },
    $signature: 0
  };
  P.Stream_Stream$periodic_closure1.prototype = {
    call$0: function() {
      var t1 = this._box_0;
      t1.timer.cancel$0(0);
      t1.timer = null;
      this.watch.stop$0(0);
    },
    $signature: 0
  };
  P.Stream_Stream$periodic_closure2.prototype = {
    call$0: function() {
      var _this = this,
        t1 = _this.watch,
        elapsed = P.Duration$(t1.get$elapsedMicroseconds(), 0, 0);
      t1.start$0(0);
      t1 = _this._box_0;
      t1.timer = P.Timer_Timer(new P.Duration(_this.period._duration - elapsed._duration), new P.Stream_Stream$periodic__closure(t1, _this.startPeriodicTimer, _this.sendEvent));
    },
    $signature: 0
  };
  P.Stream_Stream$periodic__closure.prototype = {
    call$0: function() {
      this._box_0.timer = null;
      this.startPeriodicTimer.call$0();
      this.sendEvent.call$0();
    },
    $signature: 0
  };
  P.Stream_Stream$periodic_closure.prototype = {
    call$0: function() {
      var t1 = this._box_0,
        t2 = t1.timer;
      if (t2 != null)
        t2.cancel$0(0);
      t1.timer = null;
      return $.$get$Future__nullFuture();
    },
    $signature: 118
  };
  P.Stream_length_closure.prototype = {
    call$1: function(_) {
      H.assertSubtypeOfRuntimeType(_, H.getRuntimeTypeArgument(this.$this, "Stream", 0));
      ++this._box_0.count;
    },
    $signature: function() {
      return {func: 1, ret: P.Null, args: [H.getRuntimeTypeArgument(this.$this, "Stream", 0)]};
    }
  };
  P.Stream_length_closure0.prototype = {
    call$0: function() {
      this.future._complete$1(this._box_0.count);
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 0
  };
  P.Stream_toList_closure.prototype = {
    call$1: function(data) {
      C.JSArray_methods.add$1(this.result, H.assertSubtypeOfRuntimeType(data, H.getRuntimeTypeArgument(this.$this, "Stream", 0)));
    },
    $signature: function() {
      return {func: 1, ret: P.Null, args: [H.getRuntimeTypeArgument(this.$this, "Stream", 0)]};
    }
  };
  P.Stream_toList_closure0.prototype = {
    call$0: function() {
      this.future._complete$1(this.result);
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 0
  };
  P.Stream_last_closure.prototype = {
    call$1: function(value) {
      var t1;
      H.assertSubtypeOfRuntimeType(value, H.getRuntimeTypeArgument(this.$this, "Stream", 0));
      t1 = this._box_0;
      t1.foundResult = true;
      t1.result = value;
    },
    $signature: function() {
      return {func: 1, ret: P.Null, args: [H.getRuntimeTypeArgument(this.$this, "Stream", 0)]};
    }
  };
  P.Stream_last_closure0.prototype = {
    call$0: function() {
      var e, s, exception,
        t1 = this._box_0;
      if (t1.foundResult) {
        this.future._complete$1(t1.result);
        return;
      }
      try {
        t1 = H.IterableElementError_noElement();
        throw H.wrapException(t1);
      } catch (exception) {
        e = H.unwrapException(exception);
        s = H.getTraceFromException(exception);
        P._completeWithErrorCallback(this.future, e, s);
      }
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 0
  };
  P.Stream_lastWhere_closure.prototype = {
    call$1: function(value) {
      var t1, _this = this;
      H.assertSubtypeOfRuntimeType(value, H.getRuntimeTypeArgument(_this.$this, "Stream", 0));
      t1 = _this._box_0;
      P._runUserCode(new P.Stream_lastWhere__closure(_this.test, value), new P.Stream_lastWhere__closure0(t1, value), P._cancelAndErrorClosure(t1.subscription, _this.future), P.bool);
    },
    $signature: function() {
      return {func: 1, ret: P.Null, args: [H.getRuntimeTypeArgument(this.$this, "Stream", 0)]};
    }
  };
  P.Stream_lastWhere__closure.prototype = {
    call$0: function() {
      return true === this.test.call$1(this.value);
    },
    $signature: 26
  };
  P.Stream_lastWhere__closure0.prototype = {
    call$1: function(isMatch) {
      var t1;
      if (H.boolConversionCheck(H.boolTypeCheck(isMatch))) {
        t1 = this._box_0;
        t1.foundResult = true;
        t1.result = this.value;
      }
    },
    $signature: 95
  };
  P.Stream_lastWhere_closure0.prototype = {
    call$0: function() {
      var _this = this,
        t1 = _this._box_0;
      if (t1.foundResult) {
        _this.future._complete$1(t1.result);
        return;
      }
      t1 = _this.future;
      P._runUserCode(_this.orElse, t1.get$_complete(), t1.get$_completeError(), H.getRuntimeTypeArgument(_this.$this, "Stream", 0));
      return;
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 0
  };
  P.StreamSubscription.prototype = {};
  P.StreamTransformerBase.prototype = {};
  P._StreamController.prototype = {
    get$_pendingEvents: function() {
      var t1, _this = this;
      if ((_this._state & 8) === 0)
        return H.assertSubtype(_this._varData, "$is_PendingEvents", _this.$ti, "$as_PendingEvents");
      t1 = _this.$ti;
      return H.assertSubtype(H.assertSubtype(_this._varData, "$is_StreamControllerAddStreamState", t1, "$as_StreamControllerAddStreamState").varData, "$is_PendingEvents", t1, "$as_PendingEvents");
    },
    _ensurePendingEvents$0: function() {
      var t1, state, t2, _this = this;
      if ((_this._state & 8) === 0) {
        t1 = _this._varData;
        if (t1 == null)
          t1 = _this._varData = new P._StreamImplEvents(_this.$ti);
        return H.assertSubtype(t1, "$is_StreamImplEvents", _this.$ti, "$as_StreamImplEvents");
      }
      t1 = _this.$ti;
      state = H.assertSubtype(_this._varData, "$is_StreamControllerAddStreamState", t1, "$as_StreamControllerAddStreamState");
      t2 = state.varData;
      return H.assertSubtype(t2 == null ? state.varData = new P._StreamImplEvents(t1) : t2, "$is_StreamImplEvents", t1, "$as_StreamImplEvents");
    },
    get$_subscription: function() {
      var t1, _this = this;
      if ((_this._state & 8) !== 0) {
        t1 = _this.$ti;
        return H.assertSubtype(H.assertSubtype(_this._varData, "$is_StreamControllerAddStreamState", t1, "$as_StreamControllerAddStreamState").varData, "$is_ControllerSubscription", t1, "$as_ControllerSubscription");
      }
      return H.assertSubtype(_this._varData, "$is_ControllerSubscription", _this.$ti, "$as_ControllerSubscription");
    },
    _badEventState$0: function() {
      if ((this._state & 4) !== 0)
        return new P.StateError("Cannot add event after closing");
      return new P.StateError("Cannot add event while adding a stream");
    },
    addStream$2$cancelOnError: function(_, source, cancelOnError) {
      var t2, t3, t4, t5, _this = this,
        t1 = _this.$ti;
      H.assertSubtype(source, "$isStream", t1, "$asStream");
      t2 = _this._state;
      if (t2 >= 4)
        throw H.wrapException(_this._badEventState$0());
      if ((t2 & 2) !== 0) {
        t1 = new P._Future($.Zone__current, [null]);
        t1._asyncComplete$1(null);
        return t1;
      }
      t2 = _this._varData;
      t3 = new P._Future($.Zone__current, [null]);
      t4 = source.listen$4$cancelOnError$onDone$onError(_this.get$_async$_add(_this), false, _this.get$_close(), _this.get$_addError());
      t5 = _this._state;
      if ((t5 & 1) !== 0 ? (_this.get$_subscription()._state & 4) !== 0 : (t5 & 2) === 0)
        t4.pause$0(0);
      _this._varData = new P._StreamControllerAddStreamState(t2, t3, t4, t1);
      _this._state |= 8;
      return t3;
    },
    _ensureDoneFuture$0: function() {
      var t1 = this._doneFuture;
      if (t1 == null)
        t1 = this._doneFuture = (this._state & 2) !== 0 ? $.$get$Future__nullFuture() : new P._Future($.Zone__current, [null]);
      return t1;
    },
    add$1: function(_, value) {
      var _this = this;
      H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(_this, 0));
      if (_this._state >= 4)
        throw H.wrapException(_this._badEventState$0());
      _this._async$_add$1(0, value);
    },
    addError$2: function(error, stackTrace) {
      H.interceptedTypeCheck(stackTrace, "$isStackTrace");
      if (this._state >= 4)
        throw H.wrapException(this._badEventState$0());
      if (error == null)
        error = new P.NullThrownError();
      $.Zone__current.toString;
      this._addError$2(error, stackTrace);
    },
    close$0: function(_) {
      var _this = this,
        t1 = _this._state;
      if ((t1 & 4) !== 0)
        return _this._ensureDoneFuture$0();
      if (t1 >= 4)
        throw H.wrapException(_this._badEventState$0());
      t1 = _this._state = t1 | 4;
      if ((t1 & 1) !== 0)
        _this._sendDone$0();
      else if ((t1 & 3) === 0)
        _this._ensurePendingEvents$0().add$1(0, C.C__DelayedDone);
      return _this._ensureDoneFuture$0();
    },
    _async$_add$1: function(_, value) {
      var t1, _this = this;
      H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(_this, 0));
      t1 = _this._state;
      if ((t1 & 1) !== 0)
        _this._sendData$1(value);
      else if ((t1 & 3) === 0)
        _this._ensurePendingEvents$0().add$1(0, new P._DelayedData(value, _this.$ti));
    },
    _addError$2: function(error, stackTrace) {
      var t1;
      H.interceptedTypeCheck(stackTrace, "$isStackTrace");
      t1 = this._state;
      if ((t1 & 1) !== 0)
        this._sendError$2(error, stackTrace);
      else if ((t1 & 3) === 0)
        this._ensurePendingEvents$0().add$1(0, new P._DelayedError(error, stackTrace));
    },
    _close$0: function() {
      var _this = this,
        addState = H.assertSubtype(_this._varData, "$is_StreamControllerAddStreamState", _this.$ti, "$as_StreamControllerAddStreamState");
      _this._varData = addState.varData;
      _this._state &= 4294967287;
      addState.addStreamFuture._asyncComplete$1(null);
    },
    _subscribe$4: function(onData, onError, onDone, cancelOnError) {
      var t2, t3, t4, subscription, pendingEvents, addState, _this = this,
        t1 = H.getTypeArgumentByIndex(_this, 0);
      H.functionTypeCheck(onData, {func: 1, ret: -1, args: [t1]});
      H.functionTypeCheck(onDone, {func: 1, ret: -1});
      if ((_this._state & 3) !== 0)
        throw H.wrapException(P.StateError$("Stream has already been listened to."));
      t2 = $.Zone__current;
      t3 = cancelOnError ? 1 : 0;
      t4 = _this.$ti;
      subscription = new P._ControllerSubscription(_this, t2, t3, t4);
      subscription._BufferingStreamSubscription$4(onData, onError, onDone, cancelOnError, t1);
      pendingEvents = _this.get$_pendingEvents();
      t1 = _this._state |= 1;
      if ((t1 & 8) !== 0) {
        addState = H.assertSubtype(_this._varData, "$is_StreamControllerAddStreamState", t4, "$as_StreamControllerAddStreamState");
        addState.varData = subscription;
        addState.addSubscription.resume$0(0);
      } else
        _this._varData = subscription;
      subscription._setPendingEvents$1(pendingEvents);
      subscription._guardCallback$1(new P._StreamController__subscribe_closure(_this));
      return subscription;
    },
    _recordCancel$1: function(subscription) {
      var result, e, s, exception, result0, _this = this,
        t1 = _this.$ti;
      H.assertSubtype(subscription, "$isStreamSubscription", t1, "$asStreamSubscription");
      result = null;
      if ((_this._state & 8) !== 0)
        result = H.assertSubtype(_this._varData, "$is_StreamControllerAddStreamState", t1, "$as_StreamControllerAddStreamState").cancel$0(0);
      _this._varData = null;
      _this._state = _this._state & 4294967286 | 2;
      if (result == null)
        try {
          result = H.interceptedTypeCheck(_this.onCancel.call$0(), "$isFuture");
        } catch (exception) {
          e = H.unwrapException(exception);
          s = H.getTraceFromException(exception);
          result0 = new P._Future($.Zone__current, [null]);
          result0._asyncCompleteError$2(e, s);
          result = result0;
        }
      else
        result = result.whenComplete$1(_this.onCancel);
      t1 = new P._StreamController__recordCancel_complete(_this);
      if (result != null)
        result = result.whenComplete$1(t1);
      else
        t1.call$0();
      return result;
    },
    $isStreamController: 1,
    $is_StreamControllerLifecycle: 1,
    $is_EventSink: 1,
    $is_EventDispatch: 1
  };
  P._StreamController__subscribe_closure.prototype = {
    call$0: function() {
      P._runGuarded(this.$this.onListen);
    },
    $signature: 0
  };
  P._StreamController__recordCancel_complete.prototype = {
    call$0: function() {
      var t1 = this.$this._doneFuture;
      if (t1 != null && t1._state === 0)
        t1._asyncComplete$1(null);
    },
    $signature: 1
  };
  P._SyncStreamControllerDispatch.prototype = {
    _sendData$1: function(data) {
      H.assertSubtypeOfRuntimeType(data, H.getTypeArgumentByIndex(this, 0));
      this.get$_subscription()._async$_add$1(0, data);
    },
    _sendError$2: function(error, stackTrace) {
      this.get$_subscription()._addError$2(error, stackTrace);
    },
    _sendDone$0: function() {
      this.get$_subscription()._close$0();
    }
  };
  P._AsyncStreamControllerDispatch.prototype = {
    _sendData$1: function(data) {
      var t1 = H.getTypeArgumentByIndex(this, 0);
      H.assertSubtypeOfRuntimeType(data, t1);
      this.get$_subscription()._addPending$1(new P._DelayedData(data, [t1]));
    },
    _sendError$2: function(error, stackTrace) {
      this.get$_subscription()._addPending$1(new P._DelayedError(error, stackTrace));
    },
    _sendDone$0: function() {
      this.get$_subscription()._addPending$1(C.C__DelayedDone);
    }
  };
  P._AsyncStreamController.prototype = {};
  P._SyncStreamController.prototype = {};
  P._ControllerStream.prototype = {
    _createSubscription$4: function(onData, onError, onDone, cancelOnError) {
      return this._async$_controller._subscribe$4(H.functionTypeCheck(onData, {func: 1, ret: -1, args: [H.getTypeArgumentByIndex(this, 0)]}), onError, H.functionTypeCheck(onDone, {func: 1, ret: -1}), cancelOnError);
    },
    get$hashCode: function(_) {
      return (H.Primitives_objectHashCode(this._async$_controller) ^ 892482866) >>> 0;
    },
    $eq: function(_, other) {
      if (other == null)
        return false;
      if (this === other)
        return true;
      return other instanceof P._ControllerStream && other._async$_controller === this._async$_controller;
    }
  };
  P._ControllerSubscription.prototype = {
    _onCancel$0: function() {
      return this._async$_controller._recordCancel$1(this);
    },
    _onPause$0: function() {
      var t1 = this._async$_controller,
        t2 = H.getTypeArgumentByIndex(t1, 0);
      H.assertSubtype(this, "$isStreamSubscription", [t2], "$asStreamSubscription");
      if ((t1._state & 8) !== 0)
        H.assertSubtype(t1._varData, "$is_StreamControllerAddStreamState", [t2], "$as_StreamControllerAddStreamState").addSubscription.pause$0(0);
      P._runGuarded(t1.onPause);
    },
    _onResume$0: function() {
      var t1 = this._async$_controller,
        t2 = H.getTypeArgumentByIndex(t1, 0);
      H.assertSubtype(this, "$isStreamSubscription", [t2], "$asStreamSubscription");
      if ((t1._state & 8) !== 0)
        H.assertSubtype(t1._varData, "$is_StreamControllerAddStreamState", [t2], "$as_StreamControllerAddStreamState").addSubscription.resume$0(0);
      P._runGuarded(t1.onResume);
    }
  };
  P._AddStreamState.prototype = {
    cancel$0: function(_) {
      var cancel = this.addSubscription.cancel$0(0);
      if (cancel == null) {
        this.addStreamFuture._asyncComplete$1(null);
        return;
      }
      return cancel.whenComplete$1(new P._AddStreamState_cancel_closure(this));
    }
  };
  P._AddStreamState_cancel_closure.prototype = {
    call$0: function() {
      this.$this.addStreamFuture._asyncComplete$1(null);
    },
    $signature: 0
  };
  P._StreamControllerAddStreamState.prototype = {};
  P._BufferingStreamSubscription.prototype = {
    _BufferingStreamSubscription$4: function(onData, onError, onDone, cancelOnError, $T) {
      var _this = this;
      _this.onData$1(onData);
      _this.onError$1(0, onError);
      H.functionTypeCheck(onDone, {func: 1, ret: -1});
      _this._zone.toString;
      _this.set$_onDone(H.functionTypeCheck(onDone, {func: 1, ret: -1}));
    },
    _setPendingEvents$1: function(pendingEvents) {
      var _this = this;
      H.assertSubtype(pendingEvents, "$is_PendingEvents", [H.getRuntimeTypeArgument(_this, "_BufferingStreamSubscription", 0)], "$as_PendingEvents");
      if (pendingEvents == null)
        return;
      _this.set$_pending(pendingEvents);
      if (!pendingEvents.get$isEmpty(pendingEvents)) {
        _this._state = (_this._state | 64) >>> 0;
        _this._pending.schedule$1(_this);
      }
    },
    onData$1: function(handleData) {
      var t1 = H.getRuntimeTypeArgument(this, "_BufferingStreamSubscription", 0);
      H.functionTypeCheck(handleData, {func: 1, ret: -1, args: [t1]});
      if (handleData == null)
        handleData = P.async___nullDataHandler$closure();
      this._zone.toString;
      this.set$_async$_onData(H.functionTypeCheck(handleData, {func: 1, ret: null, args: [t1]}));
    },
    onError$1: function(_, handleError) {
      var _this = this;
      if (handleError == null)
        handleError = P.async___nullErrorHandler$closure();
      if (H.functionTypeTest(handleError, {func: 1, ret: -1, args: [P.Object, P.StackTrace]}))
        _this._onError = _this._zone.registerBinaryCallback$3$1(handleError, null, P.Object, P.StackTrace);
      else if (H.functionTypeTest(handleError, {func: 1, ret: -1, args: [P.Object]})) {
        _this._zone.toString;
        _this._onError = H.functionTypeCheck(handleError, {func: 1, ret: null, args: [P.Object]});
      } else
        throw H.wrapException(P.ArgumentError$("handleError callback must take either an Object (the error), or both an Object (the error) and a StackTrace."));
    },
    pause$1: function(_, resumeSignal) {
      var t2, t3, _this = this,
        t1 = _this._state;
      if ((t1 & 8) !== 0)
        return;
      t2 = (t1 + 128 | 4) >>> 0;
      _this._state = t2;
      if (t1 < 128 && _this._pending != null) {
        t3 = _this._pending;
        if (t3._state === 1)
          t3._state = 3;
      }
      if ((t1 & 4) === 0 && (t2 & 32) === 0)
        _this._guardCallback$1(_this.get$_onPause());
    },
    pause$0: function($receiver) {
      return this.pause$1($receiver, null);
    },
    resume$0: function(_) {
      var _this = this,
        t1 = _this._state;
      if ((t1 & 8) !== 0)
        return;
      if (t1 >= 128) {
        t1 = _this._state = t1 - 128;
        if (t1 < 128) {
          if ((t1 & 64) !== 0) {
            t1 = _this._pending;
            t1 = !t1.get$isEmpty(t1);
          } else
            t1 = false;
          if (t1)
            _this._pending.schedule$1(_this);
          else {
            t1 = (_this._state & 4294967291) >>> 0;
            _this._state = t1;
            if ((t1 & 32) === 0)
              _this._guardCallback$1(_this.get$_onResume());
          }
        }
      }
    },
    cancel$0: function(_) {
      var _this = this,
        t1 = (_this._state & 4294967279) >>> 0;
      _this._state = t1;
      if ((t1 & 8) === 0)
        _this._async$_cancel$0();
      t1 = _this._cancelFuture;
      return t1 == null ? $.$get$Future__nullFuture() : t1;
    },
    _async$_cancel$0: function() {
      var t2, _this = this,
        t1 = _this._state = (_this._state | 8) >>> 0;
      if ((t1 & 64) !== 0) {
        t2 = _this._pending;
        if (t2._state === 1)
          t2._state = 3;
      }
      if ((t1 & 32) === 0)
        _this.set$_pending(null);
      _this._cancelFuture = _this._onCancel$0();
    },
    _async$_add$1: function(_, data) {
      var t2, _this = this,
        t1 = H.getRuntimeTypeArgument(_this, "_BufferingStreamSubscription", 0);
      H.assertSubtypeOfRuntimeType(data, t1);
      t2 = _this._state;
      if ((t2 & 8) !== 0)
        return;
      if (t2 < 32)
        _this._sendData$1(data);
      else
        _this._addPending$1(new P._DelayedData(data, [t1]));
    },
    _addError$2: function(error, stackTrace) {
      var t1 = this._state;
      if ((t1 & 8) !== 0)
        return;
      if (t1 < 32)
        this._sendError$2(error, stackTrace);
      else
        this._addPending$1(new P._DelayedError(error, stackTrace));
    },
    _close$0: function() {
      var _this = this,
        t1 = _this._state;
      if ((t1 & 8) !== 0)
        return;
      t1 = (t1 | 2) >>> 0;
      _this._state = t1;
      if (t1 < 32)
        _this._sendDone$0();
      else
        _this._addPending$1(C.C__DelayedDone);
    },
    _onPause$0: function() {
    },
    _onResume$0: function() {
    },
    _onCancel$0: function() {
      return;
    },
    _addPending$1: function($event) {
      var _this = this,
        t1 = [H.getRuntimeTypeArgument(_this, "_BufferingStreamSubscription", 0)],
        pending = H.assertSubtype(_this._pending, "$is_StreamImplEvents", t1, "$as_StreamImplEvents");
      if (pending == null) {
        pending = new P._StreamImplEvents(t1);
        _this.set$_pending(pending);
      }
      pending.add$1(0, $event);
      t1 = _this._state;
      if ((t1 & 64) === 0) {
        t1 = (t1 | 64) >>> 0;
        _this._state = t1;
        if (t1 < 128)
          _this._pending.schedule$1(_this);
      }
    },
    _sendData$1: function(data) {
      var t2, _this = this,
        t1 = H.getRuntimeTypeArgument(_this, "_BufferingStreamSubscription", 0);
      H.assertSubtypeOfRuntimeType(data, t1);
      t2 = _this._state;
      _this._state = (t2 | 32) >>> 0;
      _this._zone.runUnaryGuarded$1$2(_this._async$_onData, data, t1);
      _this._state = (_this._state & 4294967263) >>> 0;
      _this._checkState$1((t2 & 4) !== 0);
    },
    _sendError$2: function(error, stackTrace) {
      var t1, t2, _this = this;
      H.interceptedTypeCheck(stackTrace, "$isStackTrace");
      t1 = _this._state;
      t2 = new P._BufferingStreamSubscription__sendError_sendError(_this, error, stackTrace);
      if ((t1 & 1) !== 0) {
        _this._state = (t1 | 16) >>> 0;
        _this._async$_cancel$0();
        t1 = _this._cancelFuture;
        if (t1 != null && t1 !== $.$get$Future__nullFuture())
          t1.whenComplete$1(t2);
        else
          t2.call$0();
      } else {
        t2.call$0();
        _this._checkState$1((t1 & 4) !== 0);
      }
    },
    _sendDone$0: function() {
      var t2, _this = this,
        t1 = new P._BufferingStreamSubscription__sendDone_sendDone(_this);
      _this._async$_cancel$0();
      _this._state = (_this._state | 16) >>> 0;
      t2 = _this._cancelFuture;
      if (t2 != null && t2 !== $.$get$Future__nullFuture())
        t2.whenComplete$1(t1);
      else
        t1.call$0();
    },
    _guardCallback$1: function(callback) {
      var t1, _this = this;
      H.functionTypeCheck(callback, {func: 1, ret: -1});
      t1 = _this._state;
      _this._state = (t1 | 32) >>> 0;
      callback.call$0();
      _this._state = (_this._state & 4294967263) >>> 0;
      _this._checkState$1((t1 & 4) !== 0);
    },
    _checkState$1: function(wasInputPaused) {
      var t1, isInputPaused, _this = this;
      if ((_this._state & 64) !== 0) {
        t1 = _this._pending;
        t1 = t1.get$isEmpty(t1);
      } else
        t1 = false;
      if (t1) {
        t1 = _this._state = (_this._state & 4294967231) >>> 0;
        if ((t1 & 4) !== 0)
          if (t1 < 128) {
            t1 = _this._pending;
            t1 = t1 == null || t1.get$isEmpty(t1);
          } else
            t1 = false;
        else
          t1 = false;
        if (t1)
          _this._state = (_this._state & 4294967291) >>> 0;
      }
      for (; true; wasInputPaused = isInputPaused) {
        t1 = _this._state;
        if ((t1 & 8) !== 0) {
          _this.set$_pending(null);
          return;
        }
        isInputPaused = (t1 & 4) !== 0;
        if (wasInputPaused === isInputPaused)
          break;
        _this._state = (t1 ^ 32) >>> 0;
        if (isInputPaused)
          _this._onPause$0();
        else
          _this._onResume$0();
        _this._state = (_this._state & 4294967263) >>> 0;
      }
      t1 = _this._state;
      if ((t1 & 64) !== 0 && t1 < 128)
        _this._pending.schedule$1(_this);
    },
    set$_async$_onData: function(_onData) {
      this._async$_onData = H.functionTypeCheck(_onData, {func: 1, ret: -1, args: [H.getRuntimeTypeArgument(this, "_BufferingStreamSubscription", 0)]});
    },
    set$_onDone: function(_onDone) {
      this._onDone = H.functionTypeCheck(_onDone, {func: 1, ret: -1});
    },
    set$_pending: function(_pending) {
      this._pending = H.assertSubtype(_pending, "$is_PendingEvents", [H.getRuntimeTypeArgument(this, "_BufferingStreamSubscription", 0)], "$as_PendingEvents");
    },
    $isStreamSubscription: 1,
    $is_EventSink: 1,
    $is_EventDispatch: 1
  };
  P._BufferingStreamSubscription__sendError_sendError.prototype = {
    call$0: function() {
      var onError, t3, t4,
        t1 = this.$this,
        t2 = t1._state;
      if ((t2 & 8) !== 0 && (t2 & 16) === 0)
        return;
      t1._state = (t2 | 32) >>> 0;
      onError = t1._onError;
      t2 = this.error;
      t3 = P.Object;
      t4 = t1._zone;
      if (H.functionTypeTest(onError, {func: 1, ret: -1, args: [P.Object, P.StackTrace]}))
        t4.runBinaryGuarded$2$3(onError, t2, this.stackTrace, t3, P.StackTrace);
      else
        t4.runUnaryGuarded$1$2(H.functionTypeCheck(t1._onError, {func: 1, ret: -1, args: [P.Object]}), t2, t3);
      t1._state = (t1._state & 4294967263) >>> 0;
    },
    $signature: 1
  };
  P._BufferingStreamSubscription__sendDone_sendDone.prototype = {
    call$0: function() {
      var t1 = this.$this,
        t2 = t1._state;
      if ((t2 & 16) === 0)
        return;
      t1._state = (t2 | 42) >>> 0;
      t1._zone.runGuarded$1(t1._onDone);
      t1._state = (t1._state & 4294967263) >>> 0;
    },
    $signature: 1
  };
  P._StreamImpl.prototype = {
    listen$4$cancelOnError$onDone$onError: function(onData, cancelOnError, onDone, onError) {
      return this._createSubscription$4(H.functionTypeCheck(onData, {func: 1, ret: -1, args: [H.getTypeArgumentByIndex(this, 0)]}), onError, H.functionTypeCheck(onDone, {func: 1, ret: -1}), true === cancelOnError);
    },
    listen$3$onDone$onError: function(onData, onDone, onError) {
      return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, onError);
    },
    _createSubscription$4: function(onData, onError, onDone, cancelOnError) {
      var t1 = H.getTypeArgumentByIndex(this, 0);
      return P._BufferingStreamSubscription$(H.functionTypeCheck(onData, {func: 1, ret: -1, args: [t1]}), onError, H.functionTypeCheck(onDone, {func: 1, ret: -1}), cancelOnError, t1);
    }
  };
  P._GeneratedStreamImpl.prototype = {
    _createSubscription$4: function(onData, onError, onDone, cancelOnError) {
      var _this = this,
        t1 = H.getTypeArgumentByIndex(_this, 0);
      H.functionTypeCheck(onData, {func: 1, ret: -1, args: [t1]});
      H.functionTypeCheck(onDone, {func: 1, ret: -1});
      if (_this._isUsed)
        throw H.wrapException(P.StateError$("Stream has already been listened to."));
      _this._isUsed = true;
      t1 = P._BufferingStreamSubscription$(onData, onError, onDone, cancelOnError, t1);
      t1._setPendingEvents$1(_this._pending.call$0());
      return t1;
    }
  };
  P._IterablePendingEvents.prototype = {
    get$isEmpty: function(_) {
      return this._async$_iterator == null;
    },
    handleNext$1: function(dispatch) {
      var hasMore, e, s, t1, exception, _this = this;
      H.assertSubtype(dispatch, "$is_EventDispatch", _this.$ti, "$as_EventDispatch");
      t1 = _this._async$_iterator;
      if (t1 == null)
        throw H.wrapException(P.StateError$("No events pending."));
      hasMore = null;
      try {
        hasMore = t1.moveNext$0();
        if (H.boolConversionCheck(hasMore)) {
          t1 = _this._async$_iterator;
          dispatch._sendData$1(t1.get$current(t1));
        } else {
          _this.set$_async$_iterator(null);
          dispatch._sendDone$0();
        }
      } catch (exception) {
        e = H.unwrapException(exception);
        s = H.getTraceFromException(exception);
        if (hasMore == null) {
          _this.set$_async$_iterator(C.C_EmptyIterator);
          dispatch._sendError$2(e, s);
        } else
          dispatch._sendError$2(e, s);
      }
    },
    set$_async$_iterator: function(_iterator) {
      this._async$_iterator = H.assertSubtype(_iterator, "$isIterator", this.$ti, "$asIterator");
    }
  };
  P._DelayedEvent.prototype = {
    set$next: function(_, next) {
      this.next = H.interceptedTypeCheck(next, "$is_DelayedEvent");
    },
    get$next: function(receiver) {
      return this.next;
    }
  };
  P._DelayedData.prototype = {
    perform$1: function(dispatch) {
      H.assertSubtype(dispatch, "$is_EventDispatch", this.$ti, "$as_EventDispatch")._sendData$1(this.value);
    }
  };
  P._DelayedError.prototype = {
    perform$1: function(dispatch) {
      dispatch._sendError$2(this.error, this.stackTrace);
    },
    $as_DelayedEvent: function() {
    },
    get$error: function(receiver) {
      return this.error;
    },
    get$stackTrace: function() {
      return this.stackTrace;
    }
  };
  P._DelayedDone.prototype = {
    perform$1: function(dispatch) {
      dispatch._sendDone$0();
    },
    get$next: function(_) {
      return;
    },
    set$next: function(_, _0) {
      throw H.wrapException(P.StateError$("No events after a done."));
    },
    $is_DelayedEvent: 1,
    $as_DelayedEvent: function() {
    }
  };
  P._PendingEvents.prototype = {
    schedule$1: function(dispatch) {
      var t1, _this = this;
      H.assertSubtype(dispatch, "$is_EventDispatch", _this.$ti, "$as_EventDispatch");
      t1 = _this._state;
      if (t1 === 1)
        return;
      if (t1 >= 1) {
        _this._state = 1;
        return;
      }
      P.scheduleMicrotask(new P._PendingEvents_schedule_closure(_this, dispatch));
      _this._state = 1;
    }
  };
  P._PendingEvents_schedule_closure.prototype = {
    call$0: function() {
      var t1 = this.$this,
        oldState = t1._state;
      t1._state = 0;
      if (oldState === 3)
        return;
      t1.handleNext$1(this.dispatch);
    },
    $signature: 0
  };
  P._StreamImplEvents.prototype = {
    get$isEmpty: function(_) {
      return this.lastPendingEvent == null;
    },
    add$1: function(_, $event) {
      var _this = this,
        t1 = _this.lastPendingEvent;
      if (t1 == null)
        _this.firstPendingEvent = _this.lastPendingEvent = $event;
      else {
        t1.set$next(0, $event);
        _this.lastPendingEvent = $event;
      }
    },
    handleNext$1: function(dispatch) {
      var $event, t1, _this = this;
      H.assertSubtype(dispatch, "$is_EventDispatch", _this.$ti, "$as_EventDispatch");
      $event = _this.firstPendingEvent;
      t1 = $event.get$next($event);
      _this.firstPendingEvent = t1;
      if (t1 == null)
        _this.lastPendingEvent = null;
      $event.perform$1(dispatch);
    }
  };
  P._StreamIterator.prototype = {};
  P._cancelAndError_closure.prototype = {
    call$0: function() {
      return this.future._completeError$2(this.error, this.stackTrace);
    },
    $signature: 1
  };
  P._cancelAndErrorClosure_closure.prototype = {
    call$2: function(error, stackTrace) {
      P._cancelAndError(this.subscription, this.future, error, H.interceptedTypeCheck(stackTrace, "$isStackTrace"));
    },
    $signature: 29
  };
  P._ForwardingStream.prototype = {
    listen$4$cancelOnError$onDone$onError: function(onData, cancelOnError, onDone, onError) {
      return this._createSubscription$4(H.functionTypeCheck(onData, {func: 1, ret: -1, args: [H.getRuntimeTypeArgument(this, "_ForwardingStream", 1)]}), onError, H.functionTypeCheck(onDone, {func: 1, ret: -1}), true === cancelOnError);
    },
    listen$3$onDone$onError: function(onData, onDone, onError) {
      return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, onError);
    },
    _createSubscription$4: function(onData, onError, onDone, cancelOnError) {
      var t1 = H.getRuntimeTypeArgument(this, "_ForwardingStream", 1);
      return P._ForwardingStreamSubscription$(this, H.functionTypeCheck(onData, {func: 1, ret: -1, args: [t1]}), onError, H.functionTypeCheck(onDone, {func: 1, ret: -1}), cancelOnError, H.getRuntimeTypeArgument(this, "_ForwardingStream", 0), t1);
    },
    _handleData$2: function(data, sink) {
      var t1;
      H.assertSubtypeOfRuntimeType(data, H.getRuntimeTypeArgument(this, "_ForwardingStream", 0));
      t1 = H.getRuntimeTypeArgument(this, "_ForwardingStream", 1);
      H.assertSubtype(sink, "$is_EventSink", [t1], "$as_EventSink")._async$_add$1(0, H.assertSubtypeOfRuntimeType(data, t1));
    },
    $asStream: function($S, $T) {
      return [$T];
    }
  };
  P._ForwardingStreamSubscription.prototype = {
    _ForwardingStreamSubscription$5: function(_stream, onData, onError, onDone, cancelOnError, $S, $T) {
      var _this = this;
      _this.set$_subscription(_this._stream._async$_source.listen$3$onDone$onError(_this.get$_handleData(), _this.get$_handleDone(), _this.get$_handleError()));
    },
    _async$_add$1: function(_, data) {
      H.assertSubtypeOfRuntimeType(data, H.getRuntimeTypeArgument(this, "_ForwardingStreamSubscription", 1));
      if ((this._state & 2) !== 0)
        return;
      this.super$_BufferingStreamSubscription$_add(0, data);
    },
    _addError$2: function(error, stackTrace) {
      if ((this._state & 2) !== 0)
        return;
      this.super$_BufferingStreamSubscription$_addError(error, stackTrace);
    },
    _onPause$0: function() {
      var t1 = this._subscription;
      if (t1 == null)
        return;
      t1.pause$0(0);
    },
    _onResume$0: function() {
      var t1 = this._subscription;
      if (t1 == null)
        return;
      t1.resume$0(0);
    },
    _onCancel$0: function() {
      var t1 = this._subscription;
      if (t1 != null) {
        this.set$_subscription(null);
        return t1.cancel$0(0);
      }
      return;
    },
    _handleData$1: function(data) {
      this._stream._handleData$2(H.assertSubtypeOfRuntimeType(data, H.getRuntimeTypeArgument(this, "_ForwardingStreamSubscription", 0)), this);
    },
    _handleError$2: function(error, stackTrace) {
      H.interceptedTypeCheck(stackTrace, "$isStackTrace");
      H.assertSubtype(this, "$is_EventSink", [H.getRuntimeTypeArgument(this._stream, "_ForwardingStream", 1)], "$as_EventSink")._addError$2(error, stackTrace);
    },
    _handleDone$0: function() {
      H.assertSubtype(this, "$is_EventSink", [H.getRuntimeTypeArgument(this._stream, "_ForwardingStream", 1)], "$as_EventSink")._close$0();
    },
    set$_subscription: function(_subscription) {
      this._subscription = H.assertSubtype(_subscription, "$isStreamSubscription", [H.getRuntimeTypeArgument(this, "_ForwardingStreamSubscription", 0)], "$asStreamSubscription");
    },
    $asStreamSubscription: function($S, $T) {
      return [$T];
    },
    $as_EventSink: function($S, $T) {
      return [$T];
    },
    $as_EventDispatch: function($S, $T) {
      return [$T];
    },
    $as_BufferingStreamSubscription: function($S, $T) {
      return [$T];
    }
  };
  P._ExpandStream.prototype = {
    _handleData$2: function(inputEvent, sink) {
      var value, e, s, t1, exception;
      H.assertSubtypeOfRuntimeType(inputEvent, H.getTypeArgumentByIndex(this, 0));
      H.assertSubtype(sink, "$is_EventSink", [H.getTypeArgumentByIndex(this, 1)], "$as_EventSink");
      try {
        for (t1 = J.get$iterator$ax(this._expand.call$1(inputEvent)); t1.moveNext$0();) {
          value = t1.get$current(t1);
          J._async$_add$1$x(sink, value);
        }
      } catch (exception) {
        e = H.unwrapException(exception);
        s = H.getTraceFromException(exception);
        $.Zone__current.toString;
        sink._addError$2(e, s);
      }
    }
  };
  P._StateStreamSubscription.prototype = {$asStreamSubscription: null, $as_EventSink: null, $as_EventDispatch: null, $as_BufferingStreamSubscription: null,
    $as_ForwardingStreamSubscription: function($T) {
      return [$T, $T];
    }
  };
  P._SkipStream.prototype = {
    _createSubscription$4: function(onData, onError, onDone, cancelOnError) {
      var t2, t3, _this = this,
        t1 = H.getTypeArgumentByIndex(_this, 0);
      H.functionTypeCheck(onData, {func: 1, ret: -1, args: [t1]});
      H.functionTypeCheck(onDone, {func: 1, ret: -1});
      t2 = $.Zone__current;
      t3 = cancelOnError ? 1 : 0;
      t3 = new P._StateStreamSubscription(_this._count, _this, t2, t3, _this.$ti);
      t3._BufferingStreamSubscription$4(onData, onError, onDone, cancelOnError, t1);
      t3._ForwardingStreamSubscription$5(_this, onData, onError, onDone, cancelOnError, t1, t1);
      return t3;
    },
    _handleData$2: function(inputEvent, sink) {
      var t1, count;
      H.assertSubtypeOfRuntimeType(inputEvent, H.getTypeArgumentByIndex(this, 0));
      t1 = this.$ti;
      sink = H.assertSubtype(H.assertSubtype(sink, "$is_EventSink", t1, "$as_EventSink"), "$is_StateStreamSubscription", t1, "$as_StateStreamSubscription");
      count = sink._sharedState;
      if (count > 0) {
        sink._sharedState = count - 1;
        return;
      }
      sink._async$_add$1(0, inputEvent);
    },
    $asStream: null,
    $as_ForwardingStream: function($T) {
      return [$T, $T];
    }
  };
  P.Timer.prototype = {};
  P.AsyncError.prototype = {
    toString$0: function(_) {
      return H.S(this.error);
    },
    $isError: 1,
    get$error: function(receiver) {
      return this.error;
    },
    get$stackTrace: function() {
      return this.stackTrace;
    }
  };
  P._Zone.prototype = {$isZone: 1};
  P._rootHandleUncaughtError_closure.prototype = {
    call$0: function() {
      var error,
        t1 = this._box_0,
        t2 = t1.error;
      t1 = t2 == null ? t1.error = new P.NullThrownError() : t2;
      t2 = this.stackTrace;
      if (t2 == null)
        throw H.wrapException(t1);
      error = H.wrapException(t1);
      error.stack = t2.toString$0(0);
      throw error;
    },
    $signature: 0
  };
  P._RootZone.prototype = {
    runGuarded$1: function(f) {
      var e, s, exception, _null = null;
      H.functionTypeCheck(f, {func: 1, ret: -1});
      try {
        if (C.C__RootZone === $.Zone__current) {
          f.call$0();
          return;
        }
        P._rootRun(_null, _null, this, f, -1);
      } catch (exception) {
        e = H.unwrapException(exception);
        s = H.getTraceFromException(exception);
        P._rootHandleUncaughtError(_null, _null, this, e, H.interceptedTypeCheck(s, "$isStackTrace"));
      }
    },
    runUnaryGuarded$1$2: function(f, arg, $T) {
      var e, s, exception, _null = null;
      H.functionTypeCheck(f, {func: 1, ret: -1, args: [$T]});
      H.assertSubtypeOfRuntimeType(arg, $T);
      try {
        if (C.C__RootZone === $.Zone__current) {
          f.call$1(arg);
          return;
        }
        P._rootRunUnary(_null, _null, this, f, arg, -1, $T);
      } catch (exception) {
        e = H.unwrapException(exception);
        s = H.getTraceFromException(exception);
        P._rootHandleUncaughtError(_null, _null, this, e, H.interceptedTypeCheck(s, "$isStackTrace"));
      }
    },
    runBinaryGuarded$2$3: function(f, arg1, arg2, T1, T2) {
      var e, s, exception, _null = null;
      H.functionTypeCheck(f, {func: 1, ret: -1, args: [T1, T2]});
      H.assertSubtypeOfRuntimeType(arg1, T1);
      H.assertSubtypeOfRuntimeType(arg2, T2);
      try {
        if (C.C__RootZone === $.Zone__current) {
          f.call$2(arg1, arg2);
          return;
        }
        P._rootRunBinary(_null, _null, this, f, arg1, arg2, -1, T1, T2);
      } catch (exception) {
        e = H.unwrapException(exception);
        s = H.getTraceFromException(exception);
        P._rootHandleUncaughtError(_null, _null, this, e, H.interceptedTypeCheck(s, "$isStackTrace"));
      }
    },
    bindCallback$1$1: function(f, $R) {
      return new P._RootZone_bindCallback_closure(this, H.functionTypeCheck(f, {func: 1, ret: $R}), $R);
    },
    bindCallbackGuarded$1: function(f) {
      return new P._RootZone_bindCallbackGuarded_closure(this, H.functionTypeCheck(f, {func: 1, ret: -1}));
    },
    bindUnaryCallbackGuarded$1$1: function(f, $T) {
      return new P._RootZone_bindUnaryCallbackGuarded_closure(this, H.functionTypeCheck(f, {func: 1, ret: -1, args: [$T]}), $T);
    },
    $index: function(_, key) {
      return;
    },
    run$1$1: function(f, $R) {
      H.functionTypeCheck(f, {func: 1, ret: $R});
      if ($.Zone__current === C.C__RootZone)
        return f.call$0();
      return P._rootRun(null, null, this, f, $R);
    },
    runUnary$2$2: function(f, arg, $R, $T) {
      H.functionTypeCheck(f, {func: 1, ret: $R, args: [$T]});
      H.assertSubtypeOfRuntimeType(arg, $T);
      if ($.Zone__current === C.C__RootZone)
        return f.call$1(arg);
      return P._rootRunUnary(null, null, this, f, arg, $R, $T);
    },
    runBinary$3$3: function(f, arg1, arg2, $R, T1, T2) {
      H.functionTypeCheck(f, {func: 1, ret: $R, args: [T1, T2]});
      H.assertSubtypeOfRuntimeType(arg1, T1);
      H.assertSubtypeOfRuntimeType(arg2, T2);
      if ($.Zone__current === C.C__RootZone)
        return f.call$2(arg1, arg2);
      return P._rootRunBinary(null, null, this, f, arg1, arg2, $R, T1, T2);
    },
    registerBinaryCallback$3$1: function(f, $R, T1, T2) {
      return H.functionTypeCheck(f, {func: 1, ret: $R, args: [T1, T2]});
    }
  };
  P._RootZone_bindCallback_closure.prototype = {
    call$0: function() {
      return this.$this.run$1$1(this.f, this.R);
    },
    $signature: function() {
      return {func: 1, ret: this.R};
    }
  };
  P._RootZone_bindCallbackGuarded_closure.prototype = {
    call$0: function() {
      return this.$this.runGuarded$1(this.f);
    },
    $signature: 1
  };
  P._RootZone_bindUnaryCallbackGuarded_closure.prototype = {
    call$1: function(arg) {
      var t1 = this.T;
      return this.$this.runUnaryGuarded$1$2(this.f, H.assertSubtypeOfRuntimeType(arg, t1), t1);
    },
    $signature: function() {
      return {func: 1, ret: -1, args: [this.T]};
    }
  };
  P._HashMap.prototype = {
    get$length: function(_) {
      return this._collection$_length;
    },
    get$isEmpty: function(_) {
      return this._collection$_length === 0;
    },
    get$keys: function(_) {
      return new P._HashMapKeyIterable(this, [H.getTypeArgumentByIndex(this, 0)]);
    },
    containsKey$1: function(_, key) {
      var strings, nums;
      if (typeof key === "string" && key !== "__proto__") {
        strings = this._collection$_strings;
        return strings == null ? false : strings[key] != null;
      } else if (typeof key === "number" && (key & 1073741823) === key) {
        nums = this._collection$_nums;
        return nums == null ? false : nums[key] != null;
      } else
        return this._containsKey$1(key);
    },
    _containsKey$1: function(key) {
      var rest = this._collection$_rest;
      if (rest == null)
        return false;
      return this._findBucketIndex$2(this._getBucket$2(rest, key), key) >= 0;
    },
    $index: function(_, key) {
      var strings, t1, nums;
      if (typeof key === "string" && key !== "__proto__") {
        strings = this._collection$_strings;
        t1 = strings == null ? null : P._HashMap__getTableEntry(strings, key);
        return t1;
      } else if (typeof key === "number" && (key & 1073741823) === key) {
        nums = this._collection$_nums;
        t1 = nums == null ? null : P._HashMap__getTableEntry(nums, key);
        return t1;
      } else
        return this._get$1(0, key);
    },
    _get$1: function(_, key) {
      var bucket, index,
        rest = this._collection$_rest;
      if (rest == null)
        return;
      bucket = this._getBucket$2(rest, key);
      index = this._findBucketIndex$2(bucket, key);
      return index < 0 ? null : bucket[index + 1];
    },
    $indexSet: function(_, key, value) {
      var strings, nums, _this = this;
      H.assertSubtypeOfRuntimeType(key, H.getTypeArgumentByIndex(_this, 0));
      H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(_this, 1));
      if (typeof key === "string" && key !== "__proto__") {
        strings = _this._collection$_strings;
        _this._collection$_addHashTableEntry$3(strings == null ? _this._collection$_strings = P._HashMap__newHashTable() : strings, key, value);
      } else if (typeof key === "number" && (key & 1073741823) === key) {
        nums = _this._collection$_nums;
        _this._collection$_addHashTableEntry$3(nums == null ? _this._collection$_nums = P._HashMap__newHashTable() : nums, key, value);
      } else
        _this._set$2(key, value);
    },
    _set$2: function(key, value) {
      var rest, hash, bucket, index, _this = this;
      H.assertSubtypeOfRuntimeType(key, H.getTypeArgumentByIndex(_this, 0));
      H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(_this, 1));
      rest = _this._collection$_rest;
      if (rest == null)
        rest = _this._collection$_rest = P._HashMap__newHashTable();
      hash = _this._computeHashCode$1(key);
      bucket = rest[hash];
      if (bucket == null) {
        P._HashMap__setTableEntry(rest, hash, [key, value]);
        ++_this._collection$_length;
        _this._collection$_keys = null;
      } else {
        index = _this._findBucketIndex$2(bucket, key);
        if (index >= 0)
          bucket[index + 1] = value;
        else {
          bucket.push(key, value);
          ++_this._collection$_length;
          _this._collection$_keys = null;
        }
      }
    },
    putIfAbsent$2: function(_, key, ifAbsent) {
      var value, _this = this;
      H.assertSubtypeOfRuntimeType(key, H.getTypeArgumentByIndex(_this, 0));
      H.functionTypeCheck(ifAbsent, {func: 1, ret: H.getTypeArgumentByIndex(_this, 1)});
      if (_this.containsKey$1(0, key))
        return _this.$index(0, key);
      value = ifAbsent.call$0();
      _this.$indexSet(0, key, value);
      return value;
    },
    remove$1: function(_, key) {
      var t1 = this._remove$1(0, key);
      return t1;
    },
    _remove$1: function(_, key) {
      var bucket, index, _this = this,
        rest = _this._collection$_rest;
      if (rest == null)
        return;
      bucket = _this._getBucket$2(rest, key);
      index = _this._findBucketIndex$2(bucket, key);
      if (index < 0)
        return;
      --_this._collection$_length;
      _this._collection$_keys = null;
      return bucket.splice(index, 2)[1];
    },
    forEach$1: function(_, action) {
      var keys, $length, i, key, _this = this,
        t1 = H.getTypeArgumentByIndex(_this, 0);
      H.functionTypeCheck(action, {func: 1, ret: -1, args: [t1, H.getTypeArgumentByIndex(_this, 1)]});
      keys = _this._computeKeys$0();
      for ($length = keys.length, i = 0; i < $length; ++i) {
        key = keys[i];
        action.call$2(H.assertSubtypeOfRuntimeType(key, t1), _this.$index(0, key));
        if (keys !== _this._collection$_keys)
          throw H.wrapException(P.ConcurrentModificationError$(_this));
      }
    },
    _computeKeys$0: function() {
      var result, strings, names, entries, index, i, nums, rest, bucket, $length, i0, _this = this,
        t1 = _this._collection$_keys;
      if (t1 != null)
        return t1;
      result = new Array(_this._collection$_length);
      result.fixed$length = Array;
      strings = _this._collection$_strings;
      if (strings != null) {
        names = Object.getOwnPropertyNames(strings);
        entries = names.length;
        for (index = 0, i = 0; i < entries; ++i) {
          result[index] = names[i];
          ++index;
        }
      } else
        index = 0;
      nums = _this._collection$_nums;
      if (nums != null) {
        names = Object.getOwnPropertyNames(nums);
        entries = names.length;
        for (i = 0; i < entries; ++i) {
          result[index] = +names[i];
          ++index;
        }
      }
      rest = _this._collection$_rest;
      if (rest != null) {
        names = Object.getOwnPropertyNames(rest);
        entries = names.length;
        for (i = 0; i < entries; ++i) {
          bucket = rest[names[i]];
          $length = bucket.length;
          for (i0 = 0; i0 < $length; i0 += 2) {
            result[index] = bucket[i0];
            ++index;
          }
        }
      }
      return _this._collection$_keys = result;
    },
    _collection$_addHashTableEntry$3: function(table, key, value) {
      var _this = this;
      H.assertSubtypeOfRuntimeType(key, H.getTypeArgumentByIndex(_this, 0));
      H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(_this, 1));
      if (table[key] == null) {
        ++_this._collection$_length;
        _this._collection$_keys = null;
      }
      P._HashMap__setTableEntry(table, key, value);
    },
    _computeHashCode$1: function(key) {
      return J.get$hashCode$(key) & 1073741823;
    },
    _getBucket$2: function(table, key) {
      return table[this._computeHashCode$1(key)];
    },
    _findBucketIndex$2: function(bucket, key) {
      var $length, i;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (i = 0; i < $length; i += 2)
        if (J.$eq$(bucket[i], key))
          return i;
      return -1;
    },
    $isHashMap: 1
  };
  P._HashMapKeyIterable.prototype = {
    get$length: function(_) {
      return this._collection$_map._collection$_length;
    },
    get$isEmpty: function(_) {
      return this._collection$_map._collection$_length === 0;
    },
    get$iterator: function(_) {
      var t1 = this._collection$_map;
      return new P._HashMapKeyIterator(t1, t1._computeKeys$0(), this.$ti);
    },
    contains$1: function(_, element) {
      return this._collection$_map.containsKey$1(0, element);
    },
    forEach$1: function(_, f) {
      var t1, keys, $length, i;
      H.functionTypeCheck(f, {func: 1, ret: -1, args: [H.getTypeArgumentByIndex(this, 0)]});
      t1 = this._collection$_map;
      keys = t1._computeKeys$0();
      for ($length = keys.length, i = 0; i < $length; ++i) {
        f.call$1(keys[i]);
        if (keys !== t1._collection$_keys)
          throw H.wrapException(P.ConcurrentModificationError$(t1));
      }
    }
  };
  P._HashMapKeyIterator.prototype = {
    get$current: function(_) {
      return this._collection$_current;
    },
    moveNext$0: function() {
      var _this = this,
        keys = _this._collection$_keys,
        offset = _this._offset,
        t1 = _this._collection$_map;
      if (keys !== t1._collection$_keys)
        throw H.wrapException(P.ConcurrentModificationError$(t1));
      else if (offset >= keys.length) {
        _this.set$_collection$_current(null);
        return false;
      } else {
        _this.set$_collection$_current(keys[offset]);
        _this._offset = offset + 1;
        return true;
      }
    },
    set$_collection$_current: function(_current) {
      this._collection$_current = H.assertSubtypeOfRuntimeType(_current, H.getTypeArgumentByIndex(this, 0));
    },
    $isIterator: 1
  };
  P._HashSet.prototype = {
    get$iterator: function(_) {
      return new P._HashSetIterator(this, this._computeElements$0(), this.$ti);
    },
    get$length: function(_) {
      return this._collection$_length;
    },
    get$isEmpty: function(_) {
      return this._collection$_length === 0;
    },
    get$isNotEmpty: function(_) {
      return this._collection$_length !== 0;
    },
    contains$1: function(_, object) {
      var strings, nums;
      if (typeof object === "string" && object !== "__proto__") {
        strings = this._collection$_strings;
        return strings == null ? false : strings[object] != null;
      } else if (typeof object === "number" && (object & 1073741823) === object) {
        nums = this._collection$_nums;
        return nums == null ? false : nums[object] != null;
      } else
        return this._contains$1(object);
    },
    _contains$1: function(object) {
      var rest = this._collection$_rest;
      if (rest == null)
        return false;
      return this._findBucketIndex$2(this._getBucket$2(rest, object), object) >= 0;
    },
    add$1: function(_, element) {
      var strings, nums, _this = this;
      H.assertSubtypeOfRuntimeType(element, H.getTypeArgumentByIndex(_this, 0));
      if (typeof element === "string" && element !== "__proto__") {
        strings = _this._collection$_strings;
        return _this._collection$_addHashTableEntry$2(strings == null ? _this._collection$_strings = P._HashSet__newHashTable() : strings, element);
      } else if (typeof element === "number" && (element & 1073741823) === element) {
        nums = _this._collection$_nums;
        return _this._collection$_addHashTableEntry$2(nums == null ? _this._collection$_nums = P._HashSet__newHashTable() : nums, element);
      } else
        return _this._add$1(0, element);
    },
    _add$1: function(_, element) {
      var rest, hash, bucket, _this = this;
      H.assertSubtypeOfRuntimeType(element, H.getTypeArgumentByIndex(_this, 0));
      rest = _this._collection$_rest;
      if (rest == null)
        rest = _this._collection$_rest = P._HashSet__newHashTable();
      hash = _this._computeHashCode$1(element);
      bucket = rest[hash];
      if (bucket == null)
        rest[hash] = [element];
      else {
        if (_this._findBucketIndex$2(bucket, element) >= 0)
          return false;
        bucket.push(element);
      }
      ++_this._collection$_length;
      _this._collection$_elements = null;
      return true;
    },
    addAll$1: function(_, objects) {
      var t1;
      for (t1 = J.get$iterator$ax(H.assertSubtype(objects, "$isIterable", this.$ti, "$asIterable")); t1.moveNext$0();)
        this.add$1(0, t1.get$current(t1));
    },
    remove$1: function(_, object) {
      var _this = this;
      if (typeof object === "string" && object !== "__proto__")
        return _this._collection$_removeHashTableEntry$2(_this._collection$_strings, object);
      else if (typeof object === "number" && (object & 1073741823) === object)
        return _this._collection$_removeHashTableEntry$2(_this._collection$_nums, object);
      else
        return _this._remove$1(0, object);
    },
    _remove$1: function(_, object) {
      var bucket, index, _this = this,
        rest = _this._collection$_rest;
      if (rest == null)
        return false;
      bucket = _this._getBucket$2(rest, object);
      index = _this._findBucketIndex$2(bucket, object);
      if (index < 0)
        return false;
      --_this._collection$_length;
      _this._collection$_elements = null;
      bucket.splice(index, 1);
      return true;
    },
    clear$0: function(_) {
      var _this = this;
      if (_this._collection$_length > 0) {
        _this._collection$_strings = _this._collection$_nums = _this._collection$_rest = _this._collection$_elements = null;
        _this._collection$_length = 0;
      }
    },
    _computeElements$0: function() {
      var result, strings, names, entries, index, i, nums, rest, bucket, $length, i0, _this = this,
        t1 = _this._collection$_elements;
      if (t1 != null)
        return t1;
      result = new Array(_this._collection$_length);
      result.fixed$length = Array;
      strings = _this._collection$_strings;
      if (strings != null) {
        names = Object.getOwnPropertyNames(strings);
        entries = names.length;
        for (index = 0, i = 0; i < entries; ++i) {
          result[index] = names[i];
          ++index;
        }
      } else
        index = 0;
      nums = _this._collection$_nums;
      if (nums != null) {
        names = Object.getOwnPropertyNames(nums);
        entries = names.length;
        for (i = 0; i < entries; ++i) {
          result[index] = +names[i];
          ++index;
        }
      }
      rest = _this._collection$_rest;
      if (rest != null) {
        names = Object.getOwnPropertyNames(rest);
        entries = names.length;
        for (i = 0; i < entries; ++i) {
          bucket = rest[names[i]];
          $length = bucket.length;
          for (i0 = 0; i0 < $length; ++i0) {
            result[index] = bucket[i0];
            ++index;
          }
        }
      }
      return _this._collection$_elements = result;
    },
    _collection$_addHashTableEntry$2: function(table, element) {
      H.assertSubtypeOfRuntimeType(element, H.getTypeArgumentByIndex(this, 0));
      if (table[element] != null)
        return false;
      table[element] = 0;
      ++this._collection$_length;
      this._collection$_elements = null;
      return true;
    },
    _collection$_removeHashTableEntry$2: function(table, element) {
      if (table != null && table[element] != null) {
        delete table[element];
        --this._collection$_length;
        this._collection$_elements = null;
        return true;
      } else
        return false;
    },
    _computeHashCode$1: function(element) {
      return J.get$hashCode$(element) & 1073741823;
    },
    _getBucket$2: function(table, element) {
      return table[this._computeHashCode$1(element)];
    },
    _findBucketIndex$2: function(bucket, element) {
      var $length, i;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (i = 0; i < $length; ++i)
        if (J.$eq$(bucket[i], element))
          return i;
      return -1;
    },
    $isHashSet: 1
  };
  P._HashSetIterator.prototype = {
    get$current: function(_) {
      return this._collection$_current;
    },
    moveNext$0: function() {
      var _this = this,
        elements = _this._collection$_elements,
        offset = _this._offset,
        t1 = _this._set;
      if (elements !== t1._collection$_elements)
        throw H.wrapException(P.ConcurrentModificationError$(t1));
      else if (offset >= elements.length) {
        _this.set$_collection$_current(null);
        return false;
      } else {
        _this.set$_collection$_current(elements[offset]);
        _this._offset = offset + 1;
        return true;
      }
    },
    set$_collection$_current: function(_current) {
      this._collection$_current = H.assertSubtypeOfRuntimeType(_current, H.getTypeArgumentByIndex(this, 0));
    },
    $isIterator: 1
  };
  P._LinkedHashSet.prototype = {
    _newSet$0: function() {
      return new P._LinkedHashSet(this.$ti);
    },
    get$iterator: function(_) {
      return P._LinkedHashSetIterator$(this, this._collection$_modifications, H.getTypeArgumentByIndex(this, 0));
    },
    get$length: function(_) {
      return this._collection$_length;
    },
    get$isEmpty: function(_) {
      return this._collection$_length === 0;
    },
    get$isNotEmpty: function(_) {
      return this._collection$_length !== 0;
    },
    contains$1: function(_, object) {
      var strings, nums;
      if (typeof object === "string" && object !== "__proto__") {
        strings = this._collection$_strings;
        if (strings == null)
          return false;
        return H.interceptedTypeCheck(strings[object], "$is_LinkedHashSetCell") != null;
      } else if (typeof object === "number" && (object & 1073741823) === object) {
        nums = this._collection$_nums;
        if (nums == null)
          return false;
        return H.interceptedTypeCheck(nums[object], "$is_LinkedHashSetCell") != null;
      } else
        return this._contains$1(object);
    },
    _contains$1: function(object) {
      var rest = this._collection$_rest;
      if (rest == null)
        return false;
      return this._findBucketIndex$2(this._getBucket$2(rest, object), object) >= 0;
    },
    forEach$1: function(_, action) {
      var cell, modifications, _this = this,
        t1 = H.getTypeArgumentByIndex(_this, 0);
      H.functionTypeCheck(action, {func: 1, ret: -1, args: [t1]});
      cell = _this._collection$_first;
      modifications = _this._collection$_modifications;
      for (; cell != null;) {
        action.call$1(H.assertSubtypeOfRuntimeType(cell._collection$_element, t1));
        if (modifications !== _this._collection$_modifications)
          throw H.wrapException(P.ConcurrentModificationError$(_this));
        cell = cell._collection$_next;
      }
    },
    get$last: function(_) {
      var t1 = this._collection$_last;
      if (t1 == null)
        throw H.wrapException(P.StateError$("No elements"));
      return H.assertSubtypeOfRuntimeType(t1._collection$_element, H.getTypeArgumentByIndex(this, 0));
    },
    add$1: function(_, element) {
      var strings, nums, _this = this;
      H.assertSubtypeOfRuntimeType(element, H.getTypeArgumentByIndex(_this, 0));
      if (typeof element === "string" && element !== "__proto__") {
        strings = _this._collection$_strings;
        return _this._collection$_addHashTableEntry$2(strings == null ? _this._collection$_strings = P._LinkedHashSet__newHashTable() : strings, element);
      } else if (typeof element === "number" && (element & 1073741823) === element) {
        nums = _this._collection$_nums;
        return _this._collection$_addHashTableEntry$2(nums == null ? _this._collection$_nums = P._LinkedHashSet__newHashTable() : nums, element);
      } else
        return _this._add$1(0, element);
    },
    _add$1: function(_, element) {
      var rest, hash, bucket, _this = this;
      H.assertSubtypeOfRuntimeType(element, H.getTypeArgumentByIndex(_this, 0));
      rest = _this._collection$_rest;
      if (rest == null)
        rest = _this._collection$_rest = P._LinkedHashSet__newHashTable();
      hash = _this._computeHashCode$1(element);
      bucket = rest[hash];
      if (bucket == null)
        rest[hash] = [_this._collection$_newLinkedCell$1(element)];
      else {
        if (_this._findBucketIndex$2(bucket, element) >= 0)
          return false;
        bucket.push(_this._collection$_newLinkedCell$1(element));
      }
      return true;
    },
    remove$1: function(_, object) {
      var _this = this;
      if (typeof object === "string" && object !== "__proto__")
        return _this._collection$_removeHashTableEntry$2(_this._collection$_strings, object);
      else if (typeof object === "number" && (object & 1073741823) === object)
        return _this._collection$_removeHashTableEntry$2(_this._collection$_nums, object);
      else
        return _this._remove$1(0, object);
    },
    _remove$1: function(_, object) {
      var bucket, index, _this = this,
        rest = _this._collection$_rest;
      if (rest == null)
        return false;
      bucket = _this._getBucket$2(rest, object);
      index = _this._findBucketIndex$2(bucket, object);
      if (index < 0)
        return false;
      _this._collection$_unlinkCell$1(bucket.splice(index, 1)[0]);
      return true;
    },
    clear$0: function(_) {
      var _this = this;
      if (_this._collection$_length > 0) {
        _this._collection$_strings = _this._collection$_nums = _this._collection$_rest = _this._collection$_first = _this._collection$_last = null;
        _this._collection$_length = 0;
        _this._collection$_modified$0();
      }
    },
    _collection$_addHashTableEntry$2: function(table, element) {
      H.assertSubtypeOfRuntimeType(element, H.getTypeArgumentByIndex(this, 0));
      if (H.interceptedTypeCheck(table[element], "$is_LinkedHashSetCell") != null)
        return false;
      table[element] = this._collection$_newLinkedCell$1(element);
      return true;
    },
    _collection$_removeHashTableEntry$2: function(table, element) {
      var cell;
      if (table == null)
        return false;
      cell = H.interceptedTypeCheck(table[element], "$is_LinkedHashSetCell");
      if (cell == null)
        return false;
      this._collection$_unlinkCell$1(cell);
      delete table[element];
      return true;
    },
    _collection$_modified$0: function() {
      this._collection$_modifications = 1073741823 & this._collection$_modifications + 1;
    },
    _collection$_newLinkedCell$1: function(element) {
      var last, _this = this,
        cell = new P._LinkedHashSetCell(H.assertSubtypeOfRuntimeType(element, H.getTypeArgumentByIndex(_this, 0)));
      if (_this._collection$_first == null)
        _this._collection$_first = _this._collection$_last = cell;
      else {
        last = _this._collection$_last;
        cell._collection$_previous = last;
        _this._collection$_last = last._collection$_next = cell;
      }
      ++_this._collection$_length;
      _this._collection$_modified$0();
      return cell;
    },
    _collection$_unlinkCell$1: function(cell) {
      var _this = this,
        previous = cell._collection$_previous,
        next = cell._collection$_next;
      if (previous == null)
        _this._collection$_first = next;
      else
        previous._collection$_next = next;
      if (next == null)
        _this._collection$_last = previous;
      else
        next._collection$_previous = previous;
      --_this._collection$_length;
      _this._collection$_modified$0();
    },
    _computeHashCode$1: function(element) {
      return J.get$hashCode$(element) & 1073741823;
    },
    _getBucket$2: function(table, element) {
      return table[this._computeHashCode$1(element)];
    },
    _findBucketIndex$2: function(bucket, element) {
      var $length, i;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (i = 0; i < $length; ++i)
        if (J.$eq$(bucket[i]._collection$_element, element))
          return i;
      return -1;
    },
    $isLinkedHashSet: 1
  };
  P._LinkedHashSetCell.prototype = {};
  P._LinkedHashSetIterator.prototype = {
    get$current: function(_) {
      return this._collection$_current;
    },
    moveNext$0: function() {
      var _this = this,
        t1 = _this._set;
      if (_this._collection$_modifications !== t1._collection$_modifications)
        throw H.wrapException(P.ConcurrentModificationError$(t1));
      else {
        t1 = _this._collection$_cell;
        if (t1 == null) {
          _this.set$_collection$_current(null);
          return false;
        } else {
          _this.set$_collection$_current(H.assertSubtypeOfRuntimeType(t1._collection$_element, H.getTypeArgumentByIndex(_this, 0)));
          _this._collection$_cell = _this._collection$_cell._collection$_next;
          return true;
        }
      }
    },
    set$_collection$_current: function(_current) {
      this._collection$_current = H.assertSubtypeOfRuntimeType(_current, H.getTypeArgumentByIndex(this, 0));
    },
    $isIterator: 1
  };
  P.HashMap_HashMap$from_closure.prototype = {
    call$2: function(k, v) {
      this.result.$indexSet(0, H.assertSubtypeOfRuntimeType(k, this.K), H.assertSubtypeOfRuntimeType(v, this.V));
    },
    $signature: 8
  };
  P.IterableBase.prototype = {};
  P.LinkedHashMap_LinkedHashMap$from_closure.prototype = {
    call$2: function(k, v) {
      this.result.$indexSet(0, H.assertSubtypeOfRuntimeType(k, this.K), H.assertSubtypeOfRuntimeType(v, this.V));
    },
    $signature: 8
  };
  P.LinkedHashSet.prototype = {$isEfficientLengthIterable: 1, $isIterable: 1, $isSet: 1};
  P.ListBase.prototype = {$isEfficientLengthIterable: 1, $isIterable: 1, $isList: 1};
  P.ListMixin.prototype = {
    get$iterator: function(receiver) {
      return new H.ListIterator(receiver, this.get$length(receiver), [H.getRuntimeTypeArgumentIntercepted(this, receiver, "ListMixin", 0)]);
    },
    elementAt$1: function(receiver, index) {
      return this.$index(receiver, index);
    },
    forEach$1: function(receiver, action) {
      var $length, i, _this = this;
      H.functionTypeCheck(action, {func: 1, ret: -1, args: [H.getRuntimeTypeArgumentIntercepted(_this, receiver, "ListMixin", 0)]});
      $length = _this.get$length(receiver);
      if (typeof $length !== "number")
        return H.iae($length);
      i = 0;
      for (; i < $length; ++i) {
        action.call$1(_this.$index(receiver, i));
        if ($length !== _this.get$length(receiver))
          throw H.wrapException(P.ConcurrentModificationError$(receiver));
      }
    },
    get$isEmpty: function(receiver) {
      return this.get$length(receiver) === 0;
    },
    get$isNotEmpty: function(receiver) {
      return !this.get$isEmpty(receiver);
    },
    get$first: function(receiver) {
      if (this.get$length(receiver) === 0)
        throw H.wrapException(H.IterableElementError_noElement());
      return this.$index(receiver, 0);
    },
    get$last: function(receiver) {
      var t1;
      if (this.get$length(receiver) === 0)
        throw H.wrapException(H.IterableElementError_noElement());
      t1 = this.get$length(receiver);
      if (typeof t1 !== "number")
        return t1.$sub();
      return this.$index(receiver, t1 - 1);
    },
    contains$1: function(receiver, element) {
      var i,
        $length = this.get$length(receiver);
      if (typeof $length !== "number")
        return H.iae($length);
      i = 0;
      for (; i < $length; ++i) {
        if (J.$eq$(this.$index(receiver, i), element))
          return true;
        if ($length !== this.get$length(receiver))
          throw H.wrapException(P.ConcurrentModificationError$(receiver));
      }
      return false;
    },
    lastWhere$2$orElse: function(receiver, test, orElse) {
      var $length, i, element, _this = this,
        t1 = H.getRuntimeTypeArgumentIntercepted(_this, receiver, "ListMixin", 0);
      H.functionTypeCheck(test, {func: 1, ret: P.bool, args: [t1]});
      H.functionTypeCheck(orElse, {func: 1, ret: t1});
      $length = _this.get$length(receiver);
      if (typeof $length !== "number")
        return $length.$sub();
      i = $length - 1;
      for (; i >= 0; --i) {
        element = _this.$index(receiver, i);
        if (H.boolConversionCheck(test.call$1(element)))
          return element;
        if ($length !== _this.get$length(receiver))
          throw H.wrapException(P.ConcurrentModificationError$(receiver));
      }
      if (orElse != null)
        return orElse.call$0();
      throw H.wrapException(H.IterableElementError_noElement());
    },
    expand$1$1: function(receiver, f, $T) {
      var t1 = H.getRuntimeTypeArgumentIntercepted(this, receiver, "ListMixin", 0);
      return new H.ExpandIterable(receiver, H.functionTypeCheck(f, {func: 1, ret: [P.Iterable, $T], args: [t1]}), [t1, $T]);
    },
    expand$1: function($receiver, f) {
      return this.expand$1$1($receiver, f, null);
    },
    fold$1$2: function(receiver, initialValue, combine, $T) {
      var $length, value, i, _this = this;
      H.assertSubtypeOfRuntimeType(initialValue, $T);
      H.functionTypeCheck(combine, {func: 1, ret: $T, args: [$T, H.getRuntimeTypeArgumentIntercepted(_this, receiver, "ListMixin", 0)]});
      $length = _this.get$length(receiver);
      if (typeof $length !== "number")
        return H.iae($length);
      value = initialValue;
      i = 0;
      for (; i < $length; ++i) {
        value = combine.call$2(value, _this.$index(receiver, i));
        if ($length !== _this.get$length(receiver))
          throw H.wrapException(P.ConcurrentModificationError$(receiver));
      }
      return value;
    },
    skip$1: function(receiver, count) {
      return H.SubListIterable$(receiver, count, null, H.getRuntimeTypeArgumentIntercepted(this, receiver, "ListMixin", 0));
    },
    toList$1$growable: function(receiver, growable) {
      var i, t1, _this = this,
        result = H.setRuntimeTypeInfo([], [H.getRuntimeTypeArgumentIntercepted(_this, receiver, "ListMixin", 0)]);
      C.JSArray_methods.set$length(result, _this.get$length(receiver));
      i = 0;
      while (true) {
        t1 = _this.get$length(receiver);
        if (typeof t1 !== "number")
          return H.iae(t1);
        if (!(i < t1))
          break;
        C.JSArray_methods.$indexSet(result, i, _this.$index(receiver, i));
        ++i;
      }
      return result;
    },
    toList$0: function($receiver) {
      return this.toList$1$growable($receiver, true);
    },
    add$1: function(receiver, element) {
      var t1, _this = this;
      H.assertSubtypeOfRuntimeType(element, H.getRuntimeTypeArgumentIntercepted(_this, receiver, "ListMixin", 0));
      t1 = _this.get$length(receiver);
      if (typeof t1 !== "number")
        return t1.$add();
      _this.set$length(receiver, t1 + 1);
      _this.$indexSet(receiver, t1, element);
    },
    _closeGap$2: function(receiver, start, end) {
      var i, _this = this,
        $length = _this.get$length(receiver),
        size = end - start;
      if (typeof $length !== "number")
        return H.iae($length);
      i = end;
      for (; i < $length; ++i)
        _this.$indexSet(receiver, i - size, _this.$index(receiver, i));
      _this.set$length(receiver, $length - size);
    },
    sort$1: function(receiver, compare) {
      var t1 = H.getRuntimeTypeArgumentIntercepted(this, receiver, "ListMixin", 0);
      H.functionTypeCheck(compare, {func: 1, ret: P.int, args: [t1, t1]});
      H.Sort_sort(receiver, compare == null ? P.collection_ListMixin__compareAny$closure() : compare, t1);
    },
    $add: function(receiver, other) {
      var result, t2, _this = this,
        t1 = [H.getRuntimeTypeArgumentIntercepted(_this, receiver, "ListMixin", 0)];
      H.assertSubtype(other, "$isList", t1, "$asList");
      result = H.setRuntimeTypeInfo([], t1);
      t1 = _this.get$length(receiver);
      t2 = J.get$length$asx(other);
      if (typeof t1 !== "number")
        return t1.$add();
      if (typeof t2 !== "number")
        return H.iae(t2);
      C.JSArray_methods.set$length(result, t1 + t2);
      C.JSArray_methods.setRange$3(result, 0, _this.get$length(receiver), receiver);
      C.JSArray_methods.setRange$3(result, _this.get$length(receiver), result.length, other);
      return result;
    },
    fillRange$3: function(receiver, start, end, fill) {
      var i;
      H.assertSubtypeOfRuntimeType(fill, H.getRuntimeTypeArgumentIntercepted(this, receiver, "ListMixin", 0));
      P.RangeError_checkValidRange(start, end, this.get$length(receiver));
      for (i = start; i < end; ++i)
        this.$indexSet(receiver, i, fill);
    },
    setRange$4: function(receiver, start, end, iterable, skipCount) {
      var $length, otherStart, otherList, t2, i, _this = this,
        t1 = H.getRuntimeTypeArgumentIntercepted(_this, receiver, "ListMixin", 0);
      H.assertSubtype(iterable, "$isIterable", [t1], "$asIterable");
      P.RangeError_checkValidRange(start, end, _this.get$length(receiver));
      if (typeof end !== "number")
        return end.$sub();
      $length = end - start;
      if ($length === 0)
        return;
      P.RangeError_checkNotNegative(skipCount, "skipCount");
      if (H.checkSubtype(iterable, "$isList", [t1], "$asList")) {
        otherStart = skipCount;
        otherList = iterable;
      } else {
        otherList = J.skip$1$ax(iterable, skipCount).toList$1$growable(0, false);
        otherStart = 0;
      }
      t1 = J.getInterceptor$asx(otherList);
      t2 = t1.get$length(otherList);
      if (typeof t2 !== "number")
        return H.iae(t2);
      if (otherStart + $length > t2)
        throw H.wrapException(H.IterableElementError_tooFew());
      if (otherStart < start)
        for (i = $length - 1; i >= 0; --i)
          _this.$indexSet(receiver, start + i, t1.$index(otherList, otherStart + i));
      else
        for (i = 0; i < $length; ++i)
          _this.$indexSet(receiver, start + i, t1.$index(otherList, otherStart + i));
    },
    indexOf$1: function(receiver, element) {
      var t1, i = 0;
      while (true) {
        t1 = this.get$length(receiver);
        if (typeof t1 !== "number")
          return H.iae(t1);
        if (!(i < t1))
          break;
        if (J.$eq$(this.$index(receiver, i), element))
          return i;
        ++i;
      }
      return -1;
    },
    removeAt$1: function(receiver, index) {
      var result = this.$index(receiver, index);
      this._closeGap$2(receiver, index, index + 1);
      return result;
    },
    toString$0: function(receiver) {
      return P.IterableBase_iterableToFullString(receiver, "[", "]");
    }
  };
  P.MapBase.prototype = {};
  P.MapBase_mapToString_closure.prototype = {
    call$2: function(k, v) {
      var t2,
        t1 = this._box_0;
      if (!t1.first)
        this.result._contents += ", ";
      t1.first = false;
      t1 = this.result;
      t2 = t1._contents += H.S(k);
      t1._contents = t2 + ": ";
      t1._contents += H.S(v);
    },
    $signature: 8
  };
  P.MapMixin.prototype = {
    forEach$1: function(receiver, action) {
      var t1, key, _this = this;
      H.functionTypeCheck(action, {func: 1, ret: -1, args: [H.getRuntimeTypeArgumentIntercepted(_this, receiver, "MapMixin", 0), H.getRuntimeTypeArgumentIntercepted(_this, receiver, "MapMixin", 1)]});
      for (t1 = J.get$iterator$ax(_this.get$keys(receiver)); t1.moveNext$0();) {
        key = t1.get$current(t1);
        action.call$2(key, _this.$index(receiver, key));
      }
    },
    containsKey$1: function(receiver, key) {
      return J.contains$1$asx(this.get$keys(receiver), key);
    },
    get$length: function(receiver) {
      return J.get$length$asx(this.get$keys(receiver));
    },
    get$isEmpty: function(receiver) {
      return J.get$isEmpty$asx(this.get$keys(receiver));
    },
    toString$0: function(receiver) {
      return P.MapBase_mapToString(receiver);
    },
    $isMap: 1
  };
  P._UnmodifiableMapMixin.prototype = {
    $indexSet: function(_, key, value) {
      H.assertSubtypeOfRuntimeType(key, H.getTypeArgumentByIndex(this, 0));
      H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(this, 1));
      throw H.wrapException(P.UnsupportedError$("Cannot modify unmodifiable map"));
    }
  };
  P.MapView.prototype = {
    $index: function(_, key) {
      return this._collection$_map.$index(0, key);
    },
    $indexSet: function(_, key, value) {
      this._collection$_map.$indexSet(0, H.assertSubtypeOfRuntimeType(key, H.getTypeArgumentByIndex(this, 0)), H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(this, 1)));
    },
    containsKey$1: function(_, key) {
      return this._collection$_map.containsKey$1(0, key);
    },
    forEach$1: function(_, action) {
      this._collection$_map.forEach$1(0, H.functionTypeCheck(action, {func: 1, ret: -1, args: [H.getTypeArgumentByIndex(this, 0), H.getTypeArgumentByIndex(this, 1)]}));
    },
    get$isEmpty: function(_) {
      var t1 = this._collection$_map;
      return t1.get$isEmpty(t1);
    },
    get$length: function(_) {
      var t1 = this._collection$_map;
      return t1.get$length(t1);
    },
    get$keys: function(_) {
      var t1 = this._collection$_map;
      return t1.get$keys(t1);
    },
    toString$0: function(_) {
      return P.MapBase_mapToString(this._collection$_map);
    },
    get$values: function(_) {
      var t1 = this._collection$_map;
      return t1.get$values(t1);
    },
    $isMap: 1
  };
  P.UnmodifiableMapView.prototype = {};
  P.ListQueue.prototype = {
    get$iterator: function(_) {
      var _this = this;
      return new P._ListQueueIterator(_this, _this._tail, _this._modificationCount, _this._head, _this.$ti);
    },
    forEach$1: function(_, f) {
      var modificationCount, i, t1, _this = this;
      H.functionTypeCheck(f, {func: 1, ret: -1, args: [H.getTypeArgumentByIndex(_this, 0)]});
      modificationCount = _this._modificationCount;
      for (i = _this._head; i !== _this._tail; i = (i + 1 & _this._table.length - 1) >>> 0) {
        t1 = _this._table;
        if (i < 0 || i >= t1.length)
          return H.ioore(t1, i);
        f.call$1(t1[i]);
        if (modificationCount !== _this._modificationCount)
          H.throwExpression(P.ConcurrentModificationError$(_this));
      }
    },
    get$isEmpty: function(_) {
      return this._head === this._tail;
    },
    get$length: function(_) {
      return (this._tail - this._head & this._table.length - 1) >>> 0;
    },
    get$first: function(_) {
      var t2,
        t1 = this._head;
      if (t1 === this._tail)
        throw H.wrapException(H.IterableElementError_noElement());
      t2 = this._table;
      if (t1 >= t2.length)
        return H.ioore(t2, t1);
      return t2[t1];
    },
    get$last: function(_) {
      var t3,
        t1 = this._head,
        t2 = this._tail;
      if (t1 === t2)
        throw H.wrapException(H.IterableElementError_noElement());
      t1 = this._table;
      t3 = t1.length;
      t2 = (t2 - 1 & t3 - 1) >>> 0;
      if (t2 < 0 || t2 >= t3)
        return H.ioore(t1, t2);
      return t1[t2];
    },
    elementAt$1: function(_, index) {
      var t1, t2, t3;
      P.RangeError_checkValidIndex(index, this, null, null);
      t1 = this._table;
      t2 = this._head;
      if (typeof index !== "number")
        return H.iae(index);
      t3 = t1.length;
      t2 = (t2 + index & t3 - 1) >>> 0;
      if (t2 < 0 || t2 >= t3)
        return H.ioore(t1, t2);
      return t1[t2];
    },
    add$1: function(_, value) {
      this._add$1(0, H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(this, 0)));
    },
    addAll$1: function(_, elements) {
      var addCount, $length, t2, t3, t4, newCapacity, newTable, endSpace, preSpace, _this = this,
        t1 = _this.$ti;
      H.assertSubtype(elements, "$isIterable", t1, "$asIterable");
      if (H.checkSubtype(elements, "$isList", t1, "$asList")) {
        addCount = elements.length;
        $length = _this.get$length(_this);
        t2 = $length + addCount;
        t3 = _this._table;
        t4 = t3.length;
        if (t2 >= t4) {
          newCapacity = P.ListQueue__nextPowerOf2(t2 + (t2 >>> 1));
          if (typeof newCapacity !== "number")
            return H.iae(newCapacity);
          t3 = new Array(newCapacity);
          t3.fixed$length = Array;
          newTable = H.setRuntimeTypeInfo(t3, t1);
          _this._tail = _this._writeToList$1(newTable);
          _this.set$_table(newTable);
          _this._head = 0;
          C.JSArray_methods.setRange$4(_this._table, $length, t2, elements, 0);
          _this._tail += addCount;
        } else {
          t1 = _this._tail;
          endSpace = t4 - t1;
          if (addCount < endSpace) {
            C.JSArray_methods.setRange$4(t3, t1, t1 + addCount, elements, 0);
            _this._tail += addCount;
          } else {
            preSpace = addCount - endSpace;
            C.JSArray_methods.setRange$4(t3, t1, t1 + endSpace, elements, 0);
            C.JSArray_methods.setRange$4(_this._table, 0, preSpace, elements, endSpace);
            _this._tail = preSpace;
          }
        }
        ++_this._modificationCount;
      } else
        for (t1 = J.get$iterator$ax(elements); t1.moveNext$0();)
          _this._add$1(0, t1.get$current(t1));
    },
    toString$0: function(_) {
      return P.IterableBase_iterableToFullString(this, "{", "}");
    },
    addFirst$1: function(value) {
      var t1, t2, _this = this;
      H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(_this, 0));
      t1 = _this._head;
      t2 = _this._table;
      t1 = (t1 - 1 & t2.length - 1) >>> 0;
      _this._head = t1;
      C.JSArray_methods.$indexSet(t2, t1, value);
      if (_this._head === _this._tail)
        _this._grow$0();
      ++_this._modificationCount;
    },
    removeFirst$0: function() {
      var t2, result, _this = this,
        t1 = _this._head;
      if (t1 === _this._tail)
        throw H.wrapException(H.IterableElementError_noElement());
      ++_this._modificationCount;
      t2 = _this._table;
      if (t1 >= t2.length)
        return H.ioore(t2, t1);
      result = t2[t1];
      C.JSArray_methods.$indexSet(t2, t1, null);
      _this._head = (_this._head + 1 & _this._table.length - 1) >>> 0;
      return result;
    },
    _add$1: function(_, element) {
      var t1, _this = this;
      H.assertSubtypeOfRuntimeType(element, H.getTypeArgumentByIndex(_this, 0));
      C.JSArray_methods.$indexSet(_this._table, _this._tail, element);
      t1 = (_this._tail + 1 & _this._table.length - 1) >>> 0;
      _this._tail = t1;
      if (_this._head === t1)
        _this._grow$0();
      ++_this._modificationCount;
    },
    _grow$0: function() {
      var newTable, t2, split, _this = this,
        t1 = new Array(_this._table.length * 2);
      t1.fixed$length = Array;
      newTable = H.setRuntimeTypeInfo(t1, _this.$ti);
      t1 = _this._table;
      t2 = _this._head;
      split = t1.length - t2;
      C.JSArray_methods.setRange$4(newTable, 0, split, t1, t2);
      C.JSArray_methods.setRange$4(newTable, split, split + _this._head, _this._table, 0);
      _this._head = 0;
      _this._tail = _this._table.length;
      _this.set$_table(newTable);
    },
    _writeToList$1: function(target) {
      var t1, t2, t3, $length, firstPartSize, _this = this;
      H.assertSubtype(target, "$isList", _this.$ti, "$asList");
      t1 = _this._head;
      t2 = _this._tail;
      t3 = _this._table;
      if (t1 <= t2) {
        $length = t2 - t1;
        C.JSArray_methods.setRange$4(target, 0, $length, t3, t1);
        return $length;
      } else {
        firstPartSize = t3.length - t1;
        C.JSArray_methods.setRange$4(target, 0, firstPartSize, t3, t1);
        C.JSArray_methods.setRange$4(target, firstPartSize, firstPartSize + _this._tail, _this._table, 0);
        return _this._tail + firstPartSize;
      }
    },
    set$_table: function(_table) {
      this._table = H.assertSubtype(_table, "$isList", this.$ti, "$asList");
    },
    $isQueue: 1
  };
  P._ListQueueIterator.prototype = {
    get$current: function(_) {
      return this._collection$_current;
    },
    moveNext$0: function() {
      var t2, t3, _this = this,
        t1 = _this._queue;
      if (_this._modificationCount !== t1._modificationCount)
        H.throwExpression(P.ConcurrentModificationError$(t1));
      t2 = _this._position;
      if (t2 === _this._end) {
        _this.set$_collection$_current(null);
        return false;
      }
      t3 = t1._table;
      if (t2 >= t3.length)
        return H.ioore(t3, t2);
      _this.set$_collection$_current(t3[t2]);
      _this._position = (_this._position + 1 & t1._table.length - 1) >>> 0;
      return true;
    },
    set$_collection$_current: function(_current) {
      this._collection$_current = H.assertSubtypeOfRuntimeType(_current, H.getTypeArgumentByIndex(this, 0));
    },
    $isIterator: 1
  };
  P._SetBase.prototype = {
    get$isEmpty: function(_) {
      return this.get$length(this) === 0;
    },
    get$isNotEmpty: function(_) {
      return this.get$length(this) !== 0;
    },
    addAll$1: function(_, elements) {
      var t1;
      for (t1 = J.get$iterator$ax(H.assertSubtype(elements, "$isIterable", this.$ti, "$asIterable")); t1.moveNext$0();)
        this.add$1(0, t1.get$current(t1));
    },
    containsAll$1: function(other) {
      var t1;
      H.assertSubtype(other, "$isIterable", [P.Object], "$asIterable");
      for (t1 = P._LinkedHashSetIterator$(other, other._collection$_modifications, H.getTypeArgumentByIndex(other, 0)); t1.moveNext$0();)
        if (!this.contains$1(0, t1._collection$_current))
          return false;
      return true;
    },
    toList$1$growable: function(_, growable) {
      var t1, i, i0, _this = this,
        result = H.setRuntimeTypeInfo([], _this.$ti);
      C.JSArray_methods.set$length(result, _this.get$length(_this));
      for (t1 = _this.get$iterator(_this), i = 0; t1.moveNext$0(); i = i0) {
        i0 = i + 1;
        C.JSArray_methods.$indexSet(result, i, t1.get$current(t1));
      }
      return result;
    },
    toList$0: function($receiver) {
      return this.toList$1$growable($receiver, true);
    },
    toString$0: function(_) {
      return P.IterableBase_iterableToFullString(this, "{", "}");
    },
    expand$1: function(_, f) {
      var t1 = H.getTypeArgumentByIndex(this, 0);
      return new H.ExpandIterable(this, H.functionTypeCheck(f, {func: 1, ret: [P.Iterable,,], args: [t1]}), [t1, null]);
    },
    forEach$1: function(_, f) {
      var t1;
      H.functionTypeCheck(f, {func: 1, ret: -1, args: [H.getTypeArgumentByIndex(this, 0)]});
      for (t1 = this.get$iterator(this); t1.moveNext$0();)
        f.call$1(t1.get$current(t1));
    },
    skip$1: function(_, n) {
      return H.SkipIterable_SkipIterable(this, n, H.getTypeArgumentByIndex(this, 0));
    },
    get$last: function(_) {
      var result,
        it = this.get$iterator(this);
      if (!it.moveNext$0())
        throw H.wrapException(H.IterableElementError_noElement());
      do
        result = it.get$current(it);
      while (it.moveNext$0());
      return result;
    },
    lastWhere$2$orElse: function(_, test, orElse) {
      var result, foundMatching, element,
        t1 = H.getTypeArgumentByIndex(this, 0);
      H.functionTypeCheck(test, {func: 1, ret: P.bool, args: [t1]});
      H.functionTypeCheck(orElse, {func: 1, ret: t1});
      for (t1 = this.get$iterator(this), result = null, foundMatching = false; t1.moveNext$0();) {
        element = t1.get$current(t1);
        if (H.boolConversionCheck(test.call$1(element))) {
          result = element;
          foundMatching = true;
        }
      }
      if (foundMatching)
        return result;
      if (orElse != null)
        return orElse.call$0();
      throw H.wrapException(H.IterableElementError_noElement());
    },
    elementAt$1: function(_, index) {
      var t1, elementIndex, element, _s5_ = "index";
      if (index == null)
        H.throwExpression(P.ArgumentError$notNull(_s5_));
      P.RangeError_checkNotNegative(index, _s5_);
      for (t1 = this.get$iterator(this), elementIndex = 0; t1.moveNext$0();) {
        element = t1.get$current(t1);
        if (index === elementIndex)
          return element;
        ++elementIndex;
      }
      throw H.wrapException(P.IndexError$(index, this, _s5_, null, elementIndex));
    },
    $isEfficientLengthIterable: 1,
    $isIterable: 1,
    $isSet: 1
  };
  P._SplayTreeNode.prototype = {
    set$left: function(_, left) {
      this.left = H.assertSubtype(left, "$is_SplayTreeNode", [H.getRuntimeTypeArgument(this, "_SplayTreeNode", 0)], "$as_SplayTreeNode");
    },
    set$right: function(_, right) {
      this.right = H.assertSubtype(right, "$is_SplayTreeNode", [H.getRuntimeTypeArgument(this, "_SplayTreeNode", 0)], "$as_SplayTreeNode");
    }
  };
  P._SplayTreeMapNode.prototype = {
    set$value: function(_, value) {
      this.value = H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(this, 1));
    },
    $as_SplayTreeNode: function($K, $V) {
      return [$K];
    }
  };
  P._SplayTree.prototype = {
    _splayMin$1: function(node) {
      var current, t2,
        t1 = H.getRuntimeTypeArgument(this, "_SplayTree", 1);
      H.assertSubtypeOfRuntimeType(node, t1);
      for (current = node; t2 = current.left, t2 != null; current = t2) {
        H.assertSubtypeOfRuntimeType(t2, t1);
        current.set$left(0, t2.right);
        t2.set$right(0, current);
      }
      return current;
    },
    _splayMax$1: function(node) {
      var current, t2,
        t1 = H.getRuntimeTypeArgument(this, "_SplayTree", 1);
      H.assertSubtypeOfRuntimeType(node, t1);
      for (current = node; t2 = current.right, t2 != null; current = t2) {
        H.assertSubtypeOfRuntimeType(t2, t1);
        current.set$right(0, t2.left);
        t2.set$left(0, current);
      }
      return current;
    },
    _splay$1: function(key) {
      var current, left, t1, t2, right, left0, comp, t3, t4, t5, tmp, current0, _this = this;
      H.assertSubtypeOfRuntimeType(key, H.getRuntimeTypeArgument(_this, "_SplayTree", 0));
      current = _this._root;
      if (current == null)
        return -1;
      left = _this._dummy;
      for (t1 = H.getRuntimeTypeArgument(_this, "_SplayTree", 1), t2 = H.getTypeArgumentByIndex(_this, 0), right = left, left0 = right, comp = null; true;) {
        t3 = H.assertSubtypeOfRuntimeType(current.key, t2);
        H.assertSubtypeOfRuntimeType(key, t2);
        t4 = _this._comparator;
        t3 = t4.call$2(t3, key);
        if (typeof t3 !== "number")
          return t3.$gt();
        if (t3 > 0) {
          t5 = current.left;
          if (t5 == null) {
            comp = t3;
            break;
          }
          t3 = t4.call$2(H.assertSubtypeOfRuntimeType(t5.key, t2), key);
          if (typeof t3 !== "number")
            return t3.$gt();
          if (t3 > 0) {
            tmp = current.left;
            current.set$left(0, tmp.right);
            tmp.set$right(0, current);
            H.assertSubtypeOfRuntimeType(tmp, t1);
            if (tmp.left == null) {
              comp = t3;
              current = tmp;
              break;
            }
            current = tmp;
          }
          right.set$left(0, current);
          current0 = H.assertSubtypeOfRuntimeType(current.left, t1);
          comp = t3;
          right = current;
          current = current0;
        } else {
          if (t3 < 0) {
            t5 = current.right;
            if (t5 == null) {
              comp = t3;
              break;
            }
            t3 = t4.call$2(H.assertSubtypeOfRuntimeType(t5.key, t2), key);
            if (typeof t3 !== "number")
              return t3.$lt();
            if (t3 < 0) {
              tmp = H.assertSubtypeOfRuntimeType(current.right, t1);
              current.set$right(0, tmp.left);
              tmp.set$left(0, current);
              if (tmp.right == null) {
                comp = t3;
                current = tmp;
                break;
              }
              current = tmp;
            }
            left0.set$right(0, current);
            current0 = H.assertSubtypeOfRuntimeType(current.right, t1);
          } else {
            comp = t3;
            break;
          }
          comp = t3;
          left0 = current;
          current = current0;
        }
      }
      left0.set$right(0, current.left);
      right.set$left(0, current.right);
      current.set$left(0, left.right);
      current.set$right(0, left.left);
      _this.set$_root(current);
      left.set$right(0, null);
      left.set$left(0, null);
      ++_this._splayCount;
      return comp;
    },
    _remove$1: function(_, key) {
      var result, t1, t2, right, _this = this;
      H.assertSubtypeOfRuntimeType(key, H.getRuntimeTypeArgument(_this, "_SplayTree", 0));
      if (_this._root == null)
        return;
      if (_this._splay$1(key) !== 0)
        return;
      result = _this._root;
      --_this._collection$_count;
      t1 = result.left;
      t2 = H.getRuntimeTypeArgument(_this, "_SplayTree", 1);
      if (t1 == null)
        _this.set$_root(H.assertSubtypeOfRuntimeType(result.right, t2));
      else {
        right = H.assertSubtypeOfRuntimeType(result.right, t2);
        _this.set$_root(_this._splayMax$1(H.assertSubtypeOfRuntimeType(t1, t2)));
        _this._root.set$right(0, right);
      }
      ++_this._modificationCount;
      return result;
    },
    _addNewRoot$2: function(node, comp) {
      var t1, _this = this;
      H.assertSubtypeOfRuntimeType(node, H.getRuntimeTypeArgument(_this, "_SplayTree", 1));
      ++_this._collection$_count;
      ++_this._modificationCount;
      t1 = _this._root;
      if (t1 == null) {
        _this.set$_root(node);
        return;
      }
      if (typeof comp !== "number")
        return comp.$lt();
      if (comp < 0) {
        node.set$left(0, t1);
        node.set$right(0, _this._root.right);
        _this._root.set$right(0, null);
      } else {
        node.set$right(0, t1);
        node.set$left(0, _this._root.left);
        _this._root.set$left(0, null);
      }
      _this.set$_root(node);
    },
    get$_collection$_first: function() {
      var _this = this,
        t1 = _this._root;
      if (t1 == null)
        return;
      _this.set$_root(_this._splayMin$1(t1));
      return _this._root;
    },
    get$_collection$_last: function() {
      var _this = this,
        t1 = _this._root;
      if (t1 == null)
        return;
      _this.set$_root(_this._splayMax$1(t1));
      return _this._root;
    }
  };
  P.SplayTreeMap.prototype = {
    $index: function(_, key) {
      var _this = this;
      if (!H.boolConversionCheck(_this._validKey.call$1(key)))
        return;
      if (_this._root != null)
        if (_this._splay$1(H.assertSubtypeOfRuntimeType(key, H.getTypeArgumentByIndex(_this, 0))) === 0)
          return _this._root.value;
      return;
    },
    remove$1: function(_, key) {
      var mapRoot;
      if (!H.boolConversionCheck(this._validKey.call$1(key)))
        return;
      mapRoot = this._remove$1(0, H.assertSubtypeOfRuntimeType(key, H.getTypeArgumentByIndex(this, 0)));
      if (mapRoot != null)
        return mapRoot.value;
      return;
    },
    $indexSet: function(_, key, value) {
      var comp, _this = this;
      H.assertSubtypeOfRuntimeType(key, H.getTypeArgumentByIndex(_this, 0));
      H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(_this, 1));
      if (key == null)
        throw H.wrapException(P.ArgumentError$(key));
      comp = _this._splay$1(key);
      if (comp === 0) {
        _this._root.set$value(0, value);
        return;
      }
      _this._addNewRoot$2(new P._SplayTreeMapNode(value, key, _this.$ti), comp);
    },
    get$isEmpty: function(_) {
      return this._root == null;
    },
    forEach$1: function(_, f) {
      var nodes, node, _this = this,
        t1 = H.getTypeArgumentByIndex(_this, 0);
      H.functionTypeCheck(f, {func: 1, ret: -1, args: [t1, H.getTypeArgumentByIndex(_this, 1)]});
      nodes = new P._SplayTreeNodeIterator(_this, H.setRuntimeTypeInfo([], [[P._SplayTreeNode, t1]]), _this._modificationCount, _this._splayCount, [t1]);
      nodes._findLeftMostDescendent$1(_this._root);
      for (t1 = _this.$ti; nodes.moveNext$0();) {
        node = H.assertSubtype(nodes.get$current(nodes), "$is_SplayTreeMapNode", t1, "$as_SplayTreeMapNode");
        f.call$2(node.key, node.value);
      }
    },
    get$length: function(_) {
      return this._collection$_count;
    },
    containsKey$1: function(_, key) {
      return H.boolConversionCheck(this._validKey.call$1(key)) && this._splay$1(H.assertSubtypeOfRuntimeType(key, H.getTypeArgumentByIndex(this, 0))) === 0;
    },
    get$keys: function(_) {
      return new P._SplayTreeKeyIterable(this, [H.getTypeArgumentByIndex(this, 0)]);
    },
    firstKey$0: function() {
      if (this._root == null)
        return;
      return this.get$_collection$_first().key;
    },
    lastKey$0: function() {
      if (this._root == null)
        return;
      return this.get$_collection$_last().key;
    },
    set$_root: function(_root) {
      this._root = H.assertSubtype(_root, "$is_SplayTreeMapNode", this.$ti, "$as_SplayTreeMapNode");
    },
    $as_SplayTree: function($K, $V) {
      return [$K, [P._SplayTreeMapNode, $K, $V]];
    },
    $isMap: 1
  };
  P.SplayTreeMap_closure.prototype = {
    call$1: function(v) {
      return H.checkSubtypeOfRuntimeType(v, this.K);
    },
    $signature: 74
  };
  P._SplayTreeIterator.prototype = {
    get$current: function(_) {
      var t1 = this._currentNode;
      if (t1 == null)
        return;
      return this._getValue$1(t1);
    },
    _findLeftMostDescendent$1: function(node) {
      var t1;
      H.assertSubtype(node, "$is_SplayTreeNode", [H.getRuntimeTypeArgument(this, "_SplayTreeIterator", 0)], "$as_SplayTreeNode");
      for (t1 = this._workList; node != null;) {
        C.JSArray_methods.add$1(t1, node);
        node = node.left;
      }
    },
    moveNext$0: function() {
      var t2, t3, _this = this,
        t1 = _this._tree;
      if (_this._modificationCount !== t1._modificationCount)
        throw H.wrapException(P.ConcurrentModificationError$(t1));
      t2 = _this._workList;
      if (t2.length === 0) {
        _this.set$_currentNode(null);
        return false;
      }
      if (t1._splayCount !== _this._splayCount && _this._currentNode != null) {
        t3 = H.assertSubtype(_this._currentNode, "$is_SplayTreeNode", [H.getRuntimeTypeArgument(_this, "_SplayTreeIterator", 0)], "$as_SplayTreeNode");
        C.JSArray_methods.set$length(t2, 0);
        if (t3 == null)
          _this._findLeftMostDescendent$1(t1._root);
        else {
          t1._splay$1(t3.key);
          _this._findLeftMostDescendent$1(t1._root.right);
        }
      }
      if (0 >= t2.length)
        return H.ioore(t2, -1);
      _this.set$_currentNode(t2.pop());
      _this._findLeftMostDescendent$1(_this._currentNode.right);
      return true;
    },
    set$_currentNode: function(_currentNode) {
      this._currentNode = H.assertSubtype(_currentNode, "$is_SplayTreeNode", [H.getRuntimeTypeArgument(this, "_SplayTreeIterator", 0)], "$as_SplayTreeNode");
    },
    $isIterator: 1,
    $asIterator: function($K, $T) {
      return [$T];
    }
  };
  P._SplayTreeKeyIterable.prototype = {
    get$length: function(_) {
      return this._tree._collection$_count;
    },
    get$isEmpty: function(_) {
      return this._tree._collection$_count === 0;
    },
    get$iterator: function(_) {
      var t1 = this._tree,
        t2 = new P._SplayTreeKeyIterator(t1, H.setRuntimeTypeInfo([], [[P._SplayTreeNode, H.getTypeArgumentByIndex(this, 0)]]), t1._modificationCount, t1._splayCount, this.$ti);
      t2._findLeftMostDescendent$1(t1._root);
      return t2;
    }
  };
  P._SplayTreeValueIterable.prototype = {
    get$length: function(_) {
      return this._collection$_map._collection$_count;
    },
    get$isEmpty: function(_) {
      return this._collection$_map._collection$_count === 0;
    },
    get$iterator: function(_) {
      var t1 = this._collection$_map,
        t2 = new P._SplayTreeValueIterator(t1, H.setRuntimeTypeInfo([], [[P._SplayTreeNode, H.getTypeArgumentByIndex(this, 0)]]), t1._modificationCount, t1._splayCount, this.$ti);
      t2._findLeftMostDescendent$1(t1._root);
      return t2;
    },
    $asEfficientLengthIterable: function($K, $V) {
      return [$V];
    },
    $asIterable: function($K, $V) {
      return [$V];
    }
  };
  P._SplayTreeKeyIterator.prototype = {
    _getValue$1: function(node) {
      return H.assertSubtype(node, "$is_SplayTreeNode", this.$ti, "$as_SplayTreeNode").key;
    },
    $as_SplayTreeIterator: function($K) {
      return [$K, $K];
    },
    $asIterator: null
  };
  P._SplayTreeValueIterator.prototype = {
    _getValue$1: function(node) {
      return H.assertSubtype(H.assertSubtype(node, "$is_SplayTreeNode", [H.getTypeArgumentByIndex(this, 0)], "$as_SplayTreeNode"), "$is_SplayTreeMapNode", this.$ti, "$as_SplayTreeMapNode").value;
    }
  };
  P._SplayTreeNodeIterator.prototype = {
    _getValue$1: function(node) {
      return H.assertSubtype(node, "$is_SplayTreeNode", this.$ti, "$as_SplayTreeNode");
    },
    $as_SplayTreeIterator: function($K) {
      return [$K, [P._SplayTreeNode, $K]];
    },
    $asIterator: function($K) {
      return [[P._SplayTreeNode, $K]];
    }
  };
  P._ListBase_Object_ListMixin.prototype = {};
  P._SplayTreeMap__SplayTree_MapMixin.prototype = {};
  P._UnmodifiableMapView_MapView__UnmodifiableMapMixin.prototype = {};
  P._JsonMap.prototype = {
    $index: function(_, key) {
      var result,
        t1 = this._processed;
      if (t1 == null)
        return this._convert$_data.$index(0, key);
      else if (typeof key !== "string")
        return;
      else {
        result = t1[key];
        return typeof result == "undefined" ? this._process$1(key) : result;
      }
    },
    get$length: function(_) {
      var t1;
      if (this._processed == null) {
        t1 = this._convert$_data;
        t1 = t1.get$length(t1);
      } else
        t1 = this._convert$_computeKeys$0().length;
      return t1;
    },
    get$isEmpty: function(_) {
      return this.get$length(this) === 0;
    },
    get$keys: function(_) {
      var t1;
      if (this._processed == null) {
        t1 = this._convert$_data;
        return t1.get$keys(t1);
      }
      return new P._JsonMapKeyIterable(this);
    },
    $indexSet: function(_, key, value) {
      var processed, original, _this = this;
      if (_this._processed == null)
        _this._convert$_data.$indexSet(0, key, value);
      else if (_this.containsKey$1(0, key)) {
        processed = _this._processed;
        processed[key] = value;
        original = _this._original;
        if (original == null ? processed != null : original !== processed)
          original[key] = null;
      } else
        _this._upgrade$0().$indexSet(0, key, value);
    },
    containsKey$1: function(_, key) {
      if (this._processed == null)
        return this._convert$_data.containsKey$1(0, key);
      return Object.prototype.hasOwnProperty.call(this._original, key);
    },
    forEach$1: function(_, f) {
      var keys, i, key, value, _this = this;
      H.functionTypeCheck(f, {func: 1, ret: -1, args: [P.String,,]});
      if (_this._processed == null)
        return _this._convert$_data.forEach$1(0, f);
      keys = _this._convert$_computeKeys$0();
      for (i = 0; i < keys.length; ++i) {
        key = keys[i];
        value = _this._processed[key];
        if (typeof value == "undefined") {
          value = P._convertJsonToDartLazy(_this._original[key]);
          _this._processed[key] = value;
        }
        f.call$2(key, value);
        if (keys !== _this._convert$_data)
          throw H.wrapException(P.ConcurrentModificationError$(_this));
      }
    },
    _convert$_computeKeys$0: function() {
      var keys = H.listTypeCheck(this._convert$_data);
      if (keys == null)
        keys = this._convert$_data = H.setRuntimeTypeInfo(Object.keys(this._original), [P.String]);
      return keys;
    },
    _upgrade$0: function() {
      var result, keys, i, t1, key, _this = this;
      if (_this._processed == null)
        return _this._convert$_data;
      result = P.LinkedHashMap_LinkedHashMap$_empty(P.String, null);
      keys = _this._convert$_computeKeys$0();
      for (i = 0; t1 = keys.length, i < t1; ++i) {
        key = keys[i];
        result.$indexSet(0, key, _this.$index(0, key));
      }
      if (t1 === 0)
        C.JSArray_methods.add$1(keys, null);
      else
        C.JSArray_methods.set$length(keys, 0);
      _this._original = _this._processed = null;
      return _this._convert$_data = result;
    },
    _process$1: function(key) {
      var result;
      if (!Object.prototype.hasOwnProperty.call(this._original, key))
        return;
      result = P._convertJsonToDartLazy(this._original[key]);
      return this._processed[key] = result;
    },
    $asMapMixin: function() {
      return [P.String, null];
    },
    $asMap: function() {
      return [P.String, null];
    }
  };
  P._JsonMapKeyIterable.prototype = {
    get$length: function(_) {
      var t1 = this._convert$_parent;
      return t1.get$length(t1);
    },
    elementAt$1: function(_, index) {
      var t1 = this._convert$_parent;
      return t1._processed == null ? t1.get$keys(t1).elementAt$1(0, index) : C.JSArray_methods.$index(t1._convert$_computeKeys$0(), index);
    },
    get$iterator: function(_) {
      var t1 = this._convert$_parent;
      if (t1._processed == null) {
        t1 = t1.get$keys(t1);
        t1 = t1.get$iterator(t1);
      } else {
        t1 = t1._convert$_computeKeys$0();
        t1 = new J.ArrayIterator(t1, t1.length, [H.getTypeArgumentByIndex(t1, 0)]);
      }
      return t1;
    },
    contains$1: function(_, key) {
      return this._convert$_parent.containsKey$1(0, key);
    },
    $asEfficientLengthIterable: function() {
      return [P.String];
    },
    $asListIterable: function() {
      return [P.String];
    },
    $asIterable: function() {
      return [P.String];
    }
  };
  P.Base64Codec.prototype = {
    normalize$3: function(_, source, start, end) {
      var inverseAlphabet, i, sliceStart, buffer, firstPadding, firstPaddingSourceIndex, paddingCount, i0, char, i1, digit1, digit2, char0, value, t1, t2, endLength, $length,
        _s31_ = "Invalid base64 encoding length ";
      end = P.RangeError_checkValidRange(start, end, source.length);
      inverseAlphabet = $.$get$_Base64Decoder__inverseAlphabet();
      if (typeof end !== "number")
        return H.iae(end);
      i = start;
      sliceStart = i;
      buffer = null;
      firstPadding = -1;
      firstPaddingSourceIndex = -1;
      paddingCount = 0;
      for (; i < end; i = i0) {
        i0 = i + 1;
        char = C.JSString_methods._codeUnitAt$1(source, i);
        if (char === 37) {
          i1 = i0 + 2;
          if (i1 <= end) {
            digit1 = H.hexDigitValue(C.JSString_methods._codeUnitAt$1(source, i0));
            digit2 = H.hexDigitValue(C.JSString_methods._codeUnitAt$1(source, i0 + 1));
            char0 = digit1 * 16 + digit2 - (digit2 & 256);
            if (char0 === 37)
              char0 = -1;
            i0 = i1;
          } else
            char0 = -1;
        } else
          char0 = char;
        if (0 <= char0 && char0 <= 127) {
          if (char0 < 0 || char0 >= inverseAlphabet.length)
            return H.ioore(inverseAlphabet, char0);
          value = inverseAlphabet[char0];
          if (value >= 0) {
            char0 = C.JSString_methods.codeUnitAt$1("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", value);
            if (char0 === char)
              continue;
            char = char0;
          } else {
            if (value === -1) {
              if (firstPadding < 0) {
                t1 = buffer == null ? null : buffer._contents.length;
                if (t1 == null)
                  t1 = 0;
                firstPadding = t1 + (i - sliceStart);
                firstPaddingSourceIndex = i;
              }
              ++paddingCount;
              if (char === 61)
                continue;
            }
            char = char0;
          }
          if (value !== -2) {
            if (buffer == null)
              buffer = new P.StringBuffer("");
            buffer._contents += C.JSString_methods.substring$2(source, sliceStart, i);
            buffer._contents += H.Primitives_stringFromCharCode(char);
            sliceStart = i0;
            continue;
          }
        }
        throw H.wrapException(P.FormatException$("Invalid base64 data", source, i));
      }
      if (buffer != null) {
        t1 = buffer._contents += C.JSString_methods.substring$2(source, sliceStart, end);
        t2 = t1.length;
        if (firstPadding >= 0)
          P.Base64Codec__checkPadding(source, firstPaddingSourceIndex, end, firstPadding, paddingCount, t2);
        else {
          endLength = C.JSInt_methods.$mod(t2 - 1, 4) + 1;
          if (endLength === 1)
            throw H.wrapException(P.FormatException$(_s31_, source, end));
          for (; endLength < 4;) {
            t1 += "=";
            buffer._contents = t1;
            ++endLength;
          }
        }
        t1 = buffer._contents;
        return C.JSString_methods.replaceRange$3(source, start, end, t1.charCodeAt(0) == 0 ? t1 : t1);
      }
      $length = end - start;
      if (firstPadding >= 0)
        P.Base64Codec__checkPadding(source, firstPaddingSourceIndex, end, firstPadding, paddingCount, $length);
      else {
        endLength = C.JSInt_methods.$mod($length, 4);
        if (endLength === 1)
          throw H.wrapException(P.FormatException$(_s31_, source, end));
        if (endLength > 1)
          source = C.JSString_methods.replaceRange$3(source, end, end, endLength === 2 ? "==" : "=");
      }
      return source;
    },
    $asCodec: function() {
      return [[P.List, P.int], P.String];
    }
  };
  P.Base64Encoder.prototype = {
    $asConverter: function() {
      return [[P.List, P.int], P.String];
    }
  };
  P.Codec.prototype = {};
  P.Converter.prototype = {};
  P.Encoding.prototype = {
    $asCodec: function() {
      return [P.String, [P.List, P.int]];
    }
  };
  P.JsonUnsupportedObjectError.prototype = {
    toString$0: function(_) {
      var safeString = P.Error_safeToString(this.unsupportedObject);
      return (this.cause != null ? "Converting object to an encodable object failed:" : "Converting object did not return an encodable object:") + " " + safeString;
    }
  };
  P.JsonCyclicError.prototype = {
    toString$0: function(_) {
      return "Cyclic error in JSON stringify";
    }
  };
  P.JsonCodec.prototype = {
    decode$2$reviver: function(_, source, reviver) {
      var t1 = P._parseJson(source, this.get$decoder()._reviver);
      return t1;
    },
    decode$1: function($receiver, source) {
      return this.decode$2$reviver($receiver, source, null);
    },
    encode$1: function(value) {
      var t1 = P._JsonStringStringifier_stringify(value, this.get$encoder()._toEncodable, null);
      return t1;
    },
    get$encoder: function() {
      return C.JsonEncoder_null;
    },
    get$decoder: function() {
      return C.JsonDecoder_null;
    },
    $asCodec: function() {
      return [P.Object, P.String];
    }
  };
  P.JsonEncoder.prototype = {
    $asConverter: function() {
      return [P.Object, P.String];
    }
  };
  P.JsonDecoder.prototype = {
    $asConverter: function() {
      return [P.String, P.Object];
    }
  };
  P._JsonStringifier.prototype = {
    writeStringContent$1: function(s) {
      var t1, t2, offset, i, charCode, t3,
        $length = s.length;
      for (t1 = J.getInterceptor$s(s), t2 = this._sink, offset = 0, i = 0; i < $length; ++i) {
        charCode = t1._codeUnitAt$1(s, i);
        if (charCode > 92)
          continue;
        if (charCode < 32) {
          if (i > offset)
            t2._contents += C.JSString_methods.substring$2(s, offset, i);
          offset = i + 1;
          t2._contents += H.Primitives_stringFromCharCode(92);
          switch (charCode) {
            case 8:
              t2._contents += H.Primitives_stringFromCharCode(98);
              break;
            case 9:
              t2._contents += H.Primitives_stringFromCharCode(116);
              break;
            case 10:
              t2._contents += H.Primitives_stringFromCharCode(110);
              break;
            case 12:
              t2._contents += H.Primitives_stringFromCharCode(102);
              break;
            case 13:
              t2._contents += H.Primitives_stringFromCharCode(114);
              break;
            default:
              t2._contents += H.Primitives_stringFromCharCode(117);
              t2._contents += H.Primitives_stringFromCharCode(48);
              t2._contents += H.Primitives_stringFromCharCode(48);
              t3 = charCode >>> 4 & 15;
              t2._contents += H.Primitives_stringFromCharCode(t3 < 10 ? 48 + t3 : 87 + t3);
              t3 = charCode & 15;
              t2._contents += H.Primitives_stringFromCharCode(t3 < 10 ? 48 + t3 : 87 + t3);
              break;
          }
        } else if (charCode === 34 || charCode === 92) {
          if (i > offset)
            t2._contents += C.JSString_methods.substring$2(s, offset, i);
          offset = i + 1;
          t2._contents += H.Primitives_stringFromCharCode(92);
          t2._contents += H.Primitives_stringFromCharCode(charCode);
        }
      }
      if (offset === 0)
        t2._contents += H.S(s);
      else if (offset < $length)
        t2._contents += t1.substring$2(s, offset, $length);
    },
    _checkCycle$1: function(object) {
      var t1, t2, i, t3;
      for (t1 = this._seen, t2 = t1.length, i = 0; i < t2; ++i) {
        t3 = t1[i];
        if (object == null ? t3 == null : object === t3)
          throw H.wrapException(new P.JsonCyclicError(object, null));
      }
      C.JSArray_methods.add$1(t1, object);
    },
    writeObject$1: function(object) {
      var customJson, e, t1, exception, _this = this;
      if (_this.writeJsonValue$1(object))
        return;
      _this._checkCycle$1(object);
      try {
        customJson = _this._toEncodable.call$1(object);
        if (!_this.writeJsonValue$1(customJson)) {
          t1 = P.JsonUnsupportedObjectError$(object, null, _this.get$_partialResult());
          throw H.wrapException(t1);
        }
        t1 = _this._seen;
        if (0 >= t1.length)
          return H.ioore(t1, -1);
        t1.pop();
      } catch (exception) {
        e = H.unwrapException(exception);
        t1 = P.JsonUnsupportedObjectError$(object, e, _this.get$_partialResult());
        throw H.wrapException(t1);
      }
    },
    writeJsonValue$1: function(object) {
      var t1, success, _this = this;
      if (typeof object === "number") {
        if (!isFinite(object))
          return false;
        _this._sink._contents += C.JSNumber_methods.toString$0(object);
        return true;
      } else if (object === true) {
        _this._sink._contents += "true";
        return true;
      } else if (object === false) {
        _this._sink._contents += "false";
        return true;
      } else if (object == null) {
        _this._sink._contents += "null";
        return true;
      } else if (typeof object === "string") {
        t1 = _this._sink;
        t1._contents += '"';
        _this.writeStringContent$1(object);
        t1._contents += '"';
        return true;
      } else {
        t1 = J.getInterceptor$(object);
        if (!!t1.$isList) {
          _this._checkCycle$1(object);
          _this.writeList$1(object);
          t1 = _this._seen;
          if (0 >= t1.length)
            return H.ioore(t1, -1);
          t1.pop();
          return true;
        } else if (!!t1.$isMap) {
          _this._checkCycle$1(object);
          success = _this.writeMap$1(object);
          t1 = _this._seen;
          if (0 >= t1.length)
            return H.ioore(t1, -1);
          t1.pop();
          return success;
        } else
          return false;
      }
    },
    writeList$1: function(list) {
      var t2, i, t3,
        t1 = this._sink;
      t1._contents += "[";
      t2 = J.getInterceptor$asx(list);
      if (t2.get$isNotEmpty(list)) {
        this.writeObject$1(t2.$index(list, 0));
        i = 1;
        while (true) {
          t3 = t2.get$length(list);
          if (typeof t3 !== "number")
            return H.iae(t3);
          if (!(i < t3))
            break;
          t1._contents += ",";
          this.writeObject$1(t2.$index(list, i));
          ++i;
        }
      }
      t1._contents += "]";
    },
    writeMap$1: function(map) {
      var t2, keyValueList, i, separator, t3, _this = this, _box_0 = {},
        t1 = J.getInterceptor$asx(map);
      if (t1.get$isEmpty(map)) {
        _this._sink._contents += "{}";
        return true;
      }
      t2 = t1.get$length(map);
      if (typeof t2 !== "number")
        return t2.$mul();
      t2 *= 2;
      keyValueList = new Array(t2);
      keyValueList.fixed$length = Array;
      i = _box_0.i = 0;
      _box_0.allStringKeys = true;
      t1.forEach$1(map, new P._JsonStringifier_writeMap_closure(_box_0, keyValueList));
      if (!_box_0.allStringKeys)
        return false;
      t1 = _this._sink;
      t1._contents += "{";
      for (separator = '"'; i < t2; i += 2, separator = ',"') {
        t1._contents += separator;
        _this.writeStringContent$1(H.stringTypeCheck(keyValueList[i]));
        t1._contents += '":';
        t3 = i + 1;
        if (t3 >= t2)
          return H.ioore(keyValueList, t3);
        _this.writeObject$1(keyValueList[t3]);
      }
      t1._contents += "}";
      return true;
    }
  };
  P._JsonStringifier_writeMap_closure.prototype = {
    call$2: function(key, value) {
      var t1, t2;
      if (typeof key !== "string")
        this._box_0.allStringKeys = false;
      t1 = this.keyValueList;
      t2 = this._box_0;
      C.JSArray_methods.$indexSet(t1, t2.i++, key);
      C.JSArray_methods.$indexSet(t1, t2.i++, value);
    },
    $signature: 8
  };
  P._JsonStringStringifier.prototype = {
    get$_partialResult: function() {
      var t1 = this._sink._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    }
  };
  P.Utf8Codec.prototype = {
    decode$1: function(_, codeUnits) {
      H.assertSubtype(codeUnits, "$isList", [P.int], "$asList");
      return new P.Utf8Decoder(false).convert$1(codeUnits);
    },
    get$encoder: function() {
      return C.C_Utf8Encoder;
    }
  };
  P.Utf8Encoder.prototype = {
    convert$1: function(string) {
      var $length, t1, encoder,
        end = P.RangeError_checkValidRange(0, null, string.length);
      if (typeof end !== "number")
        return end.$sub();
      $length = end - 0;
      if ($length === 0)
        return new Uint8Array(0);
      t1 = new Uint8Array($length * 3);
      encoder = new P._Utf8Encoder(t1);
      if (encoder._fillBuffer$3(string, 0, end) !== end)
        encoder._writeSurrogate$2(C.JSString_methods.codeUnitAt$1(string, end - 1), 0);
      return new Uint8Array(t1.subarray(0, H._checkValidRange(0, encoder._bufferIndex, t1.length)));
    },
    $asConverter: function() {
      return [P.String, [P.List, P.int]];
    }
  };
  P._Utf8Encoder.prototype = {
    _writeSurrogate$2: function(leadingSurrogate, nextCodeUnit) {
      var rune, _this = this,
        t1 = _this._convert$_buffer,
        t2 = _this._bufferIndex,
        t3 = t2 + 1,
        t4 = t1.length;
      if ((nextCodeUnit & 64512) === 56320) {
        rune = 65536 + ((leadingSurrogate & 1023) << 10) | nextCodeUnit & 1023;
        _this._bufferIndex = t3;
        if (t2 >= t4)
          return H.ioore(t1, t2);
        t1[t2] = 240 | rune >>> 18;
        t2 = _this._bufferIndex = t3 + 1;
        if (t3 >= t4)
          return H.ioore(t1, t3);
        t1[t3] = 128 | rune >>> 12 & 63;
        t3 = _this._bufferIndex = t2 + 1;
        if (t2 >= t4)
          return H.ioore(t1, t2);
        t1[t2] = 128 | rune >>> 6 & 63;
        _this._bufferIndex = t3 + 1;
        if (t3 >= t4)
          return H.ioore(t1, t3);
        t1[t3] = 128 | rune & 63;
        return true;
      } else {
        _this._bufferIndex = t3;
        if (t2 >= t4)
          return H.ioore(t1, t2);
        t1[t2] = 224 | leadingSurrogate >>> 12;
        t2 = _this._bufferIndex = t3 + 1;
        if (t3 >= t4)
          return H.ioore(t1, t3);
        t1[t3] = 128 | leadingSurrogate >>> 6 & 63;
        _this._bufferIndex = t2 + 1;
        if (t2 >= t4)
          return H.ioore(t1, t2);
        t1[t2] = 128 | leadingSurrogate & 63;
        return false;
      }
    },
    _fillBuffer$3: function(str, start, end) {
      var t1, t2, stringIndex, codeUnit, t3, stringIndex0, t4, _this = this;
      if (start !== end && (C.JSString_methods.codeUnitAt$1(str, end - 1) & 64512) === 55296)
        --end;
      for (t1 = _this._convert$_buffer, t2 = t1.length, stringIndex = start; stringIndex < end; ++stringIndex) {
        codeUnit = C.JSString_methods._codeUnitAt$1(str, stringIndex);
        if (codeUnit <= 127) {
          t3 = _this._bufferIndex;
          if (t3 >= t2)
            break;
          _this._bufferIndex = t3 + 1;
          t1[t3] = codeUnit;
        } else if ((codeUnit & 64512) === 55296) {
          if (_this._bufferIndex + 3 >= t2)
            break;
          stringIndex0 = stringIndex + 1;
          if (_this._writeSurrogate$2(codeUnit, C.JSString_methods._codeUnitAt$1(str, stringIndex0)))
            stringIndex = stringIndex0;
        } else if (codeUnit <= 2047) {
          t3 = _this._bufferIndex;
          t4 = t3 + 1;
          if (t4 >= t2)
            break;
          _this._bufferIndex = t4;
          if (t3 >= t2)
            return H.ioore(t1, t3);
          t1[t3] = 192 | codeUnit >>> 6;
          _this._bufferIndex = t4 + 1;
          t1[t4] = 128 | codeUnit & 63;
        } else {
          t3 = _this._bufferIndex;
          if (t3 + 2 >= t2)
            break;
          t4 = _this._bufferIndex = t3 + 1;
          if (t3 >= t2)
            return H.ioore(t1, t3);
          t1[t3] = 224 | codeUnit >>> 12;
          t3 = _this._bufferIndex = t4 + 1;
          if (t4 >= t2)
            return H.ioore(t1, t4);
          t1[t4] = 128 | codeUnit >>> 6 & 63;
          _this._bufferIndex = t3 + 1;
          if (t3 >= t2)
            return H.ioore(t1, t3);
          t1[t3] = 128 | codeUnit & 63;
        }
      }
      return stringIndex;
    }
  };
  P.Utf8Decoder.prototype = {
    convert$1: function(codeUnits) {
      var result, end, oneBytes, firstPart, buffer, start, isFirstCharacter, decoder, t1;
      H.assertSubtype(codeUnits, "$isList", [P.int], "$asList");
      result = P.Utf8Decoder__convertIntercepted(false, codeUnits, 0, null);
      if (result != null)
        return result;
      end = P.RangeError_checkValidRange(0, null, codeUnits.length);
      oneBytes = P._scanOneByteCharacters(codeUnits, 0, end);
      if (oneBytes > 0) {
        firstPart = P.String_String$fromCharCodes(codeUnits, 0, oneBytes);
        if (oneBytes === end)
          return firstPart;
        buffer = new P.StringBuffer(firstPart);
        start = oneBytes;
        isFirstCharacter = false;
      } else {
        start = 0;
        buffer = null;
        isFirstCharacter = true;
      }
      if (buffer == null)
        buffer = new P.StringBuffer("");
      decoder = new P._Utf8Decoder(false, buffer);
      decoder._isFirstCharacter = isFirstCharacter;
      decoder.convert$3(codeUnits, start, end);
      if (decoder._expectedUnits > 0) {
        H.throwExpression(P.FormatException$("Unfinished UTF-8 octet sequence", codeUnits, end));
        buffer._contents += H.Primitives_stringFromCharCode(65533);
        decoder._extraUnits = decoder._expectedUnits = decoder._convert$_value = 0;
      }
      t1 = buffer._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    $asConverter: function() {
      return [[P.List, P.int], P.String];
    }
  };
  P._Utf8Decoder.prototype = {
    convert$3: function(codeUnits, startIndex, endIndex) {
      var value, expectedUnits, extraUnits, t1, t2, i, unit, t3, oneBytes, i0, i1, t4, _this = this,
        _s21_ = "Bad UTF-8 encoding 0x";
      H.assertSubtype(codeUnits, "$isList", [P.int], "$asList");
      value = _this._convert$_value;
      expectedUnits = _this._expectedUnits;
      extraUnits = _this._extraUnits;
      _this._extraUnits = _this._expectedUnits = _this._convert$_value = 0;
      $label0$0:
        for (t1 = codeUnits.length, t2 = _this._stringSink, i = startIndex; true; i = i1) {
          $label1$1:
            if (expectedUnits > 0) {
              do {
                if (i === endIndex)
                  break $label0$0;
                if (i < 0 || i >= t1)
                  return H.ioore(codeUnits, i);
                unit = codeUnits[i];
                if ((unit & 192) !== 128) {
                  t3 = P.FormatException$(_s21_ + C.JSInt_methods.toRadixString$1(unit, 16), codeUnits, i);
                  throw H.wrapException(t3);
                } else {
                  value = (value << 6 | unit & 63) >>> 0;
                  --expectedUnits;
                  ++i;
                }
              } while (expectedUnits > 0);
              t3 = extraUnits - 1;
              if (t3 < 0 || t3 >= 4)
                return H.ioore(C.List_127_2047_65535_1114111, t3);
              if (value <= C.List_127_2047_65535_1114111[t3]) {
                t3 = P.FormatException$("Overlong encoding of 0x" + C.JSInt_methods.toRadixString$1(value, 16), codeUnits, i - extraUnits - 1);
                throw H.wrapException(t3);
              }
              if (value > 1114111) {
                t3 = P.FormatException$("Character outside valid Unicode range: 0x" + C.JSInt_methods.toRadixString$1(value, 16), codeUnits, i - extraUnits - 1);
                throw H.wrapException(t3);
              }
              if (!_this._isFirstCharacter || value !== 65279)
                t2._contents += H.Primitives_stringFromCharCode(value);
              _this._isFirstCharacter = false;
            }
          if (typeof endIndex !== "number")
            return H.iae(endIndex);
          t3 = i < endIndex;
          for (; t3;) {
            oneBytes = P._scanOneByteCharacters(codeUnits, i, endIndex);
            if (oneBytes > 0) {
              _this._isFirstCharacter = false;
              i0 = i + oneBytes;
              t2._contents += P.String_String$fromCharCodes(codeUnits, i, i0);
              if (i0 === endIndex)
                break;
            } else
              i0 = i;
            i1 = i0 + 1;
            if (i0 < 0 || i0 >= t1)
              return H.ioore(codeUnits, i0);
            unit = codeUnits[i0];
            if ((unit & 224) === 192) {
              value = unit & 31;
              expectedUnits = 1;
              extraUnits = 1;
              continue $label0$0;
            }
            if ((unit & 240) === 224) {
              value = unit & 15;
              expectedUnits = 2;
              extraUnits = 2;
              continue $label0$0;
            }
            if ((unit & 248) === 240 && unit < 245) {
              value = unit & 7;
              expectedUnits = 3;
              extraUnits = 3;
              continue $label0$0;
            }
            t4 = P.FormatException$(_s21_ + C.JSInt_methods.toRadixString$1(unit, 16), codeUnits, i1 - 1);
            throw H.wrapException(t4);
          }
          break $label0$0;
        }
      if (expectedUnits > 0) {
        _this._convert$_value = value;
        _this._expectedUnits = expectedUnits;
        _this._extraUnits = extraUnits;
      }
    }
  };
  P.NoSuchMethodError_toString_closure.prototype = {
    call$2: function(key, value) {
      var t1, t2, t3;
      H.interceptedTypeCheck(key, "$isSymbol0");
      t1 = this.sb;
      t2 = this._box_0;
      t1._contents += t2.comma;
      t3 = t1._contents += H.S(key.__internal$_name);
      t1._contents = t3 + ": ";
      t1._contents += P.Error_safeToString(value);
      t2.comma = ", ";
    },
    $signature: 80
  };
  P.bool.prototype = {};
  P.Comparable.prototype = {};
  P.DateTime.prototype = {
    add$1: function(_, duration) {
      return P.DateTime$_withValue(this._core$_value + C.JSInt_methods._tdivFast$1(duration._duration, 1000), this.isUtc);
    },
    $eq: function(_, other) {
      if (other == null)
        return false;
      return other instanceof P.DateTime && this._core$_value === other._core$_value && this.isUtc === other.isUtc;
    },
    compareTo$1: function(_, other) {
      return C.JSInt_methods.compareTo$1(this._core$_value, H.interceptedTypeCheck(other, "$isDateTime")._core$_value);
    },
    get$hashCode: function(_) {
      var t1 = this._core$_value;
      return (t1 ^ C.JSInt_methods._shrOtherPositive$1(t1, 30)) & 1073741823;
    },
    toString$0: function(_) {
      var _this = this,
        y = P.DateTime__fourDigits(H.Primitives_getYear(_this)),
        m = P.DateTime__twoDigits(H.Primitives_getMonth(_this)),
        d = P.DateTime__twoDigits(H.Primitives_getDay(_this)),
        h = P.DateTime__twoDigits(H.Primitives_getHours(_this)),
        min = P.DateTime__twoDigits(H.Primitives_getMinutes(_this)),
        sec = P.DateTime__twoDigits(H.Primitives_getSeconds(_this)),
        ms = P.DateTime__threeDigits(H.Primitives_getMilliseconds(_this));
      if (_this.isUtc)
        return y + "-" + m + "-" + d + " " + h + ":" + min + ":" + sec + "." + ms + "Z";
      else
        return y + "-" + m + "-" + d + " " + h + ":" + min + ":" + sec + "." + ms;
    },
    $isComparable: 1,
    $asComparable: function() {
      return [P.DateTime];
    }
  };
  P.double.prototype = {};
  P.Duration.prototype = {
    $add: function(_, other) {
      return new P.Duration(this._duration + H.interceptedTypeCheck(other, "$isDuration")._duration);
    },
    $sub: function(_, other) {
      return new P.Duration(this._duration - H.interceptedTypeCheck(other, "$isDuration")._duration);
    },
    $mul: function(_, factor) {
      if (typeof factor !== "number")
        return H.iae(factor);
      return new P.Duration(C.JSNumber_methods.round$0(this._duration * factor));
    },
    $gt: function(_, other) {
      return this._duration > H.interceptedTypeCheck(other, "$isDuration")._duration;
    },
    $le: function(_, other) {
      return C.JSInt_methods.$le(this._duration, other.get$_duration());
    },
    $ge: function(_, other) {
      return C.JSInt_methods.$ge(this._duration, other.get$_duration());
    },
    $eq: function(_, other) {
      if (other == null)
        return false;
      return other instanceof P.Duration && this._duration === other._duration;
    },
    get$hashCode: function(_) {
      return C.JSInt_methods.get$hashCode(this._duration);
    },
    compareTo$1: function(_, other) {
      return C.JSInt_methods.compareTo$1(this._duration, H.interceptedTypeCheck(other, "$isDuration")._duration);
    },
    toString$0: function(_) {
      var twoDigitMinutes, twoDigitSeconds, sixDigitUs,
        t1 = new P.Duration_toString_twoDigits(),
        t2 = this._duration;
      if (t2 < 0)
        return "-" + new P.Duration(0 - t2).toString$0(0);
      twoDigitMinutes = t1.call$1(C.JSInt_methods._tdivFast$1(t2, 60000000) % 60);
      twoDigitSeconds = t1.call$1(C.JSInt_methods._tdivFast$1(t2, 1000000) % 60);
      sixDigitUs = new P.Duration_toString_sixDigits().call$1(t2 % 1000000);
      return "" + C.JSInt_methods._tdivFast$1(t2, 3600000000) + ":" + H.S(twoDigitMinutes) + ":" + H.S(twoDigitSeconds) + "." + H.S(sixDigitUs);
    },
    $isComparable: 1,
    $asComparable: function() {
      return [P.Duration];
    }
  };
  P.Duration_toString_sixDigits.prototype = {
    call$1: function(n) {
      if (n >= 100000)
        return "" + n;
      if (n >= 10000)
        return "0" + n;
      if (n >= 1000)
        return "00" + n;
      if (n >= 100)
        return "000" + n;
      if (n >= 10)
        return "0000" + n;
      return "00000" + n;
    },
    $signature: 67
  };
  P.Duration_toString_twoDigits.prototype = {
    call$1: function(n) {
      if (n >= 10)
        return "" + n;
      return "0" + n;
    },
    $signature: 67
  };
  P.Error.prototype = {};
  P.AssertionError.prototype = {
    toString$0: function(_) {
      return "Assertion failed";
    },
    get$message: function(receiver) {
      return this.message;
    }
  };
  P.NullThrownError.prototype = {
    toString$0: function(_) {
      return "Throw of null.";
    }
  };
  P.ArgumentError.prototype = {
    get$_errorName: function() {
      return "Invalid argument" + (!this._hasValue ? "(s)" : "");
    },
    get$_errorExplanation: function() {
      return "";
    },
    toString$0: function(_) {
      var message, prefix, explanation, errorValue, _this = this,
        t1 = _this.name,
        nameString = t1 != null ? " (" + t1 + ")" : "";
      t1 = _this.message;
      message = t1 == null ? "" : ": " + H.S(t1);
      prefix = _this.get$_errorName() + nameString + message;
      if (!_this._hasValue)
        return prefix;
      explanation = _this.get$_errorExplanation();
      errorValue = P.Error_safeToString(_this.invalidValue);
      return prefix + explanation + ": " + errorValue;
    }
  };
  P.RangeError.prototype = {
    get$_errorName: function() {
      return "RangeError";
    },
    get$_errorExplanation: function() {
      var explanation, t2,
        t1 = this.start;
      if (t1 == null) {
        t1 = this.end;
        explanation = t1 != null ? ": Not less than or equal to " + H.S(t1) : "";
      } else {
        t2 = this.end;
        if (t2 == null)
          explanation = ": Not greater than or equal to " + H.S(t1);
        else if (t2 > t1)
          explanation = ": Not in range " + H.S(t1) + ".." + H.S(t2) + ", inclusive";
        else
          explanation = t2 < t1 ? ": Valid value range is empty" : ": Only valid value is " + H.S(t1);
      }
      return explanation;
    }
  };
  P.IndexError.prototype = {
    get$_errorName: function() {
      return "RangeError";
    },
    get$_errorExplanation: function() {
      var t1,
        invalidValue = H.intTypeCheck(this.invalidValue);
      if (typeof invalidValue !== "number")
        return invalidValue.$lt();
      if (invalidValue < 0)
        return ": index must not be negative";
      t1 = this.length;
      if (t1 === 0)
        return ": no indices are valid";
      return ": index should be less than " + H.S(t1);
    },
    get$length: function(receiver) {
      return this.length;
    }
  };
  P.NoSuchMethodError.prototype = {
    toString$0: function(_) {
      var t1, t2, _i, t3, t4, argument, receiverText, actualParameters, _this = this, _box_0 = {},
        sb = new P.StringBuffer("");
      _box_0.comma = "";
      for (t1 = _this._core$_arguments, t2 = t1.length, _i = 0, t3 = "", t4 = ""; _i < t2; ++_i, t4 = ", ") {
        argument = t1[_i];
        sb._contents = t3 + t4;
        t3 = sb._contents += P.Error_safeToString(argument);
        _box_0.comma = ", ";
      }
      _this._namedArguments.forEach$1(0, new P.NoSuchMethodError_toString_closure(_box_0, sb));
      receiverText = P.Error_safeToString(_this._core$_receiver);
      actualParameters = sb.toString$0(0);
      t1 = "NoSuchMethodError: method not found: '" + H.S(_this._core$_memberName.__internal$_name) + "'\nReceiver: " + receiverText + "\nArguments: [" + actualParameters + "]";
      return t1;
    }
  };
  P.UnsupportedError.prototype = {
    toString$0: function(_) {
      return "Unsupported operation: " + this.message;
    }
  };
  P.UnimplementedError.prototype = {
    toString$0: function(_) {
      var t1 = this.message;
      return t1 != null ? "UnimplementedError: " + t1 : "UnimplementedError";
    }
  };
  P.StateError.prototype = {
    toString$0: function(_) {
      return "Bad state: " + this.message;
    }
  };
  P.ConcurrentModificationError.prototype = {
    toString$0: function(_) {
      var t1 = this.modifiedObject;
      if (t1 == null)
        return "Concurrent modification during iteration.";
      return "Concurrent modification during iteration: " + P.Error_safeToString(t1) + ".";
    }
  };
  P.OutOfMemoryError.prototype = {
    toString$0: function(_) {
      return "Out of Memory";
    },
    $isError: 1
  };
  P.StackOverflowError.prototype = {
    toString$0: function(_) {
      return "Stack Overflow";
    },
    $isError: 1
  };
  P.CyclicInitializationError.prototype = {
    toString$0: function(_) {
      var t1 = this.variableName;
      return t1 == null ? "Reading static variable during its initialization" : "Reading static variable '" + t1 + "' during its initialization";
    }
  };
  P._Exception.prototype = {
    toString$0: function(_) {
      return "Exception: " + this.message;
    },
    $isException: 1
  };
  P.FormatException.prototype = {
    toString$0: function(_) {
      var source, lineNum, lineStart, previousCharWasCR, i, char, lineEnd, end, start, prefix, postfix, slice,
        t1 = this.message,
        report = t1 != null && "" !== t1 ? "FormatException: " + H.S(t1) : "FormatException",
        offset = this.offset,
        objectSource = this.source;
      if (typeof objectSource === "string") {
        if (offset != null)
          t1 = offset < 0 || offset > objectSource.length;
        else
          t1 = false;
        if (t1)
          offset = null;
        if (offset == null) {
          source = objectSource.length > 78 ? C.JSString_methods.substring$2(objectSource, 0, 75) + "..." : objectSource;
          return report + "\n" + source;
        }
        for (lineNum = 1, lineStart = 0, previousCharWasCR = false, i = 0; i < offset; ++i) {
          char = C.JSString_methods._codeUnitAt$1(objectSource, i);
          if (char === 10) {
            if (lineStart !== i || !previousCharWasCR)
              ++lineNum;
            lineStart = i + 1;
            previousCharWasCR = false;
          } else if (char === 13) {
            ++lineNum;
            lineStart = i + 1;
            previousCharWasCR = true;
          }
        }
        report = lineNum > 1 ? report + (" (at line " + lineNum + ", character " + (offset - lineStart + 1) + ")\n") : report + (" (at character " + (offset + 1) + ")\n");
        lineEnd = objectSource.length;
        for (i = offset; i < lineEnd; ++i) {
          char = C.JSString_methods.codeUnitAt$1(objectSource, i);
          if (char === 10 || char === 13) {
            lineEnd = i;
            break;
          }
        }
        if (lineEnd - lineStart > 78)
          if (offset - lineStart < 75) {
            end = lineStart + 75;
            start = lineStart;
            prefix = "";
            postfix = "...";
          } else {
            if (lineEnd - offset < 75) {
              start = lineEnd - 75;
              end = lineEnd;
              postfix = "";
            } else {
              start = offset - 36;
              end = offset + 36;
              postfix = "...";
            }
            prefix = "...";
          }
        else {
          end = lineEnd;
          start = lineStart;
          prefix = "";
          postfix = "";
        }
        slice = C.JSString_methods.substring$2(objectSource, start, end);
        return report + prefix + slice + postfix + "\n" + C.JSString_methods.$mul(" ", offset - start + prefix.length) + "^\n";
      } else
        return offset != null ? report + (" (at offset " + H.S(offset) + ")") : report;
    },
    $isException: 1
  };
  P.Function.prototype = {};
  P.int.prototype = {};
  P.Iterable.prototype = {
    where$1: function(_, test) {
      var t1 = H.getRuntimeTypeArgument(this, "Iterable", 0);
      return new H.WhereIterable(this, H.functionTypeCheck(test, {func: 1, ret: P.bool, args: [t1]}), [t1]);
    },
    expand$1$1: function(_, f, $T) {
      var t1 = H.getRuntimeTypeArgument(this, "Iterable", 0);
      return new H.ExpandIterable(this, H.functionTypeCheck(f, {func: 1, ret: [P.Iterable, $T], args: [t1]}), [t1, $T]);
    },
    expand$1: function($receiver, f) {
      return this.expand$1$1($receiver, f, null);
    },
    contains$1: function(_, element) {
      var t1;
      for (t1 = this.get$iterator(this); t1.moveNext$0();)
        if (J.$eq$(t1.get$current(t1), element))
          return true;
      return false;
    },
    forEach$1: function(_, f) {
      var t1;
      H.functionTypeCheck(f, {func: 1, ret: -1, args: [H.getRuntimeTypeArgument(this, "Iterable", 0)]});
      for (t1 = this.get$iterator(this); t1.moveNext$0();)
        f.call$1(t1.get$current(t1));
    },
    join$1: function(_, separator) {
      var t1,
        iterator = this.get$iterator(this);
      if (!iterator.moveNext$0())
        return "";
      if (separator === "") {
        t1 = "";
        do
          t1 += H.S(iterator.get$current(iterator));
        while (iterator.moveNext$0());
      } else {
        t1 = H.S(iterator.get$current(iterator));
        for (; iterator.moveNext$0();)
          t1 = t1 + separator + H.S(iterator.get$current(iterator));
      }
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    toList$1$growable: function(_, growable) {
      return P.List_List$from(this, growable, H.getRuntimeTypeArgument(this, "Iterable", 0));
    },
    toList$0: function($receiver) {
      return this.toList$1$growable($receiver, true);
    },
    get$length: function(_) {
      var count,
        it = this.get$iterator(this);
      for (count = 0; it.moveNext$0();)
        ++count;
      return count;
    },
    get$isEmpty: function(_) {
      return !this.get$iterator(this).moveNext$0();
    },
    get$isNotEmpty: function(_) {
      return !this.get$isEmpty(this);
    },
    skip$1: function(_, count) {
      return H.SkipIterable_SkipIterable(this, count, H.getRuntimeTypeArgument(this, "Iterable", 0));
    },
    get$first: function(_) {
      var it = this.get$iterator(this);
      if (!it.moveNext$0())
        throw H.wrapException(H.IterableElementError_noElement());
      return it.get$current(it);
    },
    get$last: function(_) {
      var result,
        it = this.get$iterator(this);
      if (!it.moveNext$0())
        throw H.wrapException(H.IterableElementError_noElement());
      do
        result = it.get$current(it);
      while (it.moveNext$0());
      return result;
    },
    get$single: function(_) {
      var result,
        it = this.get$iterator(this);
      if (!it.moveNext$0())
        throw H.wrapException(H.IterableElementError_noElement());
      result = it.get$current(it);
      if (it.moveNext$0())
        throw H.wrapException(H.IterableElementError_tooMany());
      return result;
    },
    lastWhere$2$orElse: function(_, test, orElse) {
      var result, foundMatching, element,
        t1 = H.getRuntimeTypeArgument(this, "Iterable", 0);
      H.functionTypeCheck(test, {func: 1, ret: P.bool, args: [t1]});
      H.functionTypeCheck(orElse, {func: 1, ret: t1});
      for (t1 = this.get$iterator(this), result = null, foundMatching = false; t1.moveNext$0();) {
        element = t1.get$current(t1);
        if (H.boolConversionCheck(test.call$1(element))) {
          result = element;
          foundMatching = true;
        }
      }
      if (foundMatching)
        return result;
      if (orElse != null)
        return orElse.call$0();
      throw H.wrapException(H.IterableElementError_noElement());
    },
    elementAt$1: function(_, index) {
      var t1, elementIndex, element, _s5_ = "index";
      if (index == null)
        H.throwExpression(P.ArgumentError$notNull(_s5_));
      P.RangeError_checkNotNegative(index, _s5_);
      for (t1 = this.get$iterator(this), elementIndex = 0; t1.moveNext$0();) {
        element = t1.get$current(t1);
        if (index === elementIndex)
          return element;
        ++elementIndex;
      }
      throw H.wrapException(P.IndexError$(index, this, _s5_, null, elementIndex));
    },
    toString$0: function(_) {
      return P.IterableBase_iterableToShortString(this, "(", ")");
    }
  };
  P.Iterator.prototype = {};
  P.List.prototype = {$isEfficientLengthIterable: 1, $isIterable: 1};
  P.Map.prototype = {};
  P.Null.prototype = {
    get$hashCode: function(_) {
      return P.Object.prototype.get$hashCode.call(this, this);
    },
    toString$0: function(_) {
      return "null";
    }
  };
  P.num.prototype = {$isComparable: 1,
    $asComparable: function() {
      return [P.num];
    }
  };
  P.Object.prototype = {constructor: P.Object, $isObject: 1,
    $eq: function(_, other) {
      return this === other;
    },
    get$hashCode: function(_) {
      return H.Primitives_objectHashCode(this);
    },
    toString$0: function(_) {
      return "Instance of '" + H.Primitives_objectTypeName(this) + "'";
    },
    noSuchMethod$1: function(_, invocation) {
      H.interceptedTypeCheck(invocation, "$isInvocation");
      throw H.wrapException(P.NoSuchMethodError$(this, invocation.get$memberName(), invocation.get$positionalArguments(), invocation.get$namedArguments()));
    },
    get$runtimeType: function(_) {
      return new H.TypeImpl(H.getRti(this));
    },
    toString: function() {
      return this.toString$0(this);
    }
  };
  P.Set.prototype = {};
  P.StackTrace.prototype = {};
  P.Stopwatch.prototype = {
    get$elapsedMicroseconds: function() {
      var t2, ticks,
        t1 = this._stop;
      if (t1 == null)
        t1 = H.intTypeCheck($.Primitives_timerTicks.call$0());
      t2 = this._core$_start;
      if (typeof t1 !== "number")
        return t1.$sub();
      if (typeof t2 !== "number")
        return H.iae(t2);
      ticks = t1 - t2;
      if ($.Stopwatch__frequency === 1000000)
        return ticks;
      return ticks * 1000;
    },
    start$0: function(_) {
      var t1, t2, t3, _this = this;
      if (_this._stop != null) {
        t1 = _this._core$_start;
        t2 = H.intTypeCheck($.Primitives_timerTicks.call$0());
        t3 = _this._stop;
        if (typeof t2 !== "number")
          return t2.$sub();
        if (typeof t3 !== "number")
          return H.iae(t3);
        if (typeof t1 !== "number")
          return t1.$add();
        _this._core$_start = t1 + (t2 - t3);
        _this._stop = null;
      }
    },
    stop$0: function(_) {
      if (this._stop == null)
        this._stop = H.intTypeCheck($.Primitives_timerTicks.call$0());
    },
    reset$0: function(_) {
      var t1 = this._stop;
      this._core$_start = t1 == null ? H.intTypeCheck($.Primitives_timerTicks.call$0()) : t1;
    }
  };
  P.String.prototype = {$isComparable: 1,
    $asComparable: function() {
      return [P.String];
    },
    $isPattern: 1
  };
  P.StringBuffer.prototype = {
    get$length: function(_) {
      return this._contents.length;
    },
    toString$0: function(_) {
      var t1 = this._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    $isStringSink: 1
  };
  P.Symbol0.prototype = {};
  P.Type.prototype = {};
  P.Uri__parseIPv4Address_error.prototype = {
    call$2: function(msg, position) {
      throw H.wrapException(P.FormatException$("Illegal IPv4 address, " + msg, this.host, position));
    },
    $signature: 96
  };
  P.Uri_parseIPv6Address_error.prototype = {
    call$2: function(msg, position) {
      throw H.wrapException(P.FormatException$("Illegal IPv6 address, " + msg, this.host, position));
    },
    call$1: function(msg) {
      return this.call$2(msg, null);
    },
    $signature: 99
  };
  P.Uri_parseIPv6Address_parseHex.prototype = {
    call$2: function(start, end) {
      var value;
      if (end - start > 4)
        this.error.call$2("an IPv6 part can only contain a maximum of 4 hex digits", start);
      value = P.int_parse(C.JSString_methods.substring$2(this.host, start, end), null, 16);
      if (typeof value !== "number")
        return value.$lt();
      if (value < 0 || value > 65535)
        this.error.call$2("each part must be in the range of `0x0..0xFFFF`", start);
      return value;
    },
    $signature: 108
  };
  P._Uri.prototype = {
    get$userInfo: function() {
      return this._userInfo;
    },
    get$host: function(_) {
      var t1 = this._host;
      if (t1 == null)
        return "";
      if (C.JSString_methods.startsWith$1(t1, "["))
        return C.JSString_methods.substring$2(t1, 1, t1.length - 1);
      return t1;
    },
    get$port: function(_) {
      var t1 = this._port;
      if (t1 == null)
        return P._Uri__defaultPort(this.scheme);
      return t1;
    },
    get$query: function(_) {
      var t1 = this._query;
      return t1 == null ? "" : t1;
    },
    get$fragment: function() {
      var t1 = this._fragment;
      return t1 == null ? "" : t1;
    },
    get$hasScheme: function() {
      return this.scheme.length !== 0;
    },
    get$hasAuthority: function() {
      return this._host != null;
    },
    get$hasQuery: function() {
      return this._query != null;
    },
    get$hasFragment: function() {
      return this._fragment != null;
    },
    toString$0: function(_) {
      var t2, t3, t4, _this = this,
        t1 = _this._text;
      if (t1 == null) {
        t1 = _this.scheme;
        t2 = t1.length !== 0 ? t1 + ":" : "";
        t3 = _this._host;
        t4 = t3 == null;
        if (!t4 || t1 === "file") {
          t1 = t2 + "//";
          t2 = _this._userInfo;
          if (t2.length !== 0)
            t1 = t1 + H.S(t2) + "@";
          if (!t4)
            t1 += t3;
          t2 = _this._port;
          if (t2 != null)
            t1 = t1 + ":" + H.S(t2);
        } else
          t1 = t2;
        t1 += _this.path;
        t2 = _this._query;
        if (t2 != null)
          t1 = t1 + "?" + t2;
        t2 = _this._fragment;
        if (t2 != null)
          t1 = t1 + "#" + t2;
        t1 = _this._text = t1.charCodeAt(0) == 0 ? t1 : t1;
      }
      return t1;
    },
    $eq: function(_, other) {
      var t1, t2, _this = this;
      if (other == null)
        return false;
      if (_this === other)
        return true;
      if (!!J.getInterceptor$(other).$isUri)
        if (_this.scheme === other.get$scheme())
          if (_this._host != null === other.get$hasAuthority())
            if (_this._userInfo == other.get$userInfo())
              if (_this.get$host(_this) == other.get$host(other))
                if (_this.get$port(_this) == other.get$port(other))
                  if (_this.path === other.get$path(other)) {
                    t1 = _this._query;
                    t2 = t1 == null;
                    if (!t2 === other.get$hasQuery()) {
                      if (t2)
                        t1 = "";
                      if (t1 === other.get$query(other)) {
                        t1 = _this._fragment;
                        t2 = t1 == null;
                        if (!t2 === other.get$hasFragment()) {
                          if (t2)
                            t1 = "";
                          t1 = t1 === other.get$fragment();
                        } else
                          t1 = false;
                      } else
                        t1 = false;
                    } else
                      t1 = false;
                  } else
                    t1 = false;
                else
                  t1 = false;
              else
                t1 = false;
            else
              t1 = false;
          else
            t1 = false;
        else
          t1 = false;
      else
        t1 = false;
      return t1;
    },
    get$hashCode: function(_) {
      var t1 = this._hashCodeCache;
      return t1 == null ? this._hashCodeCache = C.JSString_methods.get$hashCode(this.toString$0(0)) : t1;
    },
    $isUri: 1,
    get$scheme: function() {
      return this.scheme;
    },
    get$path: function(receiver) {
      return this.path;
    }
  };
  P._Uri__Uri$notSimple_closure.prototype = {
    call$1: function(_) {
      throw H.wrapException(P.FormatException$("Invalid port", this.uri, this.portStart + 1));
    },
    $signature: 112
  };
  P._Uri__makePath_closure.prototype = {
    call$1: function(s) {
      return P._Uri__uriEncode(C.List_qg40, s, C.C_Utf8Codec, false);
    },
    $signature: 28
  };
  P.UriData.prototype = {
    get$uri: function() {
      var t2, queryIndex, end, query, _this = this, _null = null,
        t1 = _this._uriCache;
      if (t1 != null)
        return t1;
      t1 = _this._separatorIndices;
      if (0 >= t1.length)
        return H.ioore(t1, 0);
      t2 = _this._text;
      t1 = t1[0] + 1;
      queryIndex = C.JSString_methods.indexOf$2(t2, "?", t1);
      end = t2.length;
      if (queryIndex >= 0) {
        query = P._Uri__normalizeOrSubstring(t2, queryIndex + 1, end, C.List_CVk, false);
        end = queryIndex;
      } else
        query = _null;
      return _this._uriCache = new P._DataUri("data", _null, _null, _null, P._Uri__normalizeOrSubstring(t2, t1, end, C.List_qg4, false), query, _null);
    },
    toString$0: function(_) {
      var t2,
        t1 = this._separatorIndices;
      if (0 >= t1.length)
        return H.ioore(t1, 0);
      t2 = this._text;
      return t1[0] === -1 ? "data:" + t2 : t2;
    }
  };
  P._createTables_closure.prototype = {
    call$1: function(_) {
      return new Uint8Array(96);
    },
    $signature: 116
  };
  P._createTables_build.prototype = {
    call$2: function(state, defaultTransition) {
      var t1 = this.tables;
      if (state >= t1.length)
        return H.ioore(t1, state);
      t1 = t1[state];
      J.fillRange$3$x(t1, 0, 96, defaultTransition);
      return t1;
    },
    $signature: 122
  };
  P._createTables_setChars.prototype = {
    call$3: function(target, chars, transition) {
      var t1, t2, i, t3;
      for (t1 = chars.length, t2 = target.length, i = 0; i < t1; ++i) {
        t3 = C.JSString_methods._codeUnitAt$1(chars, i) ^ 96;
        if (t3 >= t2)
          return H.ioore(target, t3);
        target[t3] = transition;
      }
    },
    $signature: 44
  };
  P._createTables_setRange.prototype = {
    call$3: function(target, range, transition) {
      var i, n, t1, t2;
      for (i = C.JSString_methods._codeUnitAt$1(range, 0), n = C.JSString_methods._codeUnitAt$1(range, 1), t1 = target.length; i <= n; ++i) {
        t2 = (i ^ 96) >>> 0;
        if (t2 >= t1)
          return H.ioore(target, t2);
        target[t2] = transition;
      }
    },
    $signature: 44
  };
  P._SimpleUri.prototype = {
    get$hasScheme: function() {
      return this._schemeEnd > 0;
    },
    get$hasAuthority: function() {
      return this._hostStart > 0;
    },
    get$hasQuery: function() {
      var t1 = this._queryStart;
      if (typeof t1 !== "number")
        return t1.$lt();
      return t1 < this._fragmentStart;
    },
    get$hasFragment: function() {
      return this._fragmentStart < this._uri.length;
    },
    get$_isHttp: function() {
      return this._schemeEnd === 4 && C.JSString_methods.startsWith$1(this._uri, "http");
    },
    get$_isHttps: function() {
      return this._schemeEnd === 5 && C.JSString_methods.startsWith$1(this._uri, "https");
    },
    get$scheme: function() {
      var t2, _this = this, _s4_ = "file",
        _s7_ = "package",
        t1 = _this._schemeEnd;
      if (t1 <= 0)
        return "";
      t2 = _this._schemeCache;
      if (t2 != null)
        return t2;
      if (_this.get$_isHttp())
        t1 = _this._schemeCache = "http";
      else if (_this.get$_isHttps()) {
        _this._schemeCache = "https";
        t1 = "https";
      } else if (t1 === 4 && C.JSString_methods.startsWith$1(_this._uri, _s4_)) {
        _this._schemeCache = _s4_;
        t1 = _s4_;
      } else if (t1 === 7 && C.JSString_methods.startsWith$1(_this._uri, _s7_)) {
        _this._schemeCache = _s7_;
        t1 = _s7_;
      } else {
        t1 = C.JSString_methods.substring$2(_this._uri, 0, t1);
        _this._schemeCache = t1;
      }
      return t1;
    },
    get$userInfo: function() {
      var t1 = this._hostStart,
        t2 = this._schemeEnd + 3;
      return t1 > t2 ? C.JSString_methods.substring$2(this._uri, t2, t1 - 1) : "";
    },
    get$host: function(_) {
      var t1 = this._hostStart;
      return t1 > 0 ? C.JSString_methods.substring$2(this._uri, t1, this._portStart) : "";
    },
    get$port: function(_) {
      var t1, t2, _this = this;
      if (_this._hostStart > 0) {
        t1 = _this._portStart;
        if (typeof t1 !== "number")
          return t1.$add();
        t2 = _this._pathStart;
        if (typeof t2 !== "number")
          return H.iae(t2);
        t2 = t1 + 1 < t2;
        t1 = t2;
      } else
        t1 = false;
      if (t1) {
        t1 = _this._portStart;
        if (typeof t1 !== "number")
          return t1.$add();
        return P.int_parse(C.JSString_methods.substring$2(_this._uri, t1 + 1, _this._pathStart), null, null);
      }
      if (_this.get$_isHttp())
        return 80;
      if (_this.get$_isHttps())
        return 443;
      return 0;
    },
    get$path: function(_) {
      return C.JSString_methods.substring$2(this._uri, this._pathStart, this._queryStart);
    },
    get$query: function(_) {
      var t1 = this._queryStart,
        t2 = this._fragmentStart;
      if (typeof t1 !== "number")
        return t1.$lt();
      return t1 < t2 ? C.JSString_methods.substring$2(this._uri, t1 + 1, t2) : "";
    },
    get$fragment: function() {
      var t1 = this._fragmentStart,
        t2 = this._uri;
      return t1 < t2.length ? C.JSString_methods.substring$1(t2, t1 + 1) : "";
    },
    get$hashCode: function(_) {
      var t1 = this._hashCodeCache;
      return t1 == null ? this._hashCodeCache = C.JSString_methods.get$hashCode(this._uri) : t1;
    },
    $eq: function(_, other) {
      if (other == null)
        return false;
      if (this === other)
        return true;
      return !!J.getInterceptor$(other).$isUri && this._uri === other.toString$0(0);
    },
    toString$0: function(_) {
      return this._uri;
    },
    $isUri: 1
  };
  P._DataUri.prototype = {};
  P.ServiceExtensionResponse.prototype = {};
  P._SyncBlock.prototype = {};
  W.promiseToFuture_closure.prototype = {
    call$1: function(promiseValue) {
      return this.completer.complete$1(0, H.futureOrCheck(promiseValue, {futureOr: 1, type: this.T}));
    },
    $signature: 7
  };
  W.promiseToFuture_closure0.prototype = {
    call$1: function(promiseError) {
      return this.completer.completeError$1(promiseError);
    },
    $signature: 7
  };
  W.HtmlElement.prototype = {$isHtmlElement: 1};
  W.AccessibleNodeList.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    }
  };
  W.AnchorElement.prototype = {
    toString$0: function(receiver) {
      return String(receiver);
    },
    $isAnchorElement: 1
  };
  W.AreaElement.prototype = {
    toString$0: function(receiver) {
      return String(receiver);
    }
  };
  W.BaseElement.prototype = {$isBaseElement: 1};
  W.Blob.prototype = {$isBlob: 1};
  W.BodyElement.prototype = {$isBodyElement: 1};
  W.CanvasElement.prototype = {$isCanvasElement: 1};
  W.CanvasGradient.prototype = {
    addColorStop$2: function(receiver, offset, color) {
      return receiver.addColorStop(offset, color);
    }
  };
  W.CanvasRenderingContext2D.prototype = {
    fillText$3: function(receiver, text, x, y) {
      receiver.fillText(text, x, y);
    },
    $isCanvasRenderingContext2D: 1
  };
  W.CharacterData.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    }
  };
  W.CssNumericValue.prototype = {
    add$1: function(receiver, value) {
      return receiver.add(value);
    },
    $isCssNumericValue: 1
  };
  W.CssPerspective.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    }
  };
  W.CssRule.prototype = {$isCssRule: 1};
  W.CssStyleDeclaration.prototype = {
    _browserPropertyName$1: function(receiver, propertyName) {
      var t1 = $.$get$CssStyleDeclaration__propertyCache(),
        $name = t1[propertyName];
      if (typeof $name === "string")
        return $name;
      $name = this._supportedBrowserPropertyName$1(receiver, propertyName);
      t1[propertyName] = $name;
      return $name;
    },
    _supportedBrowserPropertyName$1: function(receiver, propertyName) {
      var prefixed;
      if (propertyName.replace(/^-ms-/, "ms-").replace(/-([\da-z])/ig, function(_, letter) {
        return letter.toUpperCase();
      }) in receiver)
        return propertyName;
      prefixed = P.Device_cssPrefix() + propertyName;
      if (prefixed in receiver)
        return prefixed;
      return propertyName;
    },
    _setPropertyHelper$3: function(receiver, propertyName, value, priority) {
      if (priority == null)
        priority = "";
      receiver.setProperty(propertyName, value, priority);
    },
    set$color: function(receiver, value) {
      receiver.color = value == null ? "" : value;
    },
    $isCssStyleDeclaration: 1,
    get$length: function(receiver) {
      return receiver.length;
    }
  };
  W.CssStyleDeclarationBase.prototype = {
    set$color: function(receiver, value) {
      this._setPropertyHelper$3(receiver, this._browserPropertyName$1(receiver, "color"), value, "");
    }
  };
  W.CssStyleSheet.prototype = {$isCssStyleSheet: 1};
  W.CssStyleValue.prototype = {};
  W.CssTransformComponent.prototype = {};
  W.CssTransformValue.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    }
  };
  W.CssUnparsedValue.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    }
  };
  W.DataTransferItemList.prototype = {
    add$1: function(receiver, data_OR_file) {
      return receiver.add(data_OR_file);
    },
    $index: function(receiver, index) {
      return receiver[H.intTypeCheck(index)];
    },
    get$length: function(receiver) {
      return receiver.length;
    }
  };
  W.DivElement.prototype = {$isDivElement: 1};
  W.Document.prototype = {$isDocument: 1};
  W.DomException.prototype = {
    toString$0: function(receiver) {
      return String(receiver);
    },
    $isDomException: 1
  };
  W.DomRectList.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      H.intTypeCheck(index);
      if (index >>> 0 !== index || index >= receiver.length)
        throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      H.intTypeCheck(index);
      H.assertSubtype(value, "$isRectangle", [P.num], "$asRectangle");
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length: function(receiver, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
    },
    get$last: function(receiver) {
      var len = receiver.length;
      if (len > 0)
        return receiver[len - 1];
      throw H.wrapException(P.StateError$("No elements"));
    },
    elementAt$1: function(receiver, index) {
      return this.$index(receiver, index);
    },
    $isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [[P.Rectangle, P.num]];
    },
    $isJavaScriptIndexingBehavior: 1,
    $asJavaScriptIndexingBehavior: function() {
      return [[P.Rectangle, P.num]];
    },
    $asListMixin: function() {
      return [[P.Rectangle, P.num]];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [[P.Rectangle, P.num]];
    },
    $isList: 1,
    $asList: function() {
      return [[P.Rectangle, P.num]];
    },
    $asImmutableListMixin: function() {
      return [[P.Rectangle, P.num]];
    }
  };
  W.DomRectReadOnly.prototype = {
    toString$0: function(receiver) {
      return "Rectangle (" + H.S(receiver.left) + ", " + H.S(receiver.top) + ") " + H.S(this.get$width(receiver)) + " x " + H.S(this.get$height(receiver));
    },
    $eq: function(receiver, other) {
      var t1;
      if (other == null)
        return false;
      t1 = J.getInterceptor$(other);
      if (!t1.$isRectangle)
        return false;
      return receiver.left === t1.get$left(other) && receiver.top === t1.get$top(other) && this.get$width(receiver) === t1.get$width(other) && this.get$height(receiver) === t1.get$height(other);
    },
    get$hashCode: function(receiver) {
      return W._JenkinsSmiHash_hash4(C.JSNumber_methods.get$hashCode(receiver.left), C.JSNumber_methods.get$hashCode(receiver.top), C.JSNumber_methods.get$hashCode(this.get$width(receiver)), C.JSNumber_methods.get$hashCode(this.get$height(receiver)));
    },
    get$bottom: function(receiver) {
      return receiver.bottom;
    },
    get$height: function(receiver) {
      return receiver.height;
    },
    get$left: function(receiver) {
      return receiver.left;
    },
    get$right: function(receiver) {
      return receiver.right;
    },
    get$top: function(receiver) {
      return receiver.top;
    },
    get$width: function(receiver) {
      return receiver.width;
    },
    $isRectangle: 1,
    $asRectangle: function() {
      return [P.num];
    }
  };
  W.DomStringList.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      H.intTypeCheck(index);
      if (index >>> 0 !== index || index >= receiver.length)
        throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      H.intTypeCheck(index);
      H.stringTypeCheck(value);
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length: function(receiver, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
    },
    get$last: function(receiver) {
      var len = receiver.length;
      if (len > 0)
        return receiver[len - 1];
      throw H.wrapException(P.StateError$("No elements"));
    },
    elementAt$1: function(receiver, index) {
      return this.$index(receiver, index);
    },
    $isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [P.String];
    },
    $isJavaScriptIndexingBehavior: 1,
    $asJavaScriptIndexingBehavior: function() {
      return [P.String];
    },
    $asListMixin: function() {
      return [P.String];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [P.String];
    },
    $isList: 1,
    $asList: function() {
      return [P.String];
    },
    $asImmutableListMixin: function() {
      return [P.String];
    }
  };
  W.DomTokenList.prototype = {
    add$1: function(receiver, tokens) {
      return receiver.add(tokens);
    },
    get$length: function(receiver) {
      return receiver.length;
    }
  };
  W._ChildrenElementList.prototype = {
    contains$1: function(_, element) {
      return J.contains$1$asx(this._childElements, element);
    },
    get$isEmpty: function(_) {
      return this._html$_element.firstElementChild == null;
    },
    get$length: function(_) {
      return this._childElements.length;
    },
    $index: function(_, index) {
      return H.interceptedTypeCheck(J.$index$asx(this._childElements, H.intTypeCheck(index)), "$isElement0");
    },
    $indexSet: function(_, index, value) {
      H.intTypeCheck(index);
      this._html$_element.replaceChild(H.interceptedTypeCheck(value, "$isElement0"), J.$index$asx(this._childElements, index));
    },
    set$length: function(_, newLength) {
      throw H.wrapException(P.UnsupportedError$("Cannot resize element lists"));
    },
    add$1: function(_, value) {
      H.interceptedTypeCheck(value, "$isElement0");
      this._html$_element.appendChild(value);
      return value;
    },
    get$iterator: function(_) {
      var t1 = this.toList$0(this);
      return new J.ArrayIterator(t1, t1.length, [H.getTypeArgumentByIndex(t1, 0)]);
    },
    addAll$1: function(_, iterable) {
      var t1, t2;
      H.assertSubtype(iterable, "$isIterable", [W.Element0], "$asIterable");
      for (t1 = J.get$iterator$ax(iterable), t2 = this._html$_element; t1.moveNext$0();)
        t2.appendChild(t1.get$current(t1));
    },
    sort$1: function(_, compare) {
      H.functionTypeCheck(compare, {func: 1, ret: P.int, args: [W.Element0, W.Element0]});
      throw H.wrapException(P.UnsupportedError$("Cannot sort element lists"));
    },
    removeAt$1: function(_, index) {
      var result,
        t1 = this._childElements;
      if (index >= t1.length)
        return H.ioore(t1, index);
      result = H.interceptedTypeCheck(t1[index], "$isElement0");
      this._html$_element.removeChild(result);
      return result;
    },
    get$last: function(_) {
      var result = this._html$_element.lastElementChild;
      if (result == null)
        throw H.wrapException(P.StateError$("No elements"));
      return result;
    },
    $asEfficientLengthIterable: function() {
      return [W.Element0];
    },
    $asListMixin: function() {
      return [W.Element0];
    },
    $asIterable: function() {
      return [W.Element0];
    },
    $asList: function() {
      return [W.Element0];
    }
  };
  W._FrozenElementList.prototype = {
    get$length: function(_) {
      return this._nodeList.length;
    },
    $index: function(_, index) {
      return H.assertSubtypeOfRuntimeType(C.NodeList_methods.$index(this._nodeList, H.intTypeCheck(index)), H.getTypeArgumentByIndex(this, 0));
    },
    $indexSet: function(_, index, value) {
      H.intTypeCheck(index);
      H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(this, 0));
      throw H.wrapException(P.UnsupportedError$("Cannot modify list"));
    },
    set$length: function(_, newLength) {
      throw H.wrapException(P.UnsupportedError$("Cannot modify list"));
    },
    sort$1: function(_, compare) {
      var t1 = H.getTypeArgumentByIndex(this, 0);
      H.functionTypeCheck(compare, {func: 1, ret: P.int, args: [t1, t1]});
      throw H.wrapException(P.UnsupportedError$("Cannot sort list"));
    },
    get$last: function(_) {
      return H.assertSubtypeOfRuntimeType(C.NodeList_methods.get$last(this._nodeList), H.getTypeArgumentByIndex(this, 0));
    }
  };
  W.Element0.prototype = {
    get$attributes: function(receiver) {
      return new W._ElementAttributeMap(receiver);
    },
    get$children: function(receiver) {
      return new W._ChildrenElementList(receiver, receiver.children);
    },
    toString$0: function(receiver) {
      return receiver.localName;
    },
    createFragment$3$treeSanitizer$validator: function(receiver, html, treeSanitizer, validator) {
      var t1, t2, contextElement, fragment;
      if (treeSanitizer == null) {
        t1 = $.Element__defaultValidator;
        if (t1 == null) {
          t1 = H.setRuntimeTypeInfo([], [W.NodeValidator]);
          t2 = new W.NodeValidatorBuilder(t1);
          C.JSArray_methods.add$1(t1, W._Html5NodeValidator$(null));
          C.JSArray_methods.add$1(t1, W._TemplatingNodeValidator$());
          $.Element__defaultValidator = t2;
          validator = t2;
        } else
          validator = t1;
        t1 = $.Element__defaultSanitizer;
        if (t1 == null) {
          t1 = new W._ValidatingTreeSanitizer(validator);
          $.Element__defaultSanitizer = t1;
          treeSanitizer = t1;
        } else {
          t1.validator = validator;
          treeSanitizer = t1;
        }
      }
      if ($.Element__parseDocument == null) {
        t1 = document;
        t2 = t1.implementation.createHTMLDocument("");
        $.Element__parseDocument = t2;
        $.Element__parseRange = t2.createRange();
        t2 = $.Element__parseDocument.createElement("base");
        H.interceptedTypeCheck(t2, "$isBaseElement");
        t2.href = t1.baseURI;
        $.Element__parseDocument.head.appendChild(t2);
      }
      t1 = $.Element__parseDocument;
      if (t1.body == null) {
        t2 = t1.createElement("body");
        t1.body = H.interceptedTypeCheck(t2, "$isBodyElement");
      }
      t1 = $.Element__parseDocument;
      if (!!this.$isBodyElement)
        contextElement = t1.body;
      else {
        contextElement = t1.createElement(receiver.tagName);
        $.Element__parseDocument.body.appendChild(contextElement);
      }
      if ("createContextualFragment" in window.Range.prototype && !C.JSArray_methods.contains$1(C.List_ego, receiver.tagName)) {
        $.Element__parseRange.selectNodeContents(contextElement);
        fragment = $.Element__parseRange.createContextualFragment(html);
      } else {
        contextElement.innerHTML = html;
        fragment = $.Element__parseDocument.createDocumentFragment();
        for (; t1 = contextElement.firstChild, t1 != null;)
          fragment.appendChild(t1);
      }
      t1 = $.Element__parseDocument.body;
      if (contextElement == null ? t1 != null : contextElement !== t1)
        J.remove$0$ax(contextElement);
      treeSanitizer.sanitizeTree$1(fragment);
      document.adoptNode(fragment);
      return fragment;
    },
    createFragment$2$treeSanitizer: function($receiver, html, treeSanitizer) {
      return this.createFragment$3$treeSanitizer$validator($receiver, html, treeSanitizer, null);
    },
    setInnerHtml$1: function(receiver, html) {
      receiver.textContent = null;
      receiver.appendChild(this.createFragment$3$treeSanitizer$validator(receiver, html, null, null));
    },
    $isElement0: 1,
    get$tagName: function(receiver) {
      return receiver.tagName;
    }
  };
  W.Element_Element$html_closure.prototype = {
    call$1: function(e) {
      return !!J.getInterceptor$(H.interceptedTypeCheck(e, "$isNode")).$isElement0;
    },
    $signature: 62
  };
  W.Entry.prototype = {
    _html$_remove$2: function(receiver, successCallback, errorCallback) {
      H.functionTypeCheck(successCallback, {func: 1, ret: -1});
      H.functionTypeCheck(errorCallback, {func: 1, ret: -1, args: [W.DomException]});
      return receiver.remove(H.convertDartClosureToJS(successCallback, 0), H.convertDartClosureToJS(errorCallback, 1));
    },
    remove$0: function(receiver) {
      var t1 = new P._Future($.Zone__current, [null]),
        completer = new P._AsyncCompleter(t1, [null]);
      this._html$_remove$2(receiver, new W.Entry_remove_closure(completer), new W.Entry_remove_closure0(completer));
      return t1;
    }
  };
  W.Entry_remove_closure.prototype = {
    call$0: function() {
      this.completer.complete$0(0);
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 0
  };
  W.Entry_remove_closure0.prototype = {
    call$1: function(error) {
      this.completer.completeError$1(H.interceptedTypeCheck(error, "$isDomException"));
    },
    $signature: 128
  };
  W.Event.prototype = {
    get$target: function(receiver) {
      return W._convertNativeToDart_EventTarget(receiver.target);
    },
    $isEvent: 1
  };
  W.EventTarget.prototype = {
    addEventListener$3: function(receiver, type, listener, useCapture) {
      H.functionTypeCheck(listener, {func: 1, args: [W.Event]});
      if (listener != null)
        this._addEventListener$3(receiver, type, listener, useCapture);
    },
    addEventListener$2: function($receiver, type, listener) {
      return this.addEventListener$3($receiver, type, listener, null);
    },
    removeEventListener$3: function(receiver, type, listener, useCapture) {
      H.functionTypeCheck(listener, {func: 1, args: [W.Event]});
      if (listener != null)
        this._removeEventListener$3(receiver, type, listener, useCapture);
    },
    removeEventListener$2: function($receiver, type, listener) {
      return this.removeEventListener$3($receiver, type, listener, null);
    },
    _addEventListener$3: function(receiver, type, listener, options) {
      return receiver.addEventListener(type, H.convertDartClosureToJS(H.functionTypeCheck(listener, {func: 1, args: [W.Event]}), 1), options);
    },
    _removeEventListener$3: function(receiver, type, listener, options) {
      return receiver.removeEventListener(type, H.convertDartClosureToJS(H.functionTypeCheck(listener, {func: 1, args: [W.Event]}), 1), options);
    },
    $isEventTarget: 1
  };
  W.File.prototype = {$isFile: 1};
  W.FileList.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      H.intTypeCheck(index);
      if (index >>> 0 !== index || index >= receiver.length)
        throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      H.intTypeCheck(index);
      H.interceptedTypeCheck(value, "$isFile");
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length: function(receiver, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
    },
    get$last: function(receiver) {
      var len = receiver.length;
      if (len > 0)
        return receiver[len - 1];
      throw H.wrapException(P.StateError$("No elements"));
    },
    elementAt$1: function(receiver, index) {
      return this.$index(receiver, index);
    },
    $isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [W.File];
    },
    $isJavaScriptIndexingBehavior: 1,
    $asJavaScriptIndexingBehavior: function() {
      return [W.File];
    },
    $asListMixin: function() {
      return [W.File];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [W.File];
    },
    $isList: 1,
    $asList: function() {
      return [W.File];
    },
    $isFileList: 1,
    $asImmutableListMixin: function() {
      return [W.File];
    }
  };
  W.FileWriter.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    }
  };
  W.FontFace.prototype = {$isFontFace: 1};
  W.FontFaceSet.prototype = {
    add$1: function(receiver, arg) {
      return receiver.add(arg);
    },
    $isFontFaceSet: 1
  };
  W.FormElement.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    }
  };
  W.Gamepad.prototype = {$isGamepad: 1};
  W.History.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    }
  };
  W.HtmlCollection.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      H.intTypeCheck(index);
      if (index >>> 0 !== index || index >= receiver.length)
        throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      H.intTypeCheck(index);
      H.interceptedTypeCheck(value, "$isNode");
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length: function(receiver, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
    },
    get$last: function(receiver) {
      var len = receiver.length;
      if (len > 0)
        return receiver[len - 1];
      throw H.wrapException(P.StateError$("No elements"));
    },
    elementAt$1: function(receiver, index) {
      return this.$index(receiver, index);
    },
    $isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [W.Node];
    },
    $isJavaScriptIndexingBehavior: 1,
    $asJavaScriptIndexingBehavior: function() {
      return [W.Node];
    },
    $asListMixin: function() {
      return [W.Node];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [W.Node];
    },
    $isList: 1,
    $asList: function() {
      return [W.Node];
    },
    $isHtmlCollection: 1,
    $asImmutableListMixin: function() {
      return [W.Node];
    }
  };
  W.HttpRequest.prototype = {
    open$3$async: function(receiver, method, url, async) {
      return receiver.open(method, url, true);
    },
    $isHttpRequest: 1
  };
  W.HttpRequest_request_closure.prototype = {
    call$1: function(e) {
      var t1, t2, accepted, unknownRedirect, t3;
      H.interceptedTypeCheck(e, "$isProgressEvent");
      t1 = this.xhr;
      t2 = t1.status;
      if (typeof t2 !== "number")
        return t2.$ge();
      accepted = t2 >= 200 && t2 < 300;
      unknownRedirect = t2 > 307 && t2 < 400;
      t2 = accepted || t2 === 0 || t2 === 304 || unknownRedirect;
      t3 = this.completer;
      if (t2)
        t3.complete$1(0, t1);
      else
        t3.completeError$1(e);
    },
    $signature: 134
  };
  W.HttpRequestEventTarget.prototype = {};
  W.ImageData.prototype = {$isImageData: 1};
  W.InputElement.prototype = {$isInputElement: 1};
  W.KeyboardEvent.prototype = {$isKeyboardEvent: 1};
  W.Location.prototype = {
    toString$0: function(receiver) {
      return String(receiver);
    },
    $isLocation: 1
  };
  W.MediaKeySession.prototype = {
    remove$0: function(receiver) {
      return W.promiseToFuture(receiver.remove(), null);
    }
  };
  W.MediaList.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    }
  };
  W.MessagePort.prototype = {
    addEventListener$3: function(receiver, type, listener, useCapture) {
      H.functionTypeCheck(listener, {func: 1, args: [W.Event]});
      if (type === "message")
        receiver.start();
      this.super$EventTarget$addEventListener(receiver, type, listener, false);
    },
    $isMessagePort: 1
  };
  W.MetaElement.prototype = {$isMetaElement: 1};
  W.MidiInputMap.prototype = {
    containsKey$1: function(receiver, key) {
      return P.convertNativeToDart_Dictionary(receiver.get(key)) != null;
    },
    $index: function(receiver, key) {
      return P.convertNativeToDart_Dictionary(receiver.get(H.stringTypeCheck(key)));
    },
    forEach$1: function(receiver, f) {
      var entries, entry;
      H.functionTypeCheck(f, {func: 1, ret: -1, args: [P.String,,]});
      entries = receiver.entries();
      for (; true;) {
        entry = entries.next();
        if (entry.done)
          return;
        f.call$2(entry.value[0], P.convertNativeToDart_Dictionary(entry.value[1]));
      }
    },
    get$keys: function(receiver) {
      var keys = H.setRuntimeTypeInfo([], [P.String]);
      this.forEach$1(receiver, new W.MidiInputMap_keys_closure(keys));
      return keys;
    },
    get$length: function(receiver) {
      return receiver.size;
    },
    get$isEmpty: function(receiver) {
      return receiver.size === 0;
    },
    $indexSet: function(receiver, key, value) {
      throw H.wrapException(P.UnsupportedError$("Not supported"));
    },
    $asMapMixin: function() {
      return [P.String, null];
    },
    $isMap: 1,
    $asMap: function() {
      return [P.String, null];
    }
  };
  W.MidiInputMap_keys_closure.prototype = {
    call$2: function(k, v) {
      return C.JSArray_methods.add$1(this.keys, k);
    },
    $signature: 17
  };
  W.MidiOutputMap.prototype = {
    containsKey$1: function(receiver, key) {
      return P.convertNativeToDart_Dictionary(receiver.get(key)) != null;
    },
    $index: function(receiver, key) {
      return P.convertNativeToDart_Dictionary(receiver.get(H.stringTypeCheck(key)));
    },
    forEach$1: function(receiver, f) {
      var entries, entry;
      H.functionTypeCheck(f, {func: 1, ret: -1, args: [P.String,,]});
      entries = receiver.entries();
      for (; true;) {
        entry = entries.next();
        if (entry.done)
          return;
        f.call$2(entry.value[0], P.convertNativeToDart_Dictionary(entry.value[1]));
      }
    },
    get$keys: function(receiver) {
      var keys = H.setRuntimeTypeInfo([], [P.String]);
      this.forEach$1(receiver, new W.MidiOutputMap_keys_closure(keys));
      return keys;
    },
    get$length: function(receiver) {
      return receiver.size;
    },
    get$isEmpty: function(receiver) {
      return receiver.size === 0;
    },
    $indexSet: function(receiver, key, value) {
      throw H.wrapException(P.UnsupportedError$("Not supported"));
    },
    $asMapMixin: function() {
      return [P.String, null];
    },
    $isMap: 1,
    $asMap: function() {
      return [P.String, null];
    }
  };
  W.MidiOutputMap_keys_closure.prototype = {
    call$2: function(k, v) {
      return C.JSArray_methods.add$1(this.keys, k);
    },
    $signature: 17
  };
  W.MimeType.prototype = {$isMimeType: 1};
  W.MimeTypeArray.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      H.intTypeCheck(index);
      if (index >>> 0 !== index || index >= receiver.length)
        throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      H.intTypeCheck(index);
      H.interceptedTypeCheck(value, "$isMimeType");
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length: function(receiver, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
    },
    get$last: function(receiver) {
      var len = receiver.length;
      if (len > 0)
        return receiver[len - 1];
      throw H.wrapException(P.StateError$("No elements"));
    },
    elementAt$1: function(receiver, index) {
      return this.$index(receiver, index);
    },
    $isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [W.MimeType];
    },
    $isJavaScriptIndexingBehavior: 1,
    $asJavaScriptIndexingBehavior: function() {
      return [W.MimeType];
    },
    $asListMixin: function() {
      return [W.MimeType];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [W.MimeType];
    },
    $isList: 1,
    $asList: function() {
      return [W.MimeType];
    },
    $asImmutableListMixin: function() {
      return [W.MimeType];
    }
  };
  W.MouseEvent.prototype = {
    get$offset: function(receiver) {
      var t1, target, t2, t3, t4, point;
      if (!!receiver.offsetX)
        return new P.Point(receiver.offsetX, receiver.offsetY, [P.num]);
      else {
        t1 = receiver.target;
        if (!J.getInterceptor$(W._convertNativeToDart_EventTarget(t1)).$isElement0)
          throw H.wrapException(P.UnsupportedError$("offsetX is only supported on elements"));
        target = H.interceptedTypeCheck(W._convertNativeToDart_EventTarget(t1), "$isElement0");
        t1 = receiver.clientX;
        t2 = receiver.clientY;
        t3 = [P.num];
        t4 = target.getBoundingClientRect();
        point = new P.Point(t1, t2, t3).$sub(0, new P.Point(t4.left, t4.top, t3));
        return new P.Point(J.toInt$0$n(point.x), J.toInt$0$n(point.y), t3);
      }
    },
    $isMouseEvent: 1
  };
  W._ChildNodeListLazy.prototype = {
    get$last: function(_) {
      var result = this._this.lastChild;
      if (result == null)
        throw H.wrapException(P.StateError$("No elements"));
      return result;
    },
    get$single: function(_) {
      var t1 = this._this,
        l = t1.childNodes.length;
      if (l === 0)
        throw H.wrapException(P.StateError$("No elements"));
      if (l > 1)
        throw H.wrapException(P.StateError$("More than one element"));
      return t1.firstChild;
    },
    add$1: function(_, value) {
      this._this.appendChild(H.interceptedTypeCheck(value, "$isNode"));
    },
    addAll$1: function(_, iterable) {
      var t1, t2, len, i;
      H.assertSubtype(iterable, "$isIterable", [W.Node], "$asIterable");
      t1 = J.getInterceptor$(iterable);
      if (!!t1.$is_ChildNodeListLazy) {
        t1 = iterable._this;
        t2 = this._this;
        if (t1 !== t2)
          for (len = t1.childNodes.length, i = 0; i < len; ++i)
            t2.appendChild(t1.firstChild);
        return;
      }
      for (t1 = t1.get$iterator(iterable), t2 = this._this; t1.moveNext$0();)
        t2.appendChild(t1.get$current(t1));
    },
    removeAt$1: function(_, index) {
      var result,
        t1 = this._this,
        t2 = t1.childNodes;
      if (index >= t2.length)
        return H.ioore(t2, index);
      result = t2[index];
      t1.removeChild(result);
      return result;
    },
    $indexSet: function(_, index, value) {
      var t1;
      H.intTypeCheck(index);
      t1 = this._this;
      t1.replaceChild(H.interceptedTypeCheck(value, "$isNode"), C.NodeList_methods.$index(t1.childNodes, index));
    },
    get$iterator: function(_) {
      var t1 = this._this.childNodes;
      return new W.FixedSizeListIterator(t1, t1.length, [H.getRuntimeTypeArgumentIntercepted(C.NodeList_methods, t1, "ImmutableListMixin", 0)]);
    },
    sort$1: function(_, compare) {
      H.functionTypeCheck(compare, {func: 1, ret: P.int, args: [W.Node, W.Node]});
      throw H.wrapException(P.UnsupportedError$("Cannot sort Node list"));
    },
    get$length: function(_) {
      return this._this.childNodes.length;
    },
    set$length: function(_, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot set length on immutable List."));
    },
    $index: function(_, index) {
      H.intTypeCheck(index);
      return C.NodeList_methods.$index(this._this.childNodes, index);
    },
    $asEfficientLengthIterable: function() {
      return [W.Node];
    },
    $asListMixin: function() {
      return [W.Node];
    },
    $asIterable: function() {
      return [W.Node];
    },
    $asList: function() {
      return [W.Node];
    }
  };
  W.Node.prototype = {
    remove$0: function(receiver) {
      var t1 = receiver.parentNode;
      if (t1 != null)
        t1.removeChild(receiver);
    },
    replaceWith$1: function(receiver, otherNode) {
      var $parent, exception;
      try {
        $parent = receiver.parentNode;
        J._replaceChild$2$x($parent, otherNode, receiver);
      } catch (exception) {
        H.unwrapException(exception);
      }
      return receiver;
    },
    toString$0: function(receiver) {
      var value = receiver.nodeValue;
      return value == null ? this.super$Interceptor$toString(receiver) : value;
    },
    append$1: function(receiver, node) {
      return receiver.appendChild(node);
    },
    _replaceChild$2: function(receiver, node, child) {
      return receiver.replaceChild(node, child);
    },
    $isNode: 1
  };
  W.NodeList.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      H.intTypeCheck(index);
      if (index >>> 0 !== index || index >= receiver.length)
        throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      H.intTypeCheck(index);
      H.interceptedTypeCheck(value, "$isNode");
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length: function(receiver, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
    },
    get$last: function(receiver) {
      var len = receiver.length;
      if (len > 0)
        return receiver[len - 1];
      throw H.wrapException(P.StateError$("No elements"));
    },
    elementAt$1: function(receiver, index) {
      return this.$index(receiver, index);
    },
    $isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [W.Node];
    },
    $isJavaScriptIndexingBehavior: 1,
    $asJavaScriptIndexingBehavior: function() {
      return [W.Node];
    },
    $asListMixin: function() {
      return [W.Node];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [W.Node];
    },
    $isList: 1,
    $asList: function() {
      return [W.Node];
    },
    $asImmutableListMixin: function() {
      return [W.Node];
    }
  };
  W.ParagraphElement.prototype = {};
  W.Plugin.prototype = {$isPlugin: 1,
    get$length: function(receiver) {
      return receiver.length;
    }
  };
  W.PluginArray.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      H.intTypeCheck(index);
      if (index >>> 0 !== index || index >= receiver.length)
        throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      H.intTypeCheck(index);
      H.interceptedTypeCheck(value, "$isPlugin");
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length: function(receiver, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
    },
    get$last: function(receiver) {
      var len = receiver.length;
      if (len > 0)
        return receiver[len - 1];
      throw H.wrapException(P.StateError$("No elements"));
    },
    elementAt$1: function(receiver, index) {
      return this.$index(receiver, index);
    },
    $isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [W.Plugin];
    },
    $isJavaScriptIndexingBehavior: 1,
    $asJavaScriptIndexingBehavior: function() {
      return [W.Plugin];
    },
    $asListMixin: function() {
      return [W.Plugin];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [W.Plugin];
    },
    $isList: 1,
    $asList: function() {
      return [W.Plugin];
    },
    $asImmutableListMixin: function() {
      return [W.Plugin];
    }
  };
  W.PointerEvent0.prototype = {$isPointerEvent0: 1};
  W.PopStateEvent.prototype = {$isPopStateEvent: 1};
  W.ProgressEvent.prototype = {$isProgressEvent: 1};
  W.Range.prototype = {
    expand$1: function(receiver, unit) {
      return receiver.expand(H.stringTypeCheck(unit));
    }
  };
  W.RtcStatsReport.prototype = {
    containsKey$1: function(receiver, key) {
      return P.convertNativeToDart_Dictionary(receiver.get(key)) != null;
    },
    $index: function(receiver, key) {
      return P.convertNativeToDart_Dictionary(receiver.get(H.stringTypeCheck(key)));
    },
    forEach$1: function(receiver, f) {
      var entries, entry;
      H.functionTypeCheck(f, {func: 1, ret: -1, args: [P.String,,]});
      entries = receiver.entries();
      for (; true;) {
        entry = entries.next();
        if (entry.done)
          return;
        f.call$2(entry.value[0], P.convertNativeToDart_Dictionary(entry.value[1]));
      }
    },
    get$keys: function(receiver) {
      var keys = H.setRuntimeTypeInfo([], [P.String]);
      this.forEach$1(receiver, new W.RtcStatsReport_keys_closure(keys));
      return keys;
    },
    get$length: function(receiver) {
      return receiver.size;
    },
    get$isEmpty: function(receiver) {
      return receiver.size === 0;
    },
    $indexSet: function(receiver, key, value) {
      throw H.wrapException(P.UnsupportedError$("Not supported"));
    },
    $asMapMixin: function() {
      return [P.String, null];
    },
    $isMap: 1,
    $asMap: function() {
      return [P.String, null];
    }
  };
  W.RtcStatsReport_keys_closure.prototype = {
    call$2: function(k, v) {
      return C.JSArray_methods.add$1(this.keys, k);
    },
    $signature: 17
  };
  W.SelectElement.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    }
  };
  W.SourceBuffer.prototype = {$isSourceBuffer: 1};
  W.SourceBufferList.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      H.intTypeCheck(index);
      if (index >>> 0 !== index || index >= receiver.length)
        throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      H.intTypeCheck(index);
      H.interceptedTypeCheck(value, "$isSourceBuffer");
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length: function(receiver, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
    },
    get$last: function(receiver) {
      var len = receiver.length;
      if (len > 0)
        return receiver[len - 1];
      throw H.wrapException(P.StateError$("No elements"));
    },
    elementAt$1: function(receiver, index) {
      return this.$index(receiver, index);
    },
    $isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [W.SourceBuffer];
    },
    $isJavaScriptIndexingBehavior: 1,
    $asJavaScriptIndexingBehavior: function() {
      return [W.SourceBuffer];
    },
    $asListMixin: function() {
      return [W.SourceBuffer];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [W.SourceBuffer];
    },
    $isList: 1,
    $asList: function() {
      return [W.SourceBuffer];
    },
    $asImmutableListMixin: function() {
      return [W.SourceBuffer];
    }
  };
  W.SpeechGrammar.prototype = {$isSpeechGrammar: 1};
  W.SpeechGrammarList.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      H.intTypeCheck(index);
      if (index >>> 0 !== index || index >= receiver.length)
        throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      H.intTypeCheck(index);
      H.interceptedTypeCheck(value, "$isSpeechGrammar");
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length: function(receiver, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
    },
    get$last: function(receiver) {
      var len = receiver.length;
      if (len > 0)
        return receiver[len - 1];
      throw H.wrapException(P.StateError$("No elements"));
    },
    elementAt$1: function(receiver, index) {
      return this.$index(receiver, index);
    },
    $isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [W.SpeechGrammar];
    },
    $isJavaScriptIndexingBehavior: 1,
    $asJavaScriptIndexingBehavior: function() {
      return [W.SpeechGrammar];
    },
    $asListMixin: function() {
      return [W.SpeechGrammar];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [W.SpeechGrammar];
    },
    $isList: 1,
    $asList: function() {
      return [W.SpeechGrammar];
    },
    $asImmutableListMixin: function() {
      return [W.SpeechGrammar];
    }
  };
  W.SpeechRecognitionResult.prototype = {$isSpeechRecognitionResult: 1,
    get$length: function(receiver) {
      return receiver.length;
    }
  };
  W.Storage.prototype = {
    containsKey$1: function(receiver, key) {
      return receiver.getItem(key) != null;
    },
    $index: function(receiver, key) {
      return receiver.getItem(H.stringTypeCheck(key));
    },
    $indexSet: function(receiver, key, value) {
      receiver.setItem(key, H.stringTypeCheck(value));
    },
    forEach$1: function(receiver, f) {
      var i, key;
      H.functionTypeCheck(f, {func: 1, ret: -1, args: [P.String, P.String]});
      for (i = 0; true; ++i) {
        key = receiver.key(i);
        if (key == null)
          return;
        f.call$2(key, receiver.getItem(key));
      }
    },
    get$keys: function(receiver) {
      var keys = H.setRuntimeTypeInfo([], [P.String]);
      this.forEach$1(receiver, new W.Storage_keys_closure(keys));
      return keys;
    },
    get$length: function(receiver) {
      return receiver.length;
    },
    get$isEmpty: function(receiver) {
      return receiver.key(0) == null;
    },
    $asMapMixin: function() {
      return [P.String, P.String];
    },
    $isMap: 1,
    $asMap: function() {
      return [P.String, P.String];
    }
  };
  W.Storage_keys_closure.prototype = {
    call$2: function(k, v) {
      return C.JSArray_methods.add$1(this.keys, k);
    },
    $signature: 143
  };
  W.StyleElement.prototype = {$isStyleElement: 1};
  W.StyleSheet.prototype = {$isStyleSheet: 1};
  W.TableElement.prototype = {
    createFragment$3$treeSanitizer$validator: function(receiver, html, treeSanitizer, validator) {
      var table, fragment;
      if ("createContextualFragment" in window.Range.prototype)
        return this.super$Element$createFragment(receiver, html, treeSanitizer, validator);
      table = W.Element_Element$html("<table>" + html + "</table>", treeSanitizer, validator);
      fragment = document.createDocumentFragment();
      fragment.toString;
      table.toString;
      new W._ChildNodeListLazy(fragment).addAll$1(0, new W._ChildNodeListLazy(table));
      return fragment;
    }
  };
  W.TableRowElement.prototype = {
    createFragment$3$treeSanitizer$validator: function(receiver, html, treeSanitizer, validator) {
      var t1, fragment, section, row;
      if ("createContextualFragment" in window.Range.prototype)
        return this.super$Element$createFragment(receiver, html, treeSanitizer, validator);
      t1 = document;
      fragment = t1.createDocumentFragment();
      t1 = C.TableElement_methods.createFragment$3$treeSanitizer$validator(t1.createElement("table"), html, treeSanitizer, validator);
      t1.toString;
      t1 = new W._ChildNodeListLazy(t1);
      section = t1.get$single(t1);
      section.toString;
      t1 = new W._ChildNodeListLazy(section);
      row = t1.get$single(t1);
      fragment.toString;
      row.toString;
      new W._ChildNodeListLazy(fragment).addAll$1(0, new W._ChildNodeListLazy(row));
      return fragment;
    }
  };
  W.TableSectionElement.prototype = {
    createFragment$3$treeSanitizer$validator: function(receiver, html, treeSanitizer, validator) {
      var t1, fragment, section;
      if ("createContextualFragment" in window.Range.prototype)
        return this.super$Element$createFragment(receiver, html, treeSanitizer, validator);
      t1 = document;
      fragment = t1.createDocumentFragment();
      t1 = C.TableElement_methods.createFragment$3$treeSanitizer$validator(t1.createElement("table"), html, treeSanitizer, validator);
      t1.toString;
      t1 = new W._ChildNodeListLazy(t1);
      section = t1.get$single(t1);
      fragment.toString;
      section.toString;
      new W._ChildNodeListLazy(fragment).addAll$1(0, new W._ChildNodeListLazy(section));
      return fragment;
    }
  };
  W.TemplateElement.prototype = {$isTemplateElement: 1};
  W.TextAreaElement.prototype = {$isTextAreaElement: 1};
  W.TextTrack.prototype = {$isTextTrack: 1};
  W.TextTrackCue.prototype = {$isTextTrackCue: 1};
  W.TextTrackCueList.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      H.intTypeCheck(index);
      if (index >>> 0 !== index || index >= receiver.length)
        throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      H.intTypeCheck(index);
      H.interceptedTypeCheck(value, "$isTextTrackCue");
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length: function(receiver, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
    },
    get$last: function(receiver) {
      var len = receiver.length;
      if (len > 0)
        return receiver[len - 1];
      throw H.wrapException(P.StateError$("No elements"));
    },
    elementAt$1: function(receiver, index) {
      return this.$index(receiver, index);
    },
    $isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [W.TextTrackCue];
    },
    $isJavaScriptIndexingBehavior: 1,
    $asJavaScriptIndexingBehavior: function() {
      return [W.TextTrackCue];
    },
    $asListMixin: function() {
      return [W.TextTrackCue];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [W.TextTrackCue];
    },
    $isList: 1,
    $asList: function() {
      return [W.TextTrackCue];
    },
    $asImmutableListMixin: function() {
      return [W.TextTrackCue];
    }
  };
  W.TextTrackList.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      H.intTypeCheck(index);
      if (index >>> 0 !== index || index >= receiver.length)
        throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      H.intTypeCheck(index);
      H.interceptedTypeCheck(value, "$isTextTrack");
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length: function(receiver, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
    },
    get$last: function(receiver) {
      var len = receiver.length;
      if (len > 0)
        return receiver[len - 1];
      throw H.wrapException(P.StateError$("No elements"));
    },
    elementAt$1: function(receiver, index) {
      return this.$index(receiver, index);
    },
    $isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [W.TextTrack];
    },
    $isJavaScriptIndexingBehavior: 1,
    $asJavaScriptIndexingBehavior: function() {
      return [W.TextTrack];
    },
    $asListMixin: function() {
      return [W.TextTrack];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [W.TextTrack];
    },
    $isList: 1,
    $asList: function() {
      return [W.TextTrack];
    },
    $asImmutableListMixin: function() {
      return [W.TextTrack];
    }
  };
  W.TimeRanges.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    }
  };
  W.Touch.prototype = {$isTouch: 1};
  W.TouchEvent.prototype = {$isTouchEvent: 1};
  W.TouchList.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      H.intTypeCheck(index);
      if (index >>> 0 !== index || index >= receiver.length)
        throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      H.intTypeCheck(index);
      H.interceptedTypeCheck(value, "$isTouch");
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length: function(receiver, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
    },
    get$first: function(receiver) {
      if (receiver.length > 0)
        return receiver[0];
      throw H.wrapException(P.StateError$("No elements"));
    },
    get$last: function(receiver) {
      var len = receiver.length;
      if (len > 0)
        return receiver[len - 1];
      throw H.wrapException(P.StateError$("No elements"));
    },
    elementAt$1: function(receiver, index) {
      return this.$index(receiver, index);
    },
    $isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [W.Touch];
    },
    $isJavaScriptIndexingBehavior: 1,
    $asJavaScriptIndexingBehavior: function() {
      return [W.Touch];
    },
    $asListMixin: function() {
      return [W.Touch];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [W.Touch];
    },
    $isList: 1,
    $asList: function() {
      return [W.Touch];
    },
    $asImmutableListMixin: function() {
      return [W.Touch];
    }
  };
  W.TrackDefaultList.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    }
  };
  W.UIEvent.prototype = {};
  W.Url.prototype = {
    toString$0: function(receiver) {
      return String(receiver);
    }
  };
  W.VideoTrackList.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    }
  };
  W.WheelEvent.prototype = {
    get$deltaY: function(receiver) {
      if (receiver.deltaY !== undefined)
        return receiver.deltaY;
      throw H.wrapException(P.UnsupportedError$("deltaY is not supported"));
    },
    get$deltaX: function(receiver) {
      if (receiver.deltaX !== undefined)
        return receiver.deltaX;
      throw H.wrapException(P.UnsupportedError$("deltaX is not supported"));
    },
    get$deltaMode: function(receiver) {
      if (!!receiver.deltaMode)
        return receiver.deltaMode;
      return 0;
    },
    $isWheelEvent: 1
  };
  W.Window0.prototype = {
    get$animationFrame: function(receiver) {
      var t1 = P.num,
        t2 = new P._Future($.Zone__current, [t1]);
      this.requestAnimationFrame$1(receiver, new W.Window_animationFrame_closure(new P._SyncCompleter(t2, [t1])));
      return t2;
    },
    requestAnimationFrame$1: function(receiver, callback) {
      H.functionTypeCheck(callback, {func: 1, ret: -1, args: [P.num]});
      this._ensureRequestAnimationFrame$0(receiver);
      return this._requestAnimationFrame$1(receiver, W._wrapZone(callback, P.num));
    },
    _requestAnimationFrame$1: function(receiver, callback) {
      return receiver.requestAnimationFrame(H.convertDartClosureToJS(H.functionTypeCheck(callback, {func: 1, ret: -1, args: [P.num]}), 1));
    },
    _ensureRequestAnimationFrame$0: function(receiver) {
      if (!!(receiver.requestAnimationFrame && receiver.cancelAnimationFrame))
        return;
      (function($this) {
        var vendors = ['ms', 'moz', 'webkit', 'o'];
        for (var i = 0; i < vendors.length && !$this.requestAnimationFrame; ++i) {
          $this.requestAnimationFrame = $this[vendors[i] + 'RequestAnimationFrame'];
          $this.cancelAnimationFrame = $this[vendors[i] + 'CancelAnimationFrame'] || $this[vendors[i] + 'CancelRequestAnimationFrame'];
        }
        if ($this.requestAnimationFrame && $this.cancelAnimationFrame)
          return;
        $this.requestAnimationFrame = function(callback) {
          return window.setTimeout(function() {
            callback(Date.now());
          }, 16);
        };
        $this.cancelAnimationFrame = function(id) {
          clearTimeout(id);
        };
      })(receiver);
    },
    $isWindowBase: 1
  };
  W.Window_animationFrame_closure.prototype = {
    call$1: function(time) {
      this.completer.complete$1(0, H.numTypeCheck(time));
    },
    $signature: 40
  };
  W._Attr.prototype = {$is_Attr: 1};
  W._CssRuleList.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      H.intTypeCheck(index);
      if (index >>> 0 !== index || index >= receiver.length)
        throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      H.intTypeCheck(index);
      H.interceptedTypeCheck(value, "$isCssRule");
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length: function(receiver, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
    },
    get$last: function(receiver) {
      var len = receiver.length;
      if (len > 0)
        return receiver[len - 1];
      throw H.wrapException(P.StateError$("No elements"));
    },
    elementAt$1: function(receiver, index) {
      return this.$index(receiver, index);
    },
    $isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [W.CssRule];
    },
    $isJavaScriptIndexingBehavior: 1,
    $asJavaScriptIndexingBehavior: function() {
      return [W.CssRule];
    },
    $asListMixin: function() {
      return [W.CssRule];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [W.CssRule];
    },
    $isList: 1,
    $asList: function() {
      return [W.CssRule];
    },
    $asImmutableListMixin: function() {
      return [W.CssRule];
    }
  };
  W._DomRect.prototype = {
    toString$0: function(receiver) {
      return "Rectangle (" + H.S(receiver.left) + ", " + H.S(receiver.top) + ") " + H.S(receiver.width) + " x " + H.S(receiver.height);
    },
    $eq: function(receiver, other) {
      var t1;
      if (other == null)
        return false;
      t1 = J.getInterceptor$(other);
      if (!t1.$isRectangle)
        return false;
      return receiver.left === t1.get$left(other) && receiver.top === t1.get$top(other) && receiver.width === t1.get$width(other) && receiver.height === t1.get$height(other);
    },
    get$hashCode: function(receiver) {
      return W._JenkinsSmiHash_hash4(C.JSNumber_methods.get$hashCode(receiver.left), C.JSNumber_methods.get$hashCode(receiver.top), C.JSNumber_methods.get$hashCode(receiver.width), C.JSNumber_methods.get$hashCode(receiver.height));
    },
    get$height: function(receiver) {
      return receiver.height;
    },
    get$width: function(receiver) {
      return receiver.width;
    }
  };
  W._GamepadList.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      H.intTypeCheck(index);
      if (index >>> 0 !== index || index >= receiver.length)
        throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      H.intTypeCheck(index);
      H.interceptedTypeCheck(value, "$isGamepad");
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length: function(receiver, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
    },
    get$last: function(receiver) {
      var len = receiver.length;
      if (len > 0)
        return receiver[len - 1];
      throw H.wrapException(P.StateError$("No elements"));
    },
    elementAt$1: function(receiver, index) {
      return this.$index(receiver, index);
    },
    $isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [W.Gamepad];
    },
    $isJavaScriptIndexingBehavior: 1,
    $asJavaScriptIndexingBehavior: function() {
      return [W.Gamepad];
    },
    $asListMixin: function() {
      return [W.Gamepad];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [W.Gamepad];
    },
    $isList: 1,
    $asList: function() {
      return [W.Gamepad];
    },
    $asImmutableListMixin: function() {
      return [W.Gamepad];
    }
  };
  W._NamedNodeMap.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      H.intTypeCheck(index);
      if (index >>> 0 !== index || index >= receiver.length)
        throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      H.intTypeCheck(index);
      H.interceptedTypeCheck(value, "$isNode");
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length: function(receiver, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
    },
    get$last: function(receiver) {
      var len = receiver.length;
      if (len > 0)
        return receiver[len - 1];
      throw H.wrapException(P.StateError$("No elements"));
    },
    elementAt$1: function(receiver, index) {
      return this.$index(receiver, index);
    },
    $isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [W.Node];
    },
    $isJavaScriptIndexingBehavior: 1,
    $asJavaScriptIndexingBehavior: function() {
      return [W.Node];
    },
    $asListMixin: function() {
      return [W.Node];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [W.Node];
    },
    $isList: 1,
    $asList: function() {
      return [W.Node];
    },
    $asImmutableListMixin: function() {
      return [W.Node];
    }
  };
  W._SpeechRecognitionResultList.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      H.intTypeCheck(index);
      if (index >>> 0 !== index || index >= receiver.length)
        throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      H.intTypeCheck(index);
      H.interceptedTypeCheck(value, "$isSpeechRecognitionResult");
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length: function(receiver, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
    },
    get$last: function(receiver) {
      var len = receiver.length;
      if (len > 0)
        return receiver[len - 1];
      throw H.wrapException(P.StateError$("No elements"));
    },
    elementAt$1: function(receiver, index) {
      return this.$index(receiver, index);
    },
    $isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [W.SpeechRecognitionResult];
    },
    $isJavaScriptIndexingBehavior: 1,
    $asJavaScriptIndexingBehavior: function() {
      return [W.SpeechRecognitionResult];
    },
    $asListMixin: function() {
      return [W.SpeechRecognitionResult];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [W.SpeechRecognitionResult];
    },
    $isList: 1,
    $asList: function() {
      return [W.SpeechRecognitionResult];
    },
    $asImmutableListMixin: function() {
      return [W.SpeechRecognitionResult];
    }
  };
  W._StyleSheetList.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      H.intTypeCheck(index);
      if (index >>> 0 !== index || index >= receiver.length)
        throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      H.intTypeCheck(index);
      H.interceptedTypeCheck(value, "$isStyleSheet");
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length: function(receiver, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
    },
    get$last: function(receiver) {
      var len = receiver.length;
      if (len > 0)
        return receiver[len - 1];
      throw H.wrapException(P.StateError$("No elements"));
    },
    elementAt$1: function(receiver, index) {
      return this.$index(receiver, index);
    },
    $isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [W.StyleSheet];
    },
    $isJavaScriptIndexingBehavior: 1,
    $asJavaScriptIndexingBehavior: function() {
      return [W.StyleSheet];
    },
    $asListMixin: function() {
      return [W.StyleSheet];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [W.StyleSheet];
    },
    $isList: 1,
    $asList: function() {
      return [W.StyleSheet];
    },
    $asImmutableListMixin: function() {
      return [W.StyleSheet];
    }
  };
  W._AttributeMap.prototype = {
    forEach$1: function(_, f) {
      var t1, t2, t3, _i, key;
      H.functionTypeCheck(f, {func: 1, ret: -1, args: [P.String, P.String]});
      for (t1 = this.get$keys(this), t2 = t1.length, t3 = this._html$_element, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
        key = t1[_i];
        f.call$2(key, t3.getAttribute(key));
      }
    },
    get$keys: function(_) {
      var len, i, attr,
        attributes = this._html$_element.attributes,
        keys = H.setRuntimeTypeInfo([], [P.String]);
      for (len = attributes.length, i = 0; i < len; ++i) {
        if (i >= attributes.length)
          return H.ioore(attributes, i);
        attr = H.interceptedTypeCheck(attributes[i], "$is_Attr");
        if (attr.namespaceURI == null)
          C.JSArray_methods.add$1(keys, attr.name);
      }
      return keys;
    },
    get$isEmpty: function(_) {
      return this.get$keys(this).length === 0;
    },
    $asMapMixin: function() {
      return [P.String, P.String];
    },
    $asMap: function() {
      return [P.String, P.String];
    }
  };
  W._ElementAttributeMap.prototype = {
    containsKey$1: function(_, key) {
      return this._html$_element.hasAttribute(key);
    },
    $index: function(_, key) {
      return this._html$_element.getAttribute(H.stringTypeCheck(key));
    },
    $indexSet: function(_, key, value) {
      this._html$_element.setAttribute(key, H.stringTypeCheck(value));
    },
    get$length: function(_) {
      return this.get$keys(this).length;
    }
  };
  W._EventStream.prototype = {
    listen$4$cancelOnError$onDone$onError: function(onData, cancelOnError, onDone, onError) {
      var t1 = H.getTypeArgumentByIndex(this, 0);
      H.functionTypeCheck(onData, {func: 1, ret: -1, args: [t1]});
      H.functionTypeCheck(onDone, {func: 1, ret: -1});
      return W._EventStreamSubscription$(this._html$_target, this._eventType, onData, false, t1);
    },
    listen$3$onDone$onError: function(onData, onDone, onError) {
      return this.listen$4$cancelOnError$onDone$onError(onData, null, onDone, onError);
    }
  };
  W._ElementEventStreamImpl.prototype = {};
  W._EventStreamSubscription.prototype = {
    cancel$0: function(_) {
      var _this = this;
      if (_this._html$_target == null)
        return;
      _this._unlisten$0();
      _this._html$_target = null;
      _this.set$_onData(null);
      return;
    },
    pause$1: function(_, resumeSignal) {
      if (this._html$_target == null)
        return;
      ++this._pauseCount;
      this._unlisten$0();
    },
    pause$0: function($receiver) {
      return this.pause$1($receiver, null);
    },
    resume$0: function(_) {
      var _this = this;
      if (_this._html$_target == null || _this._pauseCount <= 0)
        return;
      --_this._pauseCount;
      _this._tryResume$0();
    },
    _tryResume$0: function() {
      var _this = this,
        t1 = _this._onData;
      if (t1 != null && _this._pauseCount <= 0)
        J.addEventListener$3$x(_this._html$_target, _this._eventType, t1, false);
    },
    _unlisten$0: function() {
      var t1 = this._onData;
      if (t1 != null)
        J.removeEventListener$3$x(this._html$_target, this._eventType, t1, false);
    },
    set$_onData: function(_onData) {
      this._onData = H.functionTypeCheck(_onData, {func: 1, args: [W.Event]});
    }
  };
  W._EventStreamSubscription_closure.prototype = {
    call$1: function(e) {
      return this.onData.call$1(H.interceptedTypeCheck(e, "$isEvent"));
    },
    $signature: 174
  };
  W._Html5NodeValidator.prototype = {
    _Html5NodeValidator$1$uriPolicy: function(uriPolicy) {
      var _i;
      if ($._Html5NodeValidator__attributeValidators.get$isEmpty($._Html5NodeValidator__attributeValidators)) {
        for (_i = 0; _i < 262; ++_i)
          $._Html5NodeValidator__attributeValidators.$indexSet(0, C.List_2Zi[_i], W.html__Html5NodeValidator__standardAttributeValidator$closure());
        for (_i = 0; _i < 12; ++_i)
          $._Html5NodeValidator__attributeValidators.$indexSet(0, C.List_yrN[_i], W.html__Html5NodeValidator__uriAttributeValidator$closure());
      }
    },
    allowsElement$1: function(element) {
      return $.$get$_Html5NodeValidator__allowedElements().contains$1(0, W.Element__safeTagName(element));
    },
    allowsAttribute$3: function(element, attributeName, value) {
      var validator = $._Html5NodeValidator__attributeValidators.$index(0, H.S(W.Element__safeTagName(element)) + "::" + attributeName);
      if (validator == null)
        validator = $._Html5NodeValidator__attributeValidators.$index(0, "*::" + attributeName);
      if (validator == null)
        return false;
      return H.boolTypeCheck(validator.call$4(element, attributeName, value, this));
    },
    $isNodeValidator: 1
  };
  W.ImmutableListMixin.prototype = {
    get$iterator: function(receiver) {
      return new W.FixedSizeListIterator(receiver, this.get$length(receiver), [H.getRuntimeTypeArgumentIntercepted(this, receiver, "ImmutableListMixin", 0)]);
    },
    add$1: function(receiver, value) {
      H.assertSubtypeOfRuntimeType(value, H.getRuntimeTypeArgumentIntercepted(this, receiver, "ImmutableListMixin", 0));
      throw H.wrapException(P.UnsupportedError$("Cannot add to immutable List."));
    },
    sort$1: function(receiver, compare) {
      var t1 = H.getRuntimeTypeArgumentIntercepted(this, receiver, "ImmutableListMixin", 0);
      H.functionTypeCheck(compare, {func: 1, ret: P.int, args: [t1, t1]});
      throw H.wrapException(P.UnsupportedError$("Cannot sort immutable List."));
    },
    removeAt$1: function(receiver, pos) {
      throw H.wrapException(P.UnsupportedError$("Cannot remove from immutable List."));
    }
  };
  W.NodeValidatorBuilder.prototype = {
    add$1: function(_, validator) {
      C.JSArray_methods.add$1(this._validators, validator);
    },
    allowsElement$1: function(element) {
      return C.JSArray_methods.any$1(this._validators, new W.NodeValidatorBuilder_allowsElement_closure(element));
    },
    allowsAttribute$3: function(element, attributeName, value) {
      return C.JSArray_methods.any$1(this._validators, new W.NodeValidatorBuilder_allowsAttribute_closure(element, attributeName, value));
    },
    $isNodeValidator: 1
  };
  W.NodeValidatorBuilder_allowsElement_closure.prototype = {
    call$1: function(v) {
      return H.interceptedTypeCheck(v, "$isNodeValidator").allowsElement$1(this.element);
    },
    $signature: 59
  };
  W.NodeValidatorBuilder_allowsAttribute_closure.prototype = {
    call$1: function(v) {
      return H.interceptedTypeCheck(v, "$isNodeValidator").allowsAttribute$3(this.element, this.attributeName, this.value);
    },
    $signature: 59
  };
  W._SimpleNodeValidator.prototype = {
    _SimpleNodeValidator$4$allowedAttributes$allowedElements$allowedUriAttributes: function(uriPolicy, allowedAttributes, allowedElements, allowedUriAttributes) {
      var legalAttributes, extraUriAttributes, t1;
      this.allowedElements.addAll$1(0, allowedElements);
      legalAttributes = allowedAttributes.where$1(0, new W._SimpleNodeValidator_closure());
      extraUriAttributes = allowedAttributes.where$1(0, new W._SimpleNodeValidator_closure0());
      this.allowedAttributes.addAll$1(0, legalAttributes);
      t1 = this.allowedUriAttributes;
      t1.addAll$1(0, C.List_empty5);
      t1.addAll$1(0, extraUriAttributes);
    },
    allowsElement$1: function(element) {
      return this.allowedElements.contains$1(0, W.Element__safeTagName(element));
    },
    allowsAttribute$3: function(element, attributeName, value) {
      var _this = this,
        tagName = W.Element__safeTagName(element),
        t1 = _this.allowedUriAttributes;
      if (t1.contains$1(0, H.S(tagName) + "::" + attributeName))
        return _this.uriPolicy.allowsUri$1(value);
      else if (t1.contains$1(0, "*::" + attributeName))
        return _this.uriPolicy.allowsUri$1(value);
      else {
        t1 = _this.allowedAttributes;
        if (t1.contains$1(0, H.S(tagName) + "::" + attributeName))
          return true;
        else if (t1.contains$1(0, "*::" + attributeName))
          return true;
        else if (t1.contains$1(0, H.S(tagName) + "::*"))
          return true;
        else if (t1.contains$1(0, "*::*"))
          return true;
      }
      return false;
    },
    $isNodeValidator: 1
  };
  W._SimpleNodeValidator_closure.prototype = {
    call$1: function(x) {
      return !C.JSArray_methods.contains$1(C.List_yrN, H.stringTypeCheck(x));
    },
    $signature: 58
  };
  W._SimpleNodeValidator_closure0.prototype = {
    call$1: function(x) {
      return C.JSArray_methods.contains$1(C.List_yrN, H.stringTypeCheck(x));
    },
    $signature: 58
  };
  W._TemplatingNodeValidator.prototype = {
    allowsAttribute$3: function(element, attributeName, value) {
      if (this.super$_SimpleNodeValidator$allowsAttribute(element, attributeName, value))
        return true;
      if (attributeName === "template" && value === "")
        return true;
      if (element.getAttribute("template") === "")
        return this._templateAttrs.contains$1(0, attributeName);
      return false;
    }
  };
  W._TemplatingNodeValidator_closure.prototype = {
    call$1: function(attr) {
      return "TEMPLATE::" + H.S(H.stringTypeCheck(attr));
    },
    $signature: 28
  };
  W._SvgNodeValidator.prototype = {
    allowsElement$1: function(element) {
      var t1 = J.getInterceptor$(element);
      if (!!t1.$isScriptElement)
        return false;
      t1 = !!t1.$isSvgElement;
      if (t1 && W.Element__safeTagName(element) === "foreignObject")
        return false;
      if (t1)
        return true;
      return false;
    },
    allowsAttribute$3: function(element, attributeName, value) {
      if (attributeName === "is" || C.JSString_methods.startsWith$1(attributeName, "on"))
        return false;
      return this.allowsElement$1(element);
    },
    $isNodeValidator: 1
  };
  W.FixedSizeListIterator.prototype = {
    moveNext$0: function() {
      var _this = this,
        nextPosition = _this._html$_position + 1,
        t1 = _this._html$_length;
      if (nextPosition < t1) {
        _this.set$_html$_current(J.$index$asx(_this._array, nextPosition));
        _this._html$_position = nextPosition;
        return true;
      }
      _this.set$_html$_current(null);
      _this._html$_position = t1;
      return false;
    },
    get$current: function(_) {
      return this._html$_current;
    },
    set$_html$_current: function(_current) {
      this._html$_current = H.assertSubtypeOfRuntimeType(_current, H.getTypeArgumentByIndex(this, 0));
    },
    $isIterator: 1
  };
  W._DOMWindowCrossFrame.prototype = {$isEventTarget: 1, $isWindowBase: 1};
  W.NodeValidator.prototype = {};
  W._SameOriginUriPolicy.prototype = {$isUriPolicy: 1};
  W._ValidatingTreeSanitizer.prototype = {
    sanitizeTree$1: function(node) {
      new W._ValidatingTreeSanitizer_sanitizeTree_walk(this).call$2(node, null);
    },
    _removeNode$2: function(node, $parent) {
      if ($parent == null)
        J.remove$0$ax(node);
      else
        $parent.removeChild(node);
    },
    _sanitizeUntrustedElement$2: function(element, $parent) {
      var corruptedTest1, elementText, elementTagName, exception, t1,
        corrupted = true,
        attrs = null, isAttr = null;
      try {
        attrs = J.get$attributes$x(element);
        isAttr = attrs._html$_element.getAttribute("is");
        H.interceptedTypeCheck(element, "$isElement0");
        corruptedTest1 = function(element) {
          if (!(element.attributes instanceof NamedNodeMap))
            return true;
          var childNodes = element.childNodes;
          if (element.lastChild && element.lastChild !== childNodes[childNodes.length - 1])
            return true;
          if (element.children)
            if (!(element.children instanceof HTMLCollection || element.children instanceof NodeList))
              return true;
          var length = 0;
          if (element.children)
            length = element.children.length;
          for (var i = 0; i < length; i++) {
            var child = element.children[i];
            if (child.id == 'attributes' || child.name == 'attributes' || child.id == 'lastChild' || child.name == 'lastChild' || child.id == 'children' || child.name == 'children')
              return true;
          }
          return false;
        }(element);
        corrupted = H.boolConversionCheck(corruptedTest1) ? true : !(element.attributes instanceof NamedNodeMap);
      } catch (exception) {
        H.unwrapException(exception);
      }
      elementText = "element unprintable";
      try {
        elementText = J.toString$0$(element);
      } catch (exception) {
        H.unwrapException(exception);
      }
      try {
        elementTagName = W.Element__safeTagName(element);
        this._sanitizeElement$7(H.interceptedTypeCheck(element, "$isElement0"), $parent, corrupted, elementText, elementTagName, H.interceptedTypeCheck(attrs, "$isMap"), H.stringTypeCheck(isAttr));
      } catch (exception) {
        if (H.unwrapException(exception) instanceof P.ArgumentError)
          throw exception;
        else {
          this._removeNode$2(element, $parent);
          window;
          t1 = "Removing corrupted element " + H.S(elementText);
          if (typeof console != "undefined")
            window.console.warn(t1);
        }
      }
    },
    _sanitizeElement$7: function(element, $parent, corrupted, text, tag, attrs, isAttr) {
      var t1, keys, i, $name, t2, t3, _this = this;
      if (corrupted) {
        _this._removeNode$2(element, $parent);
        window;
        t1 = "Removing element due to corrupted attributes on <" + text + ">";
        if (typeof console != "undefined")
          window.console.warn(t1);
        return;
      }
      if (!_this.validator.allowsElement$1(element)) {
        _this._removeNode$2(element, $parent);
        window;
        t1 = "Removing disallowed element <" + H.S(tag) + "> from " + H.S($parent);
        if (typeof console != "undefined")
          window.console.warn(t1);
        return;
      }
      if (isAttr != null)
        if (!_this.validator.allowsAttribute$3(element, "is", isAttr)) {
          _this._removeNode$2(element, $parent);
          window;
          t1 = "Removing disallowed type extension <" + H.S(tag) + ' is="' + isAttr + '">';
          if (typeof console != "undefined")
            window.console.warn(t1);
          return;
        }
      t1 = attrs.get$keys(attrs);
      keys = H.setRuntimeTypeInfo(t1.slice(0), [H.getTypeArgumentByIndex(t1, 0)]);
      for (i = attrs.get$keys(attrs).length - 1, t1 = attrs._html$_element; i >= 0; --i) {
        if (i >= keys.length)
          return H.ioore(keys, i);
        $name = keys[i];
        t2 = _this.validator;
        t3 = J.toLowerCase$0$s($name);
        H.stringTypeCheck($name);
        if (!t2.allowsAttribute$3(element, t3, t1.getAttribute($name))) {
          window;
          t2 = "Removing disallowed attribute <" + H.S(tag) + " " + $name + '="' + H.S(t1.getAttribute($name)) + '">';
          if (typeof console != "undefined")
            window.console.warn(t2);
          t1.removeAttribute($name);
        }
      }
      if (!!J.getInterceptor$(element).$isTemplateElement)
        _this.sanitizeTree$1(element.content);
    },
    $isNodeTreeSanitizer: 1
  };
  W._ValidatingTreeSanitizer_sanitizeTree_walk.prototype = {
    call$2: function(node, $parent) {
      var child, nextChild, exception, t2, t3,
        t1 = this.$this;
      switch (node.nodeType) {
        case 1:
          t1._sanitizeUntrustedElement$2(node, $parent);
          break;
        case 8:
        case 11:
        case 3:
        case 4:
          break;
        default:
          t1._removeNode$2(node, $parent);
      }
      child = node.lastChild;
      for (t1 = node == null; null != child;) {
        nextChild = null;
        try {
          nextChild = child.previousSibling;
        } catch (exception) {
          H.unwrapException(exception);
          t2 = H.interceptedTypeCheck(child, "$isNode");
          if (t1) {
            t3 = t2.parentNode;
            if (t3 != null)
              t3.removeChild(t2);
          } else
            node.removeChild(t2);
          child = null;
          nextChild = node.lastChild;
        }
        if (child != null)
          this.call$2(child, node);
        child = H.interceptedTypeCheck(nextChild, "$isNode");
      }
    },
    $signature: 101
  };
  W._CssStyleDeclaration_Interceptor_CssStyleDeclarationBase.prototype = {};
  W._DomRectList_Interceptor_ListMixin.prototype = {};
  W._DomRectList_Interceptor_ListMixin_ImmutableListMixin.prototype = {};
  W._DomStringList_Interceptor_ListMixin.prototype = {};
  W._DomStringList_Interceptor_ListMixin_ImmutableListMixin.prototype = {};
  W._FileList_Interceptor_ListMixin.prototype = {};
  W._FileList_Interceptor_ListMixin_ImmutableListMixin.prototype = {};
  W._HtmlCollection_Interceptor_ListMixin.prototype = {};
  W._HtmlCollection_Interceptor_ListMixin_ImmutableListMixin.prototype = {};
  W._MidiInputMap_Interceptor_MapMixin.prototype = {};
  W._MidiOutputMap_Interceptor_MapMixin.prototype = {};
  W._MimeTypeArray_Interceptor_ListMixin.prototype = {};
  W._MimeTypeArray_Interceptor_ListMixin_ImmutableListMixin.prototype = {};
  W._NodeList_Interceptor_ListMixin.prototype = {};
  W._NodeList_Interceptor_ListMixin_ImmutableListMixin.prototype = {};
  W._PluginArray_Interceptor_ListMixin.prototype = {};
  W._PluginArray_Interceptor_ListMixin_ImmutableListMixin.prototype = {};
  W._RtcStatsReport_Interceptor_MapMixin.prototype = {};
  W._SourceBufferList_EventTarget_ListMixin.prototype = {};
  W._SourceBufferList_EventTarget_ListMixin_ImmutableListMixin.prototype = {};
  W._SpeechGrammarList_Interceptor_ListMixin.prototype = {};
  W._SpeechGrammarList_Interceptor_ListMixin_ImmutableListMixin.prototype = {};
  W._Storage_Interceptor_MapMixin.prototype = {};
  W._TextTrackCueList_Interceptor_ListMixin.prototype = {};
  W._TextTrackCueList_Interceptor_ListMixin_ImmutableListMixin.prototype = {};
  W._TextTrackList_EventTarget_ListMixin.prototype = {};
  W._TextTrackList_EventTarget_ListMixin_ImmutableListMixin.prototype = {};
  W._TouchList_Interceptor_ListMixin.prototype = {};
  W._TouchList_Interceptor_ListMixin_ImmutableListMixin.prototype = {};
  W.__CssRuleList_Interceptor_ListMixin.prototype = {};
  W.__CssRuleList_Interceptor_ListMixin_ImmutableListMixin.prototype = {};
  W.__GamepadList_Interceptor_ListMixin.prototype = {};
  W.__GamepadList_Interceptor_ListMixin_ImmutableListMixin.prototype = {};
  W.__NamedNodeMap_Interceptor_ListMixin.prototype = {};
  W.__NamedNodeMap_Interceptor_ListMixin_ImmutableListMixin.prototype = {};
  W.__SpeechRecognitionResultList_Interceptor_ListMixin.prototype = {};
  W.__SpeechRecognitionResultList_Interceptor_ListMixin_ImmutableListMixin.prototype = {};
  W.__StyleSheetList_Interceptor_ListMixin.prototype = {};
  W.__StyleSheetList_Interceptor_ListMixin_ImmutableListMixin.prototype = {};
  P._StructuredClone.prototype = {
    findSlot$1: function(value) {
      var i,
        t1 = this.values,
        $length = t1.length;
      for (i = 0; i < $length; ++i)
        if (t1[i] === value)
          return i;
      C.JSArray_methods.add$1(t1, value);
      C.JSArray_methods.add$1(this.copies, null);
      return $length;
    },
    walk$1: function(e) {
      var t2, slot, t3, copy, _this = this, t1 = {};
      if (e == null)
        return e;
      if (typeof e === "boolean")
        return e;
      if (typeof e === "number")
        return e;
      if (typeof e === "string")
        return e;
      t2 = J.getInterceptor$(e);
      if (!!t2.$isDateTime)
        return new Date(e._core$_value);
      if (!!t2.$isRegExp)
        throw H.wrapException(P.UnimplementedError$("structured clone of RegExp"));
      if (!!t2.$isFile)
        return e;
      if (!!t2.$isBlob)
        return e;
      if (!!t2.$isFileList)
        return e;
      if (!!t2.$isImageData)
        return e;
      if (!!t2.$isNativeByteBuffer || !!t2.$isNativeTypedData || !!t2.$isMessagePort)
        return e;
      if (!!t2.$isMap) {
        slot = _this.findSlot$1(e);
        t3 = _this.copies;
        if (slot >= t3.length)
          return H.ioore(t3, slot);
        copy = t1.copy = t3[slot];
        if (copy != null)
          return copy;
        copy = {};
        t1.copy = copy;
        C.JSArray_methods.$indexSet(t3, slot, copy);
        t2.forEach$1(e, new P._StructuredClone_walk_closure(t1, _this));
        return t1.copy;
      }
      if (!!t2.$isList) {
        slot = _this.findSlot$1(e);
        t1 = _this.copies;
        if (slot >= t1.length)
          return H.ioore(t1, slot);
        copy = t1[slot];
        if (copy != null)
          return copy;
        return _this.copyList$2(e, slot);
      }
      throw H.wrapException(P.UnimplementedError$("structured clone of other type"));
    },
    copyList$2: function(e, slot) {
      var i,
        t1 = J.getInterceptor$asx(e),
        $length = t1.get$length(e),
        copy = new Array($length);
      C.JSArray_methods.$indexSet(this.copies, slot, copy);
      if (typeof $length !== "number")
        return H.iae($length);
      i = 0;
      for (; i < $length; ++i)
        C.JSArray_methods.$indexSet(copy, i, this.walk$1(t1.$index(e, i)));
      return copy;
    }
  };
  P._StructuredClone_walk_closure.prototype = {
    call$2: function(key, value) {
      this._box_0.copy[key] = this.$this.walk$1(value);
    },
    $signature: 8
  };
  P._AcceptStructuredClone.prototype = {
    findSlot$1: function(value) {
      var i,
        t1 = this.values,
        $length = t1.length;
      for (i = 0; i < $length; ++i)
        if (t1[i] === value)
          return i;
      C.JSArray_methods.add$1(t1, value);
      C.JSArray_methods.add$1(this.copies, null);
      return $length;
    },
    walk$1: function(e) {
      var millisSinceEpoch, t1, proto, slot, copy, l, t2, $length, i, _this = this, _box_0 = {};
      if (e == null)
        return e;
      if (typeof e === "boolean")
        return e;
      if (typeof e === "number")
        return e;
      if (typeof e === "string")
        return e;
      if (e instanceof Date) {
        millisSinceEpoch = e.getTime();
        if (Math.abs(millisSinceEpoch) <= 864e13)
          t1 = false;
        else
          t1 = true;
        if (t1)
          H.throwExpression(P.ArgumentError$("DateTime is outside valid range: " + millisSinceEpoch));
        return new P.DateTime(millisSinceEpoch, true);
      }
      if (e instanceof RegExp)
        throw H.wrapException(P.UnimplementedError$("structured clone of RegExp"));
      if (typeof Promise != "undefined" && e instanceof Promise)
        return P.convertNativePromiseToDartFuture(e);
      proto = Object.getPrototypeOf(e);
      if (proto === Object.prototype || proto === null) {
        slot = _this.findSlot$1(e);
        t1 = _this.copies;
        if (slot >= t1.length)
          return H.ioore(t1, slot);
        copy = _box_0.copy = t1[slot];
        if (copy != null)
          return copy;
        copy = P.LinkedHashMap__makeEmpty();
        _box_0.copy = copy;
        C.JSArray_methods.$indexSet(t1, slot, copy);
        _this.forEachJsField$2(e, new P._AcceptStructuredClone_walk_closure(_box_0, _this));
        return _box_0.copy;
      }
      if (e instanceof Array) {
        l = e;
        slot = _this.findSlot$1(l);
        t1 = _this.copies;
        if (slot >= t1.length)
          return H.ioore(t1, slot);
        copy = t1[slot];
        if (copy != null)
          return copy;
        t2 = J.getInterceptor$asx(l);
        $length = t2.get$length(l);
        copy = _this.mustCopy ? new Array($length) : l;
        C.JSArray_methods.$indexSet(t1, slot, copy);
        if (typeof $length !== "number")
          return H.iae($length);
        t1 = J.getInterceptor$ax(copy);
        i = 0;
        for (; i < $length; ++i)
          t1.$indexSet(copy, i, _this.walk$1(t2.$index(l, i)));
        return copy;
      }
      return e;
    },
    convertNativeToDart_AcceptStructuredClone$2$mustCopy: function(object, mustCopy) {
      this.mustCopy = mustCopy;
      return this.walk$1(object);
    }
  };
  P._AcceptStructuredClone_walk_closure.prototype = {
    call$2: function(key, value) {
      var t1 = this._box_0.copy,
        t2 = this.$this.walk$1(value);
      J.$indexSet$ax(t1, key, t2);
      return t2;
    },
    $signature: 204
  };
  P.convertDartToNative_Dictionary_closure.prototype = {
    call$2: function(key, value) {
      this.object[key] = value;
    },
    $signature: 8
  };
  P._StructuredCloneDart2Js.prototype = {};
  P._AcceptStructuredCloneDart2Js.prototype = {
    forEachJsField$2: function(object, action) {
      var t1, t2, _i, key;
      H.functionTypeCheck(action, {func: 1, args: [,,]});
      for (t1 = Object.keys(object), t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
        key = t1[_i];
        action.call$2(key, object[key]);
      }
    }
  };
  P.convertNativePromiseToDartFuture_closure.prototype = {
    call$1: function(result) {
      return this.completer.complete$1(0, result);
    },
    $signature: 7
  };
  P.convertNativePromiseToDartFuture_closure0.prototype = {
    call$1: function(result) {
      return this.completer.completeError$1(result);
    },
    $signature: 7
  };
  P.FilteredElementList.prototype = {
    get$_html_common$_iterable: function() {
      var t1 = this._childNodes,
        t2 = H.getRuntimeTypeArgument(t1, "ListMixin", 0),
        t3 = W.Element0;
      return new H.MappedIterable(new H.WhereIterable(t1, H.functionTypeCheck(new P.FilteredElementList__iterable_closure(), {func: 1, ret: P.bool, args: [t2]}), [t2]), H.functionTypeCheck(new P.FilteredElementList__iterable_closure0(), {func: 1, ret: t3, args: [t2]}), [t2, t3]);
    },
    forEach$1: function(_, f) {
      H.functionTypeCheck(f, {func: 1, ret: -1, args: [W.Element0]});
      C.JSArray_methods.forEach$1(P.List_List$from(this.get$_html_common$_iterable(), false, W.Element0), f);
    },
    $indexSet: function(_, index, value) {
      var t1;
      H.intTypeCheck(index);
      H.interceptedTypeCheck(value, "$isElement0");
      t1 = this.get$_html_common$_iterable();
      J.replaceWith$1$x(t1._f.call$1(J.elementAt$1$ax(t1._iterable, index)), value);
    },
    set$length: function(_, newLength) {
      var len = J.get$length$asx(this.get$_html_common$_iterable()._iterable);
      if (typeof len !== "number")
        return H.iae(len);
      if (newLength >= len)
        return;
      else if (newLength < 0)
        throw H.wrapException(P.ArgumentError$("Invalid list length"));
      this.removeRange$2(0, newLength, len);
    },
    add$1: function(_, value) {
      this._childNodes._this.appendChild(H.interceptedTypeCheck(value, "$isElement0"));
    },
    contains$1: function(_, needle) {
      return false;
    },
    sort$1: function(_, compare) {
      H.functionTypeCheck(compare, {func: 1, ret: P.int, args: [W.Element0, W.Element0]});
      throw H.wrapException(P.UnsupportedError$("Cannot sort filtered list"));
    },
    removeRange$2: function(_, start, end) {
      var t1 = this.get$_html_common$_iterable();
      t1 = H.SkipIterable_SkipIterable(t1, start, H.getRuntimeTypeArgument(t1, "Iterable", 0));
      if (typeof end !== "number")
        return end.$sub();
      C.JSArray_methods.forEach$1(P.List_List$from(H.TakeIterable_TakeIterable(t1, end - start, H.getRuntimeTypeArgument(t1, "Iterable", 0)), true, null), new P.FilteredElementList_removeRange_closure());
    },
    removeAt$1: function(_, index) {
      var t1 = this.get$_html_common$_iterable();
      t1 = t1._f.call$1(J.elementAt$1$ax(t1._iterable, index));
      J.remove$0$ax(t1);
      return t1;
    },
    get$length: function(_) {
      return J.get$length$asx(this.get$_html_common$_iterable()._iterable);
    },
    $index: function(_, index) {
      var t1;
      H.intTypeCheck(index);
      t1 = this.get$_html_common$_iterable();
      return t1._f.call$1(J.elementAt$1$ax(t1._iterable, index));
    },
    get$iterator: function(_) {
      var t1 = P.List_List$from(this.get$_html_common$_iterable(), false, W.Element0);
      return new J.ArrayIterator(t1, t1.length, [H.getTypeArgumentByIndex(t1, 0)]);
    },
    $asEfficientLengthIterable: function() {
      return [W.Element0];
    },
    $asListMixin: function() {
      return [W.Element0];
    },
    $asIterable: function() {
      return [W.Element0];
    },
    $asList: function() {
      return [W.Element0];
    }
  };
  P.FilteredElementList__iterable_closure.prototype = {
    call$1: function(n) {
      return !!J.getInterceptor$(H.interceptedTypeCheck(n, "$isNode")).$isElement0;
    },
    $signature: 62
  };
  P.FilteredElementList__iterable_closure0.prototype = {
    call$1: function(n) {
      return H.interceptedTypeCast(H.interceptedTypeCheck(n, "$isNode"), "$isElement0");
    },
    $signature: 202
  };
  P.FilteredElementList_removeRange_closure.prototype = {
    call$1: function(el) {
      return J.remove$0$ax(el);
    },
    $signature: 4
  };
  P._completeRequest_closure.prototype = {
    call$1: function(e) {
      this.completer.complete$1(0, H.assertSubtypeOfRuntimeType(new P._AcceptStructuredCloneDart2Js([], []).convertNativeToDart_AcceptStructuredClone$2$mustCopy(this.request.result, false), this.T));
    },
    $signature: 2
  };
  P.ObjectStore.prototype = {
    add$1: function(receiver, value) {
      var request, e, stacktrace, t1, exception, key = null;
      try {
        request = null;
        if (key != null)
          request = this._indexed_db$_add$2(receiver, value, key);
        else
          request = this._indexed_db$_add$1(receiver, value);
        t1 = P._completeRequest(H.interceptedTypeCheck(request, "$isRequest"), null);
        return t1;
      } catch (exception) {
        e = H.unwrapException(exception);
        stacktrace = H.getTraceFromException(exception);
        t1 = P.Future_Future$error(e, stacktrace, null);
        return t1;
      }
    },
    _indexed_db$_add$2: function(receiver, value, key) {
      return receiver.add(new P._StructuredCloneDart2Js([], []).walk$1(value));
    },
    _indexed_db$_add$1: function($receiver, value) {
      return this._indexed_db$_add$2($receiver, value, null);
    }
  };
  P.Request.prototype = {$isRequest: 1};
  P.Point.prototype = {
    toString$0: function(_) {
      return "Point(" + H.S(this.x) + ", " + H.S(this.y) + ")";
    },
    $eq: function(_, other) {
      if (other == null)
        return false;
      return !!J.getInterceptor$(other).$isPoint && this.x == other.x && this.y == other.y;
    },
    get$hashCode: function(_) {
      var t1 = J.get$hashCode$(this.x),
        t2 = J.get$hashCode$(this.y);
      return P._JenkinsSmiHash_finish(P._JenkinsSmiHash_combine0(P._JenkinsSmiHash_combine0(0, t1), t2));
    },
    $add: function(_, other) {
      var t2, t3, t4, t5, _this = this,
        t1 = _this.$ti;
      H.assertSubtype(other, "$isPoint", t1, "$asPoint");
      t2 = _this.x;
      t3 = other.x;
      if (typeof t2 !== "number")
        return t2.$add();
      if (typeof t3 !== "number")
        return H.iae(t3);
      t4 = H.getTypeArgumentByIndex(_this, 0);
      t3 = H.assertSubtypeOfRuntimeType(t2 + t3, t4);
      t2 = _this.y;
      t5 = other.y;
      if (typeof t2 !== "number")
        return t2.$add();
      if (typeof t5 !== "number")
        return H.iae(t5);
      return new P.Point(t3, H.assertSubtypeOfRuntimeType(t2 + t5, t4), t1);
    },
    $sub: function(_, other) {
      var t2, t3, t4, t5, _this = this,
        t1 = _this.$ti;
      H.assertSubtype(other, "$isPoint", t1, "$asPoint");
      t2 = _this.x;
      t3 = other.x;
      if (typeof t2 !== "number")
        return t2.$sub();
      if (typeof t3 !== "number")
        return H.iae(t3);
      t4 = H.getTypeArgumentByIndex(_this, 0);
      t3 = H.assertSubtypeOfRuntimeType(t2 - t3, t4);
      t2 = _this.y;
      t5 = other.y;
      if (typeof t2 !== "number")
        return t2.$sub();
      if (typeof t5 !== "number")
        return H.iae(t5);
      return new P.Point(t3, H.assertSubtypeOfRuntimeType(t2 - t5, t4), t1);
    },
    $mul: function(_, factor) {
      var t2, t3, _this = this,
        t1 = _this.x;
      if (typeof t1 !== "number")
        return t1.$mul();
      if (typeof factor !== "number")
        return H.iae(factor);
      t2 = H.getTypeArgumentByIndex(_this, 0);
      t1 = H.assertSubtypeOfRuntimeType(t1 * factor, t2);
      t3 = _this.y;
      if (typeof t3 !== "number")
        return t3.$mul();
      return new P.Point(t1, H.assertSubtypeOfRuntimeType(t3 * factor, t2), _this.$ti);
    }
  };
  P._RectangleBase.prototype = {};
  P.Rectangle.prototype = {};
  P.Length.prototype = {$isLength: 1};
  P.LengthList.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      H.intTypeCheck(index);
      if (index >>> 0 !== index || index >= receiver.length)
        throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
      return receiver.getItem(index);
    },
    $indexSet: function(receiver, index, value) {
      H.intTypeCheck(index);
      H.interceptedTypeCheck(value, "$isLength");
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length: function(receiver, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
    },
    get$last: function(receiver) {
      var len = receiver.length;
      if (len > 0)
        return receiver[len - 1];
      throw H.wrapException(P.StateError$("No elements"));
    },
    elementAt$1: function(receiver, index) {
      return this.$index(receiver, index);
    },
    $isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [P.Length];
    },
    $asListMixin: function() {
      return [P.Length];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [P.Length];
    },
    $isList: 1,
    $asList: function() {
      return [P.Length];
    },
    $asImmutableListMixin: function() {
      return [P.Length];
    }
  };
  P.Number.prototype = {$isNumber: 1};
  P.NumberList.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      H.intTypeCheck(index);
      if (index >>> 0 !== index || index >= receiver.length)
        throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
      return receiver.getItem(index);
    },
    $indexSet: function(receiver, index, value) {
      H.intTypeCheck(index);
      H.interceptedTypeCheck(value, "$isNumber");
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length: function(receiver, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
    },
    get$last: function(receiver) {
      var len = receiver.length;
      if (len > 0)
        return receiver[len - 1];
      throw H.wrapException(P.StateError$("No elements"));
    },
    elementAt$1: function(receiver, index) {
      return this.$index(receiver, index);
    },
    $isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [P.Number];
    },
    $asListMixin: function() {
      return [P.Number];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [P.Number];
    },
    $isList: 1,
    $asList: function() {
      return [P.Number];
    },
    $asImmutableListMixin: function() {
      return [P.Number];
    }
  };
  P.PointList.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    }
  };
  P.ScriptElement.prototype = {$isScriptElement: 1};
  P.StringList.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      H.intTypeCheck(index);
      if (index >>> 0 !== index || index >= receiver.length)
        throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
      return receiver.getItem(index);
    },
    $indexSet: function(receiver, index, value) {
      H.intTypeCheck(index);
      H.stringTypeCheck(value);
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length: function(receiver, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
    },
    get$last: function(receiver) {
      var len = receiver.length;
      if (len > 0)
        return receiver[len - 1];
      throw H.wrapException(P.StateError$("No elements"));
    },
    elementAt$1: function(receiver, index) {
      return this.$index(receiver, index);
    },
    $isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [P.String];
    },
    $asListMixin: function() {
      return [P.String];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [P.String];
    },
    $isList: 1,
    $asList: function() {
      return [P.String];
    },
    $asImmutableListMixin: function() {
      return [P.String];
    }
  };
  P.SvgElement.prototype = {
    get$children: function(receiver) {
      return new P.FilteredElementList(receiver, new W._ChildNodeListLazy(receiver));
    },
    createFragment$3$treeSanitizer$validator: function(receiver, svg, treeSanitizer, validator) {
      var html, t2, fragment, svgFragment, root,
        t1 = H.setRuntimeTypeInfo([], [W.NodeValidator]);
      C.JSArray_methods.add$1(t1, W._Html5NodeValidator$(null));
      C.JSArray_methods.add$1(t1, W._TemplatingNodeValidator$());
      C.JSArray_methods.add$1(t1, new W._SvgNodeValidator());
      treeSanitizer = new W._ValidatingTreeSanitizer(new W.NodeValidatorBuilder(t1));
      html = '<svg version="1.1">' + svg + "</svg>";
      t1 = document;
      t2 = t1.body;
      fragment = (t2 && C.BodyElement_methods).createFragment$2$treeSanitizer(t2, html, treeSanitizer);
      svgFragment = t1.createDocumentFragment();
      fragment.toString;
      t1 = new W._ChildNodeListLazy(fragment);
      root = t1.get$single(t1);
      for (; t1 = root.firstChild, t1 != null;)
        svgFragment.appendChild(t1);
      return svgFragment;
    },
    $isSvgElement: 1
  };
  P.Transform.prototype = {$isTransform: 1};
  P.TransformList.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      H.intTypeCheck(index);
      if (index >>> 0 !== index || index >= receiver.length)
        throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
      return receiver.getItem(index);
    },
    $indexSet: function(receiver, index, value) {
      H.intTypeCheck(index);
      H.interceptedTypeCheck(value, "$isTransform");
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length: function(receiver, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
    },
    get$last: function(receiver) {
      var len = receiver.length;
      if (len > 0)
        return receiver[len - 1];
      throw H.wrapException(P.StateError$("No elements"));
    },
    elementAt$1: function(receiver, index) {
      return this.$index(receiver, index);
    },
    $isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [P.Transform];
    },
    $asListMixin: function() {
      return [P.Transform];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [P.Transform];
    },
    $isList: 1,
    $asList: function() {
      return [P.Transform];
    },
    $asImmutableListMixin: function() {
      return [P.Transform];
    }
  };
  P._LengthList_Interceptor_ListMixin.prototype = {};
  P._LengthList_Interceptor_ListMixin_ImmutableListMixin.prototype = {};
  P._NumberList_Interceptor_ListMixin.prototype = {};
  P._NumberList_Interceptor_ListMixin_ImmutableListMixin.prototype = {};
  P._StringList_Interceptor_ListMixin.prototype = {};
  P._StringList_Interceptor_ListMixin_ImmutableListMixin.prototype = {};
  P._TransformList_Interceptor_ListMixin.prototype = {};
  P._TransformList_Interceptor_ListMixin_ImmutableListMixin.prototype = {};
  P.ByteBuffer.prototype = {};
  P.Endian.prototype = {};
  P.ByteData.prototype = {};
  P.Int8List.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [P.int];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [P.int];
    },
    $isList: 1,
    $asList: function() {
      return [P.int];
    }
  };
  P.Uint8List.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [P.int];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [P.int];
    },
    $isList: 1,
    $asList: function() {
      return [P.int];
    }
  };
  P.Uint8ClampedList.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [P.int];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [P.int];
    },
    $isList: 1,
    $asList: function() {
      return [P.int];
    }
  };
  P.Int16List.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [P.int];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [P.int];
    },
    $isList: 1,
    $asList: function() {
      return [P.int];
    }
  };
  P.Uint16List.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [P.int];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [P.int];
    },
    $isList: 1,
    $asList: function() {
      return [P.int];
    }
  };
  P.Int32List.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [P.int];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [P.int];
    },
    $isList: 1,
    $asList: function() {
      return [P.int];
    }
  };
  P.Uint32List.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [P.int];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [P.int];
    },
    $isList: 1,
    $asList: function() {
      return [P.int];
    }
  };
  P.Float32List.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [P.double];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [P.double];
    },
    $isList: 1,
    $asList: function() {
      return [P.double];
    }
  };
  P.Float64List.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [P.double];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [P.double];
    },
    $isList: 1,
    $asList: function() {
      return [P.double];
    }
  };
  P.AudioBuffer.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    }
  };
  P.AudioParamMap.prototype = {
    containsKey$1: function(receiver, key) {
      return P.convertNativeToDart_Dictionary(receiver.get(key)) != null;
    },
    $index: function(receiver, key) {
      return P.convertNativeToDart_Dictionary(receiver.get(H.stringTypeCheck(key)));
    },
    forEach$1: function(receiver, f) {
      var entries, entry;
      H.functionTypeCheck(f, {func: 1, ret: -1, args: [P.String,,]});
      entries = receiver.entries();
      for (; true;) {
        entry = entries.next();
        if (entry.done)
          return;
        f.call$2(entry.value[0], P.convertNativeToDart_Dictionary(entry.value[1]));
      }
    },
    get$keys: function(receiver) {
      var keys = H.setRuntimeTypeInfo([], [P.String]);
      this.forEach$1(receiver, new P.AudioParamMap_keys_closure(keys));
      return keys;
    },
    get$length: function(receiver) {
      return receiver.size;
    },
    get$isEmpty: function(receiver) {
      return receiver.size === 0;
    },
    $indexSet: function(receiver, key, value) {
      throw H.wrapException(P.UnsupportedError$("Not supported"));
    },
    $asMapMixin: function() {
      return [P.String, null];
    },
    $isMap: 1,
    $asMap: function() {
      return [P.String, null];
    }
  };
  P.AudioParamMap_keys_closure.prototype = {
    call$2: function(k, v) {
      return C.JSArray_methods.add$1(this.keys, k);
    },
    $signature: 17
  };
  P.AudioTrackList.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    }
  };
  P.BaseAudioContext.prototype = {};
  P.OfflineAudioContext.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    }
  };
  P._AudioParamMap_Interceptor_MapMixin.prototype = {};
  P.SqlResultSetRowList.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      H.intTypeCheck(index);
      if (index >>> 0 !== index || index >= receiver.length)
        throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
      return P.convertNativeToDart_Dictionary(receiver.item(index));
    },
    $indexSet: function(receiver, index, value) {
      H.intTypeCheck(index);
      H.interceptedTypeCheck(value, "$isMap");
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length: function(receiver, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
    },
    get$last: function(receiver) {
      var len = receiver.length;
      if (len > 0)
        return receiver[len - 1];
      throw H.wrapException(P.StateError$("No elements"));
    },
    elementAt$1: function(receiver, index) {
      return this.$index(receiver, index);
    },
    $isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [[P.Map,,,]];
    },
    $asListMixin: function() {
      return [[P.Map,,,]];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [[P.Map,,,]];
    },
    $isList: 1,
    $asList: function() {
      return [[P.Map,,,]];
    },
    $asImmutableListMixin: function() {
      return [[P.Map,,,]];
    }
  };
  P._SqlResultSetRowList_Interceptor_ListMixin.prototype = {};
  P._SqlResultSetRowList_Interceptor_ListMixin_ImmutableListMixin.prototype = {};
  Y.HeapPriorityQueue.prototype = {
    add$1: function(_, element) {
      var t1, t2, newCapacity, newQueue, _this = this;
      H.assertSubtypeOfRuntimeType(element, H.getTypeArgumentByIndex(_this, 0));
      t1 = _this._priority_queue$_length;
      t2 = _this._priority_queue$_queue.length;
      if (t1 === t2) {
        newCapacity = t2 * 2 + 1;
        if (newCapacity < 7)
          newCapacity = 7;
        t1 = new Array(newCapacity);
        t1.fixed$length = Array;
        newQueue = H.setRuntimeTypeInfo(t1, _this.$ti);
        C.JSArray_methods.setRange$3(newQueue, 0, _this._priority_queue$_length, _this._priority_queue$_queue);
        _this.set$_priority_queue$_queue(newQueue);
      }
      _this._bubbleUp$2(element, _this._priority_queue$_length++);
    },
    get$length: function(_) {
      return this._priority_queue$_length;
    },
    toString$0: function(_) {
      var t1 = this._priority_queue$_queue;
      return P.IterableBase_iterableToShortString(H.SubListIterable$(t1, 0, this._priority_queue$_length, H.getTypeArgumentByIndex(t1, 0)), "(", ")");
    },
    _bubbleUp$2: function(element, index) {
      var t1, parentIndex, t2, $parent, _this = this;
      H.assertSubtypeOfRuntimeType(element, H.getTypeArgumentByIndex(_this, 0));
      for (t1 = _this.comparison; index > 0; index = parentIndex) {
        parentIndex = C.JSInt_methods._tdivFast$1(index - 1, 2);
        t2 = _this._priority_queue$_queue;
        if (parentIndex < 0 || parentIndex >= t2.length)
          return H.ioore(t2, parentIndex);
        $parent = t2[parentIndex];
        if (J.$gt$n(t1.call$2(element, $parent), 0))
          break;
        C.JSArray_methods.$indexSet(_this._priority_queue$_queue, index, $parent);
      }
      C.JSArray_methods.$indexSet(_this._priority_queue$_queue, index, element);
    },
    _bubbleDown$2: function(element, index) {
      var rightChildIndex, t1, t2, leftChildIndex, t3, leftChild, rightChild, comp, minChild, minChildIndex, child, _this = this;
      H.assertSubtypeOfRuntimeType(element, H.getTypeArgumentByIndex(_this, 0));
      rightChildIndex = index * 2 + 2;
      for (t1 = _this.comparison; t2 = _this._priority_queue$_length, rightChildIndex < t2; index = minChildIndex) {
        leftChildIndex = rightChildIndex - 1;
        t2 = _this._priority_queue$_queue;
        t3 = t2.length;
        if (leftChildIndex < 0 || leftChildIndex >= t3)
          return H.ioore(t2, leftChildIndex);
        leftChild = t2[leftChildIndex];
        if (rightChildIndex < 0 || rightChildIndex >= t3)
          return H.ioore(t2, rightChildIndex);
        rightChild = t2[rightChildIndex];
        comp = t1.call$2(leftChild, rightChild);
        if (typeof comp !== "number")
          return comp.$lt();
        if (comp < 0) {
          minChild = leftChild;
          minChildIndex = leftChildIndex;
        } else {
          minChild = rightChild;
          minChildIndex = rightChildIndex;
        }
        comp = t1.call$2(element, minChild);
        if (typeof comp !== "number")
          return comp.$le();
        if (comp <= 0) {
          C.JSArray_methods.$indexSet(_this._priority_queue$_queue, index, element);
          return;
        }
        C.JSArray_methods.$indexSet(_this._priority_queue$_queue, index, minChild);
        rightChildIndex = minChildIndex * 2 + 2;
      }
      leftChildIndex = rightChildIndex - 1;
      if (leftChildIndex < t2) {
        t2 = _this._priority_queue$_queue;
        if (leftChildIndex < 0 || leftChildIndex >= t2.length)
          return H.ioore(t2, leftChildIndex);
        child = t2[leftChildIndex];
        comp = t1.call$2(element, child);
        if (typeof comp !== "number")
          return comp.$gt();
        if (comp > 0) {
          C.JSArray_methods.$indexSet(_this._priority_queue$_queue, index, child);
          index = leftChildIndex;
        }
      }
      C.JSArray_methods.$indexSet(_this._priority_queue$_queue, index, element);
    },
    set$_priority_queue$_queue: function(_queue) {
      this._priority_queue$_queue = H.assertSubtype(_queue, "$isList", this.$ti, "$asList");
    },
    $isPriorityQueue: 1
  };
  N.Hook.prototype = {};
  N.HookState.prototype = {
    initHook$0: function() {
    },
    dispose$0: function() {
    },
    didUpdateHook$1: function(oldHook) {
      H.assertSubtypeOfRuntimeType(oldHook, H.getRuntimeTypeArgument(this, "HookState", 1));
    },
    set$_framework0$_element: function(_element) {
      this._framework0$_element = H.assertSubtype(_element, "$isState", [N.StatefulWidget], "$asState");
    },
    set$_hook: function(_hook) {
      this._hook = H.assertSubtypeOfRuntimeType(_hook, H.getRuntimeTypeArgument(this, "HookState", 1));
    }
  };
  N.HookElement.prototype = {
    get$widget: function() {
      return H.interceptedTypeCast(N.Element.prototype.get$widget.call(this), "$isHookWidget");
    },
    build$0: function() {
      var result, _this = this,
        t1 = _this._hooks;
      _this.set$_currentHook(t1 == null ? null : new J.ArrayIterator(t1, t1.length, [H.getTypeArgumentByIndex(t1, 0)]));
      t1 = _this._currentHook;
      if (t1 != null)
        t1.moveNext$0();
      _this._hookIndex = 0;
      $.HookElement__currentContext = _this;
      result = _this.super$StatefulElement$build();
      $.HookElement__currentContext = null;
      _this._didFinishBuildOnce = true;
      return result;
    },
    inheritFromWidgetOfExactType$1: function(targetType) {
      return this.super$Element$inheritFromWidgetOfExactType(targetType, null);
    },
    updateChild$3: function(child, newWidget, newSlot) {
      var hook, exception, stack, t2, exception0,
        t1 = this._hooks;
      if (t1 != null)
        for (t2 = H.getTypeArgumentByIndex(t1, 0), t1 = new H.ReversedListIterable(t1, [t2]), t2 = new H.ListIterator(t1, t1.get$length(t1), [t2]); t2.moveNext$0();) {
          hook = t2._current;
          try {
            hook.toString;
          } catch (exception0) {
            exception = H.unwrapException(exception0);
            stack = H.getTraceFromException(exception0);
            t1 = "while calling `didBuild` on " + J.get$runtimeType$(hook).toString$0(0);
            U.assertions_FlutterError_dumpErrorToConsole$closure().call$1(new U.FlutterErrorDetails(exception, stack, "hooks library", t1, null, false));
          }
        }
      return this.super$Element$updateChild(child, newWidget, newSlot);
    },
    unmount$0: function() {
      var hook, exception, stack, t1, t2, _i, exception0, t3;
      this.super$StatefulElement$unmount();
      t1 = this._hooks;
      if (t1 != null)
        for (t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
          hook = t1[_i];
          try {
            hook.dispose$0();
          } catch (exception0) {
            exception = H.unwrapException(exception0);
            stack = H.getTraceFromException(exception0);
            t3 = "while disposing " + J.get$runtimeType$(hook).toString$0(0);
            U.assertions_FlutterError_dumpErrorToConsole$closure().call$1(new U.FlutterErrorDetails(exception, stack, "hooks library", t3, null, false));
          }
        }
    },
    _use$1$1: function(hook, $R) {
      var t2, hookState, t3, t4, previousHook, _this = this,
        t1 = [$R];
      H.assertSubtype(hook, "$isHook", t1, "$asHook");
      t2 = _this._currentHook;
      if (t2 == null) {
        hookState = _this._createHookState$1$1(hook, $R);
        if (_this._hooks == null)
          _this.set$_hooks(H.setRuntimeTypeInfo([], [[N.HookState,, [N.Hook,,]]]));
        t1 = _this._hooks;
        (t1 && C.JSArray_methods).add$1(t1, hookState);
        t1 = hookState;
      } else if (!_this._didFinishBuildOnce && t2.__interceptors$_current == null) {
        hookState = _this._createHookState$1$1(H.assertSubtype(hook, "$isHook", t1, "$asHook"), $R);
        t1 = _this._hooks;
        (t1 && C.JSArray_methods).add$1(t1, hookState);
        _this._resetsIterator$1(hookState);
        _this._currentHook.moveNext$0();
        t1 = hookState;
      } else {
        t3 = t2.__interceptors$_current;
        t4 = t3._hook;
        if (t4 === hook) {
          H.subtypeCast(t3, "$isHookState", [$R, [N.Hook, $R]], "$asHookState");
          t2.moveNext$0();
          t1 = t3;
        } else if (H.boolConversionCheck(N.Hook_shouldPreserveState(t4, hook))) {
          t1 = _this._currentHook;
          hookState = H.subtypeCast(t1.__interceptors$_current, "$isHookState", [$R, [N.Hook, $R]], "$asHookState");
          t1.moveNext$0();
          previousHook = hookState._hook;
          hookState.set$_hook(hook);
          hookState.didUpdateHook$1(previousHook);
          t1 = hookState;
        } else {
          H.assertSubtype(hook, "$isHook", t1, "$asHook");
          t1 = _this._hooks;
          (t1 && C.JSArray_methods).removeAt$1(t1, _this._hookIndex).dispose$0();
          hookState = _this._createHookState$1$1(hook, $R);
          t1 = _this._hooks;
          (t1 && C.JSArray_methods).insert$2(t1, _this._hookIndex, hookState);
          _this._resetsIterator$1(hookState);
          _this._currentHook.moveNext$0();
          t1 = hookState;
        }
      }
      t2 = _this._hookIndex;
      if (typeof t2 !== "number")
        return t2.$add();
      _this._hookIndex = t2 + 1;
      return t1.build$1(_this);
    },
    _resetsIterator$1: function(hookState) {
      var t1, _this = this;
      H.assertSubtype(hookState, "$isHookState", [null, [N.Hook,,]], "$asHookState");
      t1 = _this._hooks;
      _this.set$_currentHook(new J.ArrayIterator(t1, t1.length, [H.getTypeArgumentByIndex(t1, 0)]));
      for (; !J.$eq$(_this._currentHook.__interceptors$_current, hookState);)
        _this._currentHook.moveNext$0();
    },
    _createHookState$1$1: function(hook, $R) {
      var state;
      H.assertSubtype(hook, "$isHook", [$R], "$asHook");
      state = hook.createState$0();
      state.set$_framework0$_element(this._framework$_state);
      state.set$_hook(hook);
      state.initHook$0();
      return state;
    },
    set$_currentHook: function(_currentHook) {
      this._currentHook = H.assertSubtype(_currentHook, "$isIterator", [[N.HookState,, [N.Hook,,]]], "$asIterator");
    },
    set$_hooks: function(_hooks) {
      this._hooks = H.assertSubtype(_hooks, "$isList", [[N.HookState,, [N.Hook,,]]], "$asList");
    }
  };
  N.HookWidget.prototype = {
    createElement$0: function(_) {
      var t1 = this.createState$0(),
        t2 = ($.Element__nextHashCode + 1) % 16777215;
      $.Element__nextHashCode = t2;
      t2 = new N.HookElement(t1, t2, this, C._ElementLifecycle_0);
      t1._element = t2;
      t1.set$_widget(this);
      return t2;
    },
    createState$0: function() {
      return new N._HookWidgetState(C._StateLifecycle_0);
    }
  };
  N._HookWidgetState.prototype = {
    build$1: function(context) {
      return this._widget.builder$1(context);
    },
    $asState: function() {
      return [N.HookWidget];
    }
  };
  N.HookBuilder.prototype = {
    build$1: function(context) {
      return this.builder.call$1(context);
    },
    builder$1: function(arg0) {
      return this.builder.call$1(arg0);
    }
  };
  E._AnimationControllerHook.prototype = {
    createState$0: function() {
      return new E._AnimationControllerHookState();
    },
    $asHook: function() {
      return [G.AnimationController];
    }
  };
  E._AnimationControllerHookState.prototype = {
    didUpdateHook$1: function(oldHook) {
      var t1, t2;
      H.interceptedTypeCheck(oldHook, "$is_AnimationControllerHook");
      this.super$HookState$didUpdateHook(oldHook);
      t1 = this._hook;
      t1.vsync;
      oldHook.vsync;
      t1 = t1.duration;
      t2 = oldHook.duration;
      if (t1._duration !== t2._duration)
        this._animationController.duration = t1;
    },
    build$1: function(context) {
      var vsync, t2, t3, t4, t5, _this = this,
        t1 = _this._hook.keys;
      t1 = t1 != null ? new E._SingleTickerProviderHook(t1) : C._SingleTickerProviderHook_null;
      vsync = $.HookElement__currentContext._use$1$1(t1, M.TickerProvider);
      t1 = _this._animationController;
      if (t1 == null) {
        t1 = _this._hook;
        t2 = t1.duration;
        t3 = t1.debugLabel;
        t4 = t1.lowerBound;
        t5 = t1.upperBound;
        t1 = _this._animationController = G.AnimationController$(t1.animationBehavior, t3, t2, t4, t5, t1.initialValue, vsync);
      }
      return t1;
    },
    dispose$0: function() {
      this._animationController.dispose$0();
    },
    $asHookState: function() {
      return [G.AnimationController, E._AnimationControllerHook];
    }
  };
  E._SingleTickerProviderHook.prototype = {
    createState$0: function() {
      return new E._TickerProviderHookState();
    },
    $asHook: function() {
      return [M.TickerProvider];
    }
  };
  E._TickerProviderHookState.prototype = {
    createTicker$1: function(onTick) {
      return this._hooks$_ticker = new M.Ticker(H.functionTypeCheck(onTick, {func: 1, ret: -1, args: [P.Duration]}), "created by " + H.S(this._framework0$_element._element));
    },
    dispose$0: function() {
    },
    build$1: function(context) {
      var t1 = this._hooks$_ticker;
      if (t1 != null)
        t1.set$muted(0, !U.TickerMode_of(context));
      return this;
    },
    $asHookState: function() {
      return [M.TickerProvider, E._SingleTickerProviderHook];
    },
    $isTickerProvider: 1
  };
  E._StreamHook.prototype = {
    createState$0: function() {
      return new E._StreamHookState(this.$ti);
    },
    $asHook: function($T) {
      return [[B.AsyncSnapshot, $T]];
    }
  };
  E._StreamHookState.prototype = {
    initHook$0: function() {
      var _this = this;
      _this.super$HookState$initHook();
      _this.set$_summary(new B.AsyncSnapshot(C.ConnectionState_0, _this._hook.initialData, null, _this.$ti));
      _this._hooks$_subscribe$0();
    },
    didUpdateHook$1: function(oldWidget) {
      var _this = this,
        t1 = _this.$ti;
      H.assertSubtype(oldWidget, "$is_StreamHook", t1, "$as_StreamHook");
      _this.super$HookState$didUpdateHook(oldWidget);
      if (!J.$eq$(oldWidget.stream, _this._hook.stream)) {
        if (_this._hooks$_subscription != null) {
          _this._hooks$_unsubscribe$0();
          _this._hook.preserveState;
          t1 = H.assertSubtype(_this._summary, "$isAsyncSnapshot", t1, "$asAsyncSnapshot");
          _this.set$_summary(new B.AsyncSnapshot(C.ConnectionState_0, t1.data, t1.error, [H.getTypeArgumentByIndex(t1, 0)]));
        }
        _this._hooks$_subscribe$0();
      }
    },
    dispose$0: function() {
      this._hooks$_unsubscribe$0();
    },
    _hooks$_subscribe$0: function() {
      var _this = this,
        t1 = _this._hook.stream;
      if (t1 != null) {
        _this.set$_hooks$_subscription(t1.listen$3$onDone$onError(new E._StreamHookState__subscribe_closure(_this), new E._StreamHookState__subscribe_closure0(_this), new E._StreamHookState__subscribe_closure1(_this)));
        t1 = H.assertSubtype(_this._summary, "$isAsyncSnapshot", _this.$ti, "$asAsyncSnapshot");
        _this.set$_summary(new B.AsyncSnapshot(C.ConnectionState_1, t1.data, t1.error, [H.getTypeArgumentByIndex(t1, 0)]));
      }
    },
    _hooks$_unsubscribe$0: function() {
      var t1 = this._hooks$_subscription;
      if (t1 != null) {
        t1.cancel$0(0);
        this.set$_hooks$_subscription(null);
      }
    },
    build$1: function(context) {
      return this._summary;
    },
    set$_hooks$_subscription: function(_subscription) {
      this._hooks$_subscription = H.assertSubtype(_subscription, "$isStreamSubscription", this.$ti, "$asStreamSubscription");
    },
    set$_summary: function(_summary) {
      this._summary = H.assertSubtype(_summary, "$isAsyncSnapshot", this.$ti, "$asAsyncSnapshot");
    },
    $asHookState: function($T) {
      return [[B.AsyncSnapshot, $T], [E._StreamHook, $T]];
    }
  };
  E._StreamHookState__subscribe_closure.prototype = {
    call$1: function(data) {
      var t1 = this.$this,
        t2 = H.functionTypeCheck(new E._StreamHookState__subscribe__closure1(t1, H.assertSubtypeOfRuntimeType(data, H.getTypeArgumentByIndex(t1, 0))), {func: 1, ret: -1});
      t1._framework0$_element.setState$1(t2);
    },
    $signature: function() {
      return {func: 1, ret: P.Null, args: [H.getTypeArgumentByIndex(this.$this, 0)]};
    }
  };
  E._StreamHookState__subscribe__closure1.prototype = {
    call$0: function() {
      var t1 = this.$this,
        t2 = H.getTypeArgumentByIndex(t1, 0),
        t3 = [t2];
      H.assertSubtype(t1._summary, "$isAsyncSnapshot", t3, "$asAsyncSnapshot");
      t1.set$_summary(new B.AsyncSnapshot(C.ConnectionState_2, H.assertSubtypeOfRuntimeType(this.data, t2), null, t3));
    },
    $signature: 0
  };
  E._StreamHookState__subscribe_closure1.prototype = {
    call$1: function(error) {
      var t1 = this.$this,
        t2 = H.functionTypeCheck(new E._StreamHookState__subscribe__closure(t1, error), {func: 1, ret: -1});
      t1._framework0$_element.setState$1(t2);
    },
    $signature: 46
  };
  E._StreamHookState__subscribe__closure.prototype = {
    call$0: function() {
      var t1 = this.$this,
        t2 = [H.getTypeArgumentByIndex(t1, 0)];
      H.assertSubtype(t1._summary, "$isAsyncSnapshot", t2, "$asAsyncSnapshot");
      t1.set$_summary(new B.AsyncSnapshot(C.ConnectionState_2, null, this.error, t2));
    },
    $signature: 0
  };
  E._StreamHookState__subscribe_closure0.prototype = {
    call$0: function() {
      var t1 = this.$this,
        t2 = H.functionTypeCheck(new E._StreamHookState__subscribe__closure0(t1), {func: 1, ret: -1});
      t1._framework0$_element.setState$1(t2);
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 0
  };
  E._StreamHookState__subscribe__closure0.prototype = {
    call$0: function() {
      var t1 = this.$this,
        t2 = H.assertSubtype(t1._summary, "$isAsyncSnapshot", [H.getTypeArgumentByIndex(t1, 0)], "$asAsyncSnapshot");
      t1.set$_summary(new B.AsyncSnapshot(C.ConnectionState_3, t2.data, t2.error, [H.getTypeArgumentByIndex(t2, 0)]));
    },
    $signature: 0
  };
  E._PageControllerHook.prototype = {
    createState$0: function() {
      return new E._PageControllerHookState();
    },
    $asHook: function() {
      return [D.PageController];
    }
  };
  E._PageControllerHookState.prototype = {
    initHook$0: function() {
      var t1 = this._hook,
        t2 = {func: 1, ret: -1};
      return this._pageController = new D.PageController(t1.initialPage, true, t1.viewportFraction, 0, true, null, H.setRuntimeTypeInfo([], [A.ScrollPosition]), new R.ObserverList(H.setRuntimeTypeInfo([], [t2]), [t2]));
    },
    build$1: function(context) {
      return this._pageController;
    },
    dispose$0: function() {
      return this._pageController.dispose$0();
    },
    $asHookState: function() {
      return [D.PageController, E._PageControllerHook];
    }
  };
  E.UseScrollController.prototype = {
    call$0: function() {
      return $.HookElement__currentContext._use$1$1(new E._ScrollControllerHook(null, 0, true, null), F.ScrollController);
    }
  };
  E._ScrollControllerHook.prototype = {
    createState$0: function() {
      return new E._ScrollControllerHookState();
    },
    $asHook: function() {
      return [F.ScrollController];
    }
  };
  E._ScrollControllerHookState.prototype = {
    initHook$0: function() {
      var t1 = this._hook,
        t2 = {func: 1, ret: -1};
      this._scrollController = new F.ScrollController(t1.initialScrollOffset, t1.keepScrollOffset, t1.debugLabel, H.setRuntimeTypeInfo([], [A.ScrollPosition]), new R.ObserverList(H.setRuntimeTypeInfo([], [t2]), [t2]));
    },
    build$1: function(context) {
      return this._scrollController;
    },
    dispose$0: function() {
      return this._scrollController.dispose$0();
    },
    $asHookState: function() {
      return [F.ScrollController, E._ScrollControllerHook];
    }
  };
  E._TrackingScrollControllerHook.prototype = {
    createState$0: function() {
      return new E._TrackingScrollControllerHookState();
    },
    $asHook: function() {
      return [F.TrackingScrollController];
    }
  };
  E._TrackingScrollControllerHookState.prototype = {
    initHook$0: function() {
      var t1 = this._hook,
        t2 = A.ScrollPosition,
        t3 = {func: 1, ret: -1};
      this._trackingScrollController = new F.TrackingScrollController(P.LinkedHashMap_LinkedHashMap$_empty(t2, t3), t1.initialScrollOffset, true, t1.debugLabel, H.setRuntimeTypeInfo([], [t2]), new R.ObserverList(H.setRuntimeTypeInfo([], [t3]), [t3]));
    },
    build$1: function(context) {
      return this._trackingScrollController;
    },
    dispose$0: function() {
      return this._trackingScrollController.dispose$0();
    },
    $asHookState: function() {
      return [F.TrackingScrollController, E._TrackingScrollControllerHook];
    }
  };
  E._ListenableHook.prototype = {
    createState$0: function() {
      return new E._ListenableStateHook();
    },
    $asHook: function() {
      return [-1];
    }
  };
  E._ListenableStateHook.prototype = {
    initHook$0: function() {
      this.super$HookState$initHook();
      this._hook.listenable.addListener$1(0, this.get$_listener());
    },
    didUpdateHook$1: function(oldHook) {
      var t1, t2, _this = this;
      H.interceptedTypeCheck(oldHook, "$is_ListenableHook");
      _this.super$HookState$didUpdateHook(oldHook);
      t1 = _this._hook.listenable;
      t2 = oldHook.listenable;
      if (t1 != t2) {
        t1 = _this.get$_listener();
        t2.removeListener$1(0, t1);
        _this._hook.listenable.addListener$1(0, t1);
      }
    },
    build$1: function(context) {
    },
    _listener$0: function() {
      var t1 = H.functionTypeCheck(new E._ListenableStateHook__listener_closure(), {func: 1, ret: -1});
      this._framework0$_element.setState$1(t1);
    },
    dispose$0: function() {
      this._hook.listenable.removeListener$1(0, this.get$_listener());
    },
    $asHookState: function() {
      return [-1, E._ListenableHook];
    }
  };
  E._ListenableStateHook__listener_closure.prototype = {
    call$0: function() {
    },
    $signature: 0
  };
  E._MemoizedHook.prototype = {
    createState$0: function() {
      return new E._MemoizedHookState(this.$ti);
    },
    valueBuilder$0: function() {
      return this.valueBuilder.call$0();
    }
  };
  E._MemoizedHookState.prototype = {
    initHook$0: function() {
      this.super$HookState$initHook();
      this.set$value(0, this._hook.valueBuilder$0());
    },
    build$1: function(context) {
      return this.value;
    },
    set$value: function(_, value) {
      this.value = H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(this, 0));
    },
    $asHookState: function($T) {
      return [$T, [E._MemoizedHook, $T]];
    }
  };
  E._EffectHook.prototype = {
    createState$0: function() {
      return new E._EffectHookState();
    },
    $asHook: function() {
      return [-1];
    },
    effect$0: function($receiver) {
      return this.effect.call$0();
    }
  };
  E._EffectHookState.prototype = {
    initHook$0: function() {
      this.super$HookState$initHook();
      this.set$disposer(this._hook.effect$0(0));
    },
    didUpdateHook$1: function(oldHook) {
      var t1, _this = this;
      _this.super$HookState$didUpdateHook(H.interceptedTypeCheck(oldHook, "$is_EffectHook"));
      if (_this._hook.keys == null) {
        t1 = _this.disposer;
        if (t1 != null)
          t1.call$0();
        _this.set$disposer(_this._hook.effect$0(0));
      }
    },
    build$1: function(context) {
    },
    dispose$0: function() {
      var t1 = this.disposer;
      if (t1 != null)
        t1.call$0();
    },
    set$disposer: function(disposer) {
      this.disposer = H.functionTypeCheck(disposer, {func: 1, ret: -1});
    },
    $asHookState: function() {
      return [-1, E._EffectHook];
    }
  };
  F.h_closure.prototype = {
    call$1: function(c) {
      return H.interceptedTypeCast(this.f.call$1(H.interceptedTypeCheck(c, "$isBuildContext")), "$isWidget");
    },
    $signature: 11
  };
  F.run_closure.prototype = {
    call$1: function(c) {
      var sm = E.useMemoized(new F.run__closure(), [P.Stream, P.int]),
        t1 = P.int,
        i = $.HookElement__currentContext._use$1$1(new E._StreamHook(sm, null, true, null, [t1]), [B.AsyncSnapshot, t1]).data;
      if (i == null)
        i = 0;
      t1 = $.$get$dark()._value;
      return F.scaff(Q.Color$fromARGB(240, (16711680 & t1) >>> 16, (65280 & t1) >>> 8, (255 & t1) >>> 0), C.IconData_58829_MaterialIcons_false, new F.run__closure0(c), F.flex([F.txt("" + C.JSInt_methods._tdivFast$1(i, 60) + ":" + C.JSInt_methods.$mod(i, 60), 52, C.Color_4294967295, 8), F.txt(C.JSNumber_methods.toStringAsFixed$1(i * 0.0005, 3) + "km", 44, $.$get$green(), 8)], 1, 2, 3, 1));
    },
    $signature: 4
  };
  F.run__closure.prototype = {
    call$0: function() {
      return P.Stream_Stream$periodic(P.Duration$(0, 1000, 0), new F.run___closure(), P.int);
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 183
  };
  F.run___closure.prototype = {
    call$1: function(i) {
      return i;
    },
    $signature: 163
  };
  F.run__closure0.prototype = {
    call$0: function() {
      return K.Navigator_of(this.c).pop$1$1(null, P.Object);
    },
    $signature: 26
  };
  F.home_closure.prototype = {
    call$1: function(c) {
      return F.scaff(C.Color_4294967295, C.IconData_58726_MaterialIcons_false, new F.home__closure(c), new B.FutureBuilder(E.useMemoized(new F.home__closure0(), [P.Future,,]), new F.home__closure1(), null, [null]));
    },
    $signature: 4
  };
  F.home__closure.prototype = {
    call$0: function() {
      var _null = null,
        t1 = H.setRuntimeTypeInfo([], [{func: 1, ret: [P.Future, P.bool]}]),
        t2 = $.Zone__current,
        t3 = [null],
        t4 = [null],
        t5 = S.ProxyAnimation$(C.C__AlwaysDismissedAnimation),
        t6 = H.setRuntimeTypeInfo([], [X.OverlayEntry]),
        t7 = $.Zone__current;
      return K.Navigator_of(this.c).push$1$1(new V.PageRouteBuilder(new F.home___closure(), new F.home___closure0(), false, false, new O.FocusScopeNode(), t1, new N.LabeledGlobalKey(_null, [[T._ModalScopeState,,]]), new N.LabeledGlobalKey(_null, [[N.State, N.StatefulWidget]]), new S.PageStorageBucket(), _null, new P._AsyncCompleter(new P._Future(t2, t3), t4), t5, t6, C.RouteSettings_null_false_null, new P._AsyncCompleter(new P._Future(t7, t3), t4), [null]), _null);
    },
    $signature: 30
  };
  F.home___closure0.prototype = {
    call$4: function(c, a, _, w) {
      var t1;
      H.interceptedTypeCheck(c, "$isBuildContext");
      t1 = [P.double];
      H.assertSubtype(a, "$isAnimation", t1, "$asAnimation");
      H.assertSubtype(_, "$isAnimation", t1, "$asAnimation");
      H.interceptedTypeCheck(w, "$isWidget");
      return F.tr(a.get$value(a), 0, w);
    },
    "call*": "call$4",
    $requiredArgCount: 4,
    $signature: 156
  };
  F.home___closure.prototype = {
    call$3: function(c, a, aa) {
      var t1;
      H.interceptedTypeCheck(c, "$isBuildContext");
      t1 = [P.double];
      H.assertSubtype(a, "$isAnimation", t1, "$asAnimation");
      H.assertSubtype(aa, "$isAnimation", t1, "$asAnimation");
      return F.run(c);
    },
    "call*": "call$3",
    $requiredArgCount: 3,
    $signature: 155
  };
  F.home__closure0.prototype = {
    call$0: function() {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(null),
        $async$returnValue, $async$temp1;
      var $async$call$0 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$temp1 = C.C_JsonCodec;
              $async$goto = 3;
              return P._asyncAwait($.$get$rootBundle().loadString$1("data/runs.json"), $async$call$0);
            case 3:
              // returning from await.
              $async$returnValue = $async$temp1.decode$2$reviver(0, $async$result, null);
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$call$0, $async$completer);
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 30
  };
  F.home__closure1.prototype = {
    call$2: function(c, runs) {
      var t1 = runs.data;
      return F.tabs(t1 == null ? [] : t1);
    },
    $signature: 154
  };
  F.tabs_closure.prototype = {
    call$1: function(c) {
      var t1, t2, t3, position, pi, _null = null;
      $.$get$useScrollController().toString;
      t1 = $.HookElement__currentContext._use$1$1(new E._TrackingScrollControllerHook(_null, 0, true, _null), F.TrackingScrollController);
      t2 = $.HookElement__currentContext._use$1$1(new E._PageControllerHook(1, 1, true, _null), D.PageController);
      $.HookElement__currentContext._use$1$1(new E._ListenableHook(t2, _null), -1);
      t3 = t2._positions;
      if (t3.length !== 0) {
        position = H.interceptedTypeCheck(C.JSArray_methods.get$single(t3), "$is_PagePosition");
        t3 = position.get$page(position);
        pi = t3 == null ? 0 : t3;
      } else
        pi = 1;
      return new A.LayoutBuilder(new F.tabs__closure(t2, this.d, t1, 1 - pi, pi), _null);
    },
    $signature: 153
  };
  F.tabs__closure.prototype = {
    call$2: function(c, s) {
      var t1, _this = this;
      H.interceptedTypeCheck(c, "$isBuildContext");
      H.interceptedTypeCheck(s, "$isBoxConstraints");
      t1 = _this.p;
      return new D.PageView(true, t1, G.SliverChildBuilderDelegate$(new F.tabs___closure(_this.d, _this.sc, _this.pii, t1, s, _this.pi), true, true, true, 2), null);
    },
    "call*": "call$2",
    $requiredArgCount: 2,
    $signature: 135
  };
  F.tabs___closure.prototype = {
    call$2: function(c, i) {
      var t1, t2, t3, t4, t5, t6, _this = this;
      H.interceptedTypeCheck(c, "$isBuildContext");
      t1 = _this.d;
      t2 = _this.sc;
      t3 = _this.pii;
      t4 = _this.p;
      t5 = _this.s;
      t6 = _this.pi;
      return H.intTypeCheck(i) === 0 ? F.list(t1, t2, "Stats", false, new F.tabs____closure(t3), t4, t5, -1.25 * t6, t3) : F.list(t1, t2, "Runs", true, new F.tabs____closure0(t6), t4, t5, -1.05 * t3, 1);
    },
    "call*": "call$2",
    $requiredArgCount: 2,
    $signature: 47
  };
  F.tabs____closure.prototype = {
    call$1: function(x) {
      return F.detail(x, this.pii);
    },
    $signature: 4
  };
  F.tabs____closure0.prototype = {
    call$1: function(x) {
      return F.overview(x, this.pi);
    },
    $signature: 4
  };
  F.list_closure.prototype = {
    call$2: function(c, i) {
      var t1, _this = this;
      H.interceptedTypeCheck(c, "$isBuildContext");
      H.intTypeCheck(i);
      if (i === 0)
        t1 = F.header(_this.h, _this.l, _this.p);
      else {
        if (typeof i !== "number")
          return i.$sub();
        t1 = _this.b.call$1(J.$index$asx(_this.it, i - 1));
      }
      return H.interceptedTypeCheck(t1, "$isWidget");
    },
    "call*": "call$2",
    $requiredArgCount: 2,
    $signature: 47
  };
  F.header_closure.prototype = {
    call$0: function() {
      var t1 = this.l ? 0 : 1,
        t2 = P.Duration$(0, 300, 0),
        position = H.interceptedTypeCheck(C.JSArray_methods.get$single(this.p._positions), "$is_PagePosition"),
        t3 = position._viewportDimension;
      if (typeof t3 !== "number")
        return H.iae(t3);
      return position.animateTo$3$curve$duration(t1 * t3 * position._viewportFraction, C.Cubic_xDo0, t2);
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 27
  };
  F.overview_closure.prototype = {
    call$1: function(c) {
      var t2, a, color, _null = null,
        t1 = P.Duration$(0, 3000, 0);
      t1 = $.HookElement__currentContext._use$1$1(new E._AnimationControllerHook(t1, _null, 0, 0, 1, _null, C.AnimationBehavior_0, _null), G.AnimationController);
      t2 = -1;
      $.HookElement__currentContext._use$1$1(new E._EffectHook(new F.overview__closure(t1), _null), t2);
      $.HookElement__currentContext._use$1$1(new E._ListenableHook(t1, _null), t2);
      a = t1._animation_controller$_value;
      if (typeof a !== "number")
        return a.$sub();
      color = Q.Color_lerp($.$get$blue(), $.$get$green(), Math.abs((a - 0.5) * 2));
      t1 = this.i;
      t2 = J.getInterceptor$asx(t1);
      return F.box(F.flex([F.txt(t2.$index(t1, "date"), 12, C.Color_4294967295, 3), $.$get$sp(), new T.SizedBox(150, 150, T.CustomPaint$(_null, _null, new F.LP(t1, C.Cubic_xDo0.transform$1(0, a), color, _null)), _null), $.$get$sp(), F.flex([L.Icon$(C.IconData_58719_MaterialIcons_false, color), F.txt(t2.$index(t1, "place"), 12, C.Color_4294967295, 4)], 0, 2, 2, 1), F.txt(t2.$index(t1, "dst"), 36, C.Color_4294967295, 8), F.txt(t2.$index(t1, "duration"), 24, color, 7)], 1, 2, 2, 1), 0, 24, 340, _null, $.$get$dark(), 24);
    },
    $signature: 4
  };
  F.overview__closure.prototype = {
    call$0: function() {
      var t1 = this.ac,
        min = t1.lowerBound,
        max = t1.upperBound,
        period = t1.duration,
        t2 = t1._animation_controller$_value,
        t3 = period._duration / 1000000;
      if (max === min)
        t2 = 0;
      else {
        if (typeof t2 !== "number")
          return t2.$div();
        t2 = t2 / (max - min) * t3;
      }
      t1.stop$0(0);
      t1._startSimulation$1(new G._RepeatingSimulation(min, max, false, t3, t2, C.Tolerance_Gdw));
    },
    $signature: 0
  };
  F.detail_closure.prototype = {
    call$1: function(s) {
      var t1 = J.getInterceptor$asx(s);
      return [F.txt(t1.$index(s, 0), 12, $.$get$blue(), 3), F.txt(t1.$index(s, 1), 12, C.Color_4294967295, 8), $.$get$sp()];
    },
    $signature: 49
  };
  F.graph_closure.prototype = {
    call$1: function(x) {
      var t1 = $.$get$sp(),
        t2 = this.a,
        t3 = J.getInterceptor$ns(x),
        t4 = H.numTypeCheck(J.$mul$ns(t3.$mul(x, C.Cubic_xDo0.transform$1(0, t2)), 34));
      t2 = t3.$mul(x, t2);
      return [t1, F.box(t1, 0, 0, 4 + t4, 4, Q.Color_lerp($.$get$blue(), $.$get$green(), H.doubleTypeCheck(t2)), 2)];
    },
    $signature: 49
  };
  F.LP.prototype = {
    paint$2: function(c, s) {
      var t5, t6, ps, h, t7, t8, _this = this,
        t1 = _this.i,
        t2 = J.getInterceptor$asx(t1),
        p = X.parseSvgPathData(H.stringTypeCheck(t2.$index(t1, "path"))),
        t3 = new F.LP_paint_np(),
        t4 = s._dx;
      if (typeof t4 !== "number")
        return t4.$div();
      t5 = p.getBounds$0(0);
      t6 = t5.right;
      t5 = t5.left;
      if (typeof t6 !== "number")
        return t6.$sub();
      if (typeof t5 !== "number")
        return H.iae(t5);
      c.translate$2(0, t4 / 2 - (t6 - t5) / 2, 4);
      t5 = t3.call$0();
      J.set$color$x(t5, C.Color_1107296256);
      c.drawPath$2(p, t5);
      c.translate$2(0, 0, -4);
      t5 = t3.call$0();
      J.set$color$x(t5, $.$get$blue());
      c.drawPath$2(p, t5);
      ps = t2.$index(t1, "points");
      h = J.lastWhere$2$orElse$ax(ps, new F.LP_paint_closure(_this), new F.LP_paint_closure0(ps));
      t1 = J.getInterceptor$asx(h);
      t2 = t1.$index(h, 2);
      t5 = t1.$index(h, 3);
      H.doubleTypeCheck(t2);
      H.doubleTypeCheck(t5);
      t6 = t1.$index(h, 4);
      t4 = t1.$index(h, 5);
      H.doubleTypeCheck(t6);
      H.doubleTypeCheck(t4);
      t7 = _this.a;
      t8 = t1.$index(h, 0);
      if (typeof t7 !== "number")
        return t7.$sub();
      if (typeof t8 !== "number")
        return H.iae(t8);
      t1 = t1.$index(h, 1);
      if (typeof t1 !== "number")
        return H.iae(t1);
      Q.Offset_lerp(new Q.Offset(t2, t5), new Q.Offset(t6, t4), (t7 - t8) / t1);
      new F.LP_paint_ha(c, p, t3).call$2(_this.color, 130);
    },
    shouldRepaint$1: function(o) {
      return this.a != H.interceptedTypeCheck(o, "$isLP").a;
    },
    shouldRebuildSemantics$1: function(o) {
      return false;
    },
    set$color: function(receiver, val) {
      return this.color = val;
    }
  };
  F.LP_paint_np.prototype = {
    call$0: function() {
      var t1 = new Q.Paint(new Q.PaintData());
      t1.set$strokeWidth(6);
      t1.set$style(0, C.PaintingStyle_1);
      if (t1._frozen) {
        t1._paintData = t1._paintData.clone$0(0);
        t1._frozen = false;
      }
      t1._paintData.strokeCap = C.StrokeCap_1;
      return t1;
    },
    $signature: 133
  };
  F.LP_paint_closure.prototype = {
    call$1: function(x) {
      var t1 = this.$this.a,
        t2 = J.getInterceptor$asx(x),
        t3 = t2.$index(x, 0);
      if (typeof t1 !== "number")
        return t1.$gt();
      if (typeof t3 !== "number")
        return H.iae(t3);
      if (t1 > t3) {
        t2 = J.$add$ansx(t2.$index(x, 0), t2.$index(x, 1));
        if (typeof t2 !== "number")
          return H.iae(t2);
        t2 = t1 <= t2;
        t1 = t2;
      } else
        t1 = false;
      return t1;
    },
    $signature: 74
  };
  F.LP_paint_closure0.prototype = {
    call$0: function() {
      return J.get$last$ax(this.ps);
    },
    $signature: 27
  };
  F.LP_paint_ha.prototype = {
    call$2: function(x, r) {
      var t1 = this.np.call$0();
      J.set$color$x(t1, x);
      return this.c.drawPath$2(this.p, t1);
    },
    $signature: 125
  };
  X.FlutterPathProxy.prototype = {};
  X.AnimationStatus.prototype = {
    toString$0: function(_) {
      return this._animation$_name;
    }
  };
  X.Animation.prototype = {
    drive$1$1: function(child, $U) {
      H.assertSubtype(child, "$isAnimatable", [$U], "$asAnimatable");
      H.assertSubtype(this, "$isAnimation", [P.double], "$asAnimation");
      child.toString;
      return new R._AnimatedEvaluation(this, child, [H.getRuntimeTypeArgument(child, "Animatable", 0)]);
    },
    toString$0: function(_) {
      var _this = this;
      return _this.get$runtimeType(_this).toString$0(0) + "#" + Y.shortHash(_this) + "(" + _this.toStringDetails$0() + ")";
    },
    toStringDetails$0: function() {
      switch (this.get$status(this)) {
        case C.AnimationStatus_1:
          var icon = "\u25b6";
          break;
        case C.AnimationStatus_2:
          icon = "\u25c0";
          break;
        case C.AnimationStatus_3:
          icon = "\u23ed";
          break;
        case C.AnimationStatus_0:
          icon = "\u23ee";
          break;
        default:
          icon = null;
      }
      return H.S(icon);
    }
  };
  G._AnimationDirection.prototype = {
    toString$0: function(_) {
      return this._animation_controller$_name;
    }
  };
  G.AnimationBehavior.prototype = {
    toString$0: function(_) {
      return this._animation_controller$_name;
    }
  };
  G.AnimationController.prototype = {
    get$value: function(_) {
      return this._animation_controller$_value;
    },
    set$value: function(_, newValue) {
      var _this = this;
      _this.stop$0(0);
      _this._internalSetValue$1(newValue);
      _this.notifyListeners$0();
      _this._checkStatusChanged$0();
    },
    get$velocity: function() {
      var t1 = this._ticker;
      if (!(t1 != null && t1._future != null))
        return 0;
      return this._simulation.dx$1(0, this._lastElapsedDuration._duration / 1000000);
    },
    _internalSetValue$1: function(newValue) {
      var _this = this,
        t1 = _this.lowerBound,
        t2 = _this.upperBound,
        t3 = _this._animation_controller$_value = J.clamp$2$n(newValue, t1, t2);
      if (t3 === t1)
        _this._status = C.AnimationStatus_0;
      else if (t3 === t2)
        _this._status = C.AnimationStatus_3;
      else
        _this._status = _this._direction === C._AnimationDirection_0 ? C.AnimationStatus_1 : C.AnimationStatus_2;
    },
    get$status: function(_) {
      return this._status;
    },
    forward$1$from: function(_, from) {
      var _this = this;
      _this._direction = C._AnimationDirection_0;
      if (from != null)
        _this.set$value(0, from);
      return _this._animateToInternal$1(_this.upperBound);
    },
    forward$0: function($receiver) {
      return this.forward$1$from($receiver, null);
    },
    reverse$1$from: function(_, from) {
      this._direction = C._AnimationDirection_1;
      return this._animateToInternal$1(this.lowerBound);
    },
    reverse$0: function($receiver) {
      return this.reverse$1$from($receiver, null);
    },
    _animateToInternal$3$curve$duration: function(target, curve, duration) {
      var scale, range, t1, remainingFraction, simulationDuration, _this = this;
      if ((4 & $.SemanticsBinding__instance.SemanticsBinding__accessibilityFeatures._ui$_index) !== 0)
        switch (_this.animationBehavior) {
          case C.AnimationBehavior_0:
            scale = 0.05;
            break;
          case C.AnimationBehavior_1:
            scale = 1;
            break;
          default:
            scale = 1;
        }
      else
        scale = 1;
      if (duration == null) {
        range = _this.upperBound - _this.lowerBound;
        if (isFinite(range)) {
          t1 = _this._animation_controller$_value;
          if (typeof target !== "number")
            return target.$sub();
          if (typeof t1 !== "number")
            return H.iae(t1);
          remainingFraction = Math.abs(target - t1) / range;
        } else
          remainingFraction = 1;
        simulationDuration = new P.Duration(C.JSNumber_methods.round$0(_this.duration._duration * remainingFraction));
      } else
        simulationDuration = target == _this._animation_controller$_value ? C.Duration_0 : duration;
      _this.stop$0(0);
      t1 = simulationDuration._duration;
      if (t1 === 0) {
        if (_this._animation_controller$_value != target) {
          _this._animation_controller$_value = J.clamp$2$n(target, _this.lowerBound, _this.upperBound);
          _this.notifyListeners$0();
        }
        _this._status = _this._direction === C._AnimationDirection_0 ? C.AnimationStatus_3 : C.AnimationStatus_0;
        _this._checkStatusChanged$0();
        t1 = P.Null;
        t1 = new M.TickerFuture(new P._AsyncCompleter(new P._Future($.Zone__current, [t1]), [t1]));
        t1._ticker$_complete$0();
        return t1;
      }
      return _this._startSimulation$1(new G._InterpolationSimulation(t1 * scale / 1000000, _this._animation_controller$_value, target, curve, C.Tolerance_Gdw));
    },
    _animateToInternal$1: function(target) {
      return this._animateToInternal$3$curve$duration(target, C.C__Linear, null);
    },
    fling$1$velocity: function(velocity) {
      var target, scale, t2, simulation, _this = this,
        t1 = velocity < 0;
      _this._direction = t1 ? C._AnimationDirection_1 : C._AnimationDirection_0;
      target = t1 ? _this.lowerBound - 0.01 : _this.upperBound + 0.01;
      if ((4 & $.SemanticsBinding__instance.SemanticsBinding__accessibilityFeatures._ui$_index) !== 0)
        switch (_this.animationBehavior) {
          case C.AnimationBehavior_0:
            scale = 200;
            break;
          case C.AnimationBehavior_1:
            scale = 1;
            break;
          default:
            scale = 1;
        }
      else
        scale = 1;
      t1 = $.$get$_kFlingSpringDescription();
      t2 = _this._animation_controller$_value;
      if (typeof t2 !== "number")
        return t2.$sub();
      simulation = new M.SpringSimulation(target, M._SpringSolution__SpringSolution(t1, t2 - target, velocity * scale), C.Tolerance_Gdw);
      simulation.tolerance = C.Tolerance_qbZ;
      _this.stop$0(0);
      return _this._startSimulation$1(simulation);
    },
    _startSimulation$1: function(simulation) {
      var result, _this = this;
      _this._simulation = simulation;
      _this._lastElapsedDuration = C.Duration_0;
      _this._animation_controller$_value = J.clamp$2$n(simulation.x$1(0, 0), _this.lowerBound, _this.upperBound);
      result = _this._ticker.start$0(0);
      _this._status = _this._direction === C._AnimationDirection_0 ? C.AnimationStatus_1 : C.AnimationStatus_2;
      _this._checkStatusChanged$0();
      return result;
    },
    stop$1$canceled: function(_, canceled) {
      this._lastElapsedDuration = this._simulation = null;
      this._ticker.stop$1$canceled(0, canceled);
    },
    stop$0: function($receiver) {
      return this.stop$1$canceled($receiver, true);
    },
    dispose$0: function() {
      this._ticker.dispose$0();
      this._ticker = null;
      this.super$AnimationEagerListenerMixin$dispose();
    },
    _checkStatusChanged$0: function() {
      var _this = this,
        newStatus = _this._status;
      if (_this._lastReportedStatus != newStatus) {
        _this._lastReportedStatus = newStatus;
        _this.notifyStatusListeners$1(newStatus);
      }
    },
    _animation_controller$_tick$1: function(elapsed) {
      var elapsedInSeconds, _this = this;
      _this._lastElapsedDuration = elapsed;
      elapsedInSeconds = elapsed._duration / 1000000;
      _this._animation_controller$_value = J.clamp$2$n(_this._simulation.x$1(0, elapsedInSeconds), _this.lowerBound, _this.upperBound);
      if (_this._simulation.isDone$1(elapsedInSeconds)) {
        _this._status = _this._direction === C._AnimationDirection_0 ? C.AnimationStatus_3 : C.AnimationStatus_0;
        _this.stop$1$canceled(0, false);
      }
      _this.notifyListeners$0();
      _this._checkStatusChanged$0();
    },
    toStringDetails$0: function() {
      var ticker, label, _this = this,
        t1 = _this._ticker,
        t2 = t1 == null,
        paused = !t2 && t1._future != null ? "" : "; paused";
      if (t2)
        ticker = "; DISPOSED";
      else
        ticker = t1._muted ? "; silenced" : "";
      t1 = _this.debugLabel;
      label = t1 == null ? "" : "; for " + t1;
      return _this.super$Animation$toStringDetails() + " " + J.toStringAsFixed$1$n(_this._animation_controller$_value, 3) + paused + ticker + label;
    },
    $asAnimation: function() {
      return [P.double];
    }
  };
  G._InterpolationSimulation.prototype = {
    x$1: function(_, timeInSeconds) {
      var t1, t2, t3, _this = this,
        t = C.JSDouble_methods.clamp$2(timeInSeconds / _this._durationInSeconds, 0, 1);
      if (t === 0)
        return _this._begin;
      else {
        t1 = _this._animation_controller$_end;
        if (t === 1)
          return t1;
        else {
          t2 = _this._begin;
          if (typeof t1 !== "number")
            return t1.$sub();
          if (typeof t2 !== "number")
            return H.iae(t2);
          t3 = _this._curve.transform$1(0, t);
          if (typeof t3 !== "number")
            return H.iae(t3);
          return t2 + (t1 - t2) * t3;
        }
      }
    },
    dx$1: function(_, timeInSeconds) {
      var t1, t2;
      this.tolerance.toString;
      t1 = this.x$1(0, timeInSeconds + 0.001);
      t2 = this.x$1(0, timeInSeconds - 0.001);
      if (typeof t1 !== "number")
        return t1.$sub();
      if (typeof t2 !== "number")
        return H.iae(t2);
      return (t1 - t2) / 0.002;
    },
    isDone$1: function(timeInSeconds) {
      return timeInSeconds > this._durationInSeconds;
    }
  };
  G._RepeatingSimulation.prototype = {
    x$1: function(_, timeInSeconds) {
      var _this = this,
        totalTimeInSeconds = timeInSeconds + _this._initialT,
        t1 = _this._periodInSeconds,
        t = C.JSDouble_methods.$mod(totalTimeInSeconds / t1, 1);
      C.JSNumber_methods.$mod(C.JSNumber_methods.$tdiv(totalTimeInSeconds, t1), 2);
      t1 = Q.lerpDouble(_this.min, _this.max, t);
      return t1;
    },
    dx$1: function(_, timeInSeconds) {
      return (this.max - this.min) / this._periodInSeconds;
    },
    isDone$1: function(timeInSeconds) {
      return false;
    }
  };
  G._AnimationController_Animation_AnimationEagerListenerMixin.prototype = {};
  G._AnimationController_Animation_AnimationEagerListenerMixin_AnimationLocalListenersMixin.prototype = {};
  G._AnimationController_Animation_AnimationEagerListenerMixin_AnimationLocalListenersMixin_AnimationLocalStatusListenersMixin.prototype = {};
  S._AlwaysCompleteAnimation.prototype = {
    addListener$1: function(_, listener) {
      H.functionTypeCheck(listener, {func: 1, ret: -1});
    },
    removeListener$1: function(_, listener) {
      H.functionTypeCheck(listener, {func: 1, ret: -1});
    },
    addStatusListener$1: function(listener) {
      H.functionTypeCheck(listener, {func: 1, ret: -1, args: [X.AnimationStatus]});
    },
    removeStatusListener$1: function(listener) {
      H.functionTypeCheck(listener, {func: 1, ret: -1, args: [X.AnimationStatus]});
    },
    get$status: function(_) {
      return C.AnimationStatus_3;
    },
    get$value: function(_) {
      return 1;
    },
    toString$0: function(_) {
      return "kAlwaysCompleteAnimation";
    },
    $asAnimation: function() {
      return [P.double];
    }
  };
  S._AlwaysDismissedAnimation.prototype = {
    addListener$1: function(_, listener) {
      H.functionTypeCheck(listener, {func: 1, ret: -1});
    },
    removeListener$1: function(_, listener) {
      H.functionTypeCheck(listener, {func: 1, ret: -1});
    },
    addStatusListener$1: function(listener) {
      H.functionTypeCheck(listener, {func: 1, ret: -1, args: [X.AnimationStatus]});
    },
    removeStatusListener$1: function(listener) {
      H.functionTypeCheck(listener, {func: 1, ret: -1, args: [X.AnimationStatus]});
    },
    get$status: function(_) {
      return C.AnimationStatus_0;
    },
    get$value: function(_) {
      return 0;
    },
    toString$0: function(_) {
      return "kAlwaysDismissedAnimation";
    },
    $asAnimation: function() {
      return [P.double];
    }
  };
  S.AnimationWithParentMixin.prototype = {
    addListener$1: function(_, listener) {
      H.functionTypeCheck(listener, {func: 1, ret: -1});
      return this.get$parent(this).addListener$1(0, listener);
    },
    removeListener$1: function(_, listener) {
      H.functionTypeCheck(listener, {func: 1, ret: -1});
      return this.get$parent(this).removeListener$1(0, listener);
    },
    addStatusListener$1: function(listener) {
      H.functionTypeCheck(listener, {func: 1, ret: -1, args: [X.AnimationStatus]});
      return this.get$parent(this).addStatusListener$1(listener);
    },
    removeStatusListener$1: function(listener) {
      H.functionTypeCheck(listener, {func: 1, ret: -1, args: [X.AnimationStatus]});
      return this.get$parent(this).removeStatusListener$1(listener);
    },
    get$status: function(_) {
      var t1 = this.get$parent(this);
      return t1.get$status(t1);
    }
  };
  S.ProxyAnimation.prototype = {
    set$parent: function(_, value) {
      var t1, t2, _this = this;
      H.assertSubtype(value, "$isAnimation", [P.double], "$asAnimation");
      t1 = _this._animations$_parent;
      if (value == t1)
        return;
      if (t1 != null) {
        _this._animations$_status = t1.get$status(t1);
        t1 = _this._animations$_parent;
        _this._animations$_value = H.doubleTypeCheck(t1.get$value(t1));
        if (_this.AnimationLazyListenerMixin__listenerCounter > 0)
          _this.didStopListening$0();
      }
      _this.set$_animations$_parent(value);
      if (_this._animations$_parent != null) {
        if (_this.AnimationLazyListenerMixin__listenerCounter > 0)
          _this.didStartListening$0();
        t1 = _this._animations$_value;
        t2 = _this._animations$_parent;
        t2 = t2.get$value(t2);
        if (t1 == null ? t2 != null : t1 !== t2)
          _this.notifyListeners$0();
        t1 = _this._animations$_status;
        t2 = _this._animations$_parent;
        if (t1 != t2.get$status(t2)) {
          t1 = _this._animations$_parent;
          _this.notifyStatusListeners$1(t1.get$status(t1));
        }
        _this._animations$_value = _this._animations$_status = null;
      }
    },
    didStartListening$0: function() {
      var _this = this,
        t1 = _this._animations$_parent;
      if (t1 != null) {
        t1.addListener$1(0, _this.get$notifyListeners());
        _this._animations$_parent.addStatusListener$1(_this.get$notifyStatusListeners());
      }
    },
    didStopListening$0: function() {
      var _this = this,
        t1 = _this._animations$_parent;
      if (t1 != null) {
        t1.removeListener$1(0, _this.get$notifyListeners());
        _this._animations$_parent.removeStatusListener$1(_this.get$notifyStatusListeners());
      }
    },
    get$status: function(_) {
      var t1 = this._animations$_parent;
      return t1 != null ? t1.get$status(t1) : this._animations$_status;
    },
    get$value: function(_) {
      var t1 = this._animations$_parent;
      return t1 != null ? t1.get$value(t1) : this._animations$_value;
    },
    toString$0: function(_) {
      var _this = this,
        t1 = _this._animations$_parent;
      if (t1 == null)
        return new H.TypeImpl(H.getRti(_this)).toString$0(0) + "(null; " + _this.super$Animation$toStringDetails() + " " + J.toStringAsFixed$1$n(_this.get$value(_this), 3) + ")";
      return t1.toString$0(0) + "\u27a9" + new H.TypeImpl(H.getRti(_this)).toString$0(0);
    },
    set$_animations$_parent: function(_parent) {
      this._animations$_parent = H.assertSubtype(_parent, "$isAnimation", [P.double], "$asAnimation");
    },
    $asAnimation: function() {
      return [P.double];
    }
  };
  S.ReverseAnimation.prototype = {
    addListener$1: function(_, listener) {
      var t1;
      H.functionTypeCheck(listener, {func: 1, ret: -1});
      this.didRegisterListener$0();
      t1 = this.parent;
      t1.get$parent(t1).addListener$1(0, listener);
    },
    removeListener$1: function(_, listener) {
      var t1;
      H.functionTypeCheck(listener, {func: 1, ret: -1});
      t1 = this.parent;
      t1.get$parent(t1).removeListener$1(0, listener);
      this.didUnregisterListener$0();
    },
    didStartListening$0: function() {
      var t1 = this.parent,
        t2 = H.functionTypeCheck(this.get$_statusChangeHandler(), {func: 1, ret: -1, args: [X.AnimationStatus]});
      t1.get$parent(t1).addStatusListener$1(t2);
    },
    didStopListening$0: function() {
      var t1 = this.parent,
        t2 = H.functionTypeCheck(this.get$_statusChangeHandler(), {func: 1, ret: -1, args: [X.AnimationStatus]});
      t1.get$parent(t1).removeStatusListener$1(t2);
    },
    _statusChangeHandler$1: function($status) {
      this.notifyStatusListeners$1(this._reverseStatus$1(H.interceptedTypeCheck($status, "$isAnimationStatus")));
    },
    get$status: function(_) {
      var t1 = this.parent;
      t1 = t1.get$parent(t1);
      return this._reverseStatus$1(t1.get$status(t1));
    },
    get$value: function(_) {
      var t1 = this.parent;
      t1 = t1.get$value(t1);
      if (typeof t1 !== "number")
        return H.iae(t1);
      return 1 - t1;
    },
    _reverseStatus$1: function($status) {
      switch ($status) {
        case C.AnimationStatus_1:
          return C.AnimationStatus_2;
        case C.AnimationStatus_2:
          return C.AnimationStatus_1;
        case C.AnimationStatus_3:
          return C.AnimationStatus_0;
        case C.AnimationStatus_0:
          return C.AnimationStatus_3;
      }
      return;
    },
    toString$0: function(_) {
      return this.parent.toString$0(0) + "\u27aa" + new H.TypeImpl(H.getRti(this)).toString$0(0);
    },
    $asAnimation: function() {
      return [P.double];
    }
  };
  S.CurvedAnimation.prototype = {
    _updateCurveDirection$1: function($status) {
      var _this = this;
      switch (H.interceptedTypeCheck($status, "$isAnimationStatus")) {
        case C.AnimationStatus_0:
        case C.AnimationStatus_3:
          _this._curveDirection = null;
          break;
        case C.AnimationStatus_1:
          if (_this._curveDirection == null)
            _this._curveDirection = C.AnimationStatus_1;
          break;
        case C.AnimationStatus_2:
          if (_this._curveDirection == null)
            _this._curveDirection = C.AnimationStatus_2;
          break;
      }
    },
    get$_useForwardCurve: function() {
      if (this.reverseCurve != null) {
        var t1 = this._curveDirection;
        if (t1 == null) {
          t1 = this.parent;
          t1 = t1.get$status(t1);
        }
        t1 = t1 !== C.AnimationStatus_2;
      } else
        t1 = true;
      return t1;
    },
    get$value: function(_) {
      var _this = this,
        activeCurve = _this.get$_useForwardCurve() ? _this.curve : _this.reverseCurve,
        t1 = _this.parent,
        t = t1.get$value(t1);
      if (activeCurve == null)
        return t;
      if (t === 0 || t === 1)
        return t;
      return activeCurve.transform$1(0, t);
    },
    toString$0: function(_) {
      var _this = this,
        t1 = _this.reverseCurve;
      if (t1 == null)
        return H.S(_this.parent) + "\u27a9" + _this.curve.toString$0(0);
      if (_this.get$_useForwardCurve())
        return H.S(_this.parent) + "\u27a9" + _this.curve.toString$0(0) + "\u2092\u2099/" + t1.toString$0(0);
      return H.S(_this.parent) + "\u27a9" + _this.curve.toString$0(0) + "/" + t1.toString$0(0) + "\u2092\u2099";
    },
    $asAnimation: function() {
      return [P.double];
    },
    get$parent: function(receiver) {
      return this.parent;
    }
  };
  S._TrainHoppingMode.prototype = {
    toString$0: function(_) {
      return this._animations$_name;
    }
  };
  S.TrainHoppingAnimation.prototype = {
    _statusChangeHandler$1: function($status) {
      H.interceptedTypeCheck($status, "$isAnimationStatus");
      if ($status != this._lastStatus) {
        this.notifyListeners$0();
        this._lastStatus = $status;
      }
    },
    get$status: function(_) {
      var t1 = this._currentTrain;
      return t1.get$status(t1);
    },
    _valueChangeHandler$0: function() {
      var t2, hop, _this = this,
        t1 = _this._nextTrain;
      if (t1 != null) {
        switch (_this._mode) {
          case C._TrainHoppingMode_0:
            t1 = t1.get$value(t1);
            t2 = _this._currentTrain;
            hop = J.$le$n(t1, t2.get$value(t2));
            break;
          case C._TrainHoppingMode_1:
            t1 = t1.get$value(t1);
            t2 = _this._currentTrain;
            hop = J.$ge$n(t1, t2.get$value(t2));
            break;
          default:
            hop = false;
        }
        if (hop) {
          t1 = _this._currentTrain;
          t2 = _this.get$_statusChangeHandler();
          t1.removeStatusListener$1(t2);
          t1.removeListener$1(0, _this.get$_valueChangeHandler());
          _this.set$_currentTrain(_this._nextTrain);
          _this.set$_nextTrain(null);
          _this._currentTrain.addStatusListener$1(t2);
          t2 = _this._currentTrain;
          _this._statusChangeHandler$1(t2.get$status(t2));
        }
      } else
        hop = false;
      t1 = _this._currentTrain;
      t1 = t1.get$value(t1);
      if (t1 != _this._lastValue) {
        _this.notifyListeners$0();
        _this._lastValue = t1;
      }
      if (hop && _this.onSwitchedTrain != null)
        _this.onSwitchedTrain.call$0();
    },
    get$value: function(_) {
      var t1 = this._currentTrain;
      return t1.get$value(t1);
    },
    dispose$0: function() {
      var t1, t2, _this = this;
      _this._currentTrain.removeStatusListener$1(_this.get$_statusChangeHandler());
      t1 = _this.get$_valueChangeHandler();
      _this._currentTrain.removeListener$1(0, t1);
      _this.set$_currentTrain(null);
      t2 = _this._nextTrain;
      if (t2 != null)
        t2.removeListener$1(0, t1);
      _this.set$_nextTrain(null);
      _this.super$AnimationEagerListenerMixin$dispose();
    },
    toString$0: function(_) {
      var _this = this;
      if (_this._nextTrain != null)
        return H.S(_this._currentTrain) + "\u27a9" + new H.TypeImpl(H.getRti(_this)).toString$0(0) + "(next: " + H.S(_this._nextTrain) + ")";
      return H.S(_this._currentTrain) + "\u27a9" + new H.TypeImpl(H.getRti(_this)).toString$0(0) + "(no next)";
    },
    set$_currentTrain: function(_currentTrain) {
      this._currentTrain = H.assertSubtype(_currentTrain, "$isAnimation", [P.double], "$asAnimation");
    },
    set$_nextTrain: function(_nextTrain) {
      this._nextTrain = H.assertSubtype(_nextTrain, "$isAnimation", [P.double], "$asAnimation");
    },
    $asAnimation: function() {
      return [P.double];
    }
  };
  S.CompoundAnimation.prototype = {
    didStartListening$0: function() {
      var t3, _this = this,
        t1 = _this.first,
        t2 = _this.get$_maybeNotifyListeners();
      t1.addListener$1(0, t2);
      t3 = _this.get$_maybeNotifyStatusListeners();
      t1.addStatusListener$1(t3);
      t1 = _this.next;
      t1.addListener$1(0, t2);
      t1.addStatusListener$1(t3);
    },
    didStopListening$0: function() {
      var t3, _this = this,
        t1 = _this.first,
        t2 = _this.get$_maybeNotifyListeners();
      t1.removeListener$1(0, t2);
      t3 = _this.get$_maybeNotifyStatusListeners();
      t1.removeStatusListener$1(t3);
      t1 = _this.next;
      t1.removeListener$1(0, t2);
      t1.removeStatusListener$1(t3);
    },
    get$status: function(_) {
      var t1 = this.next;
      if (t1.get$status(t1) === C.AnimationStatus_1 || t1.get$status(t1) === C.AnimationStatus_2)
        return t1.get$status(t1);
      t1 = this.first;
      return t1.get$status(t1);
    },
    toString$0: function(_) {
      return new H.TypeImpl(H.getRti(this)).toString$0(0) + "(" + this.first.toString$0(0) + ", " + this.next.toString$0(0) + ")";
    },
    _maybeNotifyStatusListeners$1: function(_) {
      var _this = this;
      H.interceptedTypeCheck(_, "$isAnimationStatus");
      if (_this.get$status(_this) != _this._lastStatus) {
        _this._lastStatus = _this.get$status(_this);
        _this.notifyStatusListeners$1(_this.get$status(_this));
      }
    },
    _maybeNotifyListeners$0: function() {
      var _this = this;
      if (!J.$eq$(_this.get$value(_this), _this._lastValue)) {
        _this.set$_lastValue(_this.get$value(_this));
        _this.notifyListeners$0();
      }
    },
    set$_lastValue: function(_lastValue) {
      this._lastValue = H.assertSubtypeOfRuntimeType(_lastValue, H.getTypeArgumentByIndex(this, 0));
    }
  };
  S.AnimationMin.prototype = {
    get$value: function(_) {
      var t2,
        t1 = this.first;
      t1 = t1.get$value(t1);
      t2 = this.next;
      t2 = t2.get$value(t2);
      return Math.min(H.checkNum(t1), H.checkNum(t2));
    }
  };
  S._CompoundAnimation_Animation_AnimationLazyListenerMixin.prototype = {};
  S._CompoundAnimation_Animation_AnimationLazyListenerMixin_AnimationLocalListenersMixin.prototype = {};
  S._CompoundAnimation_Animation_AnimationLazyListenerMixin_AnimationLocalListenersMixin_AnimationLocalStatusListenersMixin.prototype = {};
  S._CurvedAnimation_Animation_AnimationWithParentMixin.prototype = {};
  S._ProxyAnimation_Animation_AnimationLazyListenerMixin.prototype = {};
  S._ProxyAnimation_Animation_AnimationLazyListenerMixin_AnimationLocalListenersMixin.prototype = {};
  S._ProxyAnimation_Animation_AnimationLazyListenerMixin_AnimationLocalListenersMixin_AnimationLocalStatusListenersMixin.prototype = {};
  S._ReverseAnimation_Animation_AnimationLazyListenerMixin.prototype = {};
  S._ReverseAnimation_Animation_AnimationLazyListenerMixin_AnimationLocalStatusListenersMixin.prototype = {};
  S._TrainHoppingAnimation_Animation_AnimationEagerListenerMixin.prototype = {};
  S._TrainHoppingAnimation_Animation_AnimationEagerListenerMixin_AnimationLocalListenersMixin.prototype = {};
  S._TrainHoppingAnimation_Animation_AnimationEagerListenerMixin_AnimationLocalListenersMixin_AnimationLocalStatusListenersMixin.prototype = {};
  Z.Curve.prototype = {
    toString$0: function(_) {
      return new H.TypeImpl(H.getRti(this)).toString$0(0);
    }
  };
  Z._Linear.prototype = {
    transform$1: function(_, t) {
      return t;
    }
  };
  Z.Interval.prototype = {
    transform$1: function(_, t) {
      var t1;
      if (t === 0 || t === 1)
        return t;
      t1 = this.begin;
      if (typeof t !== "number")
        return t.$sub();
      if (typeof t1 !== "number")
        return H.iae(t1);
      t = C.JSDouble_methods.clamp$2((t - t1) / (this.end - t1), 0, 1);
      if (t === 0 || t === 1)
        return t;
      return this.curve.transform$1(0, t);
    },
    toString$0: function(_) {
      var _this = this,
        t1 = _this.curve;
      if (!t1.$is_Linear)
        return new H.TypeImpl(H.getRti(_this)).toString$0(0) + "(" + H.S(_this.begin) + "\u22ef" + H.S(_this.end) + ")\u27a9" + t1.toString$0(0);
      return new H.TypeImpl(H.getRti(_this)).toString$0(0) + "(" + H.S(_this.begin) + "\u22ef" + H.S(_this.end) + ")";
    }
  };
  Z.Threshold.prototype = {
    transform$1: function(_, t) {
      if (t === 0 || t === 1)
        return t;
      if (typeof t !== "number")
        return t.$lt();
      return t < this.threshold ? 0 : 1;
    }
  };
  Z.Cubic.prototype = {
    _evaluateCubic$3: function(a, b, m) {
      var t1 = 1 - m;
      return 3 * a * t1 * t1 * m + 3 * b * t1 * m * m + m * m * m;
    },
    transform$1: function(_, t) {
      var t1, t2, start, end, midpoint, estimate, _this = this;
      for (t1 = _this.a, t2 = _this.c, start = 0, end = 1; true;) {
        midpoint = (start + end) / 2;
        estimate = _this._evaluateCubic$3(t1, t2, midpoint);
        if (typeof t !== "number")
          return t.$sub();
        if (Math.abs(t - estimate) < 0.001)
          return _this._evaluateCubic$3(_this.b, _this.d, midpoint);
        if (estimate < t)
          start = midpoint;
        else
          end = midpoint;
      }
    },
    toString$0: function(_) {
      var _this = this;
      return new H.TypeImpl(H.getRti(_this)).toString$0(0) + "(" + C.JSNumber_methods.toStringAsFixed$1(_this.a, 2) + ", " + C.JSNumber_methods.toStringAsFixed$1(_this.b, 2) + ", " + C.JSNumber_methods.toStringAsFixed$1(_this.c, 2) + ", " + C.JSInt_methods.toStringAsFixed$1(_this.d, 2) + ")";
    }
  };
  Z.FlippedCurve.prototype = {
    transform$1: function(_, t) {
      var t1;
      if (typeof t !== "number")
        return H.iae(t);
      t1 = this.curve.transform$1(0, 1 - t);
      if (typeof t1 !== "number")
        return H.iae(t1);
      return 1 - t1;
    },
    toString$0: function(_) {
      return new H.TypeImpl(H.getRti(this)).toString$0(0) + "(" + this.curve.toString$0(0) + ")";
    }
  };
  Z._DecelerateCurve.prototype = {
    transform$1: function(_, t) {
      if (typeof t !== "number")
        return H.iae(t);
      t = 1 - t;
      return 1 - t * t;
    }
  };
  S.AnimationLazyListenerMixin.prototype = {
    didRegisterListener$0: function() {
      if (this.AnimationLazyListenerMixin__listenerCounter === 0)
        this.didStartListening$0();
      ++this.AnimationLazyListenerMixin__listenerCounter;
    },
    didUnregisterListener$0: function() {
      if (--this.AnimationLazyListenerMixin__listenerCounter === 0)
        this.didStopListening$0();
    }
  };
  S.AnimationEagerListenerMixin.prototype = {
    didRegisterListener$0: function() {
    },
    didUnregisterListener$0: function() {
    },
    dispose$0: function() {
    }
  };
  S.AnimationLocalListenersMixin.prototype = {
    addListener$1: function(_, listener) {
      var t1;
      H.functionTypeCheck(listener, {func: 1, ret: -1});
      this.didRegisterListener$0();
      t1 = this.AnimationLocalListenersMixin__listeners;
      H.assertSubtypeOfRuntimeType(listener, H.getTypeArgumentByIndex(t1, 0));
      t1._isDirty = true;
      C.JSArray_methods.add$1(t1._list, listener);
    },
    removeListener$1: function(_, listener) {
      var t1 = this.AnimationLocalListenersMixin__listeners;
      listener = H.assertSubtypeOfRuntimeType(H.functionTypeCheck(listener, {func: 1, ret: -1}), H.getTypeArgumentByIndex(t1, 0));
      t1._isDirty = true;
      if (C.JSArray_methods.remove$1(t1._list, listener))
        this.didUnregisterListener$0();
    },
    notifyListeners$0: function() {
      var listener, exception, stack, t2, _i, exception0, t3,
        t1 = this.AnimationLocalListenersMixin__listeners,
        localListeners = P.List_List$from(t1, true, {func: 1, ret: -1});
      for (t2 = localListeners.length, _i = 0; _i < localListeners.length; localListeners.length === t2 || (0, H.throwConcurrentModificationError)(localListeners), ++_i) {
        listener = localListeners[_i];
        try {
          if (t1.contains$1(0, listener))
            listener.call$0();
        } catch (exception0) {
          exception = H.unwrapException(exception0);
          stack = H.getTraceFromException(exception0);
          t3 = "while notifying listeners for " + new H.TypeImpl(H.getRti(this)).toString$0(0);
          U.assertions_FlutterError_dumpErrorToConsole$closure().call$1(new U.FlutterErrorDetails(exception, stack, "animation library", t3, new S.AnimationLocalListenersMixin_notifyListeners_closure(this), false));
        }
      }
    }
  };
  S.AnimationLocalListenersMixin_notifyListeners_closure.prototype = {
    call$1: function(information) {
      var t1 = this.$this;
      information._contents += "The " + new H.TypeImpl(H.getRti(t1)).toString$0(0) + " notifying listeners was:\n";
      information._contents += "  " + t1.toString$0(0);
    },
    $signature: 5
  };
  S.AnimationLocalStatusListenersMixin.prototype = {
    addStatusListener$1: function(listener) {
      var t1;
      H.functionTypeCheck(listener, {func: 1, ret: -1, args: [X.AnimationStatus]});
      this.didRegisterListener$0();
      t1 = this.AnimationLocalStatusListenersMixin__statusListeners;
      H.assertSubtypeOfRuntimeType(listener, H.getTypeArgumentByIndex(t1, 0));
      t1._isDirty = true;
      C.JSArray_methods.add$1(t1._list, listener);
    },
    removeStatusListener$1: function(listener) {
      var t1 = this.AnimationLocalStatusListenersMixin__statusListeners;
      listener = H.assertSubtypeOfRuntimeType(H.functionTypeCheck(listener, {func: 1, ret: -1, args: [X.AnimationStatus]}), H.getTypeArgumentByIndex(t1, 0));
      t1._isDirty = true;
      if (C.JSArray_methods.remove$1(t1._list, listener))
        this.didUnregisterListener$0();
    },
    notifyStatusListeners$1: function($status) {
      var listener, exception, stack, t1, localListeners, t2, _i, exception0, t3;
      H.interceptedTypeCheck($status, "$isAnimationStatus");
      t1 = this.AnimationLocalStatusListenersMixin__statusListeners;
      localListeners = P.List_List$from(t1, true, {func: 1, ret: -1, args: [X.AnimationStatus]});
      for (t2 = localListeners.length, _i = 0; _i < localListeners.length; localListeners.length === t2 || (0, H.throwConcurrentModificationError)(localListeners), ++_i) {
        listener = localListeners[_i];
        try {
          if (t1.contains$1(0, listener))
            listener.call$1($status);
        } catch (exception0) {
          exception = H.unwrapException(exception0);
          stack = H.getTraceFromException(exception0);
          t3 = "while notifying status listeners for " + new H.TypeImpl(H.getRti(this)).toString$0(0);
          U.assertions_FlutterError_dumpErrorToConsole$closure().call$1(new U.FlutterErrorDetails(exception, stack, "animation library", t3, new S.AnimationLocalStatusListenersMixin_notifyStatusListeners_closure(this), false));
        }
      }
    }
  };
  S.AnimationLocalStatusListenersMixin_notifyStatusListeners_closure.prototype = {
    call$1: function(information) {
      var t1 = this.$this;
      information._contents += "The " + new H.TypeImpl(H.getRti(t1)).toString$0(0) + " notifying status listeners was:\n";
      information._contents += "  " + t1.toString$0(0);
    },
    $signature: 5
  };
  R.Animatable.prototype = {
    chain$1: function($parent) {
      return new R._ChainedEvaluation(H.assertSubtype($parent, "$isAnimatable", [P.double], "$asAnimatable"), this, [H.getRuntimeTypeArgument(this, "Animatable", 0)]);
    }
  };
  R._AnimatedEvaluation.prototype = {
    get$value: function(_) {
      var t1 = H.assertSubtype(this.parent, "$isAnimation", [P.double], "$asAnimation");
      return this._evaluatable.transform$1(0, t1.get$value(t1));
    },
    toString$0: function(_) {
      var t1 = this.parent,
        t2 = this._evaluatable,
        t3 = H.S(t1) + "\u27a9" + t2.toString$0(0) + "\u27a9";
      H.assertSubtype(t1, "$isAnimation", [P.double], "$asAnimation");
      return t3 + H.S(t2.transform$1(0, t1.get$value(t1)));
    },
    toStringDetails$0: function() {
      return this.super$Animation$toStringDetails() + " " + this._evaluatable.toString$0(0);
    },
    get$parent: function(receiver) {
      return this.parent;
    }
  };
  R._ChainedEvaluation.prototype = {
    transform$1: function(_, t) {
      return this._evaluatable.transform$1(0, this._tween$_parent.transform$1(0, t));
    },
    toString$0: function(_) {
      return H.S(this._tween$_parent) + "\u27a9" + this._evaluatable.toString$0(0);
    }
  };
  R.Tween.prototype = {
    lerp$1: function(t) {
      var t1 = this.begin;
      return H.assertSubtypeOfRuntimeType(J.$add$ansx(t1, J.$mul$ns(J.$sub$n(this.end, t1), t)), H.getRuntimeTypeArgument(this, "Tween", 0));
    },
    transform$1: function(_, t) {
      if (t === 0)
        return this.begin;
      if (t === 1)
        return this.end;
      return this.lerp$1(t);
    },
    toString$0: function(_) {
      return new H.TypeImpl(H.getRti(this)).toString$0(0) + "(" + H.S(this.begin) + " \u2192 " + H.S(this.end) + ")";
    },
    set$begin: function(begin) {
      this.begin = H.assertSubtypeOfRuntimeType(begin, H.getRuntimeTypeArgument(this, "Tween", 0));
    },
    set$end: function(_, end) {
      this.end = H.assertSubtypeOfRuntimeType(end, H.getRuntimeTypeArgument(this, "Tween", 0));
    }
  };
  R.ReverseTween.prototype = {
    lerp$1: function(t) {
      if (typeof t !== "number")
        return H.iae(t);
      return this.parent.lerp$1(1 - t);
    }
  };
  R.ColorTween.prototype = {
    lerp$1: function(t) {
      return Q.Color_lerp(this.begin, this.end, t);
    },
    $asAnimatable: function() {
      return [Q.Color];
    },
    $asTween: function() {
      return [Q.Color];
    }
  };
  R.RectTween.prototype = {
    lerp$1: function(t) {
      return Q.Rect_lerp(this.begin, this.end, t);
    },
    $asAnimatable: function() {
      return [Q.Rect];
    },
    $asTween: function() {
      return [Q.Rect];
    }
  };
  R.IntTween.prototype = {
    lerp$1: function(t) {
      var t1 = this.begin;
      return J.round$0$n(J.$add$ansx(t1, J.$mul$ns(J.$sub$n(this.end, t1), t)));
    },
    $asAnimatable: function() {
      return [P.int];
    },
    $asTween: function() {
      return [P.int];
    }
  };
  R.CurveTween.prototype = {
    transform$1: function(_, t) {
      if (t === 0 || t === 1)
        return t;
      return this.curve.transform$1(0, t);
    },
    toString$0: function(_) {
      return new H.TypeImpl(H.getRti(this)).toString$0(0) + "(curve: " + this.curve.toString$0(0) + ")";
    },
    $asAnimatable: function() {
      return [P.double];
    }
  };
  R.__AnimatedEvaluation_Animation_AnimationWithParentMixin.prototype = {};
  L.CupertinoLocalizations.prototype = {};
  L._CupertinoLocalizationsDelegate.prototype = {
    isSupported$1: function(locale) {
      return Q.Locale__replaceDeprecatedLanguageSubtag(locale._languageCode) === "en";
    },
    load$1: function(_, locale) {
      return new O.SynchronousFuture(C.C_DefaultCupertinoLocalizations, [L.CupertinoLocalizations]);
    },
    shouldReload$1: function(old) {
      H.interceptedTypeCheck(old, "$is_CupertinoLocalizationsDelegate");
      return false;
    },
    toString$0: function(_) {
      return "DefaultCupertinoLocalizations.delegate(en_US)";
    },
    $asLocalizationsDelegate: function() {
      return [L.CupertinoLocalizations];
    }
  };
  L.DefaultCupertinoLocalizations.prototype = {$isCupertinoLocalizations: 1};
  D.CupertinoPageRoute__startPopGesture_closure.prototype = {
    call$0: function() {
      var t1 = this._box_0,
        t2 = t1.backController;
      if (t2 != null) {
        if (t2._animating)
          t2.controller.removeStatusListener$1(t2.get$_route$_handleStatusChanged());
        t2.navigator.didStopUserGesture$0();
      }
      t1.backController = null;
      $.$get$CupertinoPageRoute__popGestureInProgress().remove$1(0, this.route);
    },
    $signature: 0
  };
  D.CupertinoPageRoute_buildPageTransitions_closure.prototype = {
    call$0: function() {
      return D.CupertinoPageRoute__isPopGestureEnabled(this.route, this.T);
    },
    $signature: 26
  };
  D.CupertinoPageRoute_buildPageTransitions_closure0.prototype = {
    call$0: function() {
      return D.CupertinoPageRoute__startPopGesture(this.route, this.T);
    },
    $signature: function() {
      return {func: 1, ret: [D._CupertinoBackGestureController, this.T]};
    }
  };
  D.CupertinoPageTransition.prototype = {
    build$1: function(context) {
      var _this = this,
        textDirection = T.Directionality_of(context),
        t1 = _this._primaryShadowAnimation;
      return K.SlideTransition$(K.SlideTransition$(new K.DecoratedBoxTransition(t1, _this.child, t1, null), _this._primaryPositionAnimation, textDirection, true), _this._secondaryPositionAnimation, textDirection, false);
    }
  };
  D._CupertinoBackGestureDetector.prototype = {
    createState$0: function() {
      return new D._CupertinoBackGestureDetectorState(C._StateLifecycle_0, this.$ti);
    },
    enabledCallback$0: function() {
      return this.enabledCallback.call$0();
    },
    onStartPopGesture$0: function() {
      return this.onStartPopGesture.call$0();
    },
    get$child: function() {
      return this.child;
    }
  };
  D._CupertinoBackGestureDetectorState.prototype = {
    initState$0: function() {
      var t1, _this = this;
      _this.super$State$initState();
      t1 = P.int;
      t1 = new O.HorizontalDragGestureRecognizer(C.DragStartBehavior_1, C._DragState_0, P.LinkedHashMap_LinkedHashMap$_empty(t1, R.VelocityTracker), P.LinkedHashMap_LinkedHashMap$_empty(t1, D.GestureArenaEntry), P.HashSet_HashSet(t1), _this, null);
      t1.set$onStart(0, _this.get$_handleDragStart());
      t1.set$onUpdate(_this.get$_handleDragUpdate());
      t1.set$onEnd(0, _this.get$_handleDragEnd());
      t1.set$onCancel(0, _this.get$_handleDragCancel());
      _this._recognizer = t1;
    },
    dispose$0: function() {
      var t1 = this._recognizer;
      t1._velocityTrackers.clear$0(0);
      t1.super$OneSequenceGestureRecognizer$dispose();
      this.super$State$dispose();
    },
    _handleDragStart$1: function(details) {
      H.interceptedTypeCheck(details, "$isDragStartDetails");
      this.set$_backGestureController(this._widget.onStartPopGesture$0());
    },
    _handleDragUpdate$1: function(details) {
      var t1, t2, t3;
      H.interceptedTypeCheck(details, "$isDragUpdateDetails");
      t1 = this._backGestureController;
      t2 = details.primaryDelta;
      t3 = this._element;
      t3 = t3.get$size(t3)._dx;
      if (typeof t2 !== "number")
        return t2.$div();
      if (typeof t3 !== "number")
        return H.iae(t3);
      t3 = this._convertToLogical$1(t2 / t3);
      t1 = t1.controller;
      t2 = t1._animation_controller$_value;
      if (typeof t2 !== "number")
        return t2.$sub();
      if (typeof t3 !== "number")
        return H.iae(t3);
      t1.set$value(0, t2 - t3);
    },
    _handleDragEnd$1: function(details) {
      var t1, t2, t3, _this = this;
      H.interceptedTypeCheck(details, "$isDragEndDetails");
      t1 = _this._backGestureController;
      t2 = details.velocity.pixelsPerSecond._dx;
      t3 = _this._element;
      t3 = t3.get$size(t3)._dx;
      if (typeof t2 !== "number")
        return t2.$div();
      if (typeof t3 !== "number")
        return H.iae(t3);
      t1.dragEnd$1(_this._convertToLogical$1(t2 / t3));
      _this.set$_backGestureController(null);
    },
    _handleDragCancel$0: function() {
      var t1 = this._backGestureController;
      if (t1 != null)
        t1.dragEnd$1(0);
      this.set$_backGestureController(null);
    },
    _route$_handlePointerDown$1: function($event) {
      if (H.boolConversionCheck(this._widget.enabledCallback$0()))
        this._recognizer.addPointer$1($event);
    },
    _convertToLogical$1: function(value) {
      switch (T.Directionality_of(this._element)) {
        case C.TextDirection_0:
          return -value;
        case C.TextDirection_1:
          return value;
      }
      return;
    },
    build$1: function(context) {
      var _null = null,
        dragAreaWidth = Math.max(H.checkNum(T.Directionality_of(context) === C.TextDirection_1 ? F.MediaQuery_of(context, false).padding._left : F.MediaQuery_of(context, false).padding._right), 20);
      return T.Stack$(C.AlignmentDirectional_m1_m1, H.setRuntimeTypeInfo([this._widget.child, new T.PositionedDirectional(0, 0, 0, dragAreaWidth, T.Listener$(C.HitTestBehavior_2, _null, _null, this.get$_route$_handlePointerDown(), _null, _null), _null)], [N.Widget]), C.StackFit_2);
    },
    set$_backGestureController: function(_backGestureController) {
      this._backGestureController = H.assertSubtype(_backGestureController, "$is_CupertinoBackGestureController", this.$ti, "$as_CupertinoBackGestureController");
    },
    $asState: function($T) {
      return [[D._CupertinoBackGestureDetector, $T]];
    }
  };
  D._CupertinoBackGestureController.prototype = {
    dragEnd$1: function(velocity) {
      var t1, t2, _this = this;
      if (typeof velocity !== "number")
        return velocity.abs$0();
      if (Math.abs(velocity) >= 1) {
        t1 = _this.controller;
        t1.fling$1$velocity(-velocity);
      } else {
        t1 = _this.controller;
        t2 = t1._animation_controller$_value;
        if (typeof t2 !== "number")
          return t2.$le();
        if (t2 <= 0.5)
          t1.fling$1$velocity(-1);
        else
          t1.fling$1$velocity(1);
      }
      _this._animating = true;
      t1.addStatusListener$1(_this.get$_route$_handleStatusChanged());
    },
    _route$_handleStatusChanged$1: function($status) {
      var _this = this;
      H.interceptedTypeCheck($status, "$isAnimationStatus");
      _this.controller.removeStatusListener$1(_this.get$_route$_handleStatusChanged());
      _this._animating = false;
      if ($status === C.AnimationStatus_0)
        _this.navigator.pop$1$0(H.getTypeArgumentByIndex(_this, 0));
      _this.onEnded.call$0();
    },
    dispose$0: function() {
      var _this = this;
      if (_this._animating)
        _this.controller.removeStatusListener$1(_this.get$_route$_handleStatusChanged());
      _this.navigator.didStopUserGesture$0();
    }
  };
  D._CupertinoEdgeShadowDecoration.prototype = {
    lerpFrom$2: function(a, t) {
      if (!(a instanceof D._CupertinoEdgeShadowDecoration))
        return D._CupertinoEdgeShadowDecoration_lerp(null, this, t);
      return D._CupertinoEdgeShadowDecoration_lerp(a, this, t);
    },
    lerpTo$2: function(b, t) {
      if (!(b instanceof D._CupertinoEdgeShadowDecoration))
        return D._CupertinoEdgeShadowDecoration_lerp(this, null, t);
      return D._CupertinoEdgeShadowDecoration_lerp(this, b, t);
    },
    createBoxPainter$1: function(onChanged) {
      return new D._CupertinoEdgeShadowPainter(this, H.functionTypeCheck(onChanged, {func: 1, ret: -1}));
    },
    $eq: function(_, other) {
      if (other == null)
        return false;
      if (!new H.TypeImpl(H.getRti(this)).$eq(0, J.get$runtimeType$(other)))
        return false;
      return J.$eq$(this.edgeGradient, H.interceptedTypeCheck(other, "$is_CupertinoEdgeShadowDecoration").edgeGradient);
    },
    get$hashCode: function(_) {
      return J.get$hashCode$(this.edgeGradient);
    }
  };
  D._CupertinoEdgeShadowPainter.prototype = {
    paint$3: function(canvas, offset, configuration) {
      var textDirection, deltaX, t1, t2, t3, t4, rect, paint,
        gradient = this._route$_decoration.edgeGradient;
      if (gradient == null)
        return;
      textDirection = configuration.textDirection;
      switch (textDirection) {
        case C.TextDirection_0:
          deltaX = configuration.size._dx;
          break;
        case C.TextDirection_1:
          t1 = configuration.size._dx;
          if (typeof t1 !== "number")
            return t1.$negate();
          deltaX = -t1;
          break;
        default:
          deltaX = null;
      }
      t1 = configuration.size;
      t2 = offset._dx;
      t3 = offset._dy;
      t4 = t1._dx;
      t1 = t1._dy;
      if (typeof t2 !== "number")
        return t2.$add();
      if (typeof t4 !== "number")
        return H.iae(t4);
      if (typeof t3 !== "number")
        return t3.$add();
      if (typeof t1 !== "number")
        return H.iae(t1);
      rect = new Q.Rect(t2, t3, t2 + t4, t3 + t1).translate$2(0, deltaX, 0);
      paint = new Q.Paint(new Q.PaintData());
      paint.set$shader(Q._GradientLinear$(gradient.begin.resolve$1(textDirection).withinRect$1(rect), gradient.end.resolve$1(textDirection).withinRect$1(rect), gradient.colors, gradient._impliedStops$0(), gradient.tileMode));
      canvas.drawRect$2(rect, paint);
    }
  };
  K.CupertinoTheme.prototype = {
    updateShouldNotify$1: function(oldWidget) {
      return this.data !== H.interceptedTypeCheck(oldWidget, "$isCupertinoTheme").data;
    }
  };
  K.CupertinoThemeData.prototype = {};
  U.FlutterErrorDetails.prototype = {
    exceptionAsString$0: function() {
      var message, fullMessage, t2, position,
        longMessage = this.exception,
        t1 = J.getInterceptor$(longMessage);
      if (!!t1.$isAssertionError) {
        message = H.stringTypeCheck(longMessage.get$message(longMessage));
        fullMessage = longMessage.toString$0(0);
        if (typeof message === "string" && message !== fullMessage) {
          t1 = fullMessage.length;
          t2 = message.length;
          if (t1 > t2) {
            position = J.getInterceptor$s(fullMessage).lastIndexOf$1(fullMessage, message);
            longMessage = position === t1 - t2 && position > 2 && C.JSString_methods.substring$2(fullMessage, position - 2, position) === ": " ? J.trimRight$0$s(message) + "\n" + C.JSString_methods.substring$2(fullMessage, 0, position - 2) : null;
          } else
            longMessage = null;
        } else
          longMessage = null;
        if (longMessage == null)
          longMessage = fullMessage;
      } else if (!(typeof longMessage === "string"))
        longMessage = !!t1.$isError || !!t1.$isException ? t1.toString$0(longMessage) : "  " + H.S(t1.toString$0(longMessage));
      longMessage = J.trimRight$0$s(longMessage);
      return longMessage.length === 0 ? "  <no message available>" : longMessage;
    },
    toString$0: function(_) {
      var t3, stackLines, _this = this,
        _s11_ = "Exception \n",
        buffer = new P.StringBuffer(""),
        t1 = _this.library,
        t2 = t1 === "";
      if (t2) {
        t3 = _this.context;
        t3 = t3 != null && t3 !== "";
      } else
        t3 = true;
      if (t3) {
        if (!t2) {
          t1 = buffer._contents = "Error caught by " + t1;
          t2 = _this.context;
          if (t2 != null && t2 !== "") {
            t1 += ", ";
            buffer._contents = t1;
          }
        } else {
          buffer._contents = _s11_;
          t1 = _s11_;
        }
        t2 = _this.context;
        t1 = buffer._contents = (t2 != null && t2 !== "" ? buffer._contents = t1 + ("thrown " + H.S(t2)) : t1) + ".\n";
      } else
        t1 = buffer._contents = "An error was caught.";
      buffer._contents = t1 + (_this.exceptionAsString$0() + "\n");
      t1 = _this.informationCollector;
      if (t1 != null)
        t1.call$1(buffer);
      t1 = _this.stack;
      if (t1 != null) {
        stackLines = U.FlutterError_defaultStackFilter(H.setRuntimeTypeInfo(C.JSString_methods.trimRight$0(t1.toString$0(0)).split("\n"), [P.String]));
        buffer._contents = P.StringBuffer__writeAll(buffer._contents, stackLines, "\n");
      }
      t1 = buffer._contents;
      return C.JSString_methods.trimRight$0(t1.charCodeAt(0) == 0 ? t1 : t1);
    }
  };
  U.FlutterError.prototype = {
    get$message: function(_) {
      return H.stringTypeCheck(this.message);
    },
    toString$0: function(_) {
      return H.stringTypeCheck(this.message);
    }
  };
  N.BindingBase.prototype = {
    BindingBase$0: function() {
      var t1, t2, _this = this;
      P.Timeline_startSync("Framework initialization", null, null);
      _this.super$_WidgetsFlutterBinding_BindingBase_GestureBinding_ServicesBinding_SchedulerBinding_PaintingBinding_SemanticsBinding_RendererBinding$initInstances();
      $.WidgetsBinding__instance = _this;
      _this.WidgetsBinding__buildOwner.set$onBuildScheduled(_this.get$_handleBuildScheduled());
      t1 = $.$get$window();
      t1.toString;
      t2 = {func: 1, ret: -1};
      t1.set$_onLocaleChanged(H.functionTypeCheck(_this.get$handleLocaleChanged(), t2));
      t1.set$_onAccessibilityFeaturesChanged(H.functionTypeCheck(_this.get$handleAccessibilityFeaturesChanged(), t2));
      C.MethodChannel_89P.setMethodCallHandler$1(_this.get$_handleNavigationInvocation());
      C.BasicMessageChannel_Qma.setMessageHandler$1(_this.get$_handleSystemMessage());
      _this.initServiceExtensions$0();
      t2 = P.String;
      P.postEvent("Flutter.FrameworkInitialization", P.LinkedHashMap_LinkedHashMap$_empty(t2, t2));
      P.Timeline_finishSync();
    },
    initInstances$0: function() {
    },
    initServiceExtensions$0: function() {
    },
    lockEvents$1: function(callback) {
      var future;
      H.functionTypeCheck(callback, {func: 1, ret: [P.Future, -1]});
      P.Timeline_startSync("Lock events", null, null);
      ++this._lockCount;
      future = callback.call$0();
      future.whenComplete$1(new N.BindingBase_lockEvents_closure(this));
      return future;
    },
    unlocked$0: function() {
    },
    registerSignalServiceExtension$2$callback$name: function(callback, $name) {
      this.registerServiceExtension$2$callback$name(new N.BindingBase_registerSignalServiceExtension_closure(H.functionTypeCheck(callback, {func: 1, ret: [P.Future, -1]})), $name);
    },
    registerNumericServiceExtension$3$getter$name$setter: function(getter, $name, setter) {
      H.functionTypeCheck(getter, {func: 1, ret: [P.Future, P.double]});
      this.registerServiceExtension$2$callback$name(new N.BindingBase_registerNumericServiceExtension_closure(this, $name, H.functionTypeCheck(setter, {func: 1, ret: [P.Future, -1], args: [P.double]}), getter), $name);
    },
    _postExtensionStateChangedEvent$2: function($name, value) {
      var t1 = P.String;
      P.postEvent("Flutter.ServiceExtensionStateChanged", H.assertSubtype(P.LinkedHashMap_LinkedHashMap$_literal(["extension", "ext.flutter." + $name, "value", value], t1, null), "$isMap", [t1, null], "$asMap"));
    },
    registerServiceExtension$2$callback$name: function(callback, $name) {
      var methodName;
      H.functionTypeCheck(callback, {func: 1, ret: [P.Future, [P.Map, P.String,,]], args: [[P.Map, P.String, P.String]]});
      methodName = "ext.flutter." + $name;
      P.registerExtension(methodName, new N.BindingBase_registerServiceExtension_closure(methodName, callback));
    },
    toString$0: function(_) {
      return "<" + new H.TypeImpl(H.getRti(this)).toString$0(0) + ">";
    }
  };
  N.BindingBase_lockEvents_closure.prototype = {
    call$0: function() {
      var t1 = this.$this;
      if (--t1._lockCount <= 0) {
        P.Timeline_finishSync();
        t1.super$_WidgetsFlutterBinding_BindingBase_GestureBinding$unlocked();
        if (t1.SchedulerBinding__taskQueue._priority_queue$_length !== 0)
          t1._ensureEventLoopCallback$0();
      }
    },
    $signature: 0
  };
  N.BindingBase_registerSignalServiceExtension_closure.prototype = {
    call$1: function(parameters) {
      var t1 = P.String;
      return this.$call$body$BindingBase_registerSignalServiceExtension_closure(H.assertSubtype(parameters, "$isMap", [t1, t1], "$asMap"));
    },
    $call$body$BindingBase_registerSignalServiceExtension_closure: function(parameters) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter([P.Map, P.String,,]),
        $async$returnValue, $async$self = this;
      var $async$call$1 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 3;
              return P._asyncAwait($async$self.callback.call$0(), $async$call$1);
            case 3:
              // returning from await.
              $async$returnValue = P.LinkedHashMap_LinkedHashMap$_empty(P.String, null);
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 32
  };
  N.BindingBase_registerNumericServiceExtension_closure.prototype = {
    call$1: function(parameters) {
      var t1 = P.String;
      return this.$call$body$BindingBase_registerNumericServiceExtension_closure(H.assertSubtype(parameters, "$isMap", [t1, t1], "$asMap"));
    },
    $call$body$BindingBase_registerNumericServiceExtension_closure: function(parameters) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter([P.Map, P.String,,]),
        $async$returnValue, $async$self = this, t1, t2, $async$temp1, $async$temp2, $async$temp3;
      var $async$call$1 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self.name;
              t2 = J.getInterceptor$x(parameters);
              $async$goto = H.boolConversionCheck(t2.containsKey$1(parameters, t1)) ? 3 : 4;
              break;
            case 3:
              // then
              $async$goto = 5;
              return P._asyncAwait($async$self.setter.call$1(P.double_parse(t2.$index(parameters, t1))), $async$call$1);
            case 5:
              // returning from await.
              $async$temp1 = $async$self.$this;
              $async$temp2 = t1;
              $async$temp3 = J;
              $async$goto = 6;
              return P._asyncAwait($async$self.getter.call$0(), $async$call$1);
            case 6:
              // returning from await.
              $async$temp1._postExtensionStateChangedEvent$2($async$temp2, $async$temp3.toString$0$($async$result));
            case 4:
              // join
              $async$temp1 = P;
              $async$temp2 = t1;
              $async$temp3 = J;
              $async$goto = 7;
              return P._asyncAwait($async$self.getter.call$0(), $async$call$1);
            case 7:
              // returning from await.
              $async$returnValue = $async$temp1.LinkedHashMap_LinkedHashMap$_literal([$async$temp2, $async$temp3.toString$0$($async$result)], P.String, null);
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 32
  };
  N.BindingBase_registerServiceExtension_closure.prototype = {
    call$2: function(method, parameters) {
      var t1;
      H.stringTypeCheck(method);
      t1 = P.String;
      H.assertSubtype(parameters, "$isMap", [t1, t1], "$asMap");
      return this.$call$body$BindingBase_registerServiceExtension_closure(method, parameters);
    },
    "call*": "call$2",
    $requiredArgCount: 2,
    $call$body$BindingBase_registerServiceExtension_closure: function(method, parameters) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(P.ServiceExtensionResponse),
        $async$returnValue, $async$handler = 2, $async$currentError, $async$next = [], $async$self = this, caughtException, caughtStack, result, exception, stack, exception0, t1, t2, $async$exception0;
      var $async$call$2 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 3;
              return P._asyncAwait(E.debugInstrumentAction("Wait for outer event loop", new N.BindingBase_registerServiceExtension__closure(), -1), $async$call$2);
            case 3:
              // returning from await.
              caughtException = null;
              caughtStack = null;
              result = null;
              $async$handler = 5;
              $async$goto = 8;
              return P._asyncAwait($async$self.callback.call$1(parameters), $async$call$2);
            case 8:
              // returning from await.
              result = $async$result;
              $async$handler = 2;
              // goto after finally
              $async$goto = 7;
              break;
            case 5:
              // catch
              $async$handler = 4;
              $async$exception0 = $async$currentError;
              exception = H.unwrapException($async$exception0);
              stack = H.getTraceFromException($async$exception0);
              caughtException = exception;
              caughtStack = stack;
              // goto after finally
              $async$goto = 7;
              break;
            case 4:
              // uncaught
              // goto rethrow
              $async$goto = 2;
              break;
            case 7:
              // after finally
              if (caughtException == null) {
                J.$indexSet$ax(result, "type", "_extensionType");
                J.$indexSet$ax(result, "method", method);
                t1 = C.C_JsonCodec.encode$1(result);
                $async$returnValue = new P.ServiceExtensionResponse(t1, null, null);
                // goto return
                $async$goto = 1;
                break;
              } else {
                t1 = caughtException;
                t2 = caughtStack;
                U.assertions_FlutterError_dumpErrorToConsole$closure().call$1(U.FlutterErrorDetails$('during a service extension callback for "' + H.S(method) + '"', t1, null, "Flutter framework", false, t2));
                t1 = P.String;
                t1 = C.C_JsonCodec.encode$1(P.LinkedHashMap_LinkedHashMap$_literal(["exception", J.toString$0$(caughtException), "stack", J.toString$0$(caughtStack), "method", method], t1, t1));
                P.ServiceExtensionResponse__validateErrorCode(-32000);
                $async$returnValue = new P.ServiceExtensionResponse(null, -32000, t1);
                // goto return
                $async$goto = 1;
                break;
              }
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
            case 2:
              // rethrow
              return P._asyncRethrow($async$currentError, $async$completer);
          }
      });
      return P._asyncStartSync($async$call$2, $async$completer);
    },
    $signature: 52
  };
  N.BindingBase_registerServiceExtension__closure.prototype = {
    call$0: function() {
      return P.Future_Future$delayed(C.Duration_0, -1);
    },
    $signature: 16
  };
  B.Listenable.prototype = {};
  B.ChangeNotifier.prototype = {
    addListener$1: function(_, listener) {
      var t1;
      H.functionTypeCheck(listener, {func: 1, ret: -1});
      t1 = this._listeners;
      t1.toString;
      H.assertSubtypeOfRuntimeType(listener, H.getTypeArgumentByIndex(t1, 0));
      t1._isDirty = true;
      C.JSArray_methods.add$1(t1._list, listener);
    },
    removeListener$1: function(_, listener) {
      var t1;
      H.functionTypeCheck(listener, {func: 1, ret: -1});
      t1 = this._listeners;
      t1.toString;
      H.assertSubtypeOfRuntimeType(listener, H.getTypeArgumentByIndex(t1, 0));
      t1._isDirty = true;
      C.JSArray_methods.remove$1(t1._list, listener);
    },
    dispose$0: function() {
      this.set$_listeners(null);
    },
    notifyListeners$0: function() {
      var listener, exception, stack, localListeners, _i, exception0, t2, _this = this,
        t1 = _this._listeners;
      if (t1 != null) {
        localListeners = P.List_List$from(t1, true, {func: 1, ret: -1});
        for (t1 = localListeners.length, _i = 0; _i < localListeners.length; localListeners.length === t1 || (0, H.throwConcurrentModificationError)(localListeners), ++_i) {
          listener = localListeners[_i];
          try {
            if (_this._listeners.contains$1(0, listener))
              listener.call$0();
          } catch (exception0) {
            exception = H.unwrapException(exception0);
            stack = H.getTraceFromException(exception0);
            t2 = "while dispatching notifications for " + new H.TypeImpl(H.getRti(_this)).toString$0(0);
            U.assertions_FlutterError_dumpErrorToConsole$closure().call$1(new U.FlutterErrorDetails(exception, stack, "foundation library", t2, new B.ChangeNotifier_notifyListeners_closure(_this), false));
          }
        }
      }
    },
    set$_listeners: function(_listeners) {
      this._listeners = H.assertSubtype(_listeners, "$isObserverList", [{func: 1, ret: -1}], "$asObserverList");
    }
  };
  B.ChangeNotifier_notifyListeners_closure.prototype = {
    call$1: function(information) {
      var t1 = this.$this;
      information._contents += "The " + new H.TypeImpl(H.getRti(t1)).toString$0(0) + " sending notification was:\n";
      information._contents += "  " + t1.toString$0(0);
    },
    $signature: 5
  };
  B._MergingListenable.prototype = {
    _MergingListenable$1: function(_children) {
      var t1, t2, t3, _i, child;
      for (t1 = this._change_notifier$_children, t2 = t1.length, t3 = this.get$notifyListeners(), _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
        child = t1[_i];
        if (child != null)
          child.addListener$1(0, t3);
      }
    },
    toString$0: function(_) {
      return "Listenable.merge([" + C.JSArray_methods.join$1(this._change_notifier$_children, ", ") + "])";
    }
  };
  B.ValueNotifier.prototype = {
    set$value: function(_, newValue) {
      var _this = this;
      H.assertSubtypeOfRuntimeType(newValue, H.getTypeArgumentByIndex(_this, 0));
      if (_this._change_notifier$_value === newValue)
        return;
      _this.set$_change_notifier$_value(newValue);
      _this.notifyListeners$0();
    },
    toString$0: function(_) {
      var _this = this;
      return _this.get$runtimeType(_this).toString$0(0) + "#" + Y.shortHash(_this) + "(" + _this._change_notifier$_value + ")";
    },
    set$_change_notifier$_value: function(_value) {
      this._change_notifier$_value = H.assertSubtypeOfRuntimeType(_value, H.getTypeArgumentByIndex(this, 0));
    }
  };
  Y.DiagnosticLevel.prototype = {
    toString$0: function(_) {
      return this._diagnostics$_name;
    }
  };
  Y.DiagnosticsTreeStyle.prototype = {
    toString$0: function(_) {
      return this._diagnostics$_name;
    }
  };
  Y.TextTreeConfiguration.prototype = {};
  Y._PrefixedStringBuilder.prototype = {
    write$1: function(_, s) {
      var t2, t3, lineTerminated, parts, i, _this = this,
        t1 = s.length;
      if (t1 === 0)
        return;
      if (s === "\n") {
        t1 = _this._buffer;
        t2 = t1._contents;
        if (t2.length === 0)
          t2 = t1._contents += C.JSString_methods.trimRight$0(_this.prefixLineOne);
        else if (_this._atLineStart) {
          t2 = t1._contents += C.JSString_methods.trimRight$0(_this.prefixOtherLines);
          _this._hasMultipleLines = true;
        }
        t1._contents = t2 + "\n";
        _this._atLineStart = true;
        return;
      }
      t2 = _this._buffer;
      t3 = t2._contents;
      if (t3.length === 0)
        t2._contents = t3 + _this.prefixLineOne;
      else if (_this._atLineStart) {
        t2._contents = t3 + _this.prefixOtherLines;
        _this._hasMultipleLines = true;
      }
      if (J.getInterceptor$s(s).endsWith$1(s, "\n")) {
        s = C.JSString_methods.substring$2(s, 0, t1 - 1);
        lineTerminated = true;
      } else
        lineTerminated = false;
      parts = s.split("\n");
      t1 = parts.length;
      if (0 >= t1)
        return H.ioore(parts, 0);
      t3 = t2._contents += H.S(parts[0]);
      for (i = 1; i < t1; ++i) {
        t3 += "\n";
        t2._contents = t3;
        t2._contents = t3 + _this.prefixOtherLines;
        t3 = t2._contents += H.S(parts[i]);
      }
      if (lineTerminated)
        t2._contents = t3 + "\n";
      _this._atLineStart = lineTerminated;
    },
    writeRaw$1: function(text) {
      if (text.length === 0)
        return;
      this._buffer._contents += text;
      this._atLineStart = C.JSString_methods.endsWith$1(text, "\n");
    },
    writeRawLine$1: function(line) {
      var t1, t2;
      if (line.length === 0)
        return;
      t1 = this._buffer;
      t2 = t1._contents += line;
      if (!C.JSString_methods.endsWith$1(line, "\n"))
        t1._contents = t2 + "\n";
      this._atLineStart = true;
    },
    toString$0: function(_) {
      var t1 = this._buffer._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    }
  };
  Y._NoDefaultValue.prototype = {};
  Y.DiagnosticsNode.prototype = {
    get$level: function(_) {
      return C.DiagnosticLevel_3;
    },
    get$emptyBodyDescription: function() {
      return;
    },
    toString$2$minLevel$parentConfiguration: function(_, minLevel, parentConfiguration) {
      var description, t1, _this = this;
      if (_this.get$style(_this) === C.DiagnosticsTreeStyle_5)
        return _this.toStringDeep$2$minLevel$parentConfiguration(minLevel, parentConfiguration);
      description = _this.toDescription$1$parentConfiguration(parentConfiguration);
      t1 = _this.name;
      if (t1 == null || t1.length === 0 || !_this.get$showName())
        return description;
      if (J.contains$1$asx(description, "\n")) {
        t1 = H.S(t1);
        t1 = t1 + (_this.showSeparator ? ":" : "") + "\n" + description;
      } else {
        t1 = H.S(t1);
        t1 = t1 + (_this.showSeparator ? ":" : "") + " " + description;
      }
      return t1;
    },
    toString$0: function($receiver) {
      return this.toString$2$minLevel$parentConfiguration($receiver, C.DiagnosticLevel_3, null);
    },
    toString$1$minLevel: function($receiver, minLevel) {
      return this.toString$2$minLevel$parentConfiguration($receiver, minLevel, null);
    },
    get$textTreeConfiguration: function() {
      switch (this.get$style(this)) {
        case C.DiagnosticsTreeStyle_2:
          return $.$get$denseTextConfiguration();
        case C.DiagnosticsTreeStyle_0:
          return $.$get$sparseTextConfiguration();
        case C.DiagnosticsTreeStyle_1:
          return $.$get$dashedTextConfiguration();
        case C.DiagnosticsTreeStyle_4:
          return $.$get$whitespaceTextConfiguration();
        case C.DiagnosticsTreeStyle_3:
          return $.$get$transitionTextConfiguration();
        case C.DiagnosticsTreeStyle_5:
          return $.$get$singleLineTextConfiguration();
      }
      return;
    },
    toStringDeep$4$minLevel$parentConfiguration$prefixLineOne$prefixOtherLines: function(minLevel, parentConfiguration, prefixLineOne, prefixOtherLines) {
      var children, config, builder, description, t1, t2, properties, t3, i, property, propertyStyle, message, lines, j, line, prefixChildren, prefix, child, childConfig, lastChildPrefixLineOne, nextChildStyle, childPrefixLineOne, _this = this;
      if (prefixOtherLines == null)
        prefixOtherLines = prefixLineOne;
      children = _this.getChildren$0();
      config = _this.get$textTreeConfiguration();
      if (prefixOtherLines.length === 0)
        prefixOtherLines += config.prefixOtherLinesRootNode;
      builder = new Y._PrefixedStringBuilder(prefixLineOne, prefixOtherLines, new P.StringBuffer(""));
      description = _this.toDescription$1$parentConfiguration(parentConfiguration);
      if (description == null || description.length === 0) {
        if (_this.get$showName() && _this.name != null)
          builder.write$1(0, _this.name);
      } else {
        t1 = _this.name;
        if (t1 != null && t1.length !== 0 && _this.get$showName()) {
          builder.write$1(0, t1);
          if (_this.showSeparator)
            builder.write$1(0, config.afterName);
          builder.write$1(0, config.isNameOnOwnLine || J.contains$1$asx(description, "\n") ? "\n" : " ");
          if (J.contains$1$asx(description, "\n") && _this.get$style(_this) === C.DiagnosticsTreeStyle_5)
            builder.prefixOtherLines += "  ";
        }
        t1 = builder.prefixOtherLines;
        builder.prefixOtherLines = t1 + (children.length === 0 ? config.propertyPrefixNoChildren : config.propertyPrefixIfChildren);
        builder.write$1(0, description);
      }
      t1 = _this.getProperties$0(0);
      t2 = H.getTypeArgumentByIndex(t1, 0);
      properties = P.List_List$from(new H.WhereIterable(t1, H.functionTypeCheck(new Y.DiagnosticsNode_toStringDeep_closure(minLevel), {func: 1, ret: P.bool, args: [t2]}), [t2]), true, t2);
      if (properties.length !== 0 || children.length !== 0 || _this.get$emptyBodyDescription() != null)
        builder.write$1(0, config.afterDescriptionIfBody);
      t1 = config.lineBreakProperties;
      if (t1)
        builder.write$1(0, config.lineBreak);
      if (properties.length !== 0)
        builder.write$1(0, config.beforeProperties);
      t2 = builder.prefixOtherLines;
      t3 = config.bodyIndent;
      builder.prefixOtherLines = t2 + t3;
      if (_this.get$emptyBodyDescription() != null && properties.length === 0 && children.length === 0 && prefixLineOne.length !== 0) {
        builder.write$1(0, _this.get$emptyBodyDescription());
        if (t1)
          builder.write$1(0, config.lineBreak);
      }
      for (i = 0; t2 = properties.length, i < t2; ++i) {
        property = properties[i];
        if (i > 0)
          builder.write$1(0, config.propertySeparator);
        if (property.get$style(property) !== C.DiagnosticsTreeStyle_5) {
          propertyStyle = property.get$textTreeConfiguration();
          t2 = builder.prefixOtherLines;
          builder.writeRaw$1(property.toStringDeep$4$minLevel$parentConfiguration$prefixLineOne$prefixOtherLines(minLevel, config, t2 + propertyStyle.prefixLineOne, t2 + propertyStyle.linkCharacter + propertyStyle.prefixOtherLines));
          continue;
        }
        message = property.toString$2$minLevel$parentConfiguration(0, minLevel, config);
        if (!t1 || message.length < 65)
          builder.write$1(0, message);
        else {
          lines = message.split("\n");
          for (j = 0; j < lines.length; ++j) {
            line = lines[j];
            if (j > 0)
              builder.write$1(0, config.lineBreak);
            builder.write$1(0, D.debugWordWrap(line, 65, "  ").join$1(0, "\n"));
          }
        }
        if (t1)
          builder.write$1(0, config.lineBreak);
      }
      if (t2 !== 0)
        builder.write$1(0, config.afterProperties);
      if (!t1)
        builder.write$1(0, config.lineBreak);
      prefixChildren = prefixOtherLines + t3;
      if (children.length === 0 && config.addBlankLineIfNoChildren && builder._hasMultipleLines) {
        prefix = C.JSString_methods.trimRight$0(prefixChildren);
        if (prefix.length !== 0)
          builder.writeRaw$1(prefix + config.lineBreak);
      }
      if (children.length !== 0 && config.showChildren) {
        if (config.isBlankLineBetweenPropertiesAndChildren && properties.length !== 0 && C.JSArray_methods.get$first(children).get$textTreeConfiguration().isBlankLineBetweenPropertiesAndChildren)
          builder.write$1(0, config.lineBreak);
        for (i = 0; i < children.length; ++i) {
          child = children[i];
          childConfig = child != null && child.get$style(child) !== C.DiagnosticsTreeStyle_5 ? child.get$textTreeConfiguration() : config;
          t1 = children.length;
          if (i === t1 - 1) {
            lastChildPrefixLineOne = prefixChildren + childConfig.prefixLastChildLineOne;
            t1 = childConfig.childLinkSpace;
            builder.writeRawLine$1(child.toStringDeep$4$minLevel$parentConfiguration$prefixLineOne$prefixOtherLines(minLevel, config, lastChildPrefixLineOne, prefixChildren + t1 + childConfig.prefixOtherLines));
            t2 = childConfig.footer;
            if (t2.length !== 0)
              builder.writeRaw$1(prefixChildren + t1 + t2);
          } else {
            t2 = i + 1;
            if (t2 >= t1)
              return H.ioore(children, t2);
            t2 = H.interceptedTypeCheck(children[t2], "$isDiagnosticsNode");
            nextChildStyle = t2 != null && t2.get$style(t2) !== C.DiagnosticsTreeStyle_5 ? t2.get$textTreeConfiguration() : config;
            childPrefixLineOne = prefixChildren + childConfig.prefixLineOne;
            t1 = nextChildStyle.linkCharacter;
            builder.writeRawLine$1(child.toStringDeep$4$minLevel$parentConfiguration$prefixLineOne$prefixOtherLines(minLevel, config, childPrefixLineOne, prefixChildren + t1 + childConfig.prefixOtherLines));
            t2 = childConfig.footer;
            if (t2.length !== 0)
              builder.writeRaw$1(prefixChildren + t1 + t2);
          }
        }
      }
      t1 = builder._buffer._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    toStringDeep$2$minLevel$parentConfiguration: function(minLevel, parentConfiguration) {
      return this.toStringDeep$4$minLevel$parentConfiguration$prefixLineOne$prefixOtherLines(minLevel, parentConfiguration, "", null);
    },
    toStringDeep$3$minLevel$prefixLineOne$prefixOtherLines: function(minLevel, prefixLineOne, prefixOtherLines) {
      return this.toStringDeep$4$minLevel$parentConfiguration$prefixLineOne$prefixOtherLines(minLevel, null, prefixLineOne, prefixOtherLines);
    },
    get$showName: function() {
      return this.showName;
    },
    get$style: function(receiver) {
      return this.style;
    }
  };
  Y.DiagnosticsNode_toStringDeep_closure.prototype = {
    call$1: function(n) {
      H.interceptedTypeCheck(n, "$isDiagnosticsNode");
      return n.get$level(n).index >= this.minLevel.index;
    },
    $signature: 54
  };
  Y.DiagnosticsProperty.prototype = {
    valueToString$1$parentConfiguration: function(parentConfiguration) {
      var v, t1, desc;
      this._maybeCacheValue$0();
      v = this._diagnostics$_value;
      t1 = J.getInterceptor$(v);
      if (!!t1.$isFunction) {
        desc = t1.toString$0(v);
        return C.JSString_methods.contains$1(desc, "Closure:") && C.JSString_methods.contains$1(desc, "from:") ? C.JSString_methods.substring$2(desc, 0, C.JSString_methods.indexOf$1(desc, "from: ") - 1) : desc;
      }
      return !!t1.$isDiagnosticableTree ? v.toStringShort$0() : t1.toString$0(v);
    },
    toDescription$1$parentConfiguration: function(parentConfiguration) {
      var t2, result, _this = this,
        t1 = _this._description;
      if (t1 != null)
        return _this._addTooltip$1(t1);
      _this._maybeCacheValue$0();
      if (_this._diagnostics$_exception != null) {
        _this._maybeCacheValue$0();
        return "EXCEPTION (" + J.get$runtimeType$(_this._diagnostics$_exception).toString$0(0) + ")";
      }
      t1 = _this.ifNull;
      if (t1 != null) {
        _this._maybeCacheValue$0();
        t2 = _this._diagnostics$_value == null;
      } else
        t2 = false;
      if (t2)
        return _this._addTooltip$1(t1);
      result = _this.valueToString$1$parentConfiguration(parentConfiguration);
      return _this._addTooltip$1(result.length === 0 && _this.ifEmpty != null ? _this.ifEmpty : result);
    },
    _addTooltip$1: function(text) {
      var t1 = this.tooltip;
      return t1 == null ? text : H.S(text) + " (" + t1 + ")";
    },
    _maybeCacheValue$0: function() {
      return;
    },
    get$level: function(_) {
      var t2, _this = this,
        t1 = _this._defaultLevel;
      if (t1 === C.DiagnosticLevel_0)
        return t1;
      _this._maybeCacheValue$0();
      if (_this._diagnostics$_exception != null)
        return C.DiagnosticLevel_5;
      _this._maybeCacheValue$0();
      if (_this._diagnostics$_value == null && _this.missingIfNull)
        return C.DiagnosticLevel_4;
      t2 = _this.defaultValue;
      if (!J.$eq$(t2, C.C__NoDefaultValue)) {
        _this._maybeCacheValue$0();
        t2 = J.$eq$(_this._diagnostics$_value, t2);
      } else
        t2 = false;
      if (t2)
        return C.DiagnosticLevel_1;
      return t1;
    },
    getProperties$0: function(_) {
      return H.setRuntimeTypeInfo([], [Y.DiagnosticsNode]);
    },
    getChildren$0: function() {
      return H.setRuntimeTypeInfo([], [Y.DiagnosticsNode]);
    }
  };
  Y.DiagnosticableNode.prototype = {
    get$_builder: function() {
      var t1 = this._cachedBuilder;
      if (t1 == null)
        t1 = this._cachedBuilder = new Y.DiagnosticPropertiesBuilder(H.setRuntimeTypeInfo([], [Y.DiagnosticsNode]), C.DiagnosticsTreeStyle_0);
      return t1;
    },
    get$style: function(_) {
      var t1 = this.style;
      return t1 == null ? this.get$_builder().defaultDiagnosticsTreeStyle : t1;
    },
    get$emptyBodyDescription: function() {
      return this.get$_builder().emptyBodyDescription;
    },
    getProperties$0: function(_) {
      return this.get$_builder().properties;
    },
    getChildren$0: function() {
      return C.List_empty;
    },
    toDescription$1$parentConfiguration: function(parentConfiguration) {
      return this.value.toStringShort$0();
    }
  };
  Y._DiagnosticableTreeNode.prototype = {
    getChildren$0: function() {
      var t1 = this.value.debugDescribeChildren$0();
      return t1;
    },
    $asDiagnosticableNode: function() {
      return [Y.DiagnosticableTree];
    }
  };
  Y.DiagnosticPropertiesBuilder.prototype = {
    add$1: function(_, property) {
      C.JSArray_methods.add$1(this.properties, H.interceptedTypeCheck(property, "$isDiagnosticsNode"));
    }
  };
  Y.Diagnosticable.prototype = {
    toStringShort$0: function() {
      return this.get$runtimeType(this).toString$0(0) + "#" + Y.shortHash(this);
    },
    toString$0: function(_) {
      return this.toDiagnosticsNode$1$style(C.DiagnosticsTreeStyle_5).toString$1$minLevel(0, C.DiagnosticLevel_2);
    },
    toDiagnosticsNode$2$name$style: function($name, style) {
      return new Y.DiagnosticableNode(this, $name, true, true, style, [Y.Diagnosticable]);
    },
    toDiagnosticsNode$1$style: function(style) {
      return this.toDiagnosticsNode$2$name$style(null, style);
    }
  };
  Y.DiagnosticableTree.prototype = {
    toStringShort$0: function() {
      return this.get$runtimeType(this).toString$0(0) + "#" + Y.shortHash(this);
    },
    toDiagnosticsNode$2$name$style: function($name, style) {
      return new Y._DiagnosticableTreeNode(this, $name, true, true, style);
    },
    toDiagnosticsNode$1$style: function(style) {
      return this.toDiagnosticsNode$2$name$style(null, style);
    },
    debugDescribeChildren$0: function() {
      return C.List_empty;
    }
  };
  Y.DiagnosticableTreeMixin.prototype = {
    toString$0: function(_) {
      return this.toDiagnosticsNode$1$style(C.DiagnosticsTreeStyle_5).toString$1$minLevel(0, C.DiagnosticLevel_2);
    },
    toStringShallow$2$joiner$minLevel: function(joiner, minLevel) {
      var t1 = this.toStringShort$0() + joiner,
        t2 = H.setRuntimeTypeInfo([], [Y.DiagnosticsNode]),
        t3 = H.getTypeArgumentByIndex(t2, 0);
      t3 = t1 + new H.WhereIterable(t2, H.functionTypeCheck(new Y.DiagnosticableTreeMixin_toStringShallow_closure(minLevel), {func: 1, ret: P.bool, args: [t3]}), [t3]).join$1(0, joiner);
      return t3.charCodeAt(0) == 0 ? t3 : t3;
    },
    toStringDeep$3$minLevel$prefixLineOne$prefixOtherLines: function(minLevel, prefixLineOne, prefixOtherLines) {
      return this.toDiagnosticsNode$0().toStringDeep$3$minLevel$prefixLineOne$prefixOtherLines(minLevel, prefixLineOne, prefixOtherLines);
    },
    toStringShort$0: function() {
      return this.get$runtimeType(this).toString$0(0) + "#" + Y.shortHash(this);
    },
    toDiagnosticsNode$2$name$style: function($name, style) {
      return new Y._DiagnosticableTreeNode(this, $name, true, true, style);
    },
    toDiagnosticsNode$1$style: function(style) {
      return this.toDiagnosticsNode$2$name$style(null, style);
    },
    toDiagnosticsNode$0: function() {
      return this.toDiagnosticsNode$2$name$style(null, null);
    },
    debugDescribeChildren$0: function() {
      return C.List_empty;
    }
  };
  Y.DiagnosticableTreeMixin_toStringShallow_closure.prototype = {
    call$1: function(n) {
      H.interceptedTypeCheck(n, "$isDiagnosticsNode");
      return n.get$level(n).index >= this.minLevel.index;
    },
    $signature: 54
  };
  D.Key.prototype = {};
  D.LocalKey.prototype = {};
  D.ValueKey.prototype = {
    $eq: function(_, other) {
      if (other == null)
        return false;
      if (!J.get$runtimeType$(other).$eq(0, new H.TypeImpl(H.getRti(this))))
        return false;
      return J.$eq$(this.value, H.assertSubtype(other, "$isValueKey", this.$ti, "$asValueKey").value);
    },
    get$hashCode: function(_) {
      return Q.hashValues(new H.TypeImpl(H.getRti(this)), this.value, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd);
    },
    toString$0: function(_) {
      var t1 = H.getTypeArgumentByIndex(this, 0),
        t2 = this.value,
        valueString = new H.TypeImpl(t1).$eq(0, C.Type_String_k8F) ? "<'" + H.S(t2) + "'>" : "<" + H.S(t2) + ">";
      if (new H.TypeImpl(H.getRti(this)).$eq(0, new H.TypeImpl([D.ValueKey, t1])))
        return "[" + valueString + "]";
      return "[" + new H.TypeImpl(t1).toString$0(0) + " " + valueString + "]";
    }
  };
  D._TypeLiteral.prototype = {};
  F.LicenseEntry.prototype = {};
  F.LicenseEntryWithLineBreaks.prototype = {};
  B.AbstractNode.prototype = {
    redepthChild$1: function(child) {
      var t1, t2;
      H.interceptedTypeCheck(child, "$isAbstractNode");
      t1 = child._node$_depth;
      t2 = this._node$_depth;
      if (t1 <= t2) {
        child._node$_depth = t2 + 1;
        child.redepthChildren$0();
      }
    },
    redepthChildren$0: function() {
    },
    get$owner: function() {
      return this._node$_owner;
    },
    attach$1: function(owner) {
      this._node$_owner = owner;
    },
    detach$0: function(_) {
      this._node$_owner = null;
    },
    get$parent: function(_) {
      return this._node$_parent;
    },
    adoptChild$1: function(child) {
      var t1;
      child._node$_parent = this;
      t1 = this._node$_owner;
      if (t1 != null)
        child.attach$1(t1);
      this.redepthChild$1(child);
    },
    dropChild$1: function(child) {
      child._node$_parent = null;
      if (this._node$_owner != null)
        child.detach$0(0);
    }
  };
  R.ObserverList.prototype = {
    add$1: function(_, item) {
      H.assertSubtypeOfRuntimeType(item, H.getTypeArgumentByIndex(this, 0));
      this._isDirty = true;
      C.JSArray_methods.add$1(this._list, item);
    },
    contains$1: function(_, element) {
      var t2, _this = this,
        t1 = _this._list;
      if (t1.length < 15)
        return C.JSArray_methods.contains$1(t1, element);
      if (_this._isDirty) {
        t2 = _this._observer_list$_set;
        if (t2 == null)
          _this.set$_observer_list$_set(P.HashSet_HashSet$from(t1, H.getTypeArgumentByIndex(_this, 0)));
        else {
          t2.clear$0(0);
          _this._observer_list$_set.addAll$1(0, t1);
        }
        _this._isDirty = false;
      }
      return _this._observer_list$_set.contains$1(0, element);
    },
    get$iterator: function(_) {
      var t1 = this._list;
      return new J.ArrayIterator(t1, t1.length, [H.getTypeArgumentByIndex(t1, 0)]);
    },
    get$isEmpty: function(_) {
      return this._list.length === 0;
    },
    get$isNotEmpty: function(_) {
      return this._list.length !== 0;
    },
    set$_observer_list$_set: function(_set) {
      this._observer_list$_set = H.assertSubtype(_set, "$isHashSet", this.$ti, "$asHashSet");
    }
  };
  T.TargetPlatform.prototype = {
    toString$0: function(_) {
      return this._platform$_name;
    }
  };
  D.debugPrintThrottled_closure.prototype = {
    call$1: function(line) {
      return D.debugWordWrap(H.stringTypeCheck(line), this.wrapWidth, "");
    },
    $signature: 75
  };
  D._WordWrapParseMode.prototype = {
    toString$0: function(_) {
      return this._print$_name;
    }
  };
  G.WriteBuffer.prototype = {
    _alignTo$1: function(alignment) {
      var t1, i, t2,
        mod = C.JSInt_methods.$mod(this._serialization$_buffer._typed_buffers$_length, alignment);
      if (mod !== 0)
        for (t1 = alignment - mod, i = 0; i < t1; ++i) {
          t2 = this._serialization$_buffer;
          t2.toString;
          t2._typed_buffers$_add$1(0, H.assertSubtypeOfRuntimeType(0, H.getRuntimeTypeArgument(t2, "_TypedDataBuffer", 0)));
        }
    },
    done$0: function() {
      var result,
        t1 = this._serialization$_buffer,
        t2 = t1._typed_buffers$_buffer,
        t3 = t2.buffer;
      t1 = t1._typed_buffers$_length;
      t2 = t2.BYTES_PER_ELEMENT;
      if (typeof t2 !== "number")
        return H.iae(t2);
      t3.toString;
      result = H.NativeByteData_NativeByteData$view(t3, 0, t1 * t2);
      this._serialization$_buffer = null;
      return result;
    }
  };
  G.ReadBuffer.prototype = {
    getUint8$0: function(_) {
      return this.data.getUint8(this._serialization$_position++);
    },
    getInt64$0: function(_) {
      C.NativeByteData_methods.getInt64$2(this.data, this._serialization$_position, $.$get$Endian_host());
    },
    getUint8List$1: function($length) {
      var t3, list, _this = this,
        t1 = _this.data,
        t2 = t1.buffer;
      t1 = t1.byteOffset;
      t3 = _this._serialization$_position;
      if (typeof t1 !== "number")
        return t1.$add();
      t2.toString;
      list = H.NativeUint8List_NativeUint8List$view(t2, t1 + t3, $length);
      t3 = _this._serialization$_position;
      if (typeof $length !== "number")
        return H.iae($length);
      _this._serialization$_position = t3 + $length;
      return list;
    },
    getInt64List$1: function($length) {
      var t1, t2, t3;
      this._alignTo$1(8);
      t1 = this.data;
      t2 = t1.buffer;
      t1 = t1.byteOffset;
      t3 = this._serialization$_position;
      if (typeof t1 !== "number")
        return t1.$add();
      (t2 && C.NativeByteBuffer_methods).asInt64List$2(t2, t1 + t3, $length);
    },
    _alignTo$1: function(alignment) {
      var t1 = this._serialization$_position,
        mod = C.JSInt_methods.$mod(t1, alignment);
      if (mod !== 0)
        this._serialization$_position = t1 + (alignment - mod);
    }
  };
  O.SynchronousFuture.prototype = {
    then$1$2$onError: function(f, onError, $E) {
      var result = H.functionTypeCheck(f, {func: 1, args: [H.getTypeArgumentByIndex(this, 0)]}).call$1(this._synchronous_future$_value);
      if (H.checkSubtype(result, "$isFuture", [$E], "$asFuture"))
        return result;
      return new O.SynchronousFuture(H.assertSubtypeOfRuntimeType(result, $E), [$E]);
    },
    then$1$1: function(f, $E) {
      return this.then$1$2$onError(f, null, $E);
    },
    whenComplete$1: function(action) {
      var result, e, stack, t1, exception, _this = this;
      H.functionTypeCheck(action, {func: 1});
      try {
        result = action.call$0();
        if (!!J.getInterceptor$(result).$isFuture) {
          t1 = result.then$1$1(new O.SynchronousFuture_whenComplete_closure(_this), H.getTypeArgumentByIndex(_this, 0));
          return t1;
        }
        return _this;
      } catch (exception) {
        e = H.unwrapException(exception);
        stack = H.getTraceFromException(exception);
        t1 = P.Future_Future$error(e, stack, H.getTypeArgumentByIndex(_this, 0));
        return t1;
      }
    },
    $isFuture: 1
  };
  O.SynchronousFuture_whenComplete_closure.prototype = {
    call$1: function(value) {
      return this.$this._synchronous_future$_value;
    },
    $signature: function() {
      return {func: 1, ret: H.getTypeArgumentByIndex(this.$this, 0), args: [,]};
    }
  };
  D.GestureDisposition.prototype = {
    toString$0: function(_) {
      return this._arena$_name;
    }
  };
  D.GestureArenaMember.prototype = {};
  D.GestureArenaEntry.prototype = {};
  D._GestureArena.prototype = {
    add$1: function(_, member) {
      C.JSArray_methods.add$1(this.members, member);
    },
    toString$0: function(_) {
      var t1 = this.super$Object$toString(0);
      return t1;
    }
  };
  D.GestureArenaManager.prototype = {
    add$2: function(_, pointer, member) {
      C.JSArray_methods.add$1(this._arenas.putIfAbsent$2(0, pointer, new D.GestureArenaManager_add_closure(this, pointer)).members, member);
      return new D.GestureArenaEntry(this, pointer, member);
    },
    close$1: function(_, pointer) {
      var state = this._arenas.$index(0, pointer);
      if (state == null)
        return;
      state.isOpen = false;
      this._tryToResolveArena$2(pointer, state);
    },
    sweep$1: function(pointer) {
      var i,
        t1 = this._arenas,
        state = t1.$index(0, pointer);
      if (state == null)
        return;
      if (state.isHeld) {
        state.hasPendingSweep = true;
        return;
      }
      t1.remove$1(0, pointer);
      t1 = state.members;
      if (t1.length !== 0) {
        C.JSArray_methods.get$first(t1).acceptGesture$1(pointer);
        for (i = 1; i < t1.length; ++i)
          t1[i].rejectGesture$1(pointer);
      }
    },
    hold$1: function(pointer) {
      var state = this._arenas.$index(0, pointer);
      if (state == null)
        return;
      state.isHeld = true;
    },
    release$1: function(_, pointer) {
      var state = this._arenas.$index(0, pointer);
      if (state == null)
        return;
      state.isHeld = false;
      if (state.hasPendingSweep)
        this.sweep$1(pointer);
    },
    _resolve$3: function(pointer, member, disposition) {
      var state = this._arenas.$index(0, pointer);
      if (state == null)
        return;
      if (disposition === C.GestureDisposition_1) {
        C.JSArray_methods.remove$1(state.members, member);
        member.rejectGesture$1(pointer);
        if (!state.isOpen)
          this._tryToResolveArena$2(pointer, state);
      } else if (state.isOpen) {
        if (state.eagerWinner == null)
          state.eagerWinner = member;
      } else
        this._resolveInFavorOf$3(pointer, state, member);
    },
    _tryToResolveArena$2: function(pointer, state) {
      var t1 = state.members.length;
      if (t1 === 1)
        P.scheduleMicrotask(new D.GestureArenaManager__tryToResolveArena_closure(this, pointer, state));
      else if (t1 === 0)
        this._arenas.remove$1(0, pointer);
      else {
        t1 = state.eagerWinner;
        if (t1 != null)
          this._resolveInFavorOf$3(pointer, state, t1);
      }
    },
    _resolveByDefault$2: function(pointer, state) {
      var t1 = this._arenas;
      if (!t1.containsKey$1(0, pointer))
        return;
      t1.remove$1(0, pointer);
      C.JSArray_methods.get$first(state.members).acceptGesture$1(pointer);
    },
    _resolveInFavorOf$3: function(pointer, state, member) {
      var t1, t2, _i, rejectedMember;
      this._arenas.remove$1(0, pointer);
      for (t1 = state.members, t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
        rejectedMember = t1[_i];
        if (rejectedMember !== member)
          rejectedMember.rejectGesture$1(pointer);
      }
      member.acceptGesture$1(pointer);
    }
  };
  D.GestureArenaManager_add_closure.prototype = {
    call$0: function() {
      return new D._GestureArena(H.setRuntimeTypeInfo([], [D.GestureArenaMember]));
    },
    $signature: 76
  };
  D.GestureArenaManager__tryToResolveArena_closure.prototype = {
    call$0: function() {
      return this.$this._resolveByDefault$2(this.pointer, this.state);
    },
    $signature: 1
  };
  N.GestureBinding.prototype = {
    _handlePointerDataPacket$1: function(packet) {
      this.GestureBinding__pendingPointerEvents.addAll$1(0, G.PointerEventConverter_expand(packet.data, $.$get$window().devicePixelRatio));
      if (this._lockCount <= 0)
        this._flushPointerEventQueue$0();
    },
    cancelPointer$1: function(pointer) {
      var t1;
      H.intTypeCheck(pointer);
      t1 = this.GestureBinding__pendingPointerEvents;
      if (t1._head === t1._tail && this._lockCount <= 0)
        P.scheduleMicrotask(this.get$_flushPointerEventQueue());
      t1.addFirst$1(F.PointerCancelEvent$(0, 0, 0, 0, C.PointerDeviceKind_0, false, 0, pointer, C.Offset_0_0, 0, 1, 1, 0, 0, 0, 0, 0, 0, C.Duration_0));
    },
    _flushPointerEventQueue$0: function() {
      var t1, t2, t3, t4, t5, t6, t7, hitTestResult, t8, t9, t10, _this = this;
      for (t1 = _this.GestureBinding__pendingPointerEvents, t2 = _this.GestureBinding__hitTests, t3 = [O.HitTestEntry]; !t1.get$isEmpty(t1);) {
        t4 = H.interceptedTypeCheck(t1.removeFirst$0(), "$isPointerEvent");
        t5 = J.getInterceptor$(t4);
        t6 = !!t5.$isPointerDownEvent;
        if (t6 || !!t5.$isPointerSignalEvent) {
          t7 = H.setRuntimeTypeInfo([], t3);
          hitTestResult = new O.HitTestResult(t7);
          t8 = t4.position;
          t9 = _this.RendererBinding__pipelineOwner._rootNode;
          t10 = t9.RenderObjectWithChildMixin__child;
          if (t10 != null)
            t10.hitTest$2$position(hitTestResult, t8);
          C.JSArray_methods.add$1(t7, new O.HitTestEntry(t9));
          _this.super$GestureBinding$hitTest(hitTestResult, t8);
          if (t6)
            t2.$indexSet(0, t4.pointer, hitTestResult);
        } else if (!!t5.$isPointerUpEvent || !!t5.$isPointerCancelEvent)
          hitTestResult = t2.remove$1(0, t4.pointer);
        else
          hitTestResult = H.boolConversionCheck(t4.down) ? t2.$index(0, t4.pointer) : null;
        if (hitTestResult != null || !!t5.$isPointerHoverEvent || !!t5.$isPointerAddedEvent || !!t5.$isPointerRemovedEvent)
          _this.dispatchEvent$2(0, t4, hitTestResult);
      }
    },
    hitTest$2: function(result, position) {
      C.JSArray_methods.add$1(result._path, new O.HitTestEntry(this));
    },
    dispatchEvent$2: function(_, $event, hitTestResult) {
      var exception, stack, entry, exception0, stack0, t1, t2, _i,
        _s15_ = "gesture library";
      if (hitTestResult == null) {
        try {
          this.GestureBinding_pointerRouter.route$1($event);
        } catch (exception0) {
          exception = H.unwrapException(exception0);
          stack = H.getTraceFromException(exception0);
          t1 = N.FlutterErrorDetailsForPointerEventDispatcher$("while dispatching a non-hit-tested pointer event", $event, exception, null, new N.GestureBinding_dispatchEvent_closure($event), _s15_, stack);
          U.assertions_FlutterError_dumpErrorToConsole$closure().call$1(t1);
        }
        return;
      }
      for (t1 = O.HitTestEntry, t2 = [t1], t2 = H.assertSubtype(J.JSArray_markUnmodifiableList(H.assertSubtype(P.List_List$from(hitTestResult._path, false, t1), "$isList", t2, "$asList")), "$isList", t2, "$asList"), t1 = t2.length, _i = 0; _i < t1; ++_i) {
        entry = t2[_i];
        try {
          J.get$target$x(entry).handleEvent$2($event, entry);
        } catch (exception) {
          exception0 = H.unwrapException(exception);
          stack0 = H.getTraceFromException(exception);
          U.assertions_FlutterError_dumpErrorToConsole$closure().call$1(new N.FlutterErrorDetailsForPointerEventDispatcher(exception0, stack0, _s15_, "while dispatching a pointer event", new N.GestureBinding_dispatchEvent_closure0($event, entry), false));
        }
      }
    },
    handleEvent$2: function($event, entry) {
      var _this = this;
      _this.GestureBinding_pointerRouter.route$1($event);
      if (!!$event.$isPointerDownEvent)
        _this.GestureBinding_gestureArena.close$1(0, $event.pointer);
      else if (!!$event.$isPointerUpEvent)
        _this.GestureBinding_gestureArena.sweep$1($event.pointer);
      else if (!!$event.$isPointerSignalEvent)
        _this.GestureBinding_pointerSignalResolver.resolve$1($event);
    }
  };
  N.GestureBinding_dispatchEvent_closure.prototype = {
    call$1: function(information) {
      information._contents += "Event:\n";
      information._contents += "  " + this.event.toString$0(0) + "\n";
    },
    $signature: 5
  };
  N.GestureBinding_dispatchEvent_closure0.prototype = {
    call$1: function(information) {
      var t1;
      information._contents += "Event:\n";
      t1 = information._contents += "  " + this.event.toString$0(0) + "\n";
      information._contents = t1 + "Target:\n";
      t1 = this.entry;
      information._contents += "  " + t1.get$target(t1).toString$0(0);
    },
    $signature: 5
  };
  N.FlutterErrorDetailsForPointerEventDispatcher.prototype = {};
  G._PointerState.prototype = {
    toString$0: function(_) {
      return "_PointerState(pointer: " + H.S(this._converter$_pointer) + ", down: " + this._down + ", lastPosition: " + this.lastPosition.toString$0(0) + ")";
    }
  };
  G.PointerEventConverter__ensureStateForPointer_closure.prototype = {
    call$0: function() {
      return new G._PointerState(this.position);
    },
    $signature: 79
  };
  O.DragDownDetails.prototype = {
    toString$0: function(_) {
      return new H.TypeImpl(H.getRti(this)).toString$0(0) + "(" + H.S(this.globalPosition) + ")";
    }
  };
  O.DragStartDetails.prototype = {
    toString$0: function(_) {
      return new H.TypeImpl(H.getRti(this)).toString$0(0) + "(" + H.S(this.globalPosition) + ")";
    }
  };
  O.DragUpdateDetails.prototype = {
    toString$0: function(_) {
      return new H.TypeImpl(H.getRti(this)).toString$0(0) + "(" + H.S(this.delta) + ")";
    }
  };
  O.DragEndDetails.prototype = {
    toString$0: function(_) {
      return new H.TypeImpl(H.getRti(this)).toString$0(0) + "(" + this.velocity.toString$0(0) + ")";
    }
  };
  F.PointerEvent.prototype = {};
  F.PointerAddedEvent.prototype = {};
  F.PointerRemovedEvent.prototype = {};
  F.PointerHoverEvent.prototype = {};
  F.PointerEnterEvent.prototype = {};
  F.PointerExitEvent.prototype = {};
  F.PointerDownEvent.prototype = {};
  F.PointerMoveEvent.prototype = {};
  F.PointerUpEvent.prototype = {};
  F.PointerSignalEvent.prototype = {};
  F.PointerScrollEvent.prototype = {};
  F.PointerCancelEvent.prototype = {};
  O.HitTestEntry.prototype = {
    toString$0: function(_) {
      return this.get$target(this).toString$0(0);
    },
    get$target: function(receiver) {
      return this.target;
    }
  };
  O.HitTestResult.prototype = {
    add$1: function(_, entry) {
      C.JSArray_methods.add$1(this._path, entry);
    },
    toString$0: function(_) {
      var t1 = this.super$Object$toString(0);
      return t1;
    }
  };
  T.LongPressStartDetails.prototype = {};
  T.LongPressMoveUpdateDetails.prototype = {};
  T.LongPressEndDetails.prototype = {};
  T.LongPressGestureRecognizer.prototype = {
    didExceedDeadline$0: function() {
      var t1, _this = this;
      _this.resolve$1(C.GestureDisposition_0);
      _this._longPressAccepted = true;
      _this.super$PrimaryPointerGestureRecognizer$acceptGesture(_this.primaryPointer);
      t1 = _this.onLongPress;
      if (t1 != null)
        _this.invokeCallback$1$2("onLongPress", t1, -1);
    },
    handlePrimaryPointer$1: function($event) {
      var _this = this;
      if (!!$event.$isPointerUpEvent)
        if (_this._longPressAccepted)
          _this._longPressAccepted = false;
        else
          _this.resolve$1(C.GestureDisposition_1);
      else if (!!$event.$isPointerDownEvent || !!$event.$isPointerCancelEvent) {
        _this._longPressAccepted = false;
        _this._longPressOrigin = $event.position;
      } else
        !!$event.$isPointerMoveEvent;
    },
    acceptGesture$1: function(pointer) {
    },
    set$onLongPress: function(onLongPress) {
      this.onLongPress = H.functionTypeCheck(onLongPress, {func: 1, ret: -1});
    },
    set$onLongPressStart: function(onLongPressStart) {
      this.onLongPressStart = H.functionTypeCheck(onLongPressStart, {func: 1, ret: -1, args: [T.LongPressStartDetails]});
    },
    set$onLongPressMoveUpdate: function(onLongPressMoveUpdate) {
      this.onLongPressMoveUpdate = H.functionTypeCheck(onLongPressMoveUpdate, {func: 1, ret: -1, args: [T.LongPressMoveUpdateDetails]});
    },
    set$onLongPressUp: function(onLongPressUp) {
      this.onLongPressUp = H.functionTypeCheck(onLongPressUp, {func: 1, ret: -1});
    },
    set$onLongPressEnd: function(onLongPressEnd) {
      this.onLongPressEnd = H.functionTypeCheck(onLongPressEnd, {func: 1, ret: -1, args: [T.LongPressEndDetails]});
    }
  };
  B._Vector.prototype = {
    $index: function(_, i) {
      var t1, t2;
      H.intTypeCheck(i);
      t1 = this._lsq_solver$_elements;
      if (typeof i !== "number")
        return i.$add();
      t2 = i + this._lsq_solver$_offset;
      if (t2 < 0 || t2 >= t1.length)
        return H.ioore(t1, t2);
      return t1[t2];
    },
    $indexSet: function(_, i, value) {
      var t1 = this._lsq_solver$_elements,
        t2 = i + this._lsq_solver$_offset;
      if (t2 < 0 || t2 >= t1.length)
        return H.ioore(t1, t2);
      t1[t2] = value;
    },
    $mul: function(_, a) {
      var t1, t2, t3, t4, result, i, t5, t6, t7;
      H.interceptedTypeCheck(a, "$is_Vector");
      for (t1 = this._lsq_solver$_length, t2 = this._lsq_solver$_elements, t3 = this._lsq_solver$_offset, t4 = t2.length, result = 0, i = 0; i < t1; ++i) {
        t5 = i + t3;
        if (t5 < 0 || t5 >= t4)
          return H.ioore(t2, t5);
        t5 = t2[t5];
        t6 = a._lsq_solver$_elements;
        t7 = i + a._lsq_solver$_offset;
        if (t7 < 0 || t7 >= t6.length)
          return H.ioore(t6, t7);
        result += t5 * t6[t7];
      }
      return result;
    }
  };
  B._Matrix.prototype = {};
  B.PolynomialFit.prototype = {};
  B.LeastSquaresSolver.prototype = {
    solve$1: function(degree) {
      var t2, result, m, t3, t4, t5, t6, t7, t8, t9, h, t10, t11, i, t12, j, dot, t13, t14, norm, inverseNorm, wy, i0, yMean, sumSquaredError, sumSquaredTotal, err, term, v,
        t1 = this.x;
      if (degree > t1.length)
        return;
      t2 = degree + 1;
      result = new B.PolynomialFit(new Float64Array(t2));
      m = t1.length;
      t3 = t2 * m;
      t4 = new Float64Array(t3);
      for (t5 = t4.length, t6 = t1.length, t7 = this.w, t8 = t7.length, t9 = 0 * m, h = 0; h < m; ++h) {
        if (h >= t8)
          return H.ioore(t7, h);
        t10 = t7[h];
        t11 = t9 + h;
        if (t11 >= t5)
          return H.ioore(t4, t11);
        t4[t11] = t10;
        for (i = 1; i < t2; ++i) {
          t10 = (i - 1) * m + h;
          if (t10 < 0 || t10 >= t5)
            return H.ioore(t4, t10);
          t10 = t4[t10];
          if (h >= t6)
            return H.ioore(t1, h);
          t11 = t1[h];
          t12 = i * m + h;
          if (t12 >= t5)
            return H.ioore(t4, t12);
          t4[t12] = t10 * t11;
        }
      }
      t3 = new Float64Array(t3);
      t6 = new Float64Array(t2 * t2);
      for (t8 = t6.length, t9 = t3.length, j = 0; j < t2; ++j) {
        for (t10 = j * m, h = 0; h < m; ++h) {
          t11 = t10 + h;
          if (t11 >= t5)
            return H.ioore(t4, t11);
          t12 = t4[t11];
          if (t11 >= t9)
            return H.ioore(t3, t11);
          t3[t11] = t12;
        }
        for (i = 0; i < j; ++i) {
          t11 = i * m;
          dot = new B._Vector(t10, m, t3).$mul(0, new B._Vector(t11, m, t3));
          for (h = 0; h < m; ++h) {
            t12 = t10 + h;
            if (t12 >= t9)
              return H.ioore(t3, t12);
            t13 = t3[t12];
            t14 = t11 + h;
            if (t14 >= t9)
              return H.ioore(t3, t14);
            t3[t12] = t13 - dot * t3[t14];
          }
        }
        t11 = new B._Vector(t10, m, t3);
        norm = Math.sqrt(t11.$mul(0, t11));
        if (norm < 0.000001)
          return;
        inverseNorm = 1 / norm;
        for (h = 0; h < m; ++h) {
          t11 = t10 + h;
          if (t11 >= t9)
            return H.ioore(t3, t11);
          t3[t11] = t3[t11] * inverseNorm;
        }
        for (t11 = j * t2, i = 0; i < t2; ++i) {
          t12 = i < j ? 0 : new B._Vector(t10, m, t3).$mul(0, new B._Vector(i * m, m, t4));
          t13 = t11 + i;
          if (t13 >= t8)
            return H.ioore(t6, t13);
          t6[t13] = t12;
        }
      }
      t4 = new Float64Array(m);
      wy = new B._Vector(0, m, t4);
      for (t5 = this.y, t9 = t5.length, t10 = t7.length, t11 = t4.length, h = 0; h < m; ++h) {
        if (h >= t9)
          return H.ioore(t5, h);
        t12 = t5[h];
        if (h >= t10)
          return H.ioore(t7, h);
        t13 = t7[h];
        if (typeof t12 !== "number")
          return t12.$mul();
        if (h >= t11)
          return H.ioore(t4, h);
        t4[h] = t12 * t13;
      }
      for (i = t2 - 1, t4 = result.coefficients, t9 = t4.length, i0 = i; i0 >= 0; --i0) {
        t10 = new B._Vector(i0 * m, m, t3).$mul(0, wy);
        if (i0 >= t9)
          return H.ioore(t4, i0);
        t4[i0] = t10;
        for (t10 = i0 * t2, j = i; j > i0; --j) {
          t11 = t4[i0];
          t12 = t10 + j;
          if (t12 < 0 || t12 >= t8)
            return H.ioore(t6, t12);
          t12 = t6[t12];
          if (j >= t9)
            return H.ioore(t4, j);
          t4[i0] = t11 - t12 * t4[j];
        }
        t11 = t4[i0];
        t10 += i0;
        if (t10 < 0 || t10 >= t8)
          return H.ioore(t6, t10);
        t4[i0] = t11 / t6[t10];
      }
      for (t3 = t5.length, yMean = 0, h = 0; h < m; ++h) {
        if (h >= t3)
          return H.ioore(t5, h);
        t6 = t5[h];
        if (typeof t6 !== "number")
          return H.iae(t6);
        yMean += t6;
      }
      yMean /= m;
      for (t6 = t7.length, t8 = t1.length, sumSquaredError = 0, sumSquaredTotal = 0, h = 0; h < m; ++h) {
        if (h >= t3)
          return H.ioore(t5, h);
        t10 = t5[h];
        if (0 >= t9)
          return H.ioore(t4, 0);
        t11 = t4[0];
        if (typeof t10 !== "number")
          return t10.$sub();
        err = t10 - t11;
        for (term = 1, i = 1; i < t2; ++i) {
          if (h >= t8)
            return H.ioore(t1, h);
          term *= t1[h];
          if (i >= t9)
            return H.ioore(t4, i);
          err -= term * t4[i];
        }
        if (h >= t6)
          return H.ioore(t7, h);
        t11 = t7[h];
        t11 *= t11;
        sumSquaredError += t11 * err * err;
        v = t10 - yMean;
        sumSquaredTotal += t11 * v * v;
      }
      result.confidence = sumSquaredTotal <= 0.000001 ? 1 : 1 - sumSquaredError / sumSquaredTotal;
      return result;
    }
  };
  O._DragState.prototype = {
    toString$0: function(_) {
      return this._monodrag$_name;
    }
  };
  O.DragGestureRecognizer.prototype = {
    addAllowedPointer$1: function($event) {
      var t2, _this = this,
        t1 = $event.pointer;
      _this.startTrackingPointer$1(t1);
      t2 = new Array(20);
      t2.fixed$length = Array;
      _this._velocityTrackers.$indexSet(0, t1, new R.VelocityTracker(H.setRuntimeTypeInfo(t2, [R._PointAtTime])));
      t1 = _this._monodrag$_state;
      if (t1 === C._DragState_0) {
        _this._monodrag$_state = C._DragState_1;
        _this._initialPosition = $event.position;
        _this._pendingDragOffset = C.Offset_0_0;
        _this._lastPendingEventTimestamp = $event.timeStamp;
        if (_this.onDown != null)
          _this.invokeCallback$1$2("onDown", new O.DragGestureRecognizer_addAllowedPointer_closure(_this), -1);
      } else if (t1 === C._DragState_2)
        _this.resolve$1(C.GestureDisposition_0);
    },
    handleEvent$1: function($event) {
      var t1, delta, _this = this;
      H.interceptedTypeCheck($event, "$isPointerEvent");
      if (!H.boolConversionCheck($event.synthesized)) {
        t1 = J.getInterceptor$($event);
        t1 = !!t1.$isPointerDownEvent || !!t1.$isPointerMoveEvent;
      } else
        t1 = false;
      if (t1)
        _this._velocityTrackers.$index(0, $event.pointer).addPosition$2($event.timeStamp, $event.position);
      if ($event instanceof F.PointerMoveEvent) {
        delta = $event.delta;
        if (_this._monodrag$_state === C._DragState_2) {
          if (_this.onUpdate != null)
            _this.invokeCallback$1$2("onUpdate", new O.DragGestureRecognizer_handleEvent_closure(_this, $event, delta), -1);
        } else {
          _this._pendingDragOffset = _this._pendingDragOffset.$add(0, delta);
          _this._lastPendingEventTimestamp = $event.timeStamp;
          if (_this.get$_hasSufficientPendingDragDeltaToAccept())
            _this.resolve$1(C.GestureDisposition_0);
        }
      }
      _this.stopTrackingIfPointerNoLongerDown$1($event);
    },
    acceptGesture$1: function(pointer) {
      var delta, timestamp, t1, _this = this, _box_0 = {};
      if (_this._monodrag$_state !== C._DragState_2) {
        _this._monodrag$_state = C._DragState_2;
        delta = _this._pendingDragOffset;
        timestamp = _this._lastPendingEventTimestamp;
        _box_0.updateDelta = null;
        switch (_this.dragStartBehavior) {
          case C.DragStartBehavior_1:
            _this._initialPosition = _this._initialPosition.$add(0, delta);
            t1 = _box_0.updateDelta = C.Offset_0_0;
            break;
          case C.DragStartBehavior_0:
            t1 = _box_0.updateDelta = _this._getDeltaForDetails$1(delta);
            break;
          default:
            t1 = null;
        }
        _this._pendingDragOffset = C.Offset_0_0;
        _this._lastPendingEventTimestamp = null;
        if (_this.onStart != null)
          _this.invokeCallback$1$2("onStart", new O.DragGestureRecognizer_acceptGesture_closure(_this, timestamp), -1);
        if (!J.$eq$(t1, C.Offset_0_0) && _this.onUpdate != null)
          _this.invokeCallback$1$2("onUpdate", new O.DragGestureRecognizer_acceptGesture_closure0(_box_0, _this, timestamp), -1);
      }
    },
    rejectGesture$1: function(pointer) {
      this.stopTrackingPointer$1(pointer);
    },
    didStopTrackingLastPointer$1: function(pointer) {
      var estimate, t2, t3, velocity, _this = this,
        t1 = _this._monodrag$_state;
      if (t1 === C._DragState_1) {
        _this.resolve$1(C.GestureDisposition_1);
        _this._monodrag$_state = C._DragState_0;
        t1 = _this.onCancel;
        if (t1 != null)
          _this.invokeCallback$1$2("onCancel", t1, -1);
        return;
      }
      _this._monodrag$_state = C._DragState_0;
      if (t1 === C._DragState_2 && _this.onEnd != null) {
        estimate = _this._velocityTrackers.$index(0, pointer).getVelocityEstimate$0();
        if (estimate != null && _this._isFlingGesture$1(estimate)) {
          t1 = estimate.pixelsPerSecond;
          t2 = _this.minFlingVelocity;
          if (t2 == null)
            t2 = 50;
          t3 = _this.maxFlingVelocity;
          if (t3 == null)
            t3 = 8000;
          velocity = new R.Velocity(t1).clampMagnitude$2(t2, t3);
          _this.invokeCallback$1$3$debugReport("onEnd", new O.DragGestureRecognizer_didStopTrackingLastPointer_closure(_this, velocity), new O.DragGestureRecognizer_didStopTrackingLastPointer_closure0(estimate, velocity), -1);
        } else
          _this.invokeCallback$1$3$debugReport("onEnd", new O.DragGestureRecognizer_didStopTrackingLastPointer_closure1(_this), new O.DragGestureRecognizer_didStopTrackingLastPointer_closure2(estimate), -1);
      }
      _this._velocityTrackers.clear$0(0);
    },
    dispose$0: function() {
      this._velocityTrackers.clear$0(0);
      this.super$OneSequenceGestureRecognizer$dispose();
    },
    set$onDown: function(onDown) {
      this.onDown = H.functionTypeCheck(onDown, {func: 1, ret: -1, args: [O.DragDownDetails]});
    },
    set$onStart: function(_, onStart) {
      this.onStart = H.functionTypeCheck(onStart, {func: 1, ret: -1, args: [O.DragStartDetails]});
    },
    set$onUpdate: function(onUpdate) {
      this.onUpdate = H.functionTypeCheck(onUpdate, {func: 1, ret: -1, args: [O.DragUpdateDetails]});
    },
    set$onEnd: function(_, onEnd) {
      this.onEnd = H.functionTypeCheck(onEnd, {func: 1, ret: -1, args: [O.DragEndDetails]});
    },
    set$onCancel: function(_, onCancel) {
      this.onCancel = H.functionTypeCheck(onCancel, {func: 1, ret: -1});
    }
  };
  O.DragGestureRecognizer_addAllowedPointer_closure.prototype = {
    call$0: function() {
      var t1 = this.$this,
        t2 = t1._initialPosition;
      return t1.onDown.call$1(new O.DragDownDetails(t2));
    },
    $signature: 1
  };
  O.DragGestureRecognizer_handleEvent_closure.prototype = {
    call$0: function() {
      var t1 = this.$this,
        t2 = this.event,
        t3 = this.delta,
        t4 = t1._getDeltaForDetails$1(t3);
      t3 = t1._getPrimaryValueFromOffset$1(t3);
      return t1.onUpdate.call$1(new O.DragUpdateDetails(t2.timeStamp, t4, t3, t2.position));
    },
    $signature: 1
  };
  O.DragGestureRecognizer_acceptGesture_closure.prototype = {
    call$0: function() {
      var t1 = this.$this,
        t2 = t1._initialPosition;
      return t1.onStart.call$1(new O.DragStartDetails(this.timestamp, t2));
    },
    $signature: 1
  };
  O.DragGestureRecognizer_acceptGesture_closure0.prototype = {
    call$0: function() {
      var t1 = this.$this,
        t2 = this._box_0,
        t3 = t2.updateDelta,
        t4 = t1._getPrimaryValueFromOffset$1(t3);
      t2 = t1._initialPosition.$add(0, t2.updateDelta);
      return t1.onUpdate.call$1(new O.DragUpdateDetails(this.timestamp, t3, t4, t2));
    },
    $signature: 1
  };
  O.DragGestureRecognizer_didStopTrackingLastPointer_closure.prototype = {
    call$0: function() {
      var t1 = this.$this,
        t2 = this.velocity,
        t3 = t1._getPrimaryValueFromOffset$1(t2.pixelsPerSecond);
      return t1.onEnd.call$1(new O.DragEndDetails(t2, t3));
    },
    $signature: 1
  };
  O.DragGestureRecognizer_didStopTrackingLastPointer_closure0.prototype = {
    call$0: function() {
      return this.estimate.toString$0(0) + "; fling at " + this.velocity.toString$0(0) + ".";
    },
    $signature: 70
  };
  O.DragGestureRecognizer_didStopTrackingLastPointer_closure1.prototype = {
    call$0: function() {
      return this.$this.onEnd.call$1(new O.DragEndDetails(C.Velocity_Offset_0_0, 0));
    },
    $signature: 1
  };
  O.DragGestureRecognizer_didStopTrackingLastPointer_closure2.prototype = {
    call$0: function() {
      var t1 = this.estimate;
      if (t1 == null)
        return "Could not estimate velocity.";
      return t1.toString$0(0) + "; judged to not be a fling.";
    },
    $signature: 70
  };
  O.VerticalDragGestureRecognizer.prototype = {
    _isFlingGesture$1: function(estimate) {
      var minDistance, t1,
        minVelocity = this.minFlingVelocity;
      if (minVelocity == null)
        minVelocity = 50;
      minDistance = this.minFlingDistance;
      if (minDistance == null)
        minDistance = 18;
      t1 = estimate.pixelsPerSecond._dy;
      if (typeof t1 !== "number")
        return t1.abs$0();
      if (Math.abs(t1) > minVelocity) {
        t1 = estimate.offset._dy;
        if (typeof t1 !== "number")
          return t1.abs$0();
        t1 = Math.abs(t1) > minDistance;
      } else
        t1 = false;
      return t1;
    },
    get$_hasSufficientPendingDragDeltaToAccept: function() {
      var t1 = this._pendingDragOffset._dy;
      if (typeof t1 !== "number")
        return t1.abs$0();
      return Math.abs(t1) > 18;
    },
    _getDeltaForDetails$1: function(delta) {
      return new Q.Offset(0, delta._dy);
    },
    _getPrimaryValueFromOffset$1: function(value) {
      return value._dy;
    }
  };
  O.HorizontalDragGestureRecognizer.prototype = {
    _isFlingGesture$1: function(estimate) {
      var minDistance, t1,
        minVelocity = this.minFlingVelocity;
      if (minVelocity == null)
        minVelocity = 50;
      minDistance = this.minFlingDistance;
      if (minDistance == null)
        minDistance = 18;
      t1 = estimate.pixelsPerSecond._dx;
      if (typeof t1 !== "number")
        return t1.abs$0();
      if (Math.abs(t1) > minVelocity) {
        t1 = estimate.offset._dx;
        if (typeof t1 !== "number")
          return t1.abs$0();
        t1 = Math.abs(t1) > minDistance;
      } else
        t1 = false;
      return t1;
    },
    get$_hasSufficientPendingDragDeltaToAccept: function() {
      var t1 = this._pendingDragOffset._dx;
      if (typeof t1 !== "number")
        return t1.abs$0();
      return Math.abs(t1) > 18;
    },
    _getDeltaForDetails$1: function(delta) {
      return new Q.Offset(delta._dx, 0);
    },
    _getPrimaryValueFromOffset$1: function(value) {
      return value._dx;
    }
  };
  O.PanGestureRecognizer.prototype = {
    _isFlingGesture$1: function(estimate) {
      var minDistance,
        minVelocity = this.minFlingVelocity;
      if (minVelocity == null)
        minVelocity = 50;
      minDistance = this.minFlingDistance;
      if (minDistance == null)
        minDistance = 18;
      return estimate.pixelsPerSecond.get$distanceSquared() > minVelocity * minVelocity && estimate.offset.get$distanceSquared() > minDistance * minDistance;
    },
    get$_hasSufficientPendingDragDeltaToAccept: function() {
      return this._pendingDragOffset.get$distance() > 36;
    },
    _getDeltaForDetails$1: function(delta) {
      return delta;
    },
    _getPrimaryValueFromOffset$1: function(value) {
      return;
    }
  };
  Y.MouseTrackerAnnotation.prototype = {};
  Y._TrackedAnnotation.prototype = {};
  Y.MouseTracker.prototype = {
    attachAnnotation$1: function(annotation) {
      this._trackedAnnotations.$indexSet(0, annotation, new Y._TrackedAnnotation(annotation, P.LinkedHashSet_LinkedHashSet(P.int)));
      this._scheduleMousePositionCheck$0();
    },
    detachAnnotation$1: function(annotation) {
      var t2,
        t1 = this._trackedAnnotations;
      for (t2 = t1.$index(0, annotation).activeDevices, t2 = P._LinkedHashSetIterator$(t2, t2._collection$_modifications, H.getTypeArgumentByIndex(t2, 0)); t2.moveNext$0();)
        annotation.onExit;
      t1.remove$1(0, annotation);
    },
    _scheduleMousePositionCheck$0: function() {
      var t2,
        t1 = $.SchedulerBinding__instance;
      t1.toString;
      t2 = H.functionTypeCheck(new Y.MouseTracker__scheduleMousePositionCheck_closure(this), {func: 1, ret: -1, args: [P.Duration]});
      C.JSArray_methods.add$1(t1.SchedulerBinding__postFrameCallbacks, t2);
      $.SchedulerBinding__instance.scheduleFrame$0();
    },
    _mouse_tracking$_handleEvent$1: function($event) {
      var deviceId, t1, _this = this;
      H.interceptedTypeCheck($event, "$isPointerEvent");
      if ($event.kind !== C.PointerDeviceKind_1)
        return;
      deviceId = $event.device;
      t1 = _this._trackedAnnotations;
      if (t1.get$isEmpty(t1)) {
        _this._lastMouseEvent.remove$1(0, deviceId);
        return;
      }
      t1 = J.getInterceptor$($event);
      if (!!t1.$isPointerRemovedEvent) {
        _this._lastMouseEvent.remove$1(0, deviceId);
        _this._scheduleMousePositionCheck$0();
      } else if (!!t1.$isPointerMoveEvent || !!t1.$isPointerHoverEvent || !!t1.$isPointerDownEvent) {
        t1 = _this._lastMouseEvent;
        if (!t1.containsKey$1(0, deviceId) || !J.$eq$(t1.$index(0, deviceId).position, $event.position))
          _this._scheduleMousePositionCheck$0();
        t1.$indexSet(0, deviceId, $event);
      }
    },
    collectMousePositions$0: function() {
      var t2, t3, t4, t5, hit, trackedAnnotation, t6, t7, t8, _this = this,
        exitAnnotation = new Y.MouseTracker_collectMousePositions_exitAnnotation(_this),
        t1 = _this._lastMouseEvent;
      if (!t1.get$isNotEmpty(t1)) {
        t1 = _this._trackedAnnotations;
        t1.get$values(t1).forEach$1(0, new Y.MouseTracker_collectMousePositions_exitAllDevices(exitAnnotation));
        return;
      }
      for (t2 = t1.get$keys(t1), t2 = t2.get$iterator(t2), t3 = _this._trackedAnnotations, t4 = _this.annotationFinder; t2.moveNext$0();) {
        t5 = t2.get$current(t2);
        hit = t4.call$1(t1.$index(0, t5).position);
        if (hit == null) {
          for (t1 = t3.get$values(t3), t1 = t1.get$iterator(t1); t1.moveNext$0();)
            exitAnnotation.call$2(t1.get$current(t1), t5);
          return;
        }
        trackedAnnotation = t3.$index(0, hit);
        t6 = trackedAnnotation.activeDevices;
        if (!t6.contains$1(0, t5))
          t6.add$1(0, t5);
        trackedAnnotation.annotation;
        for (t6 = t3.get$values(t3), t6 = t6.get$iterator(t6); t6.moveNext$0();) {
          t7 = t6.get$current(t6);
          if (trackedAnnotation == t7)
            continue;
          t8 = t7.activeDevices;
          if (t8.contains$1(0, t5)) {
            t7.annotation;
            t8.remove$1(0, t5);
          }
        }
      }
    }
  };
  Y.MouseTracker__scheduleMousePositionCheck_closure.prototype = {
    call$1: function(_) {
      H.interceptedTypeCheck(_, "$isDuration");
      return this.$this.collectMousePositions$0();
    },
    $signature: 12
  };
  Y.MouseTracker_collectMousePositions_exitAnnotation.prototype = {
    call$2: function(trackedAnnotation, deviceId) {
      trackedAnnotation.annotation;
    },
    $signature: 82
  };
  Y.MouseTracker_collectMousePositions_exitAllDevices.prototype = {
    call$1: function(trackedAnnotation) {
      var t1, deviceIds, t2;
      H.interceptedTypeCheck(trackedAnnotation, "$is_TrackedAnnotation");
      t1 = trackedAnnotation.activeDevices;
      if (t1._collection$_length !== 0) {
        deviceIds = t1._newSet$0();
        deviceIds.addAll$1(0, t1);
        for (t1 = deviceIds.get$iterator(deviceIds), t2 = this.exitAnnotation; t1.moveNext$0();)
          t2.call$2(trackedAnnotation, t1.get$current(t1));
      }
    },
    $signature: 83
  };
  F._TapTracker.prototype = {
    stopTrackingPointer$1: function(route) {
      H.functionTypeCheck(route, {func: 1, ret: -1, args: [F.PointerEvent]});
      if (this._isTrackingPointer) {
        this._isTrackingPointer = false;
        $.GestureBinding__instance.GestureBinding_pointerRouter.removeRoute$2(this.pointer, route);
      }
    },
    isWithinTolerance$2: function($event, tolerance) {
      return $event.position.$sub(0, this._multitap$_initialPosition).get$distance() <= tolerance;
    }
  };
  F.DoubleTapGestureRecognizer.prototype = {
    addAllowedPointer$1: function($event) {
      var tracker, t2, _this = this,
        t1 = _this._firstTap;
      if (t1 != null && !t1.isWithinTolerance$2($event, 100))
        return;
      _this._stopDoubleTapTimer$0();
      t1 = $event.pointer;
      tracker = new F._TapTracker(t1, $.GestureBinding__instance.GestureBinding_gestureArena.add$2(0, t1, _this), $event.position);
      _this._trackers.$indexSet(0, t1, tracker);
      t2 = H.functionTypeCheck(_this.get$_handleEvent(), {func: 1, ret: -1, args: [F.PointerEvent]});
      if (!tracker._isTrackingPointer) {
        tracker._isTrackingPointer = true;
        $.GestureBinding__instance.GestureBinding_pointerRouter.addRoute$2(t1, t2);
      }
    },
    _handleEvent$1: function($event) {
      var t1, tracker, t2, t3, _this = this;
      H.interceptedTypeCheck($event, "$isPointerEvent");
      t1 = _this._trackers;
      tracker = t1.$index(0, $event.pointer);
      t2 = J.getInterceptor$($event);
      if (!!t2.$isPointerUpEvent) {
        t2 = _this._firstTap;
        if (t2 == null) {
          if (_this._doubleTapTimer == null)
            _this._doubleTapTimer = P.Timer_Timer(C.Duration_300000, _this.get$_reset());
          t2 = $.GestureBinding__instance.GestureBinding_gestureArena;
          t3 = tracker.pointer;
          t2.hold$1(t3);
          tracker.stopTrackingPointer$1(_this.get$_handleEvent());
          t1.remove$1(0, t3);
          _this._clearTrackers$0();
          _this._firstTap = tracker;
        } else {
          t2 = t2.entry;
          t2._arena._resolve$3(t2._pointer, t2._member, C.GestureDisposition_0);
          t2 = tracker.entry;
          t2._arena._resolve$3(t2._pointer, t2._member, C.GestureDisposition_0);
          tracker.stopTrackingPointer$1(_this.get$_handleEvent());
          t1.remove$1(0, tracker.pointer);
          t1 = _this.onDoubleTap;
          if (t1 != null)
            _this.invokeCallback$1$2("onDoubleTap", t1, -1);
          _this._reset$0();
        }
      } else if (!!t2.$isPointerMoveEvent) {
        if (!tracker.isWithinTolerance$2($event, 18))
          _this._reject$1(tracker);
      } else if (!!t2.$isPointerCancelEvent)
        _this._reject$1(tracker);
    },
    acceptGesture$1: function(pointer) {
    },
    rejectGesture$1: function(pointer) {
      var t1, _this = this,
        tracker = _this._trackers.$index(0, pointer);
      if (tracker == null) {
        t1 = _this._firstTap;
        t1 = t1 != null && t1.pointer == pointer;
      } else
        t1 = false;
      if (t1)
        tracker = _this._firstTap;
      if (tracker != null)
        _this._reject$1(tracker);
    },
    _reject$1: function(tracker) {
      var t1, t2, _this = this;
      H.interceptedTypeCheck(tracker, "$is_TapTracker");
      t1 = _this._trackers;
      t1.remove$1(0, tracker.pointer);
      t2 = tracker.entry;
      t2._arena._resolve$3(t2._pointer, t2._member, C.GestureDisposition_1);
      tracker.stopTrackingPointer$1(_this.get$_handleEvent());
      if (_this._firstTap != null)
        t1 = t1.get$isEmpty(t1) || tracker === _this._firstTap;
      else
        t1 = false;
      if (t1)
        _this._reset$0();
    },
    dispose$0: function() {
      this._reset$0();
      this.super$GestureRecognizer$dispose();
    },
    _reset$0: function() {
      var t1, _this = this;
      _this._stopDoubleTapTimer$0();
      t1 = _this._firstTap;
      if (t1 != null) {
        _this._firstTap = null;
        _this._reject$1(t1);
        $.GestureBinding__instance.GestureBinding_gestureArena.release$1(0, t1.pointer);
      }
      _this._clearTrackers$0();
    },
    _clearTrackers$0: function() {
      var t1 = this._trackers;
      t1 = t1.get$values(t1);
      C.JSArray_methods.forEach$1(P.List_List$from(t1, true, H.getRuntimeTypeArgument(t1, "Iterable", 0)), this.get$_reject());
    },
    _stopDoubleTapTimer$0: function() {
      var t1 = this._doubleTapTimer;
      if (t1 != null) {
        t1.cancel$0(0);
        this._doubleTapTimer = null;
      }
    },
    set$onDoubleTap: function(onDoubleTap) {
      this.onDoubleTap = H.functionTypeCheck(onDoubleTap, {func: 1, ret: -1});
    }
  };
  O.PointerRouter.prototype = {
    addRoute$2: function(pointer, route) {
      H.functionTypeCheck(route, {func: 1, ret: -1, args: [F.PointerEvent]});
      this._routeMap.putIfAbsent$2(0, pointer, new O.PointerRouter_addRoute_closure()).add$1(0, route);
    },
    removeRoute$2: function(pointer, route) {
      var t1, routes;
      H.functionTypeCheck(route, {func: 1, ret: -1, args: [F.PointerEvent]});
      t1 = this._routeMap;
      routes = t1.$index(0, pointer);
      routes.remove$1(0, route);
      if (routes._collection$_length === 0)
        t1.remove$1(0, pointer);
    },
    _dispatch$2: function($event, route) {
      var exception, stack, exception0;
      H.functionTypeCheck(route, {func: 1, ret: -1, args: [F.PointerEvent]});
      try {
        route.call$1($event);
      } catch (exception0) {
        exception = H.unwrapException(exception0);
        stack = H.getTraceFromException(exception0);
        U.assertions_FlutterError_dumpErrorToConsole$closure().call$1(new O.FlutterErrorDetailsForPointerRouter(exception, stack, "gesture library", "while routing a pointer event", new O.PointerRouter__dispatch_closure($event), false));
      }
    },
    route$1: function($event) {
      var t3, _i, route, _this = this,
        routes = _this._routeMap.$index(0, $event.pointer),
        t1 = _this._globalRoutes,
        t2 = {func: 1, ret: -1, args: [F.PointerEvent]},
        globalRoutes = P.List_List$from(t1, true, t2);
      if (routes != null)
        for (t2 = P.List_List$from(routes, true, t2), t3 = t2.length, _i = 0; _i < t2.length; t2.length === t3 || (0, H.throwConcurrentModificationError)(t2), ++_i) {
          route = t2[_i];
          if (routes.contains$1(0, route))
            _this._dispatch$2($event, route);
        }
      for (t2 = globalRoutes.length, _i = 0; _i < globalRoutes.length; globalRoutes.length === t2 || (0, H.throwConcurrentModificationError)(globalRoutes), ++_i) {
        route = globalRoutes[_i];
        if (t1.contains$1(0, route))
          _this._dispatch$2($event, route);
      }
    }
  };
  O.PointerRouter_addRoute_closure.prototype = {
    call$0: function() {
      return P.LinkedHashSet_LinkedHashSet({func: 1, ret: -1, args: [F.PointerEvent]});
    },
    $signature: 85
  };
  O.PointerRouter__dispatch_closure.prototype = {
    call$1: function(information) {
      information._contents += "Event:\n";
      information._contents += "  " + this.event.toString$0(0);
    },
    $signature: 5
  };
  O.FlutterErrorDetailsForPointerRouter.prototype = {};
  G.PointerSignalResolver.prototype = {
    register$2: function(_, $event, callback) {
      H.functionTypeCheck(callback, {func: 1, ret: -1, args: [F.PointerSignalEvent]});
      if (this._firstRegisteredCallback != null)
        return;
      this._currentEvent = $event;
      this.set$_firstRegisteredCallback(callback);
    },
    resolve$1: function($event) {
      var exception, stack, exception0,
        t1 = this._firstRegisteredCallback;
      if (t1 == null)
        return;
      try {
        t1.call$1($event);
      } catch (exception0) {
        exception = H.unwrapException(exception0);
        stack = H.getTraceFromException(exception0);
        t1 = U.FlutterErrorDetails$("while resolving a PointerSignalEvent", exception, new G.PointerSignalResolver_resolve_closure($event), "gesture library", false, stack);
        U.assertions_FlutterError_dumpErrorToConsole$closure().call$1(t1);
      }
      this.set$_firstRegisteredCallback(null);
      this._currentEvent = null;
    },
    set$_firstRegisteredCallback: function(_firstRegisteredCallback) {
      this._firstRegisteredCallback = H.functionTypeCheck(_firstRegisteredCallback, {func: 1, ret: -1, args: [F.PointerSignalEvent]});
    }
  };
  G.PointerSignalResolver_resolve_closure.prototype = {
    call$1: function(information) {
      information._contents += "Event:\n";
      information._contents += "  " + this.event.toString$0(0);
    },
    $signature: 5
  };
  S.DragStartBehavior.prototype = {
    toString$0: function(_) {
      return this._recognizer$_name;
    }
  };
  S.GestureRecognizer.prototype = {
    addPointer$1: function($event) {
      this.addAllowedPointer$1($event);
    },
    addAllowedPointer$1: function($event) {
    },
    dispose$0: function() {
    },
    invokeCallback$1$3$debugReport: function($name, callback, debugReport, $T) {
      var result, exception, stack, exception0, t1;
      H.functionTypeCheck(callback, {func: 1, ret: $T});
      H.functionTypeCheck(debugReport, {func: 1, ret: P.String});
      result = null;
      try {
        result = callback.call$0();
      } catch (exception0) {
        exception = H.unwrapException(exception0);
        stack = H.getTraceFromException(exception0);
        t1 = U.FlutterErrorDetails$("while handling a gesture", exception, new S.GestureRecognizer_invokeCallback_closure(this, $name), "gesture", false, stack);
        U.assertions_FlutterError_dumpErrorToConsole$closure().call$1(t1);
      }
      return result;
    },
    invokeCallback$1$2: function($name, callback, $T) {
      return this.invokeCallback$1$3$debugReport($name, callback, null, $T);
    },
    $isDiagnosticable: 1,
    $isDiagnosticableTree: 1
  };
  S.GestureRecognizer_invokeCallback_closure.prototype = {
    call$1: function(information) {
      var t1 = information._contents += "Handler: " + this.name + "\n";
      information._contents = t1 + "Recognizer:\n";
      information._contents += "  " + this.$this.toString$0(0) + "\n";
    },
    $signature: 5
  };
  S.OneSequenceGestureRecognizer.prototype = {
    acceptGesture$1: function(pointer) {
    },
    rejectGesture$1: function(pointer) {
    },
    resolve$1: function(disposition) {
      var _i, entry,
        t1 = this._recognizer$_entries,
        localEntries = P.List_List$from(t1.get$values(t1), true, D.GestureArenaEntry);
      t1.clear$0(0);
      for (t1 = localEntries.length, _i = 0; _i < localEntries.length; localEntries.length === t1 || (0, H.throwConcurrentModificationError)(localEntries), ++_i) {
        entry = localEntries[_i];
        entry._arena._resolve$3(entry._pointer, entry._member, disposition);
      }
    },
    dispose$0: function() {
      var t1, t2, t3, t4, t5, t6, routes, _this = this;
      _this.resolve$1(C.GestureDisposition_1);
      for (t1 = _this._trackedPointers, t2 = new P._HashSetIterator(t1, t1._computeElements$0(), [H.getTypeArgumentByIndex(t1, 0)]), t3 = {func: 1, ret: -1, args: [F.PointerEvent]}; t2.moveNext$0();) {
        t4 = t2._collection$_current;
        t5 = $.GestureBinding__instance.GestureBinding_pointerRouter;
        t6 = H.functionTypeCheck(_this.get$handleEvent(), t3);
        t5 = t5._routeMap;
        routes = t5.$index(0, t4);
        routes.remove$1(0, t6);
        if (routes._collection$_length === 0)
          t5.remove$1(0, t4);
      }
      t1.clear$0(0);
      _this.super$GestureRecognizer$dispose();
    },
    _addPointerToArena$1: function(pointer) {
      return $.GestureBinding__instance.GestureBinding_gestureArena.add$2(0, pointer, this);
    },
    startTrackingPointer$1: function(pointer) {
      var _this = this;
      $.GestureBinding__instance.GestureBinding_pointerRouter.addRoute$2(pointer, _this.get$handleEvent());
      _this._trackedPointers.add$1(0, pointer);
      _this._recognizer$_entries.$indexSet(0, pointer, _this._addPointerToArena$1(pointer));
    },
    stopTrackingPointer$1: function(pointer) {
      var t1 = this._trackedPointers;
      if (t1.contains$1(0, pointer)) {
        $.GestureBinding__instance.GestureBinding_pointerRouter.removeRoute$2(pointer, this.get$handleEvent());
        t1.remove$1(0, pointer);
        if (t1._collection$_length === 0)
          this.didStopTrackingLastPointer$1(pointer);
      }
    },
    stopTrackingIfPointerNoLongerDown$1: function($event) {
      var t1 = J.getInterceptor$($event);
      if (!!t1.$isPointerUpEvent || !!t1.$isPointerCancelEvent)
        this.stopTrackingPointer$1($event.pointer);
    }
  };
  S.GestureRecognizerState.prototype = {
    toString$0: function(_) {
      return this._recognizer$_name;
    }
  };
  S.PrimaryPointerGestureRecognizer.prototype = {
    addAllowedPointer$1: function($event) {
      var _this = this,
        t1 = $event.pointer;
      _this.startTrackingPointer$1(t1);
      if (_this.state === C.GestureRecognizerState_0) {
        _this.state = C.GestureRecognizerState_1;
        _this.primaryPointer = t1;
        _this.initialPosition = $event.position;
        _this._recognizer$_timer = P.Timer_Timer(_this.deadline, _this.get$didExceedDeadline());
      }
    },
    handleEvent$1: function($event) {
      var isPreAcceptSlopPastTolerance, t1, isPostAcceptSlopPastTolerance, _this = this;
      H.interceptedTypeCheck($event, "$isPointerEvent");
      if (_this.state === C.GestureRecognizerState_1 && $event.pointer == _this.primaryPointer) {
        if (!_this._gestureAccepted)
          isPreAcceptSlopPastTolerance = $event.position.$sub(0, _this.initialPosition).get$distance() > 18;
        else
          isPreAcceptSlopPastTolerance = false;
        if (_this._gestureAccepted) {
          t1 = _this.postAcceptSlopTolerance;
          isPostAcceptSlopPastTolerance = t1 != null && $event.position.$sub(0, _this.initialPosition).get$distance() > t1;
        } else
          isPostAcceptSlopPastTolerance = false;
        if ($event instanceof F.PointerMoveEvent)
          t1 = isPreAcceptSlopPastTolerance || isPostAcceptSlopPastTolerance;
        else
          t1 = false;
        if (t1) {
          _this.resolve$1(C.GestureDisposition_1);
          _this.stopTrackingPointer$1(_this.primaryPointer);
        } else
          _this.handlePrimaryPointer$1($event);
      }
      _this.stopTrackingIfPointerNoLongerDown$1($event);
    },
    didExceedDeadline$0: function() {
    },
    acceptGesture$1: function(pointer) {
      this._gestureAccepted = true;
    },
    rejectGesture$1: function(pointer) {
      var _this = this;
      if (pointer == _this.primaryPointer && _this.state === C.GestureRecognizerState_1) {
        _this._stopTimer$0();
        _this.state = C.GestureRecognizerState_2;
      }
    },
    didStopTrackingLastPointer$1: function(pointer) {
      this._stopTimer$0();
      this.state = C.GestureRecognizerState_0;
    },
    dispose$0: function() {
      this._stopTimer$0();
      this.super$OneSequenceGestureRecognizer$dispose();
    },
    _stopTimer$0: function() {
      var t1 = this._recognizer$_timer;
      if (t1 != null) {
        t1.cancel$0(0);
        this._recognizer$_timer = null;
      }
    }
  };
  S._GestureRecognizer_GestureArenaMember_DiagnosticableTreeMixin.prototype = {};
  N.TapDownDetails.prototype = {};
  N.TapUpDetails.prototype = {};
  N.TapGestureRecognizer.prototype = {
    handlePrimaryPointer$1: function($event) {
      var _this = this;
      if (!!$event.$isPointerUpEvent) {
        _this._finalPosition = $event.position;
        _this._checkUp$0();
      } else if (!!$event.$isPointerCancelEvent) {
        if (_this._sentTapDown && _this.onTapCancel != null)
          _this.invokeCallback$1$2("onTapCancel", _this.onTapCancel, -1);
        _this._tap$_reset$0();
      }
    },
    resolve$1: function(disposition) {
      var t1, _this = this;
      if (_this._wonArenaForPrimaryPointer && disposition === C.GestureDisposition_1) {
        t1 = _this.onTapCancel;
        if (t1 != null)
          _this.invokeCallback$1$2("spontaneous onTapCancel", t1, -1);
        _this._tap$_reset$0();
      }
      _this.super$OneSequenceGestureRecognizer$resolve(disposition);
    },
    didExceedDeadline$0: function() {
      this._checkDown$0();
    },
    acceptGesture$1: function(pointer) {
      var _this = this;
      _this.super$PrimaryPointerGestureRecognizer$acceptGesture(pointer);
      if (pointer == _this.primaryPointer) {
        _this._checkDown$0();
        _this._wonArenaForPrimaryPointer = true;
        _this._checkUp$0();
      }
    },
    rejectGesture$1: function(pointer) {
      var _this = this;
      _this.super$PrimaryPointerGestureRecognizer$rejectGesture(pointer);
      if (pointer == _this.primaryPointer) {
        if (_this._sentTapDown && _this.onTapCancel != null)
          _this.invokeCallback$1$2("forced onTapCancel", _this.onTapCancel, -1);
        _this._tap$_reset$0();
      }
    },
    _checkDown$0: function() {
      var _this = this;
      if (!_this._sentTapDown) {
        if (_this.onTapDown != null)
          _this.invokeCallback$1$2("onTapDown", new N.TapGestureRecognizer__checkDown_closure(_this), -1);
        _this._sentTapDown = true;
      }
    },
    _checkUp$0: function() {
      var t1, _this = this;
      if (_this._wonArenaForPrimaryPointer && _this._finalPosition != null) {
        _this.resolve$1(C.GestureDisposition_0);
        if (!_this._wonArenaForPrimaryPointer || _this._finalPosition == null)
          return;
        t1 = _this.onTap;
        if (t1 != null)
          _this.invokeCallback$1$2("onTap", t1, -1);
        _this._tap$_reset$0();
      }
    },
    _tap$_reset$0: function() {
      this._wonArenaForPrimaryPointer = this._sentTapDown = false;
      this._finalPosition = null;
    },
    set$onTapDown: function(onTapDown) {
      this.onTapDown = H.functionTypeCheck(onTapDown, {func: 1, ret: -1, args: [N.TapDownDetails]});
    },
    set$onTapUp: function(onTapUp) {
      this.onTapUp = H.functionTypeCheck(onTapUp, {func: 1, ret: -1, args: [N.TapUpDetails]});
    },
    set$onTap: function(onTap) {
      this.onTap = H.functionTypeCheck(onTap, {func: 1, ret: -1});
    },
    set$onTapCancel: function(onTapCancel) {
      this.onTapCancel = H.functionTypeCheck(onTapCancel, {func: 1, ret: -1});
    }
  };
  N.TapGestureRecognizer__checkDown_closure.prototype = {
    call$0: function() {
      var t1 = this.$this,
        t2 = t1.initialPosition;
      t1.onTapDown.call$1(new N.TapDownDetails(t2));
    },
    $signature: 0
  };
  R.Velocity.prototype = {
    $sub: function(_, other) {
      return new R.Velocity(this.pixelsPerSecond.$sub(0, H.interceptedTypeCheck(other, "$isVelocity").pixelsPerSecond));
    },
    $add: function(_, other) {
      return new R.Velocity(this.pixelsPerSecond.$add(0, H.interceptedTypeCheck(other, "$isVelocity").pixelsPerSecond));
    },
    clampMagnitude$2: function(minValue, maxValue) {
      var t1 = this.pixelsPerSecond,
        valueSquared = t1.get$distanceSquared();
      if (valueSquared > maxValue * maxValue)
        return new R.Velocity(t1.$div(0, t1.get$distance()).$mul(0, maxValue));
      if (valueSquared < minValue * minValue)
        return new R.Velocity(t1.$div(0, t1.get$distance()).$mul(0, minValue));
      return this;
    },
    $eq: function(_, other) {
      if (other == null)
        return false;
      if (!(other instanceof R.Velocity))
        return false;
      return this.pixelsPerSecond.$eq(0, other.pixelsPerSecond);
    },
    get$hashCode: function(_) {
      var t1 = this.pixelsPerSecond;
      return Q.hashValues(t1._dx, t1._dy, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd);
    },
    toString$0: function(_) {
      var t1 = this.pixelsPerSecond;
      return "Velocity(" + J.toStringAsFixed$1$n(t1._dx, 1) + ", " + J.toStringAsFixed$1$n(t1._dy, 1) + ")";
    }
  };
  R.VelocityEstimate.prototype = {
    toString$0: function(_) {
      var t1 = this.super$Object$toString(0);
      return t1;
    }
  };
  R._PointAtTime.prototype = {
    toString$0: function(_) {
      return "_PointAtTime(" + H.S(this.point) + " at " + H.S(this.time) + ")";
    }
  };
  R.VelocityTracker.prototype = {
    addPosition$2: function(time, position) {
      var t1 = ++this._velocity_tracker$_index;
      if (t1 === 20)
        t1 = this._velocity_tracker$_index = 0;
      C.JSArray_methods.$indexSet(this._samples, t1, new R._PointAtTime(time, position));
    },
    getVelocityEstimate$0: function() {
      var newestSample, t2, oldestSample, previousSample, sampleCount, sample, t3, t4, age, position, xFit, yFit, t5,
        t1 = [P.double],
        x = H.setRuntimeTypeInfo([], t1),
        y = H.setRuntimeTypeInfo([], t1),
        w = H.setRuntimeTypeInfo([], t1),
        time = H.setRuntimeTypeInfo([], t1),
        index = this._velocity_tracker$_index;
      t1 = this._samples;
      if (index >= 20)
        return H.ioore(t1, index);
      newestSample = t1[index];
      if (newestSample == null)
        return;
      t2 = newestSample.time;
      oldestSample = newestSample;
      previousSample = oldestSample;
      sampleCount = 0;
      do {
        if (index < 0 || index >= 20)
          return H.ioore(t1, index);
        sample = t1[index];
        if (sample == null)
          break;
        t3 = sample.time;
        t4 = t2._duration;
        t3 = t3._duration;
        age = C.JSInt_methods._tdivFast$1(t4 - t3, 1000);
        t3 = C.JSInt_methods._tdivFast$1(t3 - previousSample.time._duration, 1000);
        if (age > 100 || Math.abs(t3) > 40)
          break;
        position = sample.point;
        C.JSArray_methods.add$1(x, position._dx);
        C.JSArray_methods.add$1(y, position._dy);
        C.JSArray_methods.add$1(w, 1);
        C.JSArray_methods.add$1(time, -age);
        index = (index === 0 ? 20 : index) - 1;
        ++sampleCount;
        if (sampleCount < 20) {
          oldestSample = sample;
          previousSample = oldestSample;
          continue;
        } else {
          oldestSample = sample;
          break;
        }
      } while (true);
      if (sampleCount >= 3) {
        xFit = new B.LeastSquaresSolver(time, x, w).solve$1(2);
        if (xFit != null) {
          yFit = new B.LeastSquaresSolver(time, y, w).solve$1(2);
          if (yFit != null) {
            t1 = xFit.coefficients;
            if (1 >= t1.length)
              return H.ioore(t1, 1);
            t1 = t1[1];
            t3 = yFit.coefficients;
            if (1 >= t3.length)
              return H.ioore(t3, 1);
            t3 = t3[1];
            t4 = xFit.confidence;
            t5 = yFit.confidence;
            if (typeof t4 !== "number")
              return t4.$mul();
            if (typeof t5 !== "number")
              return H.iae(t5);
            return new R.VelocityEstimate(new Q.Offset(t1 * 1000, t3 * 1000), t4 * t5, new P.Duration(t2._duration - oldestSample.time._duration), newestSample.point.$sub(0, oldestSample.point));
          }
        }
      }
      return new R.VelocityEstimate(C.Offset_0_0, 1, new P.Duration(t2._duration - oldestSample.time._duration), newestSample.point.$sub(0, oldestSample.point));
    }
  };
  S.MaterialApp.prototype = {
    createState$0: function() {
      return new S._MaterialAppState(C._StateLifecycle_0);
    },
    onGenerateRoute$1: function(arg0) {
      return null.call$1(arg0);
    },
    onUnknownRoute$1: function(arg0) {
      return null.call$1(arg0);
    },
    builder$1: function(arg0) {
      return null.call$1(arg0);
    }
  };
  S._MaterialScrollBehavior.prototype = {
    getPlatform$1: function(context) {
      return K.Theme_of(context).platform;
    },
    buildViewportChrome$3: function(context, child, axisDirection) {
      switch (K.Theme_of(context).platform) {
        case C.TargetPlatform_2:
          return child;
        case C.TargetPlatform_0:
        case C.TargetPlatform_1:
          return L.GlowingOverscrollIndicator$(axisDirection, child, K.Theme_of(context).accentColor);
      }
      return;
    }
  };
  S._MaterialAppState.prototype = {
    initState$0: function() {
      var _this = this;
      _this.super$State$initState();
      _this._heroController = new T.HeroController(_this.get$_createRectTween(), P.LinkedHashMap_LinkedHashMap$_empty(P.Object, T._HeroFlight));
      _this._app0$_updateNavigator$0();
    },
    didUpdateWidget$1: function(oldWidget) {
      H.interceptedTypeCheck(oldWidget, "$isMaterialApp");
      this.super$State$didUpdateWidget(oldWidget);
      this._widget.toString;
      oldWidget.toString;
      this._app0$_updateNavigator$0();
    },
    _app0$_updateNavigator$0: function() {
      var _this = this,
        t1 = _this._widget;
      t1.toString;
      t1 = P.List_List$from(C.List_empty2, true, K.NavigatorObserver);
      C.JSArray_methods.add$1(t1, _this._heroController);
      _this.set$_navigatorObservers(t1);
      t1 = _this._navigatorObservers;
      (t1 && C.JSArray_methods).add$1(t1, new K.WebOnlyNavigatorObserver());
    },
    _createRectTween$2: function(begin, end) {
      return new D.MaterialRectArcTween(begin, end);
    },
    get$_localizationsDelegates: function() {
      var $async$self = this;
      return P._makeSyncStarIterable(function() {
        var $async$goto = 0, $async$handler = 1, $async$currentError;
        return function $async$get$_localizationsDelegates($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                $async$self._widget.toString;
                $async$goto = 2;
                return C.C__MaterialLocalizationsDelegate;
              case 2:
                // after yield
                $async$goto = 3;
                return C.C__CupertinoLocalizationsDelegate;
              case 3:
                // after yield
                // implicit return
                return P._IterationMarker_endOfIteration();
              case 1:
                // rethrow
                return P._IterationMarker_uncaughtError($async$currentError);
            }
        };
      }, [L.LocalizationsDelegate,,]);
    },
    build$1: function(context) {
      var t3, t4, _this = this, _null = null,
        t1 = _this._widget,
        theme = t1.theme,
        t2 = _this._navigatorObservers;
      t1 = t1.home;
      t3 = theme.primaryColor;
      if (t3 == null)
        t3 = C.MaterialColor_Map_JNwaj_4280391411;
      t4 = _this.get$_localizationsDelegates();
      _this._widget.toString;
      return new K.ScrollConfiguration(new S._MaterialScrollBehavior(), new K.AnimatedTheme(theme, true, new S.WidgetsApp(_null, _null, new S._MaterialAppState_build_closure(), t1, C.Map_empty0, _null, _null, t2, _null, "", _null, C.TextStyle_YCI, t3, _null, t4, _null, C.List_Locale_en_US, false, false, false, false, new S._MaterialAppState_build_closure0(), true, new N.GlobalObjectKey(_this, [[N.State, N.StatefulWidget]])), C.C__Linear, C.Duration_200000, _null), _null);
    },
    set$_navigatorObservers: function(_navigatorObservers) {
      this._navigatorObservers = H.assertSubtype(_navigatorObservers, "$isList", [K.NavigatorObserver], "$asList");
    },
    $asState: function() {
      return [S.MaterialApp];
    }
  };
  S._MaterialAppState_build_closure.prototype = {
    call$2: function(settings, builder) {
      var t1, t2, t3, t4, t5, t6, t7, t8;
      H.interceptedTypeCheck(settings, "$isRouteSettings");
      H.functionTypeCheck(builder, {func: 1, ret: N.Widget, args: [N.BuildContext]});
      t1 = H.setRuntimeTypeInfo([], [{func: 1, ret: [P.Future, P.bool]}]);
      t2 = $.Zone__current;
      t3 = [null];
      t4 = [null];
      t5 = S.ProxyAnimation$(C.C__AlwaysDismissedAnimation);
      t6 = H.setRuntimeTypeInfo([], [X.OverlayEntry]);
      t7 = $.Zone__current;
      t8 = settings == null ? C.RouteSettings_null_false_null : settings;
      return new V.MaterialPageRoute(builder, false, new O.FocusScopeNode(), t1, new N.LabeledGlobalKey(null, [[T._ModalScopeState,,]]), new N.LabeledGlobalKey(null, [[N.State, N.StatefulWidget]]), new S.PageStorageBucket(), null, new P._AsyncCompleter(new P._Future(t2, t3), t4), t5, t6, t8, new P._AsyncCompleter(new P._Future(t7, t3), t4), [null]);
    },
    "call*": "call$2",
    $requiredArgCount: 2,
    $signature: 87
  };
  S._MaterialAppState_build_closure0.prototype = {
    call$2: function(context, onPressed) {
      return E.FloatingActionButton$(C.Icon_8wU, true, H.functionTypeCheck(onPressed, {func: 1, ret: -1}));
    },
    $signature: 88
  };
  V.AppBarTheme.prototype = {
    get$hashCode: function(_) {
      var _this = this;
      return Q.hashValues(_this.brightness, _this.color, _this.elevation, _this.iconTheme, _this.textTheme, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd);
    },
    $eq: function(_, other) {
      var t1, _this = this;
      if (other == null)
        return false;
      if (_this === other)
        return true;
      if (!J.get$runtimeType$(other).$eq(0, new H.TypeImpl(H.getRti(_this))))
        return false;
      H.interceptedTypeCheck(other, "$isAppBarTheme");
      t1 = J.$eq$(other.color, _this.color) && other.elevation == _this.elevation && J.$eq$(other.iconTheme, _this.iconTheme) && J.$eq$(other.textTheme, _this.textTheme);
      return t1;
    }
  };
  D.MaterialPointArcTween.prototype = {
    _initialize$0: function() {
      var deltaX, deltaY, distanceFromAtoB, t2, t3, c, t4, t5, _this = this,
        delta = J.$sub$n(_this.end, _this.begin),
        t1 = delta._dx;
      if (typeof t1 !== "number")
        return t1.abs$0();
      deltaX = Math.abs(t1);
      t1 = delta._dy;
      if (typeof t1 !== "number")
        return t1.abs$0();
      deltaY = Math.abs(t1);
      distanceFromAtoB = delta.get$distance();
      t1 = _this.end;
      t2 = t1._dx;
      t3 = _this.begin;
      c = new Q.Offset(t2, t3._dy);
      t2 = new D.MaterialPointArcTween__initialize_sweepAngle(_this, distanceFromAtoB);
      if (deltaX > 2 && deltaY > 2) {
        t4 = distanceFromAtoB * distanceFromAtoB;
        if (deltaX < deltaY) {
          t1 = t4 / c.$sub(0, t3).get$distance() / 2;
          _this._arc$_radius = t1;
          t3 = _this.end._dx;
          t4 = _this.begin._dx;
          if (typeof t4 !== "number")
            return t4.$sub();
          if (typeof t3 !== "number")
            return H.iae(t3);
          t4 = J.get$sign$in(t4 - t3);
          t5 = _this.end;
          _this._center = new Q.Offset(t3 + t1 * t4, t5._dy);
          t1 = _this.begin._dx;
          t5 = t5._dx;
          if (typeof t1 !== "number")
            return t1.$lt();
          if (typeof t5 !== "number")
            return H.iae(t5);
          if (t1 < t5) {
            t1 = t2.call$0();
            t2 = _this.begin._dy;
            t3 = _this.end._dy;
            if (typeof t2 !== "number")
              return t2.$sub();
            if (typeof t3 !== "number")
              return H.iae(t3);
            _this._beginAngle = H.doubleTypeCheck(J.$mul$ns(t1, J.get$sign$in(t2 - t3)));
            _this._endAngle = 0;
          } else {
            t1 = t2.call$0();
            t2 = _this.end._dy;
            t3 = _this.begin._dy;
            if (typeof t2 !== "number")
              return t2.$sub();
            if (typeof t3 !== "number")
              return H.iae(t3);
            _this._beginAngle = 3.141592653589793 + J.$mul$ns(t1, J.get$sign$in(t2 - t3));
            _this._endAngle = 3.141592653589793;
          }
        } else {
          _this._arc$_radius = t4 / c.$sub(0, t1).get$distance() / 2;
          t1 = _this.begin;
          t3 = t1._dx;
          t1 = t1._dy;
          t4 = _this.end._dy;
          if (typeof t4 !== "number")
            return t4.$sub();
          if (typeof t1 !== "number")
            return H.iae(t1);
          t4 = J.get$sign$in(t4 - t1);
          t5 = _this._arc$_radius;
          if (typeof t5 !== "number")
            return H.iae(t5);
          _this._center = new Q.Offset(t3, t1 + t4 * t5);
          t1 = _this.begin._dy;
          t3 = _this.end._dy;
          if (typeof t1 !== "number")
            return t1.$lt();
          if (typeof t3 !== "number")
            return H.iae(t3);
          if (t1 < t3) {
            _this._beginAngle = -1.5707963267948966;
            t1 = t2.call$0();
            t2 = _this.end._dx;
            t3 = _this.begin._dx;
            if (typeof t2 !== "number")
              return t2.$sub();
            if (typeof t3 !== "number")
              return H.iae(t3);
            t3 = J.$mul$ns(t1, J.get$sign$in(t2 - t3));
            if (typeof t3 !== "number")
              return H.iae(t3);
            _this._endAngle = -1.5707963267948966 + t3;
          } else {
            _this._beginAngle = 1.5707963267948966;
            t1 = t2.call$0();
            t2 = _this.begin._dx;
            t3 = _this.end._dx;
            if (typeof t2 !== "number")
              return t2.$sub();
            if (typeof t3 !== "number")
              return H.iae(t3);
            t3 = J.$mul$ns(t1, J.get$sign$in(t2 - t3));
            if (typeof t3 !== "number")
              return H.iae(t3);
            _this._endAngle = 1.5707963267948966 + t3;
          }
        }
      } else
        _this._endAngle = _this._beginAngle = null;
      _this._arc$_dirty = false;
    },
    get$center: function() {
      var _this = this;
      if (_this.begin == null || _this.end == null)
        return;
      if (_this._arc$_dirty)
        _this._initialize$0();
      return _this._center;
    },
    get$radius: function() {
      var _this = this;
      if (_this.begin == null || _this.end == null)
        return;
      if (_this._arc$_dirty)
        _this._initialize$0();
      return _this._arc$_radius;
    },
    get$beginAngle: function() {
      var _this = this;
      if (_this.begin == null || _this.end == null)
        return;
      if (_this._arc$_dirty)
        _this._initialize$0();
      return _this._beginAngle;
    },
    get$endAngle: function() {
      var _this = this;
      if (_this.begin == null || _this.end == null)
        return;
      if (_this._arc$_dirty)
        _this._initialize$0();
      return _this._beginAngle;
    },
    set$begin: function(value) {
      H.interceptedTypeCheck(value, "$isOffset");
      if (!J.$eq$(value, this.begin)) {
        this.begin = value;
        this._arc$_dirty = true;
      }
    },
    set$end: function(_, value) {
      H.interceptedTypeCheck(value, "$isOffset");
      if (!J.$eq$(value, this.end)) {
        this.end = value;
        this._arc$_dirty = true;
      }
    },
    lerp$1: function(t) {
      var t1, angle, t2, t3, t4, _this = this;
      if (_this._arc$_dirty)
        _this._initialize$0();
      if (t === 0)
        return _this.begin;
      if (t === 1)
        return _this.end;
      t1 = _this._beginAngle;
      if (t1 == null || _this._endAngle == null)
        return Q.Offset_lerp(_this.begin, _this.end, t);
      angle = Q.lerpDouble(t1, _this._endAngle, t);
      t1 = Math.cos(H.checkNum(angle));
      t2 = _this._arc$_radius;
      if (typeof t2 !== "number")
        return H.iae(t2);
      t3 = Math.sin(H.checkNum(angle));
      t4 = _this._arc$_radius;
      if (typeof t4 !== "number")
        return H.iae(t4);
      return _this._center.$add(0, new Q.Offset(t1 * t2, t3 * t4));
    },
    toString$0: function(_) {
      var _this = this;
      return new H.TypeImpl(H.getRti(_this)).toString$0(0) + "(" + H.S(_this.begin) + " \u2192 " + H.S(_this.end) + "; center=" + H.S(_this.get$center()) + ", radius=" + H.S(_this.get$radius()) + ", beginAngle=" + H.S(_this.get$beginAngle()) + ", endAngle=" + H.S(_this.get$endAngle()) + ")";
    },
    $asAnimatable: function() {
      return [Q.Offset];
    },
    $asTween: function() {
      return [Q.Offset];
    }
  };
  D.MaterialPointArcTween__initialize_sweepAngle.prototype = {
    call$0: function() {
      var t1 = this.$this._arc$_radius;
      if (typeof t1 !== "number")
        return H.iae(t1);
      return 2 * Math.asin(this.distanceFromAtoB / (2 * t1));
    },
    $signature: 69
  };
  D._CornerId.prototype = {
    toString$0: function(_) {
      return this._arc$_name;
    }
  };
  D._Diagonal.prototype = {};
  D.MaterialRectArcTween.prototype = {
    _initialize$0: function() {
      var _this = this,
        diagonal = D._maxBy(C.List_yvP, new D.MaterialRectArcTween__initialize_closure(_this, J.$sub$n(_this.end.get$center(), _this.begin.get$center())), D._Diagonal),
        t1 = _this.begin,
        t2 = diagonal.beginId;
      _this._beginArc = new D.MaterialPointArcTween(_this._cornerFor$2(t1, t2), _this._cornerFor$2(_this.end, t2));
      t2 = _this.begin;
      t1 = diagonal.endId;
      _this._endArc = new D.MaterialPointArcTween(_this._cornerFor$2(t2, t1), _this._cornerFor$2(_this.end, t1));
      _this._arc$_dirty = false;
    },
    _cornerFor$2: function(rect, id) {
      switch (id) {
        case C._CornerId_0:
          return new Q.Offset(rect.left, rect.top);
        case C._CornerId_1:
          return new Q.Offset(rect.right, rect.top);
        case C._CornerId_2:
          return new Q.Offset(rect.left, rect.bottom);
        case C._CornerId_3:
          return new Q.Offset(rect.right, rect.bottom);
      }
      return C.Offset_0_0;
    },
    get$beginArc: function() {
      var _this = this;
      if (_this.begin == null)
        return;
      if (_this._arc$_dirty)
        _this._initialize$0();
      return _this._beginArc;
    },
    get$endArc: function() {
      var _this = this;
      if (_this.end == null)
        return;
      if (_this._arc$_dirty)
        _this._initialize$0();
      return _this._endArc;
    },
    set$begin: function(value) {
      H.interceptedTypeCheck(value, "$isRect");
      if (!J.$eq$(value, this.begin)) {
        this.begin = value;
        this._arc$_dirty = true;
      }
    },
    set$end: function(_, value) {
      H.interceptedTypeCheck(value, "$isRect");
      if (!J.$eq$(value, this.end)) {
        this.end = value;
        this._arc$_dirty = true;
      }
    },
    lerp$1: function(t) {
      var _this = this;
      if (_this._arc$_dirty)
        _this._initialize$0();
      if (t === 0)
        return _this.begin;
      if (t === 1)
        return _this.end;
      return Q.Rect$fromPoints(_this._beginArc.lerp$1(t), _this._endArc.lerp$1(t));
    },
    toString$0: function(_) {
      var _this = this;
      return new H.TypeImpl(H.getRti(_this)).toString$0(0) + "(" + H.S(_this.begin) + " \u2192 " + H.S(_this.end) + "; beginArc=" + H.S(_this.get$beginArc()) + ", endArc=" + H.S(_this.get$endArc()) + ")";
    }
  };
  D.MaterialRectArcTween__initialize_closure.prototype = {
    call$1: function(d) {
      var t1, t2, delta, $length, t3, t4;
      H.interceptedTypeCheck(d, "$is_Diagonal");
      t1 = this.$this;
      t2 = this.centersVector;
      delta = t1._cornerFor$2(t1.begin, d.endId).$sub(0, t1._cornerFor$2(t1.begin, d.beginId));
      $length = delta.get$distance();
      t1 = t2._dx;
      t3 = delta._dx;
      if (typeof t1 !== "number")
        return t1.$mul();
      if (typeof t3 !== "number")
        return H.iae(t3);
      t2 = t2._dy;
      t4 = delta._dy;
      if (typeof t2 !== "number")
        return t2.$mul();
      if (typeof t4 !== "number")
        return H.iae(t4);
      return t1 * t3 / $length + t2 * t4 / $length;
    },
    $signature: 90
  };
  D.BottomAppBarTheme.prototype = {
    get$hashCode: function(_) {
      return Q.hashValues(this.color, this.elevation, this.shape, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd);
    },
    $eq: function(_, other) {
      var _this = this;
      if (other == null)
        return false;
      if (_this === other)
        return true;
      if (!J.get$runtimeType$(other).$eq(0, new H.TypeImpl(H.getRti(_this))))
        return false;
      H.interceptedTypeCheck(other, "$isBottomAppBarTheme");
      return J.$eq$(other.color, _this.color) && other.elevation == _this.elevation && true;
    }
  };
  Z.RawMaterialButton.prototype = {
    createState$0: function() {
      return new Z._RawMaterialButtonState(C._StateLifecycle_0);
    },
    onHighlightChanged$1: function(arg0) {
      return null.call$1(arg0);
    },
    get$onHighlightChanged: function() {
      return null;
    },
    get$highlightColor: function() {
      return null;
    },
    get$splashColor: function() {
      return null;
    },
    get$child: function() {
      return this.child;
    }
  };
  Z._RawMaterialButtonState.prototype = {
    _handleHighlightChanged$1: function(value) {
      if (this._highlight !== value)
        this.setState$1(new Z._RawMaterialButtonState__handleHighlightChanged_closure(this, value));
    },
    didUpdateWidget$1: function(oldWidget) {
      this.super$State$didUpdateWidget(H.interceptedTypeCheck(oldWidget, "$isRawMaterialButton"));
      if (this._highlight)
        this._widget.onPressed;
    },
    build$1: function(context) {
      var minSize, _this = this, _null = null,
        t1 = _this._widget,
        t2 = t1.onPressed,
        elevation = _this._highlight ? t1.highlightElevation : t1.elevation,
        t3 = t1.constraints,
        t4 = t1.textStyle,
        t5 = t1.shape,
        t6 = t1.fillColor,
        t7 = t6 == null ? C.MaterialType_4 : C.MaterialType_3,
        t8 = t1.clipBehavior;
      t1 = M.Material$(C.Duration_200000, new R.InkWell(Y.IconTheme_merge(M.Container$(_null, new T.Center(C.Alignment_0_0, 1, 1, t1.child, _null), _null, _null, _null, _null, _null, C.EdgeInsets_0_0_0_0, _null), new T.IconThemeData(t4.color, _null, _null)), t2, _null, _null, _null, _null, _this.get$_handleHighlightChanged(), true, C.BoxShape_0, _null, _null, t5, _null, _null, _null, true, false, _null), t8, t6, elevation, _null, t5, t4, t7);
      t2 = _this._widget;
      switch (t2.materialTapTargetSize) {
        case C.MaterialTapTargetSize_0:
          minSize = C.Size_48_48;
          break;
        case C.MaterialTapTargetSize_1:
          minSize = C.Size_0_0;
          break;
        default:
          minSize = _null;
      }
      t2.onPressed;
      return T.Semantics$(true, new Z._InputPadding(minSize, new T.ConstrainedBox(t3, t1, _null), _null), true, true, false, _null, _null, _null, _null);
    },
    $asState: function() {
      return [Z.RawMaterialButton];
    }
  };
  Z._RawMaterialButtonState__handleHighlightChanged_closure.prototype = {
    call$0: function() {
      var t1 = this.$this;
      t1._highlight = this.value;
      t1._widget.toString;
    },
    $signature: 0
  };
  Z._InputPadding.prototype = {
    createRenderObject$1: function(context) {
      var t1 = new Z._RenderInputPadding(this.minSize, null);
      t1.get$isRepaintBoundary();
      t1.get$alwaysNeedsCompositing();
      t1._needsCompositing = false;
      t1.set$child(null);
      return t1;
    },
    updateRenderObject$2: function(context, renderObject) {
      H.interceptedTypeCheck(renderObject, "$is_RenderInputPadding").set$minSize(this.minSize);
    }
  };
  Z._RenderInputPadding.prototype = {
    set$minSize: function(value) {
      if (J.$eq$(this._minSize, value))
        return;
      this._minSize = value;
      this.markNeedsLayout$0();
    },
    performLayout$0: function() {
      var t2, t3, t4, height, width, _this = this,
        t1 = _this.RenderObjectWithChildMixin__child;
      if (t1 != null) {
        t1.layout$2$parentUsesSize(H.interceptedTypeCheck(K.RenderObject.prototype.get$constraints.call(_this), "$isBoxConstraints"), true);
        t1 = _this.RenderObjectWithChildMixin__child._size;
        t2 = t1._dx;
        t3 = _this._minSize;
        t4 = t3._dx;
        height = Math.max(H.checkNum(t2), H.checkNum(t4));
        t1 = t1._dy;
        t3 = t3._dy;
        width = Math.max(H.checkNum(t1), H.checkNum(t3));
        t3 = H.interceptedTypeCheck(K.RenderObject.prototype.get$constraints.call(_this), "$isBoxConstraints").constrain$1(new Q.Size(height, width));
        _this._size = t3;
        t1 = _this.RenderObjectWithChildMixin__child;
        H.interceptedTypeCheck(t1.parentData, "$isBoxParentData").offset = C.Alignment_0_0.alongOffset$1(H.interceptedTypeCheck(t3.$sub(0, t1._size), "$isOffset"));
      } else
        _this._size = C.Size_0_0;
    },
    hitTest$2$position: function(result, position) {
      var t1;
      if (!this.super$RenderBox$hitTest(result, position)) {
        t1 = this.RenderObjectWithChildMixin__child;
        t1 = t1.hitTest$2$position(result, t1._size.center$1(C.Offset_0_0));
      } else
        t1 = true;
      return t1;
    }
  };
  M.ButtonTextTheme.prototype = {
    toString$0: function(_) {
      return this._button_theme$_name;
    }
  };
  M.ButtonBarLayoutBehavior.prototype = {
    toString$0: function(_) {
      return this._button_theme$_name;
    }
  };
  M.ButtonThemeData.prototype = {
    get$padding: function(_) {
      var t1 = this._padding;
      if (t1 != null)
        return t1;
      switch (this.textTheme) {
        case C.ButtonTextTheme_0:
        case C.ButtonTextTheme_1:
          return C.EdgeInsets_16_0_16_0;
        case C.ButtonTextTheme_2:
          return C.EdgeInsets_24_0_24_0;
      }
      return C.EdgeInsets_0_0_0_0;
    },
    get$shape: function(_) {
      var t1 = this._shape;
      if (t1 != null)
        return t1;
      switch (this.textTheme) {
        case C.ButtonTextTheme_0:
        case C.ButtonTextTheme_1:
          return C.RoundedRectangleBorder_yx3;
        case C.ButtonTextTheme_2:
          return C.RoundedRectangleBorder_yx30;
      }
      return C.RoundedRectangleBorder_yx31;
    },
    $eq: function(_, other) {
      var t1, _this = this;
      if (other == null)
        return false;
      if (!J.get$runtimeType$(other).$eq(0, new H.TypeImpl(H.getRti(_this))))
        return false;
      H.interceptedTypeCheck(other, "$isButtonThemeData");
      if (_this.textTheme === other.textTheme)
        if (_this.minWidth === other.minWidth)
          if (_this.height === other.height)
            if (J.$eq$(_this.get$padding(_this), other.get$padding(other)))
              if (J.$eq$(_this.get$shape(_this), other.get$shape(other)))
                if (J.$eq$(_this._buttonColor, other._buttonColor))
                  t1 = J.$eq$(_this.colorScheme, other.colorScheme) && _this._materialTapTargetSize == other._materialTapTargetSize;
                else
                  t1 = false;
              else
                t1 = false;
            else
              t1 = false;
          else
            t1 = false;
        else
          t1 = false;
      else
        t1 = false;
      return t1;
    },
    get$hashCode: function(_) {
      var _this = this;
      return Q.hashValues(_this.textTheme, _this.minWidth, _this.height, _this.get$padding(_this), _this.get$shape(_this), false, _this._buttonColor, _this._disabledColor, _this._highlightColor, _this._splashColor, _this.colorScheme, _this._materialTapTargetSize, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd);
    }
  };
  A.CardTheme.prototype = {
    get$hashCode: function(_) {
      var _this = this;
      return Q.hashValues(_this.clipBehavior, _this.color, _this.elevation, _this.margin, _this.shape, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd);
    },
    $eq: function(_, other) {
      var t1, _this = this;
      if (other == null)
        return false;
      if (_this === other)
        return true;
      if (!J.get$runtimeType$(other).$eq(0, new H.TypeImpl(H.getRti(_this))))
        return false;
      H.interceptedTypeCheck(other, "$isCardTheme");
      t1 = J.$eq$(other.color, _this.color) && other.elevation == _this.elevation && J.$eq$(other.margin, _this.margin) && J.$eq$(other.shape, _this.shape);
      return t1;
    }
  };
  K.ChipThemeData.prototype = {
    get$hashCode: function(_) {
      var _this = this;
      return Q.hashValues(_this.backgroundColor, _this.deleteIconColor, _this.disabledColor, _this.selectedColor, _this.secondarySelectedColor, _this.labelPadding, _this.padding, _this.shape, _this.labelStyle, _this.secondaryLabelStyle, _this.brightness, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd);
    },
    $eq: function(_, other) {
      var _this = this;
      if (other == null)
        return false;
      if (_this === other)
        return true;
      if (!J.get$runtimeType$(other).$eq(0, new H.TypeImpl(H.getRti(_this))))
        return false;
      H.interceptedTypeCheck(other, "$isChipThemeData");
      return J.$eq$(other.backgroundColor, _this.backgroundColor) && J.$eq$(other.deleteIconColor, _this.deleteIconColor) && J.$eq$(other.disabledColor, _this.disabledColor) && J.$eq$(other.selectedColor, _this.selectedColor) && J.$eq$(other.secondarySelectedColor, _this.secondarySelectedColor) && J.$eq$(other.labelPadding, _this.labelPadding) && J.$eq$(other.padding, _this.padding) && J.$eq$(other.shape, _this.shape) && J.$eq$(other.labelStyle, _this.labelStyle) && J.$eq$(other.secondaryLabelStyle, _this.secondaryLabelStyle) && other.brightness === _this.brightness;
    }
  };
  A.ColorScheme.prototype = {
    $eq: function(_, other) {
      var _this = this;
      if (other == null)
        return false;
      if (_this === other)
        return true;
      if (!J.get$runtimeType$(other).$eq(0, new H.TypeImpl(H.getRti(_this))))
        return false;
      H.interceptedTypeCheck(other, "$isColorScheme");
      return J.$eq$(other.primary, _this.primary) && J.$eq$(other.primaryVariant, _this.primaryVariant) && J.$eq$(other.secondary, _this.secondary) && J.$eq$(other.secondaryVariant, _this.secondaryVariant) && J.$eq$(other.surface, _this.surface) && J.$eq$(other.background, _this.background) && J.$eq$(other.error, _this.error) && J.$eq$(other.onPrimary, _this.onPrimary) && J.$eq$(other.onSecondary, _this.onSecondary) && J.$eq$(other.onSurface, _this.onSurface) && J.$eq$(other.onBackground, _this.onBackground) && J.$eq$(other.onError, _this.onError) && other.brightness === _this.brightness;
    },
    get$hashCode: function(_) {
      var _this = this;
      return Q.hashValues(_this.primary, _this.primaryVariant, _this.secondary, _this.secondaryVariant, _this.surface, _this.background, _this.error, _this.onPrimary, _this.onSecondary, _this.onSurface, _this.onBackground, _this.onError, _this.brightness, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd);
    },
    get$error: function(receiver) {
      return this.error;
    }
  };
  E.MaterialColor.prototype = {
    $asColorSwatch: function() {
      return [P.int];
    }
  };
  Y.DialogTheme.prototype = {
    get$hashCode: function(_) {
      return J.get$hashCode$(this.shape);
    },
    $eq: function(_, other) {
      var _this = this;
      if (other == null)
        return false;
      if (_this === other)
        return true;
      if (!J.get$runtimeType$(other).$eq(0, new H.TypeImpl(H.getRti(_this))))
        return false;
      H.interceptedTypeCheck(other, "$isDialogTheme");
      return J.$eq$(other.backgroundColor, _this.backgroundColor) && other.elevation == _this.elevation && J.$eq$(other.shape, _this.shape) && J.$eq$(other.titleTextStyle, _this.titleTextStyle) && J.$eq$(other.contentTextStyle, _this.contentTextStyle);
    }
  };
  Z.DrawerController.prototype = {};
  Z.DrawerControllerState.prototype = {$isTickerProvider: 1,
    $asState: function() {
      return [Z.DrawerController];
    }
  };
  Z._DrawerControllerState_State_SingleTickerProviderStateMixin.prototype = {};
  E._DefaultHeroTag.prototype = {
    toString$0: function(_) {
      return "<default FloatingActionButton tag>";
    }
  };
  E.FloatingActionButton.prototype = {
    build$1: function(context) {
      var _this = this, _null = null,
        theme = K.Theme_of(context),
        foregroundColor = theme.accentIconTheme.color,
        result = Y.IconTheme_merge(_this.child, new T.IconThemeData(foregroundColor, _null, _null)),
        t1 = theme.materialTapTargetSize,
        t2 = theme.accentColor,
        t3 = theme.accentTextTheme.button.copyWith$2$color$letterSpacing(foregroundColor, 1.2);
      return new T.Hero(C.C__DefaultHeroTag, new Z.RawMaterialButton(_this.onPressed, t3, t2, 6, 12, _this.disabledElevation, _this._sizeConstraints, C.CircleBorder_61T, result, t1, C.Clip_0, _null), _null);
    }
  };
  A.FloatingActionButtonLocation.prototype = {
    toString$0: function(_) {
      return new H.TypeImpl(H.getRti(this)).toString$0(0);
    }
  };
  A._CenterFloatFloatingActionButtonLocation.prototype = {
    getOffset$1: function(scaffoldGeometry) {
      var contentBottom, bottomSheetHeight, fabHeight, snackBarHeight, fabY,
        t1 = scaffoldGeometry.scaffoldSize._dx,
        t2 = scaffoldGeometry.floatingActionButtonSize,
        t3 = t2._dx;
      if (typeof t1 !== "number")
        return t1.$sub();
      if (typeof t3 !== "number")
        return H.iae(t3);
      contentBottom = scaffoldGeometry.contentBottom;
      bottomSheetHeight = scaffoldGeometry.bottomSheetSize._dy;
      fabHeight = t2._dy;
      snackBarHeight = scaffoldGeometry.snackBarSize._dy;
      if (typeof fabHeight !== "number")
        return H.iae(fabHeight);
      fabY = contentBottom - fabHeight - 16;
      if (typeof snackBarHeight !== "number")
        return snackBarHeight.$gt();
      if (snackBarHeight > 0)
        fabY = Math.min(fabY, contentBottom - snackBarHeight - fabHeight - 16);
      if (typeof bottomSheetHeight !== "number")
        return bottomSheetHeight.$gt();
      if (bottomSheetHeight > 0)
        fabY = Math.min(fabY, contentBottom - bottomSheetHeight - fabHeight / 2);
      return new Q.Offset((t1 - t3) / 2, fabY);
    },
    toString$0: function(_) {
      return "FloatingActionButtonLocation.centerFloat";
    }
  };
  A.FloatingActionButtonAnimator.prototype = {
    toString$0: function(_) {
      return new H.TypeImpl(H.getRti(this)).toString$0(0);
    }
  };
  A._ScalingFabMotionAnimator.prototype = {
    getOffset$3$begin$end$progress: function(begin, end, progress) {
      if (typeof progress !== "number")
        return progress.$lt();
      if (progress < 0.5)
        return begin;
      else
        return end;
    }
  };
  A._AnimationSwap.prototype = {
    get$value: function(_) {
      var _this = this,
        t1 = _this.parent._animation_controller$_value;
      if (typeof t1 !== "number")
        return t1.$lt();
      if (t1 < _this.swapThreshold) {
        t1 = _this.first;
        t1 = t1.get$value(t1);
      } else {
        t1 = _this.next;
        t1 = t1.get$value(t1);
      }
      return t1;
    }
  };
  B.IconButton.prototype = {
    build$1: function(context) {
      var _null = null,
        result = T.Semantics$(true, new T.ConstrainedBox(C.BoxConstraints_mlX0, new T.Padding(C.EdgeInsets_8_8_8_8, new T.SizedBox(24, 24, new T.Align(C.Alignment_0_0, _null, _null, Y.IconTheme_merge(this.icon, new T.IconThemeData(_null, _null, 24)), _null), _null), _null), _null), false, true, false, _null, _null, _null, _null),
        t1 = K.Theme_of(context).highlightColor,
        t2 = K.Theme_of(context).splashColor,
        t3 = C.EdgeInsets_8_8_8_8.get$horizontal(),
        t4 = C.EdgeInsets_8_8_8_8.get$top(C.EdgeInsets_8_8_8_8),
        t5 = C.EdgeInsets_8_8_8_8.get$bottom(C.EdgeInsets_8_8_8_8);
      if (typeof t4 !== "number")
        return t4.$add();
      if (typeof t5 !== "number")
        return H.iae(t5);
      return R.InkResponse$(_null, result, false, _null, true, false, t1, C.BoxShape_1, _null, _null, _null, _null, this.onPressed, _null, _null, Math.max(35, (24 + Math.min(t3, t4 + t5)) * 0.7), t2, _null);
    }
  };
  Y.InkHighlight.prototype = {
    _handleAlphaStatusChanged$1: function($status) {
      if (H.interceptedTypeCheck($status, "$isAnimationStatus") === C.AnimationStatus_0 && !this._ink_highlight$_active) {
        this._alphaController.dispose$0();
        this.super$InkFeature$dispose();
      }
    },
    dispose$0: function() {
      this._alphaController.dispose$0();
      this.super$InkFeature$dispose();
    },
    _paintHighlight$3: function(canvas, rect, paint) {
      var t1, _this = this;
      canvas.save$0(0);
      t1 = _this._customBorder;
      if (t1 != null)
        canvas.clipPath$1(0, t1.getOuterPath$2$textDirection(rect, _this._ink_highlight$_textDirection));
      switch (_this._ink_highlight$_shape) {
        case C.BoxShape_1:
          canvas.drawCircle$3(rect.get$center(), 35, paint);
          break;
        case C.BoxShape_0:
          t1 = _this._borderRadius;
          if (!t1.$eq(0, C.BorderRadius_tLn))
            canvas.drawRRect$2(Q.RRect$fromRectAndCorners(rect, t1.bottomLeft, t1.bottomRight, t1.topLeft, t1.topRight), paint);
          else
            canvas.drawRect$2(rect, paint);
          break;
      }
      canvas.restore$0(0);
    },
    paintFeature$2: function(canvas, transform) {
      var originOffset, rect, _this = this,
        paint = new Q.Paint(new Q.PaintData()),
        t1 = _this._ink_well$_color,
        t2 = _this._alpha,
        t3 = t2._evaluatable;
      t2 = H.assertSubtype(t2.parent, "$isAnimation", [P.double], "$asAnimation");
      t2 = t3.transform$1(0, t2.get$value(t2));
      t1.toString;
      H.intTypeCheck(t2);
      t1 = t1._value;
      paint.set$color(0, Q.Color$fromARGB(t2, (16711680 & t1) >>> 16, (65280 & t1) >>> 8, (255 & t1) >>> 0));
      originOffset = T.MatrixUtils_getAsTranslation(transform);
      t1 = _this.referenceBox._size;
      t2 = t1._dx;
      t1 = t1._dy;
      if (typeof t2 !== "number")
        return H.iae(t2);
      if (typeof t1 !== "number")
        return H.iae(t1);
      rect = new Q.Rect(0, 0, 0 + t2, 0 + t1);
      if (originOffset == null) {
        canvas.save$0(0);
        canvas.transform$1(0, transform._m4storage);
        _this._paintHighlight$3(canvas, rect, paint);
        canvas.restore$0(0);
      } else
        _this._paintHighlight$3(canvas, rect.shift$1(originOffset), paint);
    },
    set$_alpha: function(_alpha) {
      this._alpha = H.assertSubtype(_alpha, "$isAnimation", [P.int], "$asAnimation");
    }
  };
  U._getClipCallback_closure.prototype = {
    call$0: function() {
      var t1 = this.referenceBox._size,
        t2 = t1._dx;
      t1 = t1._dy;
      if (typeof t2 !== "number")
        return H.iae(t2);
      if (typeof t1 !== "number")
        return H.iae(t1);
      return new Q.Rect(0, 0, 0 + t2, 0 + t1);
    },
    $signature: 92
  };
  U._InkSplashFactory.prototype = {};
  U.InkSplash.prototype = {
    confirm$0: function(_) {
      var duration = C.JSDouble_methods.floor$0(this._targetRadius / 1),
        t1 = this._radiusController;
      t1.duration = P.Duration$(0, duration, 0);
      t1.forward$0(0);
      this._ink_splash$_alphaController.forward$0(0);
    },
    _ink_splash$_handleAlphaStatusChanged$1: function($status) {
      if (H.interceptedTypeCheck($status, "$isAnimationStatus") === C.AnimationStatus_3)
        this.dispose$0();
    },
    dispose$0: function() {
      var _this = this;
      _this._radiusController.dispose$0();
      _this._ink_splash$_alphaController.dispose$0();
      _this._ink_splash$_alphaController = null;
      _this.super$InkFeature$dispose();
    },
    paintFeature$2: function(canvas, transform) {
      var center, originOffset, rect, _this = this,
        paint = new Q.Paint(new Q.PaintData()),
        t1 = _this._ink_well$_color,
        t2 = _this._ink_splash$_alpha,
        t3 = t2._evaluatable,
        t4 = [P.double];
      t2 = H.assertSubtype(t2.parent, "$isAnimation", t4, "$asAnimation");
      t2 = t3.transform$1(0, t2.get$value(t2));
      t1.toString;
      H.intTypeCheck(t2);
      t1 = t1._value;
      paint.set$color(0, Q.Color$fromARGB(t2, (16711680 & t1) >>> 16, (65280 & t1) >>> 8, (255 & t1) >>> 0));
      center = _this._ink_splash$_position;
      if (_this._repositionToReferenceBox)
        center = Q.Offset_lerp(center, _this.referenceBox._size.center$1(C.Offset_0_0), _this._radiusController._animation_controller$_value);
      originOffset = T.MatrixUtils_getAsTranslation(transform);
      canvas.save$0(0);
      if (originOffset == null)
        canvas.transform$1(0, transform._m4storage);
      else
        canvas.translate$2(0, originOffset._dx, originOffset._dy);
      t1 = _this._clipCallback;
      if (t1 != null) {
        rect = t1.call$0();
        t1 = _this._ink_splash$_customBorder;
        if (t1 != null)
          canvas.clipPath$1(0, t1.getOuterPath$2$textDirection(rect, _this._ink_splash$_textDirection));
        else {
          t1 = _this._ink_splash$_borderRadius;
          if (!t1.$eq(0, C.BorderRadius_tLn))
            canvas.clipRRect$1(Q.RRect$fromRectAndCorners(rect, t1.bottomLeft, t1.bottomRight, t1.topLeft, t1.topRight));
          else
            canvas.clipRect$1(rect);
        }
      }
      t1 = _this._radius;
      t4 = H.assertSubtype(t1.parent, "$isAnimation", t4, "$asAnimation");
      canvas.drawCircle$3(center, t1._evaluatable.transform$1(0, t4.get$value(t4)), paint);
      canvas.restore$0(0);
    },
    set$_radius: function(_radius) {
      this._radius = H.assertSubtype(_radius, "$isAnimation", [P.double], "$asAnimation");
    },
    set$_ink_splash$_alpha: function(_alpha) {
      this._ink_splash$_alpha = H.assertSubtype(_alpha, "$isAnimation", [P.int], "$asAnimation");
    }
  };
  R.InteractiveInkFeature.prototype = {
    set$color: function(_, value) {
      if (J.$eq$(value, this._ink_well$_color))
        return;
      this._ink_well$_color = value;
      this._material$_controller.markNeedsPaint$0();
    }
  };
  R.InteractiveInkFeatureFactory.prototype = {};
  R.InkResponse.prototype = {
    getRectCallback$1: function(referenceBox) {
      return;
    },
    createState$0: function() {
      return new R._InkResponseState(null, C._StateLifecycle_0, [R.InkResponse]);
    },
    onTap$0: function() {
      return this.onTap.call$0();
    },
    onHighlightChanged$1: function(arg0) {
      return this.onHighlightChanged.call$1(arg0);
    },
    get$child: function() {
      return this.child;
    },
    get$onTap: function() {
      return this.onTap;
    },
    get$onTapDown: function() {
      return this.onTapDown;
    },
    get$onTapCancel: function() {
      return this.onTapCancel;
    },
    get$onDoubleTap: function() {
      return this.onDoubleTap;
    },
    get$onLongPress: function() {
      return this.onLongPress;
    },
    get$onHighlightChanged: function() {
      return this.onHighlightChanged;
    },
    get$containedInkWell: function() {
      return this.containedInkWell;
    },
    get$highlightShape: function() {
      return this.highlightShape;
    },
    get$radius: function() {
      return this.radius;
    },
    get$borderRadius: function(receiver) {
      return this.borderRadius;
    },
    get$customBorder: function() {
      return this.customBorder;
    },
    get$highlightColor: function() {
      return this.highlightColor;
    },
    get$splashColor: function() {
      return this.splashColor;
    },
    get$splashFactory: function() {
      return this.splashFactory;
    },
    get$enableFeedback: function() {
      return this.enableFeedback;
    },
    get$excludeFromSemantics: function() {
      return this.excludeFromSemantics;
    }
  };
  R._InkResponseState.prototype = {
    get$wantKeepAlive: function() {
      if (this._lastHighlight == null) {
        var t1 = this._splashes;
        t1 = t1 != null && t1._collection$_length !== 0;
      } else
        t1 = true;
      return t1;
    },
    updateHighlight$1: function(value) {
      var referenceBox, result, t3, t4, t5, t6, _this = this,
        t1 = _this._lastHighlight,
        t2 = t1 == null;
      if (value === (!t2 && t1._ink_highlight$_active))
        return;
      if (value)
        if (t2) {
          referenceBox = H.interceptedTypeCheck(_this._element.get$renderObject(), "$isRenderBox");
          result = H.interceptedTypeCheck(_this._element.ancestorRenderObjectOfType$1(C.C_TypeMatcher0), "$is_RenderInkFeatures");
          t1 = _this._widget.get$highlightColor();
          if (t1 == null)
            t1 = K.Theme_of(_this._element).highlightColor;
          t2 = _this._widget.get$highlightShape();
          t3 = _this._widget;
          t3 = t3.get$borderRadius(t3);
          t4 = _this._widget.get$customBorder();
          t5 = _this._widget.getRectCallback$1(referenceBox);
          t6 = T.Directionality_of(_this._element);
          if (t3 == null)
            t3 = C.BorderRadius_tLn;
          t6 = new Y.InkHighlight(t2, t3, t4, t5, t6, t1, result, referenceBox, _this.get$_handleInkHighlightRemoval());
          t5 = G.AnimationController$(C.AnimationBehavior_0, null, C.Duration_200000, 0, 1, null, result.vsync);
          t4 = H.functionTypeCheck(result.get$markNeedsPaint(), {func: 1, ret: -1});
          t5.didRegisterListener$0();
          t3 = t5.AnimationLocalListenersMixin__listeners;
          H.assertSubtypeOfRuntimeType(t4, H.getTypeArgumentByIndex(t3, 0));
          t3._isDirty = true;
          C.JSArray_methods.add$1(t3._list, t4);
          t5.addStatusListener$1(t6.get$_handleAlphaStatusChanged());
          t5.forward$0(0);
          t6._alphaController = t5;
          t6.set$_alpha(t5.drive$1$1(new R.IntTween(0, (4278190080 & t1._value) >>> 24), P.int));
          result.addInkFeature$1(t6);
          _this._lastHighlight = t6;
          _this.updateKeepAlive$0();
        } else {
          t1._ink_highlight$_active = true;
          t1._alphaController.forward$0(0);
        }
      else {
        t1._ink_highlight$_active = false;
        t1._alphaController.reverse$0(0);
      }
      if (_this._widget.get$onHighlightChanged() != null)
        _this._widget.onHighlightChanged$1(value);
    },
    _handleInkHighlightRemoval$0: function() {
      this._lastHighlight = null;
      this.updateKeepAlive$0();
    },
    _createInkFeature$1: function(details) {
      var rectCallback, t2, borderRadius, customBorder, t3, t4, t5, t6, t7, splash, _this = this, _null = null, t1 = {},
        result = H.interceptedTypeCheck(_this._element.ancestorRenderObjectOfType$1(C.C_TypeMatcher0), "$is_RenderInkFeatures"),
        referenceBox = H.interceptedTypeCheck(_this._element.get$renderObject(), "$isRenderBox"),
        position = referenceBox.globalToLocal$1(details.globalPosition),
        color = _this._widget.get$splashColor();
      if (color == null)
        color = K.Theme_of(_this._element).splashColor;
      rectCallback = _this._widget.get$containedInkWell() ? _this._widget.getRectCallback$1(referenceBox) : _null;
      t2 = _this._widget;
      borderRadius = t2.get$borderRadius(t2);
      customBorder = _this._widget.get$customBorder();
      t1.splash = null;
      _this._widget.get$splashFactory();
      K.Theme_of(_this._element).splashFactory;
      t2 = _this._widget.get$containedInkWell();
      t3 = _this._widget.get$radius();
      t4 = T.Directionality_of(_this._element);
      t5 = {func: 1, ret: -1};
      t6 = H.functionTypeCheck(new R._InkResponseState__createInkFeature_onRemoved(t1, _this), t5);
      t7 = borderRadius == null ? C.BorderRadius_tLn : borderRadius;
      if (t3 == null)
        t3 = U._getTargetRadius(referenceBox, t2, rectCallback, position);
      splash = new U.InkSplash(position, t7, customBorder, t3, U._getClipCallback(referenceBox, t2, rectCallback), !t2, t4, color, result, referenceBox, t6);
      t6 = result.vsync;
      t4 = G.AnimationController$(C.AnimationBehavior_0, _null, C.Duration_1000000, 0, 1, _null, t6);
      t5 = H.functionTypeCheck(result.get$markNeedsPaint(), t5);
      t4.didRegisterListener$0();
      t2 = t4.AnimationLocalListenersMixin__listeners;
      H.assertSubtypeOfRuntimeType(t5, H.getTypeArgumentByIndex(t2, 0));
      t2._isDirty = true;
      C.JSArray_methods.add$1(t2._list, t5);
      t4.forward$0(0);
      splash._radiusController = t4;
      t2 = P.double;
      t7 = [t2];
      splash.set$_radius(new R._AnimatedEvaluation(H.assertSubtype(t4, "$isAnimation", t7, "$asAnimation"), new R.Tween(0, t3, [t2]), [t2]));
      t6 = G.AnimationController$(C.AnimationBehavior_0, _null, C.Duration_200000, 0, 1, _null, t6);
      t6.didRegisterListener$0();
      t2 = t6.AnimationLocalListenersMixin__listeners;
      H.assertSubtypeOfRuntimeType(t5, H.getTypeArgumentByIndex(t2, 0));
      t2._isDirty = true;
      C.JSArray_methods.add$1(t2._list, t5);
      t6.addStatusListener$1(splash.get$_ink_splash$_handleAlphaStatusChanged());
      splash._ink_splash$_alphaController = t6;
      t5 = color._value;
      splash.set$_ink_splash$_alpha(new R._AnimatedEvaluation(H.assertSubtype(t6, "$isAnimation", t7, "$asAnimation"), new R.IntTween((4278190080 & t5) >>> 24, 0), [P.int]));
      result.addInkFeature$1(splash);
      return t1.splash = splash;
    },
    _handleTapDown$1: function(details) {
      var _this = this,
        splash = _this._createInkFeature$1(details);
      if (_this._splashes == null)
        _this.set$_splashes(P.HashSet_HashSet(R.InteractiveInkFeature));
      _this._splashes.add$1(0, splash);
      _this._currentSplash = splash;
      _this._widget.get$onTapDown();
      _this.updateKeepAlive$0();
      _this.updateHighlight$1(true);
    },
    _handleTapCancel$0: function() {
      var _this = this,
        t1 = _this._currentSplash;
      if (t1 != null) {
        t1 = t1._ink_splash$_alphaController;
        if (t1 != null)
          t1.forward$0(0);
      }
      _this._currentSplash = null;
      _this._widget.get$onTapCancel();
      _this.updateHighlight$1(false);
    },
    deactivate$0: function() {
      var _this = this,
        t1 = _this._splashes;
      if (t1 != null) {
        _this.set$_splashes(null);
        for (t1 = new P._HashSetIterator(t1, t1._computeElements$0(), [H.getTypeArgumentByIndex(t1, 0)]); t1.moveNext$0();)
          t1._collection$_current.dispose$0();
        _this._currentSplash = null;
      }
      t1 = _this._lastHighlight;
      if (t1 != null) {
        t1._alphaController.dispose$0();
        t1.super$InkFeature$dispose();
      }
      _this._lastHighlight = null;
      _this.super$__InkResponseState_State_AutomaticKeepAliveClientMixin$deactivate();
    },
    build$1: function(context) {
      var themeData, t1, t2, _this = this, _null = null;
      _this.super$AutomaticKeepAliveClientMixin$build(context);
      themeData = K.Theme_of(context);
      t1 = _this._lastHighlight;
      if (t1 != null) {
        t2 = _this._widget.get$highlightColor();
        t1.set$color(0, t2 == null ? themeData.highlightColor : t2);
      }
      t1 = _this._currentSplash;
      if (t1 != null) {
        t2 = _this._widget.get$splashColor();
        t1.set$color(0, t2 == null ? themeData.splashColor : t2);
      }
      _this._widget.get$onTap();
      _this._widget.get$onDoubleTap();
      _this._widget.get$onLongPress();
      return D.GestureDetector$(C.HitTestBehavior_1, _this._widget.get$child(), C.DragStartBehavior_1, _this._widget.get$excludeFromSemantics(), _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, new R._InkResponseState_build_closure(_this, context), _this.get$_handleTapCancel(), _this.get$_handleTapDown(), _null, _null);
    },
    set$_splashes: function(_splashes) {
      this._splashes = H.assertSubtype(_splashes, "$isSet", [R.InteractiveInkFeature], "$asSet");
    }
  };
  R._InkResponseState__createInkFeature_onRemoved.prototype = {
    call$0: function() {
      var t3,
        t1 = this.$this,
        t2 = t1._splashes;
      if (t2 != null) {
        t3 = this._box_0;
        t2.remove$1(0, t3.splash);
        if (t1._currentSplash == t3.splash)
          t1._currentSplash = null;
        t1.updateKeepAlive$0();
      }
    },
    $signature: 1
  };
  R._InkResponseState_build_closure.prototype = {
    call$0: function() {
      var t1 = this.$this,
        t2 = t1._currentSplash;
      if (t2 != null)
        t2.confirm$0(0);
      t1._currentSplash = null;
      t1.updateHighlight$1(false);
      t1._widget.get$onTap();
      t1._widget.get$enableFeedback();
      M.Feedback_forTap(this.context);
      t1._widget.onTap$0();
      return;
    },
    $signature: 1
  };
  R.InkWell.prototype = {};
  R.__InkResponseState_State_AutomaticKeepAliveClientMixin.prototype = {
    initState$0: function() {
      this.super$State$initState();
      if (this.get$wantKeepAlive())
        this._ensureKeepAlive$0();
    },
    deactivate$0: function() {
      var t1 = this.AutomaticKeepAliveClientMixin__keepAliveHandle;
      if (t1 != null) {
        t1.notifyListeners$0();
        this.AutomaticKeepAliveClientMixin__keepAliveHandle = null;
      }
      this.super$State$deactivate();
    }
  };
  L.InputDecorationTheme.prototype = {};
  M.MaterialType.prototype = {
    toString$0: function(_) {
      return this._material$_name;
    }
  };
  M.Material.prototype = {
    createState$0: function() {
      return new M._MaterialState(new N.LabeledGlobalKey("ink renderer", [[N.State, N.StatefulWidget]]), null, C._StateLifecycle_0);
    },
    get$child: function() {
      return this.child;
    },
    get$borderRadius: function() {
      return null;
    }
  };
  M._MaterialState.prototype = {
    _getBackgroundColor$1: function(context) {
      var t1 = this._widget,
        t2 = t1.color;
      if (t2 != null)
        return t2;
      switch (t1.type) {
        case C.MaterialType_0:
          return K.Theme_of(context).canvasColor;
        case C.MaterialType_1:
          return K.Theme_of(context).cardColor;
        default:
          return;
      }
    },
    build$1: function(context) {
      var t2, t3, t4, shape, _this = this,
        backgroundColor = _this._getBackgroundColor$1(context),
        t1 = _this._widget,
        contents = t1.child;
      if (contents != null) {
        t1 = t1.textStyle;
        if (t1 == null)
          t1 = K.Theme_of(context).textTheme.body1;
        t2 = _this._widget;
        contents = new G.AnimatedDefaultTextStyle(contents, t1, C.C__Linear, t2.animationDuration, null);
        t1 = t2;
      }
      contents = U.NotificationListener$(new M._InkFeatures(backgroundColor, _this, contents, _this._inkFeatureRenderer), new M._MaterialState_build_closure(_this), U.LayoutChangedNotification);
      if (t1.type === C.MaterialType_0)
        if (t1.shape == null) {
          t1.toString;
          t2 = true;
        } else
          t2 = false;
      else
        t2 = false;
      if (t2) {
        t2 = t1.animationDuration;
        t3 = t1.clipBehavior;
        t4 = t1.elevation;
        t1.toString;
        return new G.AnimatedPhysicalModel(contents, C.BoxShape_0, t3, C.BorderRadius_tLn, t4, backgroundColor, false, C.Color_4278190080, C.Cubic_ifx, t2, null);
      }
      shape = _this._getShape$0();
      t1 = _this._widget;
      if (t1.type === C.MaterialType_4)
        return M._MaterialState__transparentInterior(t1.clipBehavior, contents, context, shape);
      t2 = t1.animationDuration;
      return new M._MaterialInterior(contents, shape, true, t1.clipBehavior, t1.elevation, backgroundColor, C.Color_4278190080, C.Cubic_ifx, t2, null);
    },
    _getShape$0: function() {
      var t1 = this._widget,
        t2 = t1.shape;
      if (t2 != null)
        return t2;
      t1 = t1.type;
      switch (t1) {
        case C.MaterialType_0:
        case C.MaterialType_4:
          return C.RoundedRectangleBorder_yx31;
        case C.MaterialType_1:
        case C.MaterialType_3:
          t1 = $.$get$kMaterialEdges().$index(0, t1);
          return new X.RoundedRectangleBorder(C.BorderSide_m7u, t1);
        case C.MaterialType_2:
          return C.CircleBorder_61T;
      }
      return C.RoundedRectangleBorder_yx31;
    },
    $isTickerProvider: 1,
    $asState: function() {
      return [M.Material];
    },
    $asTickerProviderStateMixin: function() {
      return [M.Material];
    }
  };
  M._MaterialState_build_closure.prototype = {
    call$1: function(notification) {
      var renderer, t1;
      H.interceptedTypeCheck(notification, "$isLayoutChangedNotification");
      renderer = H.interceptedTypeCheck($.GlobalKey__registry.$index(0, this.$this._inkFeatureRenderer).get$renderObject(), "$is_RenderInkFeatures");
      t1 = renderer._inkFeatures;
      if (t1 != null && t1.length !== 0)
        renderer.markNeedsPaint$0();
      return true;
    },
    $signature: 94
  };
  M._RenderInkFeatures.prototype = {
    addInkFeature$1: function(feature) {
      var t1, _this = this;
      if (_this._inkFeatures == null)
        _this.set$_inkFeatures(H.setRuntimeTypeInfo([], [M.InkFeature]));
      t1 = _this._inkFeatures;
      (t1 && C.JSArray_methods).add$1(t1, feature);
      _this.markNeedsPaint$0();
    },
    hitTestSelf$1: function(position) {
      return true;
    },
    paint$2: function(context, offset) {
      var canvas, t2, _i, _this = this,
        t1 = _this._inkFeatures;
      if (t1 != null && t1.length !== 0) {
        canvas = context.get$canvas(context);
        canvas.save$0(0);
        canvas.translate$2(0, offset._dx, offset._dy);
        t1 = _this._size;
        t2 = t1._dx;
        t1 = t1._dy;
        if (typeof t2 !== "number")
          return H.iae(t2);
        if (typeof t1 !== "number")
          return H.iae(t1);
        canvas.clipRect$1(new Q.Rect(0, 0, 0 + t2, 0 + t1));
        for (t1 = _this._inkFeatures, t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i)
          t1[_i]._material$_paint$1(canvas);
        canvas.restore$0(0);
      }
      _this.super$RenderProxyBoxMixin$paint(context, offset);
    },
    set$color: function(_, color) {
      H.interceptedTypeCheck(color, "$isColor");
    },
    set$_inkFeatures: function(_inkFeatures) {
      this._inkFeatures = H.assertSubtype(_inkFeatures, "$isList", [M.InkFeature], "$asList");
    },
    $isMaterialInkController: 1
  };
  M._InkFeatures.prototype = {
    createRenderObject$1: function(context) {
      var t1 = new M._RenderInkFeatures(this.vsync, null);
      t1.get$isRepaintBoundary();
      t1.get$alwaysNeedsCompositing();
      t1._needsCompositing = false;
      t1.set$child(null);
      return t1;
    },
    updateRenderObject$2: function(context, renderObject) {
      H.interceptedTypeCheck(renderObject, "$is_RenderInkFeatures");
    }
  };
  M.InkFeature.prototype = {
    dispose$0: function() {
      var t1 = this._material$_controller,
        t2 = t1._inkFeatures;
      (t2 && C.JSArray_methods).remove$1(t2, this);
      t1.markNeedsPaint$0();
      this.onRemoved.call$0();
    },
    _material$_paint$1: function(canvas) {
      var t1, transform, index, t2,
        node = this.referenceBox,
        descendants = H.setRuntimeTypeInfo([node], [K.RenderObject]);
      for (t1 = this._material$_controller; node != t1;) {
        node = H.interceptedTypeCheck(node._node$_parent, "$isRenderObject");
        C.JSArray_methods.add$1(descendants, node);
      }
      transform = new E.Matrix4(new Float64Array(16));
      transform.setIdentity$0();
      for (index = descendants.length - 1; index > 0;) {
        t1 = descendants.length;
        if (index >= t1)
          return H.ioore(descendants, index);
        t2 = descendants[index];
        --index;
        if (index >= t1)
          return H.ioore(descendants, index);
        t2.applyPaintTransform$2(descendants[index], transform);
      }
      this.paintFeature$2(canvas, transform);
    },
    toString$0: function(_) {
      return this.get$runtimeType(this).toString$0(0) + "#" + Y.shortHash(this);
    }
  };
  M.ShapeBorderTween.prototype = {
    lerp$1: function(t) {
      return Y.ShapeBorder_lerp(this.begin, this.end, t);
    },
    $asAnimatable: function() {
      return [Y.ShapeBorder];
    },
    $asTween: function() {
      return [Y.ShapeBorder];
    }
  };
  M._MaterialInterior.prototype = {
    createState$0: function() {
      return new M._MaterialInteriorState(null, C._StateLifecycle_0);
    },
    get$child: function() {
      return this.child;
    }
  };
  M._MaterialInteriorState.prototype = {
    forEachTween$1: function(visitor) {
      var _this = this;
      H.functionTypeCheck(visitor, {func: 1, ret: [R.Tween,,], args: [[R.Tween,,],, {func: 1, ret: [R.Tween,,], args: [,]}]});
      _this.set$_material$_elevation(H.assertSubtype(visitor.call$3(_this._material$_elevation, _this._widget.elevation, new M._MaterialInteriorState_forEachTween_closure()), "$isTween", [P.double], "$asTween"));
      _this._shadowColor = H.interceptedTypeCheck(visitor.call$3(_this._shadowColor, _this._widget.shadowColor, new M._MaterialInteriorState_forEachTween_closure0()), "$isColorTween");
      _this._border = H.interceptedTypeCheck(visitor.call$3(_this._border, _this._widget.shape, new M._MaterialInteriorState_forEachTween_closure1()), "$isShapeBorderTween");
    },
    build$1: function(context) {
      var t3, shape, t4, t5, t6, t7, t8, _this = this,
        t1 = _this._border,
        t2 = _this._animation;
      t1.toString;
      t3 = [P.double];
      H.assertSubtype(t2, "$isAnimation", t3, "$asAnimation");
      shape = t1.transform$1(0, t2.get$value(t2));
      t2 = _this._widget;
      t1 = t2.child;
      t2.borderOnForeground;
      t2 = T.Directionality_of(context);
      t4 = _this._widget.clipBehavior;
      t5 = _this._material$_elevation;
      t6 = _this._animation;
      t5.toString;
      H.assertSubtype(t6, "$isAnimation", t3, "$asAnimation");
      t6 = t5.transform$1(0, t6.get$value(t6));
      t5 = _this._widget.color;
      t7 = _this._shadowColor;
      t8 = _this._animation;
      t7.toString;
      H.assertSubtype(t8, "$isAnimation", t3, "$asAnimation");
      return new T.PhysicalShape(new E.ShapeBorderClipper(shape, t2), t4, t6, t5, t7.transform$1(0, t8.get$value(t8)), new M._ShapeBorderPaint(t1, shape, true, null), null);
    },
    set$_material$_elevation: function(_elevation) {
      this._material$_elevation = H.assertSubtype(_elevation, "$isTween", [P.double], "$asTween");
    },
    $asState: function() {
      return [M._MaterialInterior];
    },
    $asImplicitlyAnimatedWidgetState: function() {
      return [M._MaterialInterior];
    }
  };
  M._MaterialInteriorState_forEachTween_closure.prototype = {
    call$1: function(value) {
      return new R.Tween(H.doubleTypeCheck(value), null, [P.double]);
    },
    $signature: 65
  };
  M._MaterialInteriorState_forEachTween_closure0.prototype = {
    call$1: function(value) {
      return new R.ColorTween(H.interceptedTypeCheck(value, "$isColor"), null);
    },
    $signature: 43
  };
  M._MaterialInteriorState_forEachTween_closure1.prototype = {
    call$1: function(value) {
      return new M.ShapeBorderTween(H.interceptedTypeCheck(value, "$isShapeBorder"), null);
    },
    $signature: 97
  };
  M._ShapeBorderPaint.prototype = {
    build$1: function(context) {
      var t1 = T.Directionality_of(context);
      return T.CustomPaint$(this.child, new M._ShapeBorderPainter(this.shape, t1, null), null);
    }
  };
  M._ShapeBorderPainter.prototype = {
    paint$2: function(canvas, size) {
      var t1 = size._dx,
        t2 = size._dy;
      if (typeof t1 !== "number")
        return H.iae(t1);
      if (typeof t2 !== "number")
        return H.iae(t2);
      this.border.paint$3$textDirection(canvas, new Q.Rect(0, 0, 0 + t1, 0 + t2), this.textDirection);
    },
    shouldRepaint$1: function(oldDelegate) {
      return !J.$eq$(H.interceptedTypeCheck(oldDelegate, "$is_ShapeBorderPainter").border, this.border);
    }
  };
  M.__MaterialState_State_TickerProviderStateMixin.prototype = {
    dispose$0: function() {
      this.super$State$dispose();
    },
    didChangeDependencies$0: function() {
      var muted = !U.TickerMode_of(this._element),
        t1 = this.TickerProviderStateMixin__tickers;
      if (t1 != null)
        for (t1 = P._LinkedHashSetIterator$(t1, t1._collection$_modifications, H.getTypeArgumentByIndex(t1, 0)); t1.moveNext$0();)
          t1._collection$_current.set$muted(0, muted);
      this.super$State$didChangeDependencies();
    },
    set$_tickers: function(_tickers) {
      this.TickerProviderStateMixin__tickers = H.assertSubtype(_tickers, "$isSet", [M.Ticker], "$asSet");
    }
  };
  U.MaterialLocalizations.prototype = {};
  U._MaterialLocalizationsDelegate.prototype = {
    isSupported$1: function(locale) {
      return Q.Locale__replaceDeprecatedLanguageSubtag(locale._languageCode) === "en";
    },
    load$1: function(_, locale) {
      return new O.SynchronousFuture(C.C_DefaultMaterialLocalizations, [U.MaterialLocalizations]);
    },
    shouldReload$1: function(old) {
      H.interceptedTypeCheck(old, "$is_MaterialLocalizationsDelegate");
      return false;
    },
    $asLocalizationsDelegate: function() {
      return [U.MaterialLocalizations];
    }
  };
  U.DefaultMaterialLocalizations.prototype = {$isMaterialLocalizations: 1};
  V.MaterialPageRoute.prototype = {
    get$transitionDuration: function(_) {
      return C.Duration_300000;
    },
    get$barrierColor: function() {
      return;
    },
    get$barrierLabel: function() {
      return;
    },
    canTransitionFrom$1: function(previousRoute) {
      return !!previousRoute.$isMaterialPageRoute;
    },
    canTransitionTo$1: function(nextRoute) {
      return !!nextRoute.$isMaterialPageRoute && true;
    },
    buildPage$3: function(context, animation, secondaryAnimation) {
      var _null = null,
        t1 = [P.double];
      H.assertSubtype(animation, "$isAnimation", t1, "$asAnimation");
      H.assertSubtype(secondaryAnimation, "$isAnimation", t1, "$asAnimation");
      return T.Semantics$(_null, this.builder.call$1(context), false, _null, true, _null, _null, true, _null);
    },
    buildTransitions$4: function(context, animation, secondaryAnimation, child) {
      var theme, platform, matchingBuilder,
        t1 = [P.double];
      H.assertSubtype(animation, "$isAnimation", t1, "$asAnimation");
      H.assertSubtype(secondaryAnimation, "$isAnimation", t1, "$asAnimation");
      theme = K.Theme_of(context).pageTransitionsTheme;
      H.assertSubtype(this, "$isPageRoute", this.$ti, "$asPageRoute");
      platform = K.Theme_of(context).platform;
      matchingBuilder = theme.get$builders().$index(0, platform);
      if (matchingBuilder == null)
        matchingBuilder = C.C_FadeUpwardsPageTransitionsBuilder;
      return matchingBuilder.buildTransitions$1$5(this, context, animation, secondaryAnimation, child, H.getTypeArgumentByIndex(this, 0));
    },
    get$debugLabel: function() {
      return T.TransitionRoute.prototype.get$debugLabel.call(this) + "(" + H.S(this.settings.name) + ")";
    },
    get$maintainState: function() {
      return true;
    }
  };
  K._FadeUpwardsPageTransition.prototype = {
    build$1: function(context) {
      return K.SlideTransition$(K.FadeTransition$(this.child, this._opacityAnimation), this._positionAnimation, null, true);
    }
  };
  K.PageTransitionsBuilder.prototype = {};
  K.FadeUpwardsPageTransitionsBuilder.prototype = {
    buildTransitions$1$5: function(route, context, animation, secondaryAnimation, child, $T) {
      var t1, t2, t3;
      H.assertSubtype(route, "$isPageRoute", [$T], "$asPageRoute");
      t1 = P.double;
      t2 = [t1];
      H.assertSubtype(animation, "$isAnimation", t2, "$asAnimation");
      H.assertSubtype(secondaryAnimation, "$isAnimation", t2, "$asAnimation");
      t2 = $.$get$_FadeUpwardsPageTransition__bottomUpTween();
      t3 = $.$get$_FadeUpwardsPageTransition__fastOutSlowInTween();
      t2.toString;
      return new K._FadeUpwardsPageTransition(animation.drive$1$1(new R._ChainedEvaluation(H.assertSubtype(t3, "$isAnimatable", [t1], "$asAnimatable"), t2, [H.getRuntimeTypeArgument(t2, "Animatable", 0)]), Q.Offset), animation.drive$1$1($.$get$_FadeUpwardsPageTransition__easeInTween(), t1), child, null);
    }
  };
  K.CupertinoPageTransitionsBuilder.prototype = {
    buildTransitions$1$5: function(route, context, animation, secondaryAnimation, child, $T) {
      var t1 = [P.double];
      return D.CupertinoPageRoute_buildPageTransitions(H.assertSubtype(route, "$isPageRoute", [$T], "$asPageRoute"), context, H.assertSubtype(animation, "$isAnimation", t1, "$asAnimation"), H.assertSubtype(secondaryAnimation, "$isAnimation", t1, "$asAnimation"), child, $T);
    }
  };
  K.PageTransitionsTheme.prototype = {
    get$builders: function() {
      return C.Map_leqom;
    },
    _all$1: function(builders) {
      var t1 = K.PageTransitionsBuilder,
        t2 = H.getTypeArgumentByIndex(C.List_U0W, 0);
      return new H.MappedListIterable(C.List_U0W, H.functionTypeCheck(new K.PageTransitionsTheme__all_closure(H.assertSubtype(builders, "$isMap", [T.TargetPlatform, t1], "$asMap")), {func: 1, ret: t1, args: [t2]}), [t2, t1]).toList$0(0);
    },
    $eq: function(_, other) {
      var _this = this;
      if (other == null)
        return false;
      if (_this === other)
        return true;
      if (!J.get$runtimeType$(other).$eq(0, new H.TypeImpl(H.getRti(_this))))
        return false;
      H.interceptedTypeCheck(other, "$isPageTransitionsTheme");
      if (_this.get$builders() === other.get$builders())
        return true;
      return S.listEquals(_this._all$1(_this.get$builders()), _this._all$1(other.get$builders()), K.PageTransitionsBuilder);
    },
    get$hashCode: function(_) {
      return Q.hashList(this._all$1(this.get$builders()));
    }
  };
  K.PageTransitionsTheme__all_closure.prototype = {
    call$1: function(platform) {
      return this.builders.$index(0, H.interceptedTypeCheck(platform, "$isTargetPlatform"));
    },
    $signature: 98
  };
  M._ScaffoldSlot.prototype = {
    toString$0: function(_) {
      return this._scaffold$_name;
    }
  };
  M.ScaffoldPrelayoutGeometry.prototype = {};
  M._TransitionSnapshotFabLocation.prototype = {
    getOffset$1: function(scaffoldGeometry) {
      var _this = this;
      return _this.animator.getOffset$3$begin$end$progress(_this.begin.getOffset$1(scaffoldGeometry), _this.end.getOffset$1(scaffoldGeometry), _this.progress);
    },
    toString$0: function(_) {
      var _this = this;
      return new H.TypeImpl(H.getRti(_this)).toString$0(0) + "(begin: " + H.S(_this.begin) + ", end: " + H.S(_this.end) + ", progress: " + H.S(_this.progress) + ")";
    }
  };
  M.ScaffoldGeometry.prototype = {};
  M._ScaffoldGeometryNotifier.prototype = {
    _updateWith$3$bottomNavigationBarTop$floatingActionButtonArea$floatingActionButtonScale: function(bottomNavigationBarTop, floatingActionButtonArea, floatingActionButtonScale) {
      var t1, t2, _this = this;
      _this.floatingActionButtonScale = floatingActionButtonScale == null ? _this.floatingActionButtonScale : floatingActionButtonScale;
      t1 = _this.geometry;
      t2 = bottomNavigationBarTop == null ? t1.bottomNavigationBarTop : bottomNavigationBarTop;
      _this.geometry = new M.ScaffoldGeometry(t2, floatingActionButtonArea == null ? t1.floatingActionButtonArea : floatingActionButtonArea);
      _this.notifyListeners$0();
    },
    _updateWith$2$bottomNavigationBarTop$floatingActionButtonArea: function(bottomNavigationBarTop, floatingActionButtonArea) {
      return this._updateWith$3$bottomNavigationBarTop$floatingActionButtonArea$floatingActionButtonScale(bottomNavigationBarTop, floatingActionButtonArea, null);
    },
    _updateWith$1$floatingActionButtonScale: function(floatingActionButtonScale) {
      return this._updateWith$3$bottomNavigationBarTop$floatingActionButtonArea$floatingActionButtonScale(null, null, floatingActionButtonScale);
    }
  };
  M._ScaffoldLayout.prototype = {};
  M._FloatingActionButtonTransition.prototype = {
    createState$0: function() {
      return new M._FloatingActionButtonTransitionState(null, C._StateLifecycle_0);
    },
    get$child: function() {
      return this.child;
    }
  };
  M._FloatingActionButtonTransitionState.prototype = {
    initState$0: function() {
      var t1, _this = this, _null = null;
      _this.super$State$initState();
      t1 = G.AnimationController$(C.AnimationBehavior_0, _null, C.Duration_200000, 0, 1, _null, _this);
      t1.addStatusListener$1(_this.get$_handlePreviousAnimationStatusChanged());
      _this._previousController = t1;
      _this._currentController = G.AnimationController$(C.AnimationBehavior_0, _null, C.Duration_200000, 0, 1, _null, _this);
      _this._updateAnimations$0();
      _this._widget.child;
      _this._currentController.set$value(0, 1);
    },
    dispose$0: function() {
      this._previousController.dispose$0();
      this._currentController.dispose$0();
      this.super$__FloatingActionButtonTransitionState_State_TickerProviderStateMixin$dispose();
    },
    didUpdateWidget$1: function(oldWidget) {
      var t1, t2, t3, currentValue, _this = this;
      H.interceptedTypeCheck(oldWidget, "$is_FloatingActionButtonTransition");
      _this.super$State$didUpdateWidget(oldWidget);
      t1 = oldWidget.child;
      t2 = _this._widget.child;
      t2 = J.$eq$(t1.key, t2.key);
      if (t2)
        return;
      t2 = oldWidget.fabMotionAnimator;
      t3 = _this._widget;
      if (t2 != t3.fabMotionAnimator || oldWidget.fabMoveAnimation != t3.fabMoveAnimation)
        _this._updateAnimations$0();
      t2 = _this._previousController;
      if (t2._status === C.AnimationStatus_0) {
        t3 = _this._currentController;
        currentValue = t3._animation_controller$_value;
        if (currentValue === 0 || false) {
          _this._previousChild = null;
          _this._widget.child;
          t3.forward$0(0);
        } else {
          _this._previousChild = t1;
          t2.set$value(0, currentValue);
          t2.reverse$0(0);
          _this._currentController.set$value(0, 0);
        }
      }
    },
    _updateAnimations$0: function() {
      var t6, t7, t8, t9, t10, moveScaleAnimation, t11, moveRotationAnimation, _this = this, _null = null,
        previousExitScaleAnimation = S.CurvedAnimation$(C.Cubic_JUR, _this._previousController, _null),
        t1 = P.double,
        t2 = [t1],
        t3 = H.assertSubtype(S.CurvedAnimation$(C.Cubic_JUR, _this._previousController, _null), "$isAnimation", t2, "$asAnimation"),
        currentEntranceScaleAnimation = S.CurvedAnimation$(C.Cubic_JUR, _this._currentController, _null),
        currentEntranceRotationAnimation = _this._currentController.drive$1$1($.$get$_FloatingActionButtonTransitionState__entranceTurnTween(), t1),
        t4 = _this._widget,
        t5 = t4.fabMotionAnimator;
      t4 = t4.fabMoveAnimation;
      t5.toString;
      H.assertSubtype(t4, "$isAnimation", t2, "$asAnimation");
      t5 = {func: 1, ret: -1, args: [X.AnimationStatus]};
      t6 = [t5];
      t5 = [t5];
      t7 = {func: 1, ret: -1};
      t8 = [t7];
      t9 = [t7];
      t10 = [t1];
      moveScaleAnimation = new A._AnimationSwap(t4, 0.5, new S.ReverseAnimation(t4.drive$1$1(new R.CurveTween(new Z.FlippedCurve(C.Interval_E4y)), t1), new R.ObserverList(H.setRuntimeTypeInfo([], t6), t5), 0), t4.drive$1$1(new R.CurveTween(C.Interval_E4y), t1), new R.ObserverList(H.setRuntimeTypeInfo([], t6), t5), new R.ObserverList(H.setRuntimeTypeInfo([], t8), t9), 0, t10);
      t4 = _this._widget;
      t11 = t4.fabMotionAnimator;
      t4 = t4.fabMoveAnimation;
      t11.toString;
      H.assertSubtype(t4, "$isAnimation", t2, "$asAnimation");
      moveRotationAnimation = new A._AnimationSwap(t4, 0.5, t4.drive$1$1($.$get$_ScalingFabMotionAnimator__rotationTween(), t1), new S.ReverseAnimation(t4.drive$1$1($.$get$_ScalingFabMotionAnimator__thresholdCenterTween(), t1), new R.ObserverList(H.setRuntimeTypeInfo([], t6), t5), 0), new R.ObserverList(H.setRuntimeTypeInfo([], t6), t5), new R.ObserverList(H.setRuntimeTypeInfo([], t8), t9), 0, t10);
      t10 = [t1];
      _this.set$_previousScaleAnimation(new S.AnimationMin(moveScaleAnimation, previousExitScaleAnimation, new R.ObserverList(H.setRuntimeTypeInfo([], t6), t5), new R.ObserverList(H.setRuntimeTypeInfo([], t8), t9), 0, t10));
      _this.set$_currentScaleAnimation(new S.AnimationMin(moveScaleAnimation, currentEntranceScaleAnimation, new R.ObserverList(H.setRuntimeTypeInfo([], t6), t5), new R.ObserverList(H.setRuntimeTypeInfo([], t8), t9), 0, t10));
      _this.set$_extendedCurrentScaleAnimation(_this._currentScaleAnimation.drive$1$1(new R.CurveTween(C.Interval_75R), t1));
      _this.set$_previousRotationAnimation(S.TrainHoppingAnimation$(new R._AnimatedEvaluation(t3, new R.Tween(1, 1, [t1]), [t1]), moveRotationAnimation, _null));
      _this.set$_currentRotationAnimation(S.TrainHoppingAnimation$(currentEntranceRotationAnimation, moveRotationAnimation, _null));
      t1 = _this._currentScaleAnimation;
      t1.toString;
      t7 = H.functionTypeCheck(_this.get$_onProgressChanged(), t7);
      t1.didRegisterListener$0();
      t1 = t1.AnimationLocalListenersMixin__listeners;
      H.assertSubtypeOfRuntimeType(t7, H.getTypeArgumentByIndex(t1, 0));
      t1._isDirty = true;
      C.JSArray_methods.add$1(t1._list, t7);
      t1 = _this._previousScaleAnimation;
      t1.didRegisterListener$0();
      t1 = t1.AnimationLocalListenersMixin__listeners;
      H.assertSubtypeOfRuntimeType(t7, H.getTypeArgumentByIndex(t1, 0));
      t1._isDirty = true;
      C.JSArray_methods.add$1(t1._list, t7);
    },
    _handlePreviousAnimationStatusChanged$1: function($status) {
      this.setState$1(new M._FloatingActionButtonTransitionState__handlePreviousAnimationStatusChanged_closure(this, H.interceptedTypeCheck($status, "$isAnimationStatus")));
    },
    _isExtendedFloatingActionButton$1: function(widget) {
      if (!(widget instanceof E.FloatingActionButton))
        return false;
      return false;
    },
    build$1: function(context) {
      var t1, t2, _this = this,
        children = H.setRuntimeTypeInfo([], [N.Widget]);
      if (_this._previousController._status !== C.AnimationStatus_0) {
        _this._isExtendedFloatingActionButton$1(_this._previousChild);
        t1 = _this._previousScaleAnimation;
        t2 = _this._previousRotationAnimation;
        C.JSArray_methods.add$1(children, K.ScaleTransition$(K.RotationTransition$(_this._previousChild, t2), t1));
      }
      _this._isExtendedFloatingActionButton$1(_this._widget.child);
      t1 = _this._currentScaleAnimation;
      t2 = _this._currentRotationAnimation;
      C.JSArray_methods.add$1(children, K.ScaleTransition$(K.RotationTransition$(_this._widget.child, t2), t1));
      return T.Stack$(C.Alignment_1_0, children, C.StackFit_0);
    },
    _onProgressChanged$0: function() {
      var t3,
        t1 = this._previousScaleAnimation,
        t2 = t1.first;
      t2 = t2.get$value(t2);
      t1 = t1.next;
      t1 = t1.get$value(t1);
      t1 = Math.min(H.checkNum(t2), H.checkNum(t1));
      t2 = this._currentScaleAnimation;
      t3 = t2.first;
      t3 = t3.get$value(t3);
      t2 = t2.next;
      t2 = t2.get$value(t2);
      t2 = Math.max(t1, Math.min(H.checkNum(t3), H.checkNum(t2)));
      this._widget.geometryNotifier._updateWith$1$floatingActionButtonScale(t2);
    },
    set$_previousScaleAnimation: function(_previousScaleAnimation) {
      this._previousScaleAnimation = H.assertSubtype(_previousScaleAnimation, "$isAnimation", [P.double], "$asAnimation");
    },
    set$_previousRotationAnimation: function(_previousRotationAnimation) {
      this._previousRotationAnimation = H.assertSubtype(_previousRotationAnimation, "$isAnimation", [P.double], "$asAnimation");
    },
    set$_currentScaleAnimation: function(_currentScaleAnimation) {
      this._currentScaleAnimation = H.assertSubtype(_currentScaleAnimation, "$isAnimation", [P.double], "$asAnimation");
    },
    set$_extendedCurrentScaleAnimation: function(_extendedCurrentScaleAnimation) {
      this._extendedCurrentScaleAnimation = H.assertSubtype(_extendedCurrentScaleAnimation, "$isAnimation", [P.double], "$asAnimation");
    },
    set$_currentRotationAnimation: function(_currentRotationAnimation) {
      this._currentRotationAnimation = H.assertSubtype(_currentRotationAnimation, "$isAnimation", [P.double], "$asAnimation");
    },
    $isTickerProvider: 1,
    $asState: function() {
      return [M._FloatingActionButtonTransition];
    },
    $asTickerProviderStateMixin: function() {
      return [M._FloatingActionButtonTransition];
    }
  };
  M._FloatingActionButtonTransitionState__handlePreviousAnimationStatusChanged_closure.prototype = {
    call$0: function() {
      if (this.status === C.AnimationStatus_0) {
        var t1 = this.$this;
        t1._widget.child;
        t1._currentController.forward$0(0);
      }
    },
    $signature: 0
  };
  M.Scaffold.prototype = {
    createState$0: function() {
      var _null = null,
        t1 = [Z.DrawerControllerState],
        t2 = {func: 1, ret: -1};
      return new M.ScaffoldState(new N.LabeledGlobalKey(_null, t1), new N.LabeledGlobalKey(_null, t1), P.ListQueue$([M.ScaffoldFeatureController, N.SnackBar, N.SnackBarClosedReason]), H.setRuntimeTypeInfo([], [M._PersistentBottomSheet]), new F.ScrollController(0, true, _null, H.setRuntimeTypeInfo([], [A.ScrollPosition]), new R.ObserverList(H.setRuntimeTypeInfo([], [t2]), [t2])), _null, C._StateLifecycle_0);
    }
  };
  M.ScaffoldState.prototype = {
    hideCurrentSnackBar$1$reason: function(reason) {
      var t2, mediaQuery, completer, _this = this,
        t1 = _this._snackBars;
      if (t1._head !== t1._tail) {
        C.JSNull_methods.get$status(null);
        t2 = false;
      } else
        t2 = true;
      if (t2)
        return;
      mediaQuery = F.MediaQuery_of(_this._element, false);
      completer = t1.get$first(t1)._scaffold$_completer;
      if (mediaQuery.accessibleNavigation) {
        C.JSNull_methods.set$value(null, 0);
        completer.complete$1(0, reason);
      } else
        C.JSNull_methods.reverse$0(null).then$1$1(new M.ScaffoldState_hideCurrentSnackBar_closure(_this, completer, reason), -1);
      t1 = _this._snackBarTimer;
      if (t1 != null)
        t1.cancel$0(0);
      _this._snackBarTimer = null;
    },
    _maybeBuildCurrentBottomSheet$0: function() {
      this._widget.toString;
    },
    _moveFloatingActionButton$1: function(newLocation) {
      var t2, t3, t4, restartAnimationFrom, _this = this, t1 = {},
        previousLocation = _this._floatingActionButtonLocation;
      t1.previousLocation = previousLocation;
      t2 = _this._floatingActionButtonMoveController;
      t3 = t2._ticker;
      if (t3 != null && t3._future != null) {
        t3 = _this._previousFloatingActionButtonLocation;
        t4 = _this._floatingActionButtonAnimator;
        t2 = t2._animation_controller$_value;
        t1.previousLocation = new M._TransitionSnapshotFabLocation(t3, previousLocation, t4, t2);
        t4.toString;
        if (typeof t2 !== "number")
          return H.iae(t2);
        restartAnimationFrom = Math.min(1 - t2, t2);
      } else
        restartAnimationFrom = 0;
      _this.setState$1(new M.ScaffoldState__moveFloatingActionButton_closure(t1, _this, newLocation));
      _this._floatingActionButtonMoveController.forward$1$from(0, restartAnimationFrom);
    },
    _handleStatusBarTap$0: function() {
      var t1 = this._primaryScrollController;
      if (t1._positions.length !== 0)
        t1.animateTo$3$curve$duration(0, C.C__Linear, C.Duration_300000);
    },
    get$_resizeToAvoidBottomInset: function() {
      this._widget.toString;
      return true;
    },
    initState$0: function() {
      var t1, t2, _this = this;
      _this.super$State$initState();
      t1 = {func: 1, ret: -1};
      _this._geometryNotifier = new M._ScaffoldGeometryNotifier(C.ScaffoldGeometry_null_null, new R.ObserverList(H.setRuntimeTypeInfo([], [t1]), [t1]));
      t1 = _this._widget;
      t2 = t1.floatingActionButtonLocation;
      _this._floatingActionButtonLocation = t2;
      t1.toString;
      _this._floatingActionButtonAnimator = C.C__ScalingFabMotionAnimator;
      _this._previousFloatingActionButtonLocation = t2;
      _this._floatingActionButtonMoveController = G.AnimationController$(C.AnimationBehavior_0, null, new P.Duration(400000), 0, 1, 1, _this);
      _this._maybeBuildCurrentBottomSheet$0();
    },
    didUpdateWidget$1: function(oldWidget) {
      var t1, _this = this;
      H.interceptedTypeCheck(oldWidget, "$isScaffold");
      t1 = _this._widget;
      t1.toString;
      oldWidget.toString;
      t1 = t1.floatingActionButtonLocation;
      if (t1 !== oldWidget.floatingActionButtonLocation)
        _this._moveFloatingActionButton$1(t1);
      _this._widget.toString;
      _this.super$State$didUpdateWidget(oldWidget);
    },
    didChangeDependencies$0: function() {
      var t1, _this = this,
        mediaQuery = F.MediaQuery_of(_this._element, false);
      if (_this._accessibleNavigation === true)
        if (!mediaQuery.accessibleNavigation) {
          t1 = _this._snackBarTimer;
          t1 = t1 != null && t1._handle == null;
        } else
          t1 = false;
      else
        t1 = false;
      if (t1)
        _this.hideCurrentSnackBar$1$reason(C.SnackBarClosedReason_5);
      _this._accessibleNavigation = mediaQuery.accessibleNavigation;
      _this.super$_ScaffoldState_State_TickerProviderStateMixin$didChangeDependencies();
    },
    dispose$0: function() {
      var t2, _i, t3, _this = this,
        t1 = _this._snackBarTimer;
      if (t1 != null)
        t1.cancel$0(0);
      _this._snackBarTimer = null;
      _this._geometryNotifier.set$_listeners(null);
      for (t1 = _this._dismissedBottomSheets, t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
        t3 = t1[_i].animationController;
        t3._ticker.dispose$0();
        t3._ticker = null;
        t3.super$AnimationEagerListenerMixin$dispose();
      }
      t1 = _this._currentBottomSheet;
      if (t1 != null)
        t1._scaffold$_widget.animationController.dispose$0();
      _this._floatingActionButtonMoveController.dispose$0();
      _this.super$_ScaffoldState_State_TickerProviderStateMixin$dispose();
    },
    _addIfNonNull$8$removeBottomInset$removeBottomPadding$removeLeftPadding$removeRightPadding$removeTopPadding: function(children, child, childId, removeBottomInset, removeBottomPadding, removeLeftPadding, removeRightPadding, removeTopPadding) {
      var data;
      H.assertSubtype(children, "$isList", [T.LayoutId], "$asList");
      data = F.MediaQuery_of(this._element, false).removePadding$4$removeBottom$removeLeft$removeRight$removeTop(removeBottomPadding, removeLeftPadding, removeRightPadding, removeTopPadding);
      if (removeBottomInset)
        data = data.removeViewInsets$1$removeBottom(true);
      if (child != null)
        C.JSArray_methods.add$1(children, new T.LayoutId(childId, new F.MediaQuery(data, child, null), new D.ValueKey(childId, [P.Object])));
    },
    _addIfNonNull$7$removeBottomPadding$removeLeftPadding$removeRightPadding$removeTopPadding: function(children, child, childId, removeBottomPadding, removeLeftPadding, removeRightPadding, removeTopPadding) {
      return this._addIfNonNull$8$removeBottomInset$removeBottomPadding$removeLeftPadding$removeRightPadding$removeTopPadding(children, child, childId, false, removeBottomPadding, removeLeftPadding, removeRightPadding, removeTopPadding);
    },
    _buildEndDrawer$2: function(children, textDirection) {
      H.assertSubtype(children, "$isList", [T.LayoutId], "$asList");
      this._widget.toString;
    },
    _buildDrawer$2: function(children, textDirection) {
      H.assertSubtype(children, "$isList", [T.LayoutId], "$asList");
      this._widget.toString;
    },
    build$1: function(context) {
      var t1, route, t2, children, t3, bottomSheets, stack, minInsets, _this = this, _null = null,
        mediaQuery = F.MediaQuery_of(context, false),
        themeData = K.Theme_of(context),
        textDirection = T.Directionality_of(context);
      _this._accessibleNavigation = mediaQuery.accessibleNavigation;
      t1 = _this._snackBars;
      if (!t1.get$isEmpty(t1)) {
        route = T.ModalRoute_of(context, P.Object);
        if (route == null || route.get$isCurrent())
          _null.get$isCompleted();
        else {
          t2 = _this._snackBarTimer;
          if (t2 != null)
            t2.cancel$0(0);
          _this._snackBarTimer = null;
        }
      }
      children = H.setRuntimeTypeInfo([], [T.LayoutId]);
      t2 = _this._widget;
      t3 = t2.body;
      t2.toString;
      _this.get$_resizeToAvoidBottomInset();
      _this._addIfNonNull$8$removeBottomInset$removeBottomPadding$removeLeftPadding$removeRightPadding$removeTopPadding(children, t3, C._ScaffoldSlot_0, true, false, false, false, false);
      _this._widget.toString;
      if (!t1.get$isEmpty(t1)) {
        t1 = t1.get$first(t1)._scaffold$_widget;
        _this._widget.toString;
        _this._addIfNonNull$7$removeBottomPadding$removeLeftPadding$removeRightPadding$removeTopPadding(children, t1, C._ScaffoldSlot_3, false, false, false, true);
      }
      _this._widget.toString;
      if (_this._currentBottomSheet != null || _this._dismissedBottomSheets.length !== 0) {
        bottomSheets = H.setRuntimeTypeInfo([], [N.Widget]);
        t1 = _this._dismissedBottomSheets;
        if (t1.length !== 0)
          C.JSArray_methods.addAll$1(bottomSheets, t1);
        t1 = _this._currentBottomSheet;
        if (t1 != null)
          C.JSArray_methods.add$1(bottomSheets, t1._scaffold$_widget);
        stack = T.Stack$(C.Alignment_0_1, bottomSheets, C.StackFit_0);
        _this.get$_resizeToAvoidBottomInset();
        _this._addIfNonNull$7$removeBottomPadding$removeLeftPadding$removeRightPadding$removeTopPadding(children, stack, C._ScaffoldSlot_2, true, false, false, true);
      }
      _this._addIfNonNull$7$removeBottomPadding$removeLeftPadding$removeRightPadding$removeTopPadding(children, new M._FloatingActionButtonTransition(_this._widget.floatingActionButton, _this._floatingActionButtonMoveController, _this._floatingActionButtonAnimator, _this._geometryNotifier, _null), C._ScaffoldSlot_6, true, true, true, true);
      switch (themeData.platform) {
        case C.TargetPlatform_2:
          _this._addIfNonNull$7$removeBottomPadding$removeLeftPadding$removeRightPadding$removeTopPadding(children, D.GestureDetector$(C.HitTestBehavior_1, _null, C.DragStartBehavior_1, true, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _this.get$_handleStatusBarTap(), _null, _null, _null, _null), C._ScaffoldSlot_9, true, false, false, true);
          break;
        case C.TargetPlatform_0:
        case C.TargetPlatform_1:
          break;
      }
      if (_this._endDrawerOpened) {
        _this._buildDrawer$2(children, textDirection);
        _this._buildEndDrawer$2(children, textDirection);
      } else {
        _this._buildEndDrawer$2(children, textDirection);
        _this._buildDrawer$2(children, textDirection);
      }
      t1 = mediaQuery.padding;
      _this.get$_resizeToAvoidBottomInset();
      t2 = mediaQuery.viewInsets;
      minInsets = t1.copyWith$1$bottom(t2._bottom);
      t1 = _this._widget.backgroundColor;
      if (t1 == null)
        t1 = themeData.scaffoldBackgroundColor;
      return new M._ScaffoldScope(false, new E.PrimaryScrollController(_this._primaryScrollController, M.Material$(C.Duration_200000, K.AnimatedBuilder$(_this._floatingActionButtonMoveController, new M.ScaffoldState_build_closure(_this, children, minInsets, textDirection), _null), C.Clip_0, t1, 0, _null, _null, _null, C.MaterialType_0), _null), _null);
    },
    $isTickerProvider: 1,
    $asState: function() {
      return [M.Scaffold];
    },
    $asTickerProviderStateMixin: function() {
      return [M.Scaffold];
    }
  };
  M.ScaffoldState_hideCurrentSnackBar_closure.prototype = {
    call$1: function(value) {
      var t1 = this.completer;
      if (t1.future._state === 0)
        t1.complete$1(0, this.reason);
    },
    $signature: 36
  };
  M.ScaffoldState__moveFloatingActionButton_closure.prototype = {
    call$0: function() {
      var t1 = this.$this;
      t1._previousFloatingActionButtonLocation = this._box_0.previousLocation;
      t1._floatingActionButtonLocation = this.newLocation;
    },
    $signature: 0
  };
  M.ScaffoldState_build_closure.prototype = {
    call$2: function(context, child) {
      var t1, t2, t3, t4, _this = this;
      H.interceptedTypeCheck(context, "$isBuildContext");
      H.interceptedTypeCheck(child, "$isWidget");
      t1 = _this.$this;
      t2 = t1._floatingActionButtonLocation;
      t3 = t1._floatingActionButtonMoveController._animation_controller$_value;
      t4 = t1._floatingActionButtonAnimator;
      return new T.CustomMultiChildLayout(new M._ScaffoldLayout(_this.minInsets, _this.textDirection, t1._geometryNotifier, t1._previousFloatingActionButtonLocation, t2, t3, t4), _this.children, null);
    },
    "call*": "call$2",
    $requiredArgCount: 2,
    $signature: 100
  };
  M.ScaffoldFeatureController.prototype = {};
  M._PersistentBottomSheet.prototype = {};
  M._ScaffoldScope.prototype = {
    updateShouldNotify$1: function(oldWidget) {
      return this.hasDrawer !== H.interceptedTypeCheck(oldWidget, "$is_ScaffoldScope").hasDrawer;
    }
  };
  M._ScaffoldState_State_TickerProviderStateMixin.prototype = {
    dispose$0: function() {
      this.super$State$dispose();
    },
    didChangeDependencies$0: function() {
      var muted = !U.TickerMode_of(this._element),
        t1 = this.TickerProviderStateMixin__tickers;
      if (t1 != null)
        for (t1 = P._LinkedHashSetIterator$(t1, t1._collection$_modifications, H.getTypeArgumentByIndex(t1, 0)); t1.moveNext$0();)
          t1._collection$_current.set$muted(0, muted);
      this.super$State$didChangeDependencies();
    },
    set$_tickers: function(_tickers) {
      this.TickerProviderStateMixin__tickers = H.assertSubtype(_tickers, "$isSet", [M.Ticker], "$asSet");
    }
  };
  M.__FloatingActionButtonTransitionState_State_TickerProviderStateMixin.prototype = {
    dispose$0: function() {
      this.super$State$dispose();
    },
    didChangeDependencies$0: function() {
      var muted = !U.TickerMode_of(this._element),
        t1 = this.TickerProviderStateMixin__tickers;
      if (t1 != null)
        for (t1 = P._LinkedHashSetIterator$(t1, t1._collection$_modifications, H.getTypeArgumentByIndex(t1, 0)); t1.moveNext$0();)
          t1._collection$_current.set$muted(0, muted);
      this.super$State$didChangeDependencies();
    },
    set$_tickers: function(_tickers) {
      this.TickerProviderStateMixin__tickers = H.assertSubtype(_tickers, "$isSet", [M.Ticker], "$asSet");
    }
  };
  Q.ShowValueIndicator.prototype = {
    toString$0: function(_) {
      return this._slider_theme$_name;
    }
  };
  Q.SliderThemeData.prototype = {
    get$hashCode: function(_) {
      var _this = this;
      return Q.hashValues(_this.activeTrackColor, _this.inactiveTrackColor, _this.disabledActiveTrackColor, _this.disabledInactiveTrackColor, _this.activeTickMarkColor, _this.inactiveTickMarkColor, _this.disabledActiveTickMarkColor, _this.disabledInactiveTickMarkColor, _this.thumbColor, _this.disabledThumbColor, _this.overlayColor, _this.valueIndicatorColor, _this.thumbShape, _this.valueIndicatorShape, _this.showValueIndicator, _this.valueIndicatorTextStyle, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd);
    },
    $eq: function(_, other) {
      var _this = this;
      if (other == null)
        return false;
      if (_this === other)
        return true;
      if (!J.get$runtimeType$(other).$eq(0, new H.TypeImpl(H.getRti(_this))))
        return false;
      H.interceptedTypeCheck(other, "$isSliderThemeData");
      return J.$eq$(other.activeTrackColor, _this.activeTrackColor) && J.$eq$(other.inactiveTrackColor, _this.inactiveTrackColor) && J.$eq$(other.disabledActiveTrackColor, _this.disabledActiveTrackColor) && J.$eq$(other.disabledInactiveTrackColor, _this.disabledInactiveTrackColor) && J.$eq$(other.activeTickMarkColor, _this.activeTickMarkColor) && J.$eq$(other.inactiveTickMarkColor, _this.inactiveTickMarkColor) && J.$eq$(other.disabledActiveTickMarkColor, _this.disabledActiveTickMarkColor) && J.$eq$(other.disabledInactiveTickMarkColor, _this.disabledInactiveTickMarkColor) && J.$eq$(other.thumbColor, _this.thumbColor) && J.$eq$(other.disabledThumbColor, _this.disabledThumbColor) && J.$eq$(other.overlayColor, _this.overlayColor) && J.$eq$(other.valueIndicatorColor, _this.valueIndicatorColor) && other.thumbShape === _this.thumbShape && other.valueIndicatorShape === _this.valueIndicatorShape && other.showValueIndicator === _this.showValueIndicator && J.$eq$(other.valueIndicatorTextStyle, _this.valueIndicatorTextStyle);
    }
  };
  Q.SliderComponentShape.prototype = {};
  Q.RoundSliderThumbShape.prototype = {};
  Q.PaddleSliderValueIndicatorShape.prototype = {};
  N.SnackBarClosedReason.prototype = {
    toString$0: function(_) {
      return this._snack_bar$_name;
    }
  };
  N.SnackBar.prototype = {};
  U.TabBarTheme.prototype = {
    get$hashCode: function(_) {
      var _this = this;
      return Q.hashValues(_this.indicator, _this.indicatorSize, _this.labelColor, _this.labelStyle, _this.unselectedLabelColor, _this.unselectedLabelStyle, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd);
    },
    $eq: function(_, other) {
      var t1, _this = this;
      if (other == null)
        return false;
      if (_this === other)
        return true;
      if (!J.get$runtimeType$(other).$eq(0, new H.TypeImpl(H.getRti(_this))))
        return false;
      H.interceptedTypeCheck(other, "$isTabBarTheme");
      if (J.$eq$(other.indicator, _this.indicator))
        t1 = J.$eq$(other.labelColor, _this.labelColor) && J.$eq$(other.labelStyle, _this.labelStyle) && J.$eq$(other.unselectedLabelColor, _this.unselectedLabelColor) && J.$eq$(other.unselectedLabelStyle, _this.unselectedLabelStyle);
      else
        t1 = false;
      return t1;
    }
  };
  R.TextTheme.prototype = {
    merge$1: function(other) {
      var t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t20, t21, t22, t23, t24, t25, t26, _this = this, _null = null;
      if (other == null)
        return _this;
      t1 = _this.display4;
      t2 = t1 == null ? _null : t1.merge$1(other.display4);
      if (t2 == null)
        t2 = other.display4;
      t3 = _this.display3;
      t4 = t3 == null ? _null : t3.merge$1(other.display3);
      if (t4 == null)
        t4 = other.display3;
      t5 = _this.display2;
      t6 = t5 == null ? _null : t5.merge$1(other.display2);
      if (t6 == null)
        t6 = other.display2;
      t7 = _this.display1;
      t8 = t7 == null ? _null : t7.merge$1(other.display1);
      if (t8 == null)
        t8 = other.display1;
      t9 = _this.headline;
      t10 = t9 == null ? _null : t9.merge$1(other.headline);
      if (t10 == null)
        t10 = other.headline;
      t11 = _this.title;
      t12 = t11 == null ? _null : t11.merge$1(other.title);
      if (t12 == null)
        t12 = other.title;
      t13 = _this.subhead;
      t14 = t13 == null ? _null : t13.merge$1(other.subhead);
      if (t14 == null)
        t14 = other.subhead;
      t15 = _this.body2;
      t16 = t15 == null ? _null : t15.merge$1(other.body2);
      if (t16 == null)
        t16 = other.body2;
      t17 = _this.body1;
      t18 = t17 == null ? _null : t17.merge$1(other.body1);
      if (t18 == null)
        t18 = other.body1;
      t19 = _this.caption;
      t20 = t19 == null ? _null : t19.merge$1(other.caption);
      if (t20 == null)
        t20 = other.caption;
      t21 = _this.button;
      t22 = t21 == null ? _null : t21.merge$1(other.button);
      if (t22 == null)
        t22 = other.button;
      t23 = _this.subtitle;
      t24 = t23 == null ? _null : t23.merge$1(other.subtitle);
      if (t24 == null)
        t24 = other.subtitle;
      t25 = _this.overline;
      t26 = t25 == null ? _null : t25.merge$1(other.overline);
      if (t26 == null)
        t26 = other.overline;
      t1 = t2 == null ? t1 : t2;
      t2 = t4 == null ? t3 : t4;
      t3 = t6 == null ? t5 : t6;
      t4 = t8 == null ? t7 : t8;
      t5 = t10 == null ? t9 : t10;
      t6 = t12 == null ? t11 : t12;
      t7 = t14 == null ? t13 : t14;
      t8 = t16 == null ? t15 : t16;
      t9 = t18 == null ? t17 : t18;
      t10 = t20 == null ? t19 : t20;
      t11 = t22 == null ? t21 : t22;
      t12 = t24 == null ? t23 : t24;
      return R.TextTheme$(t9, t8, t11, t10, t4, t3, t2, t1, t5, t26 == null ? t25 : t26, t7, t12, t6);
    },
    $eq: function(_, other) {
      var _this = this;
      if (other == null)
        return false;
      if (_this === other)
        return true;
      if (!J.get$runtimeType$(other).$eq(0, new H.TypeImpl(H.getRti(_this))))
        return false;
      H.interceptedTypeCheck(other, "$isTextTheme");
      return J.$eq$(_this.display4, other.display4) && J.$eq$(_this.display3, other.display3) && J.$eq$(_this.display2, other.display2) && J.$eq$(_this.display1, other.display1) && J.$eq$(_this.headline, other.headline) && J.$eq$(_this.title, other.title) && J.$eq$(_this.subhead, other.subhead) && J.$eq$(_this.body2, other.body2) && J.$eq$(_this.body1, other.body1) && J.$eq$(_this.caption, other.caption) && J.$eq$(_this.button, other.button) && J.$eq$(_this.subtitle, other.subtitle) && J.$eq$(_this.overline, other.overline);
    },
    get$hashCode: function(_) {
      var _this = this;
      return Q.hashValues(_this.display4, _this.display3, _this.display2, _this.display1, _this.headline, _this.title, _this.subhead, _this.body2, _this.body1, _this.caption, _this.button, _this.subtitle, _this.overline, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd);
    }
  };
  K.Theme.prototype = {
    build$1: function(context) {
      var _null = null,
        t1 = this.data,
        t2 = t1.iconTheme;
      t1.cupertinoOverrideTheme;
      return new K._InheritedTheme(this, new Y.IconTheme(t2, new K.CupertinoTheme(new X.MaterialBasedCupertinoThemeData(t1, _null, _null, _null, _null, _null, _null), this.child, _null), _null), _null);
    }
  };
  K._InheritedTheme.prototype = {
    updateShouldNotify$1: function(old) {
      return !J.$eq$(this.theme.data, H.interceptedTypeCheck(old, "$is_InheritedTheme").theme.data);
    }
  };
  K.ThemeDataTween.prototype = {
    lerp$1: function(t) {
      var t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t30, t31, t32, t33, t34, t35, t36, t37, t38, t39, t40, t41, t42, t43, t44, t45, t46, t47, t48, t49, t50, t51, t52, t53, t54, t55, t56, t57, t58, t59, t60, t61, t62, t63, t64, t65, t66, t67, t68, t69, t70, t71, t72, t73, t74, t75, t76, t77, t78,
        t1 = this.begin,
        t2 = this.end;
      if (typeof t !== "number")
        return t.$lt();
      t3 = t < 0.5;
      t4 = t3 ? t1.brightness : t2.brightness;
      t5 = Q.Color_lerp(t1.primaryColor, t2.primaryColor, t);
      t6 = t3 ? t1.primaryColorBrightness : t2.primaryColorBrightness;
      t7 = Q.Color_lerp(t1.primaryColorLight, t2.primaryColorLight, t);
      t8 = Q.Color_lerp(t1.primaryColorDark, t2.primaryColorDark, t);
      t9 = Q.Color_lerp(t1.canvasColor, t2.canvasColor, t);
      t10 = Q.Color_lerp(t1.accentColor, t2.accentColor, t);
      t11 = t3 ? t1.accentColorBrightness : t2.accentColorBrightness;
      t12 = Q.Color_lerp(t1.scaffoldBackgroundColor, t2.scaffoldBackgroundColor, t);
      t13 = Q.Color_lerp(t1.bottomAppBarColor, t2.bottomAppBarColor, t);
      t14 = Q.Color_lerp(t1.cardColor, t2.cardColor, t);
      t15 = Q.Color_lerp(t1.dividerColor, t2.dividerColor, t);
      t16 = Q.Color_lerp(t1.highlightColor, t2.highlightColor, t);
      t17 = Q.Color_lerp(t1.splashColor, t2.splashColor, t);
      t18 = t3 ? t1.splashFactory : t2.splashFactory;
      t19 = Q.Color_lerp(t1.selectedRowColor, t2.selectedRowColor, t);
      t20 = Q.Color_lerp(t1.unselectedWidgetColor, t2.unselectedWidgetColor, t);
      t21 = Q.Color_lerp(t1.disabledColor, t2.disabledColor, t);
      t22 = t3 ? t1.buttonTheme : t2.buttonTheme;
      t23 = Q.Color_lerp(t1.buttonColor, t2.buttonColor, t);
      t24 = Q.Color_lerp(t1.secondaryHeaderColor, t2.secondaryHeaderColor, t);
      t25 = Q.Color_lerp(t1.textSelectionColor, t2.textSelectionColor, t);
      t26 = Q.Color_lerp(t1.cursorColor, t2.cursorColor, t);
      t27 = Q.Color_lerp(t1.textSelectionHandleColor, t2.textSelectionHandleColor, t);
      t28 = Q.Color_lerp(t1.backgroundColor, t2.backgroundColor, t);
      t29 = Q.Color_lerp(t1.dialogBackgroundColor, t2.dialogBackgroundColor, t);
      t30 = Q.Color_lerp(t1.indicatorColor, t2.indicatorColor, t);
      t31 = Q.Color_lerp(t1.hintColor, t2.hintColor, t);
      t32 = Q.Color_lerp(t1.errorColor, t2.errorColor, t);
      t33 = Q.Color_lerp(t1.toggleableActiveColor, t2.toggleableActiveColor, t);
      t34 = R.TextTheme_lerp(t1.textTheme, t2.textTheme, t);
      t35 = R.TextTheme_lerp(t1.primaryTextTheme, t2.primaryTextTheme, t);
      t36 = R.TextTheme_lerp(t1.accentTextTheme, t2.accentTextTheme, t);
      t37 = t3 ? t1.inputDecorationTheme : t2.inputDecorationTheme;
      t38 = T.IconThemeData_lerp(t1.iconTheme, t2.iconTheme, t);
      t39 = T.IconThemeData_lerp(t1.primaryIconTheme, t2.primaryIconTheme, t);
      t40 = T.IconThemeData_lerp(t1.accentIconTheme, t2.accentIconTheme, t);
      t41 = t1.sliderTheme;
      t42 = t2.sliderTheme;
      t43 = Q.Color_lerp(t41.activeTrackColor, t42.activeTrackColor, t);
      t44 = Q.Color_lerp(t41.inactiveTrackColor, t42.inactiveTrackColor, t);
      t45 = Q.Color_lerp(t41.disabledActiveTrackColor, t42.disabledActiveTrackColor, t);
      t46 = Q.Color_lerp(t41.disabledInactiveTrackColor, t42.disabledInactiveTrackColor, t);
      t47 = Q.Color_lerp(t41.activeTickMarkColor, t42.activeTickMarkColor, t);
      t48 = Q.Color_lerp(t41.inactiveTickMarkColor, t42.inactiveTickMarkColor, t);
      t49 = Q.Color_lerp(t41.disabledActiveTickMarkColor, t42.disabledActiveTickMarkColor, t);
      t50 = Q.Color_lerp(t41.disabledInactiveTickMarkColor, t42.disabledInactiveTickMarkColor, t);
      t51 = Q.Color_lerp(t41.thumbColor, t42.thumbColor, t);
      t52 = Q.Color_lerp(t41.disabledThumbColor, t42.disabledThumbColor, t);
      t53 = Q.Color_lerp(t41.overlayColor, t42.overlayColor, t);
      t54 = Q.Color_lerp(t41.valueIndicatorColor, t42.valueIndicatorColor, t);
      t55 = t3 ? t41.thumbShape : t42.thumbShape;
      t56 = t3 ? t41.valueIndicatorShape : t42.valueIndicatorShape;
      t57 = t3 ? t41.showValueIndicator : t42.showValueIndicator;
      t42 = Q.SliderThemeData$(t47, t43, t49, t45, t50, t46, t52, t48, t44, t53, t57, t51, t55, t54, t56, A.TextStyle_lerp(t41.valueIndicatorTextStyle, t42.valueIndicatorTextStyle, t));
      t41 = t1.tabBarTheme;
      t56 = t2.tabBarTheme;
      t54 = Z.Decoration_lerp(t41.indicator, t56.indicator, t);
      t43 = t3 ? t41.indicatorSize : t56.indicatorSize;
      t44 = Q.Color_lerp(t41.labelColor, t56.labelColor, t);
      t45 = A.TextStyle_lerp(t41.labelStyle, t56.labelStyle, t);
      t46 = Q.Color_lerp(t41.unselectedLabelColor, t56.unselectedLabelColor, t);
      t56 = A.TextStyle_lerp(t41.unselectedLabelStyle, t56.unselectedLabelStyle, t);
      t41 = t1.cardTheme;
      t47 = t2.cardTheme;
      if (t3)
        t48 = t41.clipBehavior;
      else
        t48 = t47.clipBehavior;
      t49 = Q.Color_lerp(t41.color, t47.color, t);
      t50 = Q.lerpDouble(t41.elevation, t47.elevation, t);
      t51 = V.EdgeInsetsGeometry_lerp(t41.margin, t47.margin, t);
      t41 = Y.ShapeBorder_lerp(t41.shape, t47.shape, t);
      t47 = K.ChipThemeData_lerp(t1.chipTheme, t2.chipTheme, t);
      t52 = t3 ? t1.platform : t2.platform;
      t53 = t3 ? t1.materialTapTargetSize : t2.materialTapTargetSize;
      t55 = t3 ? t1.pageTransitionsTheme : t2.pageTransitionsTheme;
      t57 = t1.appBarTheme;
      t58 = t2.appBarTheme;
      if (t3)
        t59 = t57.brightness;
      else
        t59 = t58.brightness;
      t60 = Q.Color_lerp(t57.color, t58.color, t);
      t61 = Q.lerpDouble(t57.elevation, t58.elevation, t);
      t62 = T.IconThemeData_lerp(t57.iconTheme, t58.iconTheme, t);
      t57 = R.TextTheme_lerp(t57.textTheme, t58.textTheme, t);
      t58 = t1.bottomAppBarTheme;
      t63 = t2.bottomAppBarTheme;
      t64 = Q.Color_lerp(t58.color, t63.color, t);
      t65 = Q.lerpDouble(t58.elevation, t63.elevation, t);
      if (t3)
        t58 = t58.shape;
      else
        t58 = t63.shape;
      t63 = t1.colorScheme;
      t66 = t2.colorScheme;
      t67 = Q.Color_lerp(t63.primary, t66.primary, t);
      t68 = Q.Color_lerp(t63.primaryVariant, t66.primaryVariant, t);
      t69 = Q.Color_lerp(t63.secondary, t66.secondary, t);
      t70 = Q.Color_lerp(t63.secondaryVariant, t66.secondaryVariant, t);
      t71 = Q.Color_lerp(t63.surface, t66.surface, t);
      t72 = Q.Color_lerp(t63.background, t66.background, t);
      t73 = Q.Color_lerp(t63.error, t66.error, t);
      t74 = Q.Color_lerp(t63.onPrimary, t66.onPrimary, t);
      t75 = Q.Color_lerp(t63.onSecondary, t66.onSecondary, t);
      t76 = Q.Color_lerp(t63.onSurface, t66.onSurface, t);
      t77 = Q.Color_lerp(t63.onBackground, t66.onBackground, t);
      t78 = Q.Color_lerp(t63.onError, t66.onError, t);
      t63 = A.ColorScheme$(t72, t3 ? t63.brightness : t66.brightness, t73, t77, t78, t74, t75, t76, t67, t68, t69, t70, t71);
      t66 = t1.dialogTheme;
      t67 = t2.dialogTheme;
      t68 = Q.Color_lerp(t66.backgroundColor, t67.backgroundColor, t);
      t69 = Q.lerpDouble(t66.elevation, t67.elevation, t);
      t70 = Y.ShapeBorder_lerp(t66.shape, t67.shape, t);
      t71 = A.TextStyle_lerp(t66.titleTextStyle, t67.titleTextStyle, t);
      t66 = A.TextStyle_lerp(t66.contentTextStyle, t67.contentTextStyle, t);
      t67 = t1.typography;
      t72 = t2.typography;
      t73 = R.TextTheme_lerp(t67.black, t72.black, t);
      t74 = R.TextTheme_lerp(t67.white, t72.white, t);
      t75 = R.TextTheme_lerp(t67.englishLike, t72.englishLike, t);
      t74 = U.Typography_Typography(t73, R.TextTheme_lerp(t67.dense, t72.dense, t), t75, C.TargetPlatform_0, R.TextTheme_lerp(t67.tall, t72.tall, t), t74);
      t1 = t3 ? t1.cupertinoOverrideTheme : t2.cupertinoOverrideTheme;
      return X.ThemeData$raw(t10, t11, t40, t36, new V.AppBarTheme(t59, t60, t61, t62, t57), t28, t13, new D.BottomAppBarTheme(t64, t65, t58), t4, t23, t22, t9, t14, new A.CardTheme(t48, t49, t50, t51, t41), t47, t63, t1, t26, t29, new Y.DialogTheme(t68, t69, t70, t71, t66), t21, t15, t32, t16, t31, t38, t30, t37, t53, t55, t52, t5, t6, t8, t7, t39, t35, t12, t24, t19, t42, t17, t18, new U.TabBarTheme(t54, t43, t44, t45, t46, t56), t25, t27, t34, t33, t74, t20);
    },
    $asAnimatable: function() {
      return [X.ThemeData];
    },
    $asTween: function() {
      return [X.ThemeData];
    }
  };
  K.AnimatedTheme.prototype = {
    createState$0: function() {
      return new K._AnimatedThemeState(null, C._StateLifecycle_0);
    },
    get$child: function() {
      return this.child;
    }
  };
  K._AnimatedThemeState.prototype = {
    forEachTween$1: function(visitor) {
      this._data = H.interceptedTypeCheck(H.functionTypeCheck(visitor, {func: 1, ret: [R.Tween,,], args: [[R.Tween,,],, {func: 1, ret: [R.Tween,,], args: [,]}]}).call$3(this._data, this._widget.data, new K._AnimatedThemeState_forEachTween_closure()), "$isThemeDataTween");
    },
    build$1: function(context) {
      var t1 = this._widget.child,
        t2 = this._data,
        t3 = this._animation;
      t2.toString;
      H.assertSubtype(t3, "$isAnimation", [P.double], "$asAnimation");
      return new K.Theme(t2.transform$1(0, t3.get$value(t3)), true, t1, null);
    },
    $asState: function() {
      return [K.AnimatedTheme];
    },
    $asImplicitlyAnimatedWidgetState: function() {
      return [K.AnimatedTheme];
    }
  };
  K._AnimatedThemeState_forEachTween_closure.prototype = {
    call$1: function(value) {
      return new K.ThemeDataTween(H.interceptedTypeCheck(value, "$isThemeData"), null);
    },
    $signature: 129
  };
  X.MaterialTapTargetSize.prototype = {
    toString$0: function(_) {
      return this._theme_data$_name;
    }
  };
  X.ThemeData.prototype = {
    $eq: function(_, other) {
      var _this = this;
      if (other == null)
        return false;
      if (!J.get$runtimeType$(other).$eq(0, new H.TypeImpl(H.getRti(_this))))
        return false;
      H.interceptedTypeCheck(other, "$isThemeData");
      return other.brightness === _this.brightness && J.$eq$(other.primaryColor, _this.primaryColor) && other.primaryColorBrightness === _this.primaryColorBrightness && J.$eq$(other.primaryColorLight, _this.primaryColorLight) && J.$eq$(other.primaryColorDark, _this.primaryColorDark) && J.$eq$(other.accentColor, _this.accentColor) && other.accentColorBrightness === _this.accentColorBrightness && J.$eq$(other.canvasColor, _this.canvasColor) && J.$eq$(other.scaffoldBackgroundColor, _this.scaffoldBackgroundColor) && J.$eq$(other.bottomAppBarColor, _this.bottomAppBarColor) && J.$eq$(other.cardColor, _this.cardColor) && J.$eq$(other.dividerColor, _this.dividerColor) && J.$eq$(other.highlightColor, _this.highlightColor) && J.$eq$(other.splashColor, _this.splashColor) && other.splashFactory === _this.splashFactory && J.$eq$(other.selectedRowColor, _this.selectedRowColor) && J.$eq$(other.unselectedWidgetColor, _this.unselectedWidgetColor) && J.$eq$(other.disabledColor, _this.disabledColor) && other.buttonTheme.$eq(0, _this.buttonTheme) && J.$eq$(other.buttonColor, _this.buttonColor) && J.$eq$(other.secondaryHeaderColor, _this.secondaryHeaderColor) && J.$eq$(other.textSelectionColor, _this.textSelectionColor) && J.$eq$(other.cursorColor, _this.cursorColor) && J.$eq$(other.textSelectionHandleColor, _this.textSelectionHandleColor) && J.$eq$(other.backgroundColor, _this.backgroundColor) && J.$eq$(other.dialogBackgroundColor, _this.dialogBackgroundColor) && J.$eq$(other.indicatorColor, _this.indicatorColor) && J.$eq$(other.hintColor, _this.hintColor) && J.$eq$(other.errorColor, _this.errorColor) && J.$eq$(other.toggleableActiveColor, _this.toggleableActiveColor) && other.textTheme.$eq(0, _this.textTheme) && other.primaryTextTheme.$eq(0, _this.primaryTextTheme) && other.accentTextTheme.$eq(0, _this.accentTextTheme) && other.inputDecorationTheme === _this.inputDecorationTheme && other.iconTheme.$eq(0, _this.iconTheme) && other.primaryIconTheme.$eq(0, _this.primaryIconTheme) && other.accentIconTheme.$eq(0, _this.accentIconTheme) && other.sliderTheme.$eq(0, _this.sliderTheme) && other.tabBarTheme.$eq(0, _this.tabBarTheme) && other.cardTheme.$eq(0, _this.cardTheme) && J.$eq$(other.chipTheme, _this.chipTheme) && other.platform == _this.platform && other.materialTapTargetSize === _this.materialTapTargetSize && other.pageTransitionsTheme.$eq(0, _this.pageTransitionsTheme) && other.appBarTheme.$eq(0, _this.appBarTheme) && other.bottomAppBarTheme.$eq(0, _this.bottomAppBarTheme) && other.colorScheme.$eq(0, _this.colorScheme) && other.dialogTheme.$eq(0, _this.dialogTheme) && other.typography.$eq(0, _this.typography) && true;
    },
    get$hashCode: function(_) {
      var _this = this;
      return Q.hashValues(_this.brightness, _this.primaryColor, _this.primaryColorBrightness, _this.primaryColorLight, _this.primaryColorDark, _this.accentColor, _this.accentColorBrightness, _this.canvasColor, _this.scaffoldBackgroundColor, _this.bottomAppBarColor, _this.cardColor, _this.dividerColor, _this.highlightColor, _this.splashColor, _this.splashFactory, _this.selectedRowColor, _this.unselectedWidgetColor, _this.disabledColor, _this.buttonTheme, Q.hashValues(_this.buttonColor, _this.toggleableActiveColor, _this.secondaryHeaderColor, _this.textSelectionColor, _this.cursorColor, _this.textSelectionHandleColor, _this.backgroundColor, _this.dialogBackgroundColor, _this.indicatorColor, _this.hintColor, _this.errorColor, _this.textTheme, _this.primaryTextTheme, _this.accentTextTheme, _this.inputDecorationTheme, _this.iconTheme, _this.primaryIconTheme, _this.accentIconTheme, _this.sliderTheme, Q.hashValues(_this.tabBarTheme, _this.cardTheme, _this.chipTheme, _this.platform, _this.materialTapTargetSize, _this.pageTransitionsTheme, _this.appBarTheme, _this.bottomAppBarTheme, _this.colorScheme, _this.dialogTheme, _this.typography, _this.cupertinoOverrideTheme, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd)));
    }
  };
  X.ThemeData_localize_closure.prototype = {
    call$0: function() {
      var t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t20, t21, t22, t23, t24, t25, t26, t27, t28, t29, t30, t31, t32, t33, t34, t35, t36, t37, t38, t39, t40, t41, t42, t43, t44, t45, t46, t47, t48, t49, t50,
        t1 = this.baseTheme,
        t2 = this.localTextGeometry,
        t3 = t2.merge$1(t1.primaryTextTheme),
        t4 = t2.merge$1(t1.accentTextTheme);
      t2 = t2.merge$1(t1.textTheme);
      t5 = t1.brightness;
      t6 = t1.primaryColor;
      t7 = t1.primaryColorBrightness;
      t8 = t1.primaryColorLight;
      t9 = t1.primaryColorDark;
      t10 = t1.accentColor;
      t11 = t1.accentColorBrightness;
      t12 = t1.canvasColor;
      t13 = t1.scaffoldBackgroundColor;
      t14 = t1.bottomAppBarColor;
      t15 = t1.cardColor;
      t16 = t1.dividerColor;
      t17 = t1.highlightColor;
      t18 = t1.splashColor;
      t19 = t1.splashFactory;
      t20 = t1.selectedRowColor;
      t21 = t1.unselectedWidgetColor;
      t22 = t1.disabledColor;
      t23 = t1.buttonColor;
      t24 = t1.buttonTheme;
      t25 = t1.secondaryHeaderColor;
      t26 = t1.textSelectionColor;
      t27 = t1.cursorColor;
      t28 = t1.textSelectionHandleColor;
      t29 = t1.backgroundColor;
      t30 = t1.dialogBackgroundColor;
      t31 = t1.indicatorColor;
      t32 = t1.hintColor;
      t33 = t1.errorColor;
      t34 = t1.toggleableActiveColor;
      t35 = t1.inputDecorationTheme;
      t36 = t1.iconTheme;
      t37 = t1.primaryIconTheme;
      t38 = t1.accentIconTheme;
      t39 = t1.sliderTheme;
      t40 = t1.tabBarTheme;
      t41 = t1.cardTheme;
      t42 = t1.chipTheme;
      t43 = t1.platform;
      t44 = t1.materialTapTargetSize;
      t45 = t1.pageTransitionsTheme;
      t46 = t1.appBarTheme;
      t47 = t1.bottomAppBarTheme;
      t48 = t1.colorScheme;
      t49 = t1.dialogTheme;
      t50 = t1.typography;
      t1 = t1.cupertinoOverrideTheme;
      return X.ThemeData$raw(t10, t11, t38, t4, t46, t29, t14, t47, t5, t23, t24, t12, t15, t41, t42, t48, t1, t27, t30, t49, t22, t16, t33, t17, t32, t36, t31, t35, t44, t45, t43, t6, t7, t9, t8, t37, t3, t13, t25, t20, t39, t18, t19, t40, t26, t28, t2, t34, t50, t21);
    },
    $signature: 102
  };
  X.MaterialBasedCupertinoThemeData.prototype = {};
  X._IdentityThemeDataCacheKey.prototype = {
    get$hashCode: function(_) {
      return (H.objectHashCode(this.baseTheme) ^ H.objectHashCode(this.localTextGeometry)) >>> 0;
    },
    $eq: function(_, other) {
      if (other == null)
        return false;
      H.interceptedTypeCheck(other, "$is_IdentityThemeDataCacheKey");
      return this.baseTheme == other.baseTheme && this.localTextGeometry == other.localTextGeometry;
    }
  };
  X._FifoCache.prototype = {
    putIfAbsent$2: function(_, key, loader) {
      var t1, result, t2, _this = this;
      H.assertSubtypeOfRuntimeType(key, H.getTypeArgumentByIndex(_this, 0));
      H.functionTypeCheck(loader, {func: 1, ret: H.getTypeArgumentByIndex(_this, 1)});
      t1 = _this._cache;
      result = t1.$index(0, key);
      if (result != null)
        return result;
      if (t1.get$length(t1) === _this._maximumSize) {
        t2 = t1.get$keys(t1);
        t1.remove$1(0, t2.get$first(t2));
      }
      t2 = loader.call$0();
      t1.$indexSet(0, key, t2);
      return t2;
    }
  };
  U.ScriptCategory.prototype = {
    toString$0: function(_) {
      return this._typography$_name;
    }
  };
  U.Typography.prototype = {
    geometryThemeFor$1: function(category) {
      switch (category) {
        case C.ScriptCategory_0:
          return this.englishLike;
        case C.ScriptCategory_1:
          return this.dense;
        case C.ScriptCategory_2:
          return this.tall;
      }
      return;
    },
    $eq: function(_, other) {
      var _this = this;
      if (other == null)
        return false;
      if (_this === other)
        return true;
      if (!J.get$runtimeType$(other).$eq(0, new H.TypeImpl(H.getRti(_this))))
        return false;
      H.interceptedTypeCheck(other, "$isTypography");
      return J.$eq$(other.black, _this.black) && J.$eq$(other.white, _this.white) && other.englishLike.$eq(0, _this.englishLike) && other.dense.$eq(0, _this.dense) && other.tall.$eq(0, _this.tall);
    },
    get$hashCode: function(_) {
      var _this = this;
      return Q.hashValues(_this.black, _this.white, _this.englishLike, _this.dense, _this.tall, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd);
    }
  };
  K.AlignmentGeometry.prototype = {
    add$1: function(_, other) {
      var t3, t4, _this = this,
        t1 = _this.get$_x(),
        t2 = other.get$_x();
      if (typeof t1 !== "number")
        return t1.$add();
      t2 = C.JSNumber_methods.$add(t1, t2);
      t1 = _this.get$_alignment$_start(_this);
      t3 = other.get$_alignment$_start(other);
      if (typeof t1 !== "number")
        return t1.$add();
      t3 = C.JSNumber_methods.$add(t1, t3);
      t1 = _this.get$_y();
      t4 = other.get$_y();
      if (typeof t1 !== "number")
        return t1.$add();
      return new K._MixedAlignment(t2, t3, C.JSNumber_methods.$add(t1, t4));
    },
    toString$0: function(_) {
      var t1 = this.super$Object$toString(0);
      return t1;
    },
    $eq: function(_, other) {
      var _this = this;
      if (other == null)
        return false;
      if (!(other instanceof K.AlignmentGeometry))
        return false;
      return _this.get$_x() == other.get$_x() && _this.get$_alignment$_start(_this) == other.get$_alignment$_start(other) && _this.get$_y() == other.get$_y();
    },
    get$hashCode: function(_) {
      var _this = this;
      return Q.hashValues(_this.get$_x(), _this.get$_alignment$_start(_this), _this.get$_y(), C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd);
    }
  };
  K.Alignment.prototype = {
    get$_x: function() {
      return this.x;
    },
    get$_alignment$_start: function(_) {
      return 0;
    },
    get$_y: function() {
      return this.y;
    },
    add$1: function(_, other) {
      var t1 = this.$add(0, other);
      return t1;
    },
    $sub: function(_, other) {
      var t1, t2, t3, t4;
      H.interceptedTypeCheck(other, "$isAlignment");
      t1 = this.x;
      t2 = other.x;
      if (typeof t1 !== "number")
        return t1.$sub();
      if (typeof t2 !== "number")
        return H.iae(t2);
      t3 = this.y;
      t4 = other.y;
      if (typeof t3 !== "number")
        return t3.$sub();
      if (typeof t4 !== "number")
        return H.iae(t4);
      return new K.Alignment(t1 - t2, t3 - t4);
    },
    $add: function(_, other) {
      var t1, t2, t3, t4;
      H.interceptedTypeCheck(other, "$isAlignment");
      t1 = this.x;
      t2 = other.x;
      if (typeof t1 !== "number")
        return t1.$add();
      if (typeof t2 !== "number")
        return H.iae(t2);
      t3 = this.y;
      t4 = other.y;
      if (typeof t3 !== "number")
        return t3.$add();
      if (typeof t4 !== "number")
        return H.iae(t4);
      return new K.Alignment(t1 + t2, t3 + t4);
    },
    $mul: function(_, other) {
      var t2,
        t1 = this.x;
      if (typeof t1 !== "number")
        return t1.$mul();
      if (typeof other !== "number")
        return H.iae(other);
      t2 = this.y;
      if (typeof t2 !== "number")
        return t2.$mul();
      return new K.Alignment(t1 * other, t2 * other);
    },
    alongOffset$1: function(other) {
      var centerX, centerY, t2,
        t1 = other._dx;
      if (typeof t1 !== "number")
        return t1.$div();
      centerX = t1 / 2;
      t1 = other._dy;
      if (typeof t1 !== "number")
        return t1.$div();
      centerY = t1 / 2;
      t1 = this.x;
      if (typeof t1 !== "number")
        return t1.$mul();
      t2 = this.y;
      if (typeof t2 !== "number")
        return t2.$mul();
      return new Q.Offset(centerX + t1 * centerX, centerY + t2 * centerY);
    },
    withinRect$1: function(rect) {
      var halfWidth, t3, halfHeight, t4,
        t1 = rect.right,
        t2 = rect.left;
      if (typeof t1 !== "number")
        return t1.$sub();
      if (typeof t2 !== "number")
        return H.iae(t2);
      halfWidth = (t1 - t2) / 2;
      t1 = rect.bottom;
      t3 = rect.top;
      if (typeof t1 !== "number")
        return t1.$sub();
      if (typeof t3 !== "number")
        return H.iae(t3);
      halfHeight = (t1 - t3) / 2;
      t1 = this.x;
      if (typeof t1 !== "number")
        return t1.$mul();
      t4 = this.y;
      if (typeof t4 !== "number")
        return t4.$mul();
      return new Q.Offset(t2 + halfWidth + t1 * halfWidth, t3 + halfHeight + t4 * halfHeight);
    },
    resolve$1: function(direction) {
      return this;
    },
    toString$0: function(_) {
      var t1 = this.super$AlignmentGeometry$toString(0);
      return t1;
    }
  };
  K.AlignmentDirectional.prototype = {
    get$_x: function() {
      return 0;
    },
    get$_alignment$_start: function(_) {
      return this.start;
    },
    get$_y: function() {
      return this.y;
    },
    add$1: function(_, other) {
      var t1 = this.$add(0, other);
      return t1;
    },
    $sub: function(_, other) {
      var t1, t2, t3, t4;
      H.interceptedTypeCheck(other, "$isAlignmentDirectional");
      t1 = this.start;
      t2 = other.start;
      if (typeof t1 !== "number")
        return t1.$sub();
      if (typeof t2 !== "number")
        return H.iae(t2);
      t3 = this.y;
      t4 = other.y;
      if (typeof t3 !== "number")
        return t3.$sub();
      if (typeof t4 !== "number")
        return H.iae(t4);
      return new K.AlignmentDirectional(t1 - t2, t3 - t4);
    },
    $add: function(_, other) {
      var t1, t2, t3, t4;
      H.interceptedTypeCheck(other, "$isAlignmentDirectional");
      t1 = this.start;
      t2 = other.start;
      if (typeof t1 !== "number")
        return t1.$add();
      if (typeof t2 !== "number")
        return H.iae(t2);
      t3 = this.y;
      t4 = other.y;
      if (typeof t3 !== "number")
        return t3.$add();
      if (typeof t4 !== "number")
        return H.iae(t4);
      return new K.AlignmentDirectional(t1 + t2, t3 + t4);
    },
    $mul: function(_, other) {
      var t2,
        t1 = this.start;
      if (typeof t1 !== "number")
        return t1.$mul();
      if (typeof other !== "number")
        return H.iae(other);
      t2 = this.y;
      if (typeof t2 !== "number")
        return t2.$mul();
      return new K.AlignmentDirectional(t1 * other, t2 * other);
    },
    resolve$1: function(direction) {
      var t1, _this = this;
      switch (direction) {
        case C.TextDirection_0:
          t1 = _this.start;
          if (typeof t1 !== "number")
            return t1.$negate();
          return new K.Alignment(-t1, _this.y);
        case C.TextDirection_1:
          return new K.Alignment(_this.start, _this.y);
      }
      return;
    },
    toString$0: function(_) {
      return K.AlignmentDirectional__stringify(this.start, this.y);
    }
  };
  K._MixedAlignment.prototype = {
    $mul: function(_, other) {
      var t2, t3,
        t1 = this._x;
      if (typeof t1 !== "number")
        return t1.$mul();
      if (typeof other !== "number")
        return H.iae(other);
      t2 = this._alignment$_start;
      if (typeof t2 !== "number")
        return t2.$mul();
      t3 = this._y;
      if (typeof t3 !== "number")
        return t3.$mul();
      return new K._MixedAlignment(t1 * other, t2 * other, t3 * other);
    },
    resolve$1: function(direction) {
      var t1, t2, _this = this;
      switch (direction) {
        case C.TextDirection_0:
          t1 = _this._x;
          t2 = _this._alignment$_start;
          if (typeof t1 !== "number")
            return t1.$sub();
          if (typeof t2 !== "number")
            return H.iae(t2);
          return new K.Alignment(t1 - t2, _this._y);
        case C.TextDirection_1:
          t1 = _this._x;
          t2 = _this._alignment$_start;
          if (typeof t1 !== "number")
            return t1.$add();
          if (typeof t2 !== "number")
            return H.iae(t2);
          return new K.Alignment(t1 + t2, _this._y);
      }
      return;
    },
    get$_x: function() {
      return this._x;
    },
    get$_alignment$_start: function(receiver) {
      return this._alignment$_start;
    },
    get$_y: function() {
      return this._y;
    }
  };
  G.RenderComparison.prototype = {
    toString$0: function(_) {
      return this._basic_types$_name;
    }
  };
  G.Axis.prototype = {
    toString$0: function(_) {
      return this._basic_types$_name;
    }
  };
  G.VerticalDirection.prototype = {
    toString$0: function(_) {
      return this._basic_types$_name;
    }
  };
  G.AxisDirection.prototype = {
    toString$0: function(_) {
      return this._basic_types$_name;
    }
  };
  N.PaintingBinding.prototype = {};
  K.BorderRadiusGeometry.prototype = {
    subtract$1: function(other) {
      var _this = this;
      return new K._MixedBorderRadius(_this.get$_topLeft().$sub(0, other.get$_topLeft()), _this.get$_topRight().$sub(0, other.get$_topRight()), _this.get$_bottomLeft().$sub(0, other.get$_bottomLeft()), _this.get$_bottomRight().$sub(0, other.get$_bottomRight()), _this.get$_topStart().$sub(0, other.get$_topStart()), _this.get$_topEnd().$sub(0, other.get$_topEnd()), _this.get$_bottomStart().$sub(0, other.get$_bottomStart()), _this.get$_bottomEnd().$sub(0, other.get$_bottomEnd()));
    },
    add$1: function(_, other) {
      var _this = this;
      return new K._MixedBorderRadius(_this.get$_topLeft().$add(0, other.get$_topLeft()), _this.get$_topRight().$add(0, other.get$_topRight()), _this.get$_bottomLeft().$add(0, other.get$_bottomLeft()), _this.get$_bottomRight().$add(0, other.get$_bottomRight()), _this.get$_topStart().$add(0, other.get$_topStart()), _this.get$_topEnd().$add(0, other.get$_topEnd()), _this.get$_bottomStart().$add(0, other.get$_bottomStart()), _this.get$_bottomEnd().$add(0, other.get$_bottomEnd()));
    },
    toString$0: function(_) {
      var t1 = this.super$Object$toString(0);
      return t1;
    },
    $eq: function(_, other) {
      var _this = this;
      if (other == null)
        return false;
      if (_this === other)
        return true;
      if (!new H.TypeImpl(H.getRti(_this)).$eq(0, J.get$runtimeType$(other)))
        return false;
      H.interceptedTypeCheck(other, "$isBorderRadiusGeometry");
      return J.$eq$(_this.get$_topLeft(), other.get$_topLeft()) && J.$eq$(_this.get$_topRight(), other.get$_topRight()) && J.$eq$(_this.get$_bottomLeft(), other.get$_bottomLeft()) && J.$eq$(_this.get$_bottomRight(), other.get$_bottomRight()) && _this.get$_topStart().$eq(0, other.get$_topStart()) && _this.get$_topEnd().$eq(0, other.get$_topEnd()) && _this.get$_bottomStart().$eq(0, other.get$_bottomStart()) && _this.get$_bottomEnd().$eq(0, other.get$_bottomEnd());
    },
    get$hashCode: function(_) {
      var _this = this;
      return Q.hashValues(_this.get$_topLeft(), _this.get$_topRight(), _this.get$_bottomLeft(), _this.get$_bottomRight(), _this.get$_topStart(), _this.get$_topEnd(), _this.get$_bottomStart(), _this.get$_bottomEnd(), C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd);
    }
  };
  K.BorderRadius.prototype = {
    get$_topLeft: function() {
      return this.topLeft;
    },
    get$_topRight: function() {
      return this.topRight;
    },
    get$_bottomLeft: function() {
      return this.bottomLeft;
    },
    get$_bottomRight: function() {
      return this.bottomRight;
    },
    get$_topStart: function() {
      return C.Radius_0_0;
    },
    get$_topEnd: function() {
      return C.Radius_0_0;
    },
    get$_bottomStart: function() {
      return C.Radius_0_0;
    },
    get$_bottomEnd: function() {
      return C.Radius_0_0;
    },
    toRRect$1: function(rect) {
      var _this = this;
      return Q.RRect$fromRectAndCorners(rect, _this.bottomLeft, _this.bottomRight, _this.topLeft, _this.topRight);
    },
    subtract$1: function(other) {
      if (!!other.$isBorderRadius)
        return this.$sub(0, other);
      return this.super$BorderRadiusGeometry$subtract(other);
    },
    add$1: function(_, other) {
      if (!!other.$isBorderRadius)
        return this.$add(0, other);
      return this.super$BorderRadiusGeometry$add(0, other);
    },
    $sub: function(_, other) {
      var _this = this;
      H.interceptedTypeCheck(other, "$isBorderRadius");
      return new K.BorderRadius(_this.topLeft.$sub(0, other.topLeft), _this.topRight.$sub(0, other.topRight), _this.bottomLeft.$sub(0, other.bottomLeft), _this.bottomRight.$sub(0, other.bottomRight));
    },
    $add: function(_, other) {
      var _this = this;
      H.interceptedTypeCheck(other, "$isBorderRadius");
      return new K.BorderRadius(_this.topLeft.$add(0, other.topLeft), _this.topRight.$add(0, other.topRight), _this.bottomLeft.$add(0, other.bottomLeft), _this.bottomRight.$add(0, other.bottomRight));
    },
    $mul: function(_, other) {
      var _this = this;
      return new K.BorderRadius(_this.topLeft.$mul(0, other), _this.topRight.$mul(0, other), _this.bottomLeft.$mul(0, other), _this.bottomRight.$mul(0, other));
    },
    resolve$1: function(direction) {
      return this;
    }
  };
  K._MixedBorderRadius.prototype = {
    $mul: function(_, other) {
      var _this = this;
      return new K._MixedBorderRadius(_this._topLeft.$mul(0, other), _this._topRight.$mul(0, other), _this._bottomLeft.$mul(0, other), _this._bottomRight.$mul(0, other), _this._topStart.$mul(0, other), _this._topEnd.$mul(0, other), _this._bottomStart.$mul(0, other), _this._bottomEnd.$mul(0, other));
    },
    resolve$1: function(direction) {
      var _this = this;
      switch (direction) {
        case C.TextDirection_0:
          return new K.BorderRadius(_this._topLeft.$add(0, _this._topEnd), _this._topRight.$add(0, _this._topStart), _this._bottomLeft.$add(0, _this._bottomEnd), _this._bottomRight.$add(0, _this._bottomStart));
        case C.TextDirection_1:
          return new K.BorderRadius(_this._topLeft.$add(0, _this._topStart), _this._topRight.$add(0, _this._topEnd), _this._bottomLeft.$add(0, _this._bottomStart), _this._bottomRight.$add(0, _this._bottomEnd));
      }
      return;
    },
    get$_topLeft: function() {
      return this._topLeft;
    },
    get$_topRight: function() {
      return this._topRight;
    },
    get$_bottomLeft: function() {
      return this._bottomLeft;
    },
    get$_bottomRight: function() {
      return this._bottomRight;
    },
    get$_topStart: function() {
      return this._topStart;
    },
    get$_topEnd: function() {
      return this._topEnd;
    },
    get$_bottomStart: function() {
      return this._bottomStart;
    },
    get$_bottomEnd: function() {
      return this._bottomEnd;
    }
  };
  Y.BorderStyle.prototype = {
    toString$0: function(_) {
      return this._borders$_name;
    }
  };
  Y.BorderSide.prototype = {
    scale$1: function(_, t) {
      var t1, t2;
      if (typeof t !== "number")
        return H.iae(t);
      t1 = Math.max(0, this.width * t);
      t2 = t <= 0 ? C.BorderStyle_0 : this.style;
      return new Y.BorderSide(this.color, t1, t2);
    },
    toPaint$0: function() {
      switch (this.style) {
        case C.BorderStyle_1:
          var t1 = new Q.Paint(new Q.PaintData());
          t1.set$color(0, this.color);
          t1.set$strokeWidth(this.width);
          t1.set$style(0, C.PaintingStyle_1);
          return t1;
        case C.BorderStyle_0:
          t1 = new Q.Paint(new Q.PaintData());
          t1.set$color(0, C.Color_0);
          t1.set$strokeWidth(0);
          t1.set$style(0, C.PaintingStyle_1);
          return t1;
      }
      return;
    },
    $eq: function(_, other) {
      var _this = this;
      if (other == null)
        return false;
      if (_this === other)
        return true;
      if (!new H.TypeImpl(H.getRti(_this)).$eq(0, J.get$runtimeType$(other)))
        return false;
      H.interceptedTypeCheck(other, "$isBorderSide");
      return J.$eq$(_this.color, other.color) && _this.width === other.width && _this.style === other.style;
    },
    get$hashCode: function(_) {
      return Q.hashValues(this.color, this.width, this.style, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd);
    },
    toString$0: function(_) {
      var _this = this;
      return new H.TypeImpl(H.getRti(_this)).toString$0(0) + "(" + H.S(_this.color) + ", " + C.JSNumber_methods.toStringAsFixed$1(_this.width, 1) + ", " + _this.style.toString$0(0) + ")";
    }
  };
  Y.ShapeBorder.prototype = {
    add$2$reversed: function(_, other, reversed) {
      return;
    },
    add$1: function($receiver, other) {
      return this.add$2$reversed($receiver, other, false);
    },
    $add: function(_, other) {
      var t1;
      H.interceptedTypeCheck(other, "$isShapeBorder");
      t1 = this.add$1(0, other);
      if (t1 == null)
        t1 = other.add$2$reversed(0, this, true);
      return t1 == null ? new Y._CompoundBorder(H.setRuntimeTypeInfo([other, this], [Y.ShapeBorder])) : t1;
    },
    lerpFrom$2: function(a, t) {
      if (a == null)
        return this.scale$1(0, t);
      return;
    },
    lerpTo$2: function(b, t) {
      if (b == null) {
        if (typeof t !== "number")
          return H.iae(t);
        return this.scale$1(0, 1 - t);
      }
      return;
    },
    toString$0: function(_) {
      return new H.TypeImpl(H.getRti(this)).toString$0(0) + "()";
    }
  };
  Y._CompoundBorder.prototype = {
    get$dimensions: function() {
      return C.JSArray_methods.fold$1$2(this.borders, C.EdgeInsets_0_0_0_0, new Y._CompoundBorder_dimensions_closure(), V.EdgeInsetsGeometry);
    },
    add$2$reversed: function(_, other, reversed) {
      var t2, ours, merged, result, mergedBorders,
        t1 = other instanceof Y._CompoundBorder;
      if (!t1) {
        t2 = this.borders;
        ours = reversed ? C.JSArray_methods.get$last(t2) : C.JSArray_methods.get$first(t2);
        merged = ours.add$2$reversed(0, other, reversed);
        if (merged == null)
          merged = other.add$2$reversed(0, ours, !reversed);
        if (merged != null) {
          result = H.setRuntimeTypeInfo([], [Y.ShapeBorder]);
          C.JSArray_methods.addAll$1(result, t2);
          C.JSArray_methods.$indexSet(result, reversed ? result.length - 1 : 0, merged);
          return new Y._CompoundBorder(result);
        }
      }
      mergedBorders = H.setRuntimeTypeInfo([], [Y.ShapeBorder]);
      if (reversed)
        C.JSArray_methods.addAll$1(mergedBorders, this.borders);
      if (t1)
        C.JSArray_methods.addAll$1(mergedBorders, other.borders);
      else
        C.JSArray_methods.add$1(mergedBorders, other);
      if (!reversed)
        C.JSArray_methods.addAll$1(mergedBorders, this.borders);
      return new Y._CompoundBorder(mergedBorders);
    },
    add$1: function($receiver, other) {
      return this.add$2$reversed($receiver, other, false);
    },
    scale$1: function(_, t) {
      var t1 = this.borders,
        t2 = Y.ShapeBorder,
        t3 = H.getTypeArgumentByIndex(t1, 0);
      return new Y._CompoundBorder(new H.MappedListIterable(t1, H.functionTypeCheck(new Y._CompoundBorder_scale_closure(t), {func: 1, ret: t2, args: [t3]}), [t3, t2]).toList$0(0));
    },
    lerpFrom$2: function(a, t) {
      return Y._CompoundBorder_lerp(a, this, t);
    },
    lerpTo$2: function(b, t) {
      return Y._CompoundBorder_lerp(this, b, t);
    },
    getOuterPath$2$textDirection: function(rect, textDirection) {
      return C.JSArray_methods.get$first(this.borders).getOuterPath$2$textDirection(rect, textDirection);
    },
    paint$3$textDirection: function(canvas, rect, textDirection) {
      var t1, t2, _i, border, t3, t4, t5, t6, t7, t8, t9, t10;
      for (t1 = this.borders, t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
        border = t1[_i];
        border.paint$3$textDirection(canvas, rect, textDirection);
        t3 = border.get$dimensions().resolve$1(textDirection);
        t4 = rect.left;
        t5 = t3._left;
        if (typeof t4 !== "number")
          return t4.$add();
        if (typeof t5 !== "number")
          return H.iae(t5);
        t6 = rect.top;
        t7 = t3._top;
        if (typeof t6 !== "number")
          return t6.$add();
        if (typeof t7 !== "number")
          return H.iae(t7);
        t8 = rect.right;
        t9 = t3._right;
        if (typeof t8 !== "number")
          return t8.$sub();
        if (typeof t9 !== "number")
          return H.iae(t9);
        t10 = rect.bottom;
        t3 = t3._bottom;
        if (typeof t10 !== "number")
          return t10.$sub();
        if (typeof t3 !== "number")
          return H.iae(t3);
        rect = new Q.Rect(t4 + t5, t6 + t7, t8 - t9, t10 - t3);
      }
    },
    $eq: function(_, other) {
      var t1, t2, index, t3;
      if (other == null)
        return false;
      if (this === other)
        return true;
      if (!new H.TypeImpl(H.getRti(this)).$eq(0, J.get$runtimeType$(other)))
        return false;
      t1 = this.borders;
      t2 = H.interceptedTypeCheck(other, "$is_CompoundBorder").borders;
      if (t1 === t2)
        return true;
      if (t1.length !== t2.length)
        return false;
      for (index = 0; index < t1.length; ++index) {
        t3 = t1[index];
        if (index >= t2.length)
          return H.ioore(t2, index);
        if (!J.$eq$(t3, t2[index]))
          return false;
      }
      return true;
    },
    get$hashCode: function(_) {
      return Q.hashList(this.borders);
    },
    toString$0: function(_) {
      var t1 = this.borders,
        t2 = H.getTypeArgumentByIndex(t1, 0),
        t3 = P.String;
      return new H.MappedListIterable(new H.ReversedListIterable(t1, [t2]), H.functionTypeCheck(new Y._CompoundBorder_toString_closure(), {func: 1, ret: t3, args: [t2]}), [t2, t3]).join$1(0, " + ");
    }
  };
  Y._CompoundBorder_dimensions_closure.prototype = {
    call$2: function(previousValue, border) {
      return H.interceptedTypeCheck(previousValue, "$isEdgeInsetsGeometry").add$1(0, H.interceptedTypeCheck(border, "$isShapeBorder").get$dimensions());
    },
    $signature: 103
  };
  Y._CompoundBorder_scale_closure.prototype = {
    call$1: function(border) {
      return H.interceptedTypeCheck(border, "$isShapeBorder").scale$1(0, this.t);
    },
    $signature: 104
  };
  Y._CompoundBorder_toString_closure.prototype = {
    call$1: function(border) {
      return J.toString$0$(H.interceptedTypeCheck(border, "$isShapeBorder"));
    },
    $signature: 105
  };
  F.BoxShape.prototype = {
    toString$0: function(_) {
      return this._box_border$_name;
    }
  };
  F.BoxBorder.prototype = {
    add$2$reversed: function(_, other, reversed) {
      return;
    },
    add$1: function($receiver, other) {
      return this.add$2$reversed($receiver, other, false);
    },
    getOuterPath$2$textDirection: function(rect, textDirection) {
      var t1 = new Q.Path(H.setRuntimeTypeInfo([], [T.Subpath]), C.PathFillType_0);
      t1.addRect$1(rect);
      return t1;
    }
  };
  F.Border.prototype = {
    get$dimensions: function() {
      var _this = this;
      return new V.EdgeInsets(_this.left.width, _this.top.width, _this.right.width, _this.bottom.width);
    },
    get$isUniform: function() {
      var topWidth, topStyle, _this = this,
        t1 = _this.top,
        topColor = t1.color,
        t2 = _this.right;
      if (!J.$eq$(t2.color, topColor) || !J.$eq$(_this.bottom.color, topColor) || !J.$eq$(_this.left.color, topColor))
        return false;
      topWidth = t1.width;
      if (t2.width !== topWidth || _this.bottom.width !== topWidth || _this.left.width !== topWidth)
        return false;
      topStyle = t1.style;
      if (t2.style !== topStyle || _this.bottom.style !== topStyle || _this.left.style !== topStyle)
        return false;
      return true;
    },
    add$2$reversed: function(_, other, reversed) {
      var t1, t2, _this = this;
      if (!(other instanceof F.Border))
        return;
      t1 = _this.top;
      t2 = other.top;
      if (Y.BorderSide_canMerge(t1, t2) && Y.BorderSide_canMerge(_this.right, other.right) && Y.BorderSide_canMerge(_this.bottom, other.bottom) && Y.BorderSide_canMerge(_this.left, other.left))
        return new F.Border(Y.BorderSide_merge(t1, t2), Y.BorderSide_merge(_this.right, other.right), Y.BorderSide_merge(_this.bottom, other.bottom), Y.BorderSide_merge(_this.left, other.left));
      return;
    },
    add$1: function($receiver, other) {
      return this.add$2$reversed($receiver, other, false);
    },
    scale$1: function(_, t) {
      var _this = this;
      return new F.Border(_this.top.scale$1(0, t), _this.right.scale$1(0, t), _this.bottom.scale$1(0, t), _this.left.scale$1(0, t));
    },
    lerpFrom$2: function(a, t) {
      if (a instanceof F.Border)
        return F.Border_lerp(a, this, t);
      return this.super$ShapeBorder$lerpFrom(a, t);
    },
    lerpTo$2: function(b, t) {
      if (b instanceof F.Border)
        return F.Border_lerp(this, b, t);
      return this.super$ShapeBorder$lerpTo(b, t);
    },
    paint$5$borderRadius$shape$textDirection: function(canvas, rect, borderRadius, shape, textDirection) {
      var t1, _this = this;
      if (_this.get$isUniform()) {
        t1 = _this.top;
        switch (t1.style) {
          case C.BorderStyle_0:
            return;
          case C.BorderStyle_1:
            switch (shape) {
              case C.BoxShape_1:
                F.BoxBorder__paintUniformBorderWithCircle(canvas, rect, t1);
                break;
              case C.BoxShape_0:
                if (borderRadius != null) {
                  F.BoxBorder__paintUniformBorderWithRadius(canvas, rect, t1, borderRadius);
                  return;
                }
                F.BoxBorder__paintUniformBorderWithRectangle(canvas, rect, t1);
                break;
            }
            return;
        }
      }
      Y.paintBorder(canvas, rect, _this.bottom, _this.left, _this.right, _this.top);
    },
    paint$3$textDirection: function(canvas, rect, textDirection) {
      return this.paint$5$borderRadius$shape$textDirection(canvas, rect, null, C.BoxShape_0, textDirection);
    },
    $eq: function(_, other) {
      var _this = this;
      if (other == null)
        return false;
      if (_this === other)
        return true;
      if (!(other instanceof F.Border))
        return false;
      return _this.top.$eq(0, other.top) && _this.right.$eq(0, other.right) && _this.bottom.$eq(0, other.bottom) && _this.left.$eq(0, other.left);
    },
    get$hashCode: function(_) {
      var _this = this;
      return Q.hashValues(_this.top, _this.right, _this.bottom, _this.left, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd);
    },
    toString$0: function(_) {
      var t1 = this.super$ShapeBorder$toString(0);
      return t1;
    }
  };
  F.BorderDirectional.prototype = {
    get$dimensions: function() {
      var _this = this;
      return new V.EdgeInsetsDirectional(_this.start.width, _this.top.width, _this.end.width, _this.bottom.width);
    },
    get$isUniform: function() {
      var topWidth, topStyle, _this = this,
        t1 = _this.top,
        topColor = t1.color,
        t2 = _this.start;
      if (!J.$eq$(t2.color, topColor) || !J.$eq$(_this.end.color, topColor) || !J.$eq$(_this.bottom.color, topColor))
        return false;
      topWidth = t1.width;
      if (t2.width !== topWidth || _this.end.width !== topWidth || _this.bottom.width !== topWidth)
        return false;
      topStyle = t1.style;
      if (t2.style !== topStyle || _this.end.style !== topStyle || _this.bottom.style !== topStyle)
        return false;
      return true;
    },
    add$2$reversed: function(_, other, reversed) {
      var t2, t3, _this = this,
        t1 = J.getInterceptor$(other);
      if (!!t1.$isBorderDirectional) {
        t1 = _this.top;
        t2 = other.top;
        if (Y.BorderSide_canMerge(t1, t2) && Y.BorderSide_canMerge(_this.start, other.start) && Y.BorderSide_canMerge(_this.end, other.end) && Y.BorderSide_canMerge(_this.bottom, other.bottom))
          return new F.BorderDirectional(Y.BorderSide_merge(t1, t2), Y.BorderSide_merge(_this.start, other.start), Y.BorderSide_merge(_this.end, other.end), Y.BorderSide_merge(_this.bottom, other.bottom));
        return;
      }
      if (!!t1.$isBorder) {
        t1 = other.top;
        t2 = _this.top;
        if (!Y.BorderSide_canMerge(t1, t2) || !Y.BorderSide_canMerge(other.bottom, _this.bottom))
          return;
        t3 = _this.start;
        if (!t3.$eq(0, C.BorderSide_m7u) || !_this.end.$eq(0, C.BorderSide_m7u)) {
          if (!other.left.$eq(0, C.BorderSide_m7u) || !other.right.$eq(0, C.BorderSide_m7u))
            return;
          return new F.BorderDirectional(Y.BorderSide_merge(t1, t2), t3, _this.end, Y.BorderSide_merge(other.bottom, _this.bottom));
        }
        return new F.Border(Y.BorderSide_merge(t1, t2), other.right, Y.BorderSide_merge(other.bottom, _this.bottom), other.left);
      }
      return;
    },
    add$1: function($receiver, other) {
      return this.add$2$reversed($receiver, other, false);
    },
    scale$1: function(_, t) {
      var _this = this;
      return new F.BorderDirectional(_this.top.scale$1(0, t), _this.start.scale$1(0, t), _this.end.scale$1(0, t), _this.bottom.scale$1(0, t));
    },
    lerpFrom$2: function(a, t) {
      if (a instanceof F.BorderDirectional)
        return F.BorderDirectional_lerp(a, this, t);
      return this.super$ShapeBorder$lerpFrom(a, t);
    },
    lerpTo$2: function(b, t) {
      if (b instanceof F.BorderDirectional)
        return F.BorderDirectional_lerp(this, b, t);
      return this.super$ShapeBorder$lerpTo(b, t);
    },
    paint$5$borderRadius$shape$textDirection: function(canvas, rect, borderRadius, shape, textDirection) {
      var t1, left, right, _this = this;
      if (_this.get$isUniform()) {
        t1 = _this.top;
        switch (t1.style) {
          case C.BorderStyle_0:
            return;
          case C.BorderStyle_1:
            switch (shape) {
              case C.BoxShape_1:
                F.BoxBorder__paintUniformBorderWithCircle(canvas, rect, t1);
                break;
              case C.BoxShape_0:
                if (borderRadius != null) {
                  F.BoxBorder__paintUniformBorderWithRadius(canvas, rect, t1, borderRadius);
                  return;
                }
                F.BoxBorder__paintUniformBorderWithRectangle(canvas, rect, t1);
                break;
            }
            return;
        }
      }
      switch (textDirection) {
        case C.TextDirection_0:
          left = _this.end;
          right = _this.start;
          break;
        case C.TextDirection_1:
          left = _this.start;
          right = _this.end;
          break;
        default:
          left = null;
          right = null;
      }
      Y.paintBorder(canvas, rect, _this.bottom, left, right, _this.top);
    },
    paint$3$textDirection: function(canvas, rect, textDirection) {
      return this.paint$5$borderRadius$shape$textDirection(canvas, rect, null, C.BoxShape_0, textDirection);
    },
    $eq: function(_, other) {
      var _this = this;
      if (other == null)
        return false;
      if (_this === other)
        return true;
      if (!new H.TypeImpl(H.getRti(_this)).$eq(0, J.get$runtimeType$(other)))
        return false;
      H.interceptedTypeCheck(other, "$isBorderDirectional");
      return _this.top.$eq(0, other.top) && _this.start.$eq(0, other.start) && _this.end.$eq(0, other.end) && _this.bottom.$eq(0, other.bottom);
    },
    get$hashCode: function(_) {
      var _this = this;
      return Q.hashValues(_this.top, _this.start, _this.end, _this.bottom, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd);
    },
    toString$0: function(_) {
      var t1 = this.super$ShapeBorder$toString(0);
      return t1;
    }
  };
  S.BoxDecoration.prototype = {
    get$padding: function(_) {
      var t1 = this.border;
      return t1 == null ? null : t1.get$dimensions();
    },
    scale$1: function(_, factor) {
      var _this = this, _null = null,
        t1 = Q.Color_lerp(_null, _this.color, factor),
        t2 = F.BoxBorder_lerp(_null, _this.border, factor),
        t3 = K.BorderRadiusGeometry_lerp(_null, _this.borderRadius, factor),
        t4 = O.BoxShadow_lerpList(_null, _this.boxShadow, factor);
      return S.BoxDecoration$(t2, t3, t4, t1, _null, _this.image, _this.shape);
    },
    get$isComplex: function() {
      return this.boxShadow != null;
    },
    lerpFrom$2: function(a, t) {
      if (a == null)
        return this.scale$1(0, t);
      if (!!a.$isBoxDecoration)
        return S.BoxDecoration_lerp(a, this, t);
      return this.super$Decoration$lerpFrom(a, t);
    },
    lerpTo$2: function(b, t) {
      if (b == null) {
        if (typeof t !== "number")
          return H.iae(t);
        return this.scale$1(0, 1 - t);
      }
      if (!!b.$isBoxDecoration)
        return S.BoxDecoration_lerp(this, b, t);
      return this.super$Decoration$lerpTo(b, t);
    },
    $eq: function(_, other) {
      var t1, t2, _this = this;
      if (other == null)
        return false;
      if (_this === other)
        return true;
      if (!new H.TypeImpl(H.getRti(_this)).$eq(0, J.get$runtimeType$(other)))
        return false;
      H.interceptedTypeCheck(other, "$isBoxDecoration");
      if (J.$eq$(_this.color, other.color))
        if (J.$eq$(_this.border, other.border))
          if (J.$eq$(_this.borderRadius, other.borderRadius)) {
            t1 = _this.boxShadow;
            t2 = other.boxShadow;
            if (t1 == null ? t2 == null : t1 === t2)
              t1 = _this.shape === other.shape;
            else
              t1 = false;
          } else
            t1 = false;
        else
          t1 = false;
      else
        t1 = false;
      return t1;
    },
    get$hashCode: function(_) {
      var _this = this;
      return Q.hashValues(_this.color, _this.image, _this.border, _this.borderRadius, _this.boxShadow, _this.gradient, _this.shape, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd);
    },
    hitTest$3$textDirection: function(size, position, textDirection) {
      var t1, t2, t3, distance;
      switch (this.shape) {
        case C.BoxShape_0:
          t1 = this.borderRadius;
          if (t1 != null) {
            t1 = t1.resolve$1(textDirection);
            t2 = size._dx;
            t3 = size._dy;
            if (typeof t2 !== "number")
              return H.iae(t2);
            if (typeof t3 !== "number")
              return H.iae(t3);
            return t1.toRRect$1(new Q.Rect(0, 0, 0 + t2, 0 + t3)).contains$1(0, position);
          }
          return true;
        case C.BoxShape_1:
          distance = position.$sub(0, size.center$1(C.Offset_0_0)).get$distance();
          t1 = size._dx;
          t2 = size._dy;
          return distance <= Math.min(H.checkNum(t1), H.checkNum(t2)) / 2;
      }
      return;
    },
    createBoxPainter$1: function(onChanged) {
      return new S._BoxDecorationPainter(this, H.functionTypeCheck(onChanged, {func: 1, ret: -1}));
    }
  };
  S._BoxDecorationPainter.prototype = {
    _paintBox$4: function(canvas, rect, paint, textDirection) {
      var t1 = this._box_decoration$_decoration;
      switch (t1.shape) {
        case C.BoxShape_1:
          canvas.drawCircle$3(rect.get$center(), rect.get$shortestSide() / 2, paint);
          break;
        case C.BoxShape_0:
          t1 = t1.borderRadius;
          if (t1 == null)
            canvas.drawRect$2(rect, paint);
          else
            canvas.drawRRect$2(t1.resolve$1(textDirection).toRRect$1(rect), paint);
          break;
      }
    },
    _paintShadows$3: function(canvas, rect, textDirection) {
      var t2, _i, boxShadow, t3, t4, t5, t6, t7, t8,
        t1 = this._box_decoration$_decoration.boxShadow;
      if (t1 == null)
        return;
      for (t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
        boxShadow = t1[_i];
        t3 = new Q.PaintData();
        t4 = boxShadow.color;
        t3.color = t4;
        t4 = boxShadow.blurRadius;
        if (typeof t4 !== "number")
          return t4.$mul();
        t3.maskFilter = new Q.MaskFilter(C.BlurStyle_0, t4 * 0.57735 + 0.5);
        t4 = rect.shift$1(boxShadow.offset);
        t5 = boxShadow.spreadRadius;
        t6 = t4.left;
        if (typeof t6 !== "number")
          return t6.$sub();
        if (typeof t5 !== "number")
          return H.iae(t5);
        t7 = t4.top;
        if (typeof t7 !== "number")
          return t7.$sub();
        t8 = t4.right;
        if (typeof t8 !== "number")
          return t8.$add();
        t4 = t4.bottom;
        if (typeof t4 !== "number")
          return t4.$add();
        this._paintBox$4(canvas, new Q.Rect(t6 - t5, t7 - t5, t8 + t5, t4 + t5), new Q.Paint(t3), textDirection);
      }
    },
    _paintBackgroundImage$3: function(canvas, rect, configuration) {
      return;
    },
    dispose$0: function() {
      this.super$BoxPainter$dispose();
    },
    paint$3: function(canvas, offset, configuration) {
      var rect, textDirection, t5, paint, _this = this,
        t1 = configuration.size,
        t2 = offset._dx,
        t3 = offset._dy,
        t4 = t1._dx;
      t1 = t1._dy;
      if (typeof t2 !== "number")
        return t2.$add();
      if (typeof t4 !== "number")
        return H.iae(t4);
      if (typeof t3 !== "number")
        return t3.$add();
      if (typeof t1 !== "number")
        return H.iae(t1);
      rect = new Q.Rect(t2, t3, t2 + t4, t3 + t1);
      textDirection = configuration.textDirection;
      _this._paintShadows$3(canvas, rect, textDirection);
      t1 = _this._box_decoration$_decoration;
      t2 = t1.color;
      t3 = t2 == null;
      if (!t3 || false) {
        t4 = _this._cachedBackgroundPaint;
        if (t4 != null)
          t5 = false;
        else
          t5 = true;
        if (t5) {
          paint = new Q.Paint(new Q.PaintData());
          if (!t3)
            paint.set$color(0, t2);
          _this._cachedBackgroundPaint = paint;
          t2 = paint;
        } else
          t2 = t4;
        _this._paintBox$4(canvas, rect, t2, textDirection);
      }
      _this._paintBackgroundImage$3(canvas, rect, configuration);
      t2 = t1.border;
      if (t2 != null)
        t2.paint$5$borderRadius$shape$textDirection(canvas, rect, H.interceptedTypeCheck(t1.borderRadius, "$isBorderRadius"), t1.shape, textDirection);
    },
    toString$0: function(_) {
      var t1 = this.super$Object$toString(0);
      return t1;
    }
  };
  O.BoxShadow.prototype = {
    scale$1: function(_, factor) {
      var t3, _this = this,
        t1 = _this.offset.$mul(0, factor),
        t2 = _this.blurRadius;
      if (typeof t2 !== "number")
        return t2.$mul();
      if (typeof factor !== "number")
        return H.iae(factor);
      t3 = _this.spreadRadius;
      if (typeof t3 !== "number")
        return t3.$mul();
      return new O.BoxShadow(_this.color, t1, t2 * factor, t3 * factor);
    },
    $eq: function(_, other) {
      var _this = this;
      if (other == null)
        return false;
      if (_this === other)
        return true;
      if (!new H.TypeImpl(H.getRti(_this)).$eq(0, J.get$runtimeType$(other)))
        return false;
      H.interceptedTypeCheck(other, "$isBoxShadow");
      return J.$eq$(_this.color, other.color) && J.$eq$(_this.offset, other.offset) && _this.blurRadius == other.blurRadius && _this.spreadRadius == other.spreadRadius;
    },
    get$hashCode: function(_) {
      var _this = this;
      return Q.hashValues(_this.color, _this.offset, _this.blurRadius, _this.spreadRadius, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd);
    },
    toString$0: function(_) {
      var t1 = this.super$Object$toString(0);
      return t1;
    }
  };
  X.CircleBorder.prototype = {
    get$dimensions: function() {
      var t1 = this.side.width;
      return new V.EdgeInsets(t1, t1, t1, t1);
    },
    scale$1: function(_, t) {
      return new X.CircleBorder(this.side.scale$1(0, t));
    },
    lerpFrom$2: function(a, t) {
      if (a instanceof X.CircleBorder)
        return new X.CircleBorder(Y.BorderSide_lerp(a.side, this.side, t));
      return this.super$ShapeBorder$lerpFrom(a, t);
    },
    lerpTo$2: function(b, t) {
      if (b instanceof X.CircleBorder)
        return new X.CircleBorder(Y.BorderSide_lerp(this.side, b.side, t));
      return this.super$ShapeBorder$lerpTo(b, t);
    },
    getOuterPath$2$textDirection: function(rect, textDirection) {
      var t1 = new Q.Path(H.setRuntimeTypeInfo([], [T.Subpath]), C.PathFillType_0),
        t2 = rect.get$center(),
        t3 = t2._dx,
        t4 = rect.get$shortestSide() / 2 * 2 / 2;
      if (typeof t3 !== "number")
        return t3.$sub();
      t2 = t2._dy;
      if (typeof t2 !== "number")
        return t2.$sub();
      t1.addOval$1(new Q.Rect(t3 - t4, t2 - t4, t3 + t4, t2 + t4));
      return t1;
    },
    paint$3$textDirection: function(canvas, rect, textDirection) {
      var t1 = this.side;
      switch (t1.style) {
        case C.BorderStyle_0:
          break;
        case C.BorderStyle_1:
          canvas.drawCircle$3(rect.get$center(), (rect.get$shortestSide() - t1.width) / 2, t1.toPaint$0());
          break;
      }
    },
    $eq: function(_, other) {
      if (other == null)
        return false;
      if (!new H.TypeImpl(H.getRti(this)).$eq(0, J.get$runtimeType$(other)))
        return false;
      return this.side.$eq(0, H.interceptedTypeCheck(other, "$isCircleBorder").side);
    },
    get$hashCode: function(_) {
      var t1 = this.side;
      return Q.hashValues(t1.color, t1.width, t1.style, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd);
    },
    toString$0: function(_) {
      return new H.TypeImpl(H.getRti(this)).toString$0(0) + "(" + this.side.toString$0(0) + ")";
    }
  };
  Z.ClipContext.prototype = {
    _clipAndPaint$4: function(canvasClipCall, clipBehavior, bounds, painter) {
      var _this = this;
      H.functionTypeCheck(canvasClipCall, {func: 1, ret: -1, args: [P.bool]});
      H.functionTypeCheck(painter, {func: 1, ret: -1});
      _this.get$canvas(_this).save$0(0);
      switch (clipBehavior) {
        case C.Clip_0:
          break;
        case C.Clip_1:
          canvasClipCall.call$1(false);
          break;
        case C.Clip_2:
          canvasClipCall.call$1(true);
          break;
        case C.Clip_3:
          canvasClipCall.call$1(true);
          _this.get$canvas(_this).saveLayer$2(bounds, new Q.Paint(new Q.PaintData()));
          break;
      }
      painter.call$0();
      if (clipBehavior === C.Clip_3)
        _this.get$canvas(_this).restore$0(0);
      _this.get$canvas(_this).restore$0(0);
    },
    clipPathAndPaint$4: function(path, clipBehavior, bounds, painter) {
      this._clipAndPaint$4(new Z.ClipContext_clipPathAndPaint_closure(this, path), clipBehavior, bounds, H.functionTypeCheck(painter, {func: 1, ret: -1}));
    },
    clipRRectAndPaint$4: function(rrect, clipBehavior, bounds, painter) {
      this._clipAndPaint$4(new Z.ClipContext_clipRRectAndPaint_closure(this, rrect), clipBehavior, bounds, H.functionTypeCheck(painter, {func: 1, ret: -1}));
    },
    clipRectAndPaint$4: function(rect, clipBehavior, bounds, painter) {
      this._clipAndPaint$4(new Z.ClipContext_clipRectAndPaint_closure(this, rect), clipBehavior, bounds, H.functionTypeCheck(painter, {func: 1, ret: -1}));
    }
  };
  Z.ClipContext_clipPathAndPaint_closure.prototype = {
    call$1: function(doAntiAias) {
      var t1 = this.$this;
      return t1.get$canvas(t1).clipPath$2$doAntiAlias(0, this.path, doAntiAias);
    },
    $signature: 19
  };
  Z.ClipContext_clipRRectAndPaint_closure.prototype = {
    call$1: function(doAntiAias) {
      var t1 = this.$this;
      return t1.get$canvas(t1).clipRRect$2$doAntiAlias(this.rrect, doAntiAias);
    },
    $signature: 19
  };
  Z.ClipContext_clipRectAndPaint_closure.prototype = {
    call$1: function(doAntiAias) {
      var t1 = this.$this;
      return t1.get$canvas(t1).clipRect$2$doAntiAlias(this.rect, doAntiAias);
    },
    $signature: 19
  };
  E.ColorSwatch.prototype = {
    $index: function(_, index) {
      return this._swatch.$index(0, H.assertSubtypeOfRuntimeType(index, H.getRuntimeTypeArgument(this, "ColorSwatch", 0)));
    },
    $eq: function(_, other) {
      var _this = this;
      if (other == null)
        return false;
      if (_this === other)
        return true;
      if (!J.get$runtimeType$(other).$eq(0, new H.TypeImpl(H.getRti(_this))))
        return false;
      H.assertSubtype(other, "$isColorSwatch", [H.getRuntimeTypeArgument(_this, "ColorSwatch", 0)], "$asColorSwatch");
      return _this.super$Color$$eq(0, other) && _this._swatch === other._swatch;
    },
    get$hashCode: function(_) {
      return Q.hashValues(new H.TypeImpl(H.getRti(this)), this._value, this._swatch, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd);
    },
    toString$0: function(_) {
      return new H.TypeImpl(H.getRti(this)).toString$0(0) + "(primary value: " + this.super$Color$toString(0) + ")";
    }
  };
  Z.Decoration.prototype = {
    toStringShort$0: function() {
      return new H.TypeImpl(H.getRti(this)).toString$0(0);
    },
    get$isComplex: function() {
      return false;
    },
    lerpFrom$2: function(a, t) {
      return;
    },
    lerpTo$2: function(b, t) {
      return;
    },
    hitTest$3$textDirection: function(size, position, textDirection) {
      return true;
    }
  };
  Z.BoxPainter.prototype = {
    dispose$0: function() {
    }
  };
  V.EdgeInsetsGeometry.prototype = {
    get$horizontal: function() {
      var t3, t4, _this = this,
        t1 = _this.get$left(_this),
        t2 = _this.get$right(_this);
      if (typeof t1 !== "number")
        return t1.$add();
      if (typeof t2 !== "number")
        return H.iae(t2);
      t3 = _this.get$start(_this);
      if (typeof t3 !== "number")
        return H.iae(t3);
      t4 = _this.get$end(_this);
      if (typeof t4 !== "number")
        return H.iae(t4);
      return t1 + t2 + t3 + t4;
    },
    along$1: function(axis) {
      var t1, t2, _this = this;
      switch (axis) {
        case C.Axis_0:
          return _this.get$horizontal();
        case C.Axis_1:
          t1 = _this.get$top(_this);
          t2 = _this.get$bottom(_this);
          if (typeof t1 !== "number")
            return t1.$add();
          if (typeof t2 !== "number")
            return H.iae(t2);
          return t1 + t2;
      }
      return;
    },
    add$1: function(_, other) {
      var t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, _this = this,
        t1 = _this.get$left(_this),
        t2 = other.get$left(other);
      if (typeof t1 !== "number")
        return t1.$add();
      if (typeof t2 !== "number")
        return H.iae(t2);
      t3 = _this.get$right(_this);
      t4 = other.get$right(other);
      if (typeof t3 !== "number")
        return t3.$add();
      if (typeof t4 !== "number")
        return H.iae(t4);
      t5 = _this.get$start(_this);
      t6 = other.get$start(other);
      if (typeof t5 !== "number")
        return t5.$add();
      if (typeof t6 !== "number")
        return H.iae(t6);
      t7 = _this.get$end(_this);
      t8 = other.get$end(other);
      if (typeof t7 !== "number")
        return t7.$add();
      if (typeof t8 !== "number")
        return H.iae(t8);
      t9 = _this.get$top(_this);
      t10 = other.get$top(other);
      if (typeof t9 !== "number")
        return t9.$add();
      if (typeof t10 !== "number")
        return H.iae(t10);
      t11 = _this.get$bottom(_this);
      t12 = other.get$bottom(other);
      if (typeof t11 !== "number")
        return t11.$add();
      if (typeof t12 !== "number")
        return H.iae(t12);
      return new V._MixedEdgeInsets(t1 + t2, t3 + t4, t5 + t6, t7 + t8, t9 + t10, t11 + t12);
    },
    toString$0: function(_) {
      var t1 = this.super$Object$toString(0);
      return t1;
    },
    $eq: function(_, other) {
      var _this = this;
      if (other == null)
        return false;
      if (!(other instanceof V.EdgeInsetsGeometry))
        return false;
      return _this.get$left(_this) == other.get$left(other) && _this.get$right(_this) == other.get$right(other) && _this.get$start(_this) == other.get$start(other) && _this.get$end(_this) == other.get$end(other) && _this.get$top(_this) == other.get$top(other) && _this.get$bottom(_this) == other.get$bottom(other);
    },
    get$hashCode: function(_) {
      var _this = this;
      return Q.hashValues(_this.get$left(_this), _this.get$right(_this), _this.get$start(_this), _this.get$end(_this), _this.get$top(_this), _this.get$bottom(_this), C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd);
    }
  };
  V.EdgeInsets.prototype = {
    get$left: function(_) {
      return this._left;
    },
    get$top: function(_) {
      return this._top;
    },
    get$right: function(_) {
      return this._right;
    },
    get$bottom: function(_) {
      return this._bottom;
    },
    get$start: function(_) {
      return 0;
    },
    get$end: function(_) {
      return 0;
    },
    add$1: function(_, other) {
      if (other instanceof V.EdgeInsets)
        return this.$add(0, other);
      return this.super$EdgeInsetsGeometry$add(0, other);
    },
    $sub: function(_, other) {
      var t1, t2, t3, t4, t5, t6, t7, t8, _this = this;
      H.interceptedTypeCheck(other, "$isEdgeInsets");
      t1 = _this._left;
      t2 = other._left;
      if (typeof t1 !== "number")
        return t1.$sub();
      if (typeof t2 !== "number")
        return H.iae(t2);
      t3 = _this._top;
      t4 = other._top;
      if (typeof t3 !== "number")
        return t3.$sub();
      if (typeof t4 !== "number")
        return H.iae(t4);
      t5 = _this._right;
      t6 = other._right;
      if (typeof t5 !== "number")
        return t5.$sub();
      if (typeof t6 !== "number")
        return H.iae(t6);
      t7 = _this._bottom;
      t8 = other._bottom;
      if (typeof t7 !== "number")
        return t7.$sub();
      if (typeof t8 !== "number")
        return H.iae(t8);
      return new V.EdgeInsets(t1 - t2, t3 - t4, t5 - t6, t7 - t8);
    },
    $add: function(_, other) {
      var t1, t2, t3, t4, t5, t6, t7, t8, _this = this;
      H.interceptedTypeCheck(other, "$isEdgeInsets");
      t1 = _this._left;
      t2 = other._left;
      if (typeof t1 !== "number")
        return t1.$add();
      if (typeof t2 !== "number")
        return H.iae(t2);
      t3 = _this._top;
      t4 = other._top;
      if (typeof t3 !== "number")
        return t3.$add();
      if (typeof t4 !== "number")
        return H.iae(t4);
      t5 = _this._right;
      t6 = other._right;
      if (typeof t5 !== "number")
        return t5.$add();
      if (typeof t6 !== "number")
        return H.iae(t6);
      t7 = _this._bottom;
      t8 = other._bottom;
      if (typeof t7 !== "number")
        return t7.$add();
      if (typeof t8 !== "number")
        return H.iae(t8);
      return new V.EdgeInsets(t1 + t2, t3 + t4, t5 + t6, t7 + t8);
    },
    $mul: function(_, other) {
      var t2, t3, t4, _this = this,
        t1 = _this._left;
      if (typeof t1 !== "number")
        return t1.$mul();
      if (typeof other !== "number")
        return H.iae(other);
      t2 = _this._top;
      if (typeof t2 !== "number")
        return t2.$mul();
      t3 = _this._right;
      if (typeof t3 !== "number")
        return t3.$mul();
      t4 = _this._bottom;
      if (typeof t4 !== "number")
        return t4.$mul();
      return new V.EdgeInsets(t1 * other, t2 * other, t3 * other, t4 * other);
    },
    resolve$1: function(direction) {
      return this;
    },
    copyWith$4$bottom$left$right$top: function(bottom, left, right, $top) {
      var _this = this,
        t1 = left == null ? _this._left : left,
        t2 = $top == null ? _this._top : $top,
        t3 = right == null ? _this._right : right;
      return new V.EdgeInsets(t1, t2, t3, bottom == null ? _this._bottom : bottom);
    },
    copyWith$2$bottom$top: function(bottom, $top) {
      return this.copyWith$4$bottom$left$right$top(bottom, null, null, $top);
    },
    copyWith$2$left$right: function(left, right) {
      return this.copyWith$4$bottom$left$right$top(null, left, right, null);
    },
    copyWith$1$bottom: function(bottom) {
      return this.copyWith$4$bottom$left$right$top(bottom, null, null, null);
    }
  };
  V.EdgeInsetsDirectional.prototype = {
    get$start: function(_) {
      return this._edge_insets$_start;
    },
    get$top: function(_) {
      return this._top;
    },
    get$end: function(_) {
      return this._edge_insets$_end;
    },
    get$bottom: function(_) {
      return this._bottom;
    },
    get$left: function(_) {
      return 0;
    },
    get$right: function(_) {
      return 0;
    },
    add$1: function(_, other) {
      if (other instanceof V.EdgeInsetsDirectional)
        return this.$add(0, other);
      return this.super$EdgeInsetsGeometry$add(0, other);
    },
    $sub: function(_, other) {
      var t1, t2, t3, t4, t5, t6, t7, t8, _this = this;
      H.interceptedTypeCheck(other, "$isEdgeInsetsDirectional");
      t1 = _this._edge_insets$_start;
      t2 = other._edge_insets$_start;
      if (typeof t1 !== "number")
        return t1.$sub();
      if (typeof t2 !== "number")
        return H.iae(t2);
      t3 = _this._top;
      t4 = other._top;
      if (typeof t3 !== "number")
        return t3.$sub();
      if (typeof t4 !== "number")
        return H.iae(t4);
      t5 = _this._edge_insets$_end;
      t6 = other._edge_insets$_end;
      if (typeof t5 !== "number")
        return t5.$sub();
      if (typeof t6 !== "number")
        return H.iae(t6);
      t7 = _this._bottom;
      t8 = other._bottom;
      if (typeof t7 !== "number")
        return t7.$sub();
      if (typeof t8 !== "number")
        return H.iae(t8);
      return new V.EdgeInsetsDirectional(t1 - t2, t3 - t4, t5 - t6, t7 - t8);
    },
    $add: function(_, other) {
      var t1, t2, t3, t4, t5, t6, t7, t8, _this = this;
      H.interceptedTypeCheck(other, "$isEdgeInsetsDirectional");
      t1 = _this._edge_insets$_start;
      t2 = other._edge_insets$_start;
      if (typeof t1 !== "number")
        return t1.$add();
      if (typeof t2 !== "number")
        return H.iae(t2);
      t3 = _this._top;
      t4 = other._top;
      if (typeof t3 !== "number")
        return t3.$add();
      if (typeof t4 !== "number")
        return H.iae(t4);
      t5 = _this._edge_insets$_end;
      t6 = other._edge_insets$_end;
      if (typeof t5 !== "number")
        return t5.$add();
      if (typeof t6 !== "number")
        return H.iae(t6);
      t7 = _this._bottom;
      t8 = other._bottom;
      if (typeof t7 !== "number")
        return t7.$add();
      if (typeof t8 !== "number")
        return H.iae(t8);
      return new V.EdgeInsetsDirectional(t1 + t2, t3 + t4, t5 + t6, t7 + t8);
    },
    $mul: function(_, other) {
      var t2, t3, t4, _this = this,
        t1 = _this._edge_insets$_start;
      if (typeof t1 !== "number")
        return t1.$mul();
      if (typeof other !== "number")
        return H.iae(other);
      t2 = _this._top;
      if (typeof t2 !== "number")
        return t2.$mul();
      t3 = _this._edge_insets$_end;
      if (typeof t3 !== "number")
        return t3.$mul();
      t4 = _this._bottom;
      if (typeof t4 !== "number")
        return t4.$mul();
      return new V.EdgeInsetsDirectional(t1 * other, t2 * other, t3 * other, t4 * other);
    },
    resolve$1: function(direction) {
      var _this = this;
      switch (direction) {
        case C.TextDirection_0:
          return new V.EdgeInsets(_this._edge_insets$_end, _this._top, _this._edge_insets$_start, _this._bottom);
        case C.TextDirection_1:
          return new V.EdgeInsets(_this._edge_insets$_start, _this._top, _this._edge_insets$_end, _this._bottom);
      }
      return;
    }
  };
  V._MixedEdgeInsets.prototype = {
    $mul: function(_, other) {
      var t2, t3, t4, t5, t6, _this = this,
        t1 = _this.left;
      if (typeof t1 !== "number")
        return t1.$mul();
      if (typeof other !== "number")
        return H.iae(other);
      t2 = _this.right;
      if (typeof t2 !== "number")
        return t2.$mul();
      t3 = _this.start;
      if (typeof t3 !== "number")
        return t3.$mul();
      t4 = _this.end;
      if (typeof t4 !== "number")
        return t4.$mul();
      t5 = _this.top;
      if (typeof t5 !== "number")
        return t5.$mul();
      t6 = _this.bottom;
      if (typeof t6 !== "number")
        return t6.$mul();
      return new V._MixedEdgeInsets(t1 * other, t2 * other, t3 * other, t4 * other, t5 * other, t6 * other);
    },
    resolve$1: function(direction) {
      var t1, t2, t3, t4, _this = this;
      switch (direction) {
        case C.TextDirection_0:
          t1 = _this.end;
          t2 = _this.left;
          if (typeof t1 !== "number")
            return t1.$add();
          if (typeof t2 !== "number")
            return H.iae(t2);
          t3 = _this.start;
          t4 = _this.right;
          if (typeof t3 !== "number")
            return t3.$add();
          if (typeof t4 !== "number")
            return H.iae(t4);
          return new V.EdgeInsets(t1 + t2, _this.top, t3 + t4, _this.bottom);
        case C.TextDirection_1:
          t1 = _this.start;
          t2 = _this.left;
          if (typeof t1 !== "number")
            return t1.$add();
          if (typeof t2 !== "number")
            return H.iae(t2);
          t3 = _this.end;
          t4 = _this.right;
          if (typeof t3 !== "number")
            return t3.$add();
          if (typeof t4 !== "number")
            return H.iae(t4);
          return new V.EdgeInsets(t1 + t2, _this.top, t3 + t4, _this.bottom);
      }
      return;
    },
    get$left: function(receiver) {
      return this.left;
    },
    get$right: function(receiver) {
      return this.right;
    },
    get$start: function(receiver) {
      return this.start;
    },
    get$end: function(receiver) {
      return this.end;
    },
    get$top: function(receiver) {
      return this.top;
    },
    get$bottom: function(receiver) {
      return this.bottom;
    }
  };
  T._ColorsAndStops.prototype = {};
  T.Gradient.prototype = {
    _impliedStops$0: function() {
      var t1 = this.stops;
      if (t1 != null)
        return t1;
      t1 = this.colors.length;
      if (t1 === 2)
        return;
      return P.List_List$generate(t1, new T.Gradient__impliedStops_closure(1 / (t1 - 1)), false, P.double);
    }
  };
  T.Gradient__impliedStops_closure.prototype = {
    call$1: function(index) {
      return index * this.separation;
    },
    $signature: 106
  };
  T.LinearGradient.prototype = {
    scale$1: function(_, factor) {
      var _this = this,
        t1 = _this.colors,
        t2 = Q.Color,
        t3 = H.getTypeArgumentByIndex(t1, 0);
      return T.LinearGradient$(_this.begin, new H.MappedListIterable(t1, H.functionTypeCheck(new T.LinearGradient_scale_closure(factor), {func: 1, ret: t2, args: [t3]}), [t3, t2]).toList$0(0), _this.end, _this.stops, _this.tileMode);
    },
    get$hashCode: function(_) {
      var _this = this;
      return Q.hashValues(_this.begin, _this.end, _this.tileMode, Q.hashList(_this.colors), Q.hashList(_this.stops), C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd);
    },
    $eq: function(_, other) {
      var t1, t2, i, t3, t4, _this = this;
      if (other == null)
        return false;
      if (_this === other)
        return true;
      if (!(other instanceof T.LinearGradient))
        return false;
      if (J.$eq$(_this.begin, other.begin))
        if (J.$eq$(_this.end, other.end))
          if (_this.tileMode === other.tileMode) {
            t1 = _this.colors.length;
            t2 = other.colors.length;
            if (t1 === t2) {
              t1 = _this.stops;
              t1 = t1 == null ? null : t1.length;
              t2 = other.stops;
              t1 = t1 != (t2 == null ? null : t2.length);
            } else
              t1 = true;
          } else
            t1 = true;
        else
          t1 = true;
      else
        t1 = true;
      if (t1)
        return false;
      for (t1 = _this.colors, t2 = other.colors, i = 0; i < t1.length; ++i) {
        t3 = t1[i];
        if (i >= t2.length)
          return H.ioore(t2, i);
        if (!J.$eq$(t3, t2[i]))
          return false;
      }
      t1 = _this.stops;
      if (t1 != null)
        for (t2 = t1.length, t3 = other.stops, i = 0; i < t2; ++i) {
          t4 = t1[i];
          if (i >= t3.length)
            return H.ioore(t3, i);
          if (t4 !== t3[i])
            return false;
        }
      return true;
    },
    toString$0: function(_) {
      var t1 = this.super$Object$toString(0);
      return t1;
    }
  };
  T.LinearGradient_scale_closure.prototype = {
    call$1: function(color) {
      return Q.Color_lerp(null, H.interceptedTypeCheck(color, "$isColor"), this.factor);
    },
    $signature: 107
  };
  E.ImageCache.prototype = {};
  E._CachedImage.prototype = {};
  M.ImageConfiguration.prototype = {
    $eq: function(_, other) {
      var _this = this;
      if (other == null)
        return false;
      if (!J.get$runtimeType$(other).$eq(0, new H.TypeImpl(H.getRti(_this))))
        return false;
      H.interceptedTypeCheck(other, "$isImageConfiguration");
      return other.bundle == _this.bundle && other.devicePixelRatio == _this.devicePixelRatio && J.$eq$(other.locale, _this.locale) && other.textDirection == _this.textDirection && J.$eq$(other.size, _this.size) && other.platform == _this.platform;
    },
    get$hashCode: function(_) {
      var _this = this;
      return Q.hashValues(_this.bundle, _this.devicePixelRatio, _this.locale, _this.size, _this.platform, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd);
    },
    toString$0: function(_) {
      var hasArguments, t2, _this = this,
        _s19_ = "ImageConfiguration(",
        t1 = _this.bundle;
      if (t1 != null) {
        t1 = _s19_ + ("bundle: " + t1.toString$0(0));
        hasArguments = true;
      } else {
        t1 = _s19_;
        hasArguments = false;
      }
      t2 = _this.devicePixelRatio;
      if (t2 != null) {
        if (hasArguments)
          t1 += ", ";
        t2 = t1 + ("devicePixelRatio: " + C.JSInt_methods.toStringAsFixed$1(t2, 1));
        t1 = t2;
        hasArguments = true;
      }
      t2 = _this.locale;
      if (t2 != null) {
        if (hasArguments)
          t1 += ", ";
        t2 = t1 + ("locale: " + t2.toString$0(0));
        t1 = t2;
        hasArguments = true;
      }
      t2 = _this.textDirection;
      if (t2 != null) {
        if (hasArguments)
          t1 += ", ";
        t2 = t1 + ("textDirection: " + t2.toString$0(0));
        t1 = t2;
        hasArguments = true;
      }
      t2 = _this.size;
      if (t2 != null) {
        if (hasArguments)
          t1 += ", ";
        t2 = t1 + ("size: " + t2.toString$0(0));
        t1 = t2;
        hasArguments = true;
      }
      t2 = _this.platform;
      if (t2 != null) {
        if (hasArguments)
          t1 += ", ";
        t2 = t1 + ("platform: " + Y.describeEnum(t2));
        t1 = t2;
      }
      t1 += ")";
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    }
  };
  L.ImageStreamCompleter.prototype = {};
  X.RoundedRectangleBorder.prototype = {
    get$dimensions: function() {
      var t1 = this.side.width;
      return new V.EdgeInsets(t1, t1, t1, t1);
    },
    scale$1: function(_, t) {
      return new X.RoundedRectangleBorder(this.side.scale$1(0, t), this.borderRadius.$mul(0, t));
    },
    lerpFrom$2: function(a, t) {
      var _this = this,
        t1 = J.getInterceptor$(a);
      if (!!t1.$isRoundedRectangleBorder)
        return new X.RoundedRectangleBorder(Y.BorderSide_lerp(a.side, _this.side, t), K.BorderRadiusGeometry_lerp(a.borderRadius, _this.borderRadius, t));
      if (!!t1.$isCircleBorder) {
        t1 = Y.BorderSide_lerp(a.side, _this.side, t);
        if (typeof t !== "number")
          return H.iae(t);
        return new X._RoundedRectangleToCircleBorder(t1, _this.borderRadius, 1 - t);
      }
      return _this.super$ShapeBorder$lerpFrom(a, t);
    },
    lerpTo$2: function(b, t) {
      var _this = this,
        t1 = J.getInterceptor$(b);
      if (!!t1.$isRoundedRectangleBorder)
        return new X.RoundedRectangleBorder(Y.BorderSide_lerp(_this.side, b.side, t), K.BorderRadiusGeometry_lerp(_this.borderRadius, b.borderRadius, t));
      if (!!t1.$isCircleBorder)
        return new X._RoundedRectangleToCircleBorder(Y.BorderSide_lerp(_this.side, b.side, t), _this.borderRadius, t);
      return _this.super$ShapeBorder$lerpTo(b, t);
    },
    getOuterPath$2$textDirection: function(rect, textDirection) {
      var t1 = new Q.Path(H.setRuntimeTypeInfo([], [T.Subpath]), C.PathFillType_0);
      t1.addRRect$1(this.borderRadius.resolve$1(textDirection).toRRect$1(rect));
      return t1;
    },
    paint$3$textDirection: function(canvas, rect, textDirection) {
      var width, t2, outer, inner, paint,
        t1 = this.side;
      switch (t1.style) {
        case C.BorderStyle_0:
          break;
        case C.BorderStyle_1:
          width = t1.width;
          t2 = this.borderRadius;
          if (width === 0)
            canvas.drawRRect$2(t2.resolve$1(textDirection).toRRect$1(rect), t1.toPaint$0());
          else {
            outer = t2.resolve$1(textDirection).toRRect$1(rect);
            inner = outer.inflate$1(-width);
            paint = new Q.Paint(new Q.PaintData());
            paint.set$color(0, t1.color);
            canvas.drawDRRect$3(outer, inner, paint);
          }
          break;
      }
    },
    $eq: function(_, other) {
      if (other == null)
        return false;
      if (!new H.TypeImpl(H.getRti(this)).$eq(0, J.get$runtimeType$(other)))
        return false;
      H.interceptedTypeCheck(other, "$isRoundedRectangleBorder");
      return this.side.$eq(0, other.side) && J.$eq$(this.borderRadius, other.borderRadius);
    },
    get$hashCode: function(_) {
      return Q.hashValues(this.side, this.borderRadius, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd);
    },
    toString$0: function(_) {
      return new H.TypeImpl(H.getRti(this)).toString$0(0) + "(" + this.side.toString$0(0) + ", " + H.S(this.borderRadius) + ")";
    }
  };
  X._RoundedRectangleToCircleBorder.prototype = {
    get$dimensions: function() {
      var t1 = this.side.width;
      return new V.EdgeInsets(t1, t1, t1, t1);
    },
    scale$1: function(_, t) {
      return new X._RoundedRectangleToCircleBorder(this.side.scale$1(0, t), this.borderRadius.$mul(0, t), t);
    },
    lerpFrom$2: function(a, t) {
      var t2, t3, _this = this,
        t1 = J.getInterceptor$(a);
      if (!!t1.$isRoundedRectangleBorder) {
        t1 = Y.BorderSide_lerp(a.side, _this.side, t);
        t2 = K.BorderRadiusGeometry_lerp(a.borderRadius, _this.borderRadius, t);
        t3 = _this.circleness;
        if (typeof t3 !== "number")
          return t3.$mul();
        if (typeof t !== "number")
          return H.iae(t);
        return new X._RoundedRectangleToCircleBorder(t1, t2, t3 * t);
      }
      if (!!t1.$isCircleBorder) {
        t1 = Y.BorderSide_lerp(a.side, _this.side, t);
        t2 = _this.circleness;
        if (typeof t2 !== "number")
          return H.iae(t2);
        if (typeof t !== "number")
          return H.iae(t);
        return new X._RoundedRectangleToCircleBorder(t1, _this.borderRadius, t2 + (1 - t2) * (1 - t));
      }
      if (!!t1.$is_RoundedRectangleToCircleBorder)
        return new X._RoundedRectangleToCircleBorder(Y.BorderSide_lerp(a.side, _this.side, t), K.BorderRadiusGeometry_lerp(a.borderRadius, _this.borderRadius, t), Q.lerpDouble(a.circleness, _this.circleness, t));
      return _this.super$ShapeBorder$lerpFrom(a, t);
    },
    lerpTo$2: function(b, t) {
      var t2, t3, _this = this,
        t1 = J.getInterceptor$(b);
      if (!!t1.$isRoundedRectangleBorder) {
        t1 = Y.BorderSide_lerp(_this.side, b.side, t);
        t2 = K.BorderRadiusGeometry_lerp(_this.borderRadius, b.borderRadius, t);
        t3 = _this.circleness;
        if (typeof t !== "number")
          return H.iae(t);
        if (typeof t3 !== "number")
          return t3.$mul();
        return new X._RoundedRectangleToCircleBorder(t1, t2, t3 * (1 - t));
      }
      if (!!t1.$isCircleBorder) {
        t1 = Y.BorderSide_lerp(_this.side, b.side, t);
        t2 = _this.circleness;
        if (typeof t2 !== "number")
          return H.iae(t2);
        if (typeof t !== "number")
          return H.iae(t);
        return new X._RoundedRectangleToCircleBorder(t1, _this.borderRadius, t2 + (1 - t2) * t);
      }
      if (!!t1.$is_RoundedRectangleToCircleBorder)
        return new X._RoundedRectangleToCircleBorder(Y.BorderSide_lerp(_this.side, b.side, t), K.BorderRadiusGeometry_lerp(_this.borderRadius, b.borderRadius, t), Q.lerpDouble(_this.circleness, b.circleness, t));
      return _this.super$ShapeBorder$lerpTo(b, t);
    },
    _adjustRect$1: function(rect) {
      var t2, t3, t4, t5, t6, t7, delta,
        t1 = this.circleness;
      if (t1 !== 0) {
        t2 = rect.right;
        t3 = rect.left;
        if (typeof t2 !== "number")
          return t2.$sub();
        if (typeof t3 !== "number")
          return H.iae(t3);
        t4 = rect.bottom;
        t5 = rect.top;
        if (typeof t4 !== "number")
          return t4.$sub();
        if (typeof t5 !== "number")
          return H.iae(t5);
        t5 = t2 - t3 === t4 - t5;
        t2 = t5;
      } else
        t2 = true;
      if (t2)
        return rect;
      t2 = rect.right;
      t3 = rect.left;
      if (typeof t2 !== "number")
        return t2.$sub();
      if (typeof t3 !== "number")
        return H.iae(t3);
      t4 = t2 - t3;
      t5 = rect.bottom;
      t6 = rect.top;
      if (typeof t5 !== "number")
        return t5.$sub();
      if (typeof t6 !== "number")
        return H.iae(t6);
      t7 = t5 - t6;
      if (t4 < t7) {
        if (typeof t1 !== "number")
          return t1.$mul();
        delta = t1 * (t7 - t4) / 2;
        return new Q.Rect(t3, t6 + delta, t2, t5 - delta);
      } else {
        if (typeof t1 !== "number")
          return t1.$mul();
        delta = t1 * (t4 - t7) / 2;
        return new Q.Rect(t3 + delta, t6, t2 - delta, t5);
      }
    },
    _adjustBorderRadius$2: function(rect, textDirection) {
      var t2,
        resolvedRadius = this.borderRadius.resolve$1(textDirection),
        t1 = this.circleness;
      if (t1 === 0)
        return resolvedRadius;
      t2 = rect.get$shortestSide() / 2;
      t2 = new Q.Radius(t2, t2);
      return K.BorderRadius_lerp(resolvedRadius, new K.BorderRadius(t2, t2, t2, t2), t1);
    },
    getOuterPath$2$textDirection: function(rect, textDirection) {
      var t1 = new Q.Path(H.setRuntimeTypeInfo([], [T.Subpath]), C.PathFillType_0);
      t1.addRRect$1(this._adjustBorderRadius$2(rect, textDirection).toRRect$1(this._adjustRect$1(rect)));
      return t1;
    },
    paint$3$textDirection: function(canvas, rect, textDirection) {
      var width, outer, inner, paint, _this = this,
        t1 = _this.side;
      switch (t1.style) {
        case C.BorderStyle_0:
          break;
        case C.BorderStyle_1:
          width = t1.width;
          if (width === 0)
            canvas.drawRRect$2(_this._adjustBorderRadius$2(rect, textDirection).toRRect$1(_this._adjustRect$1(rect)), t1.toPaint$0());
          else {
            outer = _this._adjustBorderRadius$2(rect, textDirection).toRRect$1(_this._adjustRect$1(rect));
            inner = outer.inflate$1(-width);
            paint = new Q.Paint(new Q.PaintData());
            paint.set$color(0, t1.color);
            canvas.drawDRRect$3(outer, inner, paint);
          }
          break;
      }
    },
    $eq: function(_, other) {
      var _this = this;
      if (other == null)
        return false;
      if (!new H.TypeImpl(H.getRti(_this)).$eq(0, J.get$runtimeType$(other)))
        return false;
      H.interceptedTypeCheck(other, "$is_RoundedRectangleToCircleBorder");
      return _this.side.$eq(0, other.side) && J.$eq$(_this.borderRadius, other.borderRadius) && _this.circleness == other.circleness;
    },
    get$hashCode: function(_) {
      return Q.hashValues(this.side, this.borderRadius, this.circleness, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd);
    },
    toString$0: function(_) {
      var t1 = this.super$ShapeBorder$toString(0);
      return t1;
    }
  };
  S.StadiumBorder.prototype = {
    get$dimensions: function() {
      var t1 = this.side.width;
      return new V.EdgeInsets(t1, t1, t1, t1);
    },
    scale$1: function(_, t) {
      return new S.StadiumBorder(this.side.scale$1(0, t));
    },
    lerpFrom$2: function(a, t) {
      var t2, _this = this,
        t1 = J.getInterceptor$(a);
      if (!!t1.$isStadiumBorder)
        return new S.StadiumBorder(Y.BorderSide_lerp(a.side, _this.side, t));
      if (!!t1.$isCircleBorder) {
        t1 = Y.BorderSide_lerp(a.side, _this.side, t);
        if (typeof t !== "number")
          return H.iae(t);
        return new S._StadiumToCircleBorder(t1, 1 - t);
      }
      if (!!t1.$isRoundedRectangleBorder) {
        t1 = Y.BorderSide_lerp(a.side, _this.side, t);
        t2 = H.interceptedTypeCheck(a.borderRadius, "$isBorderRadius");
        if (typeof t !== "number")
          return H.iae(t);
        return new S._StadiumToRoundedRectangleBorder(t1, t2, 1 - t);
      }
      return _this.super$ShapeBorder$lerpFrom(a, t);
    },
    lerpTo$2: function(b, t) {
      var _this = this,
        t1 = J.getInterceptor$(b);
      if (!!t1.$isStadiumBorder)
        return new S.StadiumBorder(Y.BorderSide_lerp(_this.side, b.side, t));
      if (!!t1.$isCircleBorder)
        return new S._StadiumToCircleBorder(Y.BorderSide_lerp(_this.side, b.side, t), t);
      if (!!t1.$isRoundedRectangleBorder)
        return new S._StadiumToRoundedRectangleBorder(Y.BorderSide_lerp(_this.side, b.side, t), H.interceptedTypeCheck(b.borderRadius, "$isBorderRadius"), t);
      return _this.super$ShapeBorder$lerpTo(b, t);
    },
    getOuterPath$2$textDirection: function(rect, textDirection) {
      var t1 = rect.get$shortestSide() / 2,
        t2 = new Q.Path(H.setRuntimeTypeInfo([], [T.Subpath]), C.PathFillType_0);
      t2.addRRect$1(Q.RRect$fromRectAndRadius(rect, new Q.Radius(t1, t1)));
      return t2;
    },
    paint$3$textDirection: function(canvas, rect, textDirection) {
      var t2,
        t1 = this.side;
      switch (t1.style) {
        case C.BorderStyle_0:
          break;
        case C.BorderStyle_1:
          t2 = rect.get$shortestSide() / 2;
          canvas.drawRRect$2(Q.RRect$fromRectAndRadius(rect, new Q.Radius(t2, t2)).inflate$1(-(t1.width / 2)), t1.toPaint$0());
          break;
      }
    },
    $eq: function(_, other) {
      if (other == null)
        return false;
      if (!new H.TypeImpl(H.getRti(this)).$eq(0, J.get$runtimeType$(other)))
        return false;
      return this.side.$eq(0, H.interceptedTypeCheck(other, "$isStadiumBorder").side);
    },
    get$hashCode: function(_) {
      var t1 = this.side;
      return Q.hashValues(t1.color, t1.width, t1.style, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd);
    },
    toString$0: function(_) {
      return new H.TypeImpl(H.getRti(this)).toString$0(0) + "(" + this.side.toString$0(0) + ")";
    }
  };
  S._StadiumToCircleBorder.prototype = {
    get$dimensions: function() {
      var t1 = this.side.width;
      return new V.EdgeInsets(t1, t1, t1, t1);
    },
    scale$1: function(_, t) {
      return new S._StadiumToCircleBorder(this.side.scale$1(0, t), t);
    },
    lerpFrom$2: function(a, t) {
      var t2, _this = this,
        t1 = J.getInterceptor$(a);
      if (!!t1.$isStadiumBorder) {
        t1 = Y.BorderSide_lerp(a.side, _this.side, t);
        t2 = _this.circleness;
        if (typeof t2 !== "number")
          return t2.$mul();
        if (typeof t !== "number")
          return H.iae(t);
        return new S._StadiumToCircleBorder(t1, t2 * t);
      }
      if (!!t1.$isCircleBorder) {
        t1 = Y.BorderSide_lerp(a.side, _this.side, t);
        t2 = _this.circleness;
        if (typeof t2 !== "number")
          return H.iae(t2);
        if (typeof t !== "number")
          return H.iae(t);
        return new S._StadiumToCircleBorder(t1, t2 + (1 - t2) * (1 - t));
      }
      if (!!t1.$is_StadiumToCircleBorder)
        return new S._StadiumToCircleBorder(Y.BorderSide_lerp(a.side, _this.side, t), Q.lerpDouble(a.circleness, _this.circleness, t));
      return _this.super$ShapeBorder$lerpFrom(a, t);
    },
    lerpTo$2: function(b, t) {
      var t2, _this = this,
        t1 = J.getInterceptor$(b);
      if (!!t1.$isStadiumBorder) {
        t1 = Y.BorderSide_lerp(_this.side, b.side, t);
        t2 = _this.circleness;
        if (typeof t !== "number")
          return H.iae(t);
        if (typeof t2 !== "number")
          return t2.$mul();
        return new S._StadiumToCircleBorder(t1, t2 * (1 - t));
      }
      if (!!t1.$isCircleBorder) {
        t1 = Y.BorderSide_lerp(_this.side, b.side, t);
        t2 = _this.circleness;
        if (typeof t2 !== "number")
          return H.iae(t2);
        if (typeof t !== "number")
          return H.iae(t);
        return new S._StadiumToCircleBorder(t1, t2 + (1 - t2) * t);
      }
      if (!!t1.$is_StadiumToCircleBorder)
        return new S._StadiumToCircleBorder(Y.BorderSide_lerp(_this.side, b.side, t), Q.lerpDouble(_this.circleness, b.circleness, t));
      return _this.super$ShapeBorder$lerpTo(b, t);
    },
    _stadium_border$_adjustRect$1: function(rect) {
      var t2, t3, t4, t5, t6, t7, delta,
        t1 = this.circleness;
      if (t1 !== 0) {
        t2 = rect.right;
        t3 = rect.left;
        if (typeof t2 !== "number")
          return t2.$sub();
        if (typeof t3 !== "number")
          return H.iae(t3);
        t4 = rect.bottom;
        t5 = rect.top;
        if (typeof t4 !== "number")
          return t4.$sub();
        if (typeof t5 !== "number")
          return H.iae(t5);
        t5 = t2 - t3 === t4 - t5;
        t2 = t5;
      } else
        t2 = true;
      if (t2)
        return rect;
      t2 = rect.right;
      t3 = rect.left;
      if (typeof t2 !== "number")
        return t2.$sub();
      if (typeof t3 !== "number")
        return H.iae(t3);
      t4 = t2 - t3;
      t5 = rect.bottom;
      t6 = rect.top;
      if (typeof t5 !== "number")
        return t5.$sub();
      if (typeof t6 !== "number")
        return H.iae(t6);
      t7 = t5 - t6;
      if (t4 < t7) {
        if (typeof t1 !== "number")
          return t1.$mul();
        delta = t1 * (t7 - t4) / 2;
        return new Q.Rect(t3, t6 + delta, t2, t5 - delta);
      } else {
        if (typeof t1 !== "number")
          return t1.$mul();
        delta = t1 * (t4 - t7) / 2;
        return new Q.Rect(t3 + delta, t6, t2 - delta, t5);
      }
    },
    getOuterPath$2$textDirection: function(rect, textDirection) {
      var t1 = new Q.Path(H.setRuntimeTypeInfo([], [T.Subpath]), C.PathFillType_0),
        t2 = rect.get$shortestSide() / 2;
      t2 = new Q.Radius(t2, t2);
      t1.addRRect$1(new K.BorderRadius(t2, t2, t2, t2).toRRect$1(this._stadium_border$_adjustRect$1(rect)));
      return t1;
    },
    paint$3$textDirection: function(canvas, rect, textDirection) {
      var width, t2, outer, inner, paint,
        t1 = this.side;
      switch (t1.style) {
        case C.BorderStyle_0:
          break;
        case C.BorderStyle_1:
          width = t1.width;
          if (width === 0) {
            t2 = rect.get$shortestSide() / 2;
            t2 = new Q.Radius(t2, t2);
            canvas.drawRRect$2(new K.BorderRadius(t2, t2, t2, t2).toRRect$1(this._stadium_border$_adjustRect$1(rect)), t1.toPaint$0());
          } else {
            t2 = rect.get$shortestSide() / 2;
            t2 = new Q.Radius(t2, t2);
            outer = new K.BorderRadius(t2, t2, t2, t2).toRRect$1(this._stadium_border$_adjustRect$1(rect));
            inner = outer.inflate$1(-width);
            paint = new Q.Paint(new Q.PaintData());
            paint.set$color(0, t1.color);
            canvas.drawDRRect$3(outer, inner, paint);
          }
          break;
      }
    },
    $eq: function(_, other) {
      if (other == null)
        return false;
      if (!new H.TypeImpl(H.getRti(this)).$eq(0, J.get$runtimeType$(other)))
        return false;
      H.interceptedTypeCheck(other, "$is_StadiumToCircleBorder");
      return this.side.$eq(0, other.side) && this.circleness == other.circleness;
    },
    get$hashCode: function(_) {
      return Q.hashValues(this.side, this.circleness, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd);
    },
    toString$0: function(_) {
      var t1 = "StadiumBorder(" + this.side.toString$0(0) + ", ",
        t2 = this.circleness;
      if (typeof t2 !== "number")
        return t2.$mul();
      return t1 + C.JSNumber_methods.toStringAsFixed$1(t2 * 100, 1) + "% of the way to being a CircleBorder)";
    }
  };
  S._StadiumToRoundedRectangleBorder.prototype = {
    get$dimensions: function() {
      var t1 = this.side.width;
      return new V.EdgeInsets(t1, t1, t1, t1);
    },
    scale$1: function(_, t) {
      return new S._StadiumToRoundedRectangleBorder(this.side.scale$1(0, t), this.borderRadius.$mul(0, t), t);
    },
    lerpFrom$2: function(a, t) {
      var t2, _this = this,
        t1 = J.getInterceptor$(a);
      if (!!t1.$isStadiumBorder) {
        t1 = Y.BorderSide_lerp(a.side, _this.side, t);
        t2 = _this.rectness;
        if (typeof t2 !== "number")
          return t2.$mul();
        if (typeof t !== "number")
          return H.iae(t);
        return new S._StadiumToRoundedRectangleBorder(t1, _this.borderRadius, t2 * t);
      }
      if (!!t1.$isRoundedRectangleBorder) {
        t1 = Y.BorderSide_lerp(a.side, _this.side, t);
        t2 = _this.rectness;
        if (typeof t2 !== "number")
          return H.iae(t2);
        if (typeof t !== "number")
          return H.iae(t);
        return new S._StadiumToRoundedRectangleBorder(t1, _this.borderRadius, t2 + (1 - t2) * (1 - t));
      }
      if (!!t1.$is_StadiumToRoundedRectangleBorder)
        return new S._StadiumToRoundedRectangleBorder(Y.BorderSide_lerp(a.side, _this.side, t), K.BorderRadius_lerp(a.borderRadius, _this.borderRadius, t), Q.lerpDouble(a.rectness, _this.rectness, t));
      return _this.super$ShapeBorder$lerpFrom(a, t);
    },
    lerpTo$2: function(b, t) {
      var t2, _this = this,
        t1 = J.getInterceptor$(b);
      if (!!t1.$isStadiumBorder) {
        t1 = Y.BorderSide_lerp(_this.side, b.side, t);
        t2 = _this.rectness;
        if (typeof t !== "number")
          return H.iae(t);
        if (typeof t2 !== "number")
          return t2.$mul();
        return new S._StadiumToRoundedRectangleBorder(t1, _this.borderRadius, t2 * (1 - t));
      }
      if (!!t1.$isRoundedRectangleBorder) {
        t1 = Y.BorderSide_lerp(_this.side, b.side, t);
        t2 = _this.rectness;
        if (typeof t2 !== "number")
          return H.iae(t2);
        if (typeof t !== "number")
          return H.iae(t);
        return new S._StadiumToRoundedRectangleBorder(t1, _this.borderRadius, t2 + (1 - t2) * t);
      }
      if (!!t1.$is_StadiumToRoundedRectangleBorder)
        return new S._StadiumToRoundedRectangleBorder(Y.BorderSide_lerp(_this.side, b.side, t), K.BorderRadius_lerp(_this.borderRadius, b.borderRadius, t), Q.lerpDouble(_this.rectness, b.rectness, t));
      return _this.super$ShapeBorder$lerpTo(b, t);
    },
    _stadium_border$_adjustBorderRadius$1: function(rect) {
      var t2,
        t1 = rect.get$shortestSide() / 2;
      t1 = new Q.Radius(t1, t1);
      t2 = this.rectness;
      if (typeof t2 !== "number")
        return H.iae(t2);
      return K.BorderRadius_lerp(this.borderRadius, new K.BorderRadius(t1, t1, t1, t1), 1 - t2);
    },
    getOuterPath$2$textDirection: function(rect, textDirection) {
      var t1 = new Q.Path(H.setRuntimeTypeInfo([], [T.Subpath]), C.PathFillType_0);
      t1.addRRect$1(this._stadium_border$_adjustBorderRadius$1(rect).toRRect$1(rect));
      return t1;
    },
    paint$3$textDirection: function(canvas, rect, textDirection) {
      var width, outer, inner, paint,
        t1 = this.side;
      switch (t1.style) {
        case C.BorderStyle_0:
          break;
        case C.BorderStyle_1:
          width = t1.width;
          if (width === 0)
            canvas.drawRRect$2(this._stadium_border$_adjustBorderRadius$1(rect).toRRect$1(rect), t1.toPaint$0());
          else {
            outer = this._stadium_border$_adjustBorderRadius$1(rect).toRRect$1(rect);
            inner = outer.inflate$1(-width);
            paint = new Q.Paint(new Q.PaintData());
            paint.set$color(0, t1.color);
            canvas.drawDRRect$3(outer, inner, paint);
          }
          break;
      }
    },
    $eq: function(_, other) {
      var _this = this;
      if (other == null)
        return false;
      if (!new H.TypeImpl(H.getRti(_this)).$eq(0, J.get$runtimeType$(other)))
        return false;
      H.interceptedTypeCheck(other, "$is_StadiumToRoundedRectangleBorder");
      return _this.side.$eq(0, other.side) && J.$eq$(_this.borderRadius, other.borderRadius) && _this.rectness == other.rectness;
    },
    get$hashCode: function(_) {
      return Q.hashValues(this.side, this.borderRadius, this.rectness, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd);
    },
    toString$0: function(_) {
      var t1 = this.super$ShapeBorder$toString(0);
      return t1;
    }
  };
  U.TextPainter.prototype = {
    set$text: function(_, value) {
      var t1, _this = this;
      if (J.$eq$(_this._text_painter$_text, value))
        return;
      t1 = _this._text_painter$_text;
      t1 = t1 == null ? null : t1.style;
      J.$eq$(t1, value.style);
      _this._text_painter$_text = value;
      _this._text_painter$_paragraph = null;
      _this._text_painter$_needsLayout = true;
    },
    set$textAlign: function(_, value) {
      var _this = this;
      if (_this._text_painter$_textAlign === value)
        return;
      _this._text_painter$_textAlign = value;
      _this._text_painter$_paragraph = null;
      _this._text_painter$_needsLayout = true;
    },
    set$textDirection: function(value) {
      var _this = this;
      if (_this._text_painter$_textDirection == value)
        return;
      _this._text_painter$_textDirection = value;
      _this._text_painter$_paragraph = null;
      _this._text_painter$_needsLayout = true;
    },
    set$textScaleFactor: function(value) {
      var _this = this;
      if (_this._textScaleFactor === value)
        return;
      _this._textScaleFactor = value;
      _this._text_painter$_paragraph = null;
      _this._text_painter$_needsLayout = true;
    },
    set$ellipsis: function(value) {
      var _this = this;
      if (_this._text_painter$_ellipsis == value)
        return;
      _this._text_painter$_ellipsis = value;
      _this._text_painter$_paragraph = null;
      _this._text_painter$_needsLayout = true;
    },
    set$locale: function(_, value) {
      var _this = this;
      if (J.$eq$(_this._text_painter$_locale, value))
        return;
      _this._text_painter$_locale = value;
      _this._text_painter$_paragraph = null;
      _this._text_painter$_needsLayout = true;
    },
    set$maxLines: function(value) {
      var _this = this;
      if (_this._text_painter$_maxLines == value)
        return;
      _this._text_painter$_maxLines = value;
      _this._text_painter$_paragraph = null;
      _this._text_painter$_needsLayout = true;
    },
    computeDistanceToActualBaseline$1: function(baseline) {
      switch (baseline) {
        case C.TextBaseline_0:
          return this._text_painter$_paragraph._alphabeticBaseline;
        case C.TextBaseline_1:
          return this._text_painter$_paragraph._ideographicBaseline;
      }
      return;
    },
    layout$2$maxWidth$minWidth: function(maxWidth, minWidth) {
      var t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, builder, newWidth, _this = this, _null = null;
      if (!_this._text_painter$_needsLayout && minWidth == _this._lastMinWidth && maxWidth == _this._lastMaxWidth)
        return;
      _this._text_painter$_needsLayout = false;
      t1 = _this._text_painter$_paragraph;
      if (t1 == null) {
        t1 = _this._text_painter$_text.style;
        if (t1 == null)
          t1 = _null;
        else {
          t2 = _this._text_painter$_textAlign;
          t3 = _this._text_painter$_textDirection;
          if (t3 == null)
            t3 = _null;
          t4 = _this._textScaleFactor;
          t5 = _this._text_painter$_maxLines;
          t6 = _this._text_painter$_ellipsis;
          t7 = _this._text_painter$_locale;
          t8 = t1.fontWeight;
          t9 = t1.fontStyle;
          t10 = t1.fontFamily;
          t11 = t1.fontSize;
          if (t11 == null)
            t11 = 14;
          t1 = t1.height;
          t1 = Q.ParagraphStyle$(t6, t10, t11 * t4, t9, t8, t1, t7, t5, _null, t2, t3);
        }
        if (t1 == null) {
          t1 = _this._text_painter$_textAlign;
          t2 = _this._text_painter$_textDirection;
          if (t2 == null)
            t2 = _null;
          t3 = _this._text_painter$_maxLines;
          t2 = Q.ParagraphStyle$(_this._text_painter$_ellipsis, _null, _null, _null, _null, _null, _this._text_painter$_locale, t3, _null, t1, t2);
          t1 = t2;
        }
        builder = Q.ParagraphBuilder$(t1);
        _this._text_painter$_text.build$2$textScaleFactor(builder, _this._textScaleFactor);
        t1 = _this._text_painter$_paragraph = builder.build$0();
      }
      _this._lastMinWidth = minWidth;
      _this._lastMaxWidth = maxWidth;
      t1.layout$1(new Q.ParagraphConstraints(maxWidth));
      if (minWidth != maxWidth) {
        newWidth = C.JSNumber_methods.clamp$2(Math.ceil(_this._text_painter$_paragraph._maxIntrinsicWidth), minWidth, maxWidth);
        t1 = _this._text_painter$_paragraph._width;
        t1.toString;
        if (newWidth !== Math.ceil(t1))
          _this._text_painter$_paragraph.layout$1(new Q.ParagraphConstraints(newWidth));
      }
    },
    layout$0: function() {
      return this.layout$2$maxWidth$minWidth(1 / 0, 0);
    }
  };
  Q.TextSpan.prototype = {
    build$2$textScaleFactor: function(builder, textScaleFactor) {
      var t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18, _i,
        t1 = this.style,
        hasStyle = t1 != null;
      if (hasStyle) {
        t2 = t1.color;
        t3 = t1.decoration;
        t4 = t1.decorationColor;
        t5 = t1.decorationStyle;
        t6 = t1.fontWeight;
        t7 = t1.fontStyle;
        t8 = t1.textBaseline;
        t9 = t1.fontFamily;
        t10 = t1.get$fontFamilyFallback();
        t11 = t1.fontSize;
        t11 = t11 == null ? null : t11 * textScaleFactor;
        t12 = t1.letterSpacing;
        t13 = t1.wordSpacing;
        t14 = t1.height;
        t15 = t1.locale;
        t16 = t1.foreground;
        t17 = t1.background;
        if (t17 == null) {
          t17 = t1.backgroundColor;
          if (t17 != null) {
            t18 = new Q.Paint(new Q.PaintData());
            t18.set$color(0, t17);
            t17 = t18;
          } else
            t17 = null;
        }
        C.JSArray_methods.add$1(builder._ops, Q.TextStyle$(t17, t2, t3, t4, t5, t9, t10, t11, t7, t6, t16, t14, t12, t15, t1.shadows, t8, t13));
      }
      t1 = this.text;
      if (t1 != null)
        C.JSArray_methods.add$1(builder._ops, t1);
      t1 = this.children;
      if (t1 != null)
        for (_i = 0; _i < 1; ++_i)
          t1[_i].build$2$textScaleFactor(builder, textScaleFactor);
      if (hasStyle)
        C.JSArray_methods.add$1(builder._ops, $.$get$ParagraphBuilder__paragraphBuilderPop());
    },
    visitTextSpan$1: function(visitor) {
      var t1, _i;
      H.functionTypeCheck(visitor, {func: 1, ret: P.bool, args: [Q.TextSpan]});
      if (this.text != null)
        if (!H.boolConversionCheck(visitor.call$1(this)))
          return false;
      t1 = this.children;
      if (t1 != null)
        for (_i = 0; _i < 1; ++_i)
          if (!t1[_i].visitTextSpan$1(visitor))
            return false;
      return true;
    },
    getSpanForPosition$1: function(position) {
      var t1 = {};
      t1.offset = 0;
      t1.result = null;
      this.visitTextSpan$1(new Q.TextSpan_getSpanForPosition_closure(t1, position.offset, position.affinity));
      return t1.result;
    },
    toPlainText$0: function() {
      var t1,
        buffer = new P.StringBuffer("");
      this.visitTextSpan$1(new Q.TextSpan_toPlainText_closure(buffer));
      t1 = buffer._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    compareTo$1: function(_, other) {
      var t1, candidate, result, t2, index, _this = this;
      if (_this === other)
        return C.RenderComparison_0;
      if (other.text == _this.text) {
        t1 = _this.children == null ? null : 1;
        t1 = t1 != (other.children == null ? null : 1) || _this.style == null !== (other.style == null);
      } else
        t1 = true;
      if (t1)
        return C.RenderComparison_3;
      t1 = _this.style;
      if (t1 != null) {
        candidate = t1.compareTo$1(0, other.style);
        result = candidate.index > 0 ? candidate : C.RenderComparison_0;
        if (result === C.RenderComparison_3)
          return result;
      } else
        result = C.RenderComparison_0;
      t1 = _this.children;
      if (t1 != null)
        for (t2 = other.children, index = 0; index < 1; ++index) {
          candidate = C.JSNull_methods.compareTo$1(t1[index], t2[index]);
          if (candidate.get$index(candidate).$gt(0, result.index))
            result = candidate;
          if (result === C.RenderComparison_3)
            return result;
        }
      return result;
    },
    $eq: function(_, other) {
      var t1, _this = this;
      if (other == null)
        return false;
      if (_this === other)
        return true;
      if (!J.get$runtimeType$(other).$eq(0, new H.TypeImpl(H.getRti(_this))))
        return false;
      H.interceptedTypeCheck(other, "$isTextSpan");
      if (other.text == _this.text)
        if (J.$eq$(other.style, _this.style))
          t1 = S.listEquals(other.children, _this.children, Q.TextSpan);
        else
          t1 = false;
      else
        t1 = false;
      return t1;
    },
    get$hashCode: function(_) {
      return Q.hashValues(this.style, this.text, null, Q.hashList(this.children), C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd);
    },
    toStringShort$0: function() {
      return new H.TypeImpl(H.getRti(this)).toString$0(0);
    },
    debugDescribeChildren$0: function() {
      var t2, t3,
        t1 = this.children;
      if (t1 == null)
        return C.List_empty;
      t2 = Y.DiagnosticsNode;
      t3 = H.getTypeArgumentByIndex(t1, 0);
      return new H.MappedListIterable(t1, H.functionTypeCheck(new Q.TextSpan_debugDescribeChildren_closure(), {func: 1, ret: t2, args: [t3]}), [t3, t2]).toList$0(0);
    }
  };
  Q.TextSpan_getSpanForPosition_closure.prototype = {
    call$1: function(span) {
      var _this = this,
        t1 = _this._box_0,
        t2 = t1.offset,
        endOffset = t2 + span.text.length,
        t3 = _this.targetOffset;
      if (!(t3 === t2 && _this.affinity === C.TextAffinity_1))
        if (!(t3 > t2 && t3 < endOffset))
          t2 = t3 === endOffset && _this.affinity === C.TextAffinity_0;
        else
          t2 = true;
      else
        t2 = true;
      if (t2) {
        t1.result = span;
        return false;
      }
      t1.offset = endOffset;
      return true;
    },
    $signature: 20
  };
  Q.TextSpan_toPlainText_closure.prototype = {
    call$1: function(span) {
      this.buffer._contents += H.S(span.text);
      return true;
    },
    $signature: 20
  };
  Q.TextSpan_debugDescribeChildren_closure.prototype = {
    call$1: function(child) {
      H.interceptedTypeCheck(child, "$isTextSpan");
      if (child != null)
        return new Y._DiagnosticableTreeNode(child, null, true, true, null);
      else
        return Y.DiagnosticsNode_DiagnosticsNode$message("<null child>", C.DiagnosticsTreeStyle_5);
    },
    $signature: 109
  };
  A.TextStyle0.prototype = {
    get$fontFamilyFallback: function() {
      return this._text_style$_fontFamilyFallback;
    },
    copyWith$19$background$backgroundColor$color$debugLabel$decoration$decorationColor$decorationStyle$fontFamily$fontFamilyFallback$fontSize$fontStyle$fontWeight$foreground$height$letterSpacing$locale$shadows$textBaseline$wordSpacing: function(background, backgroundColor, color, debugLabel, decoration, decorationColor, decorationStyle, fontFamily, fontFamilyFallback, fontSize, fontStyle, fontWeight, foreground, height, letterSpacing, locale, shadows, textBaseline, wordSpacing) {
      var t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, _this = this, _null = null,
        t1 = _this.foreground;
      if (t1 == null && foreground == null)
        t2 = color == null ? _this.color : color;
      else
        t2 = _null;
      t3 = _this.background;
      if (t3 == null && background == null)
        t4 = backgroundColor == null ? _this.backgroundColor : backgroundColor;
      else
        t4 = _null;
      t5 = fontFamily == null ? _this.fontFamily : fontFamily;
      t6 = _this.get$fontFamilyFallback();
      t7 = fontSize == null ? _this.fontSize : fontSize;
      t8 = fontWeight == null ? _this.fontWeight : fontWeight;
      t9 = letterSpacing == null ? _this.letterSpacing : letterSpacing;
      t10 = wordSpacing == null ? _this.wordSpacing : wordSpacing;
      t11 = textBaseline == null ? _this.textBaseline : textBaseline;
      t12 = height == null ? _this.height : height;
      t1 = foreground == null ? t1 : foreground;
      t3 = background == null ? t3 : background;
      t13 = decoration == null ? _this.decoration : decoration;
      t14 = decorationColor == null ? _this.decorationColor : decorationColor;
      t15 = decorationStyle == null ? _this.decorationStyle : decorationStyle;
      return A.TextStyle$0(t3, t4, t2, _null, t13, t14, t15, t5, t6, t7, _this.fontStyle, t8, t1, t12, _this.inherit, t9, _this.locale, _null, _this.shadows, t11, t10);
    },
    copyWith$2$color$letterSpacing: function(color, letterSpacing) {
      return this.copyWith$19$background$backgroundColor$color$debugLabel$decoration$decorationColor$decorationStyle$fontFamily$fontFamilyFallback$fontSize$fontStyle$fontWeight$foreground$height$letterSpacing$locale$shadows$textBaseline$wordSpacing(null, null, color, null, null, null, null, null, null, null, null, null, null, null, letterSpacing, null, null, null, null);
    },
    copyWith$1$color: function(color) {
      return this.copyWith$19$background$backgroundColor$color$debugLabel$decoration$decorationColor$decorationStyle$fontFamily$fontFamilyFallback$fontSize$fontStyle$fontWeight$foreground$height$letterSpacing$locale$shadows$textBaseline$wordSpacing(null, null, color, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);
    },
    merge$1: function(other) {
      var t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15;
      if (other == null)
        return this;
      if (!other.inherit)
        return other;
      t1 = other.color;
      t2 = other.backgroundColor;
      t3 = other.fontFamily;
      t4 = other.get$fontFamilyFallback();
      t5 = other.fontSize;
      t6 = other.fontWeight;
      t7 = other.fontStyle;
      t8 = other.letterSpacing;
      t9 = other.wordSpacing;
      t10 = other.textBaseline;
      t11 = other.height;
      t12 = other.locale;
      t13 = other.foreground;
      t14 = other.background;
      t15 = other.shadows;
      return this.copyWith$19$background$backgroundColor$color$debugLabel$decoration$decorationColor$decorationStyle$fontFamily$fontFamilyFallback$fontSize$fontStyle$fontWeight$foreground$height$letterSpacing$locale$shadows$textBaseline$wordSpacing(t14, t2, t1, null, other.decoration, other.decorationColor, other.decorationStyle, t3, t4, t5, t7, t6, t13, t11, t8, t12, t15, t10, t9);
    },
    compareTo$1: function(_, other) {
      var t1, _this = this;
      if (_this === other)
        return C.RenderComparison_0;
      if (_this.inherit === other.inherit)
        if (_this.fontFamily == other.fontFamily)
          if (_this.fontSize == other.fontSize)
            if (_this.fontWeight == other.fontWeight)
              if (_this.letterSpacing == other.letterSpacing)
                if (_this.wordSpacing == other.wordSpacing)
                  if (_this.textBaseline == other.textBaseline)
                    if (_this.height == other.height)
                      t1 = _this.foreground != other.foreground || _this.background != other.background || !S.listEquals(_this.shadows, other.shadows, Q.Shadow) || !S.listEquals(_this.get$fontFamilyFallback(), other.get$fontFamilyFallback(), P.String);
                    else
                      t1 = true;
                  else
                    t1 = true;
                else
                  t1 = true;
              else
                t1 = true;
            else
              t1 = true;
          else
            t1 = true;
        else
          t1 = true;
      else
        t1 = true;
      if (t1)
        return C.RenderComparison_3;
      if (!J.$eq$(_this.color, other.color) || !J.$eq$(_this.backgroundColor, other.backgroundColor) || !J.$eq$(_this.decoration, other.decoration) || !J.$eq$(_this.decorationColor, other.decorationColor) || _this.decorationStyle != other.decorationStyle)
        return C.RenderComparison_2;
      return C.RenderComparison_0;
    },
    $eq: function(_, other) {
      var t1, _this = this;
      if (other == null)
        return false;
      if (_this === other)
        return true;
      if (!J.get$runtimeType$(other).$eq(0, new H.TypeImpl(H.getRti(_this))))
        return false;
      H.interceptedTypeCheck(other, "$isTextStyle0");
      if (_this.inherit === other.inherit)
        if (J.$eq$(_this.color, other.color))
          if (J.$eq$(_this.backgroundColor, other.backgroundColor))
            if (_this.fontFamily == other.fontFamily)
              if (_this.fontSize == other.fontSize)
                if (_this.fontWeight == other.fontWeight)
                  if (_this.letterSpacing == other.letterSpacing)
                    if (_this.wordSpacing == other.wordSpacing)
                      if (_this.textBaseline == other.textBaseline)
                        if (_this.height == other.height)
                          t1 = _this.foreground == other.foreground && _this.background == other.background && J.$eq$(_this.decoration, other.decoration) && J.$eq$(_this.decorationColor, other.decorationColor) && _this.decorationStyle == other.decorationStyle && S.listEquals(_this.shadows, other.shadows, Q.Shadow) && S.listEquals(_this.get$fontFamilyFallback(), other.get$fontFamilyFallback(), P.String);
                        else
                          t1 = false;
                      else
                        t1 = false;
                    else
                      t1 = false;
                  else
                    t1 = false;
                else
                  t1 = false;
              else
                t1 = false;
            else
              t1 = false;
          else
            t1 = false;
        else
          t1 = false;
      else
        t1 = false;
      return t1;
    },
    get$hashCode: function(_) {
      var _this = this;
      return Q.hashValues(_this.inherit, _this.color, _this.backgroundColor, _this.fontFamily, _this.get$fontFamilyFallback(), _this.fontSize, _this.fontWeight, _this.fontStyle, _this.letterSpacing, _this.wordSpacing, _this.textBaseline, _this.height, _this.locale, _this.foreground, _this.background, _this.decoration, _this.decorationColor, _this.decorationStyle, _this.shadows, C.C__HashEnd);
    },
    toStringShort$0: function() {
      return new H.TypeImpl(H.getRti(this)).toString$0(0);
    }
  };
  D.FrictionSimulation.prototype = {
    x$1: function(_, time) {
      var _this = this,
        t1 = _this._v,
        t2 = _this._dragLog;
      return _this._friction_simulation$_x + t1 * Math.pow(_this._friction_simulation$_drag, time) / t2 - t1 / t2;
    },
    dx$1: function(_, time) {
      H.checkNum(time);
      return this._v * Math.pow(this._friction_simulation$_drag, time);
    },
    get$finalX: function() {
      return this._friction_simulation$_x - this._v / this._dragLog;
    },
    timeAtX$1: function(x) {
      var t2, t3, _this = this,
        t1 = _this._friction_simulation$_x;
      if (x === t1)
        return 0;
      t2 = _this._v;
      if (t2 !== 0)
        if (t2 > 0) {
          if (typeof x !== "number")
            return x.$lt();
          t3 = x < t1 || x > _this.get$finalX();
        } else {
          if (typeof x !== "number")
            return x.$gt();
          t3 = x > t1 || x < _this.get$finalX();
        }
      else
        t3 = true;
      if (t3)
        return 1 / 0;
      t3 = _this._dragLog;
      if (typeof x !== "number")
        return x.$sub();
      return Math.log(t3 * (x - t1) / t2 + 1) / t3;
    },
    isDone$1: function(time) {
      return Math.abs(this._v * Math.pow(this._friction_simulation$_drag, time)) < this.tolerance.velocity;
    }
  };
  T.Simulation.prototype = {
    toString$0: function(_) {
      return new H.TypeImpl(H.getRti(this)).toString$0(0);
    }
  };
  M.SpringDescription.prototype = {
    toString$0: function(_) {
      var _this = this;
      return new H.TypeImpl(H.getRti(_this)).toString$0(0) + "(mass: " + C.JSNumber_methods.toStringAsFixed$1(_this.mass, 1) + ", stiffness: " + C.JSInt_methods.toStringAsFixed$1(_this.stiffness, 1) + ", damping: " + C.JSNumber_methods.toStringAsFixed$1(_this.damping, 1) + ")";
    }
  };
  M.SpringType.prototype = {
    toString$0: function(_) {
      return this._spring_simulation$_name;
    }
  };
  M.SpringSimulation.prototype = {
    x$1: function(_, time) {
      var t1 = this._endPosition,
        t2 = this._solution.x$1(0, time);
      if (typeof t1 !== "number")
        return t1.$add();
      return t1 + t2;
    },
    dx$1: function(_, time) {
      return this._solution.dx$1(0, time);
    },
    isDone$1: function(time) {
      var t1 = this._solution;
      return B.nearEqual(t1.x$1(0, time), 0, this.tolerance.distance) && B.nearEqual(t1.dx$1(0, time), 0, this.tolerance.velocity);
    },
    toString$0: function(_) {
      var t1 = this._solution;
      return new H.TypeImpl(H.getRti(this)).toString$0(0) + "(end: " + H.S(this._endPosition) + ", " + t1.get$type(t1).toString$0(0) + ")";
    }
  };
  M.ScrollSpringSimulation.prototype = {
    x$1: function(_, time) {
      return this.isDone$1(time) ? this._endPosition : this.super$SpringSimulation$x(0, time);
    }
  };
  M._CriticalSolution.prototype = {
    x$1: function(_, time) {
      return (this._c1 + this._c2 * time) * Math.pow(2.718281828459045, this._r * time);
    },
    dx$1: function(_, time) {
      var t1 = this._r,
        power = Math.pow(2.718281828459045, t1 * time),
        t2 = this._c2;
      return t1 * (this._c1 + t2 * time) * power + t2 * power;
    },
    get$type: function(_) {
      return C.SpringType_0;
    },
    $is_SpringSolution: 1
  };
  M._OverdampedSolution.prototype = {
    x$1: function(_, time) {
      var _this = this;
      return _this._c1 * Math.pow(2.718281828459045, _this._r1 * time) + _this._c2 * Math.pow(2.718281828459045, _this._r2 * time);
    },
    dx$1: function(_, time) {
      var _this = this,
        t1 = _this._r1,
        t2 = _this._r2;
      return _this._c1 * t1 * Math.pow(2.718281828459045, t1 * time) + _this._c2 * t2 * Math.pow(2.718281828459045, t2 * time);
    },
    get$type: function(_) {
      return C.SpringType_2;
    },
    $is_SpringSolution: 1
  };
  M._UnderdampedSolution.prototype = {
    x$1: function(_, time) {
      var _this = this,
        t1 = _this._w * time;
      return Math.pow(2.718281828459045, _this._r * time) * (_this._c1 * Math.cos(t1) + _this._c2 * Math.sin(t1));
    },
    dx$1: function(_, time) {
      var t4, _this = this,
        t1 = _this._r,
        power = Math.pow(2.718281828459045, t1 * time),
        t2 = _this._w,
        t3 = t2 * time,
        cosine = Math.cos(t3),
        sine = Math.sin(t3);
      t3 = _this._c2;
      t4 = _this._c1;
      return power * (t3 * t2 * cosine - t4 * t2 * sine) + t1 * power * (t3 * sine + t4 * cosine);
    },
    get$type: function(_) {
      return C.SpringType_1;
    },
    $is_SpringSolution: 1
  };
  N.Tolerance.prototype = {
    toString$0: function(_) {
      return "Tolerance(distance: \xb1" + H.S(this.distance) + ", time: \xb10.001, velocity: \xb1" + H.S(this.velocity) + ")";
    }
  };
  N.RendererBinding.prototype = {
    handleMetricsChanged$0: function() {
      this.RendererBinding__pipelineOwner._rootNode.set$configuration(this.createViewConfiguration$0());
      this.scheduleForcedFrame$0();
    },
    handleTextScaleFactorChanged$0: function() {
    },
    handlePlatformBrightnessChanged$0: function() {
    },
    createViewConfiguration$0: function() {
      var t1 = $.$get$window(),
        devicePixelRatio = t1.devicePixelRatio;
      return new A.ViewConfiguration(t1.get$physicalSize().$div(0, devicePixelRatio), devicePixelRatio);
    },
    _createMouseTracker$0: function() {
      var t1 = new Y.MouseTracker(new N.RendererBinding__createMouseTracker_closure(this), P.LinkedHashMap_LinkedHashMap$_empty(Y.MouseTrackerAnnotation, Y._TrackedAnnotation), P.LinkedHashMap_LinkedHashMap$_empty(P.int, F.PointerEvent));
      this.GestureBinding_pointerRouter._globalRoutes.add$1(0, H.functionTypeCheck(t1.get$_mouse_tracking$_handleEvent(), {func: 1, ret: -1, args: [F.PointerEvent]}));
      return t1;
    },
    _handleSemanticsEnabledChanged$0: function() {
      $.$get$window().toString;
      this.setSemanticsEnabled$1(T.EngineSemanticsOwner_instance()._semanticsEnabled);
    },
    setSemanticsEnabled$1: function(enabled) {
      var t1, _this = this;
      if (enabled) {
        if (_this.RendererBinding__semanticsHandle == null)
          _this.RendererBinding__semanticsHandle = _this.RendererBinding__pipelineOwner.ensureSemantics$0();
      } else {
        t1 = _this.RendererBinding__semanticsHandle;
        if (t1 != null)
          t1.dispose$0();
        _this.RendererBinding__semanticsHandle = null;
      }
    },
    _handleSemanticsAction$3: function(id, action, args) {
      var t1 = this.RendererBinding__pipelineOwner._semanticsOwner;
      if (t1 != null)
        t1.performAction$3(id, action, null);
    },
    _handleSemanticsOwnerCreated$0: function() {
      var t1 = this.RendererBinding__pipelineOwner._rootNode;
      H.interceptedTypeCheck(B.AbstractNode.prototype.get$owner.call(t1), "$isPipelineOwner")._nodesNeedingSemantics.add$1(0, t1);
      H.interceptedTypeCheck(B.AbstractNode.prototype.get$owner.call(t1), "$isPipelineOwner").onNeedVisualUpdate.call$0();
    },
    _handleSemanticsOwnerDisposed$0: function() {
      this.RendererBinding__pipelineOwner._rootNode.clearSemantics$0();
    },
    _handlePersistentFrameCallback$1: function(timeStamp) {
      H.interceptedTypeCheck(timeStamp, "$isDuration");
      this.drawFrame$0();
    },
    drawFrame$0: function() {
      var _this = this;
      _this.RendererBinding__pipelineOwner.flushLayout$0();
      _this.RendererBinding__pipelineOwner.flushCompositingBits$0();
      _this.RendererBinding__pipelineOwner.flushPaint$0();
      _this.RendererBinding__pipelineOwner._rootNode.compositeFrame$0();
      _this.RendererBinding__pipelineOwner.flushSemantics$0();
    }
  };
  N.RendererBinding__createMouseTracker_closure.prototype = {
    call$1: function(offset) {
      H.interceptedTypeCheck(offset, "$isOffset");
      return this.$this.RendererBinding__pipelineOwner._rootNode._layer.find$1$1(0, offset.$mul(0, $.$get$window().devicePixelRatio), Y.MouseTrackerAnnotation);
    },
    $signature: 111
  };
  S.BoxConstraints.prototype = {
    loosen$0: function() {
      return new S.BoxConstraints(0, this.maxWidth, 0, this.maxHeight);
    },
    enforce$1: function(constraints) {
      var t4, _this = this,
        t1 = constraints.minWidth,
        t2 = constraints.maxWidth,
        t3 = J.clamp$2$n(_this.minWidth, t1, t2);
      t2 = J.clamp$2$n(_this.maxWidth, t1, t2);
      t1 = constraints.minHeight;
      t4 = constraints.maxHeight;
      return new S.BoxConstraints(t3, t2, J.clamp$2$n(_this.minHeight, t1, t4), J.clamp$2$n(_this.maxHeight, t1, t4));
    },
    tighten$2$height$width: function(height, width) {
      var t5, t6, _this = this,
        t1 = width == null,
        t2 = _this.minWidth,
        t3 = t1 ? t2 : C.JSNumber_methods.clamp$2(width, t2, _this.maxWidth),
        t4 = _this.maxWidth;
      t1 = t1 ? t4 : C.JSNumber_methods.clamp$2(width, t2, t4);
      t2 = height == null;
      t4 = _this.minHeight;
      t5 = t2 ? t4 : C.JSNumber_methods.clamp$2(height, t4, _this.maxHeight);
      t6 = _this.maxHeight;
      return new S.BoxConstraints(t3, t1, t5, t2 ? t6 : C.JSNumber_methods.clamp$2(height, t4, t6));
    },
    tighten$1$width: function(width) {
      return this.tighten$2$height$width(null, width);
    },
    tighten$1$height: function(height) {
      return this.tighten$2$height$width(height, null);
    },
    constrain$1: function(size) {
      var _this = this;
      return new Q.Size(J.clamp$2$n(size._dx, _this.minWidth, _this.maxWidth), J.clamp$2$n(size._dy, _this.minHeight, _this.maxHeight));
    },
    get$isTight: function() {
      var _this = this,
        t1 = _this.minWidth,
        t2 = _this.maxWidth;
      if (typeof t1 !== "number")
        return t1.$ge();
      if (typeof t2 !== "number")
        return H.iae(t2);
      if (t1 >= t2) {
        t1 = _this.minHeight;
        t2 = _this.maxHeight;
        if (typeof t1 !== "number")
          return t1.$ge();
        if (typeof t2 !== "number")
          return H.iae(t2);
        t2 = t1 >= t2;
        t1 = t2;
      } else
        t1 = false;
      return t1;
    },
    $mul: function(_, factor) {
      var t2, t3, t4, _this = this,
        t1 = _this.minWidth;
      if (typeof t1 !== "number")
        return t1.$mul();
      if (typeof factor !== "number")
        return H.iae(factor);
      t2 = _this.maxWidth;
      if (typeof t2 !== "number")
        return t2.$mul();
      t3 = _this.minHeight;
      if (typeof t3 !== "number")
        return t3.$mul();
      t4 = _this.maxHeight;
      if (typeof t4 !== "number")
        return t4.$mul();
      return new S.BoxConstraints(t1 * factor, t2 * factor, t3 * factor, t4 * factor);
    },
    $eq: function(_, other) {
      var _this = this;
      if (other == null)
        return false;
      if (_this === other)
        return true;
      if (!(other instanceof S.BoxConstraints))
        return false;
      return _this.minWidth == other.minWidth && _this.maxWidth == other.maxWidth && _this.minHeight == other.minHeight && _this.maxHeight == other.maxHeight;
    },
    get$hashCode: function(_) {
      var _this = this;
      return Q.hashValues(_this.minWidth, _this.maxWidth, _this.minHeight, _this.maxHeight, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd);
    },
    toString$0: function(_) {
      return this.super$Object$toString(0);
    }
  };
  S.BoxHitTestEntry.prototype = {
    get$target: function(_) {
      return H.interceptedTypeCheck(this.target, "$isRenderBox");
    },
    toString$0: function(_) {
      var t1 = this.super$HitTestEntry$toString(0);
      return t1;
    }
  };
  S.BoxParentData.prototype = {
    toString$0: function(_) {
      var t1 = this.super$ParentData$toString(0);
      return t1;
    },
    get$offset: function(receiver) {
      return this.offset;
    }
  };
  S.ContainerBoxParentData.prototype = {};
  S._IntrinsicDimensionsCacheEntry.prototype = {};
  S.RenderBox.prototype = {
    setupParentData$1: function(child) {
      if (!(child.parentData instanceof S.BoxParentData))
        child.parentData = new S.BoxParentData(C.Offset_0_0);
    },
    get$size: function(_) {
      return this._size;
    },
    get$semanticBounds: function() {
      var t1 = this._size,
        t2 = t1._dx;
      t1 = t1._dy;
      if (typeof t2 !== "number")
        return H.iae(t2);
      if (typeof t1 !== "number")
        return H.iae(t1);
      return new Q.Rect(0, 0, 0 + t2, 0 + t1);
    },
    getDistanceToBaseline$2$onlyReal: function(baseline, onlyReal) {
      var result = this.getDistanceToActualBaseline$1(baseline);
      return result;
    },
    getDistanceToActualBaseline$1: function(baseline) {
      var _this = this;
      if (_this._cachedBaselines == null)
        _this.set$_cachedBaselines(P.LinkedHashMap_LinkedHashMap$_empty(Q.TextBaseline, P.double));
      _this._cachedBaselines.putIfAbsent$2(0, baseline, new S.RenderBox_getDistanceToActualBaseline_closure(_this, baseline));
      return _this._cachedBaselines.$index(0, baseline);
    },
    computeDistanceToActualBaseline$1: function(baseline) {
      return;
    },
    get$constraints: function() {
      return H.interceptedTypeCheck(K.RenderObject.prototype.get$constraints.call(this), "$isBoxConstraints");
    },
    markNeedsLayout$0: function() {
      var _this = this,
        t1 = _this._cachedBaselines;
      if (!(t1 != null && t1.get$isNotEmpty(t1))) {
        t1 = _this._cachedIntrinsicDimensions;
        t1 = t1 != null && t1.get$isNotEmpty(t1);
      } else
        t1 = true;
      if (t1) {
        t1 = _this._cachedBaselines;
        if (t1 != null)
          t1.clear$0(0);
        t1 = _this._cachedIntrinsicDimensions;
        if (t1 != null)
          t1.clear$0(0);
        if (_this._node$_parent instanceof K.RenderObject) {
          _this.markParentNeedsLayout$0();
          return;
        }
      }
      _this.super$RenderObject$markNeedsLayout();
    },
    performResize$0: function() {
      var t1 = H.interceptedTypeCheck(K.RenderObject.prototype.get$constraints.call(this), "$isBoxConstraints");
      this._size = new Q.Size(C.JSInt_methods.clamp$2(0, t1.minWidth, t1.maxWidth), C.JSInt_methods.clamp$2(0, t1.minHeight, t1.maxHeight));
    },
    performLayout$0: function() {
    },
    hitTest$2$position: function(result, position) {
      var _this = this;
      if (_this._size.contains$1(0, position))
        if (_this.hitTestChildren$2$position(result, position) || H.boolConversionCheck(_this.hitTestSelf$1(position))) {
          C.JSArray_methods.add$1(result._path, new S.BoxHitTestEntry(position, _this));
          return true;
        }
      return false;
    },
    hitTestSelf$1: function(position) {
      return false;
    },
    hitTestChildren$2$position: function(result, position) {
      return false;
    },
    applyPaintTransform$2: function(child, transform) {
      var offset = H.interceptedTypeCheck(child.parentData, "$isBoxParentData").offset;
      transform.translate$2(0, offset._dx, offset._dy);
    },
    globalToLocal$1: function(point) {
      var n, t1, i, d, t2, t3, s,
        transform = this.getTransformTo$1(0, null);
      if (transform.copyInverse$1(transform) === 0)
        return C.Offset_0_0;
      n = new E.Vector3(new Float64Array(3));
      n.setValues$3(0, 0, 1);
      t1 = new E.Vector3(new Float64Array(3));
      t1.setValues$3(0, 0, 0);
      i = transform.perspectiveTransform$1(t1);
      t1 = new E.Vector3(new Float64Array(3));
      t1.setValues$3(0, 0, 1);
      d = transform.perspectiveTransform$1(t1).$sub(0, i);
      t1 = point._dx;
      t2 = point._dy;
      t3 = new E.Vector3(new Float64Array(3));
      t3.setValues$3(t1, t2, 0);
      s = transform.perspectiveTransform$1(t3);
      t3 = s.$sub(0, d.scaled$1(n.dot$1(s) / n.dot$1(d)))._v3storage;
      return new Q.Offset(t3[0], t3[1]);
    },
    get$paintBounds: function() {
      var t1 = this._size,
        t2 = t1._dx;
      t1 = t1._dy;
      if (typeof t2 !== "number")
        return H.iae(t2);
      if (typeof t1 !== "number")
        return H.iae(t1);
      return new Q.Rect(0, 0, 0 + t2, 0 + t1);
    },
    handleEvent$2: function($event, entry) {
      this.super$RenderObject$handleEvent($event, H.interceptedTypeCheck(entry, "$isBoxHitTestEntry"));
    },
    set$_cachedBaselines: function(_cachedBaselines) {
      this._cachedBaselines = H.assertSubtype(_cachedBaselines, "$isMap", [Q.TextBaseline, P.double], "$asMap");
    }
  };
  S.RenderBox_getDistanceToActualBaseline_closure.prototype = {
    call$0: function() {
      return this.$this.computeDistanceToActualBaseline$1(this.baseline);
    },
    $signature: 69
  };
  S.RenderBoxContainerDefaultsMixin.prototype = {
    defaultComputeDistanceToFirstActualBaseline$1: function(baseline) {
      var t1, childParentData, result,
        child = this.ContainerRenderObjectMixin__firstChild;
      for (t1 = H.getRuntimeTypeArgument(this, "RenderBoxContainerDefaultsMixin", 1); child != null;) {
        childParentData = H.assertSubtypeOfRuntimeType(child.parentData, t1);
        result = child.getDistanceToActualBaseline$1(baseline);
        if (result != null) {
          t1 = childParentData.get$offset(childParentData)._dy;
          if (typeof t1 !== "number")
            return H.iae(t1);
          return result + t1;
        }
        child = childParentData.get$nextSibling(childParentData);
      }
      return;
    },
    defaultComputeDistanceToHighestActualBaseline$1: function(baseline) {
      var t1, result, childParentData, candidate, t2,
        child = this.ContainerRenderObjectMixin__firstChild;
      for (t1 = H.getRuntimeTypeArgument(this, "RenderBoxContainerDefaultsMixin", 1), result = null; child != null;) {
        childParentData = H.assertSubtypeOfRuntimeType(child.parentData, t1);
        candidate = child.getDistanceToActualBaseline$1(baseline);
        if (candidate != null) {
          t2 = childParentData.get$offset(childParentData)._dy;
          if (typeof t2 !== "number")
            return H.iae(t2);
          candidate += t2;
          result = result != null ? Math.min(result, candidate) : candidate;
        }
        child = childParentData.get$nextSibling(childParentData);
      }
      return result;
    },
    defaultHitTestChildren$2$position: function(result, position) {
      var t1, childParentData, t2, t3, t4, t5,
        child = this.ContainerRenderObjectMixin__lastChild;
      for (t1 = H.getRuntimeTypeArgument(this, "RenderBoxContainerDefaultsMixin", 1); child != null;) {
        childParentData = H.assertSubtypeOfRuntimeType(child.parentData, t1);
        t2 = childParentData.get$offset(childParentData);
        t3 = position._dx;
        t4 = t2._dx;
        if (typeof t3 !== "number")
          return t3.$sub();
        if (typeof t4 !== "number")
          return H.iae(t4);
        t5 = position._dy;
        t2 = t2._dy;
        if (typeof t5 !== "number")
          return t5.$sub();
        if (typeof t2 !== "number")
          return H.iae(t2);
        if (child.hitTest$2$position(result, new Q.Offset(t3 - t4, t5 - t2)))
          return true;
        child = childParentData.get$previousSibling(childParentData);
      }
      return false;
    },
    defaultPaint$2: function(context, offset) {
      var t1, t2, t3, childParentData, t4, t5,
        child = this.ContainerRenderObjectMixin__firstChild;
      for (t1 = H.getRuntimeTypeArgument(this, "RenderBoxContainerDefaultsMixin", 1), t2 = offset._dx, t3 = offset._dy; child != null;) {
        childParentData = H.assertSubtypeOfRuntimeType(child.parentData, t1);
        t4 = childParentData.get$offset(childParentData);
        t5 = t4._dx;
        if (typeof t5 !== "number")
          return t5.$add();
        if (typeof t2 !== "number")
          return H.iae(t2);
        t4 = t4._dy;
        if (typeof t4 !== "number")
          return t4.$add();
        if (typeof t3 !== "number")
          return H.iae(t3);
        context.paintChild$2(child, new Q.Offset(t5 + t2, t4 + t3));
        child = childParentData.get$nextSibling(childParentData);
      }
    }
  };
  S._ContainerBoxParentData_BoxParentData_ContainerParentDataMixin.prototype = {
    detach$0: function(_) {
      var t1, _this = this;
      _this.super$ParentData$detach(0);
      t1 = _this.ContainerParentDataMixin_previousSibling;
      if (t1 != null)
        H.assertSubtype(t1.parentData, "$isContainerParentDataMixin", [H.getRuntimeTypeArgument(_this, "_ContainerBoxParentData_BoxParentData_ContainerParentDataMixin", 0)], "$asContainerParentDataMixin").set$nextSibling(0, _this.ContainerParentDataMixin_nextSibling);
      t1 = _this.ContainerParentDataMixin_nextSibling;
      if (t1 != null)
        H.assertSubtype(t1.parentData, "$isContainerParentDataMixin", [H.getRuntimeTypeArgument(_this, "_ContainerBoxParentData_BoxParentData_ContainerParentDataMixin", 0)], "$asContainerParentDataMixin").set$previousSibling(0, _this.ContainerParentDataMixin_previousSibling);
      _this.set$previousSibling(0, null);
      _this.set$nextSibling(0, null);
    },
    set$previousSibling: function(_, previousSibling) {
      this.ContainerParentDataMixin_previousSibling = H.assertSubtypeOfRuntimeType(previousSibling, H.getRuntimeTypeArgument(this, "ContainerParentDataMixin", 0));
    },
    set$nextSibling: function(_, nextSibling) {
      this.ContainerParentDataMixin_nextSibling = H.assertSubtypeOfRuntimeType(nextSibling, H.getRuntimeTypeArgument(this, "ContainerParentDataMixin", 0));
    },
    get$previousSibling: function(receiver) {
      return this.ContainerParentDataMixin_previousSibling;
    },
    get$nextSibling: function(receiver) {
      return this.ContainerParentDataMixin_nextSibling;
    }
  };
  B.MultiChildLayoutParentData.prototype = {
    toString$0: function(_) {
      return this.super$BoxParentData$toString(0) + "; id=" + H.S(this.id);
    },
    $asContainerParentDataMixin: function() {
      return [S.RenderBox];
    },
    $as_ContainerBoxParentData_BoxParentData_ContainerParentDataMixin: function() {
      return [S.RenderBox];
    }
  };
  B.MultiChildLayoutDelegate.prototype = {
    layoutChild$2: function(childId, constraints) {
      var child = this._idToChild.$index(0, childId);
      child.layout$2$parentUsesSize(constraints, true);
      return child._size;
    },
    positionChild$2: function(childId, offset) {
      H.interceptedTypeCheck(this._idToChild.$index(0, childId).parentData, "$isMultiChildLayoutParentData").offset = offset;
    },
    _callPerformLayout$2: function(size, firstChild) {
      var childParentData, t1, child, t2, looseConstraints, fullWidthConstraints, contentTop, bottomNavigationBarHeight, bottomWidgetsHeight, bottomNavigationBarTop, persistentFooterHeight, t3, t4, contentBottom, bottomSheetSize, snackBarSize, fabSize, currentGeometry, currentFabOffset, fabOffset, t5, floatingActionButtonRect, _this = this,
        previousIdToChild = _this._idToChild;
      try {
        _this.set$_idToChild(P.LinkedHashMap_LinkedHashMap$_empty(P.Object, S.RenderBox));
        for (t1 = firstChild; t1 != null; t1 = child) {
          childParentData = H.interceptedTypeCheck(t1.parentData, "$isMultiChildLayoutParentData");
          _this._idToChild.$indexSet(0, childParentData.id, t1);
          child = childParentData.ContainerParentDataMixin_nextSibling;
        }
        t1 = size._dx;
        t2 = size._dy;
        looseConstraints = new S.BoxConstraints(0, t1, 0, t2);
        fullWidthConstraints = looseConstraints.tighten$1$width(t1);
        if (_this._idToChild.$index(0, C._ScaffoldSlot_1) != null) {
          contentTop = _this.layoutChild$2(C._ScaffoldSlot_1, fullWidthConstraints)._dy;
          _this.positionChild$2(C._ScaffoldSlot_1, C.Offset_0_0);
        } else
          contentTop = 0;
        if (_this._idToChild.$index(0, C._ScaffoldSlot_5) != null) {
          bottomNavigationBarHeight = _this.layoutChild$2(C._ScaffoldSlot_5, fullWidthConstraints)._dy;
          if (typeof bottomNavigationBarHeight !== "number")
            return H.iae(bottomNavigationBarHeight);
          bottomWidgetsHeight = 0 + bottomNavigationBarHeight;
          if (typeof t2 !== "number")
            return t2.$sub();
          bottomNavigationBarTop = Math.max(0, t2 - bottomWidgetsHeight);
          _this.positionChild$2(C._ScaffoldSlot_5, new Q.Offset(0, bottomNavigationBarTop));
        } else {
          bottomWidgetsHeight = 0;
          bottomNavigationBarTop = null;
        }
        if (_this._idToChild.$index(0, C._ScaffoldSlot_4) != null) {
          if (typeof t2 !== "number")
            return t2.$sub();
          if (typeof contentTop !== "number")
            return H.iae(contentTop);
          persistentFooterHeight = _this.layoutChild$2(C._ScaffoldSlot_4, new S.BoxConstraints(0, fullWidthConstraints.maxWidth, 0, Math.max(0, t2 - bottomWidgetsHeight - contentTop)))._dy;
          if (typeof persistentFooterHeight !== "number")
            return H.iae(persistentFooterHeight);
          bottomWidgetsHeight += persistentFooterHeight;
          _this.positionChild$2(C._ScaffoldSlot_4, new Q.Offset(0, Math.max(0, t2 - bottomWidgetsHeight)));
        }
        t3 = _this.minInsets;
        t4 = Math.max(H.checkNum(t3._bottom), bottomWidgetsHeight);
        if (typeof t2 !== "number")
          return t2.$sub();
        contentBottom = Math.max(0, t2 - t4);
        if (_this._idToChild.$index(0, C._ScaffoldSlot_0) != null) {
          if (typeof contentTop !== "number")
            return H.iae(contentTop);
          _this.layoutChild$2(C._ScaffoldSlot_0, new S.BoxConstraints(0, fullWidthConstraints.maxWidth, 0, Math.max(0, contentBottom - contentTop)));
          _this.positionChild$2(C._ScaffoldSlot_0, new Q.Offset(0, contentTop));
        }
        if (_this._idToChild.$index(0, C._ScaffoldSlot_2) != null) {
          if (typeof contentTop !== "number")
            return H.iae(contentTop);
          bottomSheetSize = _this.layoutChild$2(C._ScaffoldSlot_2, new S.BoxConstraints(0, fullWidthConstraints.maxWidth, 0, Math.max(0, contentBottom - contentTop)));
          t2 = bottomSheetSize._dx;
          if (typeof t1 !== "number")
            return t1.$sub();
          if (typeof t2 !== "number")
            return H.iae(t2);
          t4 = bottomSheetSize._dy;
          if (typeof t4 !== "number")
            return H.iae(t4);
          _this.positionChild$2(C._ScaffoldSlot_2, new Q.Offset((t1 - t2) / 2, contentBottom - t4));
        } else
          bottomSheetSize = C.Size_0_0;
        if (_this._idToChild.$index(0, C._ScaffoldSlot_3) != null) {
          snackBarSize = _this.layoutChild$2(C._ScaffoldSlot_3, fullWidthConstraints);
          t1 = snackBarSize._dy;
          if (typeof t1 !== "number")
            return H.iae(t1);
          _this.positionChild$2(C._ScaffoldSlot_3, new Q.Offset(0, contentBottom - t1));
        } else
          snackBarSize = C.Size_0_0;
        if (_this._idToChild.$index(0, C._ScaffoldSlot_6) != null) {
          fabSize = _this.layoutChild$2(C._ScaffoldSlot_6, looseConstraints);
          currentGeometry = new M.ScaffoldPrelayoutGeometry(fabSize, bottomSheetSize, contentBottom, t3, size, snackBarSize, _this.textDirection);
          currentFabOffset = _this.currentFloatingActionButtonLocation.getOffset$1(currentGeometry);
          fabOffset = _this.floatingActionButtonMotionAnimator.getOffset$3$begin$end$progress(_this.previousFloatingActionButtonLocation.getOffset$1(currentGeometry), currentFabOffset, _this.floatingActionButtonMoveAnimationProgress);
          _this.positionChild$2(C._ScaffoldSlot_6, fabOffset);
          t1 = fabOffset._dx;
          t2 = fabOffset._dy;
          t4 = fabSize._dx;
          t5 = fabSize._dy;
          if (typeof t1 !== "number")
            return t1.$add();
          if (typeof t4 !== "number")
            return H.iae(t4);
          if (typeof t2 !== "number")
            return t2.$add();
          if (typeof t5 !== "number")
            return H.iae(t5);
          floatingActionButtonRect = new Q.Rect(t1, t2, t1 + t4, t2 + t5);
        } else
          floatingActionButtonRect = null;
        if (_this._idToChild.$index(0, C._ScaffoldSlot_9) != null) {
          _this.layoutChild$2(C._ScaffoldSlot_9, fullWidthConstraints.tighten$1$height(t3._top));
          _this.positionChild$2(C._ScaffoldSlot_9, C.Offset_0_0);
        }
        if (_this._idToChild.$index(0, C._ScaffoldSlot_7) != null) {
          _this.layoutChild$2(C._ScaffoldSlot_7, S.BoxConstraints$tight(size));
          _this.positionChild$2(C._ScaffoldSlot_7, C.Offset_0_0);
        }
        if (_this._idToChild.$index(0, C._ScaffoldSlot_8) != null) {
          _this.layoutChild$2(C._ScaffoldSlot_8, S.BoxConstraints$tight(size));
          _this.positionChild$2(C._ScaffoldSlot_8, C.Offset_0_0);
        }
        _this.geometryNotifier._updateWith$2$bottomNavigationBarTop$floatingActionButtonArea(bottomNavigationBarTop, floatingActionButtonRect);
      } finally {
        _this.set$_idToChild(previousIdToChild);
      }
    },
    toString$0: function(_) {
      return new H.TypeImpl(H.getRti(this)).toString$0(0);
    },
    set$_idToChild: function(_idToChild) {
      this._idToChild = H.assertSubtype(_idToChild, "$isMap", [P.Object, S.RenderBox], "$asMap");
    }
  };
  B.RenderCustomMultiChildLayoutBox.prototype = {
    setupParentData$1: function(child) {
      H.interceptedTypeCheck(child, "$isRenderBox");
      if (!(child.parentData instanceof B.MultiChildLayoutParentData))
        child.parentData = new B.MultiChildLayoutParentData(null, null, C.Offset_0_0);
    },
    set$delegate: function(value) {
      var t1, _this = this;
      if (_this._custom_layout$_delegate === value)
        return;
      if (new H.TypeImpl(H.getRti(value)).$eq(0, new H.TypeImpl(H.getRti(_this._custom_layout$_delegate)))) {
        t1 = _this._custom_layout$_delegate;
        t1 = !t1.minInsets.$eq(0, value.minInsets) || t1.textDirection != value.textDirection || t1.floatingActionButtonMoveAnimationProgress != value.floatingActionButtonMoveAnimationProgress || t1.previousFloatingActionButtonLocation != value.previousFloatingActionButtonLocation || t1.currentFloatingActionButtonLocation != value.currentFloatingActionButtonLocation;
      } else
        t1 = true;
      if (t1)
        _this.markNeedsLayout$0();
      _this._custom_layout$_delegate = value;
    },
    performLayout$0: function() {
      var _this = this,
        t1 = H.interceptedTypeCheck(K.RenderObject.prototype.get$constraints.call(_this), "$isBoxConstraints");
      t1 = t1.constrain$1(new Q.Size(C.JSInt_methods.clamp$2(1 / 0, t1.minWidth, t1.maxWidth), C.JSInt_methods.clamp$2(1 / 0, t1.minHeight, t1.maxHeight)));
      _this._size = t1;
      _this._custom_layout$_delegate._callPerformLayout$2(t1, _this.ContainerRenderObjectMixin__firstChild);
    },
    paint$2: function(context, offset) {
      this.defaultPaint$2(context, offset);
    },
    hitTestChildren$2$position: function(result, position) {
      return this.defaultHitTestChildren$2$position(result, position);
    },
    $asRenderBoxContainerDefaultsMixin: function() {
      return [S.RenderBox, B.MultiChildLayoutParentData];
    },
    $asContainerRenderObjectMixin: function() {
      return [S.RenderBox, B.MultiChildLayoutParentData];
    }
  };
  B._RenderCustomMultiChildLayoutBox_RenderBox_ContainerRenderObjectMixin.prototype = {
    attach$1: function(owner) {
      var child;
      H.interceptedTypeCheck(owner, "$isPipelineOwner");
      this.super$RenderObject$attach(owner);
      child = this.ContainerRenderObjectMixin__firstChild;
      for (; child != null;) {
        child.attach$1(owner);
        child = H.interceptedTypeCheck(child.parentData, "$isMultiChildLayoutParentData").ContainerParentDataMixin_nextSibling;
      }
    },
    detach$0: function(_) {
      var child;
      this.super$AbstractNode$detach(0);
      child = this.ContainerRenderObjectMixin__firstChild;
      for (; child != null;) {
        child.detach$0(0);
        child = H.interceptedTypeCheck(child.parentData, "$isMultiChildLayoutParentData").ContainerParentDataMixin_nextSibling;
      }
    },
    set$_object$_firstChild: function(_firstChild) {
      this.ContainerRenderObjectMixin__firstChild = H.assertSubtypeOfRuntimeType(_firstChild, H.getRuntimeTypeArgument(this, "ContainerRenderObjectMixin", 0));
    },
    set$_object$_lastChild: function(_lastChild) {
      this.ContainerRenderObjectMixin__lastChild = H.assertSubtypeOfRuntimeType(_lastChild, H.getRuntimeTypeArgument(this, "ContainerRenderObjectMixin", 0));
    }
  };
  B._RenderCustomMultiChildLayoutBox_RenderBox_ContainerRenderObjectMixin_RenderBoxContainerDefaultsMixin.prototype = {};
  V.CustomPainter.prototype = {
    addListener$1: function(_, listener) {
      var t1;
      H.functionTypeCheck(listener, {func: 1, ret: -1});
      t1 = this._repaint;
      if (t1 != null) {
        t1 = t1._listeners;
        t1.toString;
        H.assertSubtypeOfRuntimeType(listener, H.getTypeArgumentByIndex(t1, 0));
        t1._isDirty = true;
        C.JSArray_methods.add$1(t1._list, listener);
      }
      return;
    },
    removeListener$1: function(_, listener) {
      var t1;
      H.functionTypeCheck(listener, {func: 1, ret: -1});
      t1 = this._repaint;
      if (t1 != null) {
        t1 = t1._listeners;
        t1.toString;
        H.assertSubtypeOfRuntimeType(listener, H.getTypeArgumentByIndex(t1, 0));
        t1._isDirty = true;
        C.JSArray_methods.remove$1(t1._list, listener);
      }
      return;
    },
    shouldRebuildSemantics$1: function(oldDelegate) {
      return this.shouldRepaint$1(oldDelegate);
    },
    hitTest$1: function(position) {
      return;
    },
    toString$0: function(_) {
      var _this = this,
        t1 = _this.get$runtimeType(_this).toString$0(0) + "#" + Y.shortHash(_this) + "(",
        t2 = _this._repaint;
      t2 = t2 == null ? null : "Listenable.merge([" + C.JSArray_methods.join$1(t2._change_notifier$_children, ", ") + "])";
      return t1 + (t2 == null ? "" : t2) + ")";
    }
  };
  V.CustomPainterSemantics.prototype = {};
  V.RenderCustomPaint.prototype = {
    set$painter: function(value) {
      var t1 = this._custom_paint$_painter;
      if (t1 == value)
        return;
      this._custom_paint$_painter = value;
      this._didUpdatePainter$2(value, t1);
    },
    set$foregroundPainter: function(value) {
      var t1 = this._foregroundPainter;
      if (t1 == value)
        return;
      this._foregroundPainter = value;
      this._didUpdatePainter$2(value, t1);
    },
    _didUpdatePainter$2: function(newPainter, oldPainter) {
      var _this = this,
        t1 = newPainter == null;
      if (t1)
        _this.markNeedsPaint$0();
      else if (oldPainter == null || !new H.TypeImpl(H.getRti(newPainter)).$eq(0, new H.TypeImpl(H.getRti(oldPainter))) || newPainter.shouldRepaint$1(oldPainter))
        _this.markNeedsPaint$0();
      if (_this._node$_owner != null) {
        if (oldPainter != null)
          oldPainter.removeListener$1(0, _this.get$markNeedsPaint());
        if (!t1)
          newPainter.addListener$1(0, _this.get$markNeedsPaint());
      }
      if (t1) {
        if (_this._node$_owner != null)
          _this.markNeedsSemanticsUpdate$0();
      } else if (oldPainter == null || !new H.TypeImpl(H.getRti(newPainter)).$eq(0, new H.TypeImpl(H.getRti(oldPainter))) || newPainter.shouldRebuildSemantics$1(oldPainter))
        _this.markNeedsSemanticsUpdate$0();
    },
    set$preferredSize: function(value) {
      if (this._preferredSize.$eq(0, value))
        return;
      this._preferredSize = value;
      this.markNeedsLayout$0();
    },
    attach$1: function(owner) {
      var t1, _this = this;
      _this.super$_RenderProxyBox_RenderBox_RenderObjectWithChildMixin$attach(H.interceptedTypeCheck(owner, "$isPipelineOwner"));
      t1 = _this._custom_paint$_painter;
      if (t1 != null)
        t1.addListener$1(0, _this.get$markNeedsPaint());
      t1 = _this._foregroundPainter;
      if (t1 != null)
        t1.addListener$1(0, _this.get$markNeedsPaint());
    },
    detach$0: function(_) {
      var _this = this,
        t1 = _this._custom_paint$_painter;
      if (t1 != null)
        t1.removeListener$1(0, _this.get$markNeedsPaint());
      t1 = _this._foregroundPainter;
      if (t1 != null)
        t1.removeListener$1(0, _this.get$markNeedsPaint());
      _this.super$_RenderProxyBox_RenderBox_RenderObjectWithChildMixin$detach(0);
    },
    hitTestChildren$2$position: function(result, position) {
      var t1 = this._foregroundPainter;
      if (t1 != null) {
        t1 = t1.hitTest$1(position);
        t1 = t1 === true;
      } else
        t1 = false;
      if (t1)
        return true;
      return this.super$RenderProxyBoxMixin$hitTestChildren(result, position);
    },
    hitTestSelf$1: function(position) {
      var t1;
      if (this._custom_paint$_painter != null)
        t1 = true;
      else
        t1 = false;
      return t1;
    },
    performResize$0: function() {
      var _this = this;
      _this._size = H.interceptedTypeCheck(K.RenderObject.prototype.get$constraints.call(_this), "$isBoxConstraints").constrain$1(_this._preferredSize);
      _this.markNeedsSemanticsUpdate$0();
    },
    _paintWithPainter$3: function(canvas, offset, painter) {
      canvas.save$0(0);
      if (!offset.$eq(0, C.Offset_0_0))
        canvas.translate$2(0, offset._dx, offset._dy);
      painter.paint$2(canvas, this._size);
      canvas.restore$0(0);
    },
    paint$2: function(context, offset) {
      var _this = this;
      if (_this._custom_paint$_painter != null) {
        _this._paintWithPainter$3(context.get$canvas(context), offset, _this._custom_paint$_painter);
        _this._setRasterCacheHints$1(context);
      }
      _this.super$RenderProxyBoxMixin$paint(context, offset);
      if (_this._foregroundPainter != null) {
        _this._paintWithPainter$3(context.get$canvas(context), offset, _this._foregroundPainter);
        _this._setRasterCacheHints$1(context);
      }
    },
    _setRasterCacheHints$1: function(context) {
    },
    describeSemanticsConfiguration$1: function(config) {
      this.super$RenderObject$describeSemanticsConfiguration(config);
      this.set$_backgroundSemanticsBuilder(null);
      this.set$_foregroundSemanticsBuilder(null);
      config._isSemanticBoundary = false;
    },
    assembleSemanticsNode$3: function(node, config, children) {
      var t2, hasBackgroundSemantics, hasForegroundSemantics, finalChildren, _this = this,
        t1 = A.SemanticsNode;
      H.assertSubtype(children, "$isIterable", [t1], "$asIterable");
      _this.set$_backgroundSemanticsNodes(V.RenderCustomPaint__updateSemanticsChildren(_this._backgroundSemanticsNodes, C.List_empty4));
      _this.set$_foregroundSemanticsNodes(V.RenderCustomPaint__updateSemanticsChildren(_this._foregroundSemanticsNodes, C.List_empty4));
      t2 = _this._backgroundSemanticsNodes;
      hasBackgroundSemantics = t2 != null && t2.length !== 0;
      t2 = _this._foregroundSemanticsNodes;
      hasForegroundSemantics = t2 != null && t2.length !== 0;
      finalChildren = H.setRuntimeTypeInfo([], [t1]);
      if (hasBackgroundSemantics)
        C.JSArray_methods.addAll$1(finalChildren, _this._backgroundSemanticsNodes);
      C.JSArray_methods.addAll$1(finalChildren, children);
      if (hasForegroundSemantics)
        C.JSArray_methods.addAll$1(finalChildren, _this._foregroundSemanticsNodes);
      _this.super$RenderObject$assembleSemanticsNode(node, config, finalChildren);
    },
    clearSemantics$0: function() {
      this.super$RenderObject$clearSemantics();
      this.set$_backgroundSemanticsNodes(null);
      this.set$_foregroundSemanticsNodes(null);
    },
    set$_backgroundSemanticsBuilder: function(_backgroundSemanticsBuilder) {
      this._backgroundSemanticsBuilder = H.functionTypeCheck(_backgroundSemanticsBuilder, {func: 1, ret: [P.List, V.CustomPainterSemantics], args: [Q.Size]});
    },
    set$_foregroundSemanticsBuilder: function(_foregroundSemanticsBuilder) {
      this._foregroundSemanticsBuilder = H.functionTypeCheck(_foregroundSemanticsBuilder, {func: 1, ret: [P.List, V.CustomPainterSemantics], args: [Q.Size]});
    },
    set$_backgroundSemanticsNodes: function(_backgroundSemanticsNodes) {
      this._backgroundSemanticsNodes = H.assertSubtype(_backgroundSemanticsNodes, "$isList", [A.SemanticsNode], "$asList");
    },
    set$_foregroundSemanticsNodes: function(_foregroundSemanticsNodes) {
      this._foregroundSemanticsNodes = H.assertSubtype(_foregroundSemanticsNodes, "$isList", [A.SemanticsNode], "$asList");
    }
  };
  T.DebugOverflowIndicatorMixin.prototype = {};
  V.RenderErrorBox.prototype = {
    RenderErrorBox$1: function(message) {
      var builder, t1, t2, exception,
        _s24_ = "\n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n\n";
      try {
        t1 = this.message;
        if (t1 !== "") {
          builder = Q.ParagraphBuilder$($.$get$RenderErrorBox_paragraphStyle());
          t2 = $.$get$RenderErrorBox_textStyle();
          C.JSArray_methods.add$1(builder._ops, t2);
          t1 = H.S(t1) + _s24_ + H.S(t1) + _s24_ + H.S(t1) + _s24_ + H.S(t1) + _s24_ + H.S(t1) + _s24_ + H.S(t1) + _s24_ + H.S(t1) + _s24_ + H.S(t1) + _s24_ + H.S(t1) + _s24_ + H.S(t1) + _s24_ + H.S(t1) + _s24_ + H.S(t1);
          C.JSArray_methods.add$1(builder._ops, t1);
          this._paragraph = H.interceptedTypeCheck(builder.build$0(), "$isParagraph");
        }
      } catch (exception) {
        H.unwrapException(exception);
      }
    },
    get$sizedByParent: function() {
      return true;
    },
    hitTestSelf$1: function(position) {
      return true;
    },
    performResize$0: function() {
      this._size = H.interceptedTypeCheck(K.RenderObject.prototype.get$constraints.call(this), "$isBoxConstraints").constrain$1(C.Size_100000_100000);
    },
    paint$2: function(context, offset) {
      var width, parentBox, t1, t2, t3, t4, t5, t6, exception, _this = this;
      try {
        t1 = context.get$canvas(context);
        t2 = _this._size;
        t3 = offset._dx;
        t4 = offset._dy;
        t5 = t2._dx;
        t2 = t2._dy;
        if (typeof t3 !== "number")
          return t3.$add();
        if (typeof t5 !== "number")
          return H.iae(t5);
        if (typeof t4 !== "number")
          return t4.$add();
        if (typeof t2 !== "number")
          return H.iae(t2);
        t6 = new Q.Paint(new Q.PaintData());
        t6.set$color(0, C.Color_4035969024);
        t1.drawRect$2(new Q.Rect(t3, t4, t3 + t5, t4 + t2), t6);
        width = null;
        t1 = _this._paragraph;
        if (t1 != null) {
          t2 = _this._node$_parent;
          if (t2 instanceof S.RenderBox) {
            parentBox = t2;
            width = parentBox._size._dx;
          } else
            width = _this._size._dx;
          t1.layout$1(new Q.ParagraphConstraints(width));
          context.get$canvas(context).drawParagraph$2(_this._paragraph, offset);
        }
      } catch (exception) {
        H.unwrapException(exception);
      }
    }
  };
  F.FlexFit.prototype = {
    toString$0: function(_) {
      return this._flex$_name;
    }
  };
  F.FlexParentData.prototype = {
    toString$0: function(_) {
      var t1 = this.super$BoxParentData$toString(0);
      return t1;
    },
    $asContainerParentDataMixin: function() {
      return [S.RenderBox];
    },
    $as_ContainerBoxParentData_BoxParentData_ContainerParentDataMixin: function() {
      return [S.RenderBox];
    }
  };
  F.MainAxisSize.prototype = {
    toString$0: function(_) {
      return this._flex$_name;
    }
  };
  F.MainAxisAlignment.prototype = {
    toString$0: function(_) {
      return this._flex$_name;
    }
  };
  F.CrossAxisAlignment.prototype = {
    toString$0: function(_) {
      return this._flex$_name;
    }
  };
  F.RenderFlex.prototype = {
    setupParentData$1: function(child) {
      H.interceptedTypeCheck(child, "$isRenderBox");
      if (!(child.parentData instanceof F.FlexParentData))
        child.parentData = new F.FlexParentData(null, null, C.Offset_0_0);
    },
    computeDistanceToActualBaseline$1: function(baseline) {
      if (this._flex$_direction === C.Axis_0)
        return this.defaultComputeDistanceToHighestActualBaseline$1(baseline);
      return this.defaultComputeDistanceToFirstActualBaseline$1(baseline);
    },
    _getCrossSize$1: function(child) {
      switch (this._flex$_direction) {
        case C.Axis_0:
          return child._size._dy;
        case C.Axis_1:
          return child._size._dx;
      }
      return;
    },
    _getMainSize$1: function(child) {
      switch (this._flex$_direction) {
        case C.Axis_0:
          return child._size._dx;
        case C.Axis_1:
          return child._size._dy;
      }
      return;
    },
    performLayout$0: function() {
      var canFlex, child, lastFlexChild0, lastFlexChild, totalFlex, totalChildren, crossSize, allocatedSize, childParentData, flex, innerConstraints, t1, freeSpace, spacePerFlex, allocatedFlexSpace, maxBaselineDistance, maxChildExtent, t2, minChildExtent, childSize, distance, idealSize, actualSize, actualSizeDelta, remainingSpace, flipMainAxis, leadingSpace, betweenSpace, childMainPosition, childCrossPosition, _this = this, _null = null,
        maxMainSize = _this._flex$_direction === C.Axis_0 ? H.interceptedTypeCheck(K.RenderObject.prototype.get$constraints.call(_this), "$isBoxConstraints").maxWidth : H.interceptedTypeCheck(K.RenderObject.prototype.get$constraints.call(_this), "$isBoxConstraints").maxHeight;
      if (typeof maxMainSize !== "number")
        return maxMainSize.$lt();
      canFlex = maxMainSize < 1 / 0;
      child = _this.ContainerRenderObjectMixin__firstChild;
      for (lastFlexChild0 = child, lastFlexChild = _null, totalFlex = 0, totalChildren = 0, crossSize = 0, allocatedSize = 0; lastFlexChild0 != null; lastFlexChild0 = child) {
        childParentData = H.interceptedTypeCheck(lastFlexChild0.parentData, "$isFlexParentData");
        ++totalChildren;
        flex = childParentData.flex;
        if ((flex == null ? 0 : flex) > 0) {
          if (typeof flex !== "number")
            return H.iae(flex);
          totalFlex += flex;
          lastFlexChild = lastFlexChild0;
        } else {
          if (_this._crossAxisAlignment === C.CrossAxisAlignment_3)
            switch (_this._flex$_direction) {
              case C.Axis_0:
                innerConstraints = new S.BoxConstraints(0, 1 / 0, H.interceptedTypeCheck(K.RenderObject.prototype.get$constraints.call(_this), "$isBoxConstraints").maxHeight, H.interceptedTypeCheck(K.RenderObject.prototype.get$constraints.call(_this), "$isBoxConstraints").maxHeight);
                break;
              case C.Axis_1:
                innerConstraints = new S.BoxConstraints(H.interceptedTypeCheck(K.RenderObject.prototype.get$constraints.call(_this), "$isBoxConstraints").maxWidth, H.interceptedTypeCheck(K.RenderObject.prototype.get$constraints.call(_this), "$isBoxConstraints").maxWidth, 0, 1 / 0);
                break;
              default:
                innerConstraints = _null;
            }
          else
            switch (_this._flex$_direction) {
              case C.Axis_0:
                innerConstraints = new S.BoxConstraints(0, 1 / 0, 0, H.interceptedTypeCheck(K.RenderObject.prototype.get$constraints.call(_this), "$isBoxConstraints").maxHeight);
                break;
              case C.Axis_1:
                innerConstraints = new S.BoxConstraints(0, H.interceptedTypeCheck(K.RenderObject.prototype.get$constraints.call(_this), "$isBoxConstraints").maxWidth, 0, 1 / 0);
                break;
              default:
                innerConstraints = _null;
            }
          lastFlexChild0.layout$2$parentUsesSize(innerConstraints, true);
          t1 = _this._getMainSize$1(lastFlexChild0);
          if (typeof t1 !== "number")
            return H.iae(t1);
          allocatedSize += t1;
          crossSize = Math.max(crossSize, H.checkNum(_this._getCrossSize$1(lastFlexChild0)));
        }
        child = childParentData.ContainerParentDataMixin_nextSibling;
      }
      if (canFlex)
        t1 = maxMainSize;
      else
        t1 = 0;
      freeSpace = Math.max(0, t1 - allocatedSize);
      t1 = totalFlex > 0;
      if (t1 || _this._crossAxisAlignment === C.CrossAxisAlignment_4) {
        spacePerFlex = canFlex && t1 ? freeSpace / totalFlex : 0 / 0;
        child = _this.ContainerRenderObjectMixin__firstChild;
        for (t1 = child, allocatedFlexSpace = 0, maxBaselineDistance = 0; t1 != null; t1 = child) {
          childParentData = H.interceptedTypeCheck(t1.parentData, "$isFlexParentData");
          flex = childParentData.flex;
          if (flex == null)
            flex = 0;
          if (flex > 0) {
            if (canFlex)
              maxChildExtent = t1 === lastFlexChild ? freeSpace - allocatedFlexSpace : spacePerFlex * flex;
            else
              maxChildExtent = 1 / 0;
            t2 = childParentData.fit;
            switch (t2 == null ? C.FlexFit_0 : t2) {
              case C.FlexFit_0:
                minChildExtent = maxChildExtent;
                break;
              case C.FlexFit_1:
                minChildExtent = 0;
                break;
              default:
                minChildExtent = _null;
            }
            if (_this._crossAxisAlignment === C.CrossAxisAlignment_3)
              switch (_this._flex$_direction) {
                case C.Axis_0:
                  innerConstraints = new S.BoxConstraints(minChildExtent, maxChildExtent, H.interceptedTypeCheck(K.RenderObject.prototype.get$constraints.call(_this), "$isBoxConstraints").maxHeight, H.interceptedTypeCheck(K.RenderObject.prototype.get$constraints.call(_this), "$isBoxConstraints").maxHeight);
                  break;
                case C.Axis_1:
                  innerConstraints = new S.BoxConstraints(H.interceptedTypeCheck(K.RenderObject.prototype.get$constraints.call(_this), "$isBoxConstraints").maxWidth, H.interceptedTypeCheck(K.RenderObject.prototype.get$constraints.call(_this), "$isBoxConstraints").maxWidth, minChildExtent, maxChildExtent);
                  break;
                default:
                  innerConstraints = _null;
              }
            else
              switch (_this._flex$_direction) {
                case C.Axis_0:
                  innerConstraints = new S.BoxConstraints(minChildExtent, maxChildExtent, 0, H.interceptedTypeCheck(K.RenderObject.prototype.get$constraints.call(_this), "$isBoxConstraints").maxHeight);
                  break;
                case C.Axis_1:
                  innerConstraints = new S.BoxConstraints(0, H.interceptedTypeCheck(K.RenderObject.prototype.get$constraints.call(_this), "$isBoxConstraints").maxWidth, minChildExtent, maxChildExtent);
                  break;
                default:
                  innerConstraints = _null;
              }
            t1.layout$2$parentUsesSize(innerConstraints, true);
            childSize = _this._getMainSize$1(t1);
            if (typeof childSize !== "number")
              return H.iae(childSize);
            allocatedSize += childSize;
            allocatedFlexSpace += maxChildExtent;
            crossSize = Math.max(crossSize, H.checkNum(_this._getCrossSize$1(t1)));
          }
          if (_this._crossAxisAlignment === C.CrossAxisAlignment_4) {
            distance = t1.getDistanceToBaseline$2$onlyReal(_this._flex$_textBaseline, true);
            if (distance != null)
              maxBaselineDistance = Math.max(maxBaselineDistance, distance);
          }
          child = H.interceptedTypeCheck(t1.parentData, "$isFlexParentData").ContainerParentDataMixin_nextSibling;
        }
      } else
        maxBaselineDistance = 0;
      if (canFlex && _this._mainAxisSize === C.MainAxisSize_1)
        idealSize = maxMainSize;
      else
        idealSize = allocatedSize;
      switch (_this._flex$_direction) {
        case C.Axis_0:
          t1 = _this._size = H.interceptedTypeCheck(K.RenderObject.prototype.get$constraints.call(_this), "$isBoxConstraints").constrain$1(new Q.Size(idealSize, crossSize));
          actualSize = t1._dx;
          crossSize = t1._dy;
          break;
        case C.Axis_1:
          t1 = _this._size = H.interceptedTypeCheck(K.RenderObject.prototype.get$constraints.call(_this), "$isBoxConstraints").constrain$1(new Q.Size(crossSize, idealSize));
          actualSize = t1._dy;
          crossSize = t1._dx;
          break;
        default:
          actualSize = _null;
      }
      if (typeof actualSize !== "number")
        return actualSize.$sub();
      actualSizeDelta = actualSize - allocatedSize;
      _this._flex$_overflow = Math.max(0, -actualSizeDelta);
      remainingSpace = Math.max(0, actualSizeDelta);
      t1 = F._startIsTopLeft(_this._flex$_direction, _this._flex$_textDirection, _this._verticalDirection);
      flipMainAxis = t1 === false;
      switch (_this._mainAxisAlignment) {
        case C.MainAxisAlignment_0:
          leadingSpace = 0;
          betweenSpace = 0;
          break;
        case C.MainAxisAlignment_1:
          leadingSpace = remainingSpace;
          betweenSpace = 0;
          break;
        case C.MainAxisAlignment_2:
          leadingSpace = remainingSpace / 2;
          betweenSpace = 0;
          break;
        case C.MainAxisAlignment_3:
          betweenSpace = totalChildren > 1 ? remainingSpace / (totalChildren - 1) : 0;
          leadingSpace = 0;
          break;
        case C.MainAxisAlignment_4:
          betweenSpace = totalChildren > 0 ? remainingSpace / totalChildren : 0;
          leadingSpace = betweenSpace / 2;
          break;
        case C.MainAxisAlignment_5:
          betweenSpace = totalChildren > 0 ? remainingSpace / (totalChildren + 1) : 0;
          leadingSpace = betweenSpace;
          break;
        default:
          betweenSpace = _null;
          leadingSpace = betweenSpace;
      }
      if (flipMainAxis) {
        if (typeof leadingSpace !== "number")
          return H.iae(leadingSpace);
        childMainPosition = actualSize - leadingSpace;
      } else
        childMainPosition = leadingSpace;
      child = _this.ContainerRenderObjectMixin__firstChild;
      for (t1 = child; t1 != null; t1 = child) {
        childParentData = H.interceptedTypeCheck(t1.parentData, "$isFlexParentData");
        t2 = _this._crossAxisAlignment;
        switch (t2) {
          case C.CrossAxisAlignment_0:
          case C.CrossAxisAlignment_1:
            if (F._startIsTopLeft(G.flipAxis(_this._flex$_direction), _this._flex$_textDirection, _this._verticalDirection) === (t2 === C.CrossAxisAlignment_0))
              childCrossPosition = 0;
            else {
              t2 = _this._getCrossSize$1(t1);
              if (typeof crossSize !== "number")
                return crossSize.$sub();
              if (typeof t2 !== "number")
                return H.iae(t2);
              childCrossPosition = crossSize - t2;
            }
            break;
          case C.CrossAxisAlignment_2:
            if (typeof crossSize !== "number")
              return crossSize.$div();
            t2 = _this._getCrossSize$1(t1);
            if (typeof t2 !== "number")
              return t2.$div();
            childCrossPosition = crossSize / 2 - t2 / 2;
            break;
          case C.CrossAxisAlignment_3:
            childCrossPosition = 0;
            break;
          case C.CrossAxisAlignment_4:
            if (_this._flex$_direction === C.Axis_0) {
              distance = t1.getDistanceToBaseline$2$onlyReal(_this._flex$_textBaseline, true);
              childCrossPosition = distance != null ? maxBaselineDistance - distance : 0;
            } else
              childCrossPosition = 0;
            break;
          default:
            childCrossPosition = _null;
        }
        if (flipMainAxis) {
          t2 = _this._getMainSize$1(t1);
          if (typeof childMainPosition !== "number")
            return childMainPosition.$sub();
          if (typeof t2 !== "number")
            return H.iae(t2);
          childMainPosition -= t2;
        }
        switch (_this._flex$_direction) {
          case C.Axis_0:
            childParentData.offset = new Q.Offset(childMainPosition, childCrossPosition);
            break;
          case C.Axis_1:
            childParentData.offset = new Q.Offset(childCrossPosition, childMainPosition);
            break;
        }
        if (flipMainAxis) {
          if (typeof childMainPosition !== "number")
            return childMainPosition.$sub();
          if (typeof betweenSpace !== "number")
            return H.iae(betweenSpace);
          childMainPosition -= betweenSpace;
        } else {
          t1 = _this._getMainSize$1(t1);
          if (typeof t1 !== "number")
            return t1.$add();
          if (typeof betweenSpace !== "number")
            return H.iae(betweenSpace);
          if (typeof childMainPosition !== "number")
            return childMainPosition.$add();
          childMainPosition += t1 + betweenSpace;
        }
        child = childParentData.ContainerParentDataMixin_nextSibling;
      }
    },
    hitTestChildren$2$position: function(result, position) {
      return this.defaultHitTestChildren$2$position(result, position);
    },
    paint$2: function(context, offset) {
      var t2, t3, _this = this,
        t1 = _this._flex$_overflow;
      if (typeof t1 !== "number")
        return t1.$le();
      if (t1 <= 0) {
        _this.defaultPaint$2(context, offset);
        return;
      }
      t1 = _this._size;
      t2 = t1._dx;
      if (typeof t2 !== "number")
        return t2.$le();
      if (!(t2 <= 0)) {
        t3 = t1._dy;
        if (typeof t3 !== "number")
          return t3.$le();
        t3 = t3 <= 0;
      } else
        t3 = true;
      if (t3)
        return;
      t3 = _this._needsCompositing;
      t1 = t1._dy;
      if (typeof t1 !== "number")
        return H.iae(t1);
      context.pushClipRect$4(t3, offset, new Q.Rect(0, 0, 0 + t2, 0 + t1), _this.get$defaultPaint());
    },
    describeApproximatePaintClip$1: function(child) {
      var t2,
        t1 = this._flex$_overflow;
      if (typeof t1 !== "number")
        return t1.$gt();
      if (t1 > 0) {
        t1 = this._size;
        t2 = t1._dx;
        t1 = t1._dy;
        if (typeof t2 !== "number")
          return H.iae(t2);
        if (typeof t1 !== "number")
          return H.iae(t1);
        t1 = new Q.Rect(0, 0, 0 + t2, 0 + t1);
      } else
        t1 = null;
      return t1;
    },
    toStringShort$0: function() {
      var header = this.super$RenderObject$toStringShort(),
        t1 = this._flex$_overflow;
      return typeof t1 === "number" && t1 > 0 ? header + " OVERFLOWING" : header;
    },
    $asRenderBoxContainerDefaultsMixin: function() {
      return [S.RenderBox, F.FlexParentData];
    },
    $asContainerRenderObjectMixin: function() {
      return [S.RenderBox, F.FlexParentData];
    }
  };
  F._RenderFlex_RenderBox_ContainerRenderObjectMixin.prototype = {
    attach$1: function(owner) {
      var child;
      H.interceptedTypeCheck(owner, "$isPipelineOwner");
      this.super$RenderObject$attach(owner);
      child = this.ContainerRenderObjectMixin__firstChild;
      for (; child != null;) {
        child.attach$1(owner);
        child = H.interceptedTypeCheck(child.parentData, "$isFlexParentData").ContainerParentDataMixin_nextSibling;
      }
    },
    detach$0: function(_) {
      var child;
      this.super$AbstractNode$detach(0);
      child = this.ContainerRenderObjectMixin__firstChild;
      for (; child != null;) {
        child.detach$0(0);
        child = H.interceptedTypeCheck(child.parentData, "$isFlexParentData").ContainerParentDataMixin_nextSibling;
      }
    },
    set$_object$_firstChild: function(_firstChild) {
      this.ContainerRenderObjectMixin__firstChild = H.assertSubtypeOfRuntimeType(_firstChild, H.getRuntimeTypeArgument(this, "ContainerRenderObjectMixin", 0));
    },
    set$_object$_lastChild: function(_lastChild) {
      this.ContainerRenderObjectMixin__lastChild = H.assertSubtypeOfRuntimeType(_lastChild, H.getRuntimeTypeArgument(this, "ContainerRenderObjectMixin", 0));
    }
  };
  F._RenderFlex_RenderBox_ContainerRenderObjectMixin_RenderBoxContainerDefaultsMixin.prototype = {};
  F._RenderFlex_RenderBox_ContainerRenderObjectMixin_RenderBoxContainerDefaultsMixin_DebugOverflowIndicatorMixin.prototype = {};
  T.Layer.prototype = {
    updateSubtreeNeedsAddToScene$0: function() {
      this._subtreeNeedsAddToScene = this._needsAddToScene || false;
    },
    get$nextSibling: function(_) {
      return this._layer$_nextSibling;
    },
    remove$0: function(_) {
      var t2, _this = this,
        t1 = H.interceptedTypeCheck(B.AbstractNode.prototype.get$parent.call(_this, _this), "$isContainerLayer");
      if (t1 != null) {
        t2 = _this._layer$_previousSibling;
        if (t2 == null)
          t1._layer$_firstChild = _this._layer$_nextSibling;
        else
          t2._layer$_nextSibling = _this.get$nextSibling(_this);
        if (_this._layer$_nextSibling == null)
          t1._layer$_lastChild = _this._layer$_previousSibling;
        else
          _this.get$nextSibling(_this)._layer$_previousSibling = _this._layer$_previousSibling;
        _this._layer$_nextSibling = _this._layer$_previousSibling = null;
        t1._needsAddToScene = true;
        t1.super$AbstractNode$dropChild(_this);
      }
    },
    _addToSceneWithRetainedRendering$1: function(builder) {
      var _this = this;
      if (!H.boolConversionCheck(_this._subtreeNeedsAddToScene) && _this._engineLayer != null) {
        builder.addRetained$1(_this._engineLayer);
        return;
      }
      _this._engineLayer = _this.addToScene$1(builder);
      _this._needsAddToScene = false;
    },
    toStringShort$0: function() {
      var t1 = this.super$DiagnosticableTreeMixin$toStringShort();
      return t1 + (this._node$_owner == null ? " DETACHED" : "");
    },
    $isDiagnosticable: 1,
    $isDiagnosticableTree: 1
  };
  T.PictureLayer.prototype = {
    addToScene$2: function(builder, layerOffset) {
      var _this = this,
        t1 = _this._picture,
        t2 = _this._isComplexHint,
        t3 = _this._willChangeHint;
      builder.addPicture$5$isComplexHint$webOnlyPaintedBy$willChangeHint(layerOffset, t1, t2, _this._layer$_webOnlyPaintedBy, t3);
      return;
    },
    addToScene$1: function(builder) {
      return this.addToScene$2(builder, C.Offset_0_0);
    },
    find$1$1: function(_, regionOffset) {
      return;
    }
  };
  T.PerformanceOverlayLayer.prototype = {
    addToScene$2: function(builder, layerOffset) {
      var _this = this;
      builder.addPerformanceOverlay$3$webOnlyPaintedBy(_this.optionsMask, _this._overlayRect.shift$1(layerOffset), _this._layer$_webOnlyPaintedBy);
      builder.setRasterizerTracingThreshold$1(_this.rasterizerThreshold);
      builder.setCheckerboardRasterCacheImages$1(false);
      builder.setCheckerboardOffscreenLayers$1(false);
      return;
    },
    addToScene$1: function(builder) {
      return this.addToScene$2(builder, C.Offset_0_0);
    },
    find$1$1: function(_, regionOffset) {
      return;
    }
  };
  T.ContainerLayer.prototype = {
    updateSubtreeNeedsAddToScene$0: function() {
      var child, _this = this;
      _this.super$Layer$updateSubtreeNeedsAddToScene();
      child = _this._layer$_firstChild;
      for (; child != null;) {
        child.updateSubtreeNeedsAddToScene$0();
        _this._subtreeNeedsAddToScene = H.boolConversionCheck(_this._subtreeNeedsAddToScene) || H.boolConversionCheck(child._subtreeNeedsAddToScene);
        child = child._layer$_nextSibling;
      }
    },
    find$1$1: function(_, regionOffset, $S) {
      var value,
        current = this._layer$_lastChild;
      for (; current != null;) {
        value = current.find$1$1(0, regionOffset, $S);
        if (value != null)
          return H.assertSubtypeOfRuntimeType(value, $S);
        current = current._layer$_previousSibling;
      }
      return;
    },
    attach$1: function(owner) {
      var child;
      this.super$AbstractNode$attach(owner);
      child = this._layer$_firstChild;
      for (; child != null;) {
        child.attach$1(owner);
        child = child._layer$_nextSibling;
      }
    },
    detach$0: function(_) {
      var child;
      this.super$AbstractNode$detach(0);
      child = this._layer$_firstChild;
      for (; child != null;) {
        child.detach$0(0);
        child = child._layer$_nextSibling;
      }
    },
    append$1: function(_, child) {
      var t1, _this = this;
      _this._needsAddToScene = true;
      _this.super$AbstractNode$adoptChild(child);
      t1 = child._layer$_previousSibling = _this._layer$_lastChild;
      if (t1 != null)
        t1._layer$_nextSibling = child;
      _this._layer$_lastChild = child;
      if (_this._layer$_firstChild == null)
        _this._layer$_firstChild = child;
    },
    removeAllChildren$0: function() {
      var next, _this = this,
        child = _this._layer$_firstChild;
      for (; child != null; child = next) {
        next = child._layer$_nextSibling;
        child._layer$_nextSibling = child._layer$_previousSibling = null;
        _this._needsAddToScene = true;
        _this.super$AbstractNode$dropChild(child);
      }
      _this._layer$_lastChild = _this._layer$_firstChild = null;
    },
    addToScene$2: function(builder, layerOffset) {
      this.addChildrenToScene$2(builder, layerOffset);
      return;
    },
    addToScene$1: function(builder) {
      return this.addToScene$2(builder, C.Offset_0_0);
    },
    addChildrenToScene$2: function(builder, childOffset) {
      var child = this._layer$_firstChild;
      for (; child != null;) {
        if (childOffset.$eq(0, C.Offset_0_0))
          child._addToSceneWithRetainedRendering$1(builder);
        else
          child.addToScene$2(builder, childOffset);
        child = child._layer$_nextSibling;
      }
    },
    addChildrenToScene$1: function(builder) {
      return this.addChildrenToScene$2(builder, C.Offset_0_0);
    },
    debugDescribeChildren$0: function() {
      var count, t1,
        children = H.setRuntimeTypeInfo([], [Y.DiagnosticsNode]),
        child = this._layer$_firstChild;
      if (child == null)
        return children;
      for (count = 1; true;) {
        t1 = "child " + count;
        child.toString;
        C.JSArray_methods.add$1(children, new Y._DiagnosticableTreeNode(child, t1, true, true, null));
        if (child == this._layer$_lastChild)
          break;
        ++count;
        child = child._layer$_nextSibling;
      }
      return children;
    }
  };
  T.OffsetLayer.prototype = {
    set$offset: function(_, value) {
      if (!value.$eq(0, this._layer$_offset))
        this._needsAddToScene = true;
      this._layer$_offset = value;
    },
    find$1$1: function(_, regionOffset, $S) {
      return this.super$ContainerLayer$find(0, regionOffset.$sub(0, this._layer$_offset), $S);
    },
    buildScene$1: function(builder) {
      this.updateSubtreeNeedsAddToScene$0();
      this.addToScene$1(builder);
      return builder.build$0();
    },
    addToScene$2: function(builder, layerOffset) {
      var t4, engineLayer,
        t1 = layerOffset._dx,
        t2 = this._layer$_offset,
        t3 = t2._dx;
      if (typeof t1 !== "number")
        return t1.$add();
      if (typeof t3 !== "number")
        return H.iae(t3);
      t4 = layerOffset._dy;
      t2 = t2._dy;
      if (typeof t4 !== "number")
        return t4.$add();
      if (typeof t2 !== "number")
        return H.iae(t2);
      engineLayer = builder.pushOffset$3$webOnlyPaintedBy(t1 + t3, t4 + t2, this._layer$_webOnlyPaintedBy);
      this.addChildrenToScene$1(builder);
      builder.pop$0();
      return engineLayer;
    },
    addToScene$1: function(builder) {
      return this.addToScene$2(builder, C.Offset_0_0);
    }
  };
  T.ClipRectLayer.prototype = {
    find$1$1: function(_, regionOffset, $S) {
      if (!this._clipRect.contains$1(0, regionOffset))
        return;
      return this.super$ContainerLayer$find(0, regionOffset, $S);
    },
    addToScene$2: function(builder, layerOffset) {
      var _this = this;
      builder.pushClipRect$3$clipBehavior$webOnlyPaintedBy(_this._clipRect.shift$1(layerOffset), _this._clipBehavior, _this._layer$_webOnlyPaintedBy);
      _this.addChildrenToScene$2(builder, layerOffset);
      builder.pop$0();
      return;
    },
    addToScene$1: function(builder) {
      return this.addToScene$2(builder, C.Offset_0_0);
    }
  };
  T.ClipPathLayer.prototype = {
    find$1$1: function(_, regionOffset, $S) {
      if (!H.boolConversionCheck(this._clipPath.contains$1(0, regionOffset)))
        return;
      return this.super$ContainerLayer$find(0, regionOffset, $S);
    },
    addToScene$2: function(builder, layerOffset) {
      var _this = this,
        t1 = _this._clipPath;
      t1 = layerOffset.$eq(0, C.Offset_0_0) ? t1 : t1.shift$1(layerOffset);
      builder.pushClipPath$3$clipBehavior$webOnlyPaintedBy(t1, _this._clipBehavior, _this._layer$_webOnlyPaintedBy);
      _this.addChildrenToScene$2(builder, layerOffset);
      builder.pop$0();
      return;
    },
    addToScene$1: function(builder) {
      return this.addToScene$2(builder, C.Offset_0_0);
    }
  };
  T.TransformLayer.prototype = {
    addToScene$2: function(builder, layerOffset) {
      var totalOffset, t1, _this = this;
      _this._lastEffectiveTransform = _this._layer$_transform;
      totalOffset = _this._layer$_offset.$add(0, layerOffset);
      if (!totalOffset.$eq(0, C.Offset_0_0)) {
        t1 = E.Matrix4_Matrix4$translationValues0(totalOffset._dx, totalOffset._dy, 0);
        t1.multiply$1(0, _this._lastEffectiveTransform);
        _this._lastEffectiveTransform = t1;
      }
      builder.pushTransform$2$webOnlyPaintedBy(_this._lastEffectiveTransform._m4storage, _this._layer$_webOnlyPaintedBy);
      _this.addChildrenToScene$1(builder);
      builder.pop$0();
      return;
    },
    addToScene$1: function(builder) {
      return this.addToScene$2(builder, C.Offset_0_0);
    },
    find$1$1: function(_, regionOffset, $S) {
      var t1, _this = this;
      if (_this._inverseDirty) {
        _this._invertedTransform = E.Matrix4_tryInvert(_this._layer$_transform);
        _this._inverseDirty = false;
      }
      if (_this._invertedTransform == null)
        return;
      t1 = new Float64Array(4);
      t1[3] = 1;
      t1[2] = 0;
      C.NativeFloat64List_methods.$indexSet(t1, 1, regionOffset._dy);
      C.NativeFloat64List_methods.$indexSet(t1, 0, regionOffset._dx);
      t1 = _this._invertedTransform.transform$1(0, new E.Vector4(t1))._v4storage;
      return _this.super$OffsetLayer$find(0, new Q.Offset(t1[0], t1[1]), $S);
    }
  };
  T.OpacityLayer.prototype = {
    addToScene$2: function(builder, layerOffset) {
      var _this = this;
      builder.pushOpacity$3$offset$webOnlyPaintedBy(_this._layer$_alpha, _this._layer$_offset.$add(0, layerOffset), _this._layer$_webOnlyPaintedBy);
      _this.addChildrenToScene$1(builder);
      builder.pop$0();
      return;
    },
    addToScene$1: function(builder) {
      return this.addToScene$2(builder, C.Offset_0_0);
    }
  };
  T.PhysicalModelLayer.prototype = {
    find$1$1: function(_, regionOffset, $S) {
      if (!H.boolConversionCheck(this._clipPath.contains$1(0, regionOffset)))
        return;
      return this.super$ContainerLayer$find(0, regionOffset, $S);
    },
    addToScene$2: function(builder, layerOffset) {
      var engineLayer, _this = this,
        t1 = _this._clipPath;
      t1 = layerOffset.$eq(0, C.Offset_0_0) ? t1 : t1.shift$1(layerOffset);
      engineLayer = builder.pushPhysicalShape$6$clipBehavior$color$elevation$path$shadowColor$webOnlyPaintedBy(_this._clipBehavior, _this._layer$_color, _this._layer$_elevation, t1, _this._layer$_shadowColor, _this._layer$_webOnlyPaintedBy);
      _this.addChildrenToScene$2(builder, layerOffset);
      builder.pop$0();
      return engineLayer;
    },
    addToScene$1: function(builder) {
      return this.addToScene$2(builder, C.Offset_0_0);
    }
  };
  T.AnnotatedRegionLayer.prototype = {
    find$1$1: function(_, regionOffset, $S) {
      var t1, t2, t3, t4, _this = this,
        result = _this.super$ContainerLayer$find(0, regionOffset, $S);
      if (result != null)
        return result;
      t1 = _this.size;
      if (t1 != null) {
        t2 = _this.offset;
        t3 = t2._dx;
        t2 = t2._dy;
        t4 = t1._dx;
        t1 = t1._dy;
        if (typeof t3 !== "number")
          return t3.$add();
        if (typeof t4 !== "number")
          return H.iae(t4);
        if (typeof t2 !== "number")
          return t2.$add();
        if (typeof t1 !== "number")
          return H.iae(t1);
        t1 = !new Q.Rect(t3, t2, t3 + t4, t2 + t1).contains$1(0, regionOffset);
      } else
        t1 = false;
      if (t1)
        return;
      if (new H.TypeImpl(H.getTypeArgumentByIndex(_this, 0)).$eq(0, new H.TypeImpl($S)))
        return H.assertSubtypeOfRuntimeType(_this.value, $S);
      return _this.super$ContainerLayer$find(0, regionOffset, $S);
    }
  };
  T._Layer_AbstractNode_DiagnosticableTreeMixin.prototype = {};
  K.ParentData.prototype = {
    detach$0: function(_) {
    },
    toString$0: function(_) {
      return "<none>";
    }
  };
  K.PaintingContext.prototype = {
    paintChild$2: function(child, offset) {
      var _this = this,
        previousRenderObject = _this._webOnlyPaintedBy;
      _this._webOnlyPaintedBy = child;
      if (child.get$isRepaintBoundary()) {
        _this.stopRecordingIfNeeded$0();
        if (child._needsPaint)
          K.PaintingContext__repaintCompositedChild(child, null, true);
        child._layer.set$offset(0, offset);
        _this.appendLayer$1(child._layer);
      } else
        child._paintWithContext$2(_this, offset);
      _this._webOnlyPaintedBy = previousRenderObject;
    },
    appendLayer$1: function(layer) {
      layer.remove$0(0);
      layer._layer$_webOnlyPaintedBy = this._webOnlyPaintedBy;
      this._containerLayer.append$1(0, layer);
    },
    get$canvas: function(_) {
      var t1, _this = this;
      if (_this._object$_canvas == null) {
        t1 = new T.PictureLayer(_this.estimatedBounds);
        _this._currentLayer = t1;
        t1._layer$_webOnlyPaintedBy = _this._webOnlyPaintedBy;
        t1 = new Q.PictureRecorder();
        _this._recorder = t1;
        _this._object$_canvas = Q.Canvas$(t1, null);
        _this._containerLayer.append$1(0, _this._currentLayer);
      }
      return _this._object$_canvas;
    },
    stopRecordingIfNeeded$0: function() {
      var t1, t2, _this = this;
      if (_this._object$_canvas == null)
        return;
      t1 = _this._currentLayer;
      t2 = _this._recorder.endRecording$0();
      t1._needsAddToScene = true;
      t1._picture = t2;
      _this._object$_canvas = _this._recorder = _this._currentLayer = null;
    },
    setIsComplexHint$0: function() {
      var t1 = this._currentLayer;
      if (t1 != null)
        if (!t1._isComplexHint)
          t1._needsAddToScene = t1._isComplexHint = true;
    },
    pushLayer$4$childPaintBounds: function(childLayer, painter, offset, childPaintBounds) {
      var childContext, _this = this;
      H.functionTypeCheck(painter, {func: 1, ret: -1, args: [K.PaintingContext, Q.Offset]});
      _this.stopRecordingIfNeeded$0();
      _this.appendLayer$1(childLayer);
      childContext = _this.createChildContext$2(childLayer, childPaintBounds == null ? _this.estimatedBounds : childPaintBounds);
      painter.call$2(childContext, offset);
      childContext.stopRecordingIfNeeded$0();
    },
    pushLayer$3: function(childLayer, painter, offset) {
      return this.pushLayer$4$childPaintBounds(childLayer, painter, offset, null);
    },
    createChildContext$2: function(childLayer, bounds) {
      return new K.PaintingContext(this._webOnlyPaintedBy, childLayer, bounds);
    },
    pushClipRect$4: function(needsCompositing, offset, clipRect, painter) {
      var offsetClipRect;
      H.functionTypeCheck(painter, {func: 1, ret: -1, args: [K.PaintingContext, Q.Offset]});
      offsetClipRect = clipRect.shift$1(offset);
      if (H.boolConversionCheck(needsCompositing))
        this.pushLayer$4$childPaintBounds(new T.ClipRectLayer(offsetClipRect, C.Clip_1), painter, offset, offsetClipRect);
      else
        this.clipRectAndPaint$4(offsetClipRect, C.Clip_1, offsetClipRect, new K.PaintingContext_pushClipRect_closure(this, painter, offset));
    },
    pushClipPath$6$clipBehavior: function(needsCompositing, offset, bounds, clipPath, painter, clipBehavior) {
      var offsetBounds, offsetClipPath;
      H.functionTypeCheck(painter, {func: 1, ret: -1, args: [K.PaintingContext, Q.Offset]});
      offsetBounds = bounds.shift$1(offset);
      offsetClipPath = clipPath.shift$1(offset);
      if (H.boolConversionCheck(needsCompositing))
        this.pushLayer$4$childPaintBounds(new T.ClipPathLayer(offsetClipPath, clipBehavior), painter, offset, offsetBounds);
      else
        this.clipPathAndPaint$4(offsetClipPath, clipBehavior, offsetBounds, new K.PaintingContext_pushClipPath_closure(this, painter, offset));
    },
    toString$0: function(_) {
      var _this = this;
      return new H.TypeImpl(H.getRti(_this)).toString$0(0) + "#" + H.Primitives_objectHashCode(_this) + "(layer: " + H.S(_this._containerLayer) + ", canvas bounds: " + H.S(_this.estimatedBounds) + ")";
    }
  };
  K.PaintingContext_pushClipRect_closure.prototype = {
    call$0: function() {
      return this.painter.call$2(this.$this, this.offset);
    },
    $signature: 1
  };
  K.PaintingContext_pushClipPath_closure.prototype = {
    call$0: function() {
      return this.painter.call$2(this.$this, this.offset);
    },
    $signature: 1
  };
  K.Constraints.prototype = {};
  K.SemanticsHandle.prototype = {
    dispose$0: function() {
      var t2, _this = this,
        t1 = _this._object$_owner;
      if (t1 != null) {
        t2 = _this.listener;
        if (t2 != null) {
          t1 = t1._semanticsOwner;
          t1.toString;
          H.functionTypeCheck(t2, {func: 1, ret: -1});
          t1 = t1._listeners;
          t1.toString;
          H.assertSubtypeOfRuntimeType(t2, H.getTypeArgumentByIndex(t1, 0));
          t1._isDirty = true;
          C.JSArray_methods.remove$1(t1._list, t2);
        }
        t1 = _this._object$_owner;
        if (--t1._outstandingSemanticsHandles === 0) {
          t2 = t1._semanticsOwner;
          t2._dirtyNodes.clear$0(0);
          t2._nodes.clear$0(0);
          t2._detachedNodes.clear$0(0);
          t2.super$ChangeNotifier$dispose();
          t1._semanticsOwner = null;
          t1.onSemanticsOwnerDisposed.call$0();
        }
        _this._object$_owner = null;
      }
    }
  };
  K.PipelineOwner.prototype = {
    set$rootNode: function(value) {
      var t1 = this._rootNode;
      if (t1 === value)
        return;
      if (t1 != null)
        t1.detach$0(0);
      this._rootNode = value;
      value.attach$1(this);
    },
    flushLayout$0: function() {
      var dirtyNodes, node, t1, t2, t3, t4, t5, _i;
      U.profile(new K.PipelineOwner_flushLayout_closure());
      try {
        for (t1 = [K.RenderObject]; t2 = this._nodesNeedingLayout, t2.length !== 0;) {
          dirtyNodes = t2;
          this.set$_nodesNeedingLayout(H.setRuntimeTypeInfo([], t1));
          t2 = dirtyNodes;
          t3 = H.getTypeArgumentByIndex(t2, 0);
          t4 = H.functionTypeCheck(new K.PipelineOwner_flushLayout_closure0(), {func: 1, ret: P.int, args: [t3, t3]});
          if (typeof t2 !== "object" || t2 === null || !!t2.immutable$list)
            H.throwExpression(P.UnsupportedError$("sort"));
          t5 = J.get$length$asx(t2);
          if (typeof t5 !== "number")
            return t5.$sub();
          --t5;
          if (t5 - 0 <= 32)
            H.Sort__insertionSort(t2, 0, t5, t4, t3);
          else
            H.Sort__dualPivotQuicksort(t2, 0, t5, t4, t3);
          t3 = t2.length;
          _i = 0;
          for (; _i < t2.length; t2.length === t3 || (0, H.throwConcurrentModificationError)(t2), ++_i) {
            node = t2[_i];
            if (node._needsLayout) {
              t4 = node;
              t4 = H.interceptedTypeCheck(B.AbstractNode.prototype.get$owner.call(t4), "$isPipelineOwner") === this;
            } else
              t4 = false;
            if (t4)
              node._layoutWithoutResize$0();
          }
        }
      } finally {
        U.profile(new K.PipelineOwner_flushLayout_closure1());
      }
    },
    _enableMutationsToDirtySubtrees$1: function(callback) {
      H.functionTypeCheck(callback, {func: 1, ret: -1});
      try {
        callback.call$0();
      } finally {
      }
    },
    flushCompositingBits$0: function() {
      var t1, t2, _i, node;
      U.profile(new K.PipelineOwner_flushCompositingBits_closure());
      t1 = this._nodesNeedingCompositingBitsUpdate;
      C.JSArray_methods.sort$1(t1, new K.PipelineOwner_flushCompositingBits_closure0());
      for (t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
        node = t1[_i];
        if (node._needsCompositingBitsUpdate && H.interceptedTypeCheck(B.AbstractNode.prototype.get$owner.call(node), "$isPipelineOwner") === this)
          node._updateCompositingBits$0();
      }
      C.JSArray_methods.set$length(t1, 0);
      U.profile(new K.PipelineOwner_flushCompositingBits_closure1());
    },
    flushPaint$0: function() {
      var dirtyNodes, node, t1, t2, _i, t3;
      U.profile(new K.PipelineOwner_flushPaint_closure());
      try {
        dirtyNodes = this._nodesNeedingPaint;
        this.set$_nodesNeedingPaint(H.setRuntimeTypeInfo([], [K.RenderObject]));
        for (t1 = dirtyNodes, J.sort$1$ax(t1, new K.PipelineOwner_flushPaint_closure0()), t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
          node = t1[_i];
          if (node._needsPaint) {
            t3 = node;
            t3 = H.interceptedTypeCheck(B.AbstractNode.prototype.get$owner.call(t3), "$isPipelineOwner") === this;
          } else
            t3 = false;
          if (t3)
            if (node._layer._node$_owner != null)
              K.PaintingContext__repaintCompositedChild(node, null, false);
            else
              node._skippedPaintingOnLayer$0();
        }
      } finally {
        U.profile(new K.PipelineOwner_flushPaint_closure1());
      }
    },
    ensureSemantics$1$listener: function(listener) {
      var t2, t3, _this = this,
        t1 = {func: 1, ret: -1};
      H.functionTypeCheck(listener, t1);
      if (++_this._outstandingSemanticsHandles === 1) {
        t2 = A.SemanticsNode;
        t3 = P.int;
        _this._semanticsOwner = new A.SemanticsOwner(P.LinkedHashSet_LinkedHashSet(t2), P.LinkedHashMap_LinkedHashMap$_empty(t3, t2), P.LinkedHashSet_LinkedHashSet(t2), P.LinkedHashMap_LinkedHashMap$_empty(t3, A.CustomSemanticsAction), new R.ObserverList(H.setRuntimeTypeInfo([], [t1]), [t1]));
        _this.onSemanticsOwnerCreated.call$0();
      }
      if (listener != null) {
        t1 = _this._semanticsOwner._listeners;
        t1.toString;
        H.assertSubtypeOfRuntimeType(listener, H.getTypeArgumentByIndex(t1, 0));
        t1._isDirty = true;
        C.JSArray_methods.add$1(t1._list, listener);
      }
      return new K.SemanticsHandle(_this, listener);
    },
    ensureSemantics$0: function() {
      return this.ensureSemantics$1$listener(null);
    },
    flushSemantics$0: function() {
      var nodesToProcess, node, t1, nodesToProcess0, t2, _i, t3, _this = this;
      if (_this._semanticsOwner == null)
        return;
      U.profile(new K.PipelineOwner_flushSemantics_closure());
      try {
        t1 = _this._nodesNeedingSemantics;
        nodesToProcess0 = t1.toList$0(0);
        C.JSArray_methods.sort$1(nodesToProcess0, new K.PipelineOwner_flushSemantics_closure0());
        nodesToProcess = nodesToProcess0;
        t1.clear$0(0);
        for (t1 = nodesToProcess, t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
          node = t1[_i];
          if (node._needsSemanticsUpdate) {
            t3 = node;
            t3 = H.interceptedTypeCheck(B.AbstractNode.prototype.get$owner.call(t3), "$isPipelineOwner") === _this;
          } else
            t3 = false;
          if (t3)
            node._updateSemantics$0();
        }
        _this._semanticsOwner.sendSemanticsUpdate$0();
      } finally {
        U.profile(new K.PipelineOwner_flushSemantics_closure1());
      }
    },
    set$_nodesNeedingLayout: function(_nodesNeedingLayout) {
      this._nodesNeedingLayout = H.assertSubtype(_nodesNeedingLayout, "$isList", [K.RenderObject], "$asList");
    },
    set$_nodesNeedingPaint: function(_nodesNeedingPaint) {
      this._nodesNeedingPaint = H.assertSubtype(_nodesNeedingPaint, "$isList", [K.RenderObject], "$asList");
    }
  };
  K.PipelineOwner_flushLayout_closure.prototype = {
    call$0: function() {
      P.Timeline_startSync("Layout", C.Map_9aZ6I, null);
    },
    $signature: 0
  };
  K.PipelineOwner_flushLayout_closure0.prototype = {
    call$2: function(a, b) {
      H.interceptedTypeCheck(a, "$isRenderObject");
      H.interceptedTypeCheck(b, "$isRenderObject");
      return a._node$_depth - b._node$_depth;
    },
    $signature: 22
  };
  K.PipelineOwner_flushLayout_closure1.prototype = {
    call$0: function() {
      P.Timeline_finishSync();
    },
    $signature: 0
  };
  K.PipelineOwner_flushCompositingBits_closure.prototype = {
    call$0: function() {
      P.Timeline_startSync("Compositing bits", null, null);
    },
    $signature: 0
  };
  K.PipelineOwner_flushCompositingBits_closure0.prototype = {
    call$2: function(a, b) {
      H.interceptedTypeCheck(a, "$isRenderObject");
      H.interceptedTypeCheck(b, "$isRenderObject");
      return a._node$_depth - b._node$_depth;
    },
    $signature: 22
  };
  K.PipelineOwner_flushCompositingBits_closure1.prototype = {
    call$0: function() {
      P.Timeline_finishSync();
    },
    $signature: 0
  };
  K.PipelineOwner_flushPaint_closure.prototype = {
    call$0: function() {
      P.Timeline_startSync("Paint", C.Map_9aZ6I, null);
    },
    $signature: 0
  };
  K.PipelineOwner_flushPaint_closure0.prototype = {
    call$2: function(a, b) {
      H.interceptedTypeCheck(a, "$isRenderObject");
      H.interceptedTypeCheck(b, "$isRenderObject");
      return b._node$_depth - a._node$_depth;
    },
    $signature: 22
  };
  K.PipelineOwner_flushPaint_closure1.prototype = {
    call$0: function() {
      P.Timeline_finishSync();
    },
    $signature: 0
  };
  K.PipelineOwner_flushSemantics_closure.prototype = {
    call$0: function() {
      P.Timeline_startSync("Semantics", null, null);
    },
    $signature: 0
  };
  K.PipelineOwner_flushSemantics_closure0.prototype = {
    call$2: function(a, b) {
      H.interceptedTypeCheck(a, "$isRenderObject");
      H.interceptedTypeCheck(b, "$isRenderObject");
      return a._node$_depth - b._node$_depth;
    },
    $signature: 22
  };
  K.PipelineOwner_flushSemantics_closure1.prototype = {
    call$0: function() {
      P.Timeline_finishSync();
    },
    $signature: 0
  };
  K.RenderObject.prototype = {
    setupParentData$1: function(child) {
      if (!(child.parentData instanceof K.ParentData))
        child.parentData = new K.ParentData();
    },
    adoptChild$1: function(child) {
      var _this = this;
      _this.setupParentData$1(child);
      _this.markNeedsLayout$0();
      _this.markNeedsCompositingBitsUpdate$0();
      _this.markNeedsSemanticsUpdate$0();
      _this.super$AbstractNode$adoptChild(child);
    },
    dropChild$1: function(child) {
      var _this = this;
      child._cleanRelayoutBoundary$0();
      child.parentData.detach$0(0);
      child.parentData = null;
      _this.super$AbstractNode$dropChild(child);
      _this.markNeedsLayout$0();
      _this.markNeedsCompositingBitsUpdate$0();
      _this.markNeedsSemanticsUpdate$0();
    },
    visitChildren$1: function(visitor) {
      H.functionTypeCheck(visitor, {func: 1, ret: -1, args: [K.RenderObject]});
    },
    _debugReportException$3: function(method, exception, stack) {
      H.interceptedTypeCheck(stack, "$isStackTrace");
      U.assertions_FlutterError_dumpErrorToConsole$closure().call$1(K.FlutterErrorDetailsForRendering$("during " + method + "()", exception, new K.RenderObject__debugReportException_closure(this), "rendering library", this, stack));
    },
    attach$1: function(owner) {
      var _this = this;
      _this.super$AbstractNode$attach(H.interceptedTypeCheck(owner, "$isPipelineOwner"));
      if (_this._needsLayout && _this._relayoutBoundary != null) {
        _this._needsLayout = false;
        _this.markNeedsLayout$0();
      }
      if (_this._needsCompositingBitsUpdate) {
        _this._needsCompositingBitsUpdate = false;
        _this.markNeedsCompositingBitsUpdate$0();
      }
      if (_this._needsPaint && _this._layer != null) {
        _this._needsPaint = false;
        _this.markNeedsPaint$0();
      }
      if (_this._needsSemanticsUpdate && _this.get$_semanticsConfiguration()._isSemanticBoundary) {
        _this._needsSemanticsUpdate = false;
        _this.markNeedsSemanticsUpdate$0();
      }
    },
    get$constraints: function() {
      return this._constraints;
    },
    markNeedsLayout$0: function() {
      var _this = this;
      if (_this._needsLayout)
        return;
      if (_this._relayoutBoundary !== _this)
        _this.markParentNeedsLayout$0();
      else {
        _this._needsLayout = true;
        if (H.interceptedTypeCheck(B.AbstractNode.prototype.get$owner.call(_this), "$isPipelineOwner") != null) {
          C.JSArray_methods.add$1(H.interceptedTypeCheck(B.AbstractNode.prototype.get$owner.call(_this), "$isPipelineOwner")._nodesNeedingLayout, _this);
          H.interceptedTypeCheck(B.AbstractNode.prototype.get$owner.call(_this), "$isPipelineOwner").onNeedVisualUpdate.call$0();
        }
      }
    },
    markParentNeedsLayout$0: function() {
      this._needsLayout = true;
      var $parent = H.interceptedTypeCheck(this._node$_parent, "$isRenderObject");
      if (!this._doingThisLayoutWithCallback)
        $parent.markNeedsLayout$0();
    },
    _cleanRelayoutBoundary$0: function() {
      var _this = this;
      if (_this._relayoutBoundary !== _this) {
        _this._relayoutBoundary = null;
        _this._needsLayout = true;
        _this.visitChildren$1(new K.RenderObject__cleanRelayoutBoundary_closure());
      }
    },
    _layoutWithoutResize$0: function() {
      var e, stack, exception, _this = this;
      try {
        _this.performLayout$0();
        _this.markNeedsSemanticsUpdate$0();
      } catch (exception) {
        e = H.unwrapException(exception);
        stack = H.getTraceFromException(exception);
        _this._debugReportException$3("performLayout", e, stack);
      }
      _this._needsLayout = false;
      _this.markNeedsPaint$0();
    },
    layout$2$parentUsesSize: function(constraints, parentUsesSize) {
      var e, stack, e0, stack0, exception, _this = this,
        relayoutBoundary = !parentUsesSize || _this.get$sizedByParent() || constraints.get$isTight() || !(_this._node$_parent instanceof K.RenderObject) ? _this : H.interceptedTypeCheck(_this._node$_parent, "$isRenderObject")._relayoutBoundary;
      if (!_this._needsLayout && J.$eq$(constraints, _this._constraints) && relayoutBoundary == _this._relayoutBoundary)
        return;
      _this._constraints = constraints;
      _this._relayoutBoundary = relayoutBoundary;
      if (_this.get$sizedByParent())
        try {
          _this.performResize$0();
        } catch (exception) {
          e = H.unwrapException(exception);
          stack = H.getTraceFromException(exception);
          _this._debugReportException$3("performResize", e, stack);
        }
      try {
        _this.performLayout$0();
        _this.markNeedsSemanticsUpdate$0();
      } catch (exception) {
        e0 = H.unwrapException(exception);
        stack0 = H.getTraceFromException(exception);
        _this._debugReportException$3("performLayout", e0, stack0);
      }
      _this._needsLayout = false;
      _this.markNeedsPaint$0();
    },
    layout$1: function(constraints) {
      return this.layout$2$parentUsesSize(constraints, false);
    },
    get$sizedByParent: function() {
      return false;
    },
    invokeLayoutCallback$1$1: function(callback, $T) {
      var _this = this;
      H.assertIsSubtype($T, K.Constraints, "The type argument '", "' is not a subtype of the type variable bound '", "' of type variable 'T' in 'invokeLayoutCallback'.");
      H.functionTypeCheck(callback, {func: 1, ret: -1, args: [$T]});
      _this._doingThisLayoutWithCallback = true;
      try {
        H.interceptedTypeCheck(B.AbstractNode.prototype.get$owner.call(_this), "$isPipelineOwner")._enableMutationsToDirtySubtrees$1(new K.RenderObject_invokeLayoutCallback_closure(_this, callback, $T));
      } finally {
        _this._doingThisLayoutWithCallback = false;
      }
    },
    get$isRepaintBoundary: function() {
      return false;
    },
    get$alwaysNeedsCompositing: function() {
      return false;
    },
    markNeedsCompositingBitsUpdate$0: function() {
      var t1, _this = this;
      if (_this._needsCompositingBitsUpdate)
        return;
      _this._needsCompositingBitsUpdate = true;
      t1 = _this._node$_parent;
      if (t1 instanceof K.RenderObject) {
        if (t1._needsCompositingBitsUpdate)
          return;
        if (!_this.get$isRepaintBoundary() && !t1.get$isRepaintBoundary()) {
          t1.markNeedsCompositingBitsUpdate$0();
          return;
        }
      }
      if (H.interceptedTypeCheck(B.AbstractNode.prototype.get$owner.call(_this), "$isPipelineOwner") != null)
        C.JSArray_methods.add$1(H.interceptedTypeCheck(B.AbstractNode.prototype.get$owner.call(_this), "$isPipelineOwner")._nodesNeedingCompositingBitsUpdate, _this);
    },
    _updateCompositingBits$0: function() {
      var oldNeedsCompositing, _this = this;
      if (!_this._needsCompositingBitsUpdate)
        return;
      oldNeedsCompositing = _this._needsCompositing;
      _this._needsCompositing = false;
      _this.visitChildren$1(new K.RenderObject__updateCompositingBits_closure(_this));
      if (_this.get$isRepaintBoundary() || _this.get$alwaysNeedsCompositing())
        _this._needsCompositing = true;
      if (oldNeedsCompositing != _this._needsCompositing)
        _this.markNeedsPaint$0();
      _this._needsCompositingBitsUpdate = false;
    },
    markNeedsPaint$0: function() {
      var t1, _this = this;
      if (_this._needsPaint)
        return;
      _this._needsPaint = true;
      if (_this.get$isRepaintBoundary()) {
        if (H.interceptedTypeCheck(B.AbstractNode.prototype.get$owner.call(_this), "$isPipelineOwner") != null) {
          C.JSArray_methods.add$1(H.interceptedTypeCheck(B.AbstractNode.prototype.get$owner.call(_this), "$isPipelineOwner")._nodesNeedingPaint, _this);
          H.interceptedTypeCheck(B.AbstractNode.prototype.get$owner.call(_this), "$isPipelineOwner").onNeedVisualUpdate.call$0();
        }
      } else {
        t1 = _this._node$_parent;
        if (t1 instanceof K.RenderObject)
          t1.markNeedsPaint$0();
        else if (H.interceptedTypeCheck(B.AbstractNode.prototype.get$owner.call(_this), "$isPipelineOwner") != null)
          H.interceptedTypeCheck(B.AbstractNode.prototype.get$owner.call(_this), "$isPipelineOwner").onNeedVisualUpdate.call$0();
      }
    },
    _skippedPaintingOnLayer$0: function() {
      var t1,
        ancestor = this._node$_parent;
      for (; ancestor instanceof K.RenderObject;) {
        if (ancestor.get$isRepaintBoundary()) {
          t1 = ancestor._layer;
          if (t1 == null)
            break;
          if (t1._node$_owner != null)
            break;
          ancestor._needsPaint = true;
        }
        ancestor = ancestor._node$_parent;
      }
    },
    _paintWithContext$2: function(context, offset) {
      var e, stack, exception, _this = this;
      if (_this._needsLayout)
        return;
      _this._needsPaint = false;
      try {
        _this.paint$2(context, offset);
      } catch (exception) {
        e = H.unwrapException(exception);
        stack = H.getTraceFromException(exception);
        _this._debugReportException$3("paint", e, stack);
      }
    },
    paint$2: function(context, offset) {
    },
    applyPaintTransform$2: function(child, transform) {
    },
    getTransformTo$1: function(_, ancestor) {
      var rootNode, renderers, renderer, transform, index, t1, t2;
      if (ancestor == null) {
        rootNode = H.interceptedTypeCheck(B.AbstractNode.prototype.get$owner.call(this), "$isPipelineOwner")._rootNode;
        if (rootNode instanceof K.RenderObject)
          ancestor = rootNode;
      }
      renderers = H.setRuntimeTypeInfo([], [K.RenderObject]);
      for (renderer = this; renderer != ancestor; renderer = H.interceptedTypeCheck(renderer._node$_parent, "$isRenderObject"))
        C.JSArray_methods.add$1(renderers, renderer);
      transform = new E.Matrix4(new Float64Array(16));
      transform.setIdentity$0();
      for (index = renderers.length - 1; index > 0;) {
        t1 = renderers.length;
        if (index >= t1)
          return H.ioore(renderers, index);
        t2 = renderers[index];
        --index;
        if (index >= t1)
          return H.ioore(renderers, index);
        t2.applyPaintTransform$2(renderers[index], transform);
      }
      return transform;
    },
    describeApproximatePaintClip$1: function(child) {
      return;
    },
    describeSemanticsClip$1: function(child) {
      return;
    },
    describeSemanticsConfiguration$1: function(config) {
    },
    sendSemanticsEvent$1: function(semanticsEvent) {
      var t1;
      if (H.interceptedTypeCheck(B.AbstractNode.prototype.get$owner.call(this), "$isPipelineOwner")._semanticsOwner == null)
        return;
      t1 = this._semantics;
      if (t1 != null && !t1._isMergedIntoParent)
        t1.sendEvent$1(semanticsEvent);
      else {
        t1 = this._node$_parent;
        if (t1 != null)
          H.interceptedTypeCheck(t1, "$isRenderObject").sendSemanticsEvent$1(semanticsEvent);
      }
    },
    get$_semanticsConfiguration: function() {
      var t1, _this = this;
      if (_this._cachedSemanticsConfiguration == null) {
        t1 = new A.SemanticsConfiguration(P.LinkedHashMap_LinkedHashMap$_empty(Q.SemanticsAction, {func: 1, ret: -1, args: [,]}), P.LinkedHashMap_LinkedHashMap$_empty(A.CustomSemanticsAction, {func: 1, ret: -1}));
        _this._cachedSemanticsConfiguration = t1;
        _this.describeSemanticsConfiguration$1(t1);
      }
      return _this._cachedSemanticsConfiguration;
    },
    clearSemantics$0: function() {
      this._needsSemanticsUpdate = true;
      this._semantics = null;
      this.visitChildren$1(new K.RenderObject_clearSemantics_closure());
    },
    markNeedsSemanticsUpdate$0: function() {
      var t1, wasSemanticsBoundary, isEffectiveSemanticsBoundary, t2, t3, t4, node, t5, _this = this;
      if (_this._node$_owner == null || H.interceptedTypeCheck(B.AbstractNode.prototype.get$owner.call(_this), "$isPipelineOwner")._semanticsOwner == null)
        return _this._cachedSemanticsConfiguration = null;
      if (_this._semantics != null) {
        t1 = _this._cachedSemanticsConfiguration;
        wasSemanticsBoundary = (t1 == null ? null : t1._isSemanticBoundary) === true;
      } else
        wasSemanticsBoundary = false;
      _this._cachedSemanticsConfiguration = null;
      isEffectiveSemanticsBoundary = _this.get$_semanticsConfiguration()._isSemanticBoundary && wasSemanticsBoundary;
      t1 = Q.SemanticsAction;
      t2 = {func: 1, ret: -1, args: [,]};
      t3 = A.CustomSemanticsAction;
      t4 = {func: 1, ret: -1};
      node = _this;
      while (true) {
        if (!(!isEffectiveSemanticsBoundary && node._node$_parent instanceof K.RenderObject))
          break;
        if (node !== _this && node._needsSemanticsUpdate)
          break;
        node._needsSemanticsUpdate = true;
        node = H.interceptedTypeCheck(node._node$_parent, "$isRenderObject");
        if (node._cachedSemanticsConfiguration == null) {
          t5 = new A.SemanticsConfiguration(P.LinkedHashMap_LinkedHashMap$_empty(t1, t2), P.LinkedHashMap_LinkedHashMap$_empty(t3, t4));
          node._cachedSemanticsConfiguration = t5;
          node.describeSemanticsConfiguration$1(t5);
        }
        isEffectiveSemanticsBoundary = node._cachedSemanticsConfiguration._isSemanticBoundary;
        if (isEffectiveSemanticsBoundary && node._semantics == null)
          return;
      }
      if (node !== _this && _this._semantics != null && _this._needsSemanticsUpdate)
        H.interceptedTypeCheck(B.AbstractNode.prototype.get$owner.call(_this), "$isPipelineOwner")._nodesNeedingSemantics.remove$1(0, _this);
      if (!node._needsSemanticsUpdate) {
        node._needsSemanticsUpdate = true;
        if (H.interceptedTypeCheck(B.AbstractNode.prototype.get$owner.call(_this), "$isPipelineOwner") != null) {
          H.interceptedTypeCheck(B.AbstractNode.prototype.get$owner.call(_this), "$isPipelineOwner")._nodesNeedingSemantics.add$1(0, node);
          H.interceptedTypeCheck(B.AbstractNode.prototype.get$owner.call(_this), "$isPipelineOwner").onNeedVisualUpdate.call$0();
        }
      }
    },
    _updateSemantics$0: function() {
      var t1, interestingFragment, t2, t3, t4, _this = this, _null = null;
      if (_this._needsLayout)
        return;
      t1 = _this._semantics;
      t1 = t1 == null ? _null : H.interceptedTypeCheck(B.AbstractNode.prototype.get$parent.call(t1, t1), "$isSemanticsNode");
      if (t1 == null)
        t1 = _null;
      else
        t1 = t1._mergeAllDescendantsIntoThisNode || t1._isMergedIntoParent;
      interestingFragment = H.interceptedTypeCheck(_this._getSemanticsForParent$1$mergeIntoParent(t1 === true), "$is_InterestingSemanticsFragment");
      t1 = _this._semantics;
      t2 = t1 == null;
      t3 = t2 ? _null : t1.parentSemanticsClipRect;
      t4 = t2 ? _null : t1.parentPaintClipRect;
      t1 = t2 ? _null : t1.elevationAdjustment;
      t1 = interestingFragment.compileChildren$3$elevationAdjustment$parentPaintClipRect$parentSemanticsClipRect(t1 == null ? 0 : t1, t4, t3);
      t1.get$single(t1);
    },
    _getSemanticsForParent$1$mergeIntoParent: function(mergeIntoParent) {
      var producesForkingFragment, t1, t2, fragments, toBeMarkedExplicit, childrenMergeIntoParent, result, _this = this, _box_0 = {},
        config = _this.get$_semanticsConfiguration();
      _box_0.dropSemanticsOfPreviousSiblings = config.isBlockingSemanticsOfPreviouslyPaintedNodes;
      producesForkingFragment = !config._hasBeenAnnotated && !config._isSemanticBoundary;
      t1 = K._InterestingSemanticsFragment;
      t2 = [t1];
      fragments = H.setRuntimeTypeInfo([], t2);
      toBeMarkedExplicit = P.LinkedHashSet_LinkedHashSet(t1);
      childrenMergeIntoParent = mergeIntoParent || config._isMergingSemanticsOfDescendants;
      _box_0.abortWalk = false;
      _this.visitChildrenForSemantics$1(new K.RenderObject__getSemanticsForParent_closure(_box_0, _this, childrenMergeIntoParent, fragments, toBeMarkedExplicit, config, producesForkingFragment));
      if (_box_0.abortWalk)
        return new K._AbortingSemanticsFragment(H.setRuntimeTypeInfo([_this], [K.RenderObject]), false);
      for (t1 = P._LinkedHashSetIterator$(toBeMarkedExplicit, toBeMarkedExplicit._collection$_modifications, H.getTypeArgumentByIndex(toBeMarkedExplicit, 0)); t1.moveNext$0();)
        t1._collection$_current.markAsExplicit$0();
      _this._needsSemanticsUpdate = false;
      if (!(_this._node$_parent instanceof K.RenderObject)) {
        t1 = _box_0.dropSemanticsOfPreviousSiblings;
        result = new K._RootSemanticsFragment(H.setRuntimeTypeInfo([], t2), H.setRuntimeTypeInfo([_this], [K.RenderObject]), t1);
      } else {
        t1 = _box_0.dropSemanticsOfPreviousSiblings;
        if (producesForkingFragment)
          result = new K._ContainerSemanticsFragment(H.setRuntimeTypeInfo([], t2), t1);
        else {
          result = new K._SwitchableSemanticsFragment(mergeIntoParent, config, H.setRuntimeTypeInfo([], t2), H.setRuntimeTypeInfo([_this], [K.RenderObject]), t1);
          if (config._isSemanticBoundary)
            result._isExplicit = true;
        }
      }
      result.addAll$1(0, fragments);
      return result;
    },
    visitChildrenForSemantics$1: function(visitor) {
      this.visitChildren$1(H.functionTypeCheck(visitor, {func: 1, ret: -1, args: [K.RenderObject]}));
    },
    assembleSemanticsNode$3: function(node, config, children) {
      var t1 = A.SemanticsNode;
      node.updateWith$2$childrenInInversePaintOrder$config(0, H.assertSubtype(H.assertSubtype(children, "$isIterable", [t1], "$asIterable"), "$isList", [t1], "$asList"), config);
    },
    handleEvent$2: function($event, entry) {
    },
    toStringShort$0: function() {
      var target, count, _this = this,
        header = _this.get$runtimeType(_this).toString$0(0) + "#" + Y.shortHash(_this),
        t1 = _this._relayoutBoundary;
      if (t1 != null && t1 !== _this) {
        target = H.interceptedTypeCheck(_this._node$_parent, "$isRenderObject");
        count = 1;
        while (true) {
          if (!(target != null && target !== t1))
            break;
          target = H.interceptedTypeCheck(target._node$_parent, "$isRenderObject");
          ++count;
        }
        header += " relayoutBoundary=up" + count;
      }
      if (_this._needsLayout)
        header += " NEEDS-LAYOUT";
      if (_this._needsPaint)
        header += " NEEDS-PAINT";
      return _this._node$_owner == null ? header + " DETACHED" : header;
    },
    toString$0: function(_) {
      return this.toStringShort$0();
    },
    toStringShallow$1$joiner: function(joiner) {
      return this.super$DiagnosticableTreeMixin$toStringShallow(joiner, C.DiagnosticLevel_2);
    },
    debugDescribeChildren$0: function() {
      return H.setRuntimeTypeInfo([], [Y.DiagnosticsNode]);
    },
    showOnScreen$4$curve$descendant$duration$rect: function(curve, descendant, duration, rect) {
      var t1 = this._node$_parent;
      if (t1 instanceof K.RenderObject)
        t1.showOnScreen$4$curve$descendant$duration$rect(curve, descendant == null ? this : descendant, duration, rect);
    },
    showOnScreen$0: function() {
      return this.showOnScreen$4$curve$descendant$duration$rect(C.Cubic_JUR0, null, C.Duration_0, null);
    },
    $isDiagnosticable: 1,
    $isDiagnosticableTree: 1,
    $isHitTestTarget: 1
  };
  K.RenderObject__debugReportException_closure.prototype = {
    call$1: function(information) {
      var t2, descendants, t1 = {};
      information._contents += "The following RenderObject was being processed when the exception was fired:\n";
      t2 = this.$this;
      information._contents += "  " + t2.toStringShallow$1$joiner("\n  ") + "\n";
      descendants = H.setRuntimeTypeInfo([], [P.String]);
      t1.lines = t1.depth = 0;
      t2.visitChildren$1(new K.RenderObject__debugReportException_closure_visitor(t1, 25, descendants, 5));
      if (t1.lines > 1)
        t1 = information._contents += "This RenderObject had the following descendants (showing up to depth 5):\n";
      else {
        t1 = descendants.length;
        t2 = information._contents;
        if (t1 === 1) {
          t1 = t2 + "This RenderObject had the following child:\n";
          information._contents = t1;
        } else {
          t1 = t2 + "This RenderObject has no descendants.\n";
          information._contents = t1;
        }
      }
      information._contents = P.StringBuffer__writeAll(t1, descendants, "\n");
    },
    $signature: 5
  };
  K.RenderObject__debugReportException_closure_visitor.prototype = {
    call$1: function(child) {
      var t1, t2, t3, _this = this;
      H.interceptedTypeCheck(child, "$isRenderObject");
      t1 = _this._box_0;
      t2 = t1.lines;
      t3 = _this.maxLines;
      if (t2 < t3) {
        C.JSArray_methods.add$1(_this.descendants, C.JSString_methods.$mul("  ", ++t1.depth) + H.S(child));
        if (t1.depth < _this.maxDepth)
          child.visitChildren$1(_this);
        --t1.depth;
      } else if (t2 === t3)
        C.JSArray_methods.add$1(_this.descendants, "  ...(descendants list truncated after " + t2 + " lines)");
      ++t1.lines;
    },
    $signature: 115
  };
  K.RenderObject__cleanRelayoutBoundary_closure.prototype = {
    call$1: function(child) {
      H.interceptedTypeCheck(child, "$isRenderObject")._cleanRelayoutBoundary$0();
    },
    $signature: 23
  };
  K.RenderObject_invokeLayoutCallback_closure.prototype = {
    call$0: function() {
      this.callback.call$1(H.assertSubtypeOfRuntimeType(this.$this.get$constraints(), this.T));
    },
    $signature: 0
  };
  K.RenderObject__updateCompositingBits_closure.prototype = {
    call$1: function(child) {
      H.interceptedTypeCheck(child, "$isRenderObject");
      child._updateCompositingBits$0();
      if (H.boolConversionCheck(child._needsCompositing))
        this.$this._needsCompositing = true;
    },
    $signature: 23
  };
  K.RenderObject_clearSemantics_closure.prototype = {
    call$1: function(child) {
      H.interceptedTypeCheck(child, "$isRenderObject").clearSemantics$0();
    },
    $signature: 23
  };
  K.RenderObject__getSemanticsForParent_closure.prototype = {
    call$1: function(renderChild) {
      var t1, parentFragment, t2, t3, t4, t5, t6, t7, t8, t9, _i, siblingFragment, _this = this;
      H.interceptedTypeCheck(renderChild, "$isRenderObject");
      t1 = _this._box_0;
      if (t1.abortWalk || _this.$this._needsLayout) {
        t1.abortWalk = true;
        return;
      }
      parentFragment = renderChild._getSemanticsForParent$1$mergeIntoParent(_this.childrenMergeIntoParent);
      if (parentFragment.get$abortsWalk()) {
        t1.abortWalk = true;
        return;
      }
      if (parentFragment.dropsSemanticsOfPreviousSiblings) {
        C.JSArray_methods.set$length(_this.fragments, 0);
        _this.toBeMarkedExplicit.clear$0(0);
        if (!_this.config._isSemanticBoundary)
          t1.dropSemanticsOfPreviousSiblings = true;
      }
      for (t1 = J.get$iterator$ax(parentFragment.get$interestingFragments()), t2 = _this.fragments, t3 = _this.toBeMarkedExplicit, t4 = _this.config, t5 = _this.$this, t6 = _this.producesForkingFragment; t1.moveNext$0();) {
        t7 = t1.get$current(t1);
        C.JSArray_methods.add$1(t2, t7);
        C.JSArray_methods.add$1(t7._ancestorChain, t5);
        t7.addTags$1(t4._tagsForChildren);
        if (t4.explicitChildNodes || !(t5._node$_parent instanceof K.RenderObject)) {
          t7.markAsExplicit$0();
          continue;
        }
        if (t7.get$config() == null || t6)
          continue;
        if (!t4.isCompatibleWith$1(t7.get$config()))
          t3.add$1(0, t7);
        for (t8 = C.JSArray_methods.sublist$2(t2, 0, t2.length - 1), t9 = t8.length, _i = 0; _i < t8.length; t8.length === t9 || (0, H.throwConcurrentModificationError)(t8), ++_i) {
          siblingFragment = t8[_i];
          if (!t7.get$config().isCompatibleWith$1(siblingFragment.get$config())) {
            t3.add$1(0, t7);
            t3.add$1(0, siblingFragment);
          }
        }
      }
    },
    $signature: 23
  };
  K.RenderObjectWithChildMixin.prototype = {
    set$child: function(value) {
      var t1, _this = this;
      H.assertSubtypeOfRuntimeType(value, H.getRuntimeTypeArgument(_this, "RenderObjectWithChildMixin", 0));
      t1 = _this.RenderObjectWithChildMixin__child;
      if (t1 != null)
        _this.dropChild$1(t1);
      _this.set$_object$_child(value);
      t1 = _this.RenderObjectWithChildMixin__child;
      if (t1 != null)
        _this.adoptChild$1(t1);
    },
    redepthChildren$0: function() {
      var t1 = this.RenderObjectWithChildMixin__child;
      if (t1 != null)
        this.redepthChild$1(t1);
    },
    visitChildren$1: function(visitor) {
      var t1;
      H.functionTypeCheck(visitor, {func: 1, ret: -1, args: [K.RenderObject]});
      t1 = this.RenderObjectWithChildMixin__child;
      if (t1 != null)
        visitor.call$1(t1);
    },
    debugDescribeChildren$0: function() {
      var t1 = this.RenderObjectWithChildMixin__child,
        t2 = [Y.DiagnosticsNode];
      return t1 != null ? H.setRuntimeTypeInfo([new Y._DiagnosticableTreeNode(t1, "child", true, true, null)], t2) : H.setRuntimeTypeInfo([], t2);
    },
    set$_object$_child: function(_child) {
      this.RenderObjectWithChildMixin__child = H.assertSubtypeOfRuntimeType(_child, H.getRuntimeTypeArgument(this, "RenderObjectWithChildMixin", 0));
    }
  };
  K.ContainerParentDataMixin.prototype = {
    set$previousSibling: function(_, previousSibling) {
      this.ContainerParentDataMixin_previousSibling = H.assertSubtypeOfRuntimeType(previousSibling, H.getRuntimeTypeArgument(this, "ContainerParentDataMixin", 0));
    },
    set$nextSibling: function(_, nextSibling) {
      this.ContainerParentDataMixin_nextSibling = H.assertSubtypeOfRuntimeType(nextSibling, H.getRuntimeTypeArgument(this, "ContainerParentDataMixin", 0));
    },
    $isParentData: 1,
    get$previousSibling: function(receiver) {
      return this.ContainerParentDataMixin_previousSibling;
    },
    get$nextSibling: function(receiver) {
      return this.ContainerParentDataMixin_nextSibling;
    }
  };
  K.ContainerRenderObjectMixin.prototype = {
    _insertIntoChildList$2$after: function(child, after) {
      var childParentData, t2, afterParentData, childPreviousSiblingParentData, childNextSiblingParentData, _this = this,
        t1 = H.getRuntimeTypeArgument(_this, "ContainerRenderObjectMixin", 0);
      H.assertSubtypeOfRuntimeType(child, t1);
      H.assertSubtypeOfRuntimeType(after, t1);
      t1 = H.getRuntimeTypeArgument(_this, "ContainerRenderObjectMixin", 1);
      childParentData = H.assertSubtypeOfRuntimeType(child.parentData, t1);
      ++_this.ContainerRenderObjectMixin__childCount;
      if (after == null) {
        childParentData.set$nextSibling(0, _this.ContainerRenderObjectMixin__firstChild);
        t2 = _this.ContainerRenderObjectMixin__firstChild;
        if (t2 != null)
          H.assertSubtypeOfRuntimeType(t2.parentData, t1).set$previousSibling(0, child);
        _this.set$_object$_firstChild(child);
        if (_this.ContainerRenderObjectMixin__lastChild == null)
          _this.set$_object$_lastChild(child);
      } else {
        afterParentData = H.assertSubtypeOfRuntimeType(after.parentData, t1);
        if (afterParentData.get$nextSibling(afterParentData) == null) {
          childParentData.set$previousSibling(0, after);
          afterParentData.set$nextSibling(0, child);
          _this.set$_object$_lastChild(child);
        } else {
          childParentData.set$nextSibling(0, afterParentData.get$nextSibling(afterParentData));
          childParentData.set$previousSibling(0, after);
          childPreviousSiblingParentData = H.assertSubtypeOfRuntimeType(childParentData.get$previousSibling(childParentData).parentData, t1);
          childNextSiblingParentData = H.assertSubtypeOfRuntimeType(childParentData.get$nextSibling(childParentData).parentData, t1);
          childPreviousSiblingParentData.set$nextSibling(0, child);
          childNextSiblingParentData.set$previousSibling(0, child);
        }
      }
    },
    insert$2$after: function(_, child, after) {
      var t1 = H.getRuntimeTypeArgument(this, "ContainerRenderObjectMixin", 0);
      H.assertSubtypeOfRuntimeType(child, t1);
      H.assertSubtypeOfRuntimeType(after, t1);
      this.adoptChild$1(child);
      this._insertIntoChildList$2$after(child, after);
    },
    add$1: function(_, child) {
      this.insert$2$after(0, H.assertSubtypeOfRuntimeType(child, H.getRuntimeTypeArgument(this, "ContainerRenderObjectMixin", 0)), this.ContainerRenderObjectMixin__lastChild);
    },
    addAll$1: function(_, children) {
    },
    _removeFromChildList$1: function(child) {
      var _this = this,
        t1 = H.getRuntimeTypeArgument(_this, "ContainerRenderObjectMixin", 1),
        childParentData = H.assertSubtypeOfRuntimeType(H.assertSubtypeOfRuntimeType(child, H.getRuntimeTypeArgument(_this, "ContainerRenderObjectMixin", 0)).parentData, t1);
      if (childParentData.get$previousSibling(childParentData) == null)
        _this.set$_object$_firstChild(childParentData.get$nextSibling(childParentData));
      else
        H.assertSubtypeOfRuntimeType(childParentData.get$previousSibling(childParentData).parentData, t1).set$nextSibling(0, childParentData.get$nextSibling(childParentData));
      if (childParentData.get$nextSibling(childParentData) == null)
        _this.set$_object$_lastChild(childParentData.get$previousSibling(childParentData));
      else
        H.assertSubtypeOfRuntimeType(childParentData.get$nextSibling(childParentData).parentData, t1).set$previousSibling(0, childParentData.get$previousSibling(childParentData));
      childParentData.set$previousSibling(0, null);
      childParentData.set$nextSibling(0, null);
      --_this.ContainerRenderObjectMixin__childCount;
    },
    remove$1: function(_, child) {
      H.assertSubtypeOfRuntimeType(child, H.getRuntimeTypeArgument(this, "ContainerRenderObjectMixin", 0));
      this._removeFromChildList$1(child);
      this.dropChild$1(child);
    },
    move$2$after: function(child, after) {
      var childParentData, _this = this,
        t1 = H.getRuntimeTypeArgument(_this, "ContainerRenderObjectMixin", 0);
      H.assertSubtypeOfRuntimeType(child, t1);
      H.assertSubtypeOfRuntimeType(after, t1);
      childParentData = H.assertSubtypeOfRuntimeType(child.parentData, H.getRuntimeTypeArgument(_this, "ContainerRenderObjectMixin", 1));
      if (childParentData.get$previousSibling(childParentData) == after)
        return;
      _this._removeFromChildList$1(child);
      _this._insertIntoChildList$2$after(child, after);
      _this.markNeedsLayout$0();
    },
    redepthChildren$0: function() {
      var t1, t2, t3, childParentData,
        child = this.ContainerRenderObjectMixin__firstChild;
      for (t1 = H.getRuntimeTypeArgument(this, "ContainerRenderObjectMixin", 1); child != null;) {
        t2 = child._node$_depth;
        t3 = this._node$_depth;
        if (t2 <= t3) {
          child._node$_depth = t3 + 1;
          child.redepthChildren$0();
        }
        childParentData = H.assertSubtypeOfRuntimeType(child.parentData, t1);
        child = childParentData.get$nextSibling(childParentData);
      }
    },
    visitChildren$1: function(visitor) {
      var child, t1, childParentData;
      H.functionTypeCheck(visitor, {func: 1, ret: -1, args: [K.RenderObject]});
      child = this.ContainerRenderObjectMixin__firstChild;
      for (t1 = H.getRuntimeTypeArgument(this, "ContainerRenderObjectMixin", 1); child != null;) {
        visitor.call$1(child);
        childParentData = H.assertSubtypeOfRuntimeType(child.parentData, t1);
        child = childParentData.get$nextSibling(childParentData);
      }
    },
    childBefore$1: function(child) {
      var childParentData = H.assertSubtypeOfRuntimeType(H.assertSubtypeOfRuntimeType(child, H.getRuntimeTypeArgument(this, "ContainerRenderObjectMixin", 0)).parentData, H.getRuntimeTypeArgument(this, "ContainerRenderObjectMixin", 1));
      return childParentData.get$previousSibling(childParentData);
    },
    childAfter$1: function(child) {
      var childParentData = H.assertSubtypeOfRuntimeType(H.assertSubtypeOfRuntimeType(child, H.getRuntimeTypeArgument(this, "ContainerRenderObjectMixin", 0)).parentData, H.getRuntimeTypeArgument(this, "ContainerRenderObjectMixin", 1));
      return childParentData.get$nextSibling(childParentData);
    },
    debugDescribeChildren$0: function() {
      var t1, count, t2, childParentData,
        children = H.setRuntimeTypeInfo([], [Y.DiagnosticsNode]),
        child = this.ContainerRenderObjectMixin__firstChild;
      if (child != null)
        for (t1 = H.getRuntimeTypeArgument(this, "ContainerRenderObjectMixin", 1), count = 1; true;) {
          t2 = "child " + count;
          child.toString;
          C.JSArray_methods.add$1(children, new Y._DiagnosticableTreeNode(child, t2, true, true, null));
          if (child == this.ContainerRenderObjectMixin__lastChild)
            break;
          ++count;
          childParentData = H.assertSubtypeOfRuntimeType(child.parentData, t1);
          child = childParentData.get$nextSibling(childParentData);
        }
      return children;
    },
    set$_object$_firstChild: function(_firstChild) {
      this.ContainerRenderObjectMixin__firstChild = H.assertSubtypeOfRuntimeType(_firstChild, H.getRuntimeTypeArgument(this, "ContainerRenderObjectMixin", 0));
    },
    set$_object$_lastChild: function(_lastChild) {
      this.ContainerRenderObjectMixin__lastChild = H.assertSubtypeOfRuntimeType(_lastChild, H.getRuntimeTypeArgument(this, "ContainerRenderObjectMixin", 0));
    }
  };
  K.FlutterErrorDetailsForRendering.prototype = {
    get$renderObject: function() {
      return this.renderObject;
    }
  };
  K._SemanticsFragment.prototype = {
    get$abortsWalk: function() {
      return false;
    }
  };
  K._ContainerSemanticsFragment.prototype = {
    addAll$1: function(_, fragments) {
      C.JSArray_methods.addAll$1(this.interestingFragments, H.assertSubtype(fragments, "$isIterable", [K._InterestingSemanticsFragment], "$asIterable"));
    },
    get$interestingFragments: function() {
      return this.interestingFragments;
    }
  };
  K._InterestingSemanticsFragment.prototype = {
    get$interestingFragments: function() {
      var $async$self = this;
      return P._makeSyncStarIterable(function() {
        var $async$goto = 0, $async$handler = 1, $async$currentError;
        return function $async$get$interestingFragments($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                $async$goto = 2;
                return $async$self;
              case 2:
                // after yield
                // implicit return
                return P._IterationMarker_endOfIteration();
              case 1:
                // rethrow
                return P._IterationMarker_uncaughtError($async$currentError);
            }
        };
      }, K._InterestingSemanticsFragment);
    },
    addTags$1: function(tags) {
      var t1 = A.SemanticsTag;
      H.assertSubtype(tags, "$isIterable", [t1], "$asIterable");
      if (tags == null || tags._collection$_length === 0)
        return;
      if (this._object$_tagsForChildren == null)
        this.set$_object$_tagsForChildren(P.LinkedHashSet_LinkedHashSet(t1));
      this._object$_tagsForChildren.addAll$1(0, tags);
    },
    set$_object$_tagsForChildren: function(_tagsForChildren) {
      this._object$_tagsForChildren = H.assertSubtype(_tagsForChildren, "$isSet", [A.SemanticsTag], "$asSet");
    }
  };
  K._RootSemanticsFragment.prototype = {
    compileChildren$3$elevationAdjustment$parentPaintClipRect$parentSemanticsClipRect: function($async$elevationAdjustment, $async$parentPaintClipRect, $async$parentSemanticsClipRect) {
      var $async$self = this;
      return P._makeSyncStarIterable(function() {
        var elevationAdjustment = $async$elevationAdjustment,
          parentPaintClipRect = $async$parentPaintClipRect,
          parentSemanticsClipRect = $async$parentSemanticsClipRect;
        var $async$goto = 0, $async$handler = 1, $async$currentError, t3, t4, t5, node, children, _i, t1, t2;
        return function $async$compileChildren$3$elevationAdjustment$parentPaintClipRect$parentSemanticsClipRect($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                t1 = $async$self._ancestorChain;
                t2 = C.JSArray_methods.get$first(t1);
                if (t2._semantics == null) {
                  t3 = C.JSArray_methods.get$first(t1).get$showOnScreen();
                  t4 = C.JSArray_methods.get$first(t1);
                  t4 = H.interceptedTypeCheck(B.AbstractNode.prototype.get$owner.call(t4), "$isPipelineOwner")._semanticsOwner;
                  t5 = $.$get$SemanticsNode__kEmptyConfig();
                  t5 = new A.SemanticsNode(null, 0, t3, C.Rect_0_0_0_0, t5._isMergingSemanticsOfDescendants, t5._actions, t5._customSemanticsActions, t5._actionsAsBits, t5._flags, t5._label, t5._semantics$_value, t5._decreasedValue, t5._increasedValue, t5._hint, t5._elevation, t5._thickness, t5._semantics$_textDirection);
                  t5.attach$1(t4);
                  t2._semantics = t5;
                }
                node = C.JSArray_methods.get$first(t1)._semantics;
                node.set$rect(0, C.JSArray_methods.get$first(t1).get$semanticBounds());
                children = H.setRuntimeTypeInfo([], [A.SemanticsNode]);
                for (t1 = $async$self._object$_children, t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i)
                  C.JSArray_methods.addAll$1(children, t1[_i].compileChildren$3$elevationAdjustment$parentPaintClipRect$parentSemanticsClipRect(0, parentPaintClipRect, parentSemanticsClipRect));
                node.updateWith$2$childrenInInversePaintOrder$config(0, children, null);
                $async$goto = 2;
                return node;
              case 2:
                // after yield
                // implicit return
                return P._IterationMarker_endOfIteration();
              case 1:
                // rethrow
                return P._IterationMarker_uncaughtError($async$currentError);
            }
        };
      }, A.SemanticsNode);
    },
    get$config: function() {
      return;
    },
    markAsExplicit$0: function() {
    },
    addAll$1: function(_, fragments) {
      C.JSArray_methods.addAll$1(this._object$_children, H.assertSubtype(fragments, "$isIterable", [K._InterestingSemanticsFragment], "$asIterable"));
    }
  };
  K._SwitchableSemanticsFragment.prototype = {
    compileChildren$3$elevationAdjustment$parentPaintClipRect$parentSemanticsClipRect: function($async$elevationAdjustment, $async$parentPaintClipRect, $async$parentSemanticsClipRect) {
      var $async$self = this;
      return P._makeSyncStarIterable(function() {
        var elevationAdjustment = $async$elevationAdjustment,
          parentPaintClipRect = $async$parentPaintClipRect,
          parentSemanticsClipRect = $async$parentSemanticsClipRect;
        var $async$goto = 0, $async$handler = 2, $async$currentError, t1, t2, t3, _i, fragment, t4, geometry, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, node, children;
        return function $async$compileChildren$3$elevationAdjustment$parentPaintClipRect$parentSemanticsClipRect($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                $async$goto = !$async$self._isExplicit ? 3 : 4;
                break;
              case 3:
                // then
                t1 = $async$self._ancestorChain;
                C.JSArray_methods.get$first(t1)._semantics = null;
                t2 = $async$self._object$_children, t3 = t2.length, _i = 0;
              case 5:
                // for condition
                if (!(_i < t2.length)) {
                  // goto after for
                  $async$goto = 7;
                  break;
                }
                fragment = t2[_i];
                C.JSArray_methods.addAll$1(fragment._ancestorChain, C.JSArray_methods.sublist$1(t1, 1));
                t4 = $async$self._config._elevation;
                if (typeof t4 !== "number") {
                  H.iae(t4);
                  // goto return
                  $async$goto = 1;
                  break;
                }
                $async$goto = 8;
                return P._IterationMarker_yieldStar(fragment.compileChildren$3$elevationAdjustment$parentPaintClipRect$parentSemanticsClipRect(elevationAdjustment + t4, parentPaintClipRect, parentSemanticsClipRect));
              case 8:
                // after yield
              case 6:
                // for update
                t2.length === t3 || (0, H.throwConcurrentModificationError)(t2), ++_i;
                // goto for condition
                $async$goto = 5;
                break;
              case 7:
                // after for
                // goto return
                $async$goto = 1;
                break;
              case 4:
                // join
                t1 = $async$self._ancestorChain;
                if (t1.length > 1) {
                  geometry = new K._SemanticsGeometry();
                  geometry._computeValues$3(parentSemanticsClipRect, parentPaintClipRect, t1);
                } else
                  geometry = null;
                t2 = $async$self._mergeIntoParent;
                t3 = !t2;
                if (t3) {
                  if (geometry == null)
                    t4 = null;
                  else {
                    t4 = geometry._rect;
                    t4 = t4.get$isEmpty(t4);
                  }
                  t4 = t4 === true;
                } else
                  t4 = false;
                if (t4) {
                  // goto return
                  $async$goto = 1;
                  break;
                }
                t4 = C.JSArray_methods.get$first(t1);
                if (t4._semantics == null) {
                  t5 = C.JSArray_methods.get$first(t1).get$showOnScreen();
                  t6 = $.$get$SemanticsNode__kEmptyConfig();
                  t7 = t6._isMergingSemanticsOfDescendants;
                  t8 = t6._actions;
                  t9 = t6._customSemanticsActions;
                  t10 = t6._actionsAsBits;
                  t11 = t6._flags;
                  t12 = t6._label;
                  t13 = t6._semantics$_value;
                  t14 = t6._decreasedValue;
                  t15 = t6._increasedValue;
                  t16 = t6._hint;
                  t17 = t6._elevation;
                  t18 = t6._thickness;
                  t6 = t6._semantics$_textDirection;
                  t19 = ($.SemanticsNode__lastIdentifier + 1) % 65535;
                  $.SemanticsNode__lastIdentifier = t19;
                  t4._semantics = new A.SemanticsNode(null, t19, t5, C.Rect_0_0_0_0, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18, t6);
                }
                node = C.JSArray_methods.get$first(t1)._semantics;
                node.set$isMergedIntoParent(t2);
                node.set$tags($async$self._object$_tagsForChildren);
                node.elevationAdjustment = elevationAdjustment;
                if (elevationAdjustment !== 0) {
                  $async$self._ensureConfigIsWritable$0();
                  t2 = $async$self._config;
                  t4 = t2._elevation;
                  if (typeof t4 !== "number") {
                    t4.$add();
                    // goto return
                    $async$goto = 1;
                    break;
                  }
                  t2.set$elevation(0, t4 + elevationAdjustment);
                }
                if (geometry != null) {
                  node.set$rect(0, geometry._rect);
                  node.set$transform(0, geometry._object$_transform);
                  node.parentSemanticsClipRect = geometry._semanticsClipRect;
                  node.parentPaintClipRect = geometry._paintClipRect;
                  if (t3 && geometry._markAsHidden) {
                    $async$self._ensureConfigIsWritable$0();
                    $async$self._config._setFlag$2(C.SemanticsFlag_8192, true);
                  }
                }
                children = H.setRuntimeTypeInfo([], [A.SemanticsNode]);
                for (t2 = $async$self._object$_children, t3 = t2.length, _i = 0; _i < t2.length; t2.length === t3 || (0, H.throwConcurrentModificationError)(t2), ++_i) {
                  fragment = t2[_i];
                  t4 = node.parentSemanticsClipRect;
                  C.JSArray_methods.addAll$1(children, fragment.compileChildren$3$elevationAdjustment$parentPaintClipRect$parentSemanticsClipRect(0, node.parentPaintClipRect, t4));
                }
                t2 = $async$self._config;
                if (t2._isSemanticBoundary)
                  C.JSArray_methods.get$first(t1).assembleSemanticsNode$3(node, $async$self._config, children);
                else
                  node.updateWith$2$childrenInInversePaintOrder$config(0, children, t2);
                $async$goto = 9;
                return node;
              case 9:
                // after yield
              case 1:
                // return
                return P._IterationMarker_endOfIteration();
              case 2:
                // rethrow
                return P._IterationMarker_uncaughtError($async$currentError);
            }
        };
      }, A.SemanticsNode);
    },
    get$config: function() {
      return this._isExplicit ? null : this._config;
    },
    addAll$1: function(_, fragments) {
      var t1, t2, _i, fragment, _this = this;
      H.assertSubtype(fragments, "$isIterable", [K._InterestingSemanticsFragment], "$asIterable");
      for (t1 = fragments.length, t2 = _this._object$_children, _i = 0; _i < fragments.length; fragments.length === t1 || (0, H.throwConcurrentModificationError)(fragments), ++_i) {
        fragment = fragments[_i];
        C.JSArray_methods.add$1(t2, fragment);
        if (fragment.get$config() == null)
          continue;
        if (!_this._isConfigWritable) {
          _this._config = _this._config.copy$0();
          _this._isConfigWritable = true;
        }
        _this._config.absorb$1(fragment.get$config());
      }
    },
    _ensureConfigIsWritable$0: function() {
      var _this = this;
      if (!_this._isConfigWritable) {
        _this._config = _this._config.copy$0();
        _this._isConfigWritable = true;
      }
    },
    markAsExplicit$0: function() {
      this._isExplicit = true;
    }
  };
  K._AbortingSemanticsFragment.prototype = {
    get$abortsWalk: function() {
      return true;
    },
    get$config: function() {
      return;
    },
    compileChildren$3$elevationAdjustment$parentPaintClipRect$parentSemanticsClipRect: function($async$elevationAdjustment, $async$parentPaintClipRect, $async$parentSemanticsClipRect) {
      var $async$self = this;
      return P._makeSyncStarIterable(function() {
        var elevationAdjustment = $async$elevationAdjustment,
          parentPaintClipRect = $async$parentPaintClipRect,
          parentSemanticsClipRect = $async$parentSemanticsClipRect;
        var $async$goto = 0, $async$handler = 1, $async$currentError;
        return function $async$compileChildren$3$elevationAdjustment$parentPaintClipRect$parentSemanticsClipRect($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                $async$goto = 2;
                return C.JSArray_methods.get$first($async$self._ancestorChain)._semantics;
              case 2:
                // after yield
                // implicit return
                return P._IterationMarker_endOfIteration();
              case 1:
                // rethrow
                return P._IterationMarker_uncaughtError($async$currentError);
            }
        };
      }, A.SemanticsNode);
    },
    markAsExplicit$0: function() {
    }
  };
  K._SemanticsGeometry.prototype = {
    _computeValues$3: function(parentSemanticsClipRect, parentPaintClipRect, ancestors) {
      var t1, index, $parent, child, owner, t2, paintRect, _this = this;
      H.assertSubtype(ancestors, "$isList", [K.RenderObject], "$asList");
      t1 = new E.Matrix4(new Float64Array(16));
      t1.setIdentity$0();
      _this._object$_transform = t1;
      _this._semanticsClipRect = parentSemanticsClipRect;
      _this._paintClipRect = parentPaintClipRect;
      for (index = ancestors.length - 1; index > 0;) {
        t1 = ancestors.length;
        if (index >= t1)
          return H.ioore(ancestors, index);
        $parent = ancestors[index];
        --index;
        if (index >= t1)
          return H.ioore(ancestors, index);
        child = ancestors[index];
        parentSemanticsClipRect = $parent.describeSemanticsClip$1(child);
        if (parentSemanticsClipRect != null) {
          _this._semanticsClipRect = parentSemanticsClipRect;
          _this._paintClipRect = K._SemanticsGeometry__intersectRects(_this._paintClipRect, $parent.describeApproximatePaintClip$1(child));
        } else
          _this._semanticsClipRect = K._SemanticsGeometry__intersectRects(_this._semanticsClipRect, $parent.describeApproximatePaintClip$1(child));
        _this._semanticsClipRect = K._SemanticsGeometry__transformRect(_this._semanticsClipRect, $parent, child);
        _this._paintClipRect = K._SemanticsGeometry__transformRect(_this._paintClipRect, $parent, child);
        $parent.applyPaintTransform$2(child, _this._object$_transform);
      }
      owner = C.JSArray_methods.get$first(ancestors);
      t1 = _this._semanticsClipRect;
      t1 = t1 == null ? owner.get$semanticBounds() : t1.intersect$1(owner.get$semanticBounds());
      _this._rect = t1;
      t2 = _this._paintClipRect;
      if (t2 != null) {
        paintRect = t2.intersect$1(t1);
        if (paintRect.get$isEmpty(paintRect)) {
          t1 = _this._rect;
          t1 = !t1.get$isEmpty(t1);
        } else
          t1 = false;
        _this._markAsHidden = t1;
        if (!t1)
          _this._rect = paintRect;
      }
    }
  };
  K._RenderObject_AbstractNode_DiagnosticableTreeMixin.prototype = {};
  Q.TextOverflow.prototype = {
    toString$0: function(_) {
      return this._paragraph$_name;
    }
  };
  Q.RenderParagraph.prototype = {
    set$text: function(_, value) {
      var _this = this,
        t1 = _this._textPainter;
      switch (t1._text_painter$_text.compareTo$1(0, value)) {
        case C.RenderComparison_0:
        case C.RenderComparison_1:
          return;
        case C.RenderComparison_2:
          t1.set$text(0, value);
          _this.markNeedsPaint$0();
          _this.markNeedsSemanticsUpdate$0();
          break;
        case C.RenderComparison_3:
          t1.set$text(0, value);
          _this._overflowShader = null;
          _this.markNeedsLayout$0();
          break;
      }
    },
    set$textAlign: function(_, value) {
      var t1 = this._textPainter;
      if (t1._text_painter$_textAlign === value)
        return;
      t1.set$textAlign(0, value);
      this.markNeedsPaint$0();
    },
    set$textDirection: function(value) {
      var t1 = this._textPainter;
      if (t1._text_painter$_textDirection == value)
        return;
      t1.set$textDirection(value);
      this.markNeedsLayout$0();
    },
    set$softWrap: function(value) {
      return;
    },
    set$overflow: function(_, value) {
      var t1, _this = this;
      if (_this._paragraph$_overflow === value)
        return;
      _this._paragraph$_overflow = value;
      t1 = value === C.TextOverflow_2 ? "\u2026" : null;
      _this._textPainter.set$ellipsis(t1);
      _this.markNeedsLayout$0();
    },
    set$textScaleFactor: function(value) {
      var t1 = this._textPainter;
      if (t1._textScaleFactor === value)
        return;
      t1.set$textScaleFactor(value);
      this._overflowShader = null;
      this.markNeedsLayout$0();
    },
    set$maxLines: function(value) {
      var t1 = this._textPainter,
        t2 = t1._text_painter$_maxLines;
      if (t2 == null ? value == null : t2 === value)
        return;
      t1.set$maxLines(value);
      this._overflowShader = null;
      this.markNeedsLayout$0();
    },
    set$locale: function(_, value) {
      var t1 = this._textPainter;
      if (J.$eq$(t1._text_painter$_locale, value))
        return;
      t1.set$locale(0, value);
      this._overflowShader = null;
      this.markNeedsLayout$0();
    },
    _layoutText$2$maxWidth$minWidth: function(maxWidth, minWidth) {
      this._textPainter.layout$2$maxWidth$minWidth(maxWidth, minWidth);
    },
    computeDistanceToActualBaseline$1: function(baseline) {
      var t1 = H.interceptedTypeCheck(K.RenderObject.prototype.get$constraints.call(this), "$isBoxConstraints"),
        t2 = t1.minWidth;
      this._layoutText$2$maxWidth$minWidth(t1.maxWidth, t2);
      return this._textPainter.computeDistanceToActualBaseline$1(baseline);
    },
    hitTestSelf$1: function(position) {
      return true;
    },
    handleEvent$2: function($event, entry) {
      var t2, t3, position, t1 = {};
      H.interceptedTypeCheck(entry, "$isBoxHitTestEntry");
      if (!$event.$isPointerDownEvent)
        return;
      t1.hasGestureRecognizer = false;
      t2 = this._textPainter;
      t2._text_painter$_text.visitTextSpan$1(new Q.RenderParagraph_handleEvent_closure(t1));
      if (!t1.hasGestureRecognizer)
        return;
      t1 = H.interceptedTypeCheck(K.RenderObject.prototype.get$constraints.call(this), "$isBoxConstraints");
      t3 = t1.minWidth;
      this._layoutText$2$maxWidth$minWidth(t1.maxWidth, t3);
      position = t2._text_painter$_paragraph.getPositionForOffset$1(entry.localPosition);
      t2._text_painter$_text.getSpanForPosition$1(position);
    },
    performLayout$0: function() {
      var t3, textDidExceedMaxLines, t4, t5, didOverflowHeight, didOverflowWidth, fadeSizePainter, fadeStart, fadeEnd, _this = this, _null = null,
        t1 = H.interceptedTypeCheck(K.RenderObject.prototype.get$constraints.call(_this), "$isBoxConstraints"),
        t2 = t1.minWidth;
      _this._layoutText$2$maxWidth$minWidth(t1.maxWidth, t2);
      t2 = _this._textPainter;
      t1 = t2._text_painter$_paragraph._width;
      t1.toString;
      t1 = Math.ceil(t1);
      t3 = Math.ceil(t2._text_painter$_paragraph._height);
      textDidExceedMaxLines = t2._text_painter$_paragraph._didExceedMaxLines;
      t4 = _this._size = H.interceptedTypeCheck(K.RenderObject.prototype.get$constraints.call(_this), "$isBoxConstraints").constrain$1(new Q.Size(t1, t3));
      t5 = t4._dy;
      if (typeof t5 !== "number")
        return t5.$lt();
      didOverflowHeight = t5 < t3 || textDidExceedMaxLines;
      t3 = t4._dx;
      if (typeof t3 !== "number")
        return t3.$lt();
      didOverflowWidth = t3 < t1;
      if (didOverflowWidth || didOverflowHeight)
        switch (_this._paragraph$_overflow) {
          case C.TextOverflow_3:
            _this._needsClipping = false;
            _this._overflowShader = null;
            break;
          case C.TextOverflow_0:
          case C.TextOverflow_2:
            _this._needsClipping = true;
            _this._overflowShader = null;
            break;
          case C.TextOverflow_1:
            _this._needsClipping = true;
            t1 = t2._text_painter$_text.style;
            t3 = t2._text_painter$_textDirection;
            t4 = t2._textScaleFactor;
            fadeSizePainter = U.TextPainter$(_null, t2._text_painter$_locale, _null, _null, new Q.TextSpan(t1, "\u2026", _null), C.TextAlign_4, t3, t4);
            fadeSizePainter.layout$0();
            if (didOverflowWidth) {
              switch (t2._text_painter$_textDirection) {
                case C.TextDirection_0:
                  t1 = fadeSizePainter._text_painter$_paragraph._width;
                  t1.toString;
                  fadeStart = Math.ceil(t1);
                  fadeEnd = 0;
                  break;
                case C.TextDirection_1:
                  fadeEnd = _this._size._dx;
                  t1 = fadeSizePainter._text_painter$_paragraph._width;
                  t1.toString;
                  t1 = Math.ceil(t1);
                  if (typeof fadeEnd !== "number")
                    return fadeEnd.$sub();
                  fadeStart = fadeEnd - t1;
                  break;
                default:
                  fadeStart = _null;
                  fadeEnd = fadeStart;
              }
              _this._overflowShader = Q._GradientLinear$(new Q.Offset(fadeStart, 0), new Q.Offset(fadeEnd, 0), H.setRuntimeTypeInfo([C.Color_4294967295, C.Color_16777215], [Q.Color]), _null, C.TileMode_0);
            } else {
              fadeEnd = _this._size._dy;
              t1 = Math.ceil(fadeSizePainter._text_painter$_paragraph._height);
              if (typeof fadeEnd !== "number")
                return fadeEnd.$sub();
              _this._overflowShader = Q._GradientLinear$(new Q.Offset(0, fadeEnd - t1 / 2), new Q.Offset(0, fadeEnd), H.setRuntimeTypeInfo([C.Color_4294967295, C.Color_16777215], [Q.Color]), _null, C.TileMode_0);
            }
            break;
        }
      else {
        _this._needsClipping = false;
        _this._overflowShader = null;
      }
    },
    paint$2: function(context, offset) {
      var canvas, t3, t4, bounds, paint, _this = this,
        t1 = H.interceptedTypeCheck(K.RenderObject.prototype.get$constraints.call(_this), "$isBoxConstraints"),
        t2 = t1.minWidth;
      _this._layoutText$2$maxWidth$minWidth(t1.maxWidth, t2);
      canvas = context.get$canvas(context);
      if (_this._needsClipping) {
        t1 = _this._size;
        t2 = offset._dx;
        t3 = offset._dy;
        t4 = t1._dx;
        t1 = t1._dy;
        if (typeof t2 !== "number")
          return t2.$add();
        if (typeof t4 !== "number")
          return H.iae(t4);
        if (typeof t3 !== "number")
          return t3.$add();
        if (typeof t1 !== "number")
          return H.iae(t1);
        bounds = new Q.Rect(t2, t3, t2 + t4, t3 + t1);
        if (_this._overflowShader != null)
          canvas.saveLayer$2(bounds, new Q.Paint(new Q.PaintData()));
        else
          canvas.save$0(0);
        canvas.clipRect$1(bounds);
      }
      canvas.drawParagraph$2(_this._textPainter._text_painter$_paragraph, offset);
      if (_this._needsClipping) {
        if (_this._overflowShader != null) {
          canvas.translate$2(0, offset._dx, offset._dy);
          paint = new Q.Paint(new Q.PaintData());
          paint.set$blendMode(C.BlendMode_13);
          paint.set$shader(_this._overflowShader);
          t1 = _this._size;
          t2 = t1._dx;
          t1 = t1._dy;
          if (typeof t2 !== "number")
            return H.iae(t2);
          if (typeof t1 !== "number")
            return H.iae(t1);
          canvas.drawRect$2(new Q.Rect(0, 0, 0 + t2, 0 + t1), paint);
        }
        canvas.restore$0(0);
      }
    },
    describeSemanticsConfiguration$1: function(config) {
      var t2, t3, _this = this, t1 = {};
      _this.super$RenderObject$describeSemanticsConfiguration(config);
      t2 = _this._recognizerOffsets;
      C.JSArray_methods.set$length(t2, 0);
      C.JSArray_methods.set$length(_this._recognizers, 0);
      t1.offset = 0;
      t3 = _this._textPainter;
      t3._text_painter$_text.visitTextSpan$1(new Q.RenderParagraph_describeSemanticsConfiguration_closure(t1, _this));
      if (t2.length !== 0)
        config._isSemanticBoundary = config.explicitChildNodes = true;
      else {
        config._label = t3._text_painter$_text.toPlainText$0();
        config._hasBeenAnnotated = true;
        config._semantics$_textDirection = t3._text_painter$_textDirection;
      }
    },
    assembleSemanticsNode$3: function(node, config, children) {
      var newChildren, rawLabel, buildSemanticsConfig, t2, current, i, j, t3, start, t4, end, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, node0, configuration, _this = this, _null = null, _box_0 = {},
        t1 = A.SemanticsNode;
      H.assertSubtype(children, "$isIterable", [t1], "$asIterable");
      newChildren = H.setRuntimeTypeInfo([], [t1]);
      t1 = _this._textPainter;
      rawLabel = t1._text_painter$_text.toPlainText$0();
      _box_0.order = -1;
      _box_0.currentDirection = t1._text_painter$_textDirection;
      _box_0.currentRect = null;
      buildSemanticsConfig = new Q.RenderParagraph_assembleSemanticsNode_buildSemanticsConfig(_box_0, _this, rawLabel);
      for (t1 = _this._recognizerOffsets, t2 = _this._recognizers, current = 0, i = 0, j = 0; t3 = t1.length, i < t3; i += 2, ++j, current = end) {
        start = t1[i];
        t4 = i + 1;
        if (t4 >= t3)
          return H.ioore(t1, t4);
        end = t1[t4];
        if (current !== start) {
          t3 = $.$get$SemanticsNode__kEmptyConfig();
          t4 = t3._isMergingSemanticsOfDescendants;
          t5 = t3._actions;
          t6 = t3._customSemanticsActions;
          t7 = t3._actionsAsBits;
          t8 = t3._flags;
          t9 = t3._label;
          t10 = t3._semantics$_value;
          t11 = t3._decreasedValue;
          t12 = t3._increasedValue;
          t13 = t3._hint;
          t14 = t3._elevation;
          t15 = t3._thickness;
          t3 = t3._semantics$_textDirection;
          t16 = ($.SemanticsNode__lastIdentifier + 1) % 65535;
          $.SemanticsNode__lastIdentifier = t16;
          node0 = new A.SemanticsNode(_null, t16, _null, C.Rect_0_0_0_0, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t3);
          node0.updateWith$1$config(0, buildSemanticsConfig.call$2(current, start));
          t3 = _box_0.currentRect;
          if (!J.$eq$(node0._semantics$_rect, t3)) {
            node0._semantics$_rect = t3;
            node0._markDirty$0();
          }
          C.JSArray_methods.add$1(newChildren, node0);
        }
        t3 = $.$get$SemanticsNode__kEmptyConfig();
        t4 = t3._isMergingSemanticsOfDescendants;
        t5 = t3._actions;
        t6 = t3._customSemanticsActions;
        t7 = t3._actionsAsBits;
        t8 = t3._flags;
        t9 = t3._label;
        t10 = t3._semantics$_value;
        t11 = t3._decreasedValue;
        t12 = t3._increasedValue;
        t13 = t3._hint;
        t14 = t3._elevation;
        t15 = t3._thickness;
        t3 = t3._semantics$_textDirection;
        t16 = ($.SemanticsNode__lastIdentifier + 1) % 65535;
        $.SemanticsNode__lastIdentifier = t16;
        node0 = new A.SemanticsNode(_null, t16, _null, C.Rect_0_0_0_0, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t3);
        configuration = buildSemanticsConfig.call$2(start, end);
        if (j >= t2.length)
          return H.ioore(t2, j);
        node0.updateWith$1$config(0, configuration);
        t3 = _box_0.currentRect;
        if (!J.$eq$(node0._semantics$_rect, t3)) {
          node0._semantics$_rect = t3;
          node0._markDirty$0();
        }
        C.JSArray_methods.add$1(newChildren, node0);
      }
      t1 = rawLabel.length;
      if (current < t1) {
        t2 = $.$get$SemanticsNode__kEmptyConfig();
        t3 = t2._isMergingSemanticsOfDescendants;
        t4 = t2._actions;
        t5 = t2._customSemanticsActions;
        t6 = t2._actionsAsBits;
        t7 = t2._flags;
        t8 = t2._label;
        t9 = t2._semantics$_value;
        t10 = t2._decreasedValue;
        t11 = t2._increasedValue;
        t12 = t2._hint;
        t13 = t2._elevation;
        t14 = t2._thickness;
        t2 = t2._semantics$_textDirection;
        t15 = ($.SemanticsNode__lastIdentifier + 1) % 65535;
        $.SemanticsNode__lastIdentifier = t15;
        node0 = new A.SemanticsNode(_null, t15, _null, C.Rect_0_0_0_0, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t2);
        node0.updateWith$1$config(0, buildSemanticsConfig.call$2(current, t1));
        node0.set$rect(0, _box_0.currentRect);
        C.JSArray_methods.add$1(newChildren, node0);
      }
      node.updateWith$2$childrenInInversePaintOrder$config(0, newChildren, config);
    },
    debugDescribeChildren$0: function() {
      var t1 = this._textPainter._text_painter$_text;
      t1.toString;
      return H.setRuntimeTypeInfo([new Y._DiagnosticableTreeNode(t1, "text", true, true, C.DiagnosticsTreeStyle_3)], [Y.DiagnosticsNode]);
    }
  };
  Q.RenderParagraph_handleEvent_closure.prototype = {
    call$1: function(span) {
      return true;
    },
    $signature: 20
  };
  Q.RenderParagraph_describeSemanticsConfiguration_closure.prototype = {
    call$1: function(span) {
      var t1 = this._box_0;
      t1.offset = t1.offset + span.text.length;
      return true;
    },
    $signature: 20
  };
  Q.RenderParagraph_assembleSemanticsNode_buildSemanticsConfig.prototype = {
    call$2: function(start, end) {
      var rects, rect, _i, textBox, t5,
        t1 = this._box_0,
        initialDirection = t1.currentDirection,
        selection = X.TextSelection$(start, end),
        t2 = this.$this,
        t3 = H.interceptedTypeCheck(K.RenderObject.prototype.get$constraints.call(t2), "$isBoxConstraints"),
        t4 = t3.minWidth;
      t2._layoutText$2$maxWidth$minWidth(t3.maxWidth, t4);
      rects = t2._textPainter._text_painter$_paragraph._getBoxesForRange$4(selection.start, selection.end, 0, 0);
      for (t2 = rects.length, rect = null, _i = 0; _i < rects.length; rects.length === t2 || (0, H.throwConcurrentModificationError)(rects), ++_i) {
        textBox = rects[_i];
        if (rect == null)
          rect = new Q.Rect(textBox.left, textBox.top, textBox.right, textBox.bottom);
        rect = rect.expandToInclude$1(new Q.Rect(textBox.left, textBox.top, textBox.right, textBox.bottom));
        t1.currentDirection = textBox.direction;
      }
      t2 = rect.left;
      t2.toString;
      t2 = Math.floor(t2);
      t3 = rect.top;
      t3.toString;
      t3 = Math.floor(t3);
      t4 = rect.right;
      t4.toString;
      t4 = Math.ceil(t4);
      t5 = rect.bottom;
      t5.toString;
      t1.currentRect = new Q.Rect(t2 - 4, t3 - 4, t4 + 4, Math.ceil(t5) + 4);
      t5 = new A.SemanticsConfiguration(P.LinkedHashMap_LinkedHashMap$_empty(Q.SemanticsAction, {func: 1, ret: -1, args: [,]}), P.LinkedHashMap_LinkedHashMap$_empty(A.CustomSemanticsAction, {func: 1, ret: -1}));
      t5._sortKey = new A.OrdinalSortKey(++t1.order, null);
      t5._hasBeenAnnotated = true;
      t5._semantics$_textDirection = initialDirection;
      t5._label = C.JSString_methods.substring$2(this.rawLabel, start, end);
      return t5;
    },
    $signature: 117
  };
  L.RenderPerformanceOverlay.prototype = {
    set$optionsMask: function(value) {
      if (value === this._optionsMask)
        return;
      this._optionsMask = value;
      this.markNeedsPaint$0();
    },
    set$rasterizerThreshold: function(value) {
      if (value === this._rasterizerThreshold)
        return;
      this._rasterizerThreshold = value;
      this.markNeedsPaint$0();
    },
    get$sizedByParent: function() {
      return true;
    },
    get$alwaysNeedsCompositing: function() {
      return true;
    },
    get$_intrinsicHeight: function() {
      var t1 = this._optionsMask,
        result = (t1 | 1) >>> 0 > 0 || (t1 | 2) >>> 0 > 0 ? 80 : 0;
      return (t1 | 4) >>> 0 > 0 || (t1 | 8) >>> 0 > 0 ? result + 80 : result;
    },
    performResize$0: function() {
      this._size = H.interceptedTypeCheck(K.RenderObject.prototype.get$constraints.call(this), "$isBoxConstraints").constrain$1(new Q.Size(1 / 0, this.get$_intrinsicHeight()));
    },
    paint$2: function(context, offset) {
      var t5, t6,
        t1 = offset._dx,
        t2 = offset._dy,
        t3 = this._size,
        t4 = t3._dx;
      t3 = t3._dy;
      if (typeof t1 !== "number")
        return t1.$add();
      if (typeof t4 !== "number")
        return H.iae(t4);
      if (typeof t2 !== "number")
        return t2.$add();
      if (typeof t3 !== "number")
        return H.iae(t3);
      t5 = this._optionsMask;
      t6 = this._rasterizerThreshold;
      context.stopRecordingIfNeeded$0();
      context.appendLayer$1(new T.PerformanceOverlayLayer(new Q.Rect(t1, t2, t1 + t4, t2 + t3), t5, t6, false, false));
    }
  };
  E.RenderProxyBox.prototype = {
    $asRenderObjectWithChildMixin: function() {
      return [S.RenderBox];
    }
  };
  E.RenderProxyBoxMixin.prototype = {
    setupParentData$1: function(child) {
      if (!(child.parentData instanceof K.ParentData))
        child.parentData = new K.ParentData();
    },
    performLayout$0: function() {
      var _this = this,
        t1 = _this.RenderObjectWithChildMixin__child;
      if (t1 != null) {
        t1.layout$2$parentUsesSize(_this.get$constraints(), true);
        t1 = _this.RenderObjectWithChildMixin__child;
        _this._size = t1.get$size(t1);
      } else
        _this.performResize$0();
    },
    hitTestChildren$2$position: function(result, position) {
      var t1 = this.RenderObjectWithChildMixin__child;
      t1 = t1 == null ? null : t1.hitTest$2$position(result, position);
      return t1 === true;
    },
    applyPaintTransform$2: function(child, transform) {
    },
    paint$2: function(context, offset) {
      var t1 = this.RenderObjectWithChildMixin__child;
      if (t1 != null)
        context.paintChild$2(t1, offset);
    }
  };
  E.HitTestBehavior.prototype = {
    toString$0: function(_) {
      return this._proxy_box$_name;
    }
  };
  E.RenderProxyBoxWithHitTestBehavior.prototype = {
    hitTest$2$position: function(result, position) {
      var hitTarget, _this = this;
      if (_this._size.contains$1(0, position)) {
        hitTarget = _this.hitTestChildren$2$position(result, position) || _this.behavior === C.HitTestBehavior_1;
        if (hitTarget || _this.behavior === C.HitTestBehavior_2)
          C.JSArray_methods.add$1(result._path, new S.BoxHitTestEntry(position, _this));
      } else
        hitTarget = false;
      return hitTarget;
    },
    hitTestSelf$1: function(position) {
      return this.behavior === C.HitTestBehavior_1;
    }
  };
  E.RenderConstrainedBox.prototype = {
    set$additionalConstraints: function(value) {
      if (J.$eq$(this._additionalConstraints, value))
        return;
      this._additionalConstraints = value;
      this.markNeedsLayout$0();
    },
    performLayout$0: function() {
      var _this = this,
        t1 = _this.RenderObjectWithChildMixin__child,
        t2 = _this._additionalConstraints;
      if (t1 != null) {
        t1.layout$2$parentUsesSize(t2.enforce$1(H.interceptedTypeCheck(K.RenderObject.prototype.get$constraints.call(_this), "$isBoxConstraints")), true);
        _this._size = _this.RenderObjectWithChildMixin__child._size;
      } else
        _this._size = t2.enforce$1(H.interceptedTypeCheck(K.RenderObject.prototype.get$constraints.call(_this), "$isBoxConstraints")).constrain$1(C.Size_0_0);
    }
  };
  E.RenderLimitedBox.prototype = {
    set$maxWidth: function(_, value) {
      if (this._maxWidth === value)
        return;
      this._maxWidth = value;
      this.markNeedsLayout$0();
    },
    set$maxHeight: function(_, value) {
      if (this._maxHeight === value)
        return;
      this._maxHeight = value;
      this.markNeedsLayout$0();
    },
    _limitConstraints$1: function(constraints) {
      var t3, t4,
        t1 = constraints.minWidth,
        t2 = constraints.maxWidth;
      if (typeof t2 !== "number")
        return t2.$lt();
      if (!(t2 < 1 / 0))
        t2 = C.JSInt_methods.clamp$2(this._maxWidth, t1, t2);
      t3 = constraints.minHeight;
      t4 = constraints.maxHeight;
      if (typeof t4 !== "number")
        return t4.$lt();
      if (!(t4 < 1 / 0))
        t4 = C.JSInt_methods.clamp$2(this._maxHeight, t3, t4);
      return new S.BoxConstraints(t1, t2, t3, t4);
    },
    performLayout$0: function() {
      var _this = this,
        t1 = _this.RenderObjectWithChildMixin__child;
      if (t1 != null) {
        t1.layout$2$parentUsesSize(_this._limitConstraints$1(H.interceptedTypeCheck(K.RenderObject.prototype.get$constraints.call(_this), "$isBoxConstraints")), true);
        _this._size = H.interceptedTypeCheck(K.RenderObject.prototype.get$constraints.call(_this), "$isBoxConstraints").constrain$1(_this.RenderObjectWithChildMixin__child._size);
      } else
        _this._size = _this._limitConstraints$1(H.interceptedTypeCheck(K.RenderObject.prototype.get$constraints.call(_this), "$isBoxConstraints")).constrain$1(C.Size_0_0);
    }
  };
  E.RenderOpacity.prototype = {
    get$alwaysNeedsCompositing: function() {
      if (this.RenderObjectWithChildMixin__child != null) {
        var t1 = this._proxy_box$_alpha;
        t1 = t1 !== 0 && t1 !== 255;
      } else
        t1 = false;
      return t1;
    },
    set$opacity: function(_, value) {
      var didNeedCompositing, t1, _this = this;
      if (_this._proxy_box$_opacity == value)
        return;
      didNeedCompositing = _this.get$alwaysNeedsCompositing();
      t1 = _this._proxy_box$_alpha;
      _this._proxy_box$_opacity = value;
      if (typeof value !== "number")
        return value.$mul();
      _this._proxy_box$_alpha = C.JSNumber_methods.round$0(value * 255);
      if (didNeedCompositing !== _this.get$alwaysNeedsCompositing())
        _this.markNeedsCompositingBitsUpdate$0();
      _this.markNeedsPaint$0();
      if (t1 !== 0 !== (_this._proxy_box$_alpha !== 0))
        _this.markNeedsSemanticsUpdate$0();
    },
    set$alwaysIncludeSemantics: function(value) {
      return;
    },
    paint$2: function(context, offset) {
      var t2,
        t1 = this.RenderObjectWithChildMixin__child;
      if (t1 != null) {
        t2 = this._proxy_box$_alpha;
        if (t2 === 0)
          return;
        if (t2 === 255) {
          context.paintChild$2(t1, offset);
          return;
        }
        context.pushLayer$3(new T.OpacityLayer(t2, offset), E.RenderProxyBoxMixin.prototype.get$paint.call(this), C.Offset_0_0);
      }
    },
    visitChildrenForSemantics$1: function(visitor) {
      var t1, t2;
      H.functionTypeCheck(visitor, {func: 1, ret: -1, args: [K.RenderObject]});
      t1 = this.RenderObjectWithChildMixin__child;
      if (t1 != null)
        t2 = this._proxy_box$_alpha !== 0 || false;
      else
        t2 = false;
      if (t2)
        visitor.call$1(t1);
    }
  };
  E.RenderAnimatedOpacity.prototype = {
    get$alwaysNeedsCompositing: function() {
      return this.RenderObjectWithChildMixin__child != null && H.boolConversionCheck(this._currentlyNeedsCompositing);
    },
    set$opacity: function(_, value) {
      var t1, _this = this;
      H.assertSubtype(value, "$isAnimation", [P.double], "$asAnimation");
      t1 = _this._proxy_box$_opacity;
      if (t1 == value)
        return;
      if (_this._node$_owner != null && t1 != null)
        t1.removeListener$1(0, _this.get$_updateOpacity());
      _this.set$_proxy_box$_opacity(value);
      if (_this._node$_owner != null)
        _this._proxy_box$_opacity.addListener$1(0, _this.get$_updateOpacity());
      _this._updateOpacity$0();
    },
    set$alwaysIncludeSemantics: function(value) {
      return;
    },
    attach$1: function(owner) {
      var _this = this;
      _this.super$_RenderProxyBox_RenderBox_RenderObjectWithChildMixin$attach(H.interceptedTypeCheck(owner, "$isPipelineOwner"));
      _this._proxy_box$_opacity.addListener$1(0, _this.get$_updateOpacity());
      _this._updateOpacity$0();
    },
    detach$0: function(_) {
      this._proxy_box$_opacity.removeListener$1(0, this.get$_updateOpacity());
      this.super$_RenderProxyBox_RenderBox_RenderObjectWithChildMixin$detach(0);
    },
    _updateOpacity$0: function() {
      var didNeedCompositing, _this = this,
        oldAlpha = _this._proxy_box$_alpha,
        t1 = _this._proxy_box$_opacity;
      t1 = _this._proxy_box$_alpha = C.JSNumber_methods.round$0(J.clamp$2$n(t1.get$value(t1), 0, 1) * 255);
      if (oldAlpha !== t1) {
        didNeedCompositing = _this._currentlyNeedsCompositing;
        t1 = t1 > 0 && t1 < 255;
        _this._currentlyNeedsCompositing = t1;
        if (_this.RenderObjectWithChildMixin__child != null && didNeedCompositing !== t1)
          _this.markNeedsCompositingBitsUpdate$0();
        _this.markNeedsPaint$0();
        if (oldAlpha === 0 || _this._proxy_box$_alpha === 0)
          _this.markNeedsSemanticsUpdate$0();
      }
    },
    paint$2: function(context, offset) {
      var t2,
        t1 = this.RenderObjectWithChildMixin__child;
      if (t1 != null) {
        t2 = this._proxy_box$_alpha;
        if (t2 === 0)
          return;
        if (t2 === 255) {
          context.paintChild$2(t1, offset);
          return;
        }
        context.pushLayer$3(new T.OpacityLayer(t2, offset), E.RenderProxyBoxMixin.prototype.get$paint.call(this), C.Offset_0_0);
      }
    },
    visitChildrenForSemantics$1: function(visitor) {
      var t1, t2;
      H.functionTypeCheck(visitor, {func: 1, ret: -1, args: [K.RenderObject]});
      t1 = this.RenderObjectWithChildMixin__child;
      if (t1 != null)
        t2 = this._proxy_box$_alpha !== 0 || false;
      else
        t2 = false;
      if (t2)
        visitor.call$1(t1);
    },
    set$_proxy_box$_opacity: function(_opacity) {
      this._proxy_box$_opacity = H.assertSubtype(_opacity, "$isAnimation", [P.double], "$asAnimation");
    }
  };
  E.CustomClipper.prototype = {
    toString$0: function(_) {
      return new H.TypeImpl(H.getRti(this)).toString$0(0);
    }
  };
  E.ShapeBorderClipper.prototype = {
    shouldReclip$1: function(oldClipper) {
      H.assertSubtype(oldClipper, "$isCustomClipper", [Q.Path], "$asCustomClipper");
      if (!new H.TypeImpl(H.getRti(oldClipper)).$eq(0, C.Type_ShapeBorderClipper_QWG))
        return true;
      return !J.$eq$(oldClipper.shape, this.shape) || oldClipper.textDirection != this.textDirection;
    },
    $asCustomClipper: function() {
      return [Q.Path];
    }
  };
  E._RenderCustomClip.prototype = {
    set$clipper: function(newClipper) {
      var t1, _this = this;
      H.assertSubtype(newClipper, "$isCustomClipper", [H.getRuntimeTypeArgument(_this, "_RenderCustomClip", 0)], "$asCustomClipper");
      t1 = _this._clipper;
      if (t1 == newClipper)
        return;
      _this.set$_clipper(newClipper);
      if (newClipper == null || t1 == null || !new H.TypeImpl(H.getRti(newClipper)).$eq(0, new H.TypeImpl(H.getRti(t1))) || newClipper.shouldReclip$1(t1))
        _this._markNeedsClip$0();
      _this._node$_owner != null;
    },
    attach$1: function(owner) {
      this.super$_RenderProxyBox_RenderBox_RenderObjectWithChildMixin$attach(H.interceptedTypeCheck(owner, "$isPipelineOwner"));
    },
    detach$0: function(_) {
      this.super$_RenderProxyBox_RenderBox_RenderObjectWithChildMixin$detach(0);
    },
    _markNeedsClip$0: function() {
      this.set$_clip(0, null);
      this.markNeedsPaint$0();
      this.markNeedsSemanticsUpdate$0();
    },
    performLayout$0: function() {
      var _this = this,
        oldSize = _this._size;
      oldSize = oldSize != null ? oldSize : null;
      _this.super$RenderProxyBoxMixin$performLayout();
      if (!J.$eq$(oldSize, _this._size))
        _this.set$_clip(0, null);
    },
    _updateClip$0: function() {
      var t1, t2, t3, t4, _this = this;
      if (_this._clip == null) {
        t1 = _this._clipper;
        if (t1 == null)
          t1 = null;
        else {
          t2 = _this._size;
          t3 = t1.shape;
          t4 = t2._dx;
          t2 = t2._dy;
          if (typeof t4 !== "number")
            return H.iae(t4);
          if (typeof t2 !== "number")
            return H.iae(t2);
          t1 = t3.getOuterPath$2$textDirection(new Q.Rect(0, 0, 0 + t4, 0 + t2), t1.textDirection);
        }
        _this.set$_clip(0, t1 == null ? _this.get$_defaultClip() : t1);
      }
    },
    describeApproximatePaintClip$1: function(child) {
      var t1, t2;
      if (this._clipper == null)
        t1 = null;
      else {
        t1 = this._size;
        t2 = t1._dx;
        t1 = t1._dy;
        if (typeof t2 !== "number")
          return H.iae(t2);
        if (typeof t1 !== "number")
          return H.iae(t1);
        t1 = new Q.Rect(0, 0, 0 + t2, 0 + t1);
      }
      if (t1 == null) {
        t1 = this._size;
        t2 = t1._dx;
        t1 = t1._dy;
        if (typeof t2 !== "number")
          return H.iae(t2);
        if (typeof t1 !== "number")
          return H.iae(t1);
        t1 = new Q.Rect(0, 0, 0 + t2, 0 + t1);
      }
      return t1;
    },
    set$_clipper: function(_clipper) {
      this._clipper = H.assertSubtype(_clipper, "$isCustomClipper", [H.getRuntimeTypeArgument(this, "_RenderCustomClip", 0)], "$asCustomClipper");
    },
    set$_clip: function(_, _clip) {
      this._clip = H.assertSubtypeOfRuntimeType(_clip, H.getRuntimeTypeArgument(this, "_RenderCustomClip", 0));
    }
  };
  E.RenderClipPath.prototype = {
    get$_defaultClip: function() {
      var t1 = new Q.Path(H.setRuntimeTypeInfo([], [T.Subpath]), C.PathFillType_0),
        t2 = this._size,
        t3 = t2._dx;
      t2 = t2._dy;
      if (typeof t3 !== "number")
        return H.iae(t3);
      if (typeof t2 !== "number")
        return H.iae(t2);
      t1.addRect$1(new Q.Rect(0, 0, 0 + t3, 0 + t2));
      return t1;
    },
    hitTest$2$position: function(result, position) {
      var _this = this;
      if (_this._clipper != null) {
        _this._updateClip$0();
        if (!H.boolConversionCheck(_this._clip.contains$1(0, position)))
          return false;
      }
      return _this.super$RenderBox$hitTest(result, position);
    },
    paint$2: function(context, offset) {
      var t1, t2, t3, _this = this;
      if (_this.RenderObjectWithChildMixin__child != null) {
        _this._updateClip$0();
        t1 = _this._needsCompositing;
        t2 = _this._size;
        t3 = t2._dx;
        t2 = t2._dy;
        if (typeof t3 !== "number")
          return H.iae(t3);
        if (typeof t2 !== "number")
          return H.iae(t2);
        context.pushClipPath$6$clipBehavior(t1, offset, new Q.Rect(0, 0, 0 + t3, 0 + t2), _this._clip, E.RenderProxyBoxMixin.prototype.get$paint.call(_this), _this.clipBehavior);
      }
    },
    $asRenderObjectWithChildMixin: function() {
      return [S.RenderBox];
    },
    $as_RenderCustomClip: function() {
      return [Q.Path];
    }
  };
  E._RenderPhysicalModelBase.prototype = {
    set$elevation: function(_, value) {
      var didNeedCompositing, _this = this,
        t1 = _this._proxy_box$_elevation;
      if (t1 == value)
        return;
      didNeedCompositing = t1 !== 0 && T.defaultTargetPlatform() === C.TargetPlatform_1;
      _this._proxy_box$_elevation = value;
      if (didNeedCompositing !== (value !== 0 && T.defaultTargetPlatform() === C.TargetPlatform_1))
        _this.markNeedsCompositingBitsUpdate$0();
      _this.markNeedsPaint$0();
    },
    set$shadowColor: function(_, value) {
      if (J.$eq$(this._proxy_box$_shadowColor, value))
        return;
      this._proxy_box$_shadowColor = value;
      this.markNeedsPaint$0();
    },
    set$color: function(_, value) {
      if (J.$eq$(this._proxy_box$_color, value))
        return;
      this._proxy_box$_color = value;
      this.markNeedsPaint$0();
    },
    get$alwaysNeedsCompositing: function() {
      return this._proxy_box$_elevation !== 0 && T.defaultTargetPlatform() === C.TargetPlatform_1;
    },
    describeSemanticsConfiguration$1: function(config) {
      this.super$RenderObject$describeSemanticsConfiguration(config);
      config.set$elevation(0, this._proxy_box$_elevation);
    }
  };
  E.RenderPhysicalModel.prototype = {
    set$shape: function(_, value) {
      if (this._proxy_box$_shape === value)
        return;
      this._proxy_box$_shape = value;
      this._markNeedsClip$0();
    },
    set$borderRadius: function(_, value) {
      if (J.$eq$(this._proxy_box$_borderRadius, value))
        return;
      this._proxy_box$_borderRadius = value;
      this._markNeedsClip$0();
    },
    get$_defaultClip: function() {
      var t1, t2, t3, t4, _this = this;
      switch (_this._proxy_box$_shape) {
        case C.BoxShape_0:
          t1 = _this._proxy_box$_borderRadius;
          if (t1 == null)
            t1 = C.BorderRadius_tLn;
          t2 = _this._size;
          t3 = t2._dx;
          t2 = t2._dy;
          if (typeof t3 !== "number")
            return H.iae(t3);
          if (typeof t2 !== "number")
            return H.iae(t2);
          return t1.toRRect$1(new Q.Rect(0, 0, 0 + t3, 0 + t2));
        case C.BoxShape_1:
          t1 = _this._size;
          t2 = t1._dx;
          t1 = t1._dy;
          if (typeof t2 !== "number")
            return H.iae(t2);
          t2 = 0 + t2;
          if (typeof t1 !== "number")
            return H.iae(t1);
          t1 = 0 + t1;
          t3 = (t2 - 0) / 2;
          t4 = (t1 - 0) / 2;
          return new Q.RRect(0, 0, t2, t1, t3, t4, t3, t4, t3, t4, t3, t4);
      }
      return;
    },
    hitTest$2$position: function(result, position) {
      var _this = this;
      if (_this._clipper != null) {
        _this._updateClip$0();
        if (!_this._clip.contains$1(0, position))
          return false;
      }
      return _this.super$RenderBox$hitTest(result, position);
    },
    paint$2: function(context, offset) {
      var offsetRRect, offsetBounds, offsetRRectAsPath, t1, canvas, _this = this;
      if (_this.RenderObjectWithChildMixin__child != null) {
        _this._updateClip$0();
        offsetRRect = _this._clip.shift$1(offset);
        offsetBounds = new Q.Rect(offsetRRect.left, offsetRRect.top, offsetRRect.right, offsetRRect.bottom);
        offsetRRectAsPath = new Q.Path(H.setRuntimeTypeInfo([], [T.Subpath]), C.PathFillType_0);
        offsetRRectAsPath.addRRect$1(offsetRRect);
        if (H.boolConversionCheck(_this._needsCompositing)) {
          t1 = _this._proxy_box$_elevation;
          context.pushLayer$4$childPaintBounds(T.PhysicalModelLayer$(_this.clipBehavior, offsetRRectAsPath, _this._proxy_box$_color, t1, _this._proxy_box$_shadowColor), E.RenderProxyBoxMixin.prototype.get$paint.call(_this), offset, offsetBounds);
        } else {
          canvas = context.get$canvas(context);
          if (_this._proxy_box$_elevation !== 0 && true) {
            canvas.drawRect$2(offsetBounds.inflate$1(20), $.$get$_RenderPhysicalModelBase__transparentPaint());
            canvas.drawShadow$4(offsetRRectAsPath, _this._proxy_box$_shadowColor, _this._proxy_box$_elevation, (4278190080 & _this._proxy_box$_color._value) >>> 24 !== 255);
          }
          t1 = new Q.Paint(new Q.PaintData());
          t1.set$color(0, _this._proxy_box$_color);
          canvas.drawRRect$2(offsetRRect, t1);
          context.clipRRectAndPaint$4(offsetRRect, _this.clipBehavior, offsetBounds, new E.RenderPhysicalModel_paint_closure(_this, context, offset));
        }
      }
    },
    $asRenderObjectWithChildMixin: function() {
      return [S.RenderBox];
    },
    $as_RenderCustomClip: function() {
      return [Q.RRect];
    },
    $as_RenderPhysicalModelBase: function() {
      return [Q.RRect];
    }
  };
  E.RenderPhysicalModel_paint_closure.prototype = {
    call$0: function() {
      return this.$this.super$RenderProxyBoxMixin$paint(this.context, this.offset);
    },
    $signature: 1
  };
  E.RenderPhysicalShape.prototype = {
    get$_defaultClip: function() {
      var t1 = new Q.Path(H.setRuntimeTypeInfo([], [T.Subpath]), C.PathFillType_0),
        t2 = this._size,
        t3 = t2._dx;
      t2 = t2._dy;
      if (typeof t3 !== "number")
        return H.iae(t3);
      if (typeof t2 !== "number")
        return H.iae(t2);
      t1.addRect$1(new Q.Rect(0, 0, 0 + t3, 0 + t2));
      return t1;
    },
    hitTest$2$position: function(result, position) {
      var _this = this;
      if (_this._clipper != null) {
        _this._updateClip$0();
        if (!H.boolConversionCheck(_this._clip.contains$1(0, position)))
          return false;
      }
      return _this.super$RenderBox$hitTest(result, position);
    },
    paint$2: function(context, offset) {
      var t1, t2, t3, t4, offsetBounds, offsetPath, canvas, _this = this;
      if (_this.RenderObjectWithChildMixin__child != null) {
        _this._updateClip$0();
        t1 = _this._size;
        t2 = offset._dx;
        t3 = offset._dy;
        t4 = t1._dx;
        t1 = t1._dy;
        if (typeof t2 !== "number")
          return t2.$add();
        if (typeof t4 !== "number")
          return H.iae(t4);
        if (typeof t3 !== "number")
          return t3.$add();
        if (typeof t1 !== "number")
          return H.iae(t1);
        offsetBounds = new Q.Rect(t2, t3, t2 + t4, t3 + t1);
        offsetPath = _this._clip.shift$1(offset);
        if (H.boolConversionCheck(_this._needsCompositing)) {
          t1 = _this._proxy_box$_elevation;
          context.pushLayer$4$childPaintBounds(T.PhysicalModelLayer$(_this.clipBehavior, offsetPath, _this._proxy_box$_color, t1, _this._proxy_box$_shadowColor), E.RenderProxyBoxMixin.prototype.get$paint.call(_this), offset, offsetBounds);
        } else {
          canvas = context.get$canvas(context);
          if (_this._proxy_box$_elevation !== 0 && true) {
            canvas.drawRect$2(offsetBounds.inflate$1(20), $.$get$_RenderPhysicalModelBase__transparentPaint());
            canvas.drawShadow$4(offsetPath, _this._proxy_box$_shadowColor, _this._proxy_box$_elevation, (4278190080 & _this._proxy_box$_color._value) >>> 24 !== 255);
          }
          t1 = new Q.Paint(new Q.PaintData());
          t1.set$color(0, _this._proxy_box$_color);
          t1.set$style(0, C.PaintingStyle_0);
          canvas.drawPath$2(offsetPath, t1);
          context.clipPathAndPaint$4(offsetPath, _this.clipBehavior, offsetBounds, new E.RenderPhysicalShape_paint_closure(_this, context, offset));
        }
      }
    },
    $asRenderObjectWithChildMixin: function() {
      return [S.RenderBox];
    },
    $as_RenderCustomClip: function() {
      return [Q.Path];
    },
    $as_RenderPhysicalModelBase: function() {
      return [Q.Path];
    }
  };
  E.RenderPhysicalShape_paint_closure.prototype = {
    call$0: function() {
      return this.$this.super$RenderProxyBoxMixin$paint(this.context, this.offset);
    },
    $signature: 1
  };
  E.DecorationPosition.prototype = {
    toString$0: function(_) {
      return this._proxy_box$_name;
    }
  };
  E.RenderDecoratedBox.prototype = {
    set$decoration: function(value) {
      var t1, _this = this;
      if (J.$eq$(value, _this._proxy_box$_decoration))
        return;
      t1 = _this._painter;
      if (t1 != null)
        t1.dispose$0();
      _this._painter = null;
      _this._proxy_box$_decoration = value;
      _this.markNeedsPaint$0();
    },
    set$position: function(_, value) {
      if (value === this._proxy_box$_position)
        return;
      this._proxy_box$_position = value;
      this.markNeedsPaint$0();
    },
    set$configuration: function(value) {
      if (value.$eq(0, this._configuration))
        return;
      this._configuration = value;
      this.markNeedsPaint$0();
    },
    detach$0: function(_) {
      var _this = this,
        t1 = _this._painter;
      if (t1 != null)
        t1.dispose$0();
      _this._painter = null;
      _this.super$_RenderProxyBox_RenderBox_RenderObjectWithChildMixin$detach(0);
      _this.markNeedsPaint$0();
    },
    hitTestSelf$1: function(position) {
      return this._proxy_box$_decoration.hitTest$3$textDirection(this._size, position, this._configuration.textDirection);
    },
    paint$2: function(context, offset) {
      var t2, t3, filledConfiguration, _this = this,
        t1 = _this._painter;
      if (t1 == null)
        t1 = _this._painter = _this._proxy_box$_decoration.createBoxPainter$1(_this.get$markNeedsPaint());
      t2 = _this._configuration;
      t3 = _this._size;
      if (t3 == null)
        t3 = t2.size;
      filledConfiguration = new M.ImageConfiguration(t2.bundle, t2.devicePixelRatio, t2.locale, t2.textDirection, t3, t2.platform);
      if (_this._proxy_box$_position === C.DecorationPosition_0) {
        t1.paint$3(context.get$canvas(context), offset, filledConfiguration);
        if (_this._proxy_box$_decoration.get$isComplex())
          context.setIsComplexHint$0();
      }
      _this.super$RenderProxyBoxMixin$paint(context, offset);
      if (_this._proxy_box$_position === C.DecorationPosition_1) {
        _this._painter.paint$3(context.get$canvas(context), offset, filledConfiguration);
        if (_this._proxy_box$_decoration.get$isComplex())
          context.setIsComplexHint$0();
      }
    }
  };
  E.RenderTransform.prototype = {
    set$origin: function(_, value) {
      return;
    },
    set$alignment: function(value) {
      var _this = this;
      if (J.$eq$(_this._proxy_box$_alignment, value))
        return;
      _this._proxy_box$_alignment = value;
      _this.markNeedsPaint$0();
      _this.markNeedsSemanticsUpdate$0();
    },
    set$textDirection: function(value) {
      var _this = this;
      if (_this._proxy_box$_textDirection == value)
        return;
      _this._proxy_box$_textDirection = value;
      _this.markNeedsPaint$0();
      _this.markNeedsSemanticsUpdate$0();
    },
    set$transform: function(_, value) {
      var t1, _this = this;
      if (J.$eq$(_this._transform, value))
        return;
      t1 = new E.Matrix4(new Float64Array(16));
      t1.setFrom$1(value);
      _this._transform = t1;
      _this.markNeedsPaint$0();
      _this.markNeedsSemanticsUpdate$0();
    },
    get$_effectiveTransform: function() {
      var result, t1, t2, centerX, centerY, translation, _this = this,
        resolvedAlignment = _this._proxy_box$_alignment;
      if (resolvedAlignment == null)
        resolvedAlignment = null;
      if (resolvedAlignment == null)
        return _this._transform;
      result = new E.Matrix4(new Float64Array(16));
      result.setIdentity$0();
      t1 = _this._size;
      t2 = t1._dx;
      if (typeof t2 !== "number")
        return t2.$div();
      centerX = t2 / 2;
      t1 = t1._dy;
      if (typeof t1 !== "number")
        return t1.$div();
      centerY = t1 / 2;
      t1 = resolvedAlignment.x;
      if (typeof t1 !== "number")
        return t1.$mul();
      t1 = centerX + t1 * centerX;
      t2 = resolvedAlignment.y;
      if (typeof t2 !== "number")
        return t2.$mul();
      t2 = centerY + t2 * centerY;
      translation = new Q.Offset(t1, t2);
      result.translate$2(0, t1, t2);
      result.multiply$1(0, _this._transform);
      t1 = translation._dx;
      if (typeof t1 !== "number")
        return t1.$negate();
      t2 = translation._dy;
      if (typeof t2 !== "number")
        return t2.$negate();
      result.translate$2(0, -t1, -t2);
      return result;
    },
    hitTest$2$position: function(result, position) {
      return this.hitTestChildren$2$position(result, position);
    },
    hitTestChildren$2$position: function(result, position) {
      var inverse;
      if (this.transformHitTests) {
        inverse = E.Matrix4_tryInvert(this.get$_effectiveTransform());
        if (inverse == null)
          return false;
        position = T.MatrixUtils_transformPoint(inverse, position);
      }
      return this.super$RenderProxyBoxMixin$hitTestChildren(result, position);
    },
    get$alwaysNeedsCompositing: function() {
      return true;
    },
    paint$2: function(context, offset) {
      var transform, childOffset, t1, t2, t3, t4, effectiveTransform, _this = this;
      if (_this.RenderObjectWithChildMixin__child != null) {
        transform = _this.get$_effectiveTransform();
        childOffset = T.MatrixUtils_getAsTranslation(transform);
        if (childOffset == null) {
          t1 = _this._needsCompositing;
          t2 = E.RenderProxyBoxMixin.prototype.get$paint.call(_this);
          t3 = offset._dx;
          t4 = offset._dy;
          effectiveTransform = E.Matrix4_Matrix4$translationValues0(t3, t4, 0);
          effectiveTransform.multiply$1(0, transform);
          if (typeof t3 !== "number")
            return t3.$negate();
          if (typeof t4 !== "number")
            return t4.$negate();
          effectiveTransform.translate$2(0, -t3, -t4);
          if (H.boolConversionCheck(t1))
            context.pushLayer$4$childPaintBounds(new T.TransformLayer(effectiveTransform, C.Offset_0_0), t2, offset, T.MatrixUtils_inverseTransformRect(effectiveTransform, context.estimatedBounds));
          else {
            t1 = context.get$canvas(context);
            t1.save$0(0);
            t1.transform$1(0, effectiveTransform._m4storage);
            t2.call$2(context, offset);
            context.get$canvas(context).restore$0(0);
          }
        } else
          _this.super$RenderProxyBoxMixin$paint(context, offset.$add(0, childOffset));
      }
    },
    applyPaintTransform$2: function(child, transform) {
      H.interceptedTypeCheck(child, "$isRenderBox");
      transform.multiply$1(0, this.get$_effectiveTransform());
    }
  };
  E.RenderFractionalTranslation.prototype = {
    set$translation: function(value) {
      if (J.$eq$(this._translation, value))
        return;
      this._translation = value;
      this.markNeedsPaint$0();
    },
    hitTest$2$position: function(result, position) {
      return this.hitTestChildren$2$position(result, position);
    },
    hitTestChildren$2$position: function(result, position) {
      var t1, t2, t3, t4, t5, t6, _this = this;
      if (_this.transformHitTests) {
        t1 = position._dx;
        t2 = _this._translation;
        t3 = t2._dx;
        t4 = _this._size;
        t5 = t4._dx;
        if (typeof t3 !== "number")
          return t3.$mul();
        if (typeof t5 !== "number")
          return H.iae(t5);
        if (typeof t1 !== "number")
          return t1.$sub();
        t6 = position._dy;
        t2 = t2._dy;
        t4 = t4._dy;
        if (typeof t2 !== "number")
          return t2.$mul();
        if (typeof t4 !== "number")
          return H.iae(t4);
        if (typeof t6 !== "number")
          return t6.$sub();
        position = new Q.Offset(t1 - t3 * t5, t6 - t2 * t4);
      }
      return _this.super$RenderProxyBoxMixin$hitTestChildren(result, position);
    },
    paint$2: function(context, offset) {
      var t1, t2, t3, t4, t5, t6, _this = this;
      if (_this.RenderObjectWithChildMixin__child != null) {
        t1 = offset._dx;
        t2 = _this._translation;
        t3 = t2._dx;
        t4 = _this._size;
        t5 = t4._dx;
        if (typeof t3 !== "number")
          return t3.$mul();
        if (typeof t5 !== "number")
          return H.iae(t5);
        if (typeof t1 !== "number")
          return t1.$add();
        t6 = offset._dy;
        t2 = t2._dy;
        t4 = t4._dy;
        if (typeof t2 !== "number")
          return t2.$mul();
        if (typeof t4 !== "number")
          return H.iae(t4);
        if (typeof t6 !== "number")
          return t6.$add();
        _this.super$RenderProxyBoxMixin$paint(context, new Q.Offset(t1 + t3 * t5, t6 + t2 * t4));
      }
    },
    applyPaintTransform$2: function(child, transform) {
      var t1, t2, t3, t4;
      H.interceptedTypeCheck(child, "$isRenderBox");
      t1 = this._translation;
      t2 = t1._dx;
      t3 = this._size;
      t4 = t3._dx;
      if (typeof t2 !== "number")
        return t2.$mul();
      if (typeof t4 !== "number")
        return H.iae(t4);
      t1 = t1._dy;
      t3 = t3._dy;
      if (typeof t1 !== "number")
        return t1.$mul();
      if (typeof t3 !== "number")
        return H.iae(t3);
      transform.translate$2(0, t2 * t4, t1 * t3);
    }
  };
  E.RenderPointerListener.prototype = {
    attach$1: function(owner) {
      var t1;
      this.super$_RenderProxyBox_RenderBox_RenderObjectWithChildMixin$attach(H.interceptedTypeCheck(owner, "$isPipelineOwner"));
      t1 = this._hoverAnnotation;
      if (t1 != null)
        $.RendererBinding__instance.RendererBinding__mouseTracker.attachAnnotation$1(t1);
    },
    detach$0: function(_) {
      var t1 = this._hoverAnnotation;
      if (t1 != null)
        $.RendererBinding__instance.RendererBinding__mouseTracker.detachAnnotation$1(t1);
      this.super$_RenderProxyBox_RenderBox_RenderObjectWithChildMixin$detach(0);
    },
    paint$2: function(context, offset) {
      var t2, _this = this,
        t1 = _this._hoverAnnotation;
      if (t1 != null) {
        t2 = _this._size;
        context.pushLayer$3(new T.AnnotatedRegionLayer(t1, t2, offset, [Y.MouseTrackerAnnotation]), E.RenderProxyBoxMixin.prototype.get$paint.call(_this), offset);
      }
      _this.super$RenderProxyBoxMixin$paint(context, offset);
    },
    performResize$0: function() {
      var t1 = H.interceptedTypeCheck(K.RenderObject.prototype.get$constraints.call(this), "$isBoxConstraints");
      this._size = new Q.Size(C.JSInt_methods.clamp$2(1 / 0, t1.minWidth, t1.maxWidth), C.JSInt_methods.clamp$2(1 / 0, t1.minHeight, t1.maxHeight));
    },
    handleEvent$2: function($event, entry) {
      var _this = this,
        t1 = _this.onPointerDown;
      if (t1 != null && !!$event.$isPointerDownEvent)
        return t1.call$1($event);
      t1 = _this.onPointerUp;
      if (t1 != null && !!$event.$isPointerUpEvent)
        return t1.call$1($event);
      t1 = _this.onPointerCancel;
      if (t1 != null && !!$event.$isPointerCancelEvent)
        return t1.call$1($event);
      t1 = _this.onPointerSignal;
      if (t1 != null && !!$event.$isPointerSignalEvent)
        return t1.call$1($event);
    },
    set$onPointerDown: function(onPointerDown) {
      this.onPointerDown = H.functionTypeCheck(onPointerDown, {func: 1, ret: -1, args: [F.PointerDownEvent]});
    },
    set$onPointerMove: function(onPointerMove) {
      this.onPointerMove = H.functionTypeCheck(onPointerMove, {func: 1, ret: -1, args: [F.PointerMoveEvent]});
    },
    set$onPointerUp: function(onPointerUp) {
      this.onPointerUp = H.functionTypeCheck(onPointerUp, {func: 1, ret: -1, args: [F.PointerUpEvent]});
    },
    set$onPointerCancel: function(onPointerCancel) {
      this.onPointerCancel = H.functionTypeCheck(onPointerCancel, {func: 1, ret: -1, args: [F.PointerCancelEvent]});
    },
    set$onPointerSignal: function(onPointerSignal) {
      this.onPointerSignal = H.functionTypeCheck(onPointerSignal, {func: 1, ret: -1, args: [F.PointerSignalEvent]});
    }
  };
  E.RenderRepaintBoundary.prototype = {
    get$isRepaintBoundary: function() {
      return true;
    }
  };
  E.RenderIgnorePointer.prototype = {
    set$ignoring: function(value) {
      var _this = this;
      if (value === _this._ignoring)
        return;
      _this._ignoring = value;
      if (_this._ignoringSemantics == null)
        _this.markNeedsSemanticsUpdate$0();
    },
    set$ignoringSemantics: function(value) {
      var _this = this,
        oldEffectiveValue = _this._ignoringSemantics;
      if (value == oldEffectiveValue)
        return;
      if (oldEffectiveValue == null)
        oldEffectiveValue = _this._ignoring;
      _this._ignoringSemantics = value;
      if (oldEffectiveValue !== (value == null ? _this._ignoring : value))
        _this.markNeedsSemanticsUpdate$0();
    },
    hitTest$2$position: function(result, position) {
      return this._ignoring ? false : this.super$RenderBox$hitTest(result, position);
    },
    visitChildrenForSemantics$1: function(visitor) {
      var t1, t2;
      H.functionTypeCheck(visitor, {func: 1, ret: -1, args: [K.RenderObject]});
      t1 = this.RenderObjectWithChildMixin__child;
      if (t1 != null) {
        t2 = this._ignoringSemantics;
        t2 = !(t2 == null ? this._ignoring : t2);
      } else
        t2 = false;
      if (t2)
        visitor.call$1(t1);
    }
  };
  E.RenderOffstage.prototype = {
    set$offstage: function(value) {
      var _this = this;
      if (value === _this._proxy_box$_offstage)
        return;
      _this._proxy_box$_offstage = value;
      _this.markNeedsLayout$0();
      _this.markParentNeedsLayout$0();
    },
    computeDistanceToActualBaseline$1: function(baseline) {
      if (this._proxy_box$_offstage)
        return;
      return this.super$_RenderProxyBox_RenderBox_RenderObjectWithChildMixin_RenderProxyBoxMixin$computeDistanceToActualBaseline(baseline);
    },
    get$sizedByParent: function() {
      return this._proxy_box$_offstage;
    },
    performResize$0: function() {
      var t1 = H.interceptedTypeCheck(K.RenderObject.prototype.get$constraints.call(this), "$isBoxConstraints");
      this._size = new Q.Size(C.JSInt_methods.clamp$2(0, t1.minWidth, t1.maxWidth), C.JSInt_methods.clamp$2(0, t1.minHeight, t1.maxHeight));
    },
    performLayout$0: function() {
      var t1, _this = this;
      if (_this._proxy_box$_offstage) {
        t1 = _this.RenderObjectWithChildMixin__child;
        if (t1 != null)
          t1.layout$1(H.interceptedTypeCheck(K.RenderObject.prototype.get$constraints.call(_this), "$isBoxConstraints"));
      } else
        _this.super$RenderProxyBoxMixin$performLayout();
    },
    hitTest$2$position: function(result, position) {
      return !this._proxy_box$_offstage && this.super$RenderBox$hitTest(result, position);
    },
    paint$2: function(context, offset) {
      if (this._proxy_box$_offstage)
        return;
      this.super$RenderProxyBoxMixin$paint(context, offset);
    },
    visitChildrenForSemantics$1: function(visitor) {
      H.functionTypeCheck(visitor, {func: 1, ret: -1, args: [K.RenderObject]});
      if (this._proxy_box$_offstage)
        return;
      this.super$RenderObject$visitChildrenForSemantics(visitor);
    },
    debugDescribeChildren$0: function() {
      var t1 = this.RenderObjectWithChildMixin__child;
      if (t1 == null)
        return H.setRuntimeTypeInfo([], [Y.DiagnosticsNode]);
      return H.setRuntimeTypeInfo([new Y._DiagnosticableTreeNode(t1, "child", true, true, this._proxy_box$_offstage ? C.DiagnosticsTreeStyle_1 : C.DiagnosticsTreeStyle_0)], [Y.DiagnosticsNode]);
    }
  };
  E.RenderAbsorbPointer.prototype = {
    set$absorbing: function(value) {
      H.boolTypeCheck(value);
      if (this._absorbing == value)
        return;
      this._absorbing = value;
      this.markNeedsSemanticsUpdate$0();
    },
    set$ignoringSemantics: function(value) {
      return;
    },
    hitTest$2$position: function(result, position) {
      return H.boolConversionCheck(this._absorbing) ? this._size.contains$1(0, position) : this.super$RenderBox$hitTest(result, position);
    },
    visitChildrenForSemantics$1: function(visitor) {
      var t1, t2;
      H.functionTypeCheck(visitor, {func: 1, ret: -1, args: [K.RenderObject]});
      t1 = this.RenderObjectWithChildMixin__child;
      if (t1 != null) {
        t2 = this._absorbing;
        t2 = !H.boolConversionCheck(t2);
      } else
        t2 = false;
      if (t2)
        visitor.call$1(t1);
    }
  };
  E.RenderSemanticsGestureHandler.prototype = {
    set$validActions: function(value) {
      var t1 = Q.SemanticsAction;
      H.assertSubtype(value, "$isSet", [t1], "$asSet");
      if (S.setEquals(value, this._validActions, t1))
        return;
      this.set$_validActions(value);
      this.markNeedsSemanticsUpdate$0();
    },
    set$onTap: function(value) {
      var t1, _this = this;
      H.functionTypeCheck(value, {func: 1, ret: -1});
      if (J.$eq$(_this._proxy_box$_onTap, value))
        return;
      t1 = _this._proxy_box$_onTap;
      _this.set$_proxy_box$_onTap(value);
      if (value != null !== (t1 != null))
        _this.markNeedsSemanticsUpdate$0();
    },
    set$onLongPress: function(value) {
      var t1, _this = this;
      H.functionTypeCheck(value, {func: 1, ret: -1});
      if (J.$eq$(_this._proxy_box$_onLongPress, value))
        return;
      t1 = _this._proxy_box$_onLongPress;
      _this.set$_proxy_box$_onLongPress(value);
      if (value != null !== (t1 != null))
        _this.markNeedsSemanticsUpdate$0();
    },
    get$onHorizontalDragUpdate: function() {
      return this._onHorizontalDragUpdate;
    },
    set$onHorizontalDragUpdate: function(value) {
      var t1, _this = this;
      H.functionTypeCheck(value, {func: 1, ret: -1, args: [O.DragUpdateDetails]});
      if (J.$eq$(_this._onHorizontalDragUpdate, value))
        return;
      t1 = _this._onHorizontalDragUpdate;
      _this.set$_onHorizontalDragUpdate(value);
      if (value != null !== (t1 != null))
        _this.markNeedsSemanticsUpdate$0();
    },
    get$onVerticalDragUpdate: function() {
      return this._onVerticalDragUpdate;
    },
    set$onVerticalDragUpdate: function(value) {
      var t1, _this = this;
      H.functionTypeCheck(value, {func: 1, ret: -1, args: [O.DragUpdateDetails]});
      if (J.$eq$(_this._onVerticalDragUpdate, value))
        return;
      t1 = _this._onVerticalDragUpdate;
      _this.set$_onVerticalDragUpdate(value);
      if (value != null !== (t1 != null))
        _this.markNeedsSemanticsUpdate$0();
    },
    describeSemanticsConfiguration$1: function(config) {
      var t1, _this = this;
      _this.super$RenderObject$describeSemanticsConfiguration(config);
      if (_this._proxy_box$_onTap != null && _this._isValidAction$1(C.SemanticsAction_1)) {
        t1 = _this._proxy_box$_onTap;
        config.toString;
        H.functionTypeCheck(t1, {func: 1, ret: -1});
        config._addArgumentlessAction$2(C.SemanticsAction_1, t1);
        config.set$_onTap(t1);
      }
      if (_this._proxy_box$_onLongPress != null && _this._isValidAction$1(C.SemanticsAction_2)) {
        t1 = _this._proxy_box$_onLongPress;
        config.toString;
        H.functionTypeCheck(t1, {func: 1, ret: -1});
        config._addArgumentlessAction$2(C.SemanticsAction_2, t1);
        config.set$_onLongPress(t1);
      }
      if (_this._onHorizontalDragUpdate != null) {
        if (_this._isValidAction$1(C.SemanticsAction_8)) {
          config.toString;
          t1 = H.functionTypeCheck(_this.get$_performSemanticScrollRight(), {func: 1, ret: -1});
          config._addArgumentlessAction$2(C.SemanticsAction_8, t1);
          config.set$_semantics$_onScrollRight(t1);
        }
        if (_this._isValidAction$1(C.SemanticsAction_4)) {
          config.toString;
          t1 = H.functionTypeCheck(_this.get$_performSemanticScrollLeft(), {func: 1, ret: -1});
          config._addArgumentlessAction$2(C.SemanticsAction_4, t1);
          config.set$_semantics$_onScrollLeft(t1);
        }
      }
      if (_this._onVerticalDragUpdate != null) {
        if (_this._isValidAction$1(C.SemanticsAction_16)) {
          config.toString;
          t1 = H.functionTypeCheck(_this.get$_performSemanticScrollUp(), {func: 1, ret: -1});
          config._addArgumentlessAction$2(C.SemanticsAction_16, t1);
          config.set$_semantics$_onScrollUp(t1);
        }
        if (_this._isValidAction$1(C.SemanticsAction_32)) {
          config.toString;
          t1 = H.functionTypeCheck(_this.get$_performSemanticScrollDown(), {func: 1, ret: -1});
          config._addArgumentlessAction$2(C.SemanticsAction_32, t1);
          config.set$_semantics$_onScrollDown(t1);
        }
      }
    },
    _isValidAction$1: function(action) {
      var t1 = this._validActions;
      return t1 == null || t1.contains$1(0, action);
    },
    _performSemanticScrollLeft$0: function() {
      var t1, t2, primaryDelta, _this = this;
      if (_this._onHorizontalDragUpdate != null) {
        t1 = _this._size;
        t2 = t1._dx;
        if (typeof t2 !== "number")
          return t2.$mul();
        primaryDelta = t2 * -0.8;
        t1 = t1.center$1(C.Offset_0_0);
        _this.onHorizontalDragUpdate$1(new O.DragUpdateDetails(null, new Q.Offset(primaryDelta, 0), primaryDelta, T.MatrixUtils_transformPoint(_this.getTransformTo$1(0, null), t1)));
      }
    },
    _performSemanticScrollRight$0: function() {
      var t1, t2, primaryDelta, _this = this;
      if (_this._onHorizontalDragUpdate != null) {
        t1 = _this._size;
        t2 = t1._dx;
        if (typeof t2 !== "number")
          return t2.$mul();
        primaryDelta = t2 * 0.8;
        t1 = t1.center$1(C.Offset_0_0);
        _this.onHorizontalDragUpdate$1(new O.DragUpdateDetails(null, new Q.Offset(primaryDelta, 0), primaryDelta, T.MatrixUtils_transformPoint(_this.getTransformTo$1(0, null), t1)));
      }
    },
    _performSemanticScrollUp$0: function() {
      var t1, t2, primaryDelta, _this = this;
      if (_this._onVerticalDragUpdate != null) {
        t1 = _this._size;
        t2 = t1._dy;
        if (typeof t2 !== "number")
          return t2.$mul();
        primaryDelta = t2 * -0.8;
        t1 = t1.center$1(C.Offset_0_0);
        _this.onVerticalDragUpdate$1(new O.DragUpdateDetails(null, new Q.Offset(0, primaryDelta), primaryDelta, T.MatrixUtils_transformPoint(_this.getTransformTo$1(0, null), t1)));
      }
    },
    _performSemanticScrollDown$0: function() {
      var t1, t2, primaryDelta, _this = this;
      if (_this._onVerticalDragUpdate != null) {
        t1 = _this._size;
        t2 = t1._dy;
        if (typeof t2 !== "number")
          return t2.$mul();
        primaryDelta = t2 * 0.8;
        t1 = t1.center$1(C.Offset_0_0);
        _this.onVerticalDragUpdate$1(new O.DragUpdateDetails(null, new Q.Offset(0, primaryDelta), primaryDelta, T.MatrixUtils_transformPoint(_this.getTransformTo$1(0, null), t1)));
      }
    },
    set$_validActions: function(_validActions) {
      this._validActions = H.assertSubtype(_validActions, "$isSet", [Q.SemanticsAction], "$asSet");
    },
    set$_proxy_box$_onTap: function(_onTap) {
      this._proxy_box$_onTap = H.functionTypeCheck(_onTap, {func: 1, ret: -1});
    },
    set$_proxy_box$_onLongPress: function(_onLongPress) {
      this._proxy_box$_onLongPress = H.functionTypeCheck(_onLongPress, {func: 1, ret: -1});
    },
    set$_onHorizontalDragUpdate: function(_onHorizontalDragUpdate) {
      this._onHorizontalDragUpdate = H.functionTypeCheck(_onHorizontalDragUpdate, {func: 1, ret: -1, args: [O.DragUpdateDetails]});
    },
    set$_onVerticalDragUpdate: function(_onVerticalDragUpdate) {
      this._onVerticalDragUpdate = H.functionTypeCheck(_onVerticalDragUpdate, {func: 1, ret: -1, args: [O.DragUpdateDetails]});
    },
    onHorizontalDragUpdate$1: function(arg0) {
      return this.get$onHorizontalDragUpdate().call$1(arg0);
    },
    onVerticalDragUpdate$1: function(arg0) {
      return this.get$onVerticalDragUpdate().call$1(arg0);
    }
  };
  E.RenderSemanticsAnnotations.prototype = {
    set$container: function(value) {
      if (this._container === value)
        return;
      this._container = value;
      this.markNeedsSemanticsUpdate$0();
    },
    set$explicitChildNodes: function(value) {
      if (this._explicitChildNodes === value)
        return;
      this._explicitChildNodes = value;
      this.markNeedsSemanticsUpdate$0();
    },
    set$excludeSemantics: function(value) {
      return;
    },
    set$checked: function(_, value) {
      return;
    },
    set$enabled: function(_, value) {
      if (this._enabled == value)
        return;
      this._enabled = value;
      this.markNeedsSemanticsUpdate$0();
    },
    set$selected: function(_, value) {
      return;
    },
    set$button: function(_, value) {
      if (this._button == value)
        return;
      this._button = value;
      this.markNeedsSemanticsUpdate$0();
    },
    set$header: function(value) {
      return;
    },
    set$textField: function(value) {
      return;
    },
    set$focused: function(_, value) {
      return;
    },
    set$inMutuallyExclusiveGroup: function(value) {
      return;
    },
    set$obscured: function(value) {
      return;
    },
    set$multiline: function(_, value) {
      return;
    },
    set$scopesRoute: function(value) {
      if (this._scopesRoute == value)
        return;
      this._scopesRoute = value;
      this.markNeedsSemanticsUpdate$0();
    },
    set$namesRoute: function(value) {
      return;
    },
    set$hidden: function(_, value) {
      return;
    },
    set$image: function(_, value) {
      return;
    },
    set$liveRegion: function(value) {
      return;
    },
    set$toggled: function(value) {
      return;
    },
    set$label: function(_, value) {
      if (this._proxy_box$_label == value)
        return;
      this._proxy_box$_label = value;
      this.markNeedsSemanticsUpdate$0();
    },
    set$value: function(_, value) {
      return;
    },
    set$increasedValue: function(value) {
      return;
    },
    set$decreasedValue: function(value) {
      return;
    },
    set$hint: function(_, value) {
      return;
    },
    set$hintOverrides: function(value) {
      if (J.$eq$(this._proxy_box$_hintOverrides, value))
        return;
      this._proxy_box$_hintOverrides = value;
      this.markNeedsSemanticsUpdate$0();
    },
    set$textDirection: function(value) {
      if (this._proxy_box$_textDirection == value)
        return;
      this._proxy_box$_textDirection = value;
      this.markNeedsSemanticsUpdate$0();
    },
    set$sortKey: function(value) {
      return;
    },
    set$onTap: function(handler) {
      return;
    },
    get$onDismiss: function() {
      return this._onDismiss;
    },
    set$onDismiss: function(handler) {
      var t1, _this = this;
      H.functionTypeCheck(handler, {func: 1, ret: -1});
      if (J.$eq$(_this._onDismiss, handler))
        return;
      t1 = _this._onDismiss;
      _this.set$_onDismiss(handler);
      if (handler != null === (t1 != null))
        _this.markNeedsSemanticsUpdate$0();
    },
    set$onLongPress: function(handler) {
      return;
    },
    set$onScrollLeft: function(handler) {
      return;
    },
    set$onScrollRight: function(handler) {
      return;
    },
    set$onScrollUp: function(handler) {
      return;
    },
    set$onScrollDown: function(handler) {
      return;
    },
    set$onIncrease: function(handler) {
      return;
    },
    set$onDecrease: function(handler) {
      return;
    },
    set$onCopy: function(_, handler) {
      return;
    },
    set$onCut: function(_, handler) {
      return;
    },
    set$onPaste: function(_, handler) {
      return;
    },
    set$onMoveCursorForwardByCharacter: function(handler) {
      return;
    },
    set$onMoveCursorBackwardByCharacter: function(handler) {
      return;
    },
    set$onMoveCursorForwardByWord: function(handler) {
      return;
    },
    set$onMoveCursorBackwardByWord: function(handler) {
      return;
    },
    set$onSetSelection: function(handler) {
      return;
    },
    set$onDidGainAccessibilityFocus: function(handler) {
      return;
    },
    set$onDidLoseAccessibilityFocus: function(handler) {
      return;
    },
    set$customSemanticsActions: function(value) {
      return;
    },
    visitChildrenForSemantics$1: function(visitor) {
      H.functionTypeCheck(visitor, {func: 1, ret: -1, args: [K.RenderObject]});
      this.super$RenderObject$visitChildrenForSemantics(visitor);
    },
    describeSemanticsConfiguration$1: function(config) {
      var t1, _this = this;
      _this.super$RenderObject$describeSemanticsConfiguration(config);
      config._isSemanticBoundary = _this._container;
      config.explicitChildNodes = _this._explicitChildNodes;
      t1 = _this._enabled;
      if (t1 != null) {
        config._setFlag$2(C.SemanticsFlag_64, true);
        config._setFlag$2(C.SemanticsFlag_128, t1);
      }
      t1 = _this._button;
      if (t1 != null)
        config._setFlag$2(C.SemanticsFlag_8, t1);
      t1 = _this._proxy_box$_label;
      if (t1 != null) {
        config._label = t1;
        config._hasBeenAnnotated = true;
      }
      _this._proxy_box$_hintOverrides != null;
      t1 = _this._scopesRoute;
      if (t1 != null)
        config._setFlag$2(C.SemanticsFlag_2048, t1);
      t1 = _this._proxy_box$_textDirection;
      if (t1 != null) {
        config._semantics$_textDirection = t1;
        config._hasBeenAnnotated = true;
      }
      if (_this._onDismiss != null) {
        t1 = H.functionTypeCheck(_this.get$_performDismiss(), {func: 1, ret: -1});
        config._addArgumentlessAction$2(C.SemanticsAction_262144, t1);
        config.set$_semantics$_onDismiss(t1);
      }
    },
    _performDismiss$0: function() {
      if (this._onDismiss != null)
        this.onDismiss$0();
    },
    set$_onDismiss: function(_onDismiss) {
      this._onDismiss = H.functionTypeCheck(_onDismiss, {func: 1, ret: -1});
    },
    onDismiss$0: function() {
      return this.get$onDismiss().call$0();
    }
  };
  E.RenderBlockSemantics.prototype = {
    set$blocking: function(value) {
      return;
    },
    describeSemanticsConfiguration$1: function(config) {
      this.super$RenderObject$describeSemanticsConfiguration(config);
      config.isBlockingSemanticsOfPreviouslyPaintedNodes = true;
    }
  };
  E.RenderExcludeSemantics.prototype = {
    set$excluding: function(value) {
      if (value === this._excluding)
        return;
      this._excluding = value;
      this.markNeedsSemanticsUpdate$0();
    },
    visitChildrenForSemantics$1: function(visitor) {
      H.functionTypeCheck(visitor, {func: 1, ret: -1, args: [K.RenderObject]});
      if (this._excluding)
        return;
      this.super$RenderObject$visitChildrenForSemantics(visitor);
    }
  };
  E.RenderIndexedSemantics.prototype = {
    set$index: function(_, value) {
      if (value === this._proxy_box$_index)
        return;
      this._proxy_box$_index = value;
      this.markNeedsSemanticsUpdate$0();
    },
    describeSemanticsConfiguration$1: function(config) {
      this.super$RenderObject$describeSemanticsConfiguration(config);
      config._isSemanticBoundary = true;
      config._indexInParent = this._proxy_box$_index;
      config._hasBeenAnnotated = true;
    }
  };
  E._RenderProxyBox_RenderBox_RenderObjectWithChildMixin.prototype = {
    attach$1: function(owner) {
      var t1;
      H.interceptedTypeCheck(owner, "$isPipelineOwner");
      this.super$RenderObject$attach(owner);
      t1 = this.RenderObjectWithChildMixin__child;
      if (t1 != null)
        t1.attach$1(owner);
    },
    detach$0: function(_) {
      var t1;
      this.super$AbstractNode$detach(0);
      t1 = this.RenderObjectWithChildMixin__child;
      if (t1 != null)
        t1.detach$0(0);
    },
    set$_object$_child: function(_child) {
      this.RenderObjectWithChildMixin__child = H.assertSubtypeOfRuntimeType(_child, H.getRuntimeTypeArgument(this, "RenderObjectWithChildMixin", 0));
    }
  };
  E._RenderProxyBox_RenderBox_RenderObjectWithChildMixin_RenderProxyBoxMixin.prototype = {
    computeDistanceToActualBaseline$1: function(baseline) {
      var t1 = this.RenderObjectWithChildMixin__child;
      if (t1 != null)
        return t1.getDistanceToActualBaseline$1(baseline);
      return this.super$RenderBox$computeDistanceToActualBaseline(baseline);
    }
  };
  T.RenderShiftedBox.prototype = {
    computeDistanceToActualBaseline$1: function(baseline) {
      var result, childParentData,
        t1 = this.RenderObjectWithChildMixin__child;
      if (t1 != null) {
        result = t1.getDistanceToActualBaseline$1(baseline);
        childParentData = H.interceptedTypeCheck(this.RenderObjectWithChildMixin__child.parentData, "$isBoxParentData");
        if (result != null) {
          t1 = childParentData.offset._dy;
          if (typeof t1 !== "number")
            return H.iae(t1);
          result += t1;
        }
      } else
        result = this.super$RenderBox$computeDistanceToActualBaseline(baseline);
      return result;
    },
    paint$2: function(context, offset) {
      var t1 = this.RenderObjectWithChildMixin__child;
      if (t1 != null)
        context.paintChild$2(t1, H.interceptedTypeCheck(t1.parentData, "$isBoxParentData").offset.$add(0, offset));
    },
    hitTestChildren$2$position: function(result, position) {
      var t1 = this.RenderObjectWithChildMixin__child;
      if (t1 != null)
        return t1.hitTest$2$position(result, position.$sub(0, H.interceptedTypeCheck(t1.parentData, "$isBoxParentData").offset));
      return false;
    },
    $asRenderObjectWithChildMixin: function() {
      return [S.RenderBox];
    }
  };
  T.RenderPadding.prototype = {
    _shifted_box$_resolve$0: function() {
      var _this = this;
      if (_this._resolvedPadding != null)
        return;
      _this._resolvedPadding = _this._shifted_box$_padding.resolve$1(_this._shifted_box$_textDirection);
    },
    set$padding: function(_, value) {
      var _this = this;
      if (J.$eq$(_this._shifted_box$_padding, value))
        return;
      _this._shifted_box$_padding = value;
      _this._resolvedPadding = null;
      _this.markNeedsLayout$0();
    },
    set$textDirection: function(value) {
      var _this = this;
      if (_this._shifted_box$_textDirection == value)
        return;
      _this._shifted_box$_textDirection = value;
      _this._resolvedPadding = null;
      _this.markNeedsLayout$0();
    },
    performLayout$0: function() {
      var t1, t2, t3, t4, t5, horizontal, vertical, deflatedMinWidth, deflatedMinHeight, childParentData, t6, t7, _this = this;
      _this._shifted_box$_resolve$0();
      if (_this.RenderObjectWithChildMixin__child == null) {
        t1 = H.interceptedTypeCheck(K.RenderObject.prototype.get$constraints.call(_this), "$isBoxConstraints");
        t2 = _this._resolvedPadding;
        t3 = t2._left;
        t4 = t2._right;
        if (typeof t3 !== "number")
          return t3.$add();
        if (typeof t4 !== "number")
          return H.iae(t4);
        t5 = t2._top;
        t2 = t2._bottom;
        if (typeof t5 !== "number")
          return t5.$add();
        if (typeof t2 !== "number")
          return H.iae(t2);
        _this._size = t1.constrain$1(new Q.Size(t3 + t4, t5 + t2));
        return;
      }
      t1 = H.interceptedTypeCheck(K.RenderObject.prototype.get$constraints.call(_this), "$isBoxConstraints");
      t2 = _this._resolvedPadding;
      t1.toString;
      horizontal = t2.get$horizontal();
      t3 = t2.get$top(t2);
      t2 = t2.get$bottom(t2);
      if (typeof t3 !== "number")
        return t3.$add();
      if (typeof t2 !== "number")
        return H.iae(t2);
      vertical = t3 + t2;
      t2 = t1.minWidth;
      if (typeof t2 !== "number")
        return t2.$sub();
      deflatedMinWidth = Math.max(0, t2 - horizontal);
      t2 = t1.minHeight;
      if (typeof t2 !== "number")
        return t2.$sub();
      deflatedMinHeight = Math.max(0, t2 - vertical);
      t2 = t1.maxWidth;
      if (typeof t2 !== "number")
        return t2.$sub();
      t2 = Math.max(deflatedMinWidth, t2 - horizontal);
      t1 = t1.maxHeight;
      if (typeof t1 !== "number")
        return t1.$sub();
      t1 = Math.max(deflatedMinHeight, t1 - vertical);
      _this.RenderObjectWithChildMixin__child.layout$2$parentUsesSize(new S.BoxConstraints(deflatedMinWidth, t2, deflatedMinHeight, t1), true);
      childParentData = H.interceptedTypeCheck(_this.RenderObjectWithChildMixin__child.parentData, "$isBoxParentData");
      t1 = _this._resolvedPadding;
      childParentData.offset = new Q.Offset(t1._left, t1._top);
      t1 = H.interceptedTypeCheck(K.RenderObject.prototype.get$constraints.call(_this), "$isBoxConstraints");
      t2 = _this._resolvedPadding;
      t3 = t2._left;
      t4 = _this.RenderObjectWithChildMixin__child._size;
      t5 = t4._dx;
      if (typeof t3 !== "number")
        return t3.$add();
      if (typeof t5 !== "number")
        return H.iae(t5);
      t6 = t2._right;
      if (typeof t6 !== "number")
        return H.iae(t6);
      t7 = t2._top;
      t4 = t4._dy;
      if (typeof t7 !== "number")
        return t7.$add();
      if (typeof t4 !== "number")
        return H.iae(t4);
      t2 = t2._bottom;
      if (typeof t2 !== "number")
        return H.iae(t2);
      _this._size = t1.constrain$1(new Q.Size(t3 + t5 + t6, t7 + t4 + t2));
    }
  };
  T.RenderAligningShiftedBox.prototype = {
    _shifted_box$_resolve$0: function() {
      var _this = this;
      if (_this._resolvedAlignment != null)
        return;
      _this._resolvedAlignment = _this._alignment.resolve$1(_this._shifted_box$_textDirection);
    },
    set$alignment: function(value) {
      var _this = this;
      if (J.$eq$(_this._alignment, value))
        return;
      _this._alignment = value;
      _this._resolvedAlignment = null;
      _this.markNeedsLayout$0();
    },
    set$textDirection: function(value) {
      var _this = this;
      if (_this._shifted_box$_textDirection == value)
        return;
      _this._shifted_box$_textDirection = value;
      _this._resolvedAlignment = null;
      _this.markNeedsLayout$0();
    }
  };
  T.RenderPositionedBox.prototype = {
    set$widthFactor: function(value) {
      if (this._widthFactor == value)
        return;
      this._widthFactor = value;
      this.markNeedsLayout$0();
    },
    set$heightFactor: function(value) {
      if (this._heightFactor == value)
        return;
      this._heightFactor = value;
      this.markNeedsLayout$0();
    },
    performLayout$0: function() {
      var t2, t3, t4, _this = this,
        shrinkWrapWidth = _this._widthFactor != null || H.interceptedTypeCheck(K.RenderObject.prototype.get$constraints.call(_this), "$isBoxConstraints").maxWidth === 1 / 0,
        shrinkWrapHeight = _this._heightFactor != null || H.interceptedTypeCheck(K.RenderObject.prototype.get$constraints.call(_this), "$isBoxConstraints").maxHeight === 1 / 0,
        t1 = _this.RenderObjectWithChildMixin__child;
      if (t1 != null) {
        t1.layout$2$parentUsesSize(H.interceptedTypeCheck(K.RenderObject.prototype.get$constraints.call(_this), "$isBoxConstraints").loosen$0(), true);
        t1 = H.interceptedTypeCheck(K.RenderObject.prototype.get$constraints.call(_this), "$isBoxConstraints");
        if (shrinkWrapWidth) {
          t2 = _this.RenderObjectWithChildMixin__child._size._dx;
          t3 = _this._widthFactor;
          if (t3 == null)
            t3 = 1;
          if (typeof t2 !== "number")
            return t2.$mul();
          t3 = t2 * t3;
          t2 = t3;
        } else
          t2 = 1 / 0;
        if (shrinkWrapHeight) {
          t3 = _this.RenderObjectWithChildMixin__child._size._dy;
          t4 = _this._heightFactor;
          if (t4 == null)
            t4 = 1;
          if (typeof t3 !== "number")
            return t3.$mul();
          t4 = t3 * t4;
          t3 = t4;
        } else
          t3 = 1 / 0;
        _this._size = t1.constrain$1(new Q.Size(t2, t3));
        _this._shifted_box$_resolve$0();
        t3 = _this.RenderObjectWithChildMixin__child;
        H.interceptedTypeCheck(t3.parentData, "$isBoxParentData").offset = _this._resolvedAlignment.alongOffset$1(H.interceptedTypeCheck(_this._size.$sub(0, t3._size), "$isOffset"));
      } else {
        t1 = H.interceptedTypeCheck(K.RenderObject.prototype.get$constraints.call(_this), "$isBoxConstraints");
        t2 = shrinkWrapWidth ? 0 : 1 / 0;
        _this._size = t1.constrain$1(new Q.Size(t2, shrinkWrapHeight ? 0 : 1 / 0));
      }
    }
  };
  T._RenderShiftedBox_RenderBox_RenderObjectWithChildMixin.prototype = {
    attach$1: function(owner) {
      var t1;
      H.interceptedTypeCheck(owner, "$isPipelineOwner");
      this.super$RenderObject$attach(owner);
      t1 = this.RenderObjectWithChildMixin__child;
      if (t1 != null)
        t1.attach$1(owner);
    },
    detach$0: function(_) {
      var t1;
      this.super$AbstractNode$detach(0);
      t1 = this.RenderObjectWithChildMixin__child;
      if (t1 != null)
        t1.detach$0(0);
    },
    set$_object$_child: function(_child) {
      this.RenderObjectWithChildMixin__child = H.assertSubtypeOfRuntimeType(_child, H.getRuntimeTypeArgument(this, "RenderObjectWithChildMixin", 0));
    }
  };
  G.GrowthDirection.prototype = {
    toString$0: function(_) {
      return this._sliver$_name;
    }
  };
  G.SliverConstraints.prototype = {
    get$isTight: function() {
      return false;
    },
    asBoxConstraints$2$maxExtent$minExtent: function(maxExtent, minExtent) {
      var crossAxisExtent = this.crossAxisExtent;
      switch (G.axisDirectionToAxis(this.axisDirection)) {
        case C.Axis_0:
          return new S.BoxConstraints(minExtent, maxExtent, crossAxisExtent, crossAxisExtent);
        case C.Axis_1:
          return new S.BoxConstraints(crossAxisExtent, crossAxisExtent, minExtent, maxExtent);
      }
      return;
    },
    asBoxConstraints$0: function() {
      return this.asBoxConstraints$2$maxExtent$minExtent(1 / 0, 0);
    },
    $eq: function(_, other) {
      var _this = this;
      if (other == null)
        return false;
      if (_this === other)
        return true;
      if (!(other instanceof G.SliverConstraints))
        return false;
      return other.axisDirection == _this.axisDirection && other.growthDirection === _this.growthDirection && other.scrollOffset === _this.scrollOffset && other.overlap === _this.overlap && other.remainingPaintExtent === _this.remainingPaintExtent && other.crossAxisExtent == _this.crossAxisExtent && other.crossAxisDirection == _this.crossAxisDirection && other.viewportMainAxisExtent == _this.viewportMainAxisExtent && other.remainingCacheExtent === _this.remainingCacheExtent && other.cacheOrigin === _this.cacheOrigin;
    },
    get$hashCode: function(_) {
      var _this = this;
      return Q.hashValues(_this.axisDirection, _this.growthDirection, _this.scrollOffset, _this.overlap, _this.remainingPaintExtent, _this.crossAxisExtent, _this.crossAxisDirection, _this.viewportMainAxisExtent, _this.remainingCacheExtent, _this.cacheOrigin, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd);
    },
    toString$0: function(_) {
      var _this = this,
        t1 = "SliverConstraints(" + H.S(_this.axisDirection) + ", " + _this.growthDirection.toString$0(0) + ", " + H.S(_this.userScrollDirection) + ", scrollOffset: " + C.JSNumber_methods.toStringAsFixed$1(_this.scrollOffset, 1) + ", remainingPaintExtent: " + C.JSNumber_methods.toStringAsFixed$1(_this.remainingPaintExtent, 1) + ", ",
        t2 = _this.overlap;
      return t1 + (t2 !== 0 ? "overlap: " + C.JSNumber_methods.toStringAsFixed$1(t2, 1) + ", " : "") + ("crossAxisExtent: " + J.toStringAsFixed$1$n(_this.crossAxisExtent, 1) + ", crossAxisDirection: " + H.S(_this.crossAxisDirection) + ", viewportMainAxisExtent: " + J.toStringAsFixed$1$n(_this.viewportMainAxisExtent, 1) + ", remainingCacheExtent: " + C.JSNumber_methods.toStringAsFixed$1(_this.remainingCacheExtent, 1) + " cacheOrigin: " + C.JSNumber_methods.toStringAsFixed$1(_this.cacheOrigin, 1) + " )");
    }
  };
  G.SliverGeometry.prototype = {
    toStringShort$0: function() {
      return new H.TypeImpl(H.getRti(this)).toString$0(0);
    }
  };
  G.SliverHitTestEntry.prototype = {
    get$target: function(_) {
      return H.interceptedTypeCheck(this.target, "$isRenderSliver");
    },
    toString$0: function(_) {
      var _this = this;
      return new H.TypeImpl(H.getRti(H.interceptedTypeCheck(_this.target, "$isRenderSliver"))).toString$0(0) + "@(mainAxis: " + H.S(_this.mainAxisPosition) + ", crossAxis: " + H.S(_this.crossAxisPosition) + ")";
    }
  };
  G.SliverLogicalParentData.prototype = {
    toString$0: function(_) {
      return "layoutOffset=" + C.JSNumber_methods.toStringAsFixed$1(this.layoutOffset, 1);
    }
  };
  G.SliverPhysicalParentData.prototype = {
    toString$0: function(_) {
      return "paintOffset=" + H.S(this.paintOffset);
    }
  };
  G.SliverPhysicalContainerParentData.prototype = {
    $asContainerParentDataMixin: function() {
      return [G.RenderSliver];
    }
  };
  G.RenderSliver.prototype = {
    get$constraints: function() {
      return H.interceptedTypeCheck(K.RenderObject.prototype.get$constraints.call(this), "$isSliverConstraints");
    },
    get$semanticBounds: function() {
      return this.get$paintBounds();
    },
    get$paintBounds: function() {
      var t1, t2, _this = this;
      switch (G.axisDirectionToAxis(H.interceptedTypeCheck(K.RenderObject.prototype.get$constraints.call(_this), "$isSliverConstraints").axisDirection)) {
        case C.Axis_0:
          t1 = _this._geometry.paintExtent;
          t2 = H.interceptedTypeCheck(K.RenderObject.prototype.get$constraints.call(_this), "$isSliverConstraints").crossAxisExtent;
          if (typeof t2 !== "number")
            return H.iae(t2);
          return new Q.Rect(0, 0, 0 + t1, 0 + t2);
        case C.Axis_1:
          t1 = H.interceptedTypeCheck(K.RenderObject.prototype.get$constraints.call(_this), "$isSliverConstraints").crossAxisExtent;
          t2 = _this._geometry.paintExtent;
          if (typeof t1 !== "number")
            return H.iae(t1);
          return new Q.Rect(0, 0, 0 + t1, 0 + t2);
      }
      return;
    },
    performResize$0: function() {
    },
    hitTest$3$crossAxisPosition$mainAxisPosition: function(result, crossAxisPosition, mainAxisPosition) {
      var t1, _this = this;
      if (mainAxisPosition >= 0)
        if (mainAxisPosition < _this._geometry.hitTestExtent) {
          if (typeof crossAxisPosition !== "number")
            return crossAxisPosition.$ge();
          if (crossAxisPosition >= 0) {
            t1 = H.interceptedTypeCheck(K.RenderObject.prototype.get$constraints.call(_this), "$isSliverConstraints").crossAxisExtent;
            if (typeof t1 !== "number")
              return H.iae(t1);
            t1 = crossAxisPosition < t1;
          } else
            t1 = false;
        } else
          t1 = false;
      else
        t1 = false;
      if (t1)
        if (_this.hitTestChildren$3$crossAxisPosition$mainAxisPosition(result, crossAxisPosition, mainAxisPosition) || false) {
          C.JSArray_methods.add$1(result._path, new G.SliverHitTestEntry(mainAxisPosition, crossAxisPosition, _this));
          return true;
        }
      return false;
    },
    hitTestChildren$3$crossAxisPosition$mainAxisPosition: function(result, crossAxisPosition, mainAxisPosition) {
      return false;
    },
    calculatePaintOffset$3$from$to: function(constraints, from, to) {
      var a = constraints.scrollOffset,
        t1 = constraints.remainingPaintExtent,
        b = a + t1;
      return C.JSNumber_methods.clamp$2(J.clamp$2$n(to, a, b) - C.JSNumber_methods.clamp$2(from, a, b), 0, t1);
    },
    calculateCacheOffset$3$from$to: function(constraints, from, to) {
      var t1 = constraints.scrollOffset,
        a = t1 + constraints.cacheOrigin,
        t2 = constraints.remainingCacheExtent,
        b = t1 + t2;
      return C.JSNumber_methods.clamp$2(J.clamp$2$n(to, a, b) - C.JSNumber_methods.clamp$2(from, a, b), 0, t2);
    },
    childScrollOffset$1: function(child) {
      return 0;
    },
    applyPaintTransform$2: function(child, transform) {
    },
    handleEvent$2: function($event, entry) {
      H.interceptedTypeCheck(entry, "$isSliverHitTestEntry");
    }
  };
  G.RenderSliverHelpers.prototype = {
    _getRightWayUp$1: function(constraints) {
      var rightWayUp;
      switch (constraints.axisDirection) {
        case C.AxisDirection_0:
        case C.AxisDirection_3:
          rightWayUp = false;
          break;
        case C.AxisDirection_2:
        case C.AxisDirection_1:
          rightWayUp = true;
          break;
        default:
          rightWayUp = null;
      }
      switch (constraints.growthDirection) {
        case C.GrowthDirection_0:
          break;
        case C.GrowthDirection_1:
          rightWayUp = !H.boolConversionCheck(rightWayUp);
          break;
      }
      return rightWayUp;
    },
    hitTestBoxChild$4$crossAxisPosition$mainAxisPosition: function(result, child, crossAxisPosition, mainAxisPosition) {
      var t1, _this = this,
        rightWayUp = _this._getRightWayUp$1(H.interceptedTypeCheck(K.RenderObject.prototype.get$constraints.call(_this), "$isSliverConstraints")),
        absolutePosition = mainAxisPosition - (H.interceptedTypeCheck(child.parentData, "$isSliverMultiBoxAdaptorParentData").layoutOffset - H.interceptedTypeCheck(K.RenderObject.prototype.get$constraints.call(_this), "$isSliverConstraints").scrollOffset),
        absoluteCrossAxisPosition = crossAxisPosition - 0;
      switch (G.axisDirectionToAxis(H.interceptedTypeCheck(K.RenderObject.prototype.get$constraints.call(_this), "$isSliverConstraints").axisDirection)) {
        case C.Axis_0:
          if (!H.boolConversionCheck(rightWayUp)) {
            t1 = child._size._dx;
            if (typeof t1 !== "number")
              return t1.$sub();
            absolutePosition = t1 - absolutePosition;
          }
          return child.hitTest$2$position(result, new Q.Offset(absolutePosition, absoluteCrossAxisPosition));
        case C.Axis_1:
          if (!H.boolConversionCheck(rightWayUp)) {
            t1 = child._size._dy;
            if (typeof t1 !== "number")
              return t1.$sub();
            absolutePosition = t1 - absolutePosition;
          }
          return child.hitTest$2$position(result, new Q.Offset(absoluteCrossAxisPosition, absolutePosition));
      }
      return false;
    }
  };
  G._SliverPhysicalContainerParentData_SliverPhysicalParentData_ContainerParentDataMixin.prototype = {
    detach$0: function(_) {
      var t1, _this = this;
      _this.super$ParentData$detach(0);
      t1 = _this.ContainerParentDataMixin_previousSibling;
      if (t1 != null)
        H.assertSubtype(t1.parentData, "$isContainerParentDataMixin", [G.RenderSliver], "$asContainerParentDataMixin").set$nextSibling(0, _this.ContainerParentDataMixin_nextSibling);
      t1 = _this.ContainerParentDataMixin_nextSibling;
      if (t1 != null)
        H.assertSubtype(t1.parentData, "$isContainerParentDataMixin", [G.RenderSliver], "$asContainerParentDataMixin").set$previousSibling(0, _this.ContainerParentDataMixin_previousSibling);
      _this.set$previousSibling(0, null);
      _this.set$nextSibling(0, null);
    },
    set$previousSibling: function(_, previousSibling) {
      this.ContainerParentDataMixin_previousSibling = H.assertSubtypeOfRuntimeType(previousSibling, H.getRuntimeTypeArgument(this, "ContainerParentDataMixin", 0));
    },
    set$nextSibling: function(_, nextSibling) {
      this.ContainerParentDataMixin_nextSibling = H.assertSubtypeOfRuntimeType(nextSibling, H.getRuntimeTypeArgument(this, "ContainerParentDataMixin", 0));
    },
    get$previousSibling: function(receiver) {
      return this.ContainerParentDataMixin_previousSibling;
    },
    get$nextSibling: function(receiver) {
      return this.ContainerParentDataMixin_nextSibling;
    }
  };
  A.RenderSliverFillViewport.prototype = {
    get$itemExtent: function() {
      var t1 = H.interceptedTypeCheck(K.RenderObject.prototype.get$constraints.call(this), "$isSliverConstraints").viewportMainAxisExtent,
        t2 = this._sliver_fill$_viewportFraction;
      if (typeof t1 !== "number")
        return t1.$mul();
      return t1 * t2;
    },
    set$viewportFraction: function(value) {
      if (this._sliver_fill$_viewportFraction === value)
        return;
      this._sliver_fill$_viewportFraction = value;
      this.markNeedsLayout$0();
    },
    get$_sliver_fill$_padding: function(_) {
      var t1 = this._sliver_fill$_viewportFraction,
        t2 = H.interceptedTypeCheck(K.RenderObject.prototype.get$constraints.call(this), "$isSliverConstraints").viewportMainAxisExtent;
      if (typeof t2 !== "number")
        return H.iae(t2);
      return (1 - t1) * t2 * 0.5;
    },
    indexToLayoutOffset$2: function(itemExtent, index) {
      return this.get$_sliver_fill$_padding(this) + this.super$RenderSliverFixedExtentBoxAdaptor$indexToLayoutOffset(itemExtent, index);
    },
    getMinChildIndexForScrollOffset$2: function(scrollOffset, itemExtent) {
      return this.super$RenderSliverFixedExtentBoxAdaptor$getMinChildIndexForScrollOffset(Math.max(scrollOffset - this.get$_sliver_fill$_padding(this), 0), itemExtent);
    },
    getMaxChildIndexForScrollOffset$2: function(scrollOffset, itemExtent) {
      return this.super$RenderSliverFixedExtentBoxAdaptor$getMaxChildIndexForScrollOffset(Math.max(scrollOffset - this.get$_sliver_fill$_padding(this), 0), itemExtent);
    },
    estimateMaxScrollOffset$5$firstIndex$lastIndex$leadingScrollOffset$trailingScrollOffset: function(constraints, firstIndex, lastIndex, leadingScrollOffset, trailingScrollOffset) {
      var padding = this.get$_sliver_fill$_padding(this);
      return this._childManager.estimateMaxScrollOffset$5$firstIndex$lastIndex$leadingScrollOffset$trailingScrollOffset(constraints, firstIndex, lastIndex, leadingScrollOffset - padding, trailingScrollOffset - padding) + padding + padding;
    }
  };
  X.RenderSliverFixedExtentBoxAdaptor.prototype = {
    indexToLayoutOffset$2: function(itemExtent, index) {
      if (typeof itemExtent !== "number")
        return itemExtent.$mul();
      if (typeof index !== "number")
        return H.iae(index);
      return itemExtent * index;
    },
    getMinChildIndexForScrollOffset$2: function(scrollOffset, itemExtent) {
      if (typeof itemExtent !== "number")
        return itemExtent.$gt();
      return itemExtent > 0 ? Math.max(0, C.JSNumber_methods.$tdiv(scrollOffset, itemExtent)) : 0;
    },
    getMaxChildIndexForScrollOffset$2: function(scrollOffset, itemExtent) {
      if (typeof itemExtent !== "number")
        return itemExtent.$gt();
      return itemExtent > 0 ? Math.max(0, C.JSDouble_methods.ceil$0(scrollOffset / itemExtent) - 1) : 0;
    },
    estimateMaxScrollOffset$5$firstIndex$lastIndex$leadingScrollOffset$trailingScrollOffset: function(constraints, firstIndex, lastIndex, leadingScrollOffset, trailingScrollOffset) {
      return this._childManager.estimateMaxScrollOffset$5$firstIndex$lastIndex$leadingScrollOffset$trailingScrollOffset(constraints, firstIndex, lastIndex, leadingScrollOffset, trailingScrollOffset);
    },
    performLayout$0: function() {
      var itemExtent, scrollOffset, targetEndScrollOffset, childConstraints, firstIndex, targetLastIndex, t2, oldFirstIndex, oldLastIndex, leadingGarbage, max, index, trailingChildWithLayout, child, t3, t4, t5, childParentData, lastIndex, leadingScrollOffset, trailingScrollOffset, estimatedMaxScrollOffset, paintExtent, cacheExtent, targetEndScrollOffsetForPaint, targetLastIndexForPaint, _this = this, _null = null,
        t1 = _this._childManager;
      t1._didUnderflow = false;
      itemExtent = _this.get$itemExtent();
      scrollOffset = H.interceptedTypeCheck(K.RenderObject.prototype.get$constraints.call(_this), "$isSliverConstraints").scrollOffset + H.interceptedTypeCheck(K.RenderObject.prototype.get$constraints.call(_this), "$isSliverConstraints").cacheOrigin;
      targetEndScrollOffset = scrollOffset + H.interceptedTypeCheck(K.RenderObject.prototype.get$constraints.call(_this), "$isSliverConstraints").remainingCacheExtent;
      childConstraints = H.interceptedTypeCheck(K.RenderObject.prototype.get$constraints.call(_this), "$isSliverConstraints").asBoxConstraints$2$maxExtent$minExtent(itemExtent, itemExtent);
      firstIndex = _this.getMinChildIndexForScrollOffset$2(scrollOffset, itemExtent);
      targetLastIndex = isFinite(targetEndScrollOffset) ? _this.getMaxChildIndexForScrollOffset$2(targetEndScrollOffset, itemExtent) : _null;
      t2 = _this.ContainerRenderObjectMixin__firstChild;
      if (t2 != null) {
        oldFirstIndex = H.interceptedTypeCheck(H.interceptedTypeCheck(t2, "$isRenderBox").parentData, "$isSliverMultiBoxAdaptorParentData").index;
        oldLastIndex = H.interceptedTypeCheck(H.interceptedTypeCheck(_this.ContainerRenderObjectMixin__lastChild, "$isRenderBox").parentData, "$isSliverMultiBoxAdaptorParentData").index;
        if (typeof oldFirstIndex !== "number")
          return H.iae(oldFirstIndex);
        leadingGarbage = H.intTypeCheck(C.JSInt_methods.clamp$2(firstIndex - oldFirstIndex, 0, _this.ContainerRenderObjectMixin__childCount));
        if (targetLastIndex == null)
          t2 = 0;
        else {
          if (typeof oldLastIndex !== "number")
            return oldLastIndex.$sub();
          t2 = C.JSInt_methods.clamp$2(oldLastIndex - targetLastIndex, 0, _this.ContainerRenderObjectMixin__childCount);
        }
        _this.collectGarbage$2(leadingGarbage, H.intTypeCheck(t2));
      } else
        _this.collectGarbage$2(0, 0);
      if (_this.ContainerRenderObjectMixin__firstChild == null)
        if (!_this.addInitialChild$2$index$layoutOffset(firstIndex, _this.indexToLayoutOffset$2(itemExtent, firstIndex))) {
          H.interceptedTypeCheck(K.RenderObject.prototype.get$constraints.call(_this), "$isSliverConstraints");
          t2 = H.interceptedTypeCheck(N.RenderObjectElement.prototype.get$widget.call(t1), "$isSliverMultiBoxAdaptorWidget").delegate;
          if (typeof itemExtent !== "number")
            return H.iae(itemExtent);
          max = t2.childCount * itemExtent;
          _this._geometry = G.SliverGeometry$(_null, false, _null, _null, max, 0, max, _null);
          t1.didFinishLayout$0();
          return;
        }
      t2 = H.interceptedTypeCheck(H.interceptedTypeCheck(_this.ContainerRenderObjectMixin__firstChild, "$isRenderBox").parentData, "$isSliverMultiBoxAdaptorParentData").index;
      if (typeof t2 !== "number")
        return t2.$sub();
      index = t2 - 1;
      trailingChildWithLayout = _null;
      for (; index >= firstIndex; --index) {
        child = _this.insertAndLayoutLeadingChild$1(childConstraints);
        if (child == null) {
          if (typeof itemExtent !== "number")
            return H.iae(itemExtent);
          _this._geometry = G.SliverGeometry$(_null, false, _null, _null, 0, 0, 0, index * itemExtent);
          return;
        }
        H.interceptedTypeCheck(child.parentData, "$isSliverMultiBoxAdaptorParentData").layoutOffset = _this.indexToLayoutOffset$2(itemExtent, index);
        if (trailingChildWithLayout == null)
          trailingChildWithLayout = child;
      }
      if (trailingChildWithLayout == null) {
        _this.ContainerRenderObjectMixin__firstChild.layout$1(childConstraints);
        H.interceptedTypeCheck(_this.ContainerRenderObjectMixin__firstChild.parentData, "$isSliverMultiBoxAdaptorParentData").layoutOffset = _this.indexToLayoutOffset$2(itemExtent, firstIndex);
        trailingChildWithLayout = _this.ContainerRenderObjectMixin__firstChild;
      }
      t2 = H.getRuntimeTypeArgument(_this, "ContainerRenderObjectMixin", 0);
      t3 = H.getRuntimeTypeArgument(_this, "ContainerRenderObjectMixin", 1);
      t4 = targetLastIndex != null;
      while (true) {
        if (t4) {
          t5 = H.interceptedTypeCheck(trailingChildWithLayout.parentData, "$isSliverMultiBoxAdaptorParentData").index;
          if (typeof t5 !== "number")
            return t5.$lt();
          t5 = t5 < targetLastIndex;
        } else
          t5 = true;
        if (!t5)
          break;
        childParentData = H.assertSubtypeOfRuntimeType(H.assertSubtypeOfRuntimeType(trailingChildWithLayout, t2).parentData, t3);
        child = childParentData.get$nextSibling(childParentData);
        if (child == null) {
          child = _this.insertAndLayoutChild$2$after(childConstraints, trailingChildWithLayout);
          if (child == null)
            break;
        } else
          child.layout$1(childConstraints);
        childParentData = H.interceptedTypeCheck(child.parentData, "$isSliverMultiBoxAdaptorParentData");
        childParentData.layoutOffset = _this.indexToLayoutOffset$2(itemExtent, childParentData.index);
        trailingChildWithLayout = child;
      }
      lastIndex = H.interceptedTypeCheck(H.interceptedTypeCheck(_this.ContainerRenderObjectMixin__lastChild, "$isRenderBox").parentData, "$isSliverMultiBoxAdaptorParentData").index;
      leadingScrollOffset = _this.indexToLayoutOffset$2(itemExtent, firstIndex);
      if (typeof lastIndex !== "number")
        return lastIndex.$add();
      trailingScrollOffset = _this.indexToLayoutOffset$2(itemExtent, lastIndex + 1);
      estimatedMaxScrollOffset = _this.estimateMaxScrollOffset$5$firstIndex$lastIndex$leadingScrollOffset$trailingScrollOffset(H.interceptedTypeCheck(K.RenderObject.prototype.get$constraints.call(_this), "$isSliverConstraints"), firstIndex, lastIndex, leadingScrollOffset, trailingScrollOffset);
      paintExtent = _this.calculatePaintOffset$3$from$to(H.interceptedTypeCheck(K.RenderObject.prototype.get$constraints.call(_this), "$isSliverConstraints"), leadingScrollOffset, trailingScrollOffset);
      cacheExtent = _this.calculateCacheOffset$3$from$to(H.interceptedTypeCheck(K.RenderObject.prototype.get$constraints.call(_this), "$isSliverConstraints"), leadingScrollOffset, trailingScrollOffset);
      targetEndScrollOffsetForPaint = H.interceptedTypeCheck(K.RenderObject.prototype.get$constraints.call(_this), "$isSliverConstraints").scrollOffset + H.interceptedTypeCheck(K.RenderObject.prototype.get$constraints.call(_this), "$isSliverConstraints").remainingPaintExtent;
      targetLastIndexForPaint = isFinite(targetEndScrollOffsetForPaint) ? _this.getMaxChildIndexForScrollOffset$2(targetEndScrollOffsetForPaint, itemExtent) : _null;
      _this._geometry = G.SliverGeometry$(cacheExtent, targetLastIndexForPaint != null && lastIndex >= targetLastIndexForPaint || H.interceptedTypeCheck(K.RenderObject.prototype.get$constraints.call(_this), "$isSliverConstraints").scrollOffset > 0, _null, _null, estimatedMaxScrollOffset, paintExtent, estimatedMaxScrollOffset, _null);
      if (estimatedMaxScrollOffset === trailingScrollOffset)
        t1._didUnderflow = true;
      t1.didFinishLayout$0();
    }
  };
  U.RenderSliverList.prototype = {
    performLayout$0: function() {
      var scrollOffset, targetEndScrollOffset, childConstraints, earliestUsefulChild, earliestScrollOffset, leadingChildWithLayout, t2, firstChildScrollOffset, correction, childParentData, t3, advance, leadingGarbage, extent, reachedEnd, t4, trailingGarbage, child, estimatedMaxScrollOffset, paintExtent, cacheExtent, _this = this, _null = null, _box_0 = {},
        t1 = _this._childManager;
      t1._didUnderflow = false;
      scrollOffset = H.interceptedTypeCheck(K.RenderObject.prototype.get$constraints.call(_this), "$isSliverConstraints").scrollOffset + H.interceptedTypeCheck(K.RenderObject.prototype.get$constraints.call(_this), "$isSliverConstraints").cacheOrigin;
      targetEndScrollOffset = scrollOffset + H.interceptedTypeCheck(K.RenderObject.prototype.get$constraints.call(_this), "$isSliverConstraints").remainingCacheExtent;
      childConstraints = H.interceptedTypeCheck(K.RenderObject.prototype.get$constraints.call(_this), "$isSliverConstraints").asBoxConstraints$0();
      if (_this.ContainerRenderObjectMixin__firstChild == null)
        if (!_this.addInitialChild$0()) {
          _this._geometry = C.SliverGeometry_yvr;
          t1.didFinishLayout$0();
          return;
        }
      _box_0.trailingChildWithLayout = null;
      earliestUsefulChild = _this.ContainerRenderObjectMixin__firstChild;
      for (earliestScrollOffset = H.interceptedTypeCheck(earliestUsefulChild.parentData, "$isSliverMultiBoxAdaptorParentData").layoutOffset, leadingChildWithLayout = _null; earliestScrollOffset > scrollOffset; earliestScrollOffset = firstChildScrollOffset, leadingChildWithLayout = earliestUsefulChild) {
        earliestUsefulChild = _this.insertAndLayoutLeadingChild$2$parentUsesSize(childConstraints, true);
        if (earliestUsefulChild == null) {
          earliestUsefulChild = _this.ContainerRenderObjectMixin__firstChild;
          H.interceptedTypeCheck(earliestUsefulChild.parentData, "$isSliverMultiBoxAdaptorParentData").layoutOffset = 0;
          if (scrollOffset === 0) {
            if (_box_0.trailingChildWithLayout == null)
              _box_0.trailingChildWithLayout = earliestUsefulChild;
            leadingChildWithLayout = earliestUsefulChild;
            break;
          } else {
            _this._geometry = G.SliverGeometry$(_null, false, _null, _null, 0, 0, 0, -scrollOffset);
            return;
          }
        }
        t2 = _this.paintExtentOf$1(_this.ContainerRenderObjectMixin__firstChild);
        if (typeof t2 !== "number")
          return H.iae(t2);
        firstChildScrollOffset = earliestScrollOffset - t2;
        if (firstChildScrollOffset < 0) {
          for (correction = 0; earliestUsefulChild != null;) {
            t1 = _this.paintExtentOf$1(_this.ContainerRenderObjectMixin__firstChild);
            if (typeof t1 !== "number")
              return H.iae(t1);
            correction += t1;
            earliestUsefulChild = _this.insertAndLayoutLeadingChild$2$parentUsesSize(childConstraints, true);
          }
          _this._geometry = G.SliverGeometry$(_null, false, _null, _null, 0, 0, 0, correction - earliestScrollOffset);
          H.interceptedTypeCheck(_this.ContainerRenderObjectMixin__firstChild.parentData, "$isSliverMultiBoxAdaptorParentData").layoutOffset = 0;
          return;
        }
        H.interceptedTypeCheck(earliestUsefulChild.parentData, "$isSliverMultiBoxAdaptorParentData").layoutOffset = firstChildScrollOffset;
        t2 = _box_0.trailingChildWithLayout;
        if (t2 == null)
          _box_0.trailingChildWithLayout = earliestUsefulChild;
      }
      if (leadingChildWithLayout == null) {
        earliestUsefulChild.layout$2$parentUsesSize(childConstraints, true);
        _box_0.trailingChildWithLayout = earliestUsefulChild;
      }
      _box_0.inLayoutRange = true;
      _box_0.child = earliestUsefulChild;
      childParentData = H.interceptedTypeCheck(earliestUsefulChild.parentData, "$isSliverMultiBoxAdaptorParentData");
      _box_0.index = childParentData.index;
      t2 = childParentData.layoutOffset;
      t3 = _this.paintExtentOf$1(earliestUsefulChild);
      if (typeof t3 !== "number")
        return H.iae(t3);
      _box_0.endScrollOffset = t2 + t3;
      advance = new U.RenderSliverList_performLayout_advance(_box_0, _this, childConstraints);
      for (leadingGarbage = 0; _box_0.endScrollOffset < scrollOffset;) {
        ++leadingGarbage;
        if (!H.boolConversionCheck(advance.call$0())) {
          _this.collectGarbage$2(leadingGarbage - 1, 0);
          t1 = _this.ContainerRenderObjectMixin__lastChild;
          t2 = H.interceptedTypeCheck(t1.parentData, "$isSliverMultiBoxAdaptorParentData").layoutOffset;
          t1 = _this.paintExtentOf$1(t1);
          if (typeof t1 !== "number")
            return H.iae(t1);
          extent = t2 + t1;
          _this._geometry = G.SliverGeometry$(_null, false, _null, _null, extent, 0, extent, _null);
          return;
        }
      }
      while (true) {
        if (!(_box_0.endScrollOffset < targetEndScrollOffset)) {
          reachedEnd = false;
          break;
        }
        if (!H.boolConversionCheck(advance.call$0())) {
          reachedEnd = true;
          break;
        }
      }
      t2 = _box_0.child;
      if (t2 != null) {
        t3 = H.getRuntimeTypeArgument(_this, "ContainerRenderObjectMixin", 0);
        t4 = H.getRuntimeTypeArgument(_this, "ContainerRenderObjectMixin", 1);
        childParentData = H.assertSubtypeOfRuntimeType(H.assertSubtypeOfRuntimeType(t2, t3).parentData, t4);
        t2 = _box_0.child = childParentData.get$nextSibling(childParentData);
        for (trailingGarbage = 0; t2 != null; t2 = child) {
          ++trailingGarbage;
          childParentData = H.assertSubtypeOfRuntimeType(H.assertSubtypeOfRuntimeType(t2, t3).parentData, t4);
          child = childParentData.get$nextSibling(childParentData);
          _box_0.child = child;
        }
      } else
        trailingGarbage = 0;
      _this.collectGarbage$2(leadingGarbage, trailingGarbage);
      if (reachedEnd)
        estimatedMaxScrollOffset = _box_0.endScrollOffset;
      else {
        t2 = H.interceptedTypeCheck(K.RenderObject.prototype.get$constraints.call(_this), "$isSliverConstraints");
        childParentData = H.interceptedTypeCheck(H.interceptedTypeCheck(_this.ContainerRenderObjectMixin__firstChild, "$isRenderBox").parentData, "$isSliverMultiBoxAdaptorParentData");
        estimatedMaxScrollOffset = t1.estimateMaxScrollOffset$5$firstIndex$lastIndex$leadingScrollOffset$trailingScrollOffset(t2, childParentData.index, H.interceptedTypeCheck(H.interceptedTypeCheck(_this.ContainerRenderObjectMixin__lastChild, "$isRenderBox").parentData, "$isSliverMultiBoxAdaptorParentData").index, childParentData.layoutOffset, _box_0.endScrollOffset);
      }
      paintExtent = _this.calculatePaintOffset$3$from$to(H.interceptedTypeCheck(K.RenderObject.prototype.get$constraints.call(_this), "$isSliverConstraints"), H.interceptedTypeCheck(_this.ContainerRenderObjectMixin__firstChild.parentData, "$isSliverMultiBoxAdaptorParentData").layoutOffset, _box_0.endScrollOffset);
      cacheExtent = _this.calculateCacheOffset$3$from$to(H.interceptedTypeCheck(K.RenderObject.prototype.get$constraints.call(_this), "$isSliverConstraints"), H.interceptedTypeCheck(_this.ContainerRenderObjectMixin__firstChild.parentData, "$isSliverMultiBoxAdaptorParentData").layoutOffset, _box_0.endScrollOffset);
      t2 = H.interceptedTypeCheck(K.RenderObject.prototype.get$constraints.call(_this), "$isSliverConstraints").scrollOffset;
      t3 = H.interceptedTypeCheck(K.RenderObject.prototype.get$constraints.call(_this), "$isSliverConstraints").remainingPaintExtent;
      _this._geometry = G.SliverGeometry$(cacheExtent, _box_0.endScrollOffset > t2 + t3 || H.interceptedTypeCheck(K.RenderObject.prototype.get$constraints.call(_this), "$isSliverConstraints").scrollOffset > 0, _null, _null, estimatedMaxScrollOffset, paintExtent, estimatedMaxScrollOffset, _null);
      if (estimatedMaxScrollOffset === _box_0.endScrollOffset)
        t1._didUnderflow = true;
      t1.didFinishLayout$0();
    }
  };
  U.RenderSliverList_performLayout_advance.prototype = {
    call$0: function() {
      var t3, childParentData, child, t4, index,
        t1 = this._box_0,
        t2 = t1.child;
      if (t2 == t1.trailingChildWithLayout)
        t1.inLayoutRange = false;
      t3 = this.$this;
      childParentData = H.assertSubtypeOfRuntimeType(H.assertSubtypeOfRuntimeType(t2, H.getRuntimeTypeArgument(t3, "ContainerRenderObjectMixin", 0)).parentData, H.getRuntimeTypeArgument(t3, "ContainerRenderObjectMixin", 1));
      child = t1.child = childParentData.get$nextSibling(childParentData);
      t2 = child == null;
      if (t2)
        t1.inLayoutRange = false;
      t4 = t1.index;
      if (typeof t4 !== "number")
        return t4.$add();
      index = t4 + 1;
      t1.index = index;
      if (!t1.inLayoutRange) {
        t2 = t2 || H.interceptedTypeCheck(child.parentData, "$isSliverMultiBoxAdaptorParentData").index !== index;
        t4 = this.childConstraints;
        if (t2) {
          child = t3.insertAndLayoutChild$3$after$parentUsesSize(t4, t1.trailingChildWithLayout, true);
          t1.child = child;
          if (child == null)
            return false;
        } else
          child.layout$2$parentUsesSize(t4, true);
        t2 = t1.trailingChildWithLayout = t1.child;
      } else
        t2 = child;
      childParentData = H.interceptedTypeCheck(t2.parentData, "$isSliverMultiBoxAdaptorParentData");
      t4 = t1.endScrollOffset;
      childParentData.layoutOffset = t4;
      t2 = t3.paintExtentOf$1(t2);
      if (typeof t2 !== "number")
        return H.iae(t2);
      t1.endScrollOffset = t4 + t2;
      return true;
    },
    $signature: 26
  };
  F.KeepAliveParentDataMixin.prototype = {};
  F.RenderSliverWithKeepAliveMixin.prototype = {
    setupParentData$1: function(child) {
    }
  };
  F.SliverMultiBoxAdaptorParentData.prototype = {
    toString$0: function(_) {
      var t1 = "index=" + H.S(this.index) + "; ";
      return t1 + (this.KeepAliveParentDataMixin_keepAlive ? "keepAlive; " : "") + this.super$SliverLogicalParentData$toString(0);
    },
    $asContainerParentDataMixin: function() {
      return [S.RenderBox];
    }
  };
  F.RenderSliverMultiBoxAdaptor.prototype = {
    setupParentData$1: function(child) {
      if (!(child.parentData instanceof F.SliverMultiBoxAdaptorParentData))
        child.parentData = new F.SliverMultiBoxAdaptorParentData(false, null, null);
    },
    adoptChild$1: function(child) {
      var childParentData;
      this.super$RenderObject$adoptChild(child);
      childParentData = H.interceptedTypeCheck(child.parentData, "$isSliverMultiBoxAdaptorParentData");
      if (!childParentData._keptAlive) {
        H.interceptedTypeCheck(child, "$isRenderBox");
        childParentData.index = this._childManager._currentlyUpdatingChildIndex;
      }
    },
    insert$2$after: function(_, child, after) {
      this.super$ContainerRenderObjectMixin$insert(0, H.interceptedTypeCheck(child, "$isRenderBox"), H.interceptedTypeCheck(after, "$isRenderBox"));
    },
    remove$1: function(_, child) {
      var childParentData;
      H.interceptedTypeCheck(child, "$isRenderBox");
      childParentData = H.interceptedTypeCheck(child.parentData, "$isSliverMultiBoxAdaptorParentData");
      if (!childParentData._keptAlive) {
        this.super$ContainerRenderObjectMixin$remove(0, child);
        return;
      }
      this._keepAliveBucket.remove$1(0, childParentData.index);
      this.dropChild$1(child);
    },
    _createOrObtainChild$2$after: function(index, after) {
      this.invokeLayoutCallback$1$1(new F.RenderSliverMultiBoxAdaptor__createOrObtainChild_closure(this, index, after), G.SliverConstraints);
    },
    _destroyOrCacheChild$1: function(child) {
      var _this = this,
        childParentData = H.interceptedTypeCheck(child.parentData, "$isSliverMultiBoxAdaptorParentData");
      if (childParentData.KeepAliveParentDataMixin_keepAlive) {
        _this.remove$1(0, child);
        _this._keepAliveBucket.$indexSet(0, childParentData.index, child);
        child.parentData = childParentData;
        _this.super$RenderObject$adoptChild(child);
        childParentData._keptAlive = true;
      } else
        _this._childManager.removeChild$1(child);
    },
    attach$1: function(owner) {
      var t1;
      H.interceptedTypeCheck(owner, "$isPipelineOwner");
      this.super$_RenderSliverMultiBoxAdaptor_RenderSliver_ContainerRenderObjectMixin$attach(owner);
      for (t1 = this._keepAliveBucket, t1 = t1.get$values(t1), t1 = t1.get$iterator(t1); t1.moveNext$0();)
        t1.get$current(t1).attach$1(owner);
    },
    detach$0: function(_) {
      var t1;
      this.super$_RenderSliverMultiBoxAdaptor_RenderSliver_ContainerRenderObjectMixin$detach(0);
      for (t1 = this._keepAliveBucket, t1 = t1.get$values(t1), t1 = t1.get$iterator(t1); t1.moveNext$0();)
        t1.get$current(t1).detach$0(0);
    },
    redepthChildren$0: function() {
      this.super$ContainerRenderObjectMixin$redepthChildren();
      var t1 = this._keepAliveBucket;
      t1.get$values(t1).forEach$1(0, this.get$redepthChild());
    },
    visitChildren$1: function(visitor) {
      var t1;
      H.functionTypeCheck(visitor, {func: 1, ret: -1, args: [K.RenderObject]});
      this.super$ContainerRenderObjectMixin$visitChildren(visitor);
      t1 = this._keepAliveBucket;
      t1.get$values(t1).forEach$1(0, visitor);
    },
    visitChildrenForSemantics$1: function(visitor) {
      this.super$ContainerRenderObjectMixin$visitChildren(H.functionTypeCheck(visitor, {func: 1, ret: -1, args: [K.RenderObject]}));
    },
    addInitialChild$2$index$layoutOffset: function(index, layoutOffset) {
      var t1;
      this._createOrObtainChild$2$after(index, null);
      t1 = this.ContainerRenderObjectMixin__firstChild;
      if (t1 != null) {
        H.interceptedTypeCheck(t1.parentData, "$isSliverMultiBoxAdaptorParentData").layoutOffset = layoutOffset;
        return true;
      }
      this._childManager._didUnderflow = true;
      return false;
    },
    addInitialChild$0: function() {
      return this.addInitialChild$2$index$layoutOffset(0, 0);
    },
    insertAndLayoutLeadingChild$2$parentUsesSize: function(childConstraints, parentUsesSize) {
      var index, _this = this,
        t1 = H.interceptedTypeCheck(H.interceptedTypeCheck(_this.ContainerRenderObjectMixin__firstChild, "$isRenderBox").parentData, "$isSliverMultiBoxAdaptorParentData").index;
      if (typeof t1 !== "number")
        return t1.$sub();
      index = t1 - 1;
      _this._createOrObtainChild$2$after(index, null);
      t1 = H.interceptedTypeCheck(_this.ContainerRenderObjectMixin__firstChild, "$isRenderBox");
      if (H.interceptedTypeCheck(t1.parentData, "$isSliverMultiBoxAdaptorParentData").index === index) {
        t1.layout$2$parentUsesSize(childConstraints, parentUsesSize);
        return _this.ContainerRenderObjectMixin__firstChild;
      }
      _this._childManager._didUnderflow = true;
      return;
    },
    insertAndLayoutLeadingChild$1: function(childConstraints) {
      return this.insertAndLayoutLeadingChild$2$parentUsesSize(childConstraints, false);
    },
    insertAndLayoutChild$3$after$parentUsesSize: function(childConstraints, after, parentUsesSize) {
      var index, childParentData, child, _this = this,
        t1 = H.interceptedTypeCheck(after.parentData, "$isSliverMultiBoxAdaptorParentData").index;
      if (typeof t1 !== "number")
        return t1.$add();
      index = t1 + 1;
      _this._createOrObtainChild$2$after(index, after);
      childParentData = H.assertSubtypeOfRuntimeType(H.assertSubtypeOfRuntimeType(after, H.getRuntimeTypeArgument(_this, "ContainerRenderObjectMixin", 0)).parentData, H.getRuntimeTypeArgument(_this, "ContainerRenderObjectMixin", 1));
      child = childParentData.get$nextSibling(childParentData);
      if (child != null && H.interceptedTypeCheck(child.parentData, "$isSliverMultiBoxAdaptorParentData").index === index) {
        child.layout$2$parentUsesSize(childConstraints, parentUsesSize);
        return child;
      }
      _this._childManager._didUnderflow = true;
      return;
    },
    insertAndLayoutChild$2$after: function(childConstraints, after) {
      return this.insertAndLayoutChild$3$after$parentUsesSize(childConstraints, after, false);
    },
    collectGarbage$2: function(leadingGarbage, trailingGarbage) {
      var t1 = {};
      t1.leadingGarbage = leadingGarbage;
      t1.trailingGarbage = trailingGarbage;
      this.invokeLayoutCallback$1$1(new F.RenderSliverMultiBoxAdaptor_collectGarbage_closure(t1, this), G.SliverConstraints);
    },
    indexOf$1: function(_, child) {
      return H.interceptedTypeCheck(child.parentData, "$isSliverMultiBoxAdaptorParentData").index;
    },
    paintExtentOf$1: function(child) {
      switch (G.axisDirectionToAxis(H.interceptedTypeCheck(K.RenderObject.prototype.get$constraints.call(this), "$isSliverConstraints").axisDirection)) {
        case C.Axis_0:
          return child._size._dx;
        case C.Axis_1:
          return child._size._dy;
      }
      return;
    },
    hitTestChildren$3$crossAxisPosition$mainAxisPosition: function(result, crossAxisPosition, mainAxisPosition) {
      var t1, t2, childParentData, _this = this,
        child = _this.ContainerRenderObjectMixin__lastChild;
      for (t1 = H.getRuntimeTypeArgument(_this, "ContainerRenderObjectMixin", 0), t2 = H.getRuntimeTypeArgument(_this, "ContainerRenderObjectMixin", 1); child != null;) {
        if (_this.hitTestBoxChild$4$crossAxisPosition$mainAxisPosition(result, child, crossAxisPosition, mainAxisPosition))
          return true;
        childParentData = H.assertSubtypeOfRuntimeType(H.assertSubtypeOfRuntimeType(child, t1).parentData, t2);
        child = childParentData.get$previousSibling(childParentData);
      }
      return false;
    },
    childScrollOffset$1: function(child) {
      return H.interceptedTypeCheck(child.parentData, "$isSliverMultiBoxAdaptorParentData").layoutOffset;
    },
    applyPaintTransform$2: function(child, transform) {
      var rightWayUp, delta, t1, t2, _this = this;
      H.interceptedTypeCheck(child, "$isRenderBox");
      rightWayUp = _this._getRightWayUp$1(H.interceptedTypeCheck(K.RenderObject.prototype.get$constraints.call(_this), "$isSliverConstraints"));
      delta = H.interceptedTypeCheck(child.parentData, "$isSliverMultiBoxAdaptorParentData").layoutOffset - H.interceptedTypeCheck(K.RenderObject.prototype.get$constraints.call(_this), "$isSliverConstraints").scrollOffset;
      switch (G.axisDirectionToAxis(H.interceptedTypeCheck(K.RenderObject.prototype.get$constraints.call(_this), "$isSliverConstraints").axisDirection)) {
        case C.Axis_0:
          if (!H.boolConversionCheck(rightWayUp)) {
            t1 = _this._geometry.paintExtent;
            t2 = child._size._dx;
            if (typeof t2 !== "number")
              return H.iae(t2);
            delta = t1 - t2 - delta;
          }
          transform.translate$2(0, delta, 0);
          break;
        case C.Axis_1:
          if (!H.boolConversionCheck(rightWayUp)) {
            t1 = _this._geometry.paintExtent;
            t2 = child._size._dy;
            if (typeof t2 !== "number")
              return H.iae(t2);
            delta = t1 - t2 - delta;
          }
          transform.translate$2(0, 0, delta);
          break;
      }
    },
    paint$2: function(context, offset) {
      var originOffset, mainAxisUnit, crossAxisUnit, addExtent, child, t1, t2, mainAxisDelta, t3, t4, t5, t6, t7, childOffset, childParentData, _this = this, _null = null;
      if (_this.ContainerRenderObjectMixin__firstChild == null)
        return;
      switch (G.applyGrowthDirectionToAxisDirection(H.interceptedTypeCheck(K.RenderObject.prototype.get$constraints.call(_this), "$isSliverConstraints").axisDirection, H.interceptedTypeCheck(K.RenderObject.prototype.get$constraints.call(_this), "$isSliverConstraints").growthDirection)) {
        case C.AxisDirection_0:
          originOffset = offset.$add(0, new Q.Offset(0, _this._geometry.paintExtent));
          mainAxisUnit = C.Offset_0_m1;
          crossAxisUnit = C.Offset_1_0;
          addExtent = true;
          break;
        case C.AxisDirection_1:
          originOffset = offset;
          mainAxisUnit = C.Offset_1_0;
          crossAxisUnit = C.Offset_0_1;
          addExtent = false;
          break;
        case C.AxisDirection_2:
          originOffset = offset;
          mainAxisUnit = C.Offset_0_1;
          crossAxisUnit = C.Offset_1_0;
          addExtent = false;
          break;
        case C.AxisDirection_3:
          originOffset = offset.$add(0, new Q.Offset(_this._geometry.paintExtent, 0));
          mainAxisUnit = C.Offset_m1_0;
          crossAxisUnit = C.Offset_0_1;
          addExtent = true;
          break;
        default:
          addExtent = _null;
          originOffset = addExtent;
          crossAxisUnit = originOffset;
          mainAxisUnit = crossAxisUnit;
      }
      child = _this.ContainerRenderObjectMixin__firstChild;
      for (t1 = H.getRuntimeTypeArgument(_this, "ContainerRenderObjectMixin", 0), t2 = H.getRuntimeTypeArgument(_this, "ContainerRenderObjectMixin", 1); child != null;) {
        mainAxisDelta = H.interceptedTypeCheck(child.parentData, "$isSliverMultiBoxAdaptorParentData").layoutOffset - H.interceptedTypeCheck(K.RenderObject.prototype.get$constraints.call(_this), "$isSliverConstraints").scrollOffset;
        t3 = originOffset._dx;
        t4 = mainAxisUnit._dx;
        if (typeof t4 !== "number")
          return t4.$mul();
        if (typeof t3 !== "number")
          return t3.$add();
        t5 = crossAxisUnit._dx;
        if (typeof t5 !== "number")
          return t5.$mul();
        t5 = t3 + t4 * mainAxisDelta + t5 * 0;
        t3 = originOffset._dy;
        t6 = mainAxisUnit._dy;
        if (typeof t6 !== "number")
          return t6.$mul();
        if (typeof t3 !== "number")
          return t3.$add();
        t7 = crossAxisUnit._dy;
        if (typeof t7 !== "number")
          return t7.$mul();
        t7 = t3 + t6 * mainAxisDelta + t7 * 0;
        childOffset = new Q.Offset(t5, t7);
        if (H.boolConversionCheck(addExtent)) {
          t3 = _this.paintExtentOf$1(child);
          if (typeof t3 !== "number")
            return H.iae(t3);
          childOffset = new Q.Offset(t5 + t4 * t3, t7 + t6 * t3);
        }
        if (mainAxisDelta < H.interceptedTypeCheck(K.RenderObject.prototype.get$constraints.call(_this), "$isSliverConstraints").remainingPaintExtent) {
          t3 = _this.paintExtentOf$1(child);
          if (typeof t3 !== "number")
            return H.iae(t3);
          t3 = mainAxisDelta + t3 > 0;
        } else
          t3 = false;
        if (t3)
          context.paintChild$2(child, childOffset);
        childParentData = H.assertSubtypeOfRuntimeType(H.assertSubtypeOfRuntimeType(child, t1).parentData, t2);
        child = childParentData.get$nextSibling(childParentData);
      }
    },
    debugDescribeChildren$0: function() {
      var childParentData, t1, t2, indices, _i, index, t3, t4,
        _s17_ = "child with index ",
        children = H.setRuntimeTypeInfo([], [Y.DiagnosticsNode]),
        child = this.ContainerRenderObjectMixin__firstChild;
      if (child != null)
        for (; true;) {
          childParentData = H.interceptedTypeCheck(child.parentData, "$isSliverMultiBoxAdaptorParentData");
          C.JSArray_methods.add$1(children, new Y._DiagnosticableTreeNode(child, _s17_ + H.S(childParentData.index), true, true, null));
          if (child == this.ContainerRenderObjectMixin__lastChild)
            break;
          child = childParentData.ContainerParentDataMixin_nextSibling;
        }
      t1 = this._keepAliveBucket;
      if (t1.get$isNotEmpty(t1)) {
        t2 = t1.get$keys(t1);
        indices = P.List_List$from(t2, true, H.getRuntimeTypeArgument(t2, "Iterable", 0));
        C.JSArray_methods.sort$0(indices);
        for (t2 = indices.length, _i = 0; _i < indices.length; indices.length === t2 || (0, H.throwConcurrentModificationError)(indices), ++_i) {
          index = indices[_i];
          t3 = t1.$index(0, index);
          t4 = _s17_ + H.S(index) + " (kept alive but not laid out)";
          t3.toString;
          C.JSArray_methods.add$1(children, new Y._DiagnosticableTreeNode(t3, t4, true, true, C.DiagnosticsTreeStyle_1));
        }
      }
      return children;
    },
    $asContainerRenderObjectMixin: function() {
      return [S.RenderBox, F.SliverMultiBoxAdaptorParentData];
    }
  };
  F.RenderSliverMultiBoxAdaptor__createOrObtainChild_closure.prototype = {
    call$1: function(constraints) {
      var t1, t2, t3, t4, child, childParentData;
      H.interceptedTypeCheck(constraints, "$isSliverConstraints");
      t1 = this.$this;
      t2 = t1._keepAliveBucket;
      t3 = this.index;
      t4 = this.after;
      if (t2.containsKey$1(0, t3)) {
        child = t2.remove$1(0, t3);
        childParentData = H.interceptedTypeCheck(child.parentData, "$isSliverMultiBoxAdaptorParentData");
        t1.dropChild$1(child);
        child.parentData = childParentData;
        t1.super$ContainerRenderObjectMixin$insert(0, child, t4);
        childParentData._keptAlive = false;
      } else
        t1._childManager.createChild$2$after(t3, t4);
    },
    $signature: 63
  };
  F.RenderSliverMultiBoxAdaptor_collectGarbage_closure.prototype = {
    call$1: function(constraints) {
      var t1, t2, t3;
      H.interceptedTypeCheck(constraints, "$isSliverConstraints");
      for (t1 = this._box_0, t2 = this.$this; t1.leadingGarbage > 0;) {
        t2._destroyOrCacheChild$1(t2.ContainerRenderObjectMixin__firstChild);
        --t1.leadingGarbage;
      }
      for (; t1.trailingGarbage > 0;) {
        t2._destroyOrCacheChild$1(t2.ContainerRenderObjectMixin__lastChild);
        --t1.trailingGarbage;
      }
      t1 = t2._keepAliveBucket;
      t1 = t1.get$values(t1);
      t3 = H.getRuntimeTypeArgument(t1, "Iterable", 0);
      C.JSArray_methods.forEach$1(P.List_List$from(new H.WhereIterable(t1, H.functionTypeCheck(new F.RenderSliverMultiBoxAdaptor_collectGarbage__closure(), {func: 1, ret: P.bool, args: [t3]}), [t3]), true, t3), t2._childManager.get$removeChild());
    },
    $signature: 63
  };
  F.RenderSliverMultiBoxAdaptor_collectGarbage__closure.prototype = {
    call$1: function(child) {
      return !H.interceptedTypeCheck(H.interceptedTypeCheck(child, "$isRenderBox").parentData, "$isSliverMultiBoxAdaptorParentData").KeepAliveParentDataMixin_keepAlive;
    },
    $signature: 119
  };
  F._RenderSliverMultiBoxAdaptor_RenderSliver_ContainerRenderObjectMixin.prototype = {
    attach$1: function(owner) {
      var child;
      H.interceptedTypeCheck(owner, "$isPipelineOwner");
      this.super$RenderObject$attach(owner);
      child = this.ContainerRenderObjectMixin__firstChild;
      for (; child != null;) {
        child.attach$1(owner);
        child = H.interceptedTypeCheck(child.parentData, "$isSliverMultiBoxAdaptorParentData").ContainerParentDataMixin_nextSibling;
      }
    },
    detach$0: function(_) {
      var child;
      this.super$AbstractNode$detach(0);
      child = this.ContainerRenderObjectMixin__firstChild;
      for (; child != null;) {
        child.detach$0(0);
        child = H.interceptedTypeCheck(child.parentData, "$isSliverMultiBoxAdaptorParentData").ContainerParentDataMixin_nextSibling;
      }
    },
    set$_object$_firstChild: function(_firstChild) {
      this.ContainerRenderObjectMixin__firstChild = H.assertSubtypeOfRuntimeType(_firstChild, H.getRuntimeTypeArgument(this, "ContainerRenderObjectMixin", 0));
    },
    set$_object$_lastChild: function(_lastChild) {
      this.ContainerRenderObjectMixin__lastChild = H.assertSubtypeOfRuntimeType(_lastChild, H.getRuntimeTypeArgument(this, "ContainerRenderObjectMixin", 0));
    }
  };
  F._RenderSliverMultiBoxAdaptor_RenderSliver_ContainerRenderObjectMixin_RenderSliverHelpers.prototype = {};
  F._RenderSliverMultiBoxAdaptor_RenderSliver_ContainerRenderObjectMixin_RenderSliverHelpers_RenderSliverWithKeepAliveMixin.prototype = {};
  F._SliverMultiBoxAdaptorParentData_SliverLogicalParentData_ContainerParentDataMixin.prototype = {
    detach$0: function(_) {
      var t1, _this = this;
      _this.super$ParentData$detach(0);
      t1 = _this.ContainerParentDataMixin_previousSibling;
      if (t1 != null)
        H.assertSubtype(t1.parentData, "$isContainerParentDataMixin", [S.RenderBox], "$asContainerParentDataMixin").set$nextSibling(0, _this.ContainerParentDataMixin_nextSibling);
      t1 = _this.ContainerParentDataMixin_nextSibling;
      if (t1 != null)
        H.assertSubtype(t1.parentData, "$isContainerParentDataMixin", [S.RenderBox], "$asContainerParentDataMixin").set$previousSibling(0, _this.ContainerParentDataMixin_previousSibling);
      _this.set$previousSibling(0, null);
      _this.set$nextSibling(0, null);
    },
    set$previousSibling: function(_, previousSibling) {
      this.ContainerParentDataMixin_previousSibling = H.assertSubtypeOfRuntimeType(previousSibling, H.getRuntimeTypeArgument(this, "ContainerParentDataMixin", 0));
    },
    set$nextSibling: function(_, nextSibling) {
      this.ContainerParentDataMixin_nextSibling = H.assertSubtypeOfRuntimeType(nextSibling, H.getRuntimeTypeArgument(this, "ContainerParentDataMixin", 0));
    },
    get$previousSibling: function(receiver) {
      return this.ContainerParentDataMixin_previousSibling;
    },
    get$nextSibling: function(receiver) {
      return this.ContainerParentDataMixin_nextSibling;
    }
  };
  F._SliverMultiBoxAdaptorParentData_SliverLogicalParentData_ContainerParentDataMixin_KeepAliveParentDataMixin.prototype = {};
  T.RenderSliverPadding.prototype = {
    _sliver_padding$_resolve$0: function() {
      if (this._sliver_padding$_resolvedPadding != null)
        return;
      this._sliver_padding$_resolvedPadding = this._sliver_padding$_padding;
    },
    set$padding: function(_, value) {
      var _this = this;
      if (_this._sliver_padding$_padding.$eq(0, value))
        return;
      _this._sliver_padding$_padding = value;
      _this._sliver_padding$_resolvedPadding = null;
      _this.markNeedsLayout$0();
    },
    set$textDirection: function(value) {
      var _this = this;
      if (_this._sliver_padding$_textDirection == value)
        return;
      _this._sliver_padding$_textDirection = value;
      _this._sliver_padding$_resolvedPadding = null;
      _this.markNeedsLayout$0();
    },
    get$beforePadding: function() {
      var _this = this;
      switch (G.applyGrowthDirectionToAxisDirection(H.interceptedTypeCheck(K.RenderObject.prototype.get$constraints.call(_this), "$isSliverConstraints").axisDirection, H.interceptedTypeCheck(K.RenderObject.prototype.get$constraints.call(_this), "$isSliverConstraints").growthDirection)) {
        case C.AxisDirection_0:
          return _this._sliver_padding$_resolvedPadding._bottom;
        case C.AxisDirection_1:
          return _this._sliver_padding$_resolvedPadding._left;
        case C.AxisDirection_2:
          return _this._sliver_padding$_resolvedPadding._top;
        case C.AxisDirection_3:
          return _this._sliver_padding$_resolvedPadding._right;
      }
      return;
    },
    get$afterPadding: function() {
      var _this = this;
      switch (G.applyGrowthDirectionToAxisDirection(H.interceptedTypeCheck(K.RenderObject.prototype.get$constraints.call(_this), "$isSliverConstraints").axisDirection, H.interceptedTypeCheck(K.RenderObject.prototype.get$constraints.call(_this), "$isSliverConstraints").growthDirection)) {
        case C.AxisDirection_0:
          return _this._sliver_padding$_resolvedPadding._top;
        case C.AxisDirection_1:
          return _this._sliver_padding$_resolvedPadding._right;
        case C.AxisDirection_2:
          return _this._sliver_padding$_resolvedPadding._bottom;
        case C.AxisDirection_3:
          return _this._sliver_padding$_resolvedPadding._left;
      }
      return;
    },
    get$crossAxisPadding: function() {
      var t1, t2;
      switch (G.axisDirectionToAxis(H.interceptedTypeCheck(K.RenderObject.prototype.get$constraints.call(this), "$isSliverConstraints").axisDirection)) {
        case C.Axis_0:
          t1 = this._sliver_padding$_resolvedPadding;
          t2 = t1.get$top(t1);
          t1 = t1.get$bottom(t1);
          if (typeof t2 !== "number")
            return t2.$add();
          if (typeof t1 !== "number")
            return H.iae(t1);
          return t2 + t1;
        case C.Axis_1:
          return this._sliver_padding$_resolvedPadding.get$horizontal();
      }
      return;
    },
    setupParentData$1: function(child) {
      if (!(child.parentData instanceof G.SliverPhysicalParentData))
        child.parentData = new G.SliverPhysicalParentData(C.Offset_0_0);
    },
    performLayout$0: function() {
      var beforePadding, mainAxisPadding, crossAxisPadding, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, childLayoutGeometry, beforePaddingPaintExtent, afterPaddingPaintExtent, mainAxisPaddingPaintExtent, beforePaddingCacheExtent, afterPaddingCacheExtent, paintExtent, childParentData, _this = this, _null = null;
      _this._sliver_padding$_resolve$0();
      beforePadding = _this.get$beforePadding();
      _this.get$afterPadding();
      mainAxisPadding = _this._sliver_padding$_resolvedPadding.along$1(G.axisDirectionToAxis(H.interceptedTypeCheck(K.RenderObject.prototype.get$constraints.call(_this), "$isSliverConstraints").axisDirection));
      crossAxisPadding = _this.get$crossAxisPadding();
      t1 = _this.RenderObjectWithChildMixin__child;
      if (t1 == null) {
        t1 = H.interceptedTypeCheck(K.RenderObject.prototype.get$constraints.call(_this), "$isSliverConstraints").remainingPaintExtent;
        _this._geometry = G.SliverGeometry$(_null, false, _null, _null, mainAxisPadding, Math.min(H.checkNum(mainAxisPadding), t1), mainAxisPadding, _null);
        return;
      }
      t2 = H.interceptedTypeCheck(K.RenderObject.prototype.get$constraints.call(_this), "$isSliverConstraints");
      t3 = H.interceptedTypeCheck(K.RenderObject.prototype.get$constraints.call(_this), "$isSliverConstraints").scrollOffset;
      if (typeof beforePadding !== "number")
        return H.iae(beforePadding);
      t3 = Math.max(0, t3 - beforePadding);
      t4 = Math.min(0, H.interceptedTypeCheck(K.RenderObject.prototype.get$constraints.call(_this), "$isSliverConstraints").cacheOrigin + beforePadding);
      t5 = H.interceptedTypeCheck(K.RenderObject.prototype.get$constraints.call(_this), "$isSliverConstraints").remainingPaintExtent;
      t6 = _this.calculatePaintOffset$3$from$to(H.interceptedTypeCheck(K.RenderObject.prototype.get$constraints.call(_this), "$isSliverConstraints"), 0, beforePadding);
      t7 = H.interceptedTypeCheck(K.RenderObject.prototype.get$constraints.call(_this), "$isSliverConstraints").remainingCacheExtent;
      t8 = _this.calculateCacheOffset$3$from$to(H.interceptedTypeCheck(K.RenderObject.prototype.get$constraints.call(_this), "$isSliverConstraints"), 0, beforePadding);
      t9 = H.interceptedTypeCheck(K.RenderObject.prototype.get$constraints.call(_this), "$isSliverConstraints").crossAxisExtent;
      if (typeof t9 !== "number")
        return t9.$sub();
      if (typeof crossAxisPadding !== "number")
        return H.iae(crossAxisPadding);
      t9 = Math.max(0, t9 - crossAxisPadding);
      t10 = t2.axisDirection;
      t11 = t2.growthDirection;
      t12 = t2.userScrollDirection;
      t13 = t2.precedingScrollExtent;
      t14 = t2.crossAxisDirection;
      t2 = t2.viewportMainAxisExtent;
      t1.layout$2$parentUsesSize(G.SliverConstraints$(t10, t4, t14, t9, t11, 0, t13, t7 - t8, t5 - t6, t3, t12, t2), true);
      childLayoutGeometry = _this.RenderObjectWithChildMixin__child._geometry;
      t1 = childLayoutGeometry.scrollOffsetCorrection;
      if (t1 != null) {
        _this._geometry = G.SliverGeometry$(_null, false, _null, _null, 0, 0, 0, t1);
        return;
      }
      beforePaddingPaintExtent = _this.calculatePaintOffset$3$from$to(H.interceptedTypeCheck(K.RenderObject.prototype.get$constraints.call(_this), "$isSliverConstraints"), 0, beforePadding);
      t1 = H.interceptedTypeCheck(K.RenderObject.prototype.get$constraints.call(_this), "$isSliverConstraints");
      t2 = childLayoutGeometry.scrollExtent;
      if (typeof t2 !== "number")
        return H.iae(t2);
      t3 = beforePadding + t2;
      if (typeof mainAxisPadding !== "number")
        return mainAxisPadding.$add();
      t4 = mainAxisPadding + t2;
      afterPaddingPaintExtent = _this.calculatePaintOffset$3$from$to(t1, t3, t4);
      mainAxisPaddingPaintExtent = beforePaddingPaintExtent + afterPaddingPaintExtent;
      beforePaddingCacheExtent = _this.calculateCacheOffset$3$from$to(H.interceptedTypeCheck(K.RenderObject.prototype.get$constraints.call(_this), "$isSliverConstraints"), 0, beforePadding);
      afterPaddingCacheExtent = _this.calculateCacheOffset$3$from$to(H.interceptedTypeCheck(K.RenderObject.prototype.get$constraints.call(_this), "$isSliverConstraints"), t3, t4);
      t3 = childLayoutGeometry.paintExtent;
      t1 = childLayoutGeometry.layoutExtent;
      paintExtent = Math.min(beforePaddingPaintExtent + Math.max(t3, t1 + afterPaddingPaintExtent), H.interceptedTypeCheck(K.RenderObject.prototype.get$constraints.call(_this), "$isSliverConstraints").remainingPaintExtent);
      t1 = Math.min(mainAxisPaddingPaintExtent + t1, paintExtent);
      t5 = Math.min(afterPaddingCacheExtent + beforePaddingCacheExtent + childLayoutGeometry.cacheExtent, H.interceptedTypeCheck(K.RenderObject.prototype.get$constraints.call(_this), "$isSliverConstraints").remainingCacheExtent);
      t6 = childLayoutGeometry.maxPaintExtent;
      if (typeof t6 !== "number")
        return H.iae(t6);
      t3 = Math.max(mainAxisPaddingPaintExtent + t3, beforePaddingPaintExtent + childLayoutGeometry.hitTestExtent);
      _this._geometry = G.SliverGeometry$(t5, childLayoutGeometry.hasVisualOverflow, t3, t1, mainAxisPadding + t6, paintExtent, t4, _null);
      childParentData = H.interceptedTypeCheck(_this.RenderObjectWithChildMixin__child.parentData, "$isSliverPhysicalParentData");
      switch (G.applyGrowthDirectionToAxisDirection(H.interceptedTypeCheck(K.RenderObject.prototype.get$constraints.call(_this), "$isSliverConstraints").axisDirection, H.interceptedTypeCheck(K.RenderObject.prototype.get$constraints.call(_this), "$isSliverConstraints").growthDirection)) {
        case C.AxisDirection_0:
          t1 = _this._sliver_padding$_resolvedPadding._left;
          t3 = H.interceptedTypeCheck(K.RenderObject.prototype.get$constraints.call(_this), "$isSliverConstraints");
          t4 = _this._sliver_padding$_resolvedPadding;
          t5 = t4._bottom;
          if (typeof t5 !== "number")
            return t5.$add();
          t2 = t5 + t2;
          t4 = t4._top;
          if (typeof t4 !== "number")
            return H.iae(t4);
          childParentData.paintOffset = new Q.Offset(t1, _this.calculatePaintOffset$3$from$to(t3, t2, t2 + t4));
          break;
        case C.AxisDirection_1:
          childParentData.paintOffset = new Q.Offset(_this.calculatePaintOffset$3$from$to(H.interceptedTypeCheck(K.RenderObject.prototype.get$constraints.call(_this), "$isSliverConstraints"), 0, _this._sliver_padding$_resolvedPadding._left), _this._sliver_padding$_resolvedPadding._top);
          break;
        case C.AxisDirection_2:
          childParentData.paintOffset = new Q.Offset(_this._sliver_padding$_resolvedPadding._left, _this.calculatePaintOffset$3$from$to(H.interceptedTypeCheck(K.RenderObject.prototype.get$constraints.call(_this), "$isSliverConstraints"), 0, _this._sliver_padding$_resolvedPadding._top));
          break;
        case C.AxisDirection_3:
          t1 = H.interceptedTypeCheck(K.RenderObject.prototype.get$constraints.call(_this), "$isSliverConstraints");
          t3 = _this._sliver_padding$_resolvedPadding;
          t4 = t3._right;
          if (typeof t4 !== "number")
            return t4.$add();
          t2 = t4 + t2;
          t3 = t3._left;
          if (typeof t3 !== "number")
            return H.iae(t3);
          childParentData.paintOffset = new Q.Offset(_this.calculatePaintOffset$3$from$to(t1, t2, t2 + t3), _this._sliver_padding$_resolvedPadding._top);
          break;
      }
    },
    hitTestChildren$3$crossAxisPosition$mainAxisPosition: function(result, crossAxisPosition, mainAxisPosition) {
      var t2, t3, _this = this,
        t1 = _this.RenderObjectWithChildMixin__child;
      if (t1 != null && t1._geometry.hitTestExtent > 0) {
        H.interceptedTypeCheck(t1, "$isRenderSliver");
        t2 = _this.calculatePaintOffset$3$from$to(H.interceptedTypeCheck(K.RenderObject.prototype.get$constraints.call(_this), "$isSliverConstraints"), 0, _this.get$beforePadding());
        t3 = _this.childCrossAxisPosition$1(_this.RenderObjectWithChildMixin__child);
        if (typeof t3 !== "number")
          return H.iae(t3);
        return t1.hitTest$3$crossAxisPosition$mainAxisPosition(result, crossAxisPosition - t3, mainAxisPosition - t2);
      }
      return false;
    },
    childCrossAxisPosition$1: function(child) {
      var _this = this;
      switch (G.applyGrowthDirectionToAxisDirection(H.interceptedTypeCheck(K.RenderObject.prototype.get$constraints.call(_this), "$isSliverConstraints").axisDirection, H.interceptedTypeCheck(K.RenderObject.prototype.get$constraints.call(_this), "$isSliverConstraints").growthDirection)) {
        case C.AxisDirection_0:
        case C.AxisDirection_2:
          return _this._sliver_padding$_resolvedPadding._left;
        case C.AxisDirection_3:
        case C.AxisDirection_1:
          return _this._sliver_padding$_resolvedPadding._top;
      }
      return;
    },
    childScrollOffset$1: function(child) {
      return this.get$beforePadding();
    },
    applyPaintTransform$2: function(child, transform) {
      var t1 = H.interceptedTypeCheck(child.parentData, "$isSliverPhysicalParentData").paintOffset;
      transform.translate$2(0, t1._dx, t1._dy);
    },
    paint$2: function(context, offset) {
      var t1 = this.RenderObjectWithChildMixin__child;
      if (t1 != null && t1._geometry.visible)
        context.paintChild$2(t1, offset.$add(0, H.interceptedTypeCheck(t1.parentData, "$isSliverPhysicalParentData").paintOffset));
    },
    $asRenderObjectWithChildMixin: function() {
      return [G.RenderSliver];
    }
  };
  T._RenderSliverPadding_RenderSliver_RenderObjectWithChildMixin.prototype = {
    attach$1: function(owner) {
      var t1;
      H.interceptedTypeCheck(owner, "$isPipelineOwner");
      this.super$RenderObject$attach(owner);
      t1 = this.RenderObjectWithChildMixin__child;
      if (t1 != null)
        t1.attach$1(owner);
    },
    detach$0: function(_) {
      var t1;
      this.super$AbstractNode$detach(0);
      t1 = this.RenderObjectWithChildMixin__child;
      if (t1 != null)
        t1.detach$0(0);
    },
    set$_object$_child: function(_child) {
      this.RenderObjectWithChildMixin__child = H.assertSubtypeOfRuntimeType(_child, H.getRuntimeTypeArgument(this, "RenderObjectWithChildMixin", 0));
    }
  };
  K.RelativeRect.prototype = {
    $eq: function(_, other) {
      var _this = this;
      if (other == null)
        return false;
      if (_this === other)
        return true;
      if (!(other instanceof K.RelativeRect))
        return false;
      return _this.left == other.left && _this.top == other.top && _this.right === other.right && _this.bottom === other.bottom;
    },
    get$hashCode: function(_) {
      var _this = this;
      return Q.hashValues(_this.left, _this.top, _this.right, _this.bottom, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd);
    },
    toString$0: function(_) {
      var t1 = this.super$Object$toString(0);
      return t1;
    }
  };
  K.StackParentData.prototype = {
    get$isPositioned: function() {
      var _this = this;
      return _this.top != null || _this.right != null || _this.bottom != null || _this.left != null || _this.width != null || false;
    },
    toString$0: function(_) {
      var t1 = this.super$BoxParentData$toString(0);
      return t1;
    },
    $asContainerParentDataMixin: function() {
      return [S.RenderBox];
    },
    $as_ContainerBoxParentData_BoxParentData_ContainerParentDataMixin: function() {
      return [S.RenderBox];
    }
  };
  K.StackFit.prototype = {
    toString$0: function(_) {
      return this._stack$_name;
    }
  };
  K.Overflow.prototype = {
    toString$0: function(_) {
      return this._stack$_name;
    }
  };
  K.RenderStack.prototype = {
    setupParentData$1: function(child) {
      H.interceptedTypeCheck(child, "$isRenderBox");
      if (!(child.parentData instanceof K.StackParentData))
        child.parentData = new K.StackParentData(null, null, C.Offset_0_0);
    },
    _stack$_resolve$0: function() {
      var _this = this;
      if (_this._stack$_resolvedAlignment != null)
        return;
      _this._stack$_resolvedAlignment = _this._stack$_alignment.resolve$1(_this._stack$_textDirection);
    },
    set$alignment: function(value) {
      var _this = this;
      if (_this._stack$_alignment.$eq(0, value))
        return;
      _this._stack$_alignment = value;
      _this._stack$_resolvedAlignment = null;
      _this.markNeedsLayout$0();
    },
    set$textDirection: function(value) {
      var _this = this;
      if (_this._stack$_textDirection == value)
        return;
      _this._stack$_textDirection = value;
      _this._stack$_resolvedAlignment = null;
      _this.markNeedsLayout$0();
    },
    computeDistanceToActualBaseline$1: function(baseline) {
      return this.defaultComputeDistanceToHighestActualBaseline$1(baseline);
    },
    performLayout$0: function() {
      var t1, width, height, nonPositionedConstraints, child, hasNonPositionedChildren, childParentData, childSize, t2, t3, childConstraints, x, y, _this = this;
      _this._stack$_resolve$0();
      _this._hasVisualOverflow = false;
      if (_this.ContainerRenderObjectMixin__childCount === 0) {
        t1 = H.interceptedTypeCheck(K.RenderObject.prototype.get$constraints.call(_this), "$isBoxConstraints");
        _this._size = new Q.Size(C.JSInt_methods.clamp$2(1 / 0, t1.minWidth, t1.maxWidth), C.JSInt_methods.clamp$2(1 / 0, t1.minHeight, t1.maxHeight));
        return;
      }
      width = H.interceptedTypeCheck(K.RenderObject.prototype.get$constraints.call(_this), "$isBoxConstraints").minWidth;
      height = H.interceptedTypeCheck(K.RenderObject.prototype.get$constraints.call(_this), "$isBoxConstraints").minHeight;
      switch (_this._fit) {
        case C.StackFit_0:
          nonPositionedConstraints = H.interceptedTypeCheck(K.RenderObject.prototype.get$constraints.call(_this), "$isBoxConstraints").loosen$0();
          break;
        case C.StackFit_1:
          t1 = H.interceptedTypeCheck(K.RenderObject.prototype.get$constraints.call(_this), "$isBoxConstraints");
          nonPositionedConstraints = S.BoxConstraints$tight(new Q.Size(C.JSInt_methods.clamp$2(1 / 0, t1.minWidth, t1.maxWidth), C.JSInt_methods.clamp$2(1 / 0, t1.minHeight, t1.maxHeight)));
          break;
        case C.StackFit_2:
          nonPositionedConstraints = H.interceptedTypeCheck(K.RenderObject.prototype.get$constraints.call(_this), "$isBoxConstraints");
          break;
        default:
          nonPositionedConstraints = null;
      }
      child = _this.ContainerRenderObjectMixin__firstChild;
      for (hasNonPositionedChildren = false; child != null;) {
        childParentData = H.interceptedTypeCheck(child.parentData, "$isStackParentData");
        if (!childParentData.get$isPositioned()) {
          child.layout$2$parentUsesSize(nonPositionedConstraints, true);
          childSize = child._size;
          t1 = childSize._dx;
          width = Math.max(H.checkNum(width), H.checkNum(t1));
          t1 = childSize._dy;
          height = Math.max(H.checkNum(height), H.checkNum(t1));
          hasNonPositionedChildren = true;
        }
        child = childParentData.ContainerParentDataMixin_nextSibling;
      }
      if (hasNonPositionedChildren)
        _this._size = new Q.Size(width, height);
      else {
        t1 = H.interceptedTypeCheck(K.RenderObject.prototype.get$constraints.call(_this), "$isBoxConstraints");
        _this._size = new Q.Size(C.JSInt_methods.clamp$2(1 / 0, t1.minWidth, t1.maxWidth), C.JSInt_methods.clamp$2(1 / 0, t1.minHeight, t1.maxHeight));
      }
      child = _this.ContainerRenderObjectMixin__firstChild;
      for (; child != null;) {
        childParentData = H.interceptedTypeCheck(child.parentData, "$isStackParentData");
        if (!childParentData.get$isPositioned())
          childParentData.offset = _this._stack$_resolvedAlignment.alongOffset$1(H.interceptedTypeCheck(_this._size.$sub(0, child._size), "$isOffset"));
        else {
          t1 = childParentData.left;
          if (t1 != null && childParentData.right != null) {
            t2 = _this._size._dx;
            t3 = childParentData.right;
            if (typeof t2 !== "number")
              return t2.$sub();
            if (typeof t3 !== "number")
              return H.iae(t3);
            if (typeof t1 !== "number")
              return H.iae(t1);
            childConstraints = C.BoxConstraints_mlX.tighten$1$width(t2 - t3 - t1);
          } else {
            t1 = childParentData.width;
            childConstraints = t1 != null ? C.BoxConstraints_mlX.tighten$1$width(t1) : C.BoxConstraints_mlX;
          }
          t1 = childParentData.top;
          if (t1 != null && childParentData.bottom != null) {
            t2 = _this._size._dy;
            t3 = childParentData.bottom;
            if (typeof t2 !== "number")
              return t2.$sub();
            if (typeof t3 !== "number")
              return H.iae(t3);
            if (typeof t1 !== "number")
              return H.iae(t1);
            childConstraints = childConstraints.tighten$1$height(t2 - t3 - t1);
          }
          child.layout$2$parentUsesSize(childConstraints, true);
          x = childParentData.left;
          if (!(x != null)) {
            t1 = childParentData.right;
            t2 = _this._size;
            t3 = child._size;
            if (t1 != null) {
              t2 = t2._dx;
              if (typeof t2 !== "number")
                return t2.$sub();
              t3 = t3._dx;
              if (typeof t3 !== "number")
                return H.iae(t3);
              x = t2 - t1 - t3;
            } else
              x = _this._stack$_resolvedAlignment.alongOffset$1(H.interceptedTypeCheck(t2.$sub(0, t3), "$isOffset"))._dx;
          }
          if (typeof x !== "number")
            return x.$lt();
          if (!(x < 0)) {
            t1 = child._size._dx;
            if (typeof t1 !== "number")
              return H.iae(t1);
            t2 = _this._size._dx;
            if (typeof t2 !== "number")
              return H.iae(t2);
            t2 = x + t1 > t2;
            t1 = t2;
          } else
            t1 = true;
          if (t1)
            _this._hasVisualOverflow = true;
          y = childParentData.top;
          if (!(y != null)) {
            t1 = childParentData.bottom;
            t2 = _this._size;
            t3 = child._size;
            if (t1 != null) {
              t2 = t2._dy;
              if (typeof t2 !== "number")
                return t2.$sub();
              t3 = t3._dy;
              if (typeof t3 !== "number")
                return H.iae(t3);
              y = t2 - t1 - t3;
            } else
              y = _this._stack$_resolvedAlignment.alongOffset$1(H.interceptedTypeCheck(t2.$sub(0, t3), "$isOffset"))._dy;
          }
          if (typeof y !== "number")
            return y.$lt();
          if (!(y < 0)) {
            t1 = child._size._dy;
            if (typeof t1 !== "number")
              return H.iae(t1);
            t2 = _this._size._dy;
            if (typeof t2 !== "number")
              return H.iae(t2);
            t2 = y + t1 > t2;
            t1 = t2;
          } else
            t1 = true;
          if (t1)
            _this._hasVisualOverflow = true;
          childParentData.offset = new Q.Offset(x, y);
        }
        child = childParentData.ContainerParentDataMixin_nextSibling;
      }
    },
    hitTestChildren$2$position: function(result, position) {
      return this.defaultHitTestChildren$2$position(result, position);
    },
    paintStack$2: function(context, offset) {
      this.defaultPaint$2(context, offset);
    },
    paint$2: function(context, offset) {
      var t1, t2, t3, _this = this;
      if (_this._overflow === C.Overflow_1 && _this._hasVisualOverflow) {
        t1 = _this._needsCompositing;
        t2 = _this._size;
        t3 = t2._dx;
        t2 = t2._dy;
        if (typeof t3 !== "number")
          return H.iae(t3);
        if (typeof t2 !== "number")
          return H.iae(t2);
        context.pushClipRect$4(t1, offset, new Q.Rect(0, 0, 0 + t3, 0 + t2), _this.get$paintStack());
      } else
        _this.defaultPaint$2(context, offset);
    },
    describeApproximatePaintClip$1: function(child) {
      var t1, t2;
      if (this._hasVisualOverflow) {
        t1 = this._size;
        t2 = t1._dx;
        t1 = t1._dy;
        if (typeof t2 !== "number")
          return H.iae(t2);
        if (typeof t1 !== "number")
          return H.iae(t1);
        t1 = new Q.Rect(0, 0, 0 + t2, 0 + t1);
      } else
        t1 = null;
      return t1;
    },
    $asRenderBoxContainerDefaultsMixin: function() {
      return [S.RenderBox, K.StackParentData];
    },
    $asContainerRenderObjectMixin: function() {
      return [S.RenderBox, K.StackParentData];
    }
  };
  K._RenderStack_RenderBox_ContainerRenderObjectMixin.prototype = {
    attach$1: function(owner) {
      var child;
      H.interceptedTypeCheck(owner, "$isPipelineOwner");
      this.super$RenderObject$attach(owner);
      child = this.ContainerRenderObjectMixin__firstChild;
      for (; child != null;) {
        child.attach$1(owner);
        child = H.interceptedTypeCheck(child.parentData, "$isStackParentData").ContainerParentDataMixin_nextSibling;
      }
    },
    detach$0: function(_) {
      var child;
      this.super$AbstractNode$detach(0);
      child = this.ContainerRenderObjectMixin__firstChild;
      for (; child != null;) {
        child.detach$0(0);
        child = H.interceptedTypeCheck(child.parentData, "$isStackParentData").ContainerParentDataMixin_nextSibling;
      }
    },
    set$_object$_firstChild: function(_firstChild) {
      this.ContainerRenderObjectMixin__firstChild = H.assertSubtypeOfRuntimeType(_firstChild, H.getRuntimeTypeArgument(this, "ContainerRenderObjectMixin", 0));
    },
    set$_object$_lastChild: function(_lastChild) {
      this.ContainerRenderObjectMixin__lastChild = H.assertSubtypeOfRuntimeType(_lastChild, H.getRuntimeTypeArgument(this, "ContainerRenderObjectMixin", 0));
    }
  };
  K._RenderStack_RenderBox_ContainerRenderObjectMixin_RenderBoxContainerDefaultsMixin.prototype = {};
  A.ViewConfiguration.prototype = {
    toString$0: function(_) {
      var t1 = this.super$Object$toString(0);
      return t1;
    }
  };
  A.RenderView.prototype = {
    get$size: function(_) {
      return this._view$_size;
    },
    set$configuration: function(value) {
      var t1, _this = this;
      if (_this._view$_configuration === value)
        return;
      _this._view$_configuration = value;
      t1 = _this._updateMatricesAndCreateNewRootLayer$0();
      _this._layer.detach$0(0);
      _this._layer = t1;
      _this.markNeedsPaint$0();
      _this.markNeedsLayout$0();
    },
    _updateMatricesAndCreateNewRootLayer$0: function() {
      var rootLayer, _this = this,
        t1 = _this._view$_configuration.devicePixelRatio,
        t2 = new Float64Array(16),
        t3 = new E.Matrix4(t2);
      t2[15] = 1;
      t2[10] = 1;
      t2[5] = t1;
      t2[0] = t1;
      _this._rootTransform = t3;
      rootLayer = new T.TransformLayer(t3, C.Offset_0_0);
      rootLayer._layer$_webOnlyPaintedBy = _this;
      rootLayer.attach$1(_this);
      return rootLayer;
    },
    performResize$0: function() {
    },
    performLayout$0: function() {
      var t2,
        t1 = this._view$_configuration.size;
      this._view$_size = t1;
      t2 = this.RenderObjectWithChildMixin__child;
      if (t2 != null)
        t2.layout$1(S.BoxConstraints$tight(t1));
    },
    hitTest$2$position: function(result, position) {
      var t1 = this.RenderObjectWithChildMixin__child;
      if (t1 != null)
        t1.hitTest$2$position(result, position);
      C.JSArray_methods.add$1(result._path, new O.HitTestEntry(this));
      return true;
    },
    get$isRepaintBoundary: function() {
      return true;
    },
    paint$2: function(context, offset) {
      var t1 = this.RenderObjectWithChildMixin__child;
      if (t1 != null)
        context.paintChild$2(t1, offset);
    },
    applyPaintTransform$2: function(child, transform) {
      H.interceptedTypeCheck(child, "$isRenderBox");
      transform.multiply$1(0, this._rootTransform);
      this.super$RenderObject$applyPaintTransform(child, transform);
    },
    compositeFrame$0: function() {
      var builder, scene, bounds, t1, t2, t3, t4, t5, t6, t7, canvas, _this = this;
      P.Timeline_startSync("Compositing", C.Map_9aZ6I, null);
      try {
        builder = Q.SceneBuilder_SceneBuilder();
        scene = _this._layer.buildScene$1(builder);
        bounds = _this.get$paintBounds();
        t1 = bounds.get$center();
        t2 = _this._view$_window;
        t3 = t2.devicePixelRatio;
        t4 = bounds.get$center();
        t5 = bounds.get$center()._dy;
        t6 = t2.devicePixelRatio;
        if (typeof t5 !== "number")
          return t5.$sub();
        t7 = X.SystemUiOverlayStyle;
        _this._layer.find$1$1(0, new Q.Offset(t1._dx, 0 / t3), t7);
        switch (T.defaultTargetPlatform()) {
          case C.TargetPlatform_0:
            _this._layer.find$1$1(0, new Q.Offset(t4._dx, t5 - 0 / t6), t7);
            break;
          case C.TargetPlatform_2:
          case C.TargetPlatform_1:
            break;
        }
        t1 = H.interceptedTypeCheck(scene, "$isScene");
        if (t1 instanceof T.LayerScene) {
          t2 = t2._rasterizer;
          t1 = t1.layerTree;
          t2 = t2.surface;
          canvas = t2.canvasCache.acquireCanvas$1($.$get$window().get$physicalSize());
          canvas.clear$0(0);
          t3 = t1.rootLayer;
          t4 = new T.Matrix40(new Float64Array(16));
          t4.setIdentity$0();
          t3.preroll$2(new T.PrerollContext(null), t4);
          t3 = t1.rootLayer.paintBounds;
          if (!t3.get$isEmpty(t3))
            t1.rootLayer.paint$1(new T.PaintContext(canvas, null));
          t2.submitFunction.call$1(canvas);
        } else {
          t2 = $.$get$domRenderer();
          t1 = t1.get$webOnlyRootElement();
          t3 = t2._sceneElement;
          if (t1 == null ? t3 != null : t1 !== t3) {
            if (t3 != null)
              J.remove$0$ax(t3);
            t2._sceneElement = t1;
            t2._sceneHostElement.appendChild(t1);
          }
        }
        scene.dispose$0();
      } finally {
        P.Timeline_finishSync();
      }
    },
    get$paintBounds: function() {
      var t1 = this._view$_size.$mul(0, this._view$_configuration.devicePixelRatio),
        t2 = t1._dx;
      t1 = t1._dy;
      if (typeof t2 !== "number")
        return H.iae(t2);
      if (typeof t1 !== "number")
        return H.iae(t1);
      return new Q.Rect(0, 0, 0 + t2, 0 + t1);
    },
    get$semanticBounds: function() {
      var t1 = this._rootTransform,
        t2 = this._view$_size,
        t3 = t2._dx;
      t2 = t2._dy;
      if (typeof t3 !== "number")
        return H.iae(t3);
      if (typeof t2 !== "number")
        return H.iae(t2);
      return T.MatrixUtils_transformRect(t1, new Q.Rect(0, 0, 0 + t3, 0 + t2));
    },
    $asRenderObjectWithChildMixin: function() {
      return [S.RenderBox];
    }
  };
  A._RenderView_RenderObject_RenderObjectWithChildMixin.prototype = {
    attach$1: function(owner) {
      var t1;
      H.interceptedTypeCheck(owner, "$isPipelineOwner");
      this.super$RenderObject$attach(owner);
      t1 = this.RenderObjectWithChildMixin__child;
      if (t1 != null)
        t1.attach$1(owner);
    },
    detach$0: function(_) {
      var t1;
      this.super$AbstractNode$detach(0);
      t1 = this.RenderObjectWithChildMixin__child;
      if (t1 != null)
        t1.detach$0(0);
    },
    set$_object$_child: function(_child) {
      this.RenderObjectWithChildMixin__child = H.assertSubtypeOfRuntimeType(_child, H.getRuntimeTypeArgument(this, "RenderObjectWithChildMixin", 0));
    }
  };
  Q.RevealedOffset.prototype = {
    toString$0: function(_) {
      return new H.TypeImpl(H.getRti(this)).toString$0(0) + "(offset: " + H.S(this.offset) + ", rect: " + H.S(this.rect) + ")";
    }
  };
  Q.RenderViewportBase.prototype = {
    describeSemanticsConfiguration$1: function(config) {
      this.super$RenderObject$describeSemanticsConfiguration(config);
      if (config._tagsForChildren == null)
        config.set$_tagsForChildren(P.LinkedHashSet_LinkedHashSet(A.SemanticsTag));
      config._tagsForChildren.add$1(0, C.SemanticsTag_FIw);
    },
    visitChildrenForSemantics$1: function(visitor) {
      var t1, t2;
      H.functionTypeCheck(visitor, {func: 1, ret: -1, args: [K.RenderObject]});
      t1 = this.get$childrenInPaintOrder();
      t1.toString;
      t2 = H.getRuntimeTypeArgument(t1, "Iterable", 0);
      new H.WhereIterable(t1, H.functionTypeCheck(new Q.RenderViewportBase_visitChildrenForSemantics_closure(), {func: 1, ret: P.bool, args: [t2]}), [t2]).forEach$1(0, visitor);
    },
    set$axisDirection: function(value) {
      if (value == this._axisDirection)
        return;
      this._axisDirection = value;
      this.markNeedsLayout$0();
    },
    set$crossAxisDirection: function(value) {
      if (value == this._crossAxisDirection)
        return;
      this._crossAxisDirection = value;
      this.markNeedsLayout$0();
    },
    set$offset: function(_, value) {
      var t2, _this = this,
        t1 = _this._viewport$_offset;
      if (value == t1)
        return;
      if (_this._node$_owner != null) {
        t1.toString;
        t2 = H.functionTypeCheck(_this.get$markNeedsLayout(), {func: 1, ret: -1});
        t1 = t1._listeners;
        t1.toString;
        H.assertSubtypeOfRuntimeType(t2, H.getTypeArgumentByIndex(t1, 0));
        t1._isDirty = true;
        C.JSArray_methods.remove$1(t1._list, t2);
      }
      _this._viewport$_offset = value;
      if (_this._node$_owner != null) {
        value.toString;
        t1 = H.functionTypeCheck(_this.get$markNeedsLayout(), {func: 1, ret: -1});
        t2 = value._listeners;
        t2.toString;
        H.assertSubtypeOfRuntimeType(t1, H.getTypeArgumentByIndex(t2, 0));
        t2._isDirty = true;
        C.JSArray_methods.add$1(t2._list, t1);
      }
      _this.markNeedsLayout$0();
    },
    set$cacheExtent: function(value) {
      if (value == null)
        value = 250;
      if (value === this._cacheExtent)
        return;
      this._cacheExtent = value;
      this.markNeedsLayout$0();
    },
    attach$1: function(owner) {
      var t1, t2;
      this.super$_RenderViewportBase_RenderBox_ContainerRenderObjectMixin$attach(H.interceptedTypeCheck(owner, "$isPipelineOwner"));
      t1 = this._viewport$_offset;
      t1.toString;
      t2 = H.functionTypeCheck(this.get$markNeedsLayout(), {func: 1, ret: -1});
      t1 = t1._listeners;
      t1.toString;
      H.assertSubtypeOfRuntimeType(t2, H.getTypeArgumentByIndex(t1, 0));
      t1._isDirty = true;
      C.JSArray_methods.add$1(t1._list, t2);
    },
    detach$0: function(_) {
      var t2,
        t1 = this._viewport$_offset;
      t1.toString;
      t2 = H.functionTypeCheck(this.get$markNeedsLayout(), {func: 1, ret: -1});
      t1 = t1._listeners;
      t1.toString;
      H.assertSubtypeOfRuntimeType(t2, H.getTypeArgumentByIndex(t1, 0));
      t1._isDirty = true;
      C.JSArray_methods.remove$1(t1._list, t2);
      this.super$_RenderViewportBase_RenderBox_ContainerRenderObjectMixin$detach(0);
    },
    get$isRepaintBoundary: function() {
      return true;
    },
    layoutChildSequence$11$advance$cacheOrigin$child$crossAxisExtent$growthDirection$layoutOffset$mainAxisExtent$overlap$remainingCacheExtent$remainingPaintExtent$scrollOffset: function(advance, cacheOrigin, child, crossAxisExtent, growthDirection, layoutOffset, mainAxisExtent, overlap, remainingCacheExtent, remainingPaintExtent, scrollOffset) {
      var adjustedUserScrollDirection, maxPaintOffset, layoutOffset0, precedingScrollExtent, sliverScrollOffset, correctedCacheOrigin, cacheExtentCorrection, t1, childLayoutGeometry, effectiveLayoutOffset, _this = this;
      H.functionTypeCheck(advance, {func: 1, ret: G.RenderSliver, args: [G.RenderSliver]});
      adjustedUserScrollDirection = G.applyGrowthDirectionToScrollDirection(_this._viewport$_offset._userScrollDirection, growthDirection);
      maxPaintOffset = layoutOffset + overlap;
      for (layoutOffset0 = layoutOffset, precedingScrollExtent = 0; child != null;) {
        sliverScrollOffset = scrollOffset <= 0 ? 0 : scrollOffset;
        correctedCacheOrigin = Math.max(cacheOrigin, -sliverScrollOffset);
        cacheExtentCorrection = cacheOrigin - correctedCacheOrigin;
        t1 = _this._axisDirection;
        if (typeof remainingPaintExtent !== "number")
          return remainingPaintExtent.$sub();
        child.layout$2$parentUsesSize(new G.SliverConstraints(t1, growthDirection, adjustedUserScrollDirection, sliverScrollOffset, precedingScrollExtent, maxPaintOffset - layoutOffset0, Math.max(0, remainingPaintExtent - layoutOffset0 + layoutOffset), crossAxisExtent, _this._crossAxisDirection, mainAxisExtent, correctedCacheOrigin, Math.max(0, remainingCacheExtent + cacheExtentCorrection)), true);
        childLayoutGeometry = child._geometry;
        t1 = childLayoutGeometry.scrollOffsetCorrection;
        if (t1 != null)
          return t1;
        effectiveLayoutOffset = layoutOffset0 + 0;
        if (childLayoutGeometry.visible || scrollOffset > 0)
          _this.updateChildLayoutOffset$3(child, effectiveLayoutOffset, growthDirection);
        else
          _this.updateChildLayoutOffset$3(child, -scrollOffset + layoutOffset, growthDirection);
        maxPaintOffset = Math.max(effectiveLayoutOffset + childLayoutGeometry.paintExtent, maxPaintOffset);
        t1 = childLayoutGeometry.scrollExtent;
        if (typeof t1 !== "number")
          return H.iae(t1);
        scrollOffset -= t1;
        precedingScrollExtent += t1;
        layoutOffset0 += childLayoutGeometry.layoutExtent;
        t1 = childLayoutGeometry.cacheExtent;
        if (t1 !== 0) {
          remainingCacheExtent -= t1 - cacheExtentCorrection;
          cacheOrigin = Math.min(correctedCacheOrigin + t1, 0);
        }
        _this.updateOutOfBandData$2(growthDirection, childLayoutGeometry);
        child = advance.call$1(child);
      }
      return 0;
    },
    describeApproximatePaintClip$1: function(child) {
      var t1, t2, right, bottom, overlapCorrection, $top, left;
      H.interceptedTypeCheck(child, "$isRenderSliver");
      t1 = this._size;
      t2 = t1._dx;
      t1 = t1._dy;
      if (typeof t2 !== "number")
        return H.iae(t2);
      right = 0 + t2;
      if (typeof t1 !== "number")
        return H.iae(t1);
      bottom = 0 + t1;
      if (H.interceptedTypeCheck(K.RenderObject.prototype.get$constraints.call(child), "$isSliverConstraints").overlap === 0)
        return new Q.Rect(0, 0, right, bottom);
      t1 = H.interceptedTypeCheck(K.RenderObject.prototype.get$constraints.call(child), "$isSliverConstraints").viewportMainAxisExtent;
      t2 = H.interceptedTypeCheck(K.RenderObject.prototype.get$constraints.call(child), "$isSliverConstraints").remainingPaintExtent;
      if (typeof t1 !== "number")
        return t1.$sub();
      overlapCorrection = t1 - t2 + H.interceptedTypeCheck(K.RenderObject.prototype.get$constraints.call(child), "$isSliverConstraints").overlap;
      switch (G.applyGrowthDirectionToAxisDirection(this._axisDirection, H.interceptedTypeCheck(K.RenderObject.prototype.get$constraints.call(child), "$isSliverConstraints").growthDirection)) {
        case C.AxisDirection_2:
          $top = 0 + overlapCorrection;
          left = 0;
          break;
        case C.AxisDirection_0:
          bottom -= overlapCorrection;
          left = 0;
          $top = 0;
          break;
        case C.AxisDirection_1:
          left = 0 + overlapCorrection;
          $top = 0;
          break;
        case C.AxisDirection_3:
          right -= overlapCorrection;
          left = 0;
          $top = 0;
          break;
        default:
          left = 0;
          $top = 0;
      }
      return new Q.Rect(left, $top, right, bottom);
    },
    describeSemanticsClip$1: function(child) {
      var t1, t2, t3, _this = this;
      H.interceptedTypeCheck(child, "$isRenderSliver");
      t1 = _this._size;
      t2 = t1._dx;
      t1 = t1._dy;
      if (typeof t2 !== "number")
        return H.iae(t2);
      t2 = 0 + t2;
      if (typeof t1 !== "number")
        return H.iae(t1);
      t1 = 0 + t1;
      switch (G.axisDirectionToAxis(_this._axisDirection)) {
        case C.Axis_1:
          t3 = _this._cacheExtent;
          return new Q.Rect(0, 0 - t3, t2, t1 + t3);
        case C.Axis_0:
          t3 = _this._cacheExtent;
          return new Q.Rect(0 - t3, 0, t2 + t3, t1);
      }
      return;
    },
    paint$2: function(context, offset) {
      var t1, t2, t3, _this = this;
      if (_this.ContainerRenderObjectMixin__firstChild == null)
        return;
      if (_this.get$hasVisualOverflow()) {
        t1 = _this._needsCompositing;
        t2 = _this._size;
        t3 = t2._dx;
        t2 = t2._dy;
        if (typeof t3 !== "number")
          return H.iae(t3);
        if (typeof t2 !== "number")
          return H.iae(t2);
        context.pushClipRect$4(t1, offset, new Q.Rect(0, 0, 0 + t3, 0 + t2), _this.get$_paintContents());
      } else
        _this._paintContents$2(context, offset);
    },
    _paintContents$2: function(context, offset) {
      var t1, t2, t3, t4, t5, t6;
      for (t1 = this.get$childrenInPaintOrder(), t1 = new P._SyncStarIterator(t1._outerHelper(), [H.getTypeArgumentByIndex(t1, 0)]), t2 = offset._dx, t3 = offset._dy; t1.moveNext$0();) {
        t4 = t1.get$current(t1);
        if (t4._geometry.visible) {
          t5 = this.paintOffsetOf$1(t4);
          t6 = t5._dx;
          if (typeof t2 !== "number")
            return t2.$add();
          if (typeof t6 !== "number")
            return H.iae(t6);
          t5 = t5._dy;
          if (typeof t3 !== "number")
            return t3.$add();
          if (typeof t5 !== "number")
            return H.iae(t5);
          context.paintChild$2(t4, new Q.Offset(t2 + t6, t3 + t5));
        }
      }
    },
    hitTestChildren$2$position: function(result, position) {
      var mainAxisPosition, crossAxisPosition, t1, t2;
      switch (G.axisDirectionToAxis(this._axisDirection)) {
        case C.Axis_1:
          mainAxisPosition = position._dy;
          crossAxisPosition = position._dx;
          break;
        case C.Axis_0:
          mainAxisPosition = position._dx;
          crossAxisPosition = position._dy;
          break;
        default:
          mainAxisPosition = null;
          crossAxisPosition = null;
      }
      for (t1 = this.get$childrenInHitTestOrder(), t1 = new P._SyncStarIterator(t1._outerHelper(), [H.getTypeArgumentByIndex(t1, 0)]); t1.moveNext$0();) {
        t2 = t1.get$current(t1);
        if (t2._geometry.visible && t2.hitTest$3$crossAxisPosition$mainAxisPosition(result, crossAxisPosition, this.computeChildMainAxisPosition$2(t2, mainAxisPosition)))
          return true;
      }
      return false;
    },
    getOffsetToReveal$3$rect: function(target, alignment, rect) {
      var onlySlivers, pivot, child, leadingScrollOffset, t1, pivotParent, bounds, growthDirection, offset, t2, targetMainAxisExtent, extentOfPinnedSlivers, mainAxisExtent, targetOffset, offsetDifference, transform, targetRect, _this = this, _null = null;
      if (rect == null)
        rect = target.get$paintBounds();
      onlySlivers = !!target.$isRenderSliver;
      for (pivot = _null, child = target, leadingScrollOffset = 0; t1 = child._node$_parent, t1 !== _this;) {
        if (child instanceof S.RenderBox)
          pivot = child;
        if (t1 instanceof G.RenderSliver) {
          t1 = t1.childScrollOffset$1(child);
          if (typeof t1 !== "number")
            return H.iae(t1);
          leadingScrollOffset += t1;
        } else {
          leadingScrollOffset = 0;
          onlySlivers = false;
        }
        child = H.interceptedTypeCheck(child._node$_parent, "$isRenderObject");
      }
      if (pivot != null) {
        pivotParent = H.interceptedTypeCheck(pivot._node$_parent, "$isRenderSliver");
        bounds = T.MatrixUtils_transformRect(target.getTransformTo$1(0, pivot), rect);
        growthDirection = H.interceptedTypeCheck(K.RenderObject.prototype.get$constraints.call(pivotParent), "$isSliverConstraints").growthDirection;
        switch (G.applyGrowthDirectionToAxisDirection(_this._axisDirection, growthDirection)) {
          case C.AxisDirection_0:
            switch (growthDirection) {
              case C.GrowthDirection_0:
                offset = bounds.bottom;
                break;
              case C.GrowthDirection_1:
                offset = bounds.top;
                break;
              default:
                offset = _null;
            }
            t1 = pivot._size._dy;
            if (typeof t1 !== "number")
              return t1.$sub();
            if (typeof offset !== "number")
              return H.iae(offset);
            leadingScrollOffset += t1 - offset;
            t1 = bounds.bottom;
            t2 = bounds.top;
            if (typeof t1 !== "number")
              return t1.$sub();
            if (typeof t2 !== "number")
              return H.iae(t2);
            targetMainAxisExtent = t1 - t2;
            break;
          case C.AxisDirection_1:
            t1 = bounds.left;
            if (typeof t1 !== "number")
              return H.iae(t1);
            leadingScrollOffset += t1;
            t2 = bounds.right;
            if (typeof t2 !== "number")
              return t2.$sub();
            targetMainAxisExtent = t2 - t1;
            break;
          case C.AxisDirection_2:
            t1 = bounds.top;
            if (typeof t1 !== "number")
              return H.iae(t1);
            leadingScrollOffset += t1;
            t2 = bounds.bottom;
            if (typeof t2 !== "number")
              return t2.$sub();
            targetMainAxisExtent = t2 - t1;
            break;
          case C.AxisDirection_3:
            switch (growthDirection) {
              case C.GrowthDirection_0:
                offset = bounds.right;
                break;
              case C.GrowthDirection_1:
                offset = bounds.left;
                break;
              default:
                offset = _null;
            }
            t1 = pivot._size._dx;
            if (typeof t1 !== "number")
              return t1.$sub();
            if (typeof offset !== "number")
              return H.iae(offset);
            leadingScrollOffset += t1 - offset;
            t1 = bounds.right;
            t2 = bounds.left;
            if (typeof t1 !== "number")
              return t1.$sub();
            if (typeof t2 !== "number")
              return H.iae(t2);
            targetMainAxisExtent = t1 - t2;
            break;
          default:
            targetMainAxisExtent = _null;
        }
      } else if (onlySlivers)
        targetMainAxisExtent = H.interceptedTypeCheck(target, "$isRenderSliver")._geometry.scrollExtent;
      else
        return new Q.RevealedOffset(_this._viewport$_offset._pixels, rect);
      H.interceptedTypeCheck(child, "$isRenderSliver");
      extentOfPinnedSlivers = _this.maxScrollObstructionExtentBefore$1(child);
      leadingScrollOffset = _this.scrollOffsetOf$2(child, leadingScrollOffset);
      switch (H.interceptedTypeCheck(K.RenderObject.prototype.get$constraints.call(child), "$isSliverConstraints").growthDirection) {
        case C.GrowthDirection_0:
          if (typeof leadingScrollOffset !== "number")
            return leadingScrollOffset.$sub();
          if (typeof extentOfPinnedSlivers !== "number")
            return H.iae(extentOfPinnedSlivers);
          leadingScrollOffset -= extentOfPinnedSlivers;
          break;
        case C.GrowthDirection_1:
          break;
      }
      switch (G.axisDirectionToAxis(_this._axisDirection)) {
        case C.Axis_0:
          t1 = _this._size._dx;
          if (typeof t1 !== "number")
            return t1.$sub();
          if (typeof extentOfPinnedSlivers !== "number")
            return H.iae(extentOfPinnedSlivers);
          mainAxisExtent = t1 - extentOfPinnedSlivers;
          break;
        case C.Axis_1:
          t1 = _this._size._dy;
          if (typeof t1 !== "number")
            return t1.$sub();
          if (typeof extentOfPinnedSlivers !== "number")
            return H.iae(extentOfPinnedSlivers);
          mainAxisExtent = t1 - extentOfPinnedSlivers;
          break;
        default:
          mainAxisExtent = _null;
      }
      if (typeof mainAxisExtent !== "number")
        return mainAxisExtent.$sub();
      if (typeof targetMainAxisExtent !== "number")
        return H.iae(targetMainAxisExtent);
      if (typeof leadingScrollOffset !== "number")
        return leadingScrollOffset.$sub();
      targetOffset = leadingScrollOffset - (mainAxisExtent - targetMainAxisExtent) * alignment;
      t1 = _this._viewport$_offset._pixels;
      if (typeof t1 !== "number")
        return t1.$sub();
      offsetDifference = t1 - targetOffset;
      transform = target.getTransformTo$1(0, _this);
      _this.applyPaintTransform$2(child, transform);
      targetRect = T.MatrixUtils_transformRect(transform, rect);
      switch (_this._axisDirection) {
        case C.AxisDirection_2:
          targetRect = targetRect.translate$2(0, 0, offsetDifference);
          break;
        case C.AxisDirection_1:
          targetRect = targetRect.translate$2(0, offsetDifference, 0);
          break;
        case C.AxisDirection_0:
          targetRect = targetRect.translate$2(0, 0, -offsetDifference);
          break;
        case C.AxisDirection_3:
          targetRect = targetRect.translate$2(0, -offsetDifference, 0);
          break;
      }
      return new Q.RevealedOffset(targetOffset, targetRect);
    },
    computeAbsolutePaintOffset$3: function(child, layoutOffset, growthDirection) {
      var t1, t2;
      switch (G.applyGrowthDirectionToAxisDirection(this._axisDirection, growthDirection)) {
        case C.AxisDirection_0:
          t1 = this._size._dy;
          t2 = child._geometry.paintExtent;
          if (typeof t1 !== "number")
            return t1.$sub();
          return new Q.Offset(0, t1 - (layoutOffset + t2));
        case C.AxisDirection_1:
          return new Q.Offset(layoutOffset, 0);
        case C.AxisDirection_2:
          return new Q.Offset(0, layoutOffset);
        case C.AxisDirection_3:
          t1 = this._size._dx;
          t2 = child._geometry.paintExtent;
          if (typeof t1 !== "number")
            return t1.$sub();
          return new Q.Offset(t1 - (layoutOffset + t2), 0);
      }
      return;
    },
    debugDescribeChildren$0: function() {
      var count, t1, t2, t3, childParentData, _this = this,
        children = H.setRuntimeTypeInfo([], [Y.DiagnosticsNode]),
        child = _this.ContainerRenderObjectMixin__firstChild;
      if (child == null)
        return children;
      count = _this.get$indexOfFirstChild();
      for (t1 = H.getRuntimeTypeArgument(_this, "ContainerRenderObjectMixin", 0), t2 = H.getRuntimeTypeArgument(_this, "ContainerRenderObjectMixin", 1); true;) {
        t3 = _this.labelForChild$1(count);
        child.toString;
        C.JSArray_methods.add$1(children, new Y._DiagnosticableTreeNode(child, t3, true, true, null));
        if (child == _this.ContainerRenderObjectMixin__lastChild)
          break;
        ++count;
        childParentData = H.assertSubtypeOfRuntimeType(H.assertSubtypeOfRuntimeType(child, t1).parentData, t2);
        child = childParentData.get$nextSibling(childParentData);
      }
      return children;
    },
    showOnScreen$4$curve$descendant$duration$rect: function(curve, descendant, duration, rect) {
      var _this = this;
      if (!_this._viewport$_offset.physics.get$allowImplicitScrolling())
        return _this.super$RenderObject$showOnScreen(curve, descendant, duration, rect);
      _this.super$RenderObject$showOnScreen(curve, null, duration, Q.RenderViewportBase_showInViewport(curve, descendant, duration, _this._viewport$_offset, rect, _this));
    },
    showOnScreen$0: function() {
      return this.showOnScreen$4$curve$descendant$duration$rect(C.Cubic_JUR0, null, C.Duration_0, null);
    },
    $asContainerRenderObjectMixin: function(ParentDataClass) {
      return [G.RenderSliver, ParentDataClass];
    },
    $isRenderAbstractViewport: 1
  };
  Q.RenderViewportBase_visitChildrenForSemantics_closure.prototype = {
    call$1: function(sliver) {
      var t1 = H.interceptedTypeCheck(sliver, "$isRenderSliver")._geometry;
      return t1.visible || t1.cacheExtent > 0;
    },
    $signature: 120
  };
  Q.RenderViewport.prototype = {
    setupParentData$1: function(child) {
      if (!(child.parentData instanceof G.SliverPhysicalContainerParentData))
        child.parentData = new G.SliverPhysicalContainerParentData(null, null, C.Offset_0_0);
    },
    set$anchor: function(value) {
      if (value === this._anchor)
        return;
      this._anchor = value;
      this.markNeedsLayout$0();
    },
    set$center: function(value) {
      if (value == this._viewport$_center)
        return;
      this._viewport$_center = value;
      this.markNeedsLayout$0();
    },
    get$sizedByParent: function() {
      return true;
    },
    performResize$0: function() {
      var _this = this,
        t1 = H.interceptedTypeCheck(K.RenderObject.prototype.get$constraints.call(_this), "$isBoxConstraints"),
        t2 = C.JSInt_methods.clamp$2(1 / 0, t1.minWidth, t1.maxWidth);
      t1 = C.JSInt_methods.clamp$2(1 / 0, t1.minHeight, t1.maxHeight);
      _this._size = new Q.Size(t2, t1);
      switch (G.axisDirectionToAxis(_this._axisDirection)) {
        case C.Axis_1:
          _this._viewport$_offset.applyViewportDimension$1(t1);
          break;
        case C.Axis_0:
          _this._viewport$_offset.applyViewportDimension$1(t2);
          break;
      }
    },
    performLayout$0: function() {
      var t1, mainAxisExtent, crossAxisExtent, t2, correction, t3, t4, t5, count, _this = this;
      if (_this._viewport$_center == null) {
        _this._viewport$_maxScrollExtent = _this._viewport$_minScrollExtent = 0;
        _this._viewport$_hasVisualOverflow = false;
        _this._viewport$_offset.applyContentDimensions$2(0, 0);
        return;
      }
      switch (G.axisDirectionToAxis(_this._axisDirection)) {
        case C.Axis_1:
          t1 = _this._size;
          mainAxisExtent = t1._dy;
          crossAxisExtent = t1._dx;
          break;
        case C.Axis_0:
          t1 = _this._size;
          mainAxisExtent = t1._dx;
          crossAxisExtent = t1._dy;
          break;
        default:
          mainAxisExtent = null;
          crossAxisExtent = null;
      }
      t1 = 0;
      do {
        t2 = _this._viewport$_offset._pixels;
        if (typeof t2 !== "number")
          return t2.$add();
        correction = _this._attemptLayout$3(mainAxisExtent, crossAxisExtent, t2 + 0);
        if (correction !== 0)
          _this._viewport$_offset.correctBy$1(correction);
        else {
          t2 = _this._viewport$_offset;
          t3 = _this._viewport$_minScrollExtent;
          t4 = _this._anchor;
          if (typeof mainAxisExtent !== "number")
            return mainAxisExtent.$mul();
          if (typeof t3 !== "number")
            return t3.$add();
          t3 = Math.min(0, t3 + mainAxisExtent * t4);
          t5 = _this._viewport$_maxScrollExtent;
          if (typeof t5 !== "number")
            return t5.$sub();
          t2.applyContentDimensions$2(t3, Math.max(0, t5 - mainAxisExtent * (1 - t4)));
          break;
        }
        count = t1 + 1;
        if (count < 10) {
          t1 = count;
          continue;
        } else
          break;
      } while (true);
    },
    _attemptLayout$3: function(mainAxisExtent, crossAxisExtent, correctedOffset) {
      var t1, centerOffset, reverseDirectionRemainingPaintExtent, forwardDirectionRemainingPaintExtent, t2, fullCacheExtent, centerCacheOffset, reverseDirectionRemainingCacheExtent, forwardDirectionRemainingCacheExtent, childParentData, leadingNegativeChild, t3, result, t4, _this = this;
      _this._viewport$_maxScrollExtent = _this._viewport$_minScrollExtent = 0;
      _this._viewport$_hasVisualOverflow = false;
      t1 = _this._anchor;
      if (typeof mainAxisExtent !== "number")
        return mainAxisExtent.$mul();
      centerOffset = mainAxisExtent * t1 - correctedOffset;
      reverseDirectionRemainingPaintExtent = C.JSNumber_methods.clamp$2(centerOffset, 0, mainAxisExtent);
      t1 = mainAxisExtent - centerOffset;
      forwardDirectionRemainingPaintExtent = C.JSNumber_methods.clamp$2(t1, 0, mainAxisExtent);
      t2 = _this._cacheExtent;
      fullCacheExtent = mainAxisExtent + 2 * t2;
      centerCacheOffset = centerOffset + t2;
      reverseDirectionRemainingCacheExtent = C.JSNumber_methods.clamp$2(centerCacheOffset, 0, fullCacheExtent);
      forwardDirectionRemainingCacheExtent = C.JSNumber_methods.clamp$2(fullCacheExtent - centerCacheOffset, 0, fullCacheExtent);
      childParentData = H.assertSubtypeOfRuntimeType(H.assertSubtypeOfRuntimeType(_this._viewport$_center, H.getRuntimeTypeArgument(_this, "ContainerRenderObjectMixin", 0)).parentData, H.getRuntimeTypeArgument(_this, "ContainerRenderObjectMixin", 1));
      leadingNegativeChild = childParentData.get$previousSibling(childParentData);
      t2 = leadingNegativeChild == null;
      if (!t2) {
        t3 = Math.max(mainAxisExtent, centerOffset);
        result = _this.layoutChildSequence$11$advance$cacheOrigin$child$crossAxisExtent$growthDirection$layoutOffset$mainAxisExtent$overlap$remainingCacheExtent$remainingPaintExtent$scrollOffset(_this.get$childBefore(), C.JSNumber_methods.clamp$2(t1, -_this._cacheExtent, 0), leadingNegativeChild, crossAxisExtent, C.GrowthDirection_1, forwardDirectionRemainingPaintExtent, mainAxisExtent, 0, reverseDirectionRemainingCacheExtent, reverseDirectionRemainingPaintExtent, t3 - mainAxisExtent);
        if (result !== 0) {
          if (typeof result !== "number")
            return result.$negate();
          return -result;
        }
      }
      t1 = _this._viewport$_center;
      t3 = -centerOffset;
      t4 = Math.max(0, t3);
      t2 = t2 ? Math.min(0, t3) : 0;
      t3 = centerOffset >= mainAxisExtent ? centerOffset : reverseDirectionRemainingPaintExtent;
      return _this.layoutChildSequence$11$advance$cacheOrigin$child$crossAxisExtent$growthDirection$layoutOffset$mainAxisExtent$overlap$remainingCacheExtent$remainingPaintExtent$scrollOffset(_this.get$childAfter(), C.JSNumber_methods.clamp$2(centerOffset, -_this._cacheExtent, 0), t1, crossAxisExtent, C.GrowthDirection_0, t3, mainAxisExtent, t2, forwardDirectionRemainingCacheExtent, forwardDirectionRemainingPaintExtent, t4);
    },
    get$hasVisualOverflow: function() {
      return this._viewport$_hasVisualOverflow;
    },
    updateOutOfBandData$2: function(growthDirection, childLayoutGeometry) {
      var t1, t2, _this = this;
      switch (growthDirection) {
        case C.GrowthDirection_0:
          t1 = _this._viewport$_maxScrollExtent;
          t2 = childLayoutGeometry.scrollExtent;
          if (typeof t1 !== "number")
            return t1.$add();
          if (typeof t2 !== "number")
            return H.iae(t2);
          _this._viewport$_maxScrollExtent = t1 + t2;
          break;
        case C.GrowthDirection_1:
          t1 = _this._viewport$_minScrollExtent;
          t2 = childLayoutGeometry.scrollExtent;
          if (typeof t1 !== "number")
            return t1.$sub();
          if (typeof t2 !== "number")
            return H.iae(t2);
          _this._viewport$_minScrollExtent = t1 - t2;
          break;
      }
      if (childLayoutGeometry.hasVisualOverflow)
        _this._viewport$_hasVisualOverflow = true;
    },
    updateChildLayoutOffset$3: function(child, layoutOffset, growthDirection) {
      H.interceptedTypeCheck(child.parentData, "$isSliverPhysicalParentData").paintOffset = this.computeAbsolutePaintOffset$3(child, layoutOffset, growthDirection);
    },
    paintOffsetOf$1: function(child) {
      return H.interceptedTypeCheck(child.parentData, "$isSliverPhysicalParentData").paintOffset;
    },
    scrollOffsetOf$2: function(child, scrollOffsetWithinChild) {
      var current, t1, t2, scrollOffsetToChild, t3, childParentData, _this = this;
      switch (H.interceptedTypeCheck(K.RenderObject.prototype.get$constraints.call(child), "$isSliverConstraints").growthDirection) {
        case C.GrowthDirection_0:
          current = _this._viewport$_center;
          for (t1 = H.getRuntimeTypeArgument(_this, "ContainerRenderObjectMixin", 0), t2 = H.getRuntimeTypeArgument(_this, "ContainerRenderObjectMixin", 1), scrollOffsetToChild = 0; current != child;) {
            t3 = current._geometry.scrollExtent;
            if (typeof t3 !== "number")
              return H.iae(t3);
            scrollOffsetToChild += t3;
            childParentData = H.assertSubtypeOfRuntimeType(H.assertSubtypeOfRuntimeType(current, t1).parentData, t2);
            current = childParentData.get$nextSibling(childParentData);
          }
          return scrollOffsetToChild + scrollOffsetWithinChild;
        case C.GrowthDirection_1:
          t1 = H.getRuntimeTypeArgument(_this, "ContainerRenderObjectMixin", 0);
          t2 = H.getRuntimeTypeArgument(_this, "ContainerRenderObjectMixin", 1);
          childParentData = H.assertSubtypeOfRuntimeType(H.assertSubtypeOfRuntimeType(_this._viewport$_center, t1).parentData, t2);
          current = childParentData.get$previousSibling(childParentData);
          for (scrollOffsetToChild = 0; current != child;) {
            t3 = current._geometry.scrollExtent;
            if (typeof t3 !== "number")
              return H.iae(t3);
            scrollOffsetToChild -= t3;
            childParentData = H.assertSubtypeOfRuntimeType(H.assertSubtypeOfRuntimeType(current, t1).parentData, t2);
            current = childParentData.get$previousSibling(childParentData);
          }
          return scrollOffsetToChild - scrollOffsetWithinChild;
      }
      return;
    },
    maxScrollObstructionExtentBefore$1: function(child) {
      var current, t1, t2, childParentData, _this = this;
      switch (H.interceptedTypeCheck(K.RenderObject.prototype.get$constraints.call(child), "$isSliverConstraints").growthDirection) {
        case C.GrowthDirection_0:
          current = _this._viewport$_center;
          for (t1 = H.getRuntimeTypeArgument(_this, "ContainerRenderObjectMixin", 0), t2 = H.getRuntimeTypeArgument(_this, "ContainerRenderObjectMixin", 1); current != child;) {
            current._geometry.toString;
            childParentData = H.assertSubtypeOfRuntimeType(H.assertSubtypeOfRuntimeType(current, t1).parentData, t2);
            current = childParentData.get$nextSibling(childParentData);
          }
          return 0;
        case C.GrowthDirection_1:
          t1 = H.getRuntimeTypeArgument(_this, "ContainerRenderObjectMixin", 0);
          t2 = H.getRuntimeTypeArgument(_this, "ContainerRenderObjectMixin", 1);
          childParentData = H.assertSubtypeOfRuntimeType(H.assertSubtypeOfRuntimeType(_this._viewport$_center, t1).parentData, t2);
          current = childParentData.get$previousSibling(childParentData);
          for (; current != child;) {
            current._geometry.toString;
            childParentData = H.assertSubtypeOfRuntimeType(H.assertSubtypeOfRuntimeType(current, t1).parentData, t2);
            current = childParentData.get$previousSibling(childParentData);
          }
          return 0;
      }
      return;
    },
    applyPaintTransform$2: function(child, transform) {
      var t1 = H.interceptedTypeCheck(child.parentData, "$isSliverPhysicalParentData").paintOffset;
      transform.translate$2(0, t1._dx, t1._dy);
    },
    computeChildMainAxisPosition$2: function(child, parentMainAxisPosition) {
      var t1, t2,
        childParentData = H.interceptedTypeCheck(child.parentData, "$isSliverPhysicalParentData");
      switch (G.applyGrowthDirectionToAxisDirection(H.interceptedTypeCheck(K.RenderObject.prototype.get$constraints.call(child), "$isSliverConstraints").axisDirection, H.interceptedTypeCheck(K.RenderObject.prototype.get$constraints.call(child), "$isSliverConstraints").growthDirection)) {
        case C.AxisDirection_2:
          t1 = childParentData.paintOffset._dy;
          if (typeof parentMainAxisPosition !== "number")
            return parentMainAxisPosition.$sub();
          if (typeof t1 !== "number")
            return H.iae(t1);
          return parentMainAxisPosition - t1;
        case C.AxisDirection_1:
          t1 = childParentData.paintOffset._dx;
          if (typeof parentMainAxisPosition !== "number")
            return parentMainAxisPosition.$sub();
          if (typeof t1 !== "number")
            return H.iae(t1);
          return parentMainAxisPosition - t1;
        case C.AxisDirection_0:
          t1 = child._geometry.paintExtent;
          t2 = childParentData.paintOffset._dy;
          if (typeof parentMainAxisPosition !== "number")
            return parentMainAxisPosition.$sub();
          if (typeof t2 !== "number")
            return H.iae(t2);
          return t1 - (parentMainAxisPosition - t2);
        case C.AxisDirection_3:
          t1 = child._geometry.paintExtent;
          t2 = childParentData.paintOffset._dx;
          if (typeof parentMainAxisPosition !== "number")
            return parentMainAxisPosition.$sub();
          if (typeof t2 !== "number")
            return H.iae(t2);
          return t1 - (parentMainAxisPosition - t2);
      }
      return 0;
    },
    get$indexOfFirstChild: function() {
      var t1, t2, count, childParentData, _this = this,
        child = _this._viewport$_center;
      for (t1 = H.getRuntimeTypeArgument(_this, "ContainerRenderObjectMixin", 0), t2 = H.getRuntimeTypeArgument(_this, "ContainerRenderObjectMixin", 1), count = 0; child != _this.ContainerRenderObjectMixin__firstChild;) {
        --count;
        childParentData = H.assertSubtypeOfRuntimeType(H.assertSubtypeOfRuntimeType(child, t1).parentData, t2);
        child = childParentData.get$previousSibling(childParentData);
      }
      return count;
    },
    labelForChild$1: function(index) {
      if (index === 0)
        return "center child";
      return "child " + index;
    },
    get$childrenInPaintOrder: function() {
      var $async$self = this;
      return P._makeSyncStarIterable(function() {
        var $async$goto = 0, $async$handler = 2, $async$currentError, t1, t2, childParentData, child;
        return function $async$get$childrenInPaintOrder($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                child = $async$self.ContainerRenderObjectMixin__firstChild;
                if (child == null) {
                  // goto return
                  $async$goto = 1;
                  break;
                }
                t1 = H.getRuntimeTypeArgument($async$self, "ContainerRenderObjectMixin", 0), t2 = H.getRuntimeTypeArgument($async$self, "ContainerRenderObjectMixin", 1);
              case 3:
                // for condition
                if (!(child != $async$self._viewport$_center)) {
                  // goto after for
                  $async$goto = 4;
                  break;
                }
                $async$goto = 5;
                return child;
              case 5:
                // after yield
                childParentData = H.assertSubtypeOfRuntimeType(H.assertSubtypeOfRuntimeType(child, t1).parentData, t2);
                child = childParentData.get$nextSibling(childParentData);
                // goto for condition
                $async$goto = 3;
                break;
              case 4:
                // after for
                child = $async$self.ContainerRenderObjectMixin__lastChild;
              case 6:
                // for condition
                // trivial condition
                $async$goto = 8;
                return child;
              case 8:
                // after yield
                if (child == $async$self._viewport$_center) {
                  // goto return
                  $async$goto = 1;
                  break;
                }
                childParentData = H.assertSubtypeOfRuntimeType(H.assertSubtypeOfRuntimeType(child, t1).parentData, t2);
                child = childParentData.get$previousSibling(childParentData);
                // goto for condition
                $async$goto = 6;
                break;
              case 7:
                // after for
              case 1:
                // return
                return P._IterationMarker_endOfIteration();
              case 2:
                // rethrow
                return P._IterationMarker_uncaughtError($async$currentError);
            }
        };
      }, G.RenderSliver);
    },
    get$childrenInHitTestOrder: function() {
      var $async$self = this;
      return P._makeSyncStarIterable(function() {
        var $async$goto = 0, $async$handler = 2, $async$currentError, child, t1, t2, childParentData;
        return function $async$get$childrenInHitTestOrder($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                if ($async$self.ContainerRenderObjectMixin__firstChild == null) {
                  // goto return
                  $async$goto = 1;
                  break;
                }
                child = $async$self._viewport$_center;
                t1 = H.getRuntimeTypeArgument($async$self, "ContainerRenderObjectMixin", 0), t2 = H.getRuntimeTypeArgument($async$self, "ContainerRenderObjectMixin", 1);
              case 3:
                // for condition
                if (!(child != null)) {
                  // goto after for
                  $async$goto = 4;
                  break;
                }
                $async$goto = 5;
                return child;
              case 5:
                // after yield
                childParentData = H.assertSubtypeOfRuntimeType(H.assertSubtypeOfRuntimeType(child, t1).parentData, t2);
                child = childParentData.get$nextSibling(childParentData);
                // goto for condition
                $async$goto = 3;
                break;
              case 4:
                // after for
                childParentData = H.assertSubtypeOfRuntimeType(H.assertSubtypeOfRuntimeType($async$self._viewport$_center, t1).parentData, t2);
                child = childParentData.get$previousSibling(childParentData);
              case 6:
                // for condition
                if (!(child != null)) {
                  // goto after for
                  $async$goto = 7;
                  break;
                }
                $async$goto = 8;
                return child;
              case 8:
                // after yield
                childParentData = H.assertSubtypeOfRuntimeType(H.assertSubtypeOfRuntimeType(child, t1).parentData, t2);
                child = childParentData.get$previousSibling(childParentData);
                // goto for condition
                $async$goto = 6;
                break;
              case 7:
                // after for
              case 1:
                // return
                return P._IterationMarker_endOfIteration();
              case 2:
                // rethrow
                return P._IterationMarker_uncaughtError($async$currentError);
            }
        };
      }, G.RenderSliver);
    },
    $asContainerRenderObjectMixin: function() {
      return [G.RenderSliver, G.SliverPhysicalContainerParentData];
    },
    $as_RenderViewportBase_RenderBox_ContainerRenderObjectMixin: function() {
      return [G.SliverPhysicalContainerParentData];
    }
  };
  Q._RenderViewportBase_RenderBox_ContainerRenderObjectMixin.prototype = {
    attach$1: function(owner) {
      var child, t1, childParentData;
      H.interceptedTypeCheck(owner, "$isPipelineOwner");
      this.super$RenderObject$attach(owner);
      child = this.ContainerRenderObjectMixin__firstChild;
      for (t1 = H.getRuntimeTypeArgument(this, "_RenderViewportBase_RenderBox_ContainerRenderObjectMixin", 0); child != null;) {
        child.attach$1(owner);
        childParentData = H.assertSubtypeOfRuntimeType(child.parentData, t1);
        child = childParentData.get$nextSibling(childParentData);
      }
    },
    detach$0: function(_) {
      var child, t1, childParentData;
      this.super$AbstractNode$detach(0);
      child = this.ContainerRenderObjectMixin__firstChild;
      for (t1 = H.getRuntimeTypeArgument(this, "_RenderViewportBase_RenderBox_ContainerRenderObjectMixin", 0); child != null;) {
        child.detach$0(0);
        childParentData = H.assertSubtypeOfRuntimeType(child.parentData, t1);
        child = childParentData.get$nextSibling(childParentData);
      }
    },
    set$_object$_firstChild: function(_firstChild) {
      this.ContainerRenderObjectMixin__firstChild = H.assertSubtypeOfRuntimeType(_firstChild, H.getRuntimeTypeArgument(this, "ContainerRenderObjectMixin", 0));
    },
    set$_object$_lastChild: function(_lastChild) {
      this.ContainerRenderObjectMixin__lastChild = H.assertSubtypeOfRuntimeType(_lastChild, H.getRuntimeTypeArgument(this, "ContainerRenderObjectMixin", 0));
    }
  };
  N.ScrollDirection.prototype = {
    toString$0: function(_) {
      return this._viewport_offset$_name;
    }
  };
  N.ViewportOffset.prototype = {
    moveTo$3$curve$duration: function(_, to, curve, duration) {
      var t1 = duration._duration === 0;
      if (t1) {
        this.jumpTo$1(to);
        t1 = new P._Future($.Zone__current, [-1]);
        t1._asyncComplete$1(null);
        return t1;
      } else
        return this.animateTo$3$curve$duration(to, curve, duration);
    },
    toString$0: function(_) {
      var _this = this,
        t1 = [P.String],
        description = H.setRuntimeTypeInfo([], t1);
      H.assertSubtype(description, "$isList", t1, "$asList");
      _this.super$ScrollPosition$debugFillDescription(description);
      C.JSArray_methods.add$1(description, new H.TypeImpl(H.getRti(_this.context)).toString$0(0));
      C.JSArray_methods.add$1(description, H.S(_this.physics));
      C.JSArray_methods.add$1(description, H.S(_this._activity));
      C.JSArray_methods.add$1(description, _this._userScrollDirection.toString$0(0));
      return _this.get$runtimeType(_this).toString$0(0) + "#" + Y.shortHash(_this) + "(" + C.JSArray_methods.join$1(description, ", ") + ")";
    },
    debugFillDescription$1: function(description) {
      var t1;
      H.assertSubtype(description, "$isList", [P.String], "$asList");
      t1 = this._pixels;
      C.JSArray_methods.add$1(description, "offset: " + H.S(t1 == null ? null : C.JSNumber_methods.toStringAsFixed$1(t1, 1)));
    }
  };
  N._TaskEntry.prototype = {};
  N._FrameCallbackEntry.prototype = {};
  N.SchedulerPhase.prototype = {
    toString$0: function(_) {
      return this._name;
    }
  };
  N.SchedulerBinding.prototype = {
    handleAppLifecycleStateChanged$1: function(state) {
      this.SchedulerBinding__lifecycleState = state;
      switch (state) {
        case C.AppLifecycleState_0:
        case C.AppLifecycleState_1:
          this._setFramesEnabledState$1(true);
          break;
        case C.AppLifecycleState_2:
        case C.AppLifecycleState_3:
          this._setFramesEnabledState$1(false);
          break;
      }
    },
    _handleLifecycleMessage$1: function(message) {
      this.handleAppLifecycleStateChanged$1(N.SchedulerBinding__parseAppLifecycleMessage(H.stringTypeCheck(message)));
      return;
    },
    _ensureEventLoopCallback$0: function() {
      if (this.SchedulerBinding__hasRequestedAnEventLoopCallback)
        return;
      this.SchedulerBinding__hasRequestedAnEventLoopCallback = true;
      P.Timer_Timer(C.Duration_0, this.get$_runTasks());
    },
    _runTasks$0: function() {
      this.SchedulerBinding__hasRequestedAnEventLoopCallback = false;
      if (this.handleEventLoopCallback$0())
        this._ensureEventLoopCallback$0();
    },
    handleEventLoopCallback$0: function() {
      var entry, exception, exceptionStack, t3, t4, newLength, last, exception0, _this = this,
        _s15_ = "No such element",
        t1 = _this.SchedulerBinding__taskQueue,
        t2 = t1._priority_queue$_length === 0;
      if (t2 || _this._lockCount > 0)
        return false;
      if (t2)
        H.throwExpression(P.StateError$(_s15_));
      t2 = t1._priority_queue$_queue;
      if (0 >= t2.length)
        return H.ioore(t2, 0);
      entry = t2[0];
      t2 = entry.priority;
      if (H.boolConversionCheck(_this.SchedulerBinding_schedulingStrategy.call$2$priority$scheduler(t2, _this))) {
        try {
          t2 = t1._priority_queue$_length;
          if (t2 === 0)
            H.throwExpression(P.StateError$(_s15_));
          t3 = t1._priority_queue$_queue;
          t4 = t3.length;
          if (0 >= t4)
            return H.ioore(t3, 0);
          newLength = t2 - 1;
          if (newLength < 0 || newLength >= t4)
            return H.ioore(t3, newLength);
          last = t3[newLength];
          C.JSArray_methods.$indexSet(t3, newLength, null);
          t1._priority_queue$_length = newLength;
          if (newLength > 0)
            t1._bubbleDown$2(last, 0);
          entry.run$0();
        } catch (exception0) {
          exception = H.unwrapException(exception0);
          exceptionStack = H.getTraceFromException(exception0);
          U.assertions_FlutterError_dumpErrorToConsole$closure().call$1(U.FlutterErrorDetails$("during a task callback", exception, null, "scheduler library", false, exceptionStack));
        }
        return t1._priority_queue$_length !== 0;
      }
      return false;
    },
    scheduleFrameCallback$2$rescheduling: function(callback, rescheduling) {
      var t1, _this = this;
      H.functionTypeCheck(callback, {func: 1, ret: -1, args: [P.Duration]});
      _this.scheduleFrame$0();
      t1 = ++_this.SchedulerBinding__nextFrameCallbackId;
      _this.SchedulerBinding__transientCallbacks.$indexSet(0, t1, new N._FrameCallbackEntry(callback));
      return _this.SchedulerBinding__nextFrameCallbackId;
    },
    get$endOfFrame: function() {
      var t1, _this = this;
      if (_this.SchedulerBinding__nextFrameCompleter == null) {
        if (_this.SchedulerBinding__schedulerPhase === C.SchedulerPhase_0)
          _this.scheduleFrame$0();
        t1 = -1;
        _this.set$_nextFrameCompleter(new P._AsyncCompleter(new P._Future($.Zone__current, [t1]), [t1]));
        C.JSArray_methods.add$1(_this.SchedulerBinding__postFrameCallbacks, H.functionTypeCheck(new N.SchedulerBinding_endOfFrame_closure(_this), {func: 1, ret: -1, args: [P.Duration]}));
      }
      return _this.SchedulerBinding__nextFrameCompleter.future;
    },
    _setFramesEnabledState$1: function(enabled) {
      if (this.SchedulerBinding__framesEnabled === enabled)
        return;
      this.SchedulerBinding__framesEnabled = enabled;
      if (enabled)
        this.scheduleFrame$0();
    },
    ensureVisualUpdate$0: function() {
      switch (this.SchedulerBinding__schedulerPhase) {
        case C.SchedulerPhase_0:
        case C.SchedulerPhase_4:
          this.scheduleFrame$0();
          return;
        case C.SchedulerPhase_1:
        case C.SchedulerPhase_2:
        case C.SchedulerPhase_3:
          return;
      }
    },
    scheduleFrame$0: function() {
      if (this.SchedulerBinding__hasScheduledFrame || !this.SchedulerBinding__framesEnabled)
        return;
      $.$get$window().scheduleFrame$0();
      this.SchedulerBinding__hasScheduledFrame = true;
    },
    scheduleForcedFrame$0: function() {
      if (this.SchedulerBinding__hasScheduledFrame)
        return;
      $.$get$window().scheduleFrame$0();
      this.SchedulerBinding__hasScheduledFrame = true;
    },
    scheduleWarmUpFrame$0: function() {
      var hadScheduledFrame, _this = this;
      if (_this.SchedulerBinding__warmUpFrame || _this.SchedulerBinding__schedulerPhase !== C.SchedulerPhase_0)
        return;
      _this.SchedulerBinding__warmUpFrame = true;
      P.Timeline_startSync("Warm-up frame", null, null);
      hadScheduledFrame = _this.SchedulerBinding__hasScheduledFrame;
      P.Timer_Timer(C.Duration_0, new N.SchedulerBinding_scheduleWarmUpFrame_closure(_this));
      P.Timer_Timer(C.Duration_0, new N.SchedulerBinding_scheduleWarmUpFrame_closure0(_this, hadScheduledFrame));
      _this.lockEvents$1(new N.SchedulerBinding_scheduleWarmUpFrame_closure1(_this));
    },
    resetEpoch$0: function() {
      var _this = this;
      _this.SchedulerBinding__epochStart = _this._adjustForEpoch$1(_this.SchedulerBinding__lastRawTimeStamp);
      _this.SchedulerBinding__firstRawTimeStampInEpoch = null;
    },
    _adjustForEpoch$1: function(rawTimeStamp) {
      var t1 = this.SchedulerBinding__firstRawTimeStampInEpoch,
        rawDurationSinceEpoch = t1 == null ? C.Duration_0 : new P.Duration(rawTimeStamp._duration - t1._duration);
      t1 = $._timeDilation;
      if (typeof t1 !== "number")
        return H.iae(t1);
      return P.Duration$(C.JSDouble_methods.round$0(rawDurationSinceEpoch._duration / t1) + this.SchedulerBinding__epochStart._duration, 0, 0);
    },
    _handleBeginFrame$1: function(rawTimeStamp) {
      if (this.SchedulerBinding__warmUpFrame) {
        this.SchedulerBinding__ignoreNextEngineDrawFrame = true;
        return;
      }
      this.handleBeginFrame$1(rawTimeStamp);
    },
    _handleDrawFrame$0: function() {
      if (this.SchedulerBinding__ignoreNextEngineDrawFrame) {
        this.SchedulerBinding__ignoreNextEngineDrawFrame = false;
        return;
      }
      this.handleDrawFrame$0();
    },
    handleBeginFrame$1: function(rawTimeStamp) {
      var callbacks, t1, _this = this;
      P.Timeline_startSync("Frame", C.Map_9aZ6I, null);
      if (_this.SchedulerBinding__firstRawTimeStampInEpoch == null)
        _this.SchedulerBinding__firstRawTimeStampInEpoch = rawTimeStamp;
      t1 = rawTimeStamp == null;
      _this.SchedulerBinding__currentFrameTimeStamp = _this._adjustForEpoch$1(t1 ? _this.SchedulerBinding__lastRawTimeStamp : rawTimeStamp);
      if (!t1)
        _this.SchedulerBinding__lastRawTimeStamp = rawTimeStamp;
      U.profile(new N.SchedulerBinding_handleBeginFrame_closure(_this));
      _this.SchedulerBinding__hasScheduledFrame = false;
      try {
        P.Timeline_startSync("Animate", C.Map_9aZ6I, null);
        _this.SchedulerBinding__schedulerPhase = C.SchedulerPhase_1;
        callbacks = _this.SchedulerBinding__transientCallbacks;
        _this.set$_transientCallbacks(P.LinkedHashMap_LinkedHashMap$_empty(P.int, N._FrameCallbackEntry));
        J.forEach$1$ax(callbacks, new N.SchedulerBinding_handleBeginFrame_closure0(_this));
        _this.SchedulerBinding__removedIds.clear$0(0);
      } finally {
        _this.SchedulerBinding__schedulerPhase = C.SchedulerPhase_2;
      }
    },
    handleDrawFrame$0: function() {
      var callback, localPostFrameCallbacks, callback0, t1, t2, _i, _this = this;
      P.Timeline_finishSync();
      try {
        _this.SchedulerBinding__schedulerPhase = C.SchedulerPhase_3;
        for (t1 = _this.SchedulerBinding__persistentCallbacks, t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
          callback = t1[_i];
          _this._invokeFrameCallback$2(callback, _this.SchedulerBinding__currentFrameTimeStamp);
        }
        _this.SchedulerBinding__schedulerPhase = C.SchedulerPhase_4;
        t1 = _this.SchedulerBinding__postFrameCallbacks;
        localPostFrameCallbacks = P.List_List$from(t1, true, {func: 1, ret: -1, args: [P.Duration]});
        C.JSArray_methods.set$length(t1, 0);
        for (t1 = localPostFrameCallbacks, t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
          callback0 = t1[_i];
          _this._invokeFrameCallback$2(callback0, _this.SchedulerBinding__currentFrameTimeStamp);
        }
      } finally {
        _this.SchedulerBinding__schedulerPhase = C.SchedulerPhase_0;
        P.Timeline_finishSync();
        U.profile(new N.SchedulerBinding_handleDrawFrame_closure(_this));
        _this.SchedulerBinding__currentFrameTimeStamp = null;
      }
    },
    _invokeFrameCallback$3: function(callback, timeStamp, callbackStack) {
      var exception, exceptionStack, exception0;
      H.functionTypeCheck(callback, {func: 1, ret: -1, args: [P.Duration]});
      try {
        callback.call$1(timeStamp);
      } catch (exception0) {
        exception = H.unwrapException(exception0);
        exceptionStack = H.getTraceFromException(exception0);
        U.assertions_FlutterError_dumpErrorToConsole$closure().call$1(U.FlutterErrorDetails$("during a scheduler callback", exception, null, "scheduler library", false, exceptionStack));
      }
    },
    _invokeFrameCallback$2: function(callback, timeStamp) {
      return this._invokeFrameCallback$3(callback, timeStamp, null);
    },
    set$_transientCallbacks: function(_transientCallbacks) {
      this.SchedulerBinding__transientCallbacks = H.assertSubtype(_transientCallbacks, "$isMap", [P.int, N._FrameCallbackEntry], "$asMap");
    },
    set$_nextFrameCompleter: function(_nextFrameCompleter) {
      this.SchedulerBinding__nextFrameCompleter = H.assertSubtype(_nextFrameCompleter, "$isCompleter", [-1], "$asCompleter");
    }
  };
  N.SchedulerBinding_endOfFrame_closure.prototype = {
    call$1: function(timeStamp) {
      var t1;
      H.interceptedTypeCheck(timeStamp, "$isDuration");
      t1 = this.$this;
      t1.SchedulerBinding__nextFrameCompleter.complete$0(0);
      t1.set$_nextFrameCompleter(null);
    },
    $signature: 24
  };
  N.SchedulerBinding_scheduleWarmUpFrame_closure.prototype = {
    call$0: function() {
      this.$this.handleBeginFrame$1(null);
    },
    $signature: 0
  };
  N.SchedulerBinding_scheduleWarmUpFrame_closure0.prototype = {
    call$0: function() {
      var t1 = this.$this;
      t1.handleDrawFrame$0();
      t1.resetEpoch$0();
      t1.SchedulerBinding__warmUpFrame = false;
      if (this.hadScheduledFrame)
        t1.scheduleFrame$0();
    },
    $signature: 0
  };
  N.SchedulerBinding_scheduleWarmUpFrame_closure1.prototype = {
    call$0: function() {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(P.Null),
        $async$self = this;
      var $async$call$0 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 2;
              return P._asyncAwait($async$self.$this.get$endOfFrame(), $async$call$0);
            case 2:
              // returning from await.
              P.Timeline_finishSync();
              // implicit return
              return P._asyncReturn(null, $async$completer);
          }
      });
      return P._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 37
  };
  N.SchedulerBinding_handleBeginFrame_closure.prototype = {
    call$0: function() {
      var t1 = this.$this;
      ++t1.SchedulerBinding__profileFrameNumber;
      t1 = t1.SchedulerBinding__profileFrameStopwatch;
      t1.reset$0(0);
      t1.start$0(0);
    },
    $signature: 0
  };
  N.SchedulerBinding_handleBeginFrame_closure0.prototype = {
    call$2: function(id, callbackEntry) {
      var t1;
      H.intTypeCheck(id);
      H.interceptedTypeCheck(callbackEntry, "$is_FrameCallbackEntry");
      t1 = this.$this;
      if (!t1.SchedulerBinding__removedIds.contains$1(0, id))
        t1._invokeFrameCallback$3(callbackEntry.callback, t1.SchedulerBinding__currentFrameTimeStamp, callbackEntry.debugStack);
    },
    $signature: 124
  };
  N.SchedulerBinding_handleDrawFrame_closure.prototype = {
    call$0: function() {
      var t1 = this.$this,
        t2 = t1.SchedulerBinding__profileFrameStopwatch;
      t2.stop$0(0);
      P.postEvent("Flutter.Frame", P.LinkedHashMap_LinkedHashMap$_literal(["number", t1.SchedulerBinding__profileFrameNumber, "startTime", t1.SchedulerBinding__currentFrameTimeStamp._duration, "elapsed", t2.get$elapsedMicroseconds()], P.String, null));
    },
    $signature: 0
  };
  M.TickerProvider.prototype = {};
  M.Ticker.prototype = {
    set$muted: function(_, value) {
      var t1, _this = this;
      if (value === _this._muted)
        return;
      _this._muted = value;
      if (value)
        _this.unscheduleTick$0();
      else {
        t1 = _this._future != null && _this._animationId == null;
        if (t1)
          _this._animationId = $.SchedulerBinding__instance.scheduleFrameCallback$2$rescheduling(_this.get$_ticker$_tick(), false);
      }
    },
    get$isTicking: function() {
      if (this._future == null)
        return false;
      if (this._muted)
        return false;
      var t1 = $.SchedulerBinding__instance;
      if (t1.SchedulerBinding__framesEnabled)
        return true;
      if (t1.SchedulerBinding__schedulerPhase !== C.SchedulerPhase_0)
        return true;
      return false;
    },
    start$0: function(_) {
      var t2, _this = this,
        t1 = P.Null;
      _this._future = new M.TickerFuture(new P._AsyncCompleter(new P._Future($.Zone__current, [t1]), [t1]));
      if (!_this._muted)
        t1 = _this._animationId == null;
      else
        t1 = false;
      if (t1)
        _this._animationId = $.SchedulerBinding__instance.scheduleFrameCallback$2$rescheduling(_this.get$_ticker$_tick(), false);
      t1 = $.SchedulerBinding__instance;
      t2 = t1.SchedulerBinding__schedulerPhase.index;
      if (t2 > 0 && t2 < 4)
        _this._startTime = t1.SchedulerBinding__currentFrameTimeStamp;
      return _this._future;
    },
    stop$1$canceled: function(_, canceled) {
      var _this = this,
        t1 = _this._future;
      if (t1 == null)
        return;
      _this._startTime = _this._future = null;
      _this.unscheduleTick$0();
      if (canceled)
        t1._cancel$1(_this);
      else
        t1._ticker$_complete$0();
    },
    stop$0: function($receiver) {
      return this.stop$1$canceled($receiver, false);
    },
    _ticker$_tick$1: function(timeStamp) {
      var t1, _this = this;
      _this._animationId = null;
      t1 = _this._startTime;
      if (t1 == null)
        t1 = _this._startTime = timeStamp;
      _this._onTick.call$1(new P.Duration(timeStamp._duration - t1._duration));
      if (!_this._muted && _this._future != null && _this._animationId == null)
        _this._animationId = $.SchedulerBinding__instance.scheduleFrameCallback$2$rescheduling(_this.get$_ticker$_tick(), true);
    },
    unscheduleTick$0: function() {
      var t2,
        t1 = this._animationId;
      if (t1 != null) {
        t2 = $.SchedulerBinding__instance;
        t2.SchedulerBinding__transientCallbacks.remove$1(0, t1);
        t2.SchedulerBinding__removedIds.add$1(0, t1);
        this._animationId = null;
      }
    },
    dispose$0: function() {
      var _this = this,
        t1 = _this._future;
      if (t1 != null) {
        _this._future = null;
        _this.unscheduleTick$0();
        t1._cancel$1(_this);
      }
    },
    toString$1$debugIncludeStack: function(_, debugIncludeStack) {
      var t1 = new H.TypeImpl(H.getRti(this)).toString$0(0);
      t1 + "(";
      t1 += "()";
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    toString$0: function($receiver) {
      return this.toString$1$debugIncludeStack($receiver, false);
    }
  };
  M.TickerFuture.prototype = {
    _ticker$_complete$0: function() {
      this._completed = true;
      this._primaryCompleter.complete$1(0, null);
    },
    _cancel$1: function(ticker) {
      this._completed = false;
    },
    then$1$2$onError: function(f, onError, $E) {
      return this._primaryCompleter.future.then$1$2$onError(H.functionTypeCheck(H.functionTypeCheck(f, {func: 1, args: [P.Null]}), {func: 1, ret: {futureOr: 1, type: $E}, args: [P.Null]}), onError, $E);
    },
    then$1$1: function(f, $E) {
      return this.then$1$2$onError(f, null, $E);
    },
    whenComplete$1: function(action) {
      return this._primaryCompleter.future.whenComplete$1(H.functionTypeCheck(action, {func: 1}));
    },
    $isFuture: 1,
    $asFuture: function() {
      return [-1];
    }
  };
  N.SemanticsBinding.prototype = {
    handleAccessibilityFeaturesChanged$0: function() {
      this.SemanticsBinding__accessibilityFeatures = $.$get$window()._accessibilityFeatures;
    }
  };
  A.SemanticsTag.prototype = {
    toString$0: function(_) {
      var t1 = this.super$Object$toString(0);
      return t1;
    }
  };
  A.CustomSemanticsAction.prototype = {};
  A.SemanticsData.prototype = {
    toStringShort$0: function() {
      return new H.TypeImpl(H.getRti(this)).toString$0(0);
    },
    $eq: function(_, other) {
      var t1, _this = this;
      if (other == null)
        return false;
      if (!(other instanceof A.SemanticsData))
        return false;
      if (other.flags === _this.flags)
        if (other.actions === _this.actions)
          if (other.label == _this.label)
            if (other.value == _this.value)
              if (other.increasedValue == _this.increasedValue)
                if (other.decreasedValue == _this.decreasedValue)
                  if (other.hint == _this.hint)
                    if (other.textDirection == _this.textDirection)
                      if (J.$eq$(other.rect, _this.rect))
                        if (S.setEquals(other.tags, _this.tags, A.SemanticsTag))
                          if (other.scrollChildCount == _this.scrollChildCount)
                            if (other.scrollIndex == _this.scrollIndex)
                              if (other.scrollPosition == _this.scrollPosition)
                                if (other.scrollExtentMax == _this.scrollExtentMax)
                                  if (other.scrollExtentMin == _this.scrollExtentMin)
                                    t1 = J.$eq$(other.transform, _this.transform) && other.elevation == _this.elevation && other.thickness === _this.thickness && A.SemanticsData__sortedListsEqual(other.customSemanticsActionIds, _this.customSemanticsActionIds);
                                  else
                                    t1 = false;
                                else
                                  t1 = false;
                              else
                                t1 = false;
                            else
                              t1 = false;
                          else
                            t1 = false;
                        else
                          t1 = false;
                      else
                        t1 = false;
                    else
                      t1 = false;
                  else
                    t1 = false;
                else
                  t1 = false;
              else
                t1 = false;
            else
              t1 = false;
          else
            t1 = false;
        else
          t1 = false;
      else
        t1 = false;
      return t1;
    },
    get$hashCode: function(_) {
      var _this = this;
      return Q.hashValues(Q.hashValues(_this.flags, _this.actions, _this.label, _this.value, _this.increasedValue, _this.decreasedValue, _this.hint, _this.textDirection, _this.rect, _this.tags, _this.textSelection, _this.scrollChildCount, _this.scrollIndex, _this.scrollPosition, _this.scrollExtentMax, _this.scrollExtentMin, _this.platformViewId, _this.transform, _this.elevation, _this.thickness), Q.hashList(_this.customSemanticsActionIds), C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd);
    }
  };
  A._SemanticsDiagnosticableNode.prototype = {
    getChildren$0: function() {
      var t1 = this.value.debugDescribeChildren$1$childOrder(this.childOrder);
      return t1;
    },
    $asDiagnosticableNode: function() {
      return [A.SemanticsNode];
    }
  };
  A.SemanticsProperties.prototype = {
    toStringShort$0: function() {
      return new H.TypeImpl(H.getRti(this)).toString$0(0);
    }
  };
  A.SemanticsNode.prototype = {
    set$transform: function(_, value) {
      if (!T.MatrixUtils_matrixEquals(this._semantics$_transform, value)) {
        this._semantics$_transform = T.MatrixUtils_isIdentity(value) ? null : value;
        this._markDirty$0();
      }
    },
    set$rect: function(_, value) {
      if (!J.$eq$(this._semantics$_rect, value)) {
        this._semantics$_rect = value;
        this._markDirty$0();
      }
    },
    set$isMergedIntoParent: function(value) {
      if (this._isMergedIntoParent === value)
        return;
      this._isMergedIntoParent = value;
      this._markDirty$0();
    },
    _replaceChildren$1: function(newChildren) {
      var t1, t2, _i, sawChange, child, t3, i, t4, _this = this;
      H.assertSubtype(newChildren, "$isList", [A.SemanticsNode], "$asList");
      t1 = _this._semantics$_children;
      if (t1 != null)
        for (t2 = t1.length, _i = 0; _i < t2; ++_i)
          t1[_i]._dead = true;
      for (t1 = newChildren.length, _i = 0; _i < t1; ++_i)
        newChildren[_i]._dead = false;
      t1 = _this._semantics$_children;
      if (t1 != null)
        for (t2 = t1.length, sawChange = false, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
          child = t1[_i];
          if (child._dead) {
            t3 = J.getInterceptor$x(child);
            if (H.interceptedTypeCheck(B.AbstractNode.prototype.get$parent.call(t3, child), "$isSemanticsNode") === _this) {
              H.interceptedTypeCheck(child, "$isAbstractNode");
              child._node$_parent = null;
              if (_this._node$_owner != null)
                child.detach$0(0);
            }
            sawChange = true;
          }
        }
      else
        sawChange = false;
      for (t1 = newChildren.length, _i = 0; _i < newChildren.length; newChildren.length === t1 || (0, H.throwConcurrentModificationError)(newChildren), ++_i) {
        child = newChildren[_i];
        t2 = J.getInterceptor$x(child);
        if (H.interceptedTypeCheck(B.AbstractNode.prototype.get$parent.call(t2, child), "$isSemanticsNode") !== _this) {
          if (H.interceptedTypeCheck(B.AbstractNode.prototype.get$parent.call(t2, child), "$isSemanticsNode") != null) {
            t2 = H.interceptedTypeCheck(B.AbstractNode.prototype.get$parent.call(t2, child), "$isSemanticsNode");
            if (t2 != null) {
              H.interceptedTypeCheck(child, "$isAbstractNode");
              child._node$_parent = null;
              if (t2._node$_owner != null)
                child.detach$0(0);
            }
          }
          H.interceptedTypeCheck(child, "$isAbstractNode");
          child._node$_parent = _this;
          t2 = _this._node$_owner;
          if (t2 != null)
            child.attach$1(t2);
          t2 = child._node$_depth;
          t3 = _this._node$_depth;
          if (t2 <= t3) {
            child._node$_depth = t3 + 1;
            child.redepthChildren$0();
          }
          sawChange = true;
        }
      }
      if (!sawChange && _this._semantics$_children != null)
        for (t1 = _this._semantics$_children, t2 = t1.length, t3 = newChildren.length, i = 0; i < t2; ++i) {
          t4 = t1[i].id;
          if (i >= t3)
            return H.ioore(newChildren, i);
          if (t4 !== newChildren[i].id) {
            sawChange = true;
            break;
          }
        }
      _this.set$_semantics$_children(0, newChildren);
      if (sawChange)
        _this._markDirty$0();
    },
    get$hasChildren: function() {
      var t1 = this._semantics$_children;
      t1 = t1 == null ? null : t1.length !== 0;
      return t1 === true;
    },
    _visitDescendants$1: function(visitor) {
      var t1, t2, _i, child;
      H.functionTypeCheck(visitor, {func: 1, ret: P.bool, args: [A.SemanticsNode]});
      t1 = this._semantics$_children;
      if (t1 != null)
        for (t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
          child = t1[_i];
          if (!H.boolConversionCheck(visitor.call$1(child)) || !child._visitDescendants$1(visitor))
            return false;
        }
      return true;
    },
    redepthChildren$0: function() {
      var t1 = this._semantics$_children;
      if (t1 != null)
        C.JSArray_methods.forEach$1(t1, this.get$redepthChild());
    },
    attach$1: function(owner) {
      var t1, t2, _i, _this = this;
      H.interceptedTypeCheck(owner, "$isSemanticsOwner");
      _this.super$AbstractNode$attach(owner);
      owner._nodes.$indexSet(0, _this.id, _this);
      owner._detachedNodes.remove$1(0, _this);
      if (_this._semantics$_dirty) {
        _this._semantics$_dirty = false;
        _this._markDirty$0();
      }
      t1 = _this._semantics$_children;
      if (t1 != null)
        for (t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i)
          t1[_i].attach$1(owner);
    },
    detach$0: function(_) {
      var t1, t2, _i, child, t3, _this = this;
      H.interceptedTypeCheck(B.AbstractNode.prototype.get$owner.call(_this), "$isSemanticsOwner")._nodes.remove$1(0, _this.id);
      H.interceptedTypeCheck(B.AbstractNode.prototype.get$owner.call(_this), "$isSemanticsOwner")._detachedNodes.add$1(0, _this);
      _this.super$AbstractNode$detach(0);
      t1 = _this._semantics$_children;
      if (t1 != null)
        for (t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
          child = t1[_i];
          t3 = J.getInterceptor$x(child);
          if (H.interceptedTypeCheck(B.AbstractNode.prototype.get$parent.call(t3, child), "$isSemanticsNode") === _this)
            t3.detach$0(child);
        }
      _this._markDirty$0();
    },
    _markDirty$0: function() {
      var _this = this;
      if (_this._semantics$_dirty)
        return;
      _this._semantics$_dirty = true;
      if (_this._node$_owner != null)
        H.interceptedTypeCheck(B.AbstractNode.prototype.get$owner.call(_this), "$isSemanticsOwner")._dirtyNodes.add$1(0, _this);
    },
    isTagged$1: function(tag) {
      var t1 = this.tags;
      return t1 != null && t1.contains$1(0, tag);
    },
    updateWith$2$childrenInInversePaintOrder$config: function(_, childrenInInversePaintOrder, config) {
      var t1, _this = this;
      H.assertSubtype(childrenInInversePaintOrder, "$isList", [A.SemanticsNode], "$asList");
      if (config == null)
        config = $.$get$SemanticsNode__kEmptyConfig();
      if (_this._label == config._label)
        if (_this._hint == config._hint)
          if (_this._elevation == config._elevation)
            if (_this._thickness === config._thickness)
              if (_this._decreasedValue == config._decreasedValue)
                if (_this._semantics$_value == config._semantics$_value)
                  if (_this._increasedValue == config._increasedValue)
                    if (_this._flags === config._flags)
                      if (_this._semantics$_textDirection == config._semantics$_textDirection)
                        if (_this._sortKey == config._sortKey)
                          if (_this._scrollPosition == config._scrollPosition)
                            if (_this._scrollExtentMax == config._scrollExtentMax)
                              if (_this._scrollExtentMin == config._scrollExtentMin)
                                if (_this._actionsAsBits === config._actionsAsBits)
                                  if (_this.indexInParent == config._indexInParent)
                                    t1 = _this._mergeAllDescendantsIntoThisNode !== config._isMergingSemanticsOfDescendants;
                                  else
                                    t1 = true;
                                else
                                  t1 = true;
                              else
                                t1 = true;
                            else
                              t1 = true;
                          else
                            t1 = true;
                        else
                          t1 = true;
                      else
                        t1 = true;
                    else
                      t1 = true;
                  else
                    t1 = true;
                else
                  t1 = true;
              else
                t1 = true;
            else
              t1 = true;
          else
            t1 = true;
        else
          t1 = true;
      else
        t1 = true;
      if (t1)
        _this._markDirty$0();
      _this._label = config._label;
      _this._decreasedValue = config._decreasedValue;
      _this._semantics$_value = config._semantics$_value;
      _this._increasedValue = config._increasedValue;
      _this._hint = config._hint;
      _this._hintOverrides = config._hintOverrides;
      _this._elevation = config._elevation;
      _this._thickness = config._thickness;
      _this._flags = config._flags;
      _this._semantics$_textDirection = config._semantics$_textDirection;
      _this._sortKey = config._sortKey;
      _this.set$_actions(P.LinkedHashMap_LinkedHashMap$from(config._actions, Q.SemanticsAction, {func: 1, ret: -1, args: [,]}));
      _this.set$_customSemanticsActions(P.LinkedHashMap_LinkedHashMap$from(config._customSemanticsActions, A.CustomSemanticsAction, {func: 1, ret: -1}));
      _this._actionsAsBits = config._actionsAsBits;
      _this._textSelection = config._textSelection;
      _this._scrollPosition = config._scrollPosition;
      _this._scrollExtentMax = config._scrollExtentMax;
      _this._scrollExtentMin = config._scrollExtentMin;
      _this._mergeAllDescendantsIntoThisNode = config._isMergingSemanticsOfDescendants;
      _this._scrollChildCount = config._scrollChildCount;
      _this._scrollIndex = config._scrollIndex;
      _this.indexInParent = config._indexInParent;
      _this._platformViewId = config._platformViewId;
      _this._isMultiline = (config._flags & 524288) !== 0;
      _this._replaceChildren$1(childrenInInversePaintOrder == null ? C.List_empty3 : childrenInInversePaintOrder);
    },
    updateWith$1$config: function($receiver, config) {
      return this.updateWith$2$childrenInInversePaintOrder$config($receiver, null, config);
    },
    getSemanticsData$0: function() {
      var t1, elevation, customSemanticsActionIds, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17, t18, t19, t20, _this = this, _box_0 = {};
      _box_0.flags = _this._flags;
      _box_0.actions = _this._actionsAsBits;
      _box_0.label = _this._label;
      _box_0.hint = _this._hint;
      _box_0.value = _this._semantics$_value;
      _box_0.increasedValue = _this._increasedValue;
      _box_0.decreasedValue = _this._decreasedValue;
      _box_0.textDirection = _this._semantics$_textDirection;
      t1 = _this.tags;
      _box_0.mergedTags = t1 == null ? null : P.LinkedHashSet_LinkedHashSet$from(t1, A.SemanticsTag);
      _box_0.textSelection = _this._textSelection;
      _box_0.scrollChildCount = _this._scrollChildCount;
      _box_0.scrollIndex = _this._scrollIndex;
      _box_0.scrollPosition = _this._scrollPosition;
      _box_0.scrollExtentMax = _this._scrollExtentMax;
      _box_0.scrollExtentMin = _this._scrollExtentMin;
      _box_0.platformViewId = _this._platformViewId;
      elevation = _this._elevation;
      _box_0.thickness = _this._thickness;
      customSemanticsActionIds = P.LinkedHashSet_LinkedHashSet(P.int);
      for (t1 = _this._customSemanticsActions, t1 = t1.get$keys(t1), t1 = t1.get$iterator(t1); t1.moveNext$0();)
        customSemanticsActionIds.add$1(0, A.CustomSemanticsAction_getIdentifier(t1.get$current(t1)));
      _this._hintOverrides != null;
      if (_this._mergeAllDescendantsIntoThisNode)
        _this._visitDescendants$1(new A.SemanticsNode_getSemanticsData_closure(_box_0, _this, customSemanticsActionIds));
      t1 = _box_0.flags;
      t2 = _box_0.actions;
      t3 = _box_0.label;
      t4 = _box_0.value;
      t5 = _box_0.increasedValue;
      t6 = _box_0.decreasedValue;
      t7 = _box_0.hint;
      t8 = _box_0.textDirection;
      t9 = _this._semantics$_rect;
      t10 = _this._semantics$_transform;
      t11 = _box_0.thickness;
      t12 = _box_0.mergedTags;
      t13 = _box_0.textSelection;
      t14 = _box_0.scrollChildCount;
      t15 = _box_0.scrollIndex;
      t16 = _box_0.scrollPosition;
      t17 = _box_0.scrollExtentMax;
      t18 = _box_0.scrollExtentMin;
      t19 = _box_0.platformViewId;
      t20 = customSemanticsActionIds.toList$0(0);
      C.JSArray_methods.sort$0(t20);
      return new A.SemanticsData(t1, t2, t3, t4, t5, t6, t7, t8, t13, t14, t15, t16, t17, t18, t19, t9, t12, t10, elevation, t11, t20);
    },
    _addToUpdate$2: function(builder, customSemanticsActionIdsUpdate) {
      var data, childrenInTraversalOrder, childrenInHitTestOrder, childCount, sortedChildren, t1, t2, i, t3, customSemanticsActionIds, t4, t5, t6, t7, _this = this;
      H.assertSubtype(customSemanticsActionIdsUpdate, "$isSet", [P.int], "$asSet");
      data = _this.getSemanticsData$0();
      if (!_this.get$hasChildren() || _this._mergeAllDescendantsIntoThisNode) {
        childrenInTraversalOrder = $.$get$SemanticsNode__kEmptyChildList();
        childrenInHitTestOrder = childrenInTraversalOrder;
      } else {
        childCount = _this._semantics$_children.length;
        sortedChildren = _this._childrenInTraversalOrder$0();
        childrenInTraversalOrder = new Int32Array(childCount);
        for (t1 = sortedChildren.length, t2 = childrenInTraversalOrder.length, i = 0; i < childCount; ++i) {
          if (i >= t1)
            return H.ioore(sortedChildren, i);
          t3 = sortedChildren[i].id;
          if (i >= t2)
            return H.ioore(childrenInTraversalOrder, i);
          childrenInTraversalOrder[i] = t3;
        }
        childrenInHitTestOrder = new Int32Array(childCount);
        for (i = childCount - 1, t1 = _this._semantics$_children, t2 = childrenInHitTestOrder.length; i >= 0; --i) {
          t3 = childCount - i - 1;
          if (t3 < 0 || t3 >= t1.length)
            return H.ioore(t1, t3);
          t3 = t1[t3].id;
          if (i >= t2)
            return H.ioore(childrenInHitTestOrder, i);
          childrenInHitTestOrder[i] = t3;
        }
      }
      t1 = data.customSemanticsActionIds;
      t2 = t1.length;
      if (t2 !== 0) {
        customSemanticsActionIds = new Int32Array(t2);
        for (i = 0; i < t1.length; ++i) {
          C.NativeInt32List_methods.$indexSet(customSemanticsActionIds, i, t1[i]);
          if (i >= t1.length)
            return H.ioore(t1, i);
          customSemanticsActionIdsUpdate.add$1(0, t1[i]);
        }
      } else
        customSemanticsActionIds = null;
      t1 = data.scrollChildCount;
      t1 = t1 != null ? t1 : 0;
      t2 = data.scrollIndex;
      t2 = t2 != null ? t2 : 0;
      t3 = data.scrollPosition;
      t3 = t3 != null ? t3 : 0 / 0;
      t4 = data.scrollExtentMax;
      t4 = t4 != null ? t4 : 0 / 0;
      t5 = data.scrollExtentMin;
      t5 = t5 != null ? t5 : 0 / 0;
      t6 = data.transform;
      t6 = t6 == null ? null : t6._m4storage;
      if (t6 == null)
        t6 = $.$get$SemanticsNode__kIdentityTransform();
      t7 = customSemanticsActionIds == null ? $.$get$SemanticsNode__kEmptyCustomSemanticsActionsList() : customSemanticsActionIds;
      t6.length;
      if (t7 == null)
        t7 = null;
      C.JSArray_methods.add$1(builder._nodeUpdates, new T.SemanticsNodeUpdate(_this.id, data.flags, data.actions, -1, -1, t1, t2, t3, t4, t5, data.rect, data.label, data.hint, data.value, data.increasedValue, data.decreasedValue, data.textDirection, t6, childrenInTraversalOrder, childrenInHitTestOrder, t7));
      _this._semantics$_dirty = false;
    },
    _childrenInTraversalOrder$0: function() {
      var t1, childrenInDefaultOrder, everythingSorted, sortNodes, lastSortKey, position, child, sortKey, isCompatibleWithPreviousSortKey, t2, _this = this,
        inheritedTextDirection = _this._semantics$_textDirection,
        ancestor = H.interceptedTypeCheck(B.AbstractNode.prototype.get$parent.call(_this, _this), "$isSemanticsNode");
      while (true) {
        t1 = inheritedTextDirection == null;
        if (!(t1 && ancestor != null))
          break;
        inheritedTextDirection = ancestor._semantics$_textDirection;
        ancestor = H.interceptedTypeCheck(B.AbstractNode.prototype.get$parent.call(ancestor, ancestor), "$isSemanticsNode");
      }
      childrenInDefaultOrder = _this._semantics$_children;
      if (!t1)
        childrenInDefaultOrder = A._childrenInDefaultOrder(childrenInDefaultOrder, inheritedTextDirection);
      t1 = [A._TraversalSortNode];
      everythingSorted = H.setRuntimeTypeInfo([], t1);
      sortNodes = H.setRuntimeTypeInfo([], t1);
      for (t1 = H.getTypeArgumentByIndex(sortNodes, 0), lastSortKey = null, position = 0; position < childrenInDefaultOrder.length; ++position) {
        child = childrenInDefaultOrder[position];
        sortKey = child._sortKey;
        lastSortKey = position > 0 ? childrenInDefaultOrder[position - 1]._sortKey : null;
        if (position !== 0)
          if (J.get$runtimeType$(sortKey).$eq(0, J.get$runtimeType$(lastSortKey))) {
            if (sortKey != null)
              lastSortKey.name;
            isCompatibleWithPreviousSortKey = true;
          } else
            isCompatibleWithPreviousSortKey = false;
        else
          isCompatibleWithPreviousSortKey = true;
        if (!isCompatibleWithPreviousSortKey && sortNodes.length !== 0) {
          if (lastSortKey != null) {
            t2 = sortNodes.length - 1;
            if (t2 - 0 <= 32)
              H.Sort__insertionSort(sortNodes, 0, t2, J._interceptors_JSArray__compareAny$closure(), t1);
            else
              H.Sort__dualPivotQuicksort(sortNodes, 0, t2, J._interceptors_JSArray__compareAny$closure(), t1);
          }
          C.JSArray_methods.addAll$1(everythingSorted, sortNodes);
          C.JSArray_methods.set$length(sortNodes, 0);
        }
        C.JSArray_methods.add$1(sortNodes, new A._TraversalSortNode(child, sortKey, position));
      }
      if (lastSortKey != null)
        C.JSArray_methods.sort$0(sortNodes);
      C.JSArray_methods.addAll$1(everythingSorted, sortNodes);
      t1 = A.SemanticsNode;
      t2 = H.getTypeArgumentByIndex(everythingSorted, 0);
      return new H.MappedListIterable(everythingSorted, H.functionTypeCheck(new A.SemanticsNode__childrenInTraversalOrder_closure(), {func: 1, ret: t1, args: [t2]}), [t2, t1]).toList$0(0);
    },
    sendEvent$1: function($event) {
      if (this._node$_owner == null)
        return;
      C.BasicMessageChannel_8hp.send$1(0, $event.toMap$1$nodeId(this.id));
    },
    toStringShort$0: function() {
      return new H.TypeImpl(H.getRti(this)).toString$0(0) + "#" + this.id;
    },
    toDiagnosticsNode$3$childOrder$name$style: function(childOrder, $name, style) {
      return new A._SemanticsDiagnosticableNode(childOrder, this, $name, true, true, style);
    },
    toDiagnosticsNode$1$style: function(style) {
      return this.toDiagnosticsNode$3$childOrder$name$style(C.DebugSemanticsDumpOrder_1, null, style);
    },
    toDiagnosticsNode$0: function() {
      return this.toDiagnosticsNode$3$childOrder$name$style(C.DebugSemanticsDumpOrder_1, null, C.DiagnosticsTreeStyle_0);
    },
    debugDescribeChildren$1$childOrder: function(childOrder) {
      var t3,
        t1 = this.debugListChildrenInOrder$1(childOrder),
        t2 = Y.DiagnosticsNode;
      t1.toString;
      t3 = H.getTypeArgumentByIndex(t1, 0);
      return new H.MappedListIterable(t1, H.functionTypeCheck(new A.SemanticsNode_debugDescribeChildren_closure(childOrder), {func: 1, ret: t2, args: [t3]}), [t3, t2]).toList$0(0);
    },
    debugDescribeChildren$0: function() {
      return this.debugDescribeChildren$1$childOrder(C.DebugSemanticsDumpOrder_0);
    },
    debugListChildrenInOrder$1: function(childOrder) {
      var t1 = this._semantics$_children;
      if (t1 == null)
        return C.List_empty3;
      switch (childOrder) {
        case C.DebugSemanticsDumpOrder_0:
          return t1;
        case C.DebugSemanticsDumpOrder_1:
          return this._childrenInTraversalOrder$0();
      }
      return;
    },
    set$_semantics$_children: function(_, _children) {
      this._semantics$_children = H.assertSubtype(_children, "$isList", [A.SemanticsNode], "$asList");
    },
    set$_actions: function(_actions) {
      this._actions = H.assertSubtype(_actions, "$isMap", [Q.SemanticsAction, {func: 1, ret: -1, args: [,]}], "$asMap");
    },
    set$_customSemanticsActions: function(_customSemanticsActions) {
      this._customSemanticsActions = H.assertSubtype(_customSemanticsActions, "$isMap", [A.CustomSemanticsAction, {func: 1, ret: -1}], "$asMap");
    },
    set$tags: function(tags) {
      this.tags = H.assertSubtype(tags, "$isSet", [A.SemanticsTag], "$asSet");
    },
    $isDiagnosticable: 1,
    $isDiagnosticableTree: 1
  };
  A.SemanticsNode_getSemanticsData_closure.prototype = {
    call$1: function(node) {
      var t2, t3, t4,
        t1 = this._box_0;
      t1.flags = t1.flags | node._flags;
      t1.actions = t1.actions | node._actionsAsBits;
      t2 = this.$this;
      if (t2._isMultiline == null)
        t2._isMultiline = node._isMultiline;
      if (t1.textDirection == null)
        t1.textDirection = node._semantics$_textDirection;
      t1.textSelection = node._textSelection;
      if (t1.scrollChildCount == null)
        t1.scrollChildCount = node._scrollChildCount;
      if (t1.scrollIndex == null)
        t1.scrollIndex = node._scrollIndex;
      if (t1.scrollPosition == null)
        t1.scrollPosition = node._scrollPosition;
      if (t1.scrollExtentMax == null)
        t1.scrollExtentMax = node._scrollExtentMax;
      if (t1.scrollExtentMin == null)
        t1.scrollExtentMin = node._scrollExtentMin;
      t1.platformViewId = node._platformViewId;
      t3 = t1.value;
      if (t3 === "" || t3 == null)
        t1.value = node._semantics$_value;
      t3 = t1.increasedValue;
      if (t3 === "" || t3 == null)
        t1.increasedValue = node._increasedValue;
      t3 = t1.decreasedValue;
      if (t3 === "" || t3 == null)
        t1.decreasedValue = node._decreasedValue;
      if (node.tags != null) {
        t3 = t1.mergedTags;
        if (t3 == null)
          t3 = t1.mergedTags = P.LinkedHashSet_LinkedHashSet(A.SemanticsTag);
        t3.addAll$1(0, node.tags);
      }
      if (node._customSemanticsActions != null)
        for (t2 = t2._customSemanticsActions, t2 = t2.get$keys(t2), t2 = t2.get$iterator(t2), t3 = this.customSemanticsActionIds; t2.moveNext$0();)
          t3.add$1(0, A.CustomSemanticsAction_getIdentifier(t2.get$current(t2)));
      node._hintOverrides != null;
      t2 = t1.label;
      t3 = t1.textDirection;
      t1.label = A._concatStrings(node._label, node._semantics$_textDirection, t2, t3);
      t3 = t1.hint;
      t2 = t1.textDirection;
      t1.hint = A._concatStrings(node._hint, node._semantics$_textDirection, t3, t2);
      t2 = t1.thickness;
      t3 = node._thickness;
      t4 = node._elevation;
      if (typeof t4 !== "number")
        return H.iae(t4);
      t1.thickness = Math.max(t2, t3 + t4);
      return true;
    },
    $signature: 38
  };
  A.SemanticsNode__childrenInTraversalOrder_closure.prototype = {
    call$1: function(sortNode) {
      return H.interceptedTypeCheck(sortNode, "$is_TraversalSortNode").node;
    },
    $signature: 126
  };
  A.SemanticsNode_debugDescribeChildren_closure.prototype = {
    call$1: function(node) {
      H.interceptedTypeCheck(node, "$isSemanticsNode");
      node.toString;
      return new A._SemanticsDiagnosticableNode(this.childOrder, node, null, true, true, C.DiagnosticsTreeStyle_0);
    },
    $signature: 127
  };
  A._BoxEdge.prototype = {
    compareTo$1: function(_, other) {
      var t1 = this.offset,
        t2 = H.interceptedTypeCheck(other, "$is_BoxEdge").offset;
      if (typeof t1 !== "number")
        return t1.$sub();
      if (typeof t2 !== "number")
        return H.iae(t2);
      return C.JSNumber_methods.toInt$0(J.get$sign$in(t1 - t2));
    },
    $isComparable: 1,
    $asComparable: function() {
      return [A._BoxEdge];
    }
  };
  A._SemanticsSortGroup.prototype = {
    compareTo$1: function(_, other) {
      var t1 = this.startOffset,
        t2 = H.interceptedTypeCheck(other, "$is_SemanticsSortGroup").startOffset;
      if (typeof t1 !== "number")
        return t1.$sub();
      if (typeof t2 !== "number")
        return H.iae(t2);
      return C.JSNumber_methods.toInt$0(J.get$sign$in(t1 - t2));
    },
    sortedWithinVerticalGroup$0: function() {
      var t1, t2, _i, child, t3, t4, t5, t6, horizontalGroups, group, depth, edge, result,
        edges = H.setRuntimeTypeInfo([], [A._BoxEdge]);
      for (t1 = this.nodes, t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
        child = t1[_i];
        t3 = child._semantics$_rect;
        t4 = t3.left;
        if (typeof t4 !== "number")
          return t4.$sub();
        t5 = t3.top;
        if (typeof t5 !== "number")
          return t5.$sub();
        t6 = t3.right;
        if (typeof t6 !== "number")
          return t6.$add();
        t3 = t3.bottom;
        if (typeof t3 !== "number")
          return t3.$add();
        C.JSArray_methods.add$1(edges, new A._BoxEdge(true, A._pointInParentCoordinates(child, new Q.Offset(t4 - -0.1, t5 - -0.1))._dx, child));
        C.JSArray_methods.add$1(edges, new A._BoxEdge(false, A._pointInParentCoordinates(child, new Q.Offset(t6 + -0.1, t3 + -0.1))._dx, child));
      }
      C.JSArray_methods.sort$0(edges);
      horizontalGroups = H.setRuntimeTypeInfo([], [A._SemanticsSortGroup]);
      for (t1 = edges.length, t2 = this.textDirection, t3 = [A.SemanticsNode], group = null, depth = 0, _i = 0; _i < edges.length; edges.length === t1 || (0, H.throwConcurrentModificationError)(edges), ++_i) {
        edge = edges[_i];
        if (edge.isLeadingEdge) {
          ++depth;
          if (group == null)
            group = new A._SemanticsSortGroup(edge.offset, t2, H.setRuntimeTypeInfo([], t3));
          C.JSArray_methods.add$1(group.nodes, edge.node);
        } else
          --depth;
        if (depth === 0) {
          C.JSArray_methods.add$1(horizontalGroups, group);
          group = null;
        }
      }
      C.JSArray_methods.sort$0(horizontalGroups);
      if (t2 === C.TextDirection_0)
        horizontalGroups = new H.ReversedListIterable(horizontalGroups, [H.getTypeArgumentByIndex(horizontalGroups, 0)]).toList$0(0);
      result = H.setRuntimeTypeInfo([], t3);
      for (t1 = horizontalGroups.length, _i = 0; _i < horizontalGroups.length; horizontalGroups.length === t1 || (0, H.throwConcurrentModificationError)(horizontalGroups), ++_i)
        C.JSArray_methods.addAll$1(result, horizontalGroups[_i].sortedWithinKnot$0());
      return result;
    },
    sortedWithinKnot$0: function() {
      var t3, t4, nodeMap, edges, t5, t6, t7, _i, node, t8, t9, t10, t11, center, _i0, nextNode, t12, t13, t14, nextCenter, direction, isLtrAndForward, isRtlAndForward, sortedIds, visitedIds, startNodes,
        t1 = this.nodes,
        t2 = t1.length;
      if (t2 <= 1)
        return t1;
      t3 = P.int;
      t4 = A.SemanticsNode;
      nodeMap = P.LinkedHashMap_LinkedHashMap$_empty(t3, t4);
      edges = P.LinkedHashMap_LinkedHashMap$_empty(t3, t3);
      for (t5 = this.textDirection, t6 = t5 === C.TextDirection_0, t5 = t5 === C.TextDirection_1, t7 = t2, _i = 0; _i < t7; t11 === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i, t7 = t11) {
        if (_i >= t7)
          return H.ioore(t1, _i);
        node = t1[_i];
        t7 = node.id;
        nodeMap.$indexSet(0, t7, node);
        t8 = node._semantics$_rect;
        t9 = t8.left;
        t10 = t8.right;
        if (typeof t10 !== "number")
          return t10.$sub();
        if (typeof t9 !== "number")
          return H.iae(t9);
        t11 = t8.top;
        t8 = t8.bottom;
        if (typeof t8 !== "number")
          return t8.$sub();
        if (typeof t11 !== "number")
          return H.iae(t11);
        center = A._pointInParentCoordinates(node, new Q.Offset(t9 + (t10 - t9) / 2, t11 + (t8 - t11) / 2));
        for (t8 = t1.length, t9 = center._dx, t10 = center._dy, _i0 = 0; t11 = t1.length, _i0 < t11; t1.length === t8 || (0, H.throwConcurrentModificationError)(t1), ++_i0) {
          nextNode = t1[_i0];
          if (node === nextNode || edges.$index(0, nextNode.id) === t7)
            continue;
          t11 = nextNode._semantics$_rect;
          t12 = t11.left;
          t13 = t11.right;
          if (typeof t13 !== "number")
            return t13.$sub();
          if (typeof t12 !== "number")
            return H.iae(t12);
          t14 = t11.top;
          t11 = t11.bottom;
          if (typeof t11 !== "number")
            return t11.$sub();
          if (typeof t14 !== "number")
            return H.iae(t14);
          nextCenter = A._pointInParentCoordinates(nextNode, new Q.Offset(t12 + (t13 - t12) / 2, t14 + (t11 - t14) / 2));
          t14 = nextCenter._dx;
          if (typeof t14 !== "number")
            return t14.$sub();
          if (typeof t9 !== "number")
            return H.iae(t9);
          t11 = nextCenter._dy;
          if (typeof t11 !== "number")
            return t11.$sub();
          if (typeof t10 !== "number")
            return H.iae(t10);
          direction = Math.atan2(t11 - t10, t14 - t9);
          isLtrAndForward = t5 && -0.7853981633974483 < direction && direction < 2.356194490192345;
          if (t6)
            isRtlAndForward = direction < -2.356194490192345 || direction > 2.356194490192345;
          else
            isRtlAndForward = false;
          if (isLtrAndForward || isRtlAndForward)
            edges.$indexSet(0, t7, nextNode.id);
        }
      }
      sortedIds = H.setRuntimeTypeInfo([], [t3]);
      visitedIds = P.LinkedHashSet_LinkedHashSet(t3);
      startNodes = H.setRuntimeTypeInfo(t1.slice(0), [H.getTypeArgumentByIndex(t1, 0)]);
      C.JSArray_methods.sort$1(startNodes, new A._SemanticsSortGroup_sortedWithinKnot_closure());
      t1 = H.getTypeArgumentByIndex(startNodes, 0);
      new H.MappedListIterable(startNodes, H.functionTypeCheck(new A._SemanticsSortGroup_sortedWithinKnot_closure0(), {func: 1, ret: t3, args: [t1]}), [t1, t3]).forEach$1(0, new A._SemanticsSortGroup_sortedWithinKnot_search(visitedIds, edges, sortedIds));
      t3 = H.getTypeArgumentByIndex(sortedIds, 0);
      t4 = new H.MappedListIterable(sortedIds, H.functionTypeCheck(new A._SemanticsSortGroup_sortedWithinKnot_closure1(nodeMap), {func: 1, ret: t4, args: [t3]}), [t3, t4]).toList$0(0);
      return new H.ReversedListIterable(t4, [H.getTypeArgumentByIndex(t4, 0)]).toList$0(0);
    },
    $asComparable: function() {
      return [A._SemanticsSortGroup];
    }
  };
  A._SemanticsSortGroup_sortedWithinKnot_closure.prototype = {
    call$2: function(a, b) {
      var t1, aTopLeft, bTopLeft, verticalDiff;
      H.interceptedTypeCheck(a, "$isSemanticsNode");
      H.interceptedTypeCheck(b, "$isSemanticsNode");
      t1 = a._semantics$_rect;
      aTopLeft = A._pointInParentCoordinates(a, new Q.Offset(t1.left, t1.top));
      t1 = b._semantics$_rect;
      bTopLeft = A._pointInParentCoordinates(b, new Q.Offset(t1.left, t1.top));
      verticalDiff = J.compareTo$1$ns(aTopLeft._dy, bTopLeft._dy);
      if (verticalDiff !== 0)
        return -verticalDiff;
      return -J.compareTo$1$ns(aTopLeft._dx, bTopLeft._dx);
    },
    $signature: 39
  };
  A._SemanticsSortGroup_sortedWithinKnot_search.prototype = {
    call$1: function(id) {
      var t1, _this = this;
      H.intTypeCheck(id);
      t1 = _this.visitedIds;
      if (t1.contains$1(0, id))
        return;
      t1.add$1(0, id);
      t1 = _this.edges;
      if (t1.containsKey$1(0, id))
        _this.call$1(t1.$index(0, id));
      C.JSArray_methods.add$1(_this.sortedIds, id);
    },
    $signature: 33
  };
  A._SemanticsSortGroup_sortedWithinKnot_closure0.prototype = {
    call$1: function(node) {
      return H.interceptedTypeCheck(node, "$isSemanticsNode").id;
    },
    $signature: 213
  };
  A._SemanticsSortGroup_sortedWithinKnot_closure1.prototype = {
    call$1: function(id) {
      return this.nodeMap.$index(0, H.intTypeCheck(id));
    },
    $signature: 130
  };
  A._TraversalSortNode.prototype = {
    compareTo$1: function(_, other) {
      var t1, t2;
      H.interceptedTypeCheck(other, "$is_TraversalSortNode");
      t1 = this.sortKey;
      if (t1 != null)
        t2 = (other == null ? null : other.sortKey) == null;
      else
        t2 = true;
      if (t2)
        return this.position - other.position;
      return t1.doCompare$1(other.sortKey);
    },
    $isComparable: 1,
    $asComparable: function() {
      return [A._TraversalSortNode];
    }
  };
  A.SemanticsOwner.prototype = {
    dispose$0: function() {
      var _this = this;
      _this._dirtyNodes.clear$0(0);
      _this._nodes.clear$0(0);
      _this._detachedNodes.clear$0(0);
      _this.super$ChangeNotifier$dispose();
    },
    sendSemanticsUpdate$0: function() {
      var customSemanticsActionIds, visitedNodes, t2, t3, t4, t5, localDirtyNodes, t6, t7, t8, _i, node, builder, _this = this,
        t1 = _this._dirtyNodes;
      if (t1._collection$_length === 0)
        return;
      customSemanticsActionIds = P.LinkedHashSet_LinkedHashSet(P.int);
      visitedNodes = H.setRuntimeTypeInfo([], [A.SemanticsNode]);
      for (t2 = H.getTypeArgumentByIndex(t1, 0), t3 = {func: 1, ret: P.bool, args: [t2]}, t4 = [t2], t5 = _this._detachedNodes; t1._collection$_length !== 0;) {
        localDirtyNodes = P.List_List$from(new H.WhereIterable(t1, H.functionTypeCheck(new A.SemanticsOwner_sendSemanticsUpdate_closure(_this), t3), t4), true, t2);
        t1.clear$0(0);
        t5.clear$0(0);
        t6 = H.getTypeArgumentByIndex(localDirtyNodes, 0);
        t7 = H.functionTypeCheck(new A.SemanticsOwner_sendSemanticsUpdate_closure0(), {func: 1, ret: P.int, args: [t6, t6]});
        t8 = localDirtyNodes.length - 1;
        if (t8 - 0 <= 32)
          H.Sort__insertionSort(localDirtyNodes, 0, t8, t7, t6);
        else
          H.Sort__dualPivotQuicksort(localDirtyNodes, 0, t8, t7, t6);
        C.JSArray_methods.addAll$1(visitedNodes, localDirtyNodes);
        for (t6 = localDirtyNodes.length, _i = 0; _i < localDirtyNodes.length; localDirtyNodes.length === t6 || (0, H.throwConcurrentModificationError)(localDirtyNodes), ++_i) {
          node = localDirtyNodes[_i];
          if (node._mergeAllDescendantsIntoThisNode || node._isMergedIntoParent) {
            t7 = J.getInterceptor$x(node);
            if (H.interceptedTypeCheck(B.AbstractNode.prototype.get$parent.call(t7, node), "$isSemanticsNode") != null) {
              t8 = H.interceptedTypeCheck(B.AbstractNode.prototype.get$parent.call(t7, node), "$isSemanticsNode");
              t8 = t8._mergeAllDescendantsIntoThisNode || t8._isMergedIntoParent;
            } else
              t8 = false;
            if (t8)
              H.interceptedTypeCheck(B.AbstractNode.prototype.get$parent.call(t7, node), "$isSemanticsNode")._markDirty$0();
          }
        }
      }
      C.JSArray_methods.sort$1(visitedNodes, new A.SemanticsOwner_sendSemanticsUpdate_closure1());
      builder = new Q.SemanticsUpdateBuilder(H.setRuntimeTypeInfo([], [T.SemanticsNodeUpdate]));
      for (t2 = visitedNodes.length, _i = 0; _i < visitedNodes.length; visitedNodes.length === t2 || (0, H.throwConcurrentModificationError)(visitedNodes), ++_i) {
        node = visitedNodes[_i];
        if (node._semantics$_dirty && node._node$_owner != null)
          node._addToUpdate$2(builder, customSemanticsActionIds);
      }
      t1.clear$0(0);
      for (t1 = P._LinkedHashSetIterator$(customSemanticsActionIds, customSemanticsActionIds._collection$_modifications, H.getTypeArgumentByIndex(customSemanticsActionIds, 0)); t1.moveNext$0();)
        $.CustomSemanticsAction__actions.$index(0, t1._collection$_current).action;
      $.$get$window().toString;
      T.EngineSemanticsOwner_instance().updateSemantics$1(new T.SemanticsUpdate(builder._nodeUpdates));
      _this.notifyListeners$0();
    },
    _getSemanticsActionHandlerForId$2: function(id, action) {
      var t2, t1 = {},
        result = t1.result = this._nodes.$index(0, id);
      if (result != null)
        t2 = (result._mergeAllDescendantsIntoThisNode || result._isMergedIntoParent) && !result._actions.containsKey$1(0, action);
      else
        t2 = false;
      if (t2)
        result._visitDescendants$1(new A.SemanticsOwner__getSemanticsActionHandlerForId_closure(t1, action));
      t2 = t1.result;
      if (t2 == null || !t2._actions.containsKey$1(0, action))
        return;
      return t1.result._actions.$index(0, action);
    },
    performAction$3: function(id, action, args) {
      var handler = this._getSemanticsActionHandlerForId$2(id, action);
      if (handler != null) {
        handler.call$1(args);
        return;
      }
      if (action === C.SemanticsAction_256 && this._nodes.$index(0, id)._showOnScreen != null)
        this._nodes.$index(0, id)._showOnScreen.call$0();
    },
    toString$0: function(_) {
      var t1 = this.super$Object$toString(0);
      return t1;
    }
  };
  A.SemanticsOwner_sendSemanticsUpdate_closure.prototype = {
    call$1: function(node) {
      return !this.$this._detachedNodes.contains$1(0, H.interceptedTypeCheck(node, "$isSemanticsNode"));
    },
    $signature: 38
  };
  A.SemanticsOwner_sendSemanticsUpdate_closure0.prototype = {
    call$2: function(a, b) {
      H.interceptedTypeCheck(a, "$isSemanticsNode");
      H.interceptedTypeCheck(b, "$isSemanticsNode");
      return a._node$_depth - b._node$_depth;
    },
    $signature: 39
  };
  A.SemanticsOwner_sendSemanticsUpdate_closure1.prototype = {
    call$2: function(a, b) {
      H.interceptedTypeCheck(a, "$isSemanticsNode");
      H.interceptedTypeCheck(b, "$isSemanticsNode");
      return a._node$_depth - b._node$_depth;
    },
    $signature: 39
  };
  A.SemanticsOwner__getSemanticsActionHandlerForId_closure.prototype = {
    call$1: function(node) {
      if (node._actions.containsKey$1(0, this.action)) {
        this._box_0.result = node;
        return false;
      }
      return true;
    },
    $signature: 38
  };
  A.SemanticsConfiguration.prototype = {
    _addAction$2: function(action, handler) {
      var _this = this;
      _this._actions.$indexSet(0, action, H.functionTypeCheck(handler, {func: 1, ret: -1, args: [,]}));
      _this._actionsAsBits = _this._actionsAsBits | action.index;
      _this._hasBeenAnnotated = true;
    },
    _addArgumentlessAction$2: function(action, handler) {
      this._addAction$2(action, new A.SemanticsConfiguration__addArgumentlessAction_closure(H.functionTypeCheck(handler, {func: 1, ret: -1})));
    },
    set$onMoveCursorForwardByCharacter: function(value) {
      H.functionTypeCheck(value, {func: 1, ret: -1, args: [P.bool]});
      this._addAction$2(C.SemanticsAction_512, new A.SemanticsConfiguration_onMoveCursorForwardByCharacter_closure(value));
      this.set$_semantics$_onMoveCursorForwardByCharacter(value);
    },
    set$onMoveCursorBackwardByCharacter: function(value) {
      H.functionTypeCheck(value, {func: 1, ret: -1, args: [P.bool]});
      this._addAction$2(C.SemanticsAction_1024, new A.SemanticsConfiguration_onMoveCursorBackwardByCharacter_closure(value));
      this.set$_semantics$_onMoveCursorBackwardByCharacter(value);
    },
    set$onSetSelection: function(value) {
      H.functionTypeCheck(value, {func: 1, ret: -1, args: [X.TextSelection]});
      this._addAction$2(C.SemanticsAction_2048, new A.SemanticsConfiguration_onSetSelection_closure(value));
      this.set$_semantics$_onSetSelection(value);
    },
    set$scrollChildCount: function(value) {
      if (value == this._scrollChildCount)
        return;
      this._scrollChildCount = value;
      this._hasBeenAnnotated = true;
    },
    set$scrollIndex: function(value) {
      if (value == this._scrollIndex)
        return;
      this._scrollIndex = value;
      this._hasBeenAnnotated = true;
    },
    set$elevation: function(_, value) {
      if (value == this._elevation)
        return;
      this._elevation = value;
      this._hasBeenAnnotated = true;
    },
    _setFlag$2: function(flag, value) {
      var t1, t2, _this = this;
      H.boolConversionCheck(value);
      t1 = _this._flags;
      t2 = flag.index;
      if (value)
        _this._flags = t1 | t2;
      else
        _this._flags = t1 & ~t2;
      _this._hasBeenAnnotated = true;
    },
    isCompatibleWith$1: function(other) {
      var t1, _this = this;
      if (other == null || !other._hasBeenAnnotated || !_this._hasBeenAnnotated)
        return true;
      if ((_this._actionsAsBits & other._actionsAsBits) !== 0)
        return false;
      if ((_this._flags & other._flags) !== 0)
        return false;
      t1 = _this._semantics$_value;
      if (t1 != null)
        if (t1.length !== 0) {
          t1 = other._semantics$_value;
          t1 = t1 != null && t1.length !== 0;
        } else
          t1 = false;
      else
        t1 = false;
      if (t1)
        return false;
      return true;
    },
    absorb$1: function(child) {
      var t1, t2, t3, _this = this;
      if (!child._hasBeenAnnotated)
        return;
      _this._actions.addAll$1(0, child._actions);
      _this._customSemanticsActions.addAll$1(0, child._customSemanticsActions);
      _this._actionsAsBits = _this._actionsAsBits | child._actionsAsBits;
      _this._flags = _this._flags | child._flags;
      _this._textSelection = child._textSelection;
      if (_this._scrollPosition == null)
        _this._scrollPosition = child._scrollPosition;
      if (_this._scrollExtentMax == null)
        _this._scrollExtentMax = child._scrollExtentMax;
      if (_this._scrollExtentMin == null)
        _this._scrollExtentMin = child._scrollExtentMin;
      if (_this._hintOverrides == null)
        _this._hintOverrides = child._hintOverrides;
      if (_this._indexInParent == null)
        _this._indexInParent = child._indexInParent;
      if (_this._scrollIndex == null)
        _this._scrollIndex = child._scrollIndex;
      if (_this._scrollChildCount == null)
        _this._scrollChildCount = child._scrollChildCount;
      _this._platformViewId = child._platformViewId;
      t1 = _this._semantics$_textDirection;
      if (t1 == null) {
        t1 = _this._semantics$_textDirection = child._semantics$_textDirection;
        _this._hasBeenAnnotated = true;
      }
      if (_this._sortKey == null)
        _this._sortKey = child._sortKey;
      t2 = _this._label;
      _this._label = A._concatStrings(child._label, child._semantics$_textDirection, t2, t1);
      t1 = _this._decreasedValue;
      if (t1 === "" || t1 == null)
        _this._decreasedValue = child._decreasedValue;
      t1 = _this._semantics$_value;
      if (t1 === "" || t1 == null)
        _this._semantics$_value = child._semantics$_value;
      t1 = _this._increasedValue;
      if (t1 === "" || t1 == null)
        _this._increasedValue = child._increasedValue;
      t1 = _this._hint;
      t2 = _this._semantics$_textDirection;
      _this._hint = A._concatStrings(child._hint, child._semantics$_textDirection, t1, t2);
      t2 = _this._thickness;
      t1 = child._thickness;
      t3 = child._elevation;
      if (typeof t3 !== "number")
        return H.iae(t3);
      _this._thickness = Math.max(t2, t1 + t3);
      _this._hasBeenAnnotated = _this._hasBeenAnnotated || child._hasBeenAnnotated;
    },
    copy$0: function() {
      var _this = this,
        t1 = P.LinkedHashMap_LinkedHashMap$_empty(Q.SemanticsAction, {func: 1, ret: -1, args: [,]}),
        t2 = new A.SemanticsConfiguration(t1, P.LinkedHashMap_LinkedHashMap$_empty(A.CustomSemanticsAction, {func: 1, ret: -1}));
      t2._isSemanticBoundary = _this._isSemanticBoundary;
      t2.explicitChildNodes = _this.explicitChildNodes;
      t2.isBlockingSemanticsOfPreviouslyPaintedNodes = _this.isBlockingSemanticsOfPreviouslyPaintedNodes;
      t2._hasBeenAnnotated = _this._hasBeenAnnotated;
      t2._isMergingSemanticsOfDescendants = _this._isMergingSemanticsOfDescendants;
      t2._semantics$_textDirection = _this._semantics$_textDirection;
      t2._sortKey = _this._sortKey;
      t2._label = _this._label;
      t2._increasedValue = _this._increasedValue;
      t2._semantics$_value = _this._semantics$_value;
      t2._decreasedValue = _this._decreasedValue;
      t2._hint = _this._hint;
      t2._hintOverrides = _this._hintOverrides;
      t2._elevation = _this._elevation;
      t2._thickness = _this._thickness;
      t2._flags = _this._flags;
      t2.set$_tagsForChildren(_this._tagsForChildren);
      t2._textSelection = _this._textSelection;
      t2._scrollPosition = _this._scrollPosition;
      t2._scrollExtentMax = _this._scrollExtentMax;
      t2._scrollExtentMin = _this._scrollExtentMin;
      t2._actionsAsBits = _this._actionsAsBits;
      t2._indexInParent = _this._indexInParent;
      t2._scrollIndex = _this._scrollIndex;
      t2._scrollChildCount = _this._scrollChildCount;
      t2._platformViewId = _this._platformViewId;
      t1.addAll$1(0, _this._actions);
      t2._customSemanticsActions.addAll$1(0, _this._customSemanticsActions);
      return t2;
    },
    set$_onTap: function(_onTap) {
      this._onTap = H.functionTypeCheck(_onTap, {func: 1, ret: -1});
    },
    set$_onLongPress: function(_onLongPress) {
      this._onLongPress = H.functionTypeCheck(_onLongPress, {func: 1, ret: -1});
    },
    set$_semantics$_onScrollLeft: function(_onScrollLeft) {
      H.functionTypeCheck(_onScrollLeft, {func: 1, ret: -1});
    },
    set$_semantics$_onDismiss: function(_onDismiss) {
      H.functionTypeCheck(_onDismiss, {func: 1, ret: -1});
    },
    set$_semantics$_onScrollRight: function(_onScrollRight) {
      H.functionTypeCheck(_onScrollRight, {func: 1, ret: -1});
    },
    set$_semantics$_onScrollUp: function(_onScrollUp) {
      H.functionTypeCheck(_onScrollUp, {func: 1, ret: -1});
    },
    set$_semantics$_onScrollDown: function(_onScrollDown) {
      H.functionTypeCheck(_onScrollDown, {func: 1, ret: -1});
    },
    set$_semantics$_onIncrease: function(_onIncrease) {
      H.functionTypeCheck(_onIncrease, {func: 1, ret: -1});
    },
    set$_semantics$_onDecrease: function(_onDecrease) {
      H.functionTypeCheck(_onDecrease, {func: 1, ret: -1});
    },
    set$_semantics$_onCopy: function(_onCopy) {
      H.functionTypeCheck(_onCopy, {func: 1, ret: -1});
    },
    set$_semantics$_onCut: function(_onCut) {
      H.functionTypeCheck(_onCut, {func: 1, ret: -1});
    },
    set$_semantics$_onPaste: function(_onPaste) {
      H.functionTypeCheck(_onPaste, {func: 1, ret: -1});
    },
    set$_semantics$_onMoveCursorForwardByCharacter: function(_onMoveCursorForwardByCharacter) {
      H.functionTypeCheck(_onMoveCursorForwardByCharacter, {func: 1, ret: -1, args: [P.bool]});
    },
    set$_semantics$_onMoveCursorBackwardByCharacter: function(_onMoveCursorBackwardByCharacter) {
      H.functionTypeCheck(_onMoveCursorBackwardByCharacter, {func: 1, ret: -1, args: [P.bool]});
    },
    set$_semantics$_onSetSelection: function(_onSetSelection) {
      H.functionTypeCheck(_onSetSelection, {func: 1, ret: -1, args: [X.TextSelection]});
    },
    set$_semantics$_onDidGainAccessibilityFocus: function(_onDidGainAccessibilityFocus) {
      H.functionTypeCheck(_onDidGainAccessibilityFocus, {func: 1, ret: -1});
    },
    set$_semantics$_onDidLoseAccessibilityFocus: function(_onDidLoseAccessibilityFocus) {
      H.functionTypeCheck(_onDidLoseAccessibilityFocus, {func: 1, ret: -1});
    },
    set$_tagsForChildren: function(_tagsForChildren) {
      this._tagsForChildren = H.assertSubtype(_tagsForChildren, "$isSet", [A.SemanticsTag], "$asSet");
    }
  };
  A.SemanticsConfiguration__addArgumentlessAction_closure.prototype = {
    call$1: function(args) {
      this.handler.call$0();
    },
    $signature: 6
  };
  A.SemanticsConfiguration_onMoveCursorForwardByCharacter_closure.prototype = {
    call$1: function(args) {
      this.value.call$1(H.boolTypeCheck(args));
    },
    $signature: 6
  };
  A.SemanticsConfiguration_onMoveCursorBackwardByCharacter_closure.prototype = {
    call$1: function(args) {
      this.value.call$1(H.boolTypeCheck(args));
    },
    $signature: 6
  };
  A.SemanticsConfiguration_onSetSelection_closure.prototype = {
    call$1: function(args) {
      var t1;
      H.assertSubtype(args, "$isMap", [P.String, P.int], "$asMap");
      t1 = J.getInterceptor$asx(args);
      this.value.call$1(X.TextSelection$(t1.$index(args, "base"), t1.$index(args, "extent")));
    },
    $signature: 6
  };
  A.DebugSemanticsDumpOrder.prototype = {
    toString$0: function(_) {
      return this._semantics$_name;
    }
  };
  A.SemanticsSortKey.prototype = {
    compareTo$1: function(_, other) {
      return this.doCompare$1(H.interceptedTypeCheck(other, "$isSemanticsSortKey"));
    },
    $isComparable: 1,
    $asComparable: function() {
      return [A.SemanticsSortKey];
    }
  };
  A.OrdinalSortKey.prototype = {
    doCompare$1: function(other) {
      var t1 = other.order === this.order;
      if (t1)
        return 0;
      return C.JSInt_methods.compareTo$1(this.order, other.order);
    }
  };
  A._SemanticsNode_AbstractNode_DiagnosticableTreeMixin.prototype = {};
  E.SemanticsEvent.prototype = {
    toMap$1$nodeId: function(nodeId) {
      var $event = P.LinkedHashMap_LinkedHashMap$_literal(["type", this.type, "data", this.getDataMap$0()], P.String, null);
      if (nodeId != null)
        $event.$indexSet(0, "nodeId", nodeId);
      return $event;
    },
    toString$0: function(_) {
      var _i, key,
        pairs = H.setRuntimeTypeInfo([], [P.String]),
        dataMap = this.getDataMap$0(),
        t1 = dataMap.get$keys(dataMap),
        sortedKeys = P.List_List$from(t1, true, H.getRuntimeTypeArgument(t1, "Iterable", 0));
      C.JSArray_methods.sort$0(sortedKeys);
      for (t1 = sortedKeys.length, _i = 0; _i < sortedKeys.length; sortedKeys.length === t1 || (0, H.throwConcurrentModificationError)(sortedKeys), ++_i) {
        key = sortedKeys[_i];
        C.JSArray_methods.add$1(pairs, H.S(key) + ": " + H.S(dataMap.$index(0, key)));
      }
      return new H.TypeImpl(H.getRti(this)).toString$0(0) + "(" + C.JSArray_methods.join$1(pairs, ", ") + ")";
    }
  };
  E.TapSemanticEvent.prototype = {
    getDataMap$0: function() {
      return C.Map_empty1;
    }
  };
  Q.AssetBundle.prototype = {
    loadString$2$cache: function(key, cache) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(P.String),
        $async$returnValue, $async$self = this, t1, data;
      var $async$loadString$2$cache = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 3;
              return P._asyncAwait($async$self.load$1(0, key), $async$loadString$2$cache);
            case 3:
              // returning from await.
              data = $async$result;
              if (data == null)
                throw H.wrapException(U.FlutterError$("Unable to load asset: " + key));
              t1 = data.byteLength;
              if (typeof t1 !== "number") {
                $async$returnValue = t1.$lt();
                // goto return
                $async$goto = 1;
                break;
              }
              if (t1 < 20480) {
                t1 = data.buffer;
                t1.toString;
                $async$returnValue = C.C_Utf8Codec.decode$1(0, H.NativeUint8List_NativeUint8List$view(t1, 0, null));
                // goto return
                $async$goto = 1;
                break;
              }
              t1 = data.buffer;
              t1.toString;
              $async$returnValue = C.C_Utf8Codec.decode$1(0, H.NativeUint8List_NativeUint8List$view(t1, 0, null));
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$loadString$2$cache, $async$completer);
    },
    toString$0: function(_) {
      return this.get$runtimeType(this).toString$0(0) + "#" + Y.shortHash(this) + "()";
    }
  };
  Q.CachingAssetBundle.prototype = {
    loadString$2$cache: function(key, cache) {
      if (cache)
        return this._stringCache.putIfAbsent$2(0, key, new Q.CachingAssetBundle_loadString_closure(this, key));
      return this.super$AssetBundle$loadString(key, true);
    },
    loadString$1: function(key) {
      return this.loadString$2$cache(key, true);
    }
  };
  Q.CachingAssetBundle_loadString_closure.prototype = {
    call$0: function() {
      return this.$this.super$AssetBundle$loadString(this.key, true);
    },
    $signature: 131
  };
  Q.PlatformAssetBundle.prototype = {
    load$1: function(_, key) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(P.ByteData),
        $async$returnValue, port, isFile, t2, hasAuthority, path, asset, t1, scheme, userInfo, host;
      var $async$load$1 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = P._Uri__uriEncode(C.List_gnE, key, C.C_Utf8Codec, false);
              scheme = P._Uri__makeScheme(null, 0, 0);
              userInfo = P._Uri__makeUserInfo(null, 0, 0);
              host = P._Uri__makeHost(null, 0, 0, false);
              P._Uri__makeQuery(null, 0, 0, null);
              P._Uri__makeFragment(null, 0, 0);
              port = P._Uri__makePort(null, scheme);
              isFile = scheme === "file";
              if (host == null)
                t2 = userInfo.length !== 0 || port != null || isFile;
              else
                t2 = false;
              if (t2)
                host = "";
              t2 = host == null;
              hasAuthority = !t2;
              path = P._Uri__makePath(t1, 0, t1.length, null, scheme, hasAuthority);
              t1 = scheme.length === 0;
              if (t1 && t2 && !C.JSString_methods.startsWith$1(path, "/"))
                path = P._Uri__normalizeRelativePath(path, !t1 || hasAuthority);
              else
                path = P._Uri__removeDotSegments(path);
              t2 && C.JSString_methods.startsWith$1(path, "//") ? "" : host;
              t1 = C.C_Utf8Encoder.convert$1(path).buffer;
              t1.toString;
              $async$goto = 3;
              return P._asyncAwait(B.BinaryMessages_send("flutter/assets", H.NativeByteData_NativeByteData$view(t1, 0, null)), $async$load$1);
            case 3:
              // returning from await.
              asset = $async$result;
              if (asset == null)
                throw H.wrapException(U.FlutterError$("Unable to load asset: " + key));
              $async$returnValue = asset;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$load$1, $async$completer);
    }
  };
  N.ServicesBinding.prototype = {
    _addLicenses$0: function() {
      var $async$_addLicenses$0 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        switch ($async$errorCode) {
          case 2:
            $async$next = $async$nextWhenCanceled;
            $async$goto = $async$next.pop();
            break;
          case 1:
            $async$currentError = $async$result;
            $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = P.String;
              t2 = new P._Future($.Zone__current, [t1]);
              rawLicenses = new P._AsyncCompleter(t2, [t1]);
              P.Timer_Timer(C.Duration_0, new N.ServicesBinding__addLicenses_closure(rawLicenses));
              $async$goto = 3;
              return P._asyncStarHelper(t2, $async$_addLicenses$0, $async$controller);
            case 3:
              // returning from await.
              t2 = [P.List, F.LicenseEntry];
              t1 = new P._Future($.Zone__current, [t2]);
              P.Timer_Timer(C.Duration_0, new N.ServicesBinding__addLicenses_closure0(new P._AsyncCompleter(t1, [t2]), rawLicenses));
              $async$goto = 4;
              return P._asyncStarHelper(t1, $async$_addLicenses$0, $async$controller);
            case 4:
              // returning from await.
              $async$temp1 = P;
              $async$goto = 6;
              return P._asyncStarHelper(t1, $async$_addLicenses$0, $async$controller);
            case 6:
              // returning from await.
              $async$goto = 5;
              $async$nextWhenCanceled = [1];
              return P._asyncStarHelper(P._IterationMarker_yieldStar($async$temp1.Stream_Stream$fromIterable($async$result, F.LicenseEntry)), $async$_addLicenses$0, $async$controller);
            case 5:
              // after yield
            case 1:
              // return
              return P._asyncStarHelper(null, 0, $async$controller);
            case 2:
              // rethrow
              return P._asyncStarHelper($async$currentError, 1, $async$controller);
          }
      });
      var $async$goto = 0,
        $async$controller = P._makeAsyncStarStreamController($async$_addLicenses$0, F.LicenseEntry),
        $async$nextWhenCanceled, $async$handler = 2, $async$currentError, $async$next = [], t1, t2, rawLicenses, $async$temp1;
      return P._streamOfController($async$controller);
    }
  };
  N.ServicesBinding__addLicenses_closure.prototype = {
    call$0: function() {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(P.Null),
        $async$self = this;
      var $async$call$0 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$self.rawLicenses.complete$1(0, $.$get$rootBundle().loadString$2$cache("LICENSE", false));
              // implicit return
              return P._asyncReturn(null, $async$completer);
          }
      });
      return P._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 37
  };
  N.ServicesBinding__addLicenses_closure0.prototype = {
    call$0: function() {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(P.Null),
        $async$self = this, $async$temp1, $async$temp2, $async$temp3;
      var $async$call$0 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$temp1 = $async$self.parsedLicenses;
              $async$temp2 = F;
              $async$temp3 = N.binding0_ServicesBinding__parseLicenses$closure();
              $async$goto = 2;
              return P._asyncAwait($async$self.rawLicenses.future, $async$call$0);
            case 2:
              // returning from await.
              $async$temp1.complete$1(0, $async$temp2.compute($async$temp3, $async$result, "parseLicenses", P.String, [P.List, F.LicenseEntry]));
              // implicit return
              return P._asyncReturn(null, $async$completer);
          }
      });
      return P._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 37
  };
  F.MethodCall0.prototype = {
    toString$0: function(_) {
      return new H.TypeImpl(H.getRti(this)).toString$0(0) + "(" + this.method + ", " + H.S(this.$arguments) + ")";
    }
  };
  F.PlatformException.prototype = {
    toString$0: function(_) {
      return "PlatformException(" + H.S(this.code) + ", " + H.S(this.message) + ", " + H.S(this.details) + ")";
    },
    $isException: 1
  };
  F.MissingPluginException.prototype = {
    toString$0: function(_) {
      return "MissingPluginException(" + this.message + ")";
    },
    $isException: 1
  };
  U.StringCodec.prototype = {
    decodeMessage$1: function(message) {
      var t1;
      H.interceptedTypeCheck(message, "$isByteData");
      if (message == null)
        return;
      t1 = message.buffer;
      t1.toString;
      return new P.Utf8Decoder(false).convert$1(H.NativeUint8List_NativeUint8List$view(t1, 0, null));
    },
    encodeMessage$1: function(message) {
      var t1;
      H.stringTypeCheck(message);
      if (message == null)
        return;
      t1 = C.C_Utf8Encoder.convert$1(message).buffer;
      t1.toString;
      return H.NativeByteData_NativeByteData$view(t1, 0, null);
    },
    $isMessageCodec: 1,
    $asMessageCodec: function() {
      return [P.String];
    }
  };
  U.JSONMessageCodec0.prototype = {
    encodeMessage$1: function(message) {
      if (message == null)
        return;
      return C.C_StringCodec.encodeMessage$1(C.C_JsonCodec.encode$1(message));
    },
    decodeMessage$1: function(message) {
      H.interceptedTypeCheck(message, "$isByteData");
      if (message == null)
        return message;
      return C.C_JsonCodec.decode$1(0, C.C_StringCodec.decodeMessage$1(message));
    },
    $isMessageCodec: 1,
    $asMessageCodec: function() {
    }
  };
  U.JSONMethodCodec.prototype = {
    decodeMethodCall$1: function(methodCall) {
      var method, $arguments, _null = null,
        decoded = C.C_JSONMessageCodec.decodeMessage$1(methodCall),
        t1 = J.getInterceptor$(decoded);
      if (!t1.$isMap)
        throw H.wrapException(P.FormatException$("Expected method call Map, got " + H.S(decoded), _null, _null));
      method = t1.$index(decoded, "method");
      $arguments = t1.$index(decoded, "args");
      if (typeof method === "string")
        return new F.MethodCall0(method, $arguments);
      throw H.wrapException(P.FormatException$("Invalid method call: " + H.S(decoded), _null, _null));
    },
    decodeEnvelope$1: function(envelope) {
      var t2, t3, _null = null,
        decoded = C.C_JSONMessageCodec.decodeMessage$1(envelope),
        t1 = J.getInterceptor$(decoded);
      if (!t1.$isList)
        throw H.wrapException(P.FormatException$("Expected envelope List, got " + H.S(decoded), _null, _null));
      if (t1.get$length(decoded) === 1)
        return t1.$index(decoded, 0);
      if (t1.get$length(decoded) === 3) {
        t2 = t1.$index(decoded, 0);
        if (typeof t2 === "string")
          if (t1.$index(decoded, 1) != null) {
            t2 = t1.$index(decoded, 1);
            t2 = typeof t2 === "string";
          } else
            t2 = true;
        else
          t2 = false;
      } else
        t2 = false;
      if (t2) {
        t2 = H.stringTypeCheck(t1.$index(decoded, 0));
        t3 = H.stringTypeCheck(t1.$index(decoded, 1));
        throw H.wrapException(F.PlatformException$(t2, t1.$index(decoded, 2), t3));
      }
      throw H.wrapException(P.FormatException$("Invalid envelope: " + H.S(decoded), _null, _null));
    },
    $isMethodCodec: 1
  };
  U.StandardMessageCodec.prototype = {
    encodeMessage$1: function(message) {
      var buffer;
      if (message == null)
        return;
      buffer = G.WriteBuffer$();
      this.writeValue$2(0, buffer, message);
      return buffer.done$0();
    },
    decodeMessage$1: function(message) {
      var buffer, result, t1, t2;
      H.interceptedTypeCheck(message, "$isByteData");
      if (message == null)
        return;
      buffer = new G.ReadBuffer(message);
      result = this.readValue$1(0, buffer);
      t1 = buffer._serialization$_position;
      t2 = message.byteLength;
      if (typeof t2 !== "number")
        return H.iae(t2);
      if (t1 < t2)
        throw H.wrapException(C.FormatException_oCg);
      return result;
    },
    writeValue$2: function(_, buffer, value) {
      var t1, t2, t3, bytes, t4, _this = this;
      if (value == null) {
        t1 = buffer._serialization$_buffer;
        t1.toString;
        t1._typed_buffers$_add$1(0, H.assertSubtypeOfRuntimeType(0, H.getRuntimeTypeArgument(t1, "_TypedDataBuffer", 0)));
      } else if (typeof value === "boolean") {
        t1 = value ? 1 : 2;
        t2 = buffer._serialization$_buffer;
        t2.toString;
        t2._typed_buffers$_add$1(0, H.assertSubtypeOfRuntimeType(t1, H.getRuntimeTypeArgument(t2, "_TypedDataBuffer", 0)));
      } else if (typeof value === "number") {
        t1 = buffer._serialization$_buffer;
        t1.toString;
        t1._typed_buffers$_add$1(0, H.assertSubtypeOfRuntimeType(6, H.getRuntimeTypeArgument(t1, "_TypedDataBuffer", 0)));
        buffer._alignTo$1(8);
        buffer._eightBytes.setFloat64(0, value, C.C_Endian === $.$get$Endian_host());
        buffer._serialization$_buffer.addAll$1(0, buffer._eightBytesAsList);
      } else if (typeof value === "number" && Math.floor(value) === value) {
        t1 = -2147483648 <= value && value <= 2147483647;
        t2 = buffer._serialization$_buffer;
        t3 = H.getRuntimeTypeArgument(t2, "_TypedDataBuffer", 0);
        if (t1) {
          t2.toString;
          t2._typed_buffers$_add$1(0, H.assertSubtypeOfRuntimeType(3, t3));
          buffer._eightBytes.setInt32(0, value, C.C_Endian === $.$get$Endian_host());
          buffer._serialization$_buffer.addAll$3(0, buffer._eightBytesAsList, 0, 4);
        } else {
          t2.toString;
          t2._typed_buffers$_add$1(0, H.assertSubtypeOfRuntimeType(4, t3));
          C.NativeByteData_methods.setInt64$3(buffer._eightBytes, 0, value, $.$get$Endian_host());
        }
      } else if (typeof value === "string") {
        t1 = buffer._serialization$_buffer;
        t1.toString;
        t1._typed_buffers$_add$1(0, H.assertSubtypeOfRuntimeType(7, H.getRuntimeTypeArgument(t1, "_TypedDataBuffer", 0)));
        bytes = C.C_Utf8Encoder.convert$1(value);
        _this.writeSize$2(buffer, bytes.length);
        buffer._serialization$_buffer.addAll$1(0, bytes);
      } else {
        t1 = J.getInterceptor$(value);
        if (!!t1.$isUint8List) {
          t1 = buffer._serialization$_buffer;
          t1.toString;
          t1._typed_buffers$_add$1(0, H.assertSubtypeOfRuntimeType(8, H.getRuntimeTypeArgument(t1, "_TypedDataBuffer", 0)));
          _this.writeSize$2(buffer, value.length);
          buffer._serialization$_buffer.addAll$1(0, value);
        } else if (!!t1.$isInt32List) {
          t1 = buffer._serialization$_buffer;
          t1.toString;
          t1._typed_buffers$_add$1(0, H.assertSubtypeOfRuntimeType(9, H.getRuntimeTypeArgument(t1, "_TypedDataBuffer", 0)));
          t1 = value.length;
          _this.writeSize$2(buffer, t1);
          buffer._alignTo$1(4);
          t2 = buffer._serialization$_buffer;
          t3 = value.buffer;
          t4 = value.byteOffset;
          t3.toString;
          t2.addAll$1(0, H.NativeUint8List_NativeUint8List$view(t3, t4, 4 * t1));
        } else if (!!t1.$isFloat64List) {
          t1 = buffer._serialization$_buffer;
          t1.toString;
          t1._typed_buffers$_add$1(0, H.assertSubtypeOfRuntimeType(11, H.getRuntimeTypeArgument(t1, "_TypedDataBuffer", 0)));
          t1 = value.length;
          _this.writeSize$2(buffer, t1);
          buffer._alignTo$1(8);
          t2 = buffer._serialization$_buffer;
          t3 = value.buffer;
          t4 = value.byteOffset;
          t3.toString;
          t2.addAll$1(0, H.NativeUint8List_NativeUint8List$view(t3, t4, 8 * t1));
        } else if (!!t1.$isList) {
          t2 = buffer._serialization$_buffer;
          t2.toString;
          t2._typed_buffers$_add$1(0, H.assertSubtypeOfRuntimeType(12, H.getRuntimeTypeArgument(t2, "_TypedDataBuffer", 0)));
          _this.writeSize$2(buffer, t1.get$length(value));
          for (t1 = t1.get$iterator(value); t1.moveNext$0();)
            _this.writeValue$2(0, buffer, t1.get$current(t1));
        } else if (!!t1.$isMap) {
          t2 = buffer._serialization$_buffer;
          t2.toString;
          t2._typed_buffers$_add$1(0, H.assertSubtypeOfRuntimeType(13, H.getRuntimeTypeArgument(t2, "_TypedDataBuffer", 0)));
          _this.writeSize$2(buffer, t1.get$length(value));
          t1.forEach$1(value, new U.StandardMessageCodec_writeValue_closure(_this, buffer));
        } else
          throw H.wrapException(P.ArgumentError$value(value, null, null));
      }
    },
    readValue$1: function(_, buffer) {
      var t1 = buffer._serialization$_position,
        t2 = buffer.data.byteLength;
      if (typeof t2 !== "number")
        return H.iae(t2);
      if (t1 >= t2)
        throw H.wrapException(C.FormatException_oCg);
      return this.readValueOfType$2(buffer.getUint8$0(0), buffer);
    },
    readValueOfType$2: function(type, buffer) {
      var result, value, $length, t1, t2, t3, list, i, t4, _this = this;
      switch (type) {
        case 0:
          result = null;
          break;
        case 1:
          result = true;
          break;
        case 2:
          result = false;
          break;
        case 3:
          value = buffer.data.getInt32(buffer._serialization$_position, C.C_Endian === $.$get$Endian_host());
          buffer._serialization$_position += 4;
          result = value;
          break;
        case 4:
          result = buffer.getInt64$0(0);
          break;
        case 5:
          result = P.int_parse(new P.Utf8Decoder(false).convert$1(buffer.getUint8List$1(_this.readSize$1(buffer))), null, 16);
          break;
        case 6:
          buffer._alignTo$1(8);
          value = buffer.data.getFloat64(buffer._serialization$_position, C.C_Endian === $.$get$Endian_host());
          buffer._serialization$_position += 8;
          result = value;
          break;
        case 7:
          result = new P.Utf8Decoder(false).convert$1(buffer.getUint8List$1(_this.readSize$1(buffer)));
          break;
        case 8:
          result = buffer.getUint8List$1(_this.readSize$1(buffer));
          break;
        case 9:
          $length = _this.readSize$1(buffer);
          buffer._alignTo$1(4);
          t1 = buffer.data;
          t2 = t1.buffer;
          t1 = t1.byteOffset;
          t3 = buffer._serialization$_position;
          if (typeof t1 !== "number")
            return t1.$add();
          t3 = t1 + t3;
          t2.toString;
          H._checkViewArguments(t2, t3, $length);
          list = $length == null ? new Int32Array(t2, t3) : new Int32Array(t2, t3, $length);
          t1 = buffer._serialization$_position;
          if (typeof $length !== "number")
            return H.iae($length);
          buffer._serialization$_position = t1 + 4 * $length;
          result = list;
          break;
        case 10:
          result = buffer.getInt64List$1(_this.readSize$1(buffer));
          break;
        case 11:
          $length = _this.readSize$1(buffer);
          buffer._alignTo$1(8);
          t1 = buffer.data;
          t2 = t1.buffer;
          t1 = t1.byteOffset;
          t3 = buffer._serialization$_position;
          if (typeof t1 !== "number")
            return t1.$add();
          t3 = t1 + t3;
          t2.toString;
          H._checkViewArguments(t2, t3, $length);
          list = $length == null ? new Float64Array(t2, t3) : new Float64Array(t2, t3, $length);
          t1 = buffer._serialization$_position;
          if (typeof $length !== "number")
            return H.iae($length);
          buffer._serialization$_position = t1 + 8 * $length;
          result = list;
          break;
        case 12:
          $length = _this.readSize$1(buffer);
          if (typeof $length !== "number")
            return H.iae($length);
          result = new Array($length);
          result.fixed$length = Array;
          for (t1 = buffer.data, i = 0; i < $length; ++i) {
            t2 = buffer._serialization$_position;
            t3 = t1.byteLength;
            if (typeof t3 !== "number")
              return H.iae(t3);
            if (t2 >= t3)
              H.throwExpression(C.FormatException_oCg);
            buffer._serialization$_position = t2 + 1;
            C.JSArray_methods.$indexSet(result, i, _this.readValueOfType$2(t1.getUint8(t2), buffer));
          }
          break;
        case 13:
          $length = _this.readSize$1(buffer);
          result = P.LinkedHashMap__makeEmpty();
          if (typeof $length !== "number")
            return H.iae($length);
          t1 = buffer.data;
          i = 0;
          for (; i < $length; ++i) {
            t2 = buffer._serialization$_position;
            t3 = t1.byteLength;
            if (typeof t3 !== "number")
              return H.iae(t3);
            if (t2 >= t3)
              H.throwExpression(C.FormatException_oCg);
            buffer._serialization$_position = t2 + 1;
            t2 = _this.readValueOfType$2(t1.getUint8(t2), buffer);
            t3 = buffer._serialization$_position;
            t4 = t1.byteLength;
            if (typeof t4 !== "number")
              return H.iae(t4);
            if (t3 >= t4)
              H.throwExpression(C.FormatException_oCg);
            buffer._serialization$_position = t3 + 1;
            result.$indexSet(0, t2, _this.readValueOfType$2(t1.getUint8(t3), buffer));
          }
          break;
        default:
          throw H.wrapException(C.FormatException_oCg);
      }
      return result;
    },
    writeSize$2: function(buffer, value) {
      var t1, t2;
      if (typeof value !== "number")
        return value.$lt();
      if (value < 254) {
        t1 = buffer._serialization$_buffer;
        t1.toString;
        t1._typed_buffers$_add$1(0, H.assertSubtypeOfRuntimeType(value, H.getRuntimeTypeArgument(t1, "_TypedDataBuffer", 0)));
      } else {
        t1 = buffer._serialization$_buffer;
        t2 = H.getRuntimeTypeArgument(t1, "_TypedDataBuffer", 0);
        if (value <= 65535) {
          t1.toString;
          t1._typed_buffers$_add$1(0, H.assertSubtypeOfRuntimeType(254, t2));
          buffer._eightBytes.setUint16(0, value, C.C_Endian === $.$get$Endian_host());
          buffer._serialization$_buffer.addAll$3(0, buffer._eightBytesAsList, 0, 2);
        } else {
          t1.toString;
          t1._typed_buffers$_add$1(0, H.assertSubtypeOfRuntimeType(255, t2));
          buffer._eightBytes.setUint32(0, value, C.C_Endian === $.$get$Endian_host());
          buffer._serialization$_buffer.addAll$3(0, buffer._eightBytesAsList, 0, 4);
        }
      }
    },
    readSize$1: function(buffer) {
      var value = buffer.getUint8$0(0);
      switch (value) {
        case 254:
          value = buffer.data.getUint16(buffer._serialization$_position, C.C_Endian === $.$get$Endian_host());
          buffer._serialization$_position += 2;
          return value;
        case 255:
          value = buffer.data.getUint32(buffer._serialization$_position, C.C_Endian === $.$get$Endian_host());
          buffer._serialization$_position += 4;
          return value;
        default:
          return value;
      }
    },
    $isMessageCodec: 1,
    $asMessageCodec: function() {
    }
  };
  U.StandardMessageCodec_writeValue_closure.prototype = {
    call$2: function(key, value) {
      var t1 = this.$this,
        t2 = this.buffer;
      t1.writeValue$2(0, t2, key);
      t1.writeValue$2(0, t2, value);
    },
    $signature: 8
  };
  A.BasicMessageChannel.prototype = {
    send$1: function(_, message) {
      var t1 = H.getTypeArgumentByIndex(this, 0);
      return this.send$body$BasicMessageChannel(_, H.assertSubtypeOfRuntimeType(message, t1), t1);
    },
    send$body$BasicMessageChannel: function(_, message, $async$type) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter($async$type),
        $async$returnValue, $async$self = this, t1, $async$temp1;
      var $async$send$1 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self.codec;
              $async$temp1 = t1;
              $async$goto = 3;
              return P._asyncAwait(B.BinaryMessages_send($async$self.name, t1.encodeMessage$1(message)), $async$send$1);
            case 3:
              // returning from await.
              $async$returnValue = $async$temp1.decodeMessage$1($async$result);
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$send$1, $async$completer);
    },
    setMessageHandler$1: function(handler) {
      var t1 = H.getTypeArgumentByIndex(this, 0);
      B.BinaryMessages_setMessageHandler(this.name, new A.BasicMessageChannel_setMessageHandler_closure(this, H.functionTypeCheck(handler, {func: 1, ret: [P.Future, t1], args: [t1]})));
    }
  };
  A.BasicMessageChannel_setMessageHandler_closure.prototype = {
    call$1: function(message) {
      return this.$call$body$BasicMessageChannel_setMessageHandler_closure(H.interceptedTypeCheck(message, "$isByteData"));
    },
    $call$body$BasicMessageChannel_setMessageHandler_closure: function(message) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(P.ByteData),
        $async$returnValue, $async$self = this, t1, $async$temp1;
      var $async$call$1 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self.$this.codec;
              $async$temp1 = t1;
              $async$goto = 3;
              return P._asyncAwait($async$self.handler.call$1(t1.decodeMessage$1(message)), $async$call$1);
            case 3:
              // returning from await.
              $async$returnValue = $async$temp1.encodeMessage$1($async$result);
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 61
  };
  A.MethodChannel.prototype = {
    invokeMethod$1$2: function(method, $arguments, $T) {
      return this.invokeMethod$body$MethodChannel(method, $arguments, $T, $T);
    },
    invokeMethod$body$MethodChannel: function(method, $arguments, $T, $async$type) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter($async$type),
        $async$returnValue, $async$self = this, t1, result;
      var $async$invokeMethod$1$2 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self.name;
              $async$goto = 3;
              return P._asyncAwait(B.BinaryMessages_send(t1, C.C_JSONMessageCodec.encodeMessage$1(P.LinkedHashMap_LinkedHashMap$_literal(["method", method, "args", $arguments], P.String, null))), $async$invokeMethod$1$2);
            case 3:
              // returning from await.
              result = $async$result;
              if (result == null)
                throw H.wrapException(new F.MissingPluginException("No implementation found for method " + method + " on channel " + t1));
              $async$returnValue = H.assertSubtypeOfRuntimeType($async$self.codec.decodeEnvelope$1(result), $T);
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$invokeMethod$1$2, $async$completer);
    },
    setMethodCallHandler$1: function(handler) {
      H.functionTypeCheck(handler, {func: 1, ret: [P.Future,,], args: [F.MethodCall0]});
      B.BinaryMessages_setMessageHandler(this.name, new A.MethodChannel_setMethodCallHandler_closure(this, handler));
    },
    _handleAsMethodCall$2: function(message, handler) {
      H.functionTypeCheck(handler, {func: 1, ret: [P.Future,,], args: [F.MethodCall0]});
      return this._handleAsMethodCall$body$MethodChannel(message, handler);
    },
    _handleAsMethodCall$body$MethodChannel: function(message, handler) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(P.ByteData),
        $async$returnValue, $async$handler = 2, $async$currentError, $async$next = [], $async$self = this, e, e0, t1, exception, t2, $call, $async$exception, $async$temp1;
      var $async$_handleAsMethodCall$2 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $call = $async$self.codec.decodeMethodCall$1(message);
              $async$handler = 4;
              $async$temp1 = C.C_JSONMessageCodec;
              $async$goto = 7;
              return P._asyncAwait(handler.call$1($call), $async$_handleAsMethodCall$2);
            case 7:
              // returning from await.
              t1 = $async$temp1.encodeMessage$1([$async$result]);
              $async$returnValue = t1;
              // goto return
              $async$goto = 1;
              break;
              $async$handler = 2;
              // goto after finally
              $async$goto = 6;
              break;
            case 4:
              // catch
              $async$handler = 3;
              $async$exception = $async$currentError;
              t1 = H.unwrapException($async$exception);
              t2 = J.getInterceptor$(t1);
              if (!!t2.$isPlatformException) {
                e = t1;
                $async$returnValue = C.C_JSONMessageCodec.encodeMessage$1([e.code, e.message, e.details]);
                // goto return
                $async$goto = 1;
                break;
              } else if (!!t2.$isMissingPluginException) {
                // goto return
                $async$goto = 1;
                break;
              } else {
                e0 = t1;
                t1 = C.C_JSONMessageCodec.encodeMessage$1(["error", J.toString$0$(e0), null]);
                $async$returnValue = t1;
                // goto return
                $async$goto = 1;
                break;
              }
              // goto after finally
              $async$goto = 6;
              break;
            case 3:
              // uncaught
              // goto rethrow
              $async$goto = 2;
              break;
            case 6:
              // after finally
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
            case 2:
              // rethrow
              return P._asyncRethrow($async$currentError, $async$completer);
          }
      });
      return P._asyncStartSync($async$_handleAsMethodCall$2, $async$completer);
    }
  };
  A.MethodChannel_setMethodCallHandler_closure.prototype = {
    call$1: function(message) {
      return this.$this._handleAsMethodCall$2(H.interceptedTypeCheck(message, "$isByteData"), this.handler);
    },
    $signature: 61
  };
  A.OptionalMethodChannel.prototype = {
    invokeMethod$1$2: function(method, $arguments, $T) {
      return this.invokeMethod$body$OptionalMethodChannel(method, $arguments, $T, $T);
    },
    invokeMethod$1$1: function(method, $T) {
      return this.invokeMethod$1$2(method, null, $T);
    },
    invokeMethod$body$OptionalMethodChannel: function(method, $arguments, $T, $async$type) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter($async$type),
        $async$returnValue, $async$handler = 2, $async$currentError, $async$next = [], $async$self = this, result, exception, $async$exception;
      var $async$invokeMethod$1$2 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$handler = 4;
              $async$goto = 7;
              return P._asyncAwait($async$self.super$MethodChannel$invokeMethod(method, $arguments, $T), $async$invokeMethod$1$2);
            case 7:
              // returning from await.
              result = $async$result;
              $async$returnValue = result;
              // goto return
              $async$goto = 1;
              break;
              $async$handler = 2;
              // goto after finally
              $async$goto = 6;
              break;
            case 4:
              // catch
              $async$handler = 3;
              $async$exception = $async$currentError;
              if (H.unwrapException($async$exception) instanceof F.MissingPluginException) {
                // goto return
                $async$goto = 1;
                break;
              } else
                throw $async$exception;
              // goto after finally
              $async$goto = 6;
              break;
            case 3:
              // uncaught
              // goto rethrow
              $async$goto = 2;
              break;
            case 6:
              // after finally
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
            case 2:
              // rethrow
              return P._asyncRethrow($async$currentError, $async$completer);
          }
      });
      return P._asyncStartSync($async$invokeMethod$1$2, $async$completer);
    }
  };
  B.BinaryMessages__sendPlatformMessage_closure.prototype = {
    call$1: function(reply) {
      var exception, stack, exception0, t1;
      try {
        this.completer.complete$1(0, reply);
      } catch (exception0) {
        exception = H.unwrapException(exception0);
        stack = H.getTraceFromException(exception0);
        t1 = U.FlutterErrorDetails$("during a platform message response callback", exception, null, "services library", false, stack);
        U.assertions_FlutterError_dumpErrorToConsole$closure().call$1(t1);
      }
    },
    $signature: 25
  };
  X.ApplicationSwitcherDescription.prototype = {};
  X.SystemUiOverlayStyle.prototype = {};
  V.SystemSoundType.prototype = {
    toString$0: function(_) {
      return this._system_sound$_name;
    }
  };
  X.TextRange.prototype = {
    $eq: function(_, other) {
      if (other == null)
        return false;
      if (this === other)
        return true;
      if (!(other instanceof X.TextRange))
        return false;
      return other.start == this.start && other.end == this.end;
    },
    get$hashCode: function(_) {
      return Q.hashValues(J.get$hashCode$(this.start), J.get$hashCode$(this.end), C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd);
    },
    toString$0: function(_) {
      return "TextRange(start: " + H.S(this.start) + ", end: " + H.S(this.end) + ")";
    }
  };
  X.TextSelection.prototype = {
    toString$0: function(_) {
      return new H.TypeImpl(H.getRti(this)).toString$0(0) + "(baseOffset: " + H.S(this.baseOffset) + ", extentOffset: " + H.S(this.extentOffset) + ", affinity: " + C.TextAffinity_1.toString$0(0) + ", isDirectional: false)";
    },
    $eq: function(_, other) {
      var t1;
      if (other == null)
        return false;
      if (this === other)
        return true;
      if (!(other instanceof X.TextSelection))
        return false;
      if (other.baseOffset == this.baseOffset)
        if (other.extentOffset == this.extentOffset)
          t1 = true;
        else
          t1 = false;
      else
        t1 = false;
      return t1;
    },
    get$hashCode: function(_) {
      return Q.hashValues(J.get$hashCode$(this.baseOffset), J.get$hashCode$(this.extentOffset), H.Primitives_objectHashCode(C.TextAffinity_1), C.JSBool_methods.get$hashCode(false), C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd);
    }
  };
  S.WidgetsApp.prototype = {
    createState$0: function() {
      return new S._WidgetsAppState(C._StateLifecycle_0);
    },
    onGenerateRoute$1: function(arg0) {
      return this.onGenerateRoute.call$1(arg0);
    },
    pageRouteBuilder$2: function(arg0, arg1) {
      return this.pageRouteBuilder.call$2(arg0, arg1);
    },
    onUnknownRoute$1: function(arg0) {
      return this.onUnknownRoute.call$1(arg0);
    },
    builder$1: function(arg0) {
      return this.builder.call$1(arg0);
    }
  };
  S._WidgetsAppState.prototype = {
    initState$0: function() {
      var t1, _this = this;
      _this.super$State$initState();
      _this._updateNavigator$0();
      t1 = $.$get$window();
      _this._app$_locale = _this._resolveLocale$2(t1.get$locale(t1), _this._widget.supportedLocales);
      C.JSArray_methods.add$1($.WidgetsBinding__instance.WidgetsBinding__observers, _this);
    },
    didUpdateWidget$1: function(oldWidget) {
      H.interceptedTypeCheck(oldWidget, "$isWidgetsApp");
      this.super$State$didUpdateWidget(oldWidget);
      this._widget.navigatorKey;
      oldWidget.navigatorKey;
    },
    dispose$0: function() {
      C.JSArray_methods.remove$1($.WidgetsBinding__instance.WidgetsBinding__observers, this);
      this.super$State$dispose();
    },
    didChangeAppLifecycleState$1: function(state) {
    },
    didHaveMemoryPressure$0: function() {
    },
    _updateNavigator$0: function() {
      this._widget.navigatorKey;
      this.set$_navigator(new N.GlobalObjectKey(this, [K.NavigatorState]));
    },
    _onGenerateRoute$1: function(settings) {
      var $name, t1, builder, _this = this;
      H.interceptedTypeCheck(settings, "$isRouteSettings");
      $name = settings.name;
      if ($name === "/") {
        _this._widget.home;
        t1 = true;
      } else
        t1 = false;
      builder = t1 ? new S._WidgetsAppState__onGenerateRoute_closure(_this) : _this._widget.routes.$index(0, $name);
      if (builder != null)
        return _this._widget.pageRouteBuilder$2(settings, builder);
      _this._widget.onGenerateRoute;
      return;
    },
    _onUnknownRoute$1: function(settings) {
      H.interceptedTypeCheck(settings, "$isRouteSettings");
      return this._widget.onUnknownRoute$1(settings);
    },
    didPopRoute$0: function() {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(P.bool),
        $async$returnValue, $async$self = this, t1, $navigator;
      var $async$didPopRoute$0 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self._navigator;
              $navigator = t1 == null ? null : t1.get$currentState();
              if ($navigator == null) {
                $async$returnValue = false;
                // goto return
                $async$goto = 1;
                break;
              }
              $async$goto = 3;
              return P._asyncAwait($navigator.maybePop$1$0(P.Object), $async$didPopRoute$0);
            case 3:
              // returning from await.
              $async$returnValue = $async$result;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$didPopRoute$0, $async$completer);
    },
    didPushRoute$1: function(route) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(P.bool),
        $async$returnValue, $async$self = this, t1, $navigator;
      var $async$didPushRoute$1 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self._navigator;
              $navigator = t1 == null ? null : t1.get$currentState();
              if ($navigator == null) {
                $async$returnValue = false;
                // goto return
                $async$goto = 1;
                break;
              }
              t1 = P.Object;
              $navigator.push$1$1($navigator._routeNamed$1$2$arguments(route, null, t1), t1);
              $async$returnValue = true;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$didPushRoute$1, $async$completer);
    },
    _resolveLocale$2: function(newLocale, supportedLocales) {
      var t1, matchesLanguageCode, _i, locale;
      H.assertSubtype(supportedLocales, "$isIterable", [Q.Locale], "$asIterable");
      this._widget.localeResolutionCallback;
      if (newLocale == null)
        return C.JSArray_methods.get$first(supportedLocales);
      for (t1 = newLocale._languageCode, matchesLanguageCode = null, _i = 0; _i < 1; ++_i) {
        locale = supportedLocales[_i];
        if (locale.$eq(0, newLocale))
          return newLocale;
        if (Q.Locale__replaceDeprecatedLanguageSubtag(locale._languageCode) === Q.Locale__replaceDeprecatedLanguageSubtag(t1))
          matchesLanguageCode = matchesLanguageCode == null ? locale : matchesLanguageCode;
      }
      return matchesLanguageCode == null ? C.JSArray_methods.get$first(supportedLocales) : matchesLanguageCode;
    },
    didChangeLocale$1: function(locale) {
      var newLocale, _this = this;
      if (J.$eq$(locale, _this._app$_locale))
        return;
      newLocale = _this._resolveLocale$2(locale, _this._widget.supportedLocales);
      if (!newLocale.$eq(0, _this._app$_locale))
        _this.setState$1(new S._WidgetsAppState_didChangeLocale_closure(_this, newLocale));
    },
    get$_app$_localizationsDelegates: function() {
      var $async$self = this;
      return P._makeSyncStarIterable(function() {
        var $async$goto = 0, $async$handler = 1, $async$currentError;
        return function $async$get$_app$_localizationsDelegates($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                $async$goto = 2;
                return P._IterationMarker_yieldStar($async$self._widget.localizationsDelegates);
              case 2:
                // after yield
                $async$goto = 3;
                return C.C__WidgetsLocalizationsDelegate;
              case 3:
                // after yield
                // implicit return
                return P._IterationMarker_endOfIteration();
              case 1:
                // rethrow
                return P._IterationMarker_uncaughtError($async$currentError);
            }
        };
      }, [L.LocalizationsDelegate,,]);
    },
    didChangeAccessibilityFeatures$0: function() {
      this.setState$1(new S._WidgetsAppState_didChangeAccessibilityFeatures_closure());
    },
    didChangeMetrics$0: function() {
      this.setState$1(new S._WidgetsAppState_didChangeMetrics_closure());
    },
    didChangeTextScaleFactor$0: function() {
      this.setState$1(new S._WidgetsAppState_didChangeTextScaleFactor_closure());
    },
    didChangePlatformBrightness$0: function() {
      this.setState$1(new S._WidgetsAppState_didChangePlatformBrightness_closure());
    },
    build$1: function(context) {
      var t2, $navigator, result, performanceOverlay, t3, title, t4, t5, t6, t7, _this = this, _null = null,
        t1 = _this._navigator;
      if (t1 != null) {
        t2 = $.$get$window()._browserHistory;
        if (t2.get$currentPath() !== "/")
          t2 = t2.get$currentPath();
        else {
          _this._widget.initialRoute;
          t2 = t2.get$currentPath();
        }
        $navigator = new K.Navigator(t2, _this.get$_onGenerateRoute(), _this.get$_onUnknownRoute(), _this._widget.navigatorObservers, t1);
        t1 = $navigator;
      } else
        t1 = _null;
      t2 = _this._widget;
      result = L.DefaultTextStyle$(t1, _null, C.TextOverflow_0, true, t2.textStyle, _null);
      t2.showPerformanceOverlay;
      t1 = $.WidgetsApp_showPerformanceOverlayOverride;
      if (t1) {
        t2.checkerboardOffscreenLayers;
        performanceOverlay = new L.PerformanceOverlay(15, false, false, _null);
      } else {
        t2.checkerboardOffscreenLayers;
        performanceOverlay = _null;
      }
      t1 = performanceOverlay != null ? T.Stack$(C.AlignmentDirectional_m1_m1, H.setRuntimeTypeInfo([result, T.Positioned$(_null, performanceOverlay, _null, _null, 0, 0, 0, _null)], [N.Widget]), C.StackFit_0) : result;
      t2 = _this._widget;
      t3 = t2.title;
      title = U.Title$(t1, t2.color, t3);
      t1 = $.$get$window();
      t2 = t1.get$physicalSize().$div(0, t1.devicePixelRatio);
      t3 = t1.devicePixelRatio;
      t4 = V.EdgeInsets$fromWindowPadding(C.WindowPadding_0_0_0_0, t3);
      t5 = V.EdgeInsets$fromWindowPadding(C.WindowPadding_0_0_0_0, t1.devicePixelRatio);
      t1 = t1._accessibilityFeatures._ui$_index;
      _this._widget.locale;
      t6 = _this._app$_locale;
      t7 = _this.get$_app$_localizationsDelegates();
      return new F.MediaQuery(new F.MediaQueryData(t2, t3, 1, t5, t4, false, (1 & t1) !== 0, (2 & t1) !== 0, (4 & t1) !== 0, (8 & t1) !== 0), new L.Localizations(t6, P.List_List$from(t7, true, H.getTypeArgumentByIndex(t7, 0)), title, _null), _null);
    },
    set$_navigator: function(_navigator) {
      this._navigator = H.assertSubtype(_navigator, "$isGlobalKey", [K.NavigatorState], "$asGlobalKey");
    },
    $isWidgetsBindingObserver: 1,
    $asState: function() {
      return [S.WidgetsApp];
    }
  };
  S._WidgetsAppState__onGenerateRoute_closure.prototype = {
    call$1: function(context) {
      H.interceptedTypeCheck(context, "$isBuildContext");
      return this.$this._widget.home;
    },
    $signature: 11
  };
  S._WidgetsAppState_didChangeLocale_closure.prototype = {
    call$0: function() {
      this.$this._app$_locale = this.newLocale;
    },
    $signature: 0
  };
  S._WidgetsAppState_didChangeAccessibilityFeatures_closure.prototype = {
    call$0: function() {
    },
    $signature: 0
  };
  S._WidgetsAppState_didChangeMetrics_closure.prototype = {
    call$0: function() {
    },
    $signature: 0
  };
  S._WidgetsAppState_didChangeTextScaleFactor_closure.prototype = {
    call$0: function() {
    },
    $signature: 0
  };
  S._WidgetsAppState_didChangePlatformBrightness_closure.prototype = {
    call$0: function() {
    },
    $signature: 0
  };
  B.ConnectionState.prototype = {
    toString$0: function(_) {
      return this._async0$_name;
    }
  };
  B.AsyncSnapshot.prototype = {
    toString$0: function(_) {
      var _this = this;
      return new H.TypeImpl(H.getRti(_this)).toString$0(0) + "(" + _this.connectionState.toString$0(0) + ", " + H.S(_this.data) + ", " + H.S(_this.error) + ")";
    },
    $eq: function(_, other) {
      var t1, _this = this;
      if (other == null)
        return false;
      if (_this === other)
        return true;
      t1 = _this.$ti;
      if (!H.checkSubtype(other, "$isAsyncSnapshot", t1, null))
        return false;
      H.assertSubtype(other, "$isAsyncSnapshot", t1, "$asAsyncSnapshot");
      return _this.connectionState === other.connectionState && J.$eq$(_this.data, other.data) && J.$eq$(_this.error, other.error);
    },
    get$hashCode: function(_) {
      return Q.hashValues(this.connectionState, this.data, this.error, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd);
    },
    get$error: function(receiver) {
      return this.error;
    }
  };
  B.FutureBuilder.prototype = {
    createState$0: function() {
      return new B._FutureBuilderState(C._StateLifecycle_0, this.$ti);
    },
    builder$1: function(arg0) {
      return this.builder.call$1(arg0);
    }
  };
  B._FutureBuilderState.prototype = {
    initState$0: function() {
      var _this = this;
      _this.super$State$initState();
      _this._widget.toString;
      _this.set$_snapshot(new B.AsyncSnapshot(C.ConnectionState_0, null, null, _this.$ti));
      _this._async0$_subscribe$0();
    },
    didUpdateWidget$1: function(oldWidget) {
      var t1, _this = this;
      H.assertSubtype(oldWidget, "$isFutureBuilder", _this.$ti, "$asFutureBuilder");
      _this.super$State$didUpdateWidget(oldWidget);
      if (oldWidget.future != _this._widget.future) {
        if (_this._activeCallbackIdentity != null) {
          _this._activeCallbackIdentity = null;
          t1 = _this._snapshot;
          _this.set$_snapshot(new B.AsyncSnapshot(C.ConnectionState_0, t1.data, t1.error, [H.getTypeArgumentByIndex(t1, 0)]));
        }
        _this._async0$_subscribe$0();
      }
    },
    build$1: function(context) {
      return H.functionTypeCheck(this._widget.builder, {func: 1, ret: N.Widget, args: [N.BuildContext, [B.AsyncSnapshot, H.getTypeArgumentByIndex(this, 0)]]}).call$2(context, this._snapshot);
    },
    dispose$0: function() {
      this._activeCallbackIdentity = null;
      this.super$State$dispose();
    },
    _async0$_subscribe$0: function() {
      var callbackIdentity, _this = this,
        t1 = _this._widget.future;
      if (t1 != null) {
        callbackIdentity = _this._activeCallbackIdentity = new P.Object();
        t1.then$1$2$onError(new B._FutureBuilderState__subscribe_closure(_this, callbackIdentity), new B._FutureBuilderState__subscribe_closure0(_this, callbackIdentity), -1);
        t1 = _this._snapshot;
        _this.set$_snapshot(new B.AsyncSnapshot(C.ConnectionState_1, t1.data, t1.error, [H.getTypeArgumentByIndex(t1, 0)]));
      }
    },
    set$_snapshot: function(_snapshot) {
      this._snapshot = H.assertSubtype(_snapshot, "$isAsyncSnapshot", this.$ti, "$asAsyncSnapshot");
    },
    $asState: function($T) {
      return [[B.FutureBuilder, $T]];
    }
  };
  B._FutureBuilderState__subscribe_closure.prototype = {
    call$1: function(data) {
      var t1 = this.$this;
      H.assertSubtypeOfRuntimeType(data, H.getTypeArgumentByIndex(t1, 0));
      if (t1._activeCallbackIdentity === this.callbackIdentity)
        t1.setState$1(new B._FutureBuilderState__subscribe__closure0(t1, data));
    },
    $signature: function() {
      return {func: 1, ret: P.Null, args: [H.getTypeArgumentByIndex(this.$this, 0)]};
    }
  };
  B._FutureBuilderState__subscribe__closure0.prototype = {
    call$0: function() {
      var t1 = this.$this;
      t1.set$_snapshot(new B.AsyncSnapshot(C.ConnectionState_3, this.data, null, [H.getTypeArgumentByIndex(t1, 0)]));
    },
    $signature: 0
  };
  B._FutureBuilderState__subscribe_closure0.prototype = {
    call$1: function(error) {
      var t1 = this.$this;
      if (t1._activeCallbackIdentity === this.callbackIdentity)
        t1.setState$1(new B._FutureBuilderState__subscribe__closure(t1, error));
    },
    $signature: 46
  };
  B._FutureBuilderState__subscribe__closure.prototype = {
    call$0: function() {
      var t1 = this.$this;
      t1.set$_snapshot(new B.AsyncSnapshot(C.ConnectionState_3, null, this.error, [H.getTypeArgumentByIndex(t1, 0)]));
    },
    $signature: 0
  };
  L.AutomaticKeepAlive.prototype = {
    createState$0: function() {
      return new L._AutomaticKeepAliveState(C._StateLifecycle_0);
    },
    get$child: function() {
      return this.child;
    }
  };
  L._AutomaticKeepAliveState.prototype = {
    initState$0: function() {
      this.super$State$initState();
      this._updateChild$0();
    },
    didUpdateWidget$1: function(oldWidget) {
      this.super$State$didUpdateWidget(H.interceptedTypeCheck(oldWidget, "$isAutomaticKeepAlive"));
      this._updateChild$0();
    },
    _updateChild$0: function() {
      this._automatic_keep_alive$_child = U.NotificationListener$(this._widget.child, this.get$_addClient(), L.KeepAliveNotification);
    },
    dispose$0: function() {
      var t2,
        t1 = this._handles;
      if (t1 != null)
        for (t1 = t1.get$keys(t1), t1 = t1.get$iterator(t1); t1.moveNext$0();) {
          t2 = t1.get$current(t1);
          t2.removeListener$1(0, this._handles.$index(0, t2));
        }
      this.super$State$dispose();
    },
    _addClient$1: function(notification) {
      var t1, t2, childElement, _this = this,
        handle = H.interceptedTypeCheck(notification, "$isKeepAliveNotification").handle;
      if (_this._handles == null)
        _this.set$_handles(P.LinkedHashMap_LinkedHashMap$_empty(B.Listenable, {func: 1, ret: -1}));
      _this._handles.$indexSet(0, handle, _this._createCallback$1(handle));
      t1 = _this._handles.$index(0, handle);
      handle.toString;
      H.functionTypeCheck(t1, {func: 1, ret: -1});
      t2 = handle._listeners;
      t2.toString;
      H.assertSubtypeOfRuntimeType(t1, H.getTypeArgumentByIndex(t2, 0));
      t2._isDirty = true;
      C.JSArray_methods.add$1(t2._list, t1);
      if (!_this._keepingAlive) {
        _this._keepingAlive = true;
        childElement = _this._getChildElement$0();
        if (childElement != null)
          _this._updateParentDataOfChild$1(childElement);
        else {
          t1 = $.SchedulerBinding__instance;
          t1.toString;
          t2 = H.functionTypeCheck(new L._AutomaticKeepAliveState__addClient_closure(_this), {func: 1, ret: -1, args: [P.Duration]});
          C.JSArray_methods.add$1(t1.SchedulerBinding__postFrameCallbacks, t2);
        }
      }
      return false;
    },
    _getChildElement$0: function() {
      var t1 = {},
        element = this._element;
      t1.childElement = null;
      element.visitChildren$1(new L._AutomaticKeepAliveState__getChildElement_closure(t1));
      return H.assertSubtype(t1.childElement, "$isParentDataElement", [G.SliverWithKeepAliveWidget], "$asParentDataElement");
    },
    _updateParentDataOfChild$1: function(childElement) {
      var t1 = G.SliverWithKeepAliveWidget;
      H.assertSubtype(childElement, "$isParentDataElement", [t1], "$asParentDataElement");
      t1 = H.assertSubtype(new G.KeepAlive(this._keepingAlive, this._automatic_keep_alive$_child, null), "$isParentDataWidget", [t1], "$asParentDataWidget");
      childElement.toString;
      childElement._applyParentData$1(H.assertSubtype(t1, "$isParentDataWidget", [H.getTypeArgumentByIndex(childElement, 0)], "$asParentDataWidget"));
    },
    _createCallback$1: function(handle) {
      return new L._AutomaticKeepAliveState__createCallback_closure(this, handle);
    },
    build$1: function(context) {
      return new G.KeepAlive(this._keepingAlive, this._automatic_keep_alive$_child, null);
    },
    set$_handles: function(_handles) {
      this._handles = H.assertSubtype(_handles, "$isMap", [B.Listenable, {func: 1, ret: -1}], "$asMap");
    },
    $asState: function() {
      return [L.AutomaticKeepAlive];
    }
  };
  L._AutomaticKeepAliveState__addClient_closure.prototype = {
    call$1: function(timeStamp) {
      var t1;
      H.interceptedTypeCheck(timeStamp, "$isDuration");
      t1 = this.$this;
      if (t1._element == null)
        return;
      t1._updateParentDataOfChild$1(t1._getChildElement$0());
    },
    $signature: 24
  };
  L._AutomaticKeepAliveState__getChildElement_closure.prototype = {
    call$1: function(child) {
      this._box_0.childElement = child;
    },
    $signature: 9
  };
  L._AutomaticKeepAliveState__createCallback_closure.prototype = {
    call$0: function() {
      var t2,
        t1 = this.$this;
      t1._handles.remove$1(0, this.handle);
      t2 = t1._handles;
      if (t2.get$isEmpty(t2))
        if ($.SchedulerBinding__instance.SchedulerBinding__schedulerPhase.index < 3)
          t1.setState$1(new L._AutomaticKeepAliveState__createCallback__closure(t1));
        else {
          t1._keepingAlive = false;
          P.scheduleMicrotask(new L._AutomaticKeepAliveState__createCallback__closure0(t1));
        }
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 0
  };
  L._AutomaticKeepAliveState__createCallback__closure.prototype = {
    call$0: function() {
      this.$this._keepingAlive = false;
    },
    $signature: 0
  };
  L._AutomaticKeepAliveState__createCallback__closure0.prototype = {
    call$0: function() {
      var t2,
        t1 = this.$this;
      if (t1._element != null) {
        t2 = t1._handles;
        t2 = t2.get$isEmpty(t2);
      } else
        t2 = false;
      if (t2)
        t1.setState$1(new L._AutomaticKeepAliveState__createCallback___closure(t1));
    },
    $signature: 0
  };
  L._AutomaticKeepAliveState__createCallback___closure.prototype = {
    call$0: function() {
    },
    $signature: 0
  };
  L.KeepAliveNotification.prototype = {};
  L.KeepAliveHandle.prototype = {};
  L.AutomaticKeepAliveClientMixin.prototype = {
    _ensureKeepAlive$0: function() {
      var t1 = {func: 1, ret: -1};
      t1 = new L.KeepAliveHandle(new R.ObserverList(H.setRuntimeTypeInfo([], [t1]), [t1]));
      this.AutomaticKeepAliveClientMixin__keepAliveHandle = t1;
      this._element.visitAncestorElements$1(new L.KeepAliveNotification(t1).get$visitAncestor());
    },
    updateKeepAlive$0: function() {
      var t1, _this = this;
      if (_this.get$wantKeepAlive()) {
        if (_this.AutomaticKeepAliveClientMixin__keepAliveHandle == null)
          _this._ensureKeepAlive$0();
      } else {
        t1 = _this.AutomaticKeepAliveClientMixin__keepAliveHandle;
        if (t1 != null) {
          t1.notifyListeners$0();
          _this.AutomaticKeepAliveClientMixin__keepAliveHandle = null;
        }
      }
    },
    build$1: function(context) {
      if (this.get$wantKeepAlive() && this.AutomaticKeepAliveClientMixin__keepAliveHandle == null)
        this._ensureKeepAlive$0();
      return;
    }
  };
  T.Directionality.prototype = {
    updateShouldNotify$1: function(oldWidget) {
      return this.textDirection !== H.interceptedTypeCheck(oldWidget, "$isDirectionality").textDirection;
    }
  };
  T.Opacity.prototype = {
    createRenderObject$1: function(context) {
      var t2,
        t1 = this.opacity;
      if (typeof t1 !== "number")
        return t1.$mul();
      t1 = new E.RenderOpacity(C.JSNumber_methods.round$0(t1 * 255), t1, false, null);
      t1.get$isRepaintBoundary();
      t2 = t1.get$alwaysNeedsCompositing();
      t1._needsCompositing = t2;
      t1.set$child(null);
      return t1;
    },
    updateRenderObject$2: function(context, renderObject) {
      H.interceptedTypeCheck(renderObject, "$isRenderOpacity");
      renderObject.set$opacity(0, this.opacity);
      renderObject.set$alwaysIncludeSemantics(false);
    }
  };
  T.CustomPaint.prototype = {
    createRenderObject$1: function(context) {
      var t1 = new V.RenderCustomPaint(this.painter, this.foregroundPainter, C.Size_0_0, false, false, null);
      t1.get$isRepaintBoundary();
      t1.get$alwaysNeedsCompositing();
      t1._needsCompositing = false;
      t1.set$child(null);
      return t1;
    },
    updateRenderObject$2: function(context, renderObject) {
      H.interceptedTypeCheck(renderObject, "$isRenderCustomPaint");
      renderObject.set$painter(this.painter);
      renderObject.set$foregroundPainter(this.foregroundPainter);
      renderObject.set$preferredSize(C.Size_0_0);
      renderObject.willChange = renderObject.isComplex = false;
    },
    didUnmountRenderObject$1: function(renderObject) {
      H.interceptedTypeCheck(renderObject, "$isRenderCustomPaint");
      renderObject.set$painter(null);
      renderObject.set$foregroundPainter(null);
    }
  };
  T.ClipPath.prototype = {
    createRenderObject$1: function(context) {
      var t1 = new E.RenderClipPath(this.clipper, this.clipBehavior, null);
      t1.get$isRepaintBoundary();
      t1.get$alwaysNeedsCompositing();
      t1._needsCompositing = false;
      t1.set$child(null);
      return t1;
    },
    updateRenderObject$2: function(context, renderObject) {
      H.interceptedTypeCheck(renderObject, "$isRenderClipPath").set$clipper(this.clipper);
    },
    didUnmountRenderObject$1: function(renderObject) {
      H.interceptedTypeCheck(renderObject, "$isRenderClipPath").set$clipper(null);
    }
  };
  T.PhysicalModel.prototype = {
    createRenderObject$1: function(context) {
      var t2, _this = this,
        t1 = new E.RenderPhysicalModel(_this.shape, _this.borderRadius, _this.elevation, _this.shadowColor, _this.color, null, _this.clipBehavior, null);
      t1.get$isRepaintBoundary();
      t2 = t1.get$alwaysNeedsCompositing();
      t1._needsCompositing = t2;
      t1.set$child(null);
      return t1;
    },
    updateRenderObject$2: function(context, renderObject) {
      var _this = this;
      H.interceptedTypeCheck(renderObject, "$isRenderPhysicalModel");
      renderObject.set$shape(0, _this.shape);
      renderObject.set$borderRadius(0, _this.borderRadius);
      renderObject.set$elevation(0, _this.elevation);
      renderObject.set$color(0, _this.color);
      renderObject.set$shadowColor(0, _this.shadowColor);
    }
  };
  T.PhysicalShape.prototype = {
    createRenderObject$1: function(context) {
      var t2, _this = this,
        t1 = new E.RenderPhysicalShape(_this.elevation, _this.shadowColor, _this.color, _this.clipper, _this.clipBehavior, null);
      t1.get$isRepaintBoundary();
      t2 = t1.get$alwaysNeedsCompositing();
      t1._needsCompositing = t2;
      t1.set$child(null);
      return t1;
    },
    updateRenderObject$2: function(context, renderObject) {
      var _this = this;
      H.interceptedTypeCheck(renderObject, "$isRenderPhysicalShape");
      renderObject.set$clipper(_this.clipper);
      renderObject.set$elevation(0, _this.elevation);
      renderObject.set$color(0, _this.color);
      renderObject.set$shadowColor(0, _this.shadowColor);
    }
  };
  T.Transform0.prototype = {
    createRenderObject$1: function(context) {
      var t3,
        t1 = T.Directionality_of(context),
        t2 = new E.RenderTransform(this.transformHitTests, null);
      t2.get$isRepaintBoundary();
      t3 = t2.get$alwaysNeedsCompositing();
      t2._needsCompositing = t3;
      t2.set$child(null);
      t2.set$transform(0, this.transform);
      t2.set$alignment(this.alignment);
      t2.set$textDirection(t1);
      t2.set$origin(0, null);
      return t2;
    },
    updateRenderObject$2: function(context, renderObject) {
      H.interceptedTypeCheck(renderObject, "$isRenderTransform");
      renderObject.set$transform(0, this.transform);
      renderObject.set$origin(0, null);
      renderObject.set$alignment(this.alignment);
      renderObject.set$textDirection(T.Directionality_of(context));
      renderObject.transformHitTests = this.transformHitTests;
    }
  };
  T.FractionalTranslation.prototype = {
    createRenderObject$1: function(context) {
      var t1 = new E.RenderFractionalTranslation(this.translation, this.transformHitTests, null);
      t1.get$isRepaintBoundary();
      t1.get$alwaysNeedsCompositing();
      t1._needsCompositing = false;
      t1.set$child(null);
      return t1;
    },
    updateRenderObject$2: function(context, renderObject) {
      H.interceptedTypeCheck(renderObject, "$isRenderFractionalTranslation");
      renderObject.set$translation(this.translation);
      renderObject.transformHitTests = this.transformHitTests;
    }
  };
  T.Padding.prototype = {
    createRenderObject$1: function(context) {
      var t1 = new T.RenderPadding(this.padding, T.Directionality_of(context), null);
      t1.get$isRepaintBoundary();
      t1.get$alwaysNeedsCompositing();
      t1._needsCompositing = false;
      t1.set$child(null);
      return t1;
    },
    updateRenderObject$2: function(context, renderObject) {
      H.interceptedTypeCheck(renderObject, "$isRenderPadding");
      renderObject.set$padding(0, this.padding);
      renderObject.set$textDirection(T.Directionality_of(context));
    }
  };
  T.Align.prototype = {
    createRenderObject$1: function(context) {
      var t1 = new T.RenderPositionedBox(this.widthFactor, this.heightFactor, this.alignment, T.Directionality_of(context), null);
      t1.get$isRepaintBoundary();
      t1.get$alwaysNeedsCompositing();
      t1._needsCompositing = false;
      t1.set$child(null);
      return t1;
    },
    updateRenderObject$2: function(context, renderObject) {
      H.interceptedTypeCheck(renderObject, "$isRenderPositionedBox");
      renderObject.set$alignment(this.alignment);
      renderObject.set$widthFactor(this.widthFactor);
      renderObject.set$heightFactor(this.heightFactor);
      renderObject.set$textDirection(T.Directionality_of(context));
    }
  };
  T.Center.prototype = {};
  T.LayoutId.prototype = {
    applyParentData$1: function(renderObject) {
      var targetParent,
        parentData = H.interceptedTypeCheck(renderObject.parentData, "$isMultiChildLayoutParentData"),
        t1 = this.id;
      if (parentData.id !== t1) {
        parentData.id = t1;
        targetParent = renderObject._node$_parent;
        if (targetParent instanceof K.RenderObject)
          targetParent.markNeedsLayout$0();
      }
    },
    $asParentDataWidget: function() {
      return [T.CustomMultiChildLayout];
    }
  };
  T.CustomMultiChildLayout.prototype = {
    createRenderObject$1: function(context) {
      var t1 = new B.RenderCustomMultiChildLayoutBox(this.delegate, 0, null, null);
      t1.get$isRepaintBoundary();
      t1.get$alwaysNeedsCompositing();
      t1._needsCompositing = false;
      t1.addAll$1(0, null);
      return t1;
    },
    updateRenderObject$2: function(context, renderObject) {
      H.interceptedTypeCheck(renderObject, "$isRenderCustomMultiChildLayoutBox").set$delegate(this.delegate);
    }
  };
  T.SizedBox.prototype = {
    createRenderObject$1: function(context) {
      var t1 = new E.RenderConstrainedBox(S.BoxConstraints$tightFor(this.height, this.width), null);
      t1.get$isRepaintBoundary();
      t1.get$alwaysNeedsCompositing();
      t1._needsCompositing = false;
      t1.set$child(null);
      return t1;
    },
    updateRenderObject$2: function(context, renderObject) {
      H.interceptedTypeCheck(renderObject, "$isRenderConstrainedBox").set$additionalConstraints(S.BoxConstraints$tightFor(this.height, this.width));
    },
    toStringShort$0: function() {
      var type, _this = this,
        t1 = _this.width;
      if (t1 === 1 / 0 && _this.height === 1 / 0)
        type = new H.TypeImpl(H.getRti(_this)).toString$0(0) + ".expand";
      else
        type = t1 === 0 && _this.height === 0 ? new H.TypeImpl(H.getRti(_this)).toString$0(0) + ".shrink" : new H.TypeImpl(H.getRti(_this)).toString$0(0);
      t1 = _this.key;
      return t1 == null ? type : type + "-" + t1.toString$0(0);
    }
  };
  T.ConstrainedBox.prototype = {
    createRenderObject$1: function(context) {
      var t1 = new E.RenderConstrainedBox(this.constraints, null);
      t1.get$isRepaintBoundary();
      t1.get$alwaysNeedsCompositing();
      t1._needsCompositing = false;
      t1.set$child(null);
      return t1;
    },
    updateRenderObject$2: function(context, renderObject) {
      H.interceptedTypeCheck(renderObject, "$isRenderConstrainedBox").set$additionalConstraints(this.constraints);
    }
  };
  T.LimitedBox.prototype = {
    createRenderObject$1: function(context) {
      var t1 = new E.RenderLimitedBox(this.maxWidth, this.maxHeight, null);
      t1.get$isRepaintBoundary();
      t1.get$alwaysNeedsCompositing();
      t1._needsCompositing = false;
      t1.set$child(null);
      return t1;
    },
    updateRenderObject$2: function(context, renderObject) {
      H.interceptedTypeCheck(renderObject, "$isRenderLimitedBox");
      renderObject.set$maxWidth(0, this.maxWidth);
      renderObject.set$maxHeight(0, this.maxHeight);
    }
  };
  T.Offstage.prototype = {
    createRenderObject$1: function(context) {
      var t1 = new E.RenderOffstage(this.offstage, null);
      t1.get$isRepaintBoundary();
      t1.get$alwaysNeedsCompositing();
      t1._needsCompositing = false;
      t1.set$child(null);
      return t1;
    },
    updateRenderObject$2: function(context, renderObject) {
      H.interceptedTypeCheck(renderObject, "$isRenderOffstage").set$offstage(this.offstage);
    },
    createElement$0: function(_) {
      var t1 = ($.Element__nextHashCode + 1) % 16777215;
      $.Element__nextHashCode = t1;
      return new T._OffstageElement(t1, this, C._ElementLifecycle_0);
    }
  };
  T._OffstageElement.prototype = {
    get$widget: function() {
      return H.interceptedTypeCheck(N.SingleChildRenderObjectElement.prototype.get$widget.call(this), "$isOffstage");
    }
  };
  T.SliverPadding.prototype = {
    createRenderObject$1: function(context) {
      var t1 = new T.RenderSliverPadding(this.padding, T.Directionality_of(context), null);
      t1.get$isRepaintBoundary();
      t1.get$alwaysNeedsCompositing();
      t1._needsCompositing = false;
      t1.set$child(null);
      return t1;
    },
    updateRenderObject$2: function(context, renderObject) {
      H.interceptedTypeCheck(renderObject, "$isRenderSliverPadding");
      renderObject.set$padding(0, this.padding);
      renderObject.set$textDirection(T.Directionality_of(context));
    }
  };
  T.Stack.prototype = {
    createRenderObject$1: function(context) {
      var t1 = T.Directionality_of(context);
      t1 = new K.RenderStack(this.alignment, t1, this.fit, C.Overflow_1, 0, null, null);
      t1.get$isRepaintBoundary();
      t1.get$alwaysNeedsCompositing();
      t1._needsCompositing = false;
      t1.addAll$1(0, null);
      return t1;
    },
    updateRenderObject$2: function(context, renderObject) {
      var t1;
      H.interceptedTypeCheck(renderObject, "$isRenderStack");
      renderObject.set$alignment(this.alignment);
      t1 = T.Directionality_of(context);
      renderObject.set$textDirection(t1);
      t1 = this.fit;
      if (renderObject._fit !== t1) {
        renderObject._fit = t1;
        renderObject.markNeedsLayout$0();
      }
      if (renderObject._overflow !== C.Overflow_1) {
        renderObject._overflow = C.Overflow_1;
        renderObject.markNeedsPaint$0();
      }
    }
  };
  T.Positioned.prototype = {
    applyParentData$1: function(renderObject) {
      var needsLayout, targetParent, _this = this,
        parentData = H.interceptedTypeCheck(renderObject.parentData, "$isStackParentData"),
        t1 = _this.left;
      if (parentData.left != t1) {
        parentData.left = t1;
        needsLayout = true;
      } else
        needsLayout = false;
      t1 = _this.top;
      if (parentData.top != t1) {
        parentData.top = t1;
        needsLayout = true;
      }
      t1 = _this.right;
      if (parentData.right != t1) {
        parentData.right = t1;
        needsLayout = true;
      }
      t1 = _this.bottom;
      if (parentData.bottom != t1) {
        parentData.bottom = t1;
        needsLayout = true;
      }
      t1 = _this.width;
      if (parentData.width != t1) {
        parentData.width = t1;
        needsLayout = true;
      }
      parentData.height;
      if (needsLayout) {
        targetParent = renderObject._node$_parent;
        if (targetParent instanceof K.RenderObject)
          targetParent.markNeedsLayout$0();
      }
    },
    $asParentDataWidget: function() {
      return [T.Stack];
    }
  };
  T.PositionedDirectional.prototype = {
    build$1: function(context) {
      var left, _this = this, _null = null,
        right = _this.start;
      switch (T.Directionality_of(context)) {
        case C.TextDirection_0:
          left = _null;
          break;
        case C.TextDirection_1:
          left = right;
          right = _null;
          break;
        default:
          right = _null;
          left = right;
      }
      return T.Positioned$(_this.bottom, _this.child, _null, _null, left, right, _this.top, _this.width);
    }
  };
  T.Flex.prototype = {
    get$_needTextDirection: function() {
      switch (this.direction) {
        case C.Axis_0:
          return true;
        case C.Axis_1:
          var t1 = this.crossAxisAlignment;
          return t1 === C.CrossAxisAlignment_0 || t1 === C.CrossAxisAlignment_1;
      }
      return;
    },
    getEffectiveTextDirection$1: function(context) {
      var t1 = this.textDirection;
      if (t1 == null)
        t1 = H.boolConversionCheck(this.get$_needTextDirection()) ? T.Directionality_of(context) : null;
      return t1;
    },
    createRenderObject$1: function(context) {
      var _this = this, _null = null,
        t1 = new F.RenderFlex(_this.direction, _this.mainAxisAlignment, _this.mainAxisSize, _this.crossAxisAlignment, _this.getEffectiveTextDirection$1(context), _this.verticalDirection, _this.textBaseline, P.List_List$filled(4, U.TextPainter$(_null, _null, _null, _null, _null, C.TextAlign_4, C.TextDirection_1, 1), U.TextPainter), true, 0, _null, _null);
      t1.get$isRepaintBoundary();
      t1.get$alwaysNeedsCompositing();
      t1._needsCompositing = false;
      t1.addAll$1(0, _null);
      return t1;
    },
    updateRenderObject$2: function(context, renderObject) {
      var t1, _this = this;
      H.interceptedTypeCheck(renderObject, "$isRenderFlex");
      t1 = _this.direction;
      if (renderObject._flex$_direction !== t1) {
        renderObject._flex$_direction = t1;
        renderObject.markNeedsLayout$0();
      }
      t1 = _this.mainAxisAlignment;
      if (renderObject._mainAxisAlignment !== t1) {
        renderObject._mainAxisAlignment = t1;
        renderObject.markNeedsLayout$0();
      }
      t1 = _this.mainAxisSize;
      if (renderObject._mainAxisSize !== t1) {
        renderObject._mainAxisSize = t1;
        renderObject.markNeedsLayout$0();
      }
      t1 = _this.crossAxisAlignment;
      if (renderObject._crossAxisAlignment !== t1) {
        renderObject._crossAxisAlignment = t1;
        renderObject.markNeedsLayout$0();
      }
      t1 = _this.getEffectiveTextDirection$1(context);
      if (renderObject._flex$_textDirection != t1) {
        renderObject._flex$_textDirection = t1;
        renderObject.markNeedsLayout$0();
      }
      t1 = _this.verticalDirection;
      if (renderObject._verticalDirection !== t1) {
        renderObject._verticalDirection = t1;
        renderObject.markNeedsLayout$0();
      }
      renderObject._flex$_textBaseline;
    }
  };
  T.Flexible.prototype = {
    applyParentData$1: function(renderObject) {
      var needsLayout, targetParent,
        parentData = H.interceptedTypeCheck(renderObject.parentData, "$isFlexParentData"),
        t1 = this.flex;
      if (parentData.flex !== t1) {
        parentData.flex = t1;
        needsLayout = true;
      } else
        needsLayout = false;
      t1 = this.fit;
      if (parentData.fit !== t1) {
        parentData.fit = t1;
        needsLayout = true;
      }
      if (needsLayout) {
        targetParent = renderObject._node$_parent;
        if (targetParent instanceof K.RenderObject)
          targetParent.markNeedsLayout$0();
      }
    },
    $asParentDataWidget: function() {
      return [T.Flex];
    }
  };
  T.Expanded.prototype = {};
  T.RichText.prototype = {
    createRenderObject$1: function(context) {
      var t2, t3, t4, t5, t6, _this = this,
        t1 = _this.textDirection;
      if (t1 == null)
        t1 = T.Directionality_of(context);
      t2 = _this.overflow;
      t3 = L.Localizations_localeOf(context, true);
      t4 = H.setRuntimeTypeInfo([], [P.int]);
      t5 = H.setRuntimeTypeInfo([], [S.GestureRecognizer]);
      t6 = t2 === C.TextOverflow_2 ? "\u2026" : null;
      t5 = new Q.RenderParagraph(U.TextPainter$(t6, t3, _this.maxLines, null, _this.text, _this.textAlign, t1, _this.textScaleFactor), true, t2, t4, t5);
      t5.get$isRepaintBoundary();
      t5.get$alwaysNeedsCompositing();
      t5._needsCompositing = false;
      return t5;
    },
    updateRenderObject$2: function(context, renderObject) {
      var t1, _this = this;
      H.interceptedTypeCheck(renderObject, "$isRenderParagraph");
      renderObject.set$text(0, _this.text);
      renderObject.set$textAlign(0, _this.textAlign);
      t1 = _this.textDirection;
      renderObject.set$textDirection(t1 == null ? T.Directionality_of(context) : t1);
      renderObject.set$softWrap(true);
      renderObject.set$overflow(0, _this.overflow);
      renderObject.set$textScaleFactor(_this.textScaleFactor);
      renderObject.set$maxLines(_this.maxLines);
      t1 = L.Localizations_localeOf(context, true);
      renderObject.set$locale(0, t1);
    }
  };
  T.DefaultAssetBundle.prototype = {};
  T.Listener.prototype = {
    createRenderObject$1: function(context) {
      var _this = this, _null = null,
        t1 = new E.RenderPointerListener(_this.onPointerDown, _null, _null, _null, _null, _this.onPointerUp, _this.onPointerCancel, _this.onPointerSignal, _this.behavior, _null);
      t1.get$isRepaintBoundary();
      t1.get$alwaysNeedsCompositing();
      t1._needsCompositing = false;
      t1.set$child(_null);
      return t1;
    },
    updateRenderObject$2: function(context, renderObject) {
      var _this = this;
      H.interceptedTypeCheck(renderObject, "$isRenderPointerListener");
      renderObject.set$onPointerDown(_this.onPointerDown);
      renderObject.set$onPointerMove(null);
      renderObject.set$onPointerUp(_this.onPointerUp);
      renderObject.set$onPointerCancel(_this.onPointerCancel);
      renderObject.set$onPointerSignal(_this.onPointerSignal);
      renderObject.behavior = _this.behavior;
    }
  };
  T.RepaintBoundary.prototype = {
    createRenderObject$1: function(context) {
      var t1 = new E.RenderRepaintBoundary(null);
      t1.get$isRepaintBoundary();
      t1._needsCompositing = true;
      t1.set$child(null);
      return t1;
    }
  };
  T.IgnorePointer.prototype = {
    createRenderObject$1: function(context) {
      var t1 = new E.RenderIgnorePointer(this.ignoring, this.ignoringSemantics, null);
      t1.get$isRepaintBoundary();
      t1.get$alwaysNeedsCompositing();
      t1._needsCompositing = false;
      t1.set$child(null);
      return t1;
    },
    updateRenderObject$2: function(context, renderObject) {
      H.interceptedTypeCheck(renderObject, "$isRenderIgnorePointer");
      renderObject.set$ignoring(this.ignoring);
      renderObject.set$ignoringSemantics(this.ignoringSemantics);
    }
  };
  T.AbsorbPointer.prototype = {
    createRenderObject$1: function(context) {
      var t1 = new E.RenderAbsorbPointer(false, null, null);
      t1.get$isRepaintBoundary();
      t1.get$alwaysNeedsCompositing();
      t1._needsCompositing = false;
      t1.set$child(null);
      return t1;
    },
    updateRenderObject$2: function(context, renderObject) {
      H.interceptedTypeCheck(renderObject, "$isRenderAbsorbPointer");
      renderObject.set$absorbing(false);
      renderObject.set$ignoringSemantics(null);
    }
  };
  T.Semantics.prototype = {
    createRenderObject$1: function(context) {
      var _this = this, _null = null,
        t1 = _this.properties;
      t1 = new E.RenderSemanticsAnnotations(_this.container, _this.explicitChildNodes, false, t1.checked, t1.enabled, t1.selected, t1.button, t1.header, t1.textField, t1.focused, t1.inMutuallyExclusiveGroup, t1.obscured, _null, t1.scopesRoute, t1.namesRoute, t1.hidden, t1.image, t1.liveRegion, t1.toggled, t1.label, t1.value, t1.increasedValue, t1.decreasedValue, t1.hint, t1.hintOverrides, _this._getTextDirection$1(context), t1.sortKey, t1.onTap, t1.onDismiss, t1.onLongPress, t1.onScrollLeft, t1.onScrollRight, t1.onScrollUp, t1.onScrollDown, t1.onIncrease, t1.onDecrease, t1.onCopy, t1.onCut, t1.onPaste, t1.onMoveCursorForwardByCharacter, t1.onMoveCursorBackwardByCharacter, _null, _null, t1.onSetSelection, t1.onDidGainAccessibilityFocus, t1.onDidLoseAccessibilityFocus, t1.customSemanticsActions, _null);
      t1.get$isRepaintBoundary();
      t1.get$alwaysNeedsCompositing();
      t1._needsCompositing = false;
      t1.set$child(_null);
      return t1;
    },
    _getTextDirection$1: function(context) {
      var containsText,
        t1 = this.properties,
        t2 = t1.textDirection;
      if (t2 != null)
        return t2;
      if (t1.label == null)
        containsText = false;
      else
        containsText = true;
      if (!containsText)
        return;
      return T.Directionality_of(context);
    },
    updateRenderObject$2: function(context, renderObject) {
      var t1, t2, _this = this;
      H.interceptedTypeCheck(renderObject, "$isRenderSemanticsAnnotations");
      renderObject.set$container(_this.container);
      renderObject.set$explicitChildNodes(_this.explicitChildNodes);
      renderObject.set$excludeSemantics(false);
      t1 = _this.properties;
      renderObject.set$scopesRoute(t1.scopesRoute);
      renderObject.set$enabled(0, t1.enabled);
      renderObject.set$checked(0, t1.checked);
      renderObject.set$toggled(t1.toggled);
      renderObject.set$selected(0, t1.selected);
      renderObject.set$button(0, t1.button);
      renderObject.set$header(t1.header);
      renderObject.set$textField(t1.textField);
      renderObject.set$focused(0, t1.focused);
      renderObject.set$inMutuallyExclusiveGroup(t1.inMutuallyExclusiveGroup);
      renderObject.set$obscured(t1.obscured);
      renderObject.set$multiline(0, null);
      renderObject.set$hidden(0, t1.hidden);
      renderObject.set$image(0, t1.image);
      renderObject.set$liveRegion(t1.liveRegion);
      renderObject.set$label(0, t1.label);
      renderObject.set$value(0, t1.value);
      renderObject.set$increasedValue(t1.increasedValue);
      renderObject.set$decreasedValue(t1.decreasedValue);
      renderObject.set$hint(0, t1.hint);
      renderObject.set$hintOverrides(t1.hintOverrides);
      renderObject.set$namesRoute(t1.namesRoute);
      renderObject.set$textDirection(_this._getTextDirection$1(context));
      renderObject.set$sortKey(t1.sortKey);
      renderObject.set$onTap(t1.onTap);
      renderObject.set$onLongPress(t1.onLongPress);
      renderObject.set$onScrollLeft(t1.onScrollLeft);
      renderObject.set$onScrollRight(t1.onScrollRight);
      renderObject.set$onScrollUp(t1.onScrollUp);
      renderObject.set$onScrollDown(t1.onScrollDown);
      renderObject.set$onIncrease(t1.onIncrease);
      renderObject.set$onDismiss(t1.onDismiss);
      renderObject.set$onDecrease(t1.onDecrease);
      renderObject.set$onCopy(0, t1.onCopy);
      renderObject.set$onCut(0, t1.onCut);
      renderObject.set$onPaste(0, t1.onPaste);
      t2 = t1.onMoveCursorForwardByCharacter;
      renderObject.set$onMoveCursorForwardByCharacter(t2);
      renderObject.set$onMoveCursorBackwardByCharacter(t2);
      renderObject.set$onMoveCursorForwardByWord(null);
      renderObject.set$onMoveCursorBackwardByWord(null);
      renderObject.set$onSetSelection(t1.onSetSelection);
      renderObject.set$onDidGainAccessibilityFocus(t1.onDidGainAccessibilityFocus);
      renderObject.set$onDidLoseAccessibilityFocus(t1.onDidLoseAccessibilityFocus);
      renderObject.set$customSemanticsActions(t1.customSemanticsActions);
    }
  };
  T.BlockSemantics.prototype = {
    createRenderObject$1: function(context) {
      var t1 = new E.RenderBlockSemantics(true, null);
      t1.get$isRepaintBoundary();
      t1.get$alwaysNeedsCompositing();
      t1._needsCompositing = false;
      t1.set$child(null);
      return t1;
    },
    updateRenderObject$2: function(context, renderObject) {
      H.interceptedTypeCheck(renderObject, "$isRenderBlockSemantics").set$blocking(true);
    }
  };
  T.ExcludeSemantics.prototype = {
    createRenderObject$1: function(context) {
      var t1 = new E.RenderExcludeSemantics(this.excluding, null);
      t1.get$isRepaintBoundary();
      t1.get$alwaysNeedsCompositing();
      t1._needsCompositing = false;
      t1.set$child(null);
      return t1;
    },
    updateRenderObject$2: function(context, renderObject) {
      H.interceptedTypeCheck(renderObject, "$isRenderExcludeSemantics").set$excluding(this.excluding);
    }
  };
  T.IndexedSemantics.prototype = {
    createRenderObject$1: function(context) {
      var t1 = new E.RenderIndexedSemantics(this.index, null);
      t1.get$isRepaintBoundary();
      t1.get$alwaysNeedsCompositing();
      t1._needsCompositing = false;
      t1.set$child(null);
      return t1;
    },
    updateRenderObject$2: function(context, renderObject) {
      H.interceptedTypeCheck(renderObject, "$isRenderIndexedSemantics").set$index(0, this.index);
    }
  };
  T.KeyedSubtree.prototype = {
    build$1: function(context) {
      return this.child;
    }
  };
  T.Builder.prototype = {
    build$1: function(context) {
      return this.builder.call$1(context);
    }
  };
  N._WidgetsFlutterBinding_BindingBase_GestureBinding_ServicesBinding_SchedulerBinding_PaintingBinding_SemanticsBinding_RendererBinding_initServiceExtensions_closure.prototype = {
    call$0: function() {
      var t1 = $.RendererBinding__instance;
      t1 = t1 == null ? null : t1.RendererBinding__pipelineOwner._rootNode;
      t1 = t1 == null ? null : t1.super$DiagnosticableTreeMixin$toStringDeep(C.DiagnosticLevel_2, "", "");
      D.print__debugPrintThrottled$closure().call$1(t1 == null ? "Render tree unavailable." : t1);
      return D.debugPrintDone();
    },
    $signature: 16
  };
  N._WidgetsFlutterBinding_BindingBase_GestureBinding_ServicesBinding_SchedulerBinding_PaintingBinding_SemanticsBinding_RendererBinding_initServiceExtensions_closure0.prototype = {
    call$0: function() {
      N.debugDumpSemanticsTree(C.DebugSemanticsDumpOrder_1);
      return D.debugPrintDone();
    },
    $signature: 16
  };
  N._WidgetsFlutterBinding_BindingBase_GestureBinding_ServicesBinding_SchedulerBinding_PaintingBinding_SemanticsBinding_RendererBinding_initServiceExtensions_closure1.prototype = {
    call$0: function() {
      N.debugDumpSemanticsTree(C.DebugSemanticsDumpOrder_0);
      return D.debugPrintDone();
    },
    $signature: 16
  };
  N._WidgetsFlutterBinding_BindingBase_GestureBinding_ServicesBinding_SchedulerBinding_initServiceExtensions_closure.prototype = {
    call$0: function() {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(P.double),
        $async$returnValue;
      var $async$call$0 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$returnValue = $._timeDilation;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$call$0, $async$completer);
    },
    $signature: 138
  };
  N._WidgetsFlutterBinding_BindingBase_GestureBinding_ServicesBinding_SchedulerBinding_initServiceExtensions_closure0.prototype = {
    call$1: function(value) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(P.Null);
      var $async$call$1 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              N.timeDilation(value);
              // implicit return
              return P._asyncReturn(null, $async$completer);
          }
      });
      return P._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 139
  };
  N.WidgetsBindingObserver.prototype = {};
  N.WidgetsBinding.prototype = {
    handleLocaleChanged$0: function() {
      var t1 = $.$get$window();
      this.dispatchLocaleChanged$1(t1.get$locale(t1));
    },
    dispatchLocaleChanged$1: function(locale) {
      var t1, t2, _i;
      for (t1 = this.WidgetsBinding__observers, t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i)
        t1[_i].didChangeLocale$1(locale);
    },
    handlePopRoute$0: function() {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(-1),
        $async$returnValue, $async$self = this, t1, t2, _i, $async$temp1;
      var $async$handlePopRoute$0 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = P.List_List$from($async$self.WidgetsBinding__observers, true, N.WidgetsBindingObserver), t2 = t1.length, _i = 0;
            case 3:
              // for condition
              if (!(_i < t1.length)) {
                // goto after for
                $async$goto = 5;
                break;
              }
              $async$temp1 = H;
              $async$goto = 6;
              return P._asyncAwait(t1[_i].didPopRoute$0(), $async$handlePopRoute$0);
            case 6:
              // returning from await.
              if ($async$temp1.boolConversionCheck($async$result)) {
                // goto return
                $async$goto = 1;
                break;
              }
            case 4:
              // for update
              t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i;
              // goto for condition
              $async$goto = 3;
              break;
            case 5:
              // after for
              M.SystemNavigator_pop();
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$handlePopRoute$0, $async$completer);
    },
    handlePushRoute$1: function(route) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(-1),
        $async$returnValue, $async$self = this, t1, t2, _i, $async$temp1;
      var $async$handlePushRoute$1 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = P.List_List$from($async$self.WidgetsBinding__observers, true, N.WidgetsBindingObserver), t2 = t1.length, _i = 0;
            case 3:
              // for condition
              if (!(_i < t1.length)) {
                // goto after for
                $async$goto = 5;
                break;
              }
              $async$temp1 = H;
              $async$goto = 6;
              return P._asyncAwait(t1[_i].didPushRoute$1(route), $async$handlePushRoute$1);
            case 6:
              // returning from await.
              if ($async$temp1.boolConversionCheck($async$result)) {
                // goto return
                $async$goto = 1;
                break;
              }
            case 4:
              // for update
              t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i;
              // goto for condition
              $async$goto = 3;
              break;
            case 5:
              // after for
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$handlePushRoute$1, $async$completer);
    },
    _handleNavigationInvocation$1: function(methodCall) {
      var t1;
      switch (methodCall.method) {
        case "popRoute":
          return this.handlePopRoute$0();
        case "pushRoute":
          return this.handlePushRoute$1(H.stringTypeCheck(methodCall.$arguments));
      }
      t1 = new P._Future($.Zone__current, [null]);
      t1._asyncComplete$1(null);
      return t1;
    },
    handleMemoryPressure$0: function() {
      var t1, t2, _i;
      for (t1 = this.WidgetsBinding__observers, t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i)
        t1[_i].didHaveMemoryPressure$0();
    },
    _handleSystemMessage$1: function(systemMessage) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(-1),
        $async$returnValue, $async$self = this;
      var $async$_handleSystemMessage$1 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              switch (H.stringTypeCheck(J.$index$asx(H.assertSubtype(systemMessage, "$isMap", [P.String, null], "$asMap"), "type"))) {
                case "memoryPressure":
                  $async$self.handleMemoryPressure$0();
                  break;
              }
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$_handleSystemMessage$1, $async$completer);
    },
    deferFirstFrameReport$0: function() {
      U.profile(new N.WidgetsBinding_deferFirstFrameReport_closure(this));
    },
    allowFirstFrameReport$0: function() {
      U.profile(new N.WidgetsBinding_allowFirstFrameReport_closure(this));
    },
    _handleBuildScheduled$0: function() {
      this.ensureVisualUpdate$0();
    }
  };
  N._WidgetsFlutterBinding_BindingBase_GestureBinding_ServicesBinding_SchedulerBinding_PaintingBinding_SemanticsBinding_RendererBinding_WidgetsBinding_initServiceExtensions_closure.prototype = {
    call$0: function() {
      var t1 = this.$this;
      t1.registerSignalServiceExtension$2$callback$name(new N._WidgetsFlutterBinding_BindingBase_GestureBinding_ServicesBinding_SchedulerBinding_PaintingBinding_SemanticsBinding_RendererBinding_WidgetsBinding_initServiceExtensions__closure(), "debugDumpApp");
      t1.registerServiceExtension$2$callback$name(new N._WidgetsFlutterBinding_BindingBase_GestureBinding_ServicesBinding_SchedulerBinding_PaintingBinding_SemanticsBinding_RendererBinding_WidgetsBinding_initServiceExtensions__closure0(t1), "didSendFirstFrameEvent");
    },
    $signature: 0
  };
  N._WidgetsFlutterBinding_BindingBase_GestureBinding_ServicesBinding_SchedulerBinding_PaintingBinding_SemanticsBinding_RendererBinding_WidgetsBinding_initServiceExtensions__closure.prototype = {
    call$0: function() {
      D.print__debugPrintThrottled$closure().call$1(J.get$runtimeType$($.WidgetsBinding__instance).toString$0(0) + " - RELEASE MODE");
      var t1 = $.WidgetsBinding__instance.WidgetsBinding__renderViewElement;
      if (t1 != null)
        D.print__debugPrintThrottled$closure().call$1(new Y._DiagnosticableTreeNode(t1, null, true, true, null).toStringDeep$3$minLevel$prefixLineOne$prefixOtherLines(C.DiagnosticLevel_2, "", null));
      else
        D.print__debugPrintThrottled$closure().call$1("<no tree currently mounted>");
      return D.debugPrintDone();
    },
    $signature: 16
  };
  N._WidgetsFlutterBinding_BindingBase_GestureBinding_ServicesBinding_SchedulerBinding_PaintingBinding_SemanticsBinding_RendererBinding_WidgetsBinding_initServiceExtensions__closure0.prototype = {
    call$1: function(_) {
      var t1 = P.String;
      return this.$call$body$_WidgetsFlutterBinding_BindingBase_GestureBinding_ServicesBinding_SchedulerBinding_PaintingBinding_SemanticsBinding_RendererBinding_WidgetsBinding_initServiceExtensions__closure(H.assertSubtype(_, "$isMap", [t1, t1], "$asMap"));
    },
    $call$body$_WidgetsFlutterBinding_BindingBase_GestureBinding_ServicesBinding_SchedulerBinding_PaintingBinding_SemanticsBinding_RendererBinding_WidgetsBinding_initServiceExtensions__closure: function(_) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter([P.Map, P.String,,]),
        $async$returnValue, $async$self = this;
      var $async$call$1 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$returnValue = P.LinkedHashMap_LinkedHashMap$_literal(["enabled", $async$self.$this.WidgetsBinding__needToReportFirstFrame ? "false" : "true"], P.String, null);
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$call$1, $async$completer);
    },
    $signature: 32
  };
  N.WidgetsBinding_deferFirstFrameReport_closure.prototype = {
    call$0: function() {
      ++this.$this.WidgetsBinding__deferFirstFrameReportCount;
    },
    $signature: 0
  };
  N.WidgetsBinding_allowFirstFrameReport_closure.prototype = {
    call$0: function() {
      --this.$this.WidgetsBinding__deferFirstFrameReportCount;
    },
    $signature: 0
  };
  N._WidgetsFlutterBinding_BindingBase_GestureBinding_ServicesBinding_SchedulerBinding_PaintingBinding_SemanticsBinding_RendererBinding_WidgetsBinding_drawFrame_closure.prototype = {
    call$0: function() {
      var t1 = this.$this;
      if (t1.WidgetsBinding__needToReportFirstFrame && t1.WidgetsBinding__deferFirstFrameReportCount === 0) {
        P.Timeline_instantSync("Widgets completed first useful frame");
        P.postEvent("Flutter.FirstFrame", P.LinkedHashMap_LinkedHashMap$_empty(P.String, null));
        t1.WidgetsBinding__needToReportFirstFrame = false;
      }
    },
    $signature: 0
  };
  N.RenderObjectToWidgetAdapter.prototype = {
    createElement$0: function(_) {
      var t1 = ($.Element__nextHashCode + 1) % 16777215;
      $.Element__nextHashCode = t1;
      return new N.RenderObjectToWidgetElement(t1, this, C._ElementLifecycle_0, this.$ti);
    },
    createRenderObject$1: function(context) {
      return this.container;
    },
    updateRenderObject$2: function(context, renderObject) {
    },
    attachToRenderTree$2: function(owner, element) {
      var t1 = {};
      t1.element = element;
      H.assertSubtype(element, "$isRenderObjectToWidgetElement", this.$ti, "$asRenderObjectToWidgetElement");
      if (element == null) {
        owner.lockState$1(new N.RenderObjectToWidgetAdapter_attachToRenderTree_closure(t1, this, owner));
        owner.buildScope$2(t1.element, new N.RenderObjectToWidgetAdapter_attachToRenderTree_closure0(t1));
      } else {
        element._newWidget = this;
        element.markNeedsBuild$0();
      }
      return t1.element;
    },
    toStringShort$0: function() {
      return this.debugShortDescription;
    }
  };
  N.RenderObjectToWidgetAdapter_attachToRenderTree_closure.prototype = {
    call$0: function() {
      var element,
        t1 = this.$this,
        t2 = ($.Element__nextHashCode + 1) % 16777215;
      $.Element__nextHashCode = t2;
      element = new N.RenderObjectToWidgetElement(t2, t1, C._ElementLifecycle_0, [H.getTypeArgumentByIndex(t1, 0)]);
      this._box_0.element = element;
      element._owner = this.owner;
    },
    $signature: 0
  };
  N.RenderObjectToWidgetAdapter_attachToRenderTree_closure0.prototype = {
    call$0: function() {
      var t1 = this._box_0.element;
      t1.super$RootRenderObjectElement$mount(null, null);
      t1._rebuild$0();
    },
    $signature: 0
  };
  N.RenderObjectToWidgetElement.prototype = {
    get$widget: function() {
      return H.assertSubtype(N.RenderObjectElement.prototype.get$widget.call(this), "$isRenderObjectToWidgetAdapter", this.$ti, "$asRenderObjectToWidgetAdapter");
    },
    visitChildren$1: function(visitor) {
      var t1;
      H.functionTypeCheck(visitor, {func: 1, ret: -1, args: [N.Element]});
      t1 = this._child;
      if (t1 != null)
        visitor.call$1(t1);
    },
    forgetChild$1: function(child) {
      this._child = null;
    },
    mount$2: function($parent, newSlot) {
      this.super$RootRenderObjectElement$mount($parent, newSlot);
      this._rebuild$0();
    },
    update$1: function(_, newWidget) {
      this.super$RenderObjectElement$update(0, H.assertSubtype(newWidget, "$isRenderObjectToWidgetAdapter", this.$ti, "$asRenderObjectToWidgetAdapter"));
      this._rebuild$0();
    },
    performRebuild$0: function() {
      var _this = this,
        t1 = _this._newWidget;
      if (t1 != null) {
        _this._newWidget = null;
        _this.super$RenderObjectElement$update(0, H.assertSubtype(t1, "$isRenderObjectToWidgetAdapter", _this.$ti, "$asRenderObjectToWidgetAdapter"));
        _this._rebuild$0();
      }
      _this.super$RenderObjectElement$performRebuild();
    },
    _rebuild$0: function() {
      var exception, stack, details, error, exception0, _this = this;
      try {
        _this._child = _this.updateChild$3(_this._child, H.assertSubtype(N.RenderObjectElement.prototype.get$widget.call(_this), "$isRenderObjectToWidgetAdapter", _this.$ti, "$asRenderObjectToWidgetAdapter").child, C.C_Object);
      } catch (exception0) {
        exception = H.unwrapException(exception0);
        stack = H.getTraceFromException(exception0);
        details = U.FlutterErrorDetails$("attaching to the render tree", exception, null, "widgets library", false, stack);
        U.assertions_FlutterError_dumpErrorToConsole$closure().call$1(details);
        error = $.$get$ErrorWidget_builder().call$1(details);
        _this._child = _this.updateChild$3(null, error, C.C_Object);
      }
    },
    get$renderObject: function() {
      return H.assertSubtype(N.RenderObjectElement.prototype.get$renderObject.call(this), "$isRenderObjectWithChildMixin", this.$ti, "$asRenderObjectWithChildMixin");
    },
    insertChildRenderObject$2: function(child, slot) {
      H.assertSubtype(N.RenderObjectElement.prototype.get$renderObject.call(this), "$isRenderObjectWithChildMixin", this.$ti, "$asRenderObjectWithChildMixin").set$child(H.assertSubtypeOfRuntimeType(child, H.getTypeArgumentByIndex(this, 0)));
    },
    moveChildRenderObject$2: function(child, slot) {
    },
    removeChildRenderObject$1: function(child) {
      H.assertSubtype(N.RenderObjectElement.prototype.get$renderObject.call(this), "$isRenderObjectWithChildMixin", this.$ti, "$asRenderObjectWithChildMixin").set$child(null);
    }
  };
  N.WidgetsFlutterBinding.prototype = {$isHitTestTarget: 1};
  N._WidgetsFlutterBinding_BindingBase_GestureBinding.prototype = {
    initInstances$0: function() {
      this.super$BindingBase$initInstances();
      $.GestureBinding__instance = this;
      var t1 = $.$get$window();
      t1.toString;
      t1.set$_onPointerDataPacket(H.functionTypeCheck(this.get$_handlePointerDataPacket(), {func: 1, ret: -1, args: [Q.PointerDataPacket]}));
    },
    unlocked$0: function() {
      this.super$BindingBase$unlocked();
      this._flushPointerEventQueue$0();
    }
  };
  N._WidgetsFlutterBinding_BindingBase_GestureBinding_ServicesBinding.prototype = {
    initInstances$0: function() {
      this.super$_WidgetsFlutterBinding_BindingBase_GestureBinding$initInstances();
      var t1 = $.$get$window();
      t1.toString;
      t1.set$_onPlatformMessage(H.functionTypeCheck(B.platform_messages_BinaryMessages_handlePlatformMessage$closure(), {func: 1, ret: -1, args: [P.String, P.ByteData, {func: 1, ret: -1, args: [P.ByteData]}]}));
      t1 = $.LicenseRegistry__collectors;
      if (t1 == null)
        t1 = $.LicenseRegistry__collectors = H.setRuntimeTypeInfo([], [{func: 1, ret: [P.Stream, F.LicenseEntry]}]);
      C.JSArray_methods.add$1(t1, this.get$_addLicenses());
    },
    initServiceExtensions$0: function() {
      this.super$BindingBase$initServiceExtensions();
    }
  };
  N._WidgetsFlutterBinding_BindingBase_GestureBinding_ServicesBinding_SchedulerBinding.prototype = {
    initInstances$0: function() {
      var t1, _this = this;
      _this.super$_WidgetsFlutterBinding_BindingBase_GestureBinding_ServicesBinding$initInstances();
      $.SchedulerBinding__instance = _this;
      t1 = $.$get$window();
      t1.toString;
      t1.set$_onBeginFrame(H.functionTypeCheck(_this.get$_handleBeginFrame(), {func: 1, ret: -1, args: [P.Duration]}));
      t1.set$_onDrawFrame(H.functionTypeCheck(_this.get$_handleDrawFrame(), {func: 1, ret: -1}));
      C.BasicMessageChannel_No7.setMessageHandler$1(_this.get$_handleLifecycleMessage());
    },
    initServiceExtensions$0: function() {
      this.super$_WidgetsFlutterBinding_BindingBase_GestureBinding_ServicesBinding$initServiceExtensions();
      this.registerNumericServiceExtension$3$getter$name$setter(new N._WidgetsFlutterBinding_BindingBase_GestureBinding_ServicesBinding_SchedulerBinding_initServiceExtensions_closure(), "timeDilation", new N._WidgetsFlutterBinding_BindingBase_GestureBinding_ServicesBinding_SchedulerBinding_initServiceExtensions_closure0());
    },
    set$_transientCallbacks: function(_transientCallbacks) {
      this.SchedulerBinding__transientCallbacks = H.assertSubtype(_transientCallbacks, "$isMap", [P.int, N._FrameCallbackEntry], "$asMap");
    },
    set$_nextFrameCompleter: function(_nextFrameCompleter) {
      this.SchedulerBinding__nextFrameCompleter = H.assertSubtype(_nextFrameCompleter, "$isCompleter", [-1], "$asCompleter");
    }
  };
  N._WidgetsFlutterBinding_BindingBase_GestureBinding_ServicesBinding_SchedulerBinding_PaintingBinding.prototype = {
    initInstances$0: function() {
      this.super$_WidgetsFlutterBinding_BindingBase_GestureBinding_ServicesBinding_SchedulerBinding$initInstances();
      var t1 = P.Object;
      this.PaintingBinding__imageCache = new E.ImageCache(P.LinkedHashMap_LinkedHashMap$_empty(t1, L.ImageStreamCompleter), P.LinkedHashMap_LinkedHashMap$_empty(t1, E._CachedImage));
    }
  };
  N._WidgetsFlutterBinding_BindingBase_GestureBinding_ServicesBinding_SchedulerBinding_PaintingBinding_SemanticsBinding.prototype = {
    initInstances$0: function() {
      this.super$_WidgetsFlutterBinding_BindingBase_GestureBinding_ServicesBinding_SchedulerBinding_PaintingBinding$initInstances();
      $.SemanticsBinding__instance = this;
      this.SemanticsBinding__accessibilityFeatures = $.$get$window()._accessibilityFeatures;
    }
  };
  N._WidgetsFlutterBinding_BindingBase_GestureBinding_ServicesBinding_SchedulerBinding_PaintingBinding_SemanticsBinding_RendererBinding.prototype = {
    initInstances$0: function() {
      var t1, t2, _this = this;
      _this.super$_WidgetsFlutterBinding_BindingBase_GestureBinding_ServicesBinding_SchedulerBinding_PaintingBinding_SemanticsBinding$initInstances();
      $.RendererBinding__instance = _this;
      t1 = K.RenderObject;
      t2 = [t1];
      _this.RendererBinding__pipelineOwner = new K.PipelineOwner(_this.get$ensureVisualUpdate(), _this.get$_handleSemanticsOwnerCreated(), _this.get$_handleSemanticsOwnerDisposed(), H.setRuntimeTypeInfo([], t2), H.setRuntimeTypeInfo([], t2), H.setRuntimeTypeInfo([], t2), P.LinkedHashSet_LinkedHashSet(t1));
      t1 = $.$get$window();
      t1.toString;
      t2 = {func: 1, ret: -1};
      t1.set$_onMetricsChanged(H.functionTypeCheck(_this.get$handleMetricsChanged(), t2));
      t1.set$_onTextScaleFactorChanged(H.functionTypeCheck(_this.get$handleTextScaleFactorChanged(), t2));
      t1.set$_onPlatformBrightnessChanged(H.functionTypeCheck(_this.get$handlePlatformBrightnessChanged(), t2));
      t1.set$_onSemanticsEnabledChanged(H.functionTypeCheck(_this.get$_handleSemanticsEnabledChanged(), t2));
      t1.set$_onSemanticsAction(H.functionTypeCheck(_this.get$_handleSemanticsAction(), {func: 1, ret: -1, args: [P.int, Q.SemanticsAction, P.ByteData]}));
      t1 = new A.RenderView(C.Size_0_0, _this.createViewConfiguration$0(), t1, null);
      t1.get$isRepaintBoundary();
      t1._needsCompositing = true;
      t1.set$child(null);
      _this.RendererBinding__pipelineOwner.set$rootNode(t1);
      t1 = _this.RendererBinding__pipelineOwner._rootNode;
      t1._relayoutBoundary = t1;
      C.JSArray_methods.add$1(H.interceptedTypeCheck(B.AbstractNode.prototype.get$owner.call(t1), "$isPipelineOwner")._nodesNeedingLayout, t1);
      t1._layer = t1._updateMatricesAndCreateNewRootLayer$0();
      C.JSArray_methods.add$1(H.interceptedTypeCheck(B.AbstractNode.prototype.get$owner.call(t1), "$isPipelineOwner")._nodesNeedingPaint, t1);
      H.interceptedTypeCheck(B.AbstractNode.prototype.get$owner.call(t1), "$isPipelineOwner").onNeedVisualUpdate.call$0();
      _this.setSemanticsEnabled$1(T.EngineSemanticsOwner_instance()._semanticsEnabled);
      C.JSArray_methods.add$1(_this.SchedulerBinding__persistentCallbacks, H.functionTypeCheck(_this.get$_handlePersistentFrameCallback(), {func: 1, ret: -1, args: [P.Duration]}));
      _this.RendererBinding__mouseTracker = _this._createMouseTracker$0();
    },
    initServiceExtensions$0: function() {
      var _this = this;
      _this.super$_WidgetsFlutterBinding_BindingBase_GestureBinding_ServicesBinding_SchedulerBinding$initServiceExtensions();
      _this.registerSignalServiceExtension$2$callback$name(new N._WidgetsFlutterBinding_BindingBase_GestureBinding_ServicesBinding_SchedulerBinding_PaintingBinding_SemanticsBinding_RendererBinding_initServiceExtensions_closure(), "debugDumpRenderTree");
      _this.registerSignalServiceExtension$2$callback$name(new N._WidgetsFlutterBinding_BindingBase_GestureBinding_ServicesBinding_SchedulerBinding_PaintingBinding_SemanticsBinding_RendererBinding_initServiceExtensions_closure0(), "debugDumpSemanticsTreeInTraversalOrder");
      _this.registerSignalServiceExtension$2$callback$name(new N._WidgetsFlutterBinding_BindingBase_GestureBinding_ServicesBinding_SchedulerBinding_PaintingBinding_SemanticsBinding_RendererBinding_initServiceExtensions_closure1(), "debugDumpSemanticsTreeInInverseHitTestOrder");
    }
  };
  N._WidgetsFlutterBinding_BindingBase_GestureBinding_ServicesBinding_SchedulerBinding_PaintingBinding_SemanticsBinding_RendererBinding_WidgetsBinding.prototype = {
    initServiceExtensions$0: function() {
      this.super$_WidgetsFlutterBinding_BindingBase_GestureBinding_ServicesBinding_SchedulerBinding_PaintingBinding_SemanticsBinding_RendererBinding$initServiceExtensions();
      U.profile(new N._WidgetsFlutterBinding_BindingBase_GestureBinding_ServicesBinding_SchedulerBinding_PaintingBinding_SemanticsBinding_RendererBinding_WidgetsBinding_initServiceExtensions_closure(this));
    },
    handleMetricsChanged$0: function() {
      var t1, t2, _i;
      this.super$RendererBinding$handleMetricsChanged();
      for (t1 = this.WidgetsBinding__observers, t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i)
        t1[_i].didChangeMetrics$0();
    },
    handleTextScaleFactorChanged$0: function() {
      var t1, t2, _i;
      this.super$RendererBinding$handleTextScaleFactorChanged();
      for (t1 = this.WidgetsBinding__observers, t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i)
        t1[_i].didChangeTextScaleFactor$0();
    },
    handlePlatformBrightnessChanged$0: function() {
      var t1, t2, _i;
      this.super$RendererBinding$handlePlatformBrightnessChanged();
      for (t1 = this.WidgetsBinding__observers, t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i)
        t1[_i].didChangePlatformBrightness$0();
    },
    handleAccessibilityFeaturesChanged$0: function() {
      var t1, t2, _i;
      this.super$SemanticsBinding$handleAccessibilityFeaturesChanged();
      for (t1 = this.WidgetsBinding__observers, t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i)
        t1[_i].didChangeAccessibilityFeatures$0();
    },
    handleAppLifecycleStateChanged$1: function(state) {
      var t1, t2, _i;
      this.super$SchedulerBinding$handleAppLifecycleStateChanged(state);
      for (t1 = this.WidgetsBinding__observers, t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i)
        t1[_i].didChangeAppLifecycleState$1(state);
    },
    drawFrame$0: function() {
      var t1, _this = this;
      try {
        t1 = _this.WidgetsBinding__renderViewElement;
        if (t1 != null)
          _this.WidgetsBinding__buildOwner.buildScope$1(t1);
        _this.super$RendererBinding$drawFrame();
        _this.WidgetsBinding__buildOwner.finalizeTree$0();
      } finally {
      }
      U.profile(new N._WidgetsFlutterBinding_BindingBase_GestureBinding_ServicesBinding_SchedulerBinding_PaintingBinding_SemanticsBinding_RendererBinding_WidgetsBinding_drawFrame_closure(_this));
    }
  };
  M.DecoratedBox.prototype = {
    createRenderObject$1: function(context) {
      var t1 = new E.RenderDecoratedBox(this.decoration, this.position, U.createLocalImageConfiguration(context), null);
      t1.get$isRepaintBoundary();
      t1.get$alwaysNeedsCompositing();
      t1._needsCompositing = false;
      t1.set$child(null);
      return t1;
    },
    updateRenderObject$2: function(context, renderObject) {
      H.interceptedTypeCheck(renderObject, "$isRenderDecoratedBox");
      renderObject.set$decoration(this.decoration);
      renderObject.set$configuration(U.createLocalImageConfiguration(context));
      renderObject.set$position(0, this.position);
    }
  };
  M.Container.prototype = {
    get$_paddingIncludingDecoration: function() {
      var decorationPadding,
        t1 = this.decoration;
      if (t1 == null || t1.get$padding(t1) == null)
        return this.padding;
      decorationPadding = t1.get$padding(t1);
      t1 = this.padding;
      if (t1 == null)
        return decorationPadding;
      return t1.add$1(0, decorationPadding);
    },
    build$1: function(context) {
      var t1, t2, t3, effectivePadding, _this = this, _null = null,
        current = _this.child;
      if (current == null) {
        t1 = _this.constraints;
        if (t1 != null) {
          t2 = t1.minWidth;
          t3 = t1.maxWidth;
          if (typeof t2 !== "number")
            return t2.$ge();
          if (typeof t3 !== "number")
            return H.iae(t3);
          if (t2 >= t3) {
            t2 = t1.minHeight;
            t1 = t1.maxHeight;
            if (typeof t2 !== "number")
              return t2.$ge();
            if (typeof t1 !== "number")
              return H.iae(t1);
            t1 = t2 >= t1;
          } else
            t1 = false;
          t1 = !t1;
        } else
          t1 = true;
      } else
        t1 = false;
      if (t1)
        current = new T.LimitedBox(0, 0, new T.ConstrainedBox(C.BoxConstraints_ALM, _null, _null), _null);
      t1 = _this.alignment;
      if (t1 != null)
        current = new T.Align(t1, _null, _null, current, _null);
      effectivePadding = _this.get$_paddingIncludingDecoration();
      if (effectivePadding != null)
        current = new T.Padding(effectivePadding, current, _null);
      t1 = _this.decoration;
      if (t1 != null)
        current = new M.DecoratedBox(t1, C.DecorationPosition_0, current, _null);
      t1 = _this.constraints;
      if (t1 != null)
        current = new T.ConstrainedBox(t1, current, _null);
      t1 = _this.margin;
      if (t1 != null)
        current = new T.Padding(t1, current, _null);
      return current;
    }
  };
  O.FocusScopeNode.prototype = {
    get$isFirstFocus: function() {
      var t1 = this._parent;
      return t1 == null || t1._firstChild === this;
    },
    _updateManager$1: function(manager) {
      new O.FocusScopeNode__updateManager_update(manager).call$1(this);
    },
    _visitChildren$1: function(visitor) {
      var child;
      H.functionTypeCheck(visitor, {func: 1, ret: -1, args: [O.FocusScopeNode]});
      child = this._firstChild;
      for (; child != null;) {
        visitor.call$1(child);
        child = child._nextSibling;
      }
    },
    _focus_manager$_remove$1: function(_, child) {
      var t1 = child._previousSibling,
        t2 = child._nextSibling;
      if (t1 == null)
        this._firstChild = t2;
      else
        t1._nextSibling = t2;
      t2 = child._nextSibling;
      if (t2 == null)
        this._lastChild = t1;
      else
        t2._previousSibling = t1;
      child._parent = child._nextSibling = child._previousSibling = null;
      child._updateManager$1(null);
    },
    _didChangeFocusChain$0: function() {
      if (this.get$isFirstFocus()) {
        var t1 = this._manager;
        if (t1 != null)
          t1._markNeedsUpdate$0();
      }
    },
    setFirstFocus$1: function(child) {
      var t1, _this = this;
      if (_this._firstChild === child)
        return;
      child.detach$0(0);
      child._parent = _this;
      t1 = child._nextSibling = _this._firstChild;
      if (t1 != null)
        t1._previousSibling = child;
      _this._firstChild = child;
      if (_this._lastChild == null)
        _this._lastChild = child;
      child._updateManager$1(_this._manager);
      _this._didChangeFocusChain$0();
    },
    reparentScopeIfNeeded$1: function(child) {
      var t1 = child._parent;
      if (t1 == null || t1 === this)
        return;
      if (child.get$isFirstFocus())
        this.setFirstFocus$1(child);
      else
        child.detach$0(0);
    },
    detach$0: function(_) {
      var t1, t2, t3, _this = this;
      _this._didChangeFocusChain$0();
      t1 = _this._parent;
      if (t1 != null) {
        t2 = _this._previousSibling;
        t3 = _this._nextSibling;
        if (t2 == null)
          t1._firstChild = t3;
        else
          t2._nextSibling = t3;
        t3 = _this._nextSibling;
        if (t3 == null)
          t1._lastChild = t2;
        else
          t3._previousSibling = t2;
        _this._parent = _this._nextSibling = _this._previousSibling = null;
        _this._updateManager$1(null);
      }
    },
    debugDescribeChildren$0: function() {
      var count, t1,
        children = H.setRuntimeTypeInfo([], [Y.DiagnosticsNode]),
        child = this._firstChild;
      if (child != null)
        for (count = 1; true;) {
          t1 = "child " + count;
          child.toString;
          C.JSArray_methods.add$1(children, new Y._DiagnosticableTreeNode(child, t1, true, true, null));
          if (child == this._lastChild)
            break;
          child = child._nextSibling;
          ++count;
        }
      return children;
    },
    $isDiagnosticable: 1,
    $isDiagnosticableTree: 1
  };
  O.FocusScopeNode__updateManager_update.prototype = {
    call$1: function(child) {
      var t1 = this.manager;
      if (child._manager == t1)
        return;
      child._manager = t1;
      t1 != null;
      child._visitChildren$1(this);
    },
    $signature: 214
  };
  O.FocusManager.prototype = {
    _markNeedsUpdate$0: function() {
      var _this = this;
      if (_this._haveScheduledUpdate)
        return;
      _this._haveScheduledUpdate = true;
      P.scheduleMicrotask(_this.get$_update(_this));
    },
    _findNextFocus$0: function() {
      var scope = this.rootScope;
      for (; scope = scope._firstChild, scope != null;)
        ;
      return;
    },
    _update$0: function(_) {
      this._haveScheduledUpdate = false;
      this._findNextFocus$0();
      return;
    },
    toString$0: function(_) {
      var t1 = this.super$Object$toString(0);
      return t1;
    }
  };
  O._FocusScopeNode_Object_DiagnosticableTreeMixin.prototype = {};
  L._FocusScopeMarker.prototype = {
    updateShouldNotify$1: function(oldWidget) {
      return this.node !== H.interceptedTypeCheck(oldWidget, "$is_FocusScopeMarker").node;
    }
  };
  L.FocusScope.prototype = {
    createState$0: function() {
      return new L._FocusScopeState(C._StateLifecycle_0);
    },
    get$child: function() {
      return this.child;
    }
  };
  L._FocusScopeState.prototype = {
    didChangeDependencies$0: function() {
      var _this = this;
      _this.super$State$didChangeDependencies();
      if (!_this._didAutofocus && _this._widget.autofocus) {
        L.FocusScope_of(_this._element).setFirstFocus$1(_this._widget.node);
        _this._didAutofocus = true;
      }
    },
    dispose$0: function() {
      this._widget.node.detach$0(0);
      this.super$State$dispose();
    },
    build$1: function(context) {
      var t1, _null = null;
      L.FocusScope_of(context).reparentScopeIfNeeded$1(this._widget.node);
      t1 = this._widget;
      return T.Semantics$(_null, new L._FocusScopeMarker(t1.node, t1.child, _null), false, _null, true, _null, _null, _null, _null);
    },
    $asState: function() {
      return [L.FocusScope];
    }
  };
  N.UniqueKey.prototype = {
    toString$0: function(_) {
      return "[#" + Y.shortHash(this) + "]";
    }
  };
  N.GlobalKey.prototype = {
    get$currentState: function() {
      var state,
        element = $.GlobalKey__registry.$index(0, this);
      if (element instanceof N.StatefulElement) {
        state = element._framework$_state;
        if (H.checkSubtypeOfRuntimeType(state, H.getTypeArgumentByIndex(this, 0)))
          return state;
      }
      return;
    }
  };
  N.LabeledGlobalKey.prototype = {
    toString$0: function(_) {
      var _this = this,
        t1 = _this._debugLabel,
        label = t1 != null ? " " + t1 : "";
      if (new H.TypeImpl(H.getRti(_this)).$eq(0, C.Type_LabeledGlobalKey_6TW))
        return "[GlobalKey#" + Y.shortHash(_this) + label + "]";
      return "[" + (_this.get$runtimeType(_this).toString$0(0) + "#" + Y.shortHash(_this)) + label + "]";
    }
  };
  N.GlobalObjectKey.prototype = {
    $eq: function(_, other) {
      if (other == null)
        return false;
      if (!J.get$runtimeType$(other).$eq(0, new H.TypeImpl(H.getRti(this))))
        return false;
      return this.value == H.assertSubtype(other, "$isGlobalObjectKey", this.$ti, "$asGlobalObjectKey").value;
    },
    get$hashCode: function(_) {
      return H.objectHashCode(this.value);
    },
    toString$0: function(_) {
      var selfType = new H.TypeImpl(H.getRti(this)).get$_typeName(),
        t1 = this.value;
      return "[" + (C.JSString_methods.endsWith$1(selfType, "<State<StatefulWidget>>") ? C.JSString_methods.substring$2(selfType, 0, selfType.length - 23) : selfType) + " " + (J.get$runtimeType$(t1).toString$0(0) + "#" + Y.shortHash(t1)) + "]";
    }
  };
  N.TypeMatcher.prototype = {};
  N.Widget.prototype = {
    toStringShort$0: function() {
      var t1 = this.key;
      return t1 == null ? new H.TypeImpl(H.getRti(this)).toString$0(0) : new H.TypeImpl(H.getRti(this)).toString$0(0) + "-" + t1.toString$0(0);
    }
  };
  N.StatelessWidget.prototype = {
    createElement$0: function(_) {
      var t1 = ($.Element__nextHashCode + 1) % 16777215;
      $.Element__nextHashCode = t1;
      return new N.StatelessElement(t1, this, C._ElementLifecycle_0);
    }
  };
  N.StatefulWidget.prototype = {
    createElement$0: function(_) {
      return N.StatefulElement$(this);
    }
  };
  N._StateLifecycle.prototype = {
    toString$0: function(_) {
      return this._framework$_name;
    }
  };
  N.State.prototype = {
    initState$0: function() {
    },
    didUpdateWidget$1: function(oldWidget) {
      H.assertSubtypeOfRuntimeType(oldWidget, H.getRuntimeTypeArgument(this, "State", 0));
    },
    setState$1: function(fn) {
      H.functionTypeCheck(fn, {func: 1, ret: -1}).call$0();
      this._element.markNeedsBuild$0();
    },
    deactivate$0: function() {
    },
    dispose$0: function() {
    },
    didChangeDependencies$0: function() {
    },
    set$_widget: function(_widget) {
      this._widget = H.assertSubtypeOfRuntimeType(_widget, H.getRuntimeTypeArgument(this, "State", 0));
    }
  };
  N.ProxyWidget.prototype = {};
  N.ParentDataWidget.prototype = {
    createElement$0: function(_) {
      var t1 = ($.Element__nextHashCode + 1) % 16777215;
      $.Element__nextHashCode = t1;
      return new N.ParentDataElement(t1, this, C._ElementLifecycle_0, [H.getRuntimeTypeArgument(this, "ParentDataWidget", 0)]);
    }
  };
  N.InheritedWidget.prototype = {
    createElement$0: function(_) {
      var t1 = P.HashMap_HashMap(N.Element, P.Object),
        t2 = ($.Element__nextHashCode + 1) % 16777215;
      $.Element__nextHashCode = t2;
      return new N.InheritedElement(t1, t2, this, C._ElementLifecycle_0);
    }
  };
  N.RenderObjectWidget.prototype = {
    updateRenderObject$2: function(context, renderObject) {
    },
    didUnmountRenderObject$1: function(renderObject) {
    }
  };
  N.LeafRenderObjectWidget.prototype = {
    createElement$0: function(_) {
      var t1 = ($.Element__nextHashCode + 1) % 16777215;
      $.Element__nextHashCode = t1;
      return new N.LeafRenderObjectElement(t1, this, C._ElementLifecycle_0);
    }
  };
  N.SingleChildRenderObjectWidget.prototype = {
    createElement$0: function(_) {
      var t1 = ($.Element__nextHashCode + 1) % 16777215;
      $.Element__nextHashCode = t1;
      return new N.SingleChildRenderObjectElement(t1, this, C._ElementLifecycle_0);
    }
  };
  N.MultiChildRenderObjectWidget.prototype = {
    createElement$0: function(_) {
      var t1 = P.HashSet_HashSet(N.Element),
        t2 = ($.Element__nextHashCode + 1) % 16777215;
      $.Element__nextHashCode = t2;
      return new N.MultiChildRenderObjectElement(t1, t2, this, C._ElementLifecycle_0);
    }
  };
  N._ElementLifecycle.prototype = {
    toString$0: function(_) {
      return this._framework$_name;
    }
  };
  N._InactiveElements.prototype = {
    _unmount$1: function(element) {
      H.interceptedTypeCheck(element, "$isElement");
      element.visitChildren$1(new N._InactiveElements__unmount_closure(this, element));
      element.unmount$0();
    },
    _unmountAll$0: function() {
      var elements, t1, elements0, _this = this;
      _this._locked = true;
      t1 = _this._elements;
      elements0 = t1.toList$0(0);
      C.JSArray_methods.sort$1(elements0, N.framework_Element__sort$closure());
      elements = elements0;
      t1.clear$0(0);
      try {
        t1 = elements;
        new H.ReversedListIterable(t1, [H.getTypeArgumentByIndex(t1, 0)]).forEach$1(0, _this.get$_unmount());
      } finally {
        _this._locked = false;
      }
    },
    add$1: function(_, element) {
      if (element._active) {
        element.deactivate$0();
        element.visitChildren$1(N.framework__InactiveElements__deactivateRecursively$closure());
      }
      this._elements.add$1(0, element);
    }
  };
  N._InactiveElements__unmount_closure.prototype = {
    call$1: function(child) {
      this.$this._unmount$1(H.interceptedTypeCheck(child, "$isElement"));
    },
    $signature: 9
  };
  N.BuildContext.prototype = {};
  N.BuildOwner.prototype = {
    scheduleBuildFor$1: function(element) {
      var _this = this;
      if (element._inDirtyList) {
        _this._dirtyElementsNeedsResorting = true;
        return;
      }
      if (!_this._scheduledFlushDirtyElements && _this.onBuildScheduled != null) {
        _this._scheduledFlushDirtyElements = true;
        _this.onBuildScheduled.call$0();
      }
      C.JSArray_methods.add$1(_this._dirtyElements, element);
      element._inDirtyList = true;
    },
    lockState$1: function(callback) {
      H.functionTypeCheck(callback, {func: 1, ret: -1});
      try {
        callback.call$0();
      } finally {
      }
    },
    buildScope$2: function(context, callback) {
      var e, stack, element, t1, t2, t3, t4, exception, t5, t6, _i, _this = this, _box_0 = {};
      H.functionTypeCheck(callback, {func: 1, ret: -1});
      if (callback == null && _this._dirtyElements.length === 0)
        return;
      P.Timeline_startSync("Build", C.Map_9aZ6I, null);
      try {
        _this._scheduledFlushDirtyElements = true;
        if (callback != null) {
          _box_0.debugPreviousBuildTarget = null;
          _this._dirtyElementsNeedsResorting = false;
          try {
            callback.call$0();
          } finally {
          }
        }
        t1 = _this._dirtyElements;
        C.JSArray_methods.sort$1(t1, N.framework_Element__sort$closure());
        _this._dirtyElementsNeedsResorting = false;
        _box_0.dirtyCount = t1.length;
        _box_0.index = 0;
        for (t2 = H.getTypeArgumentByIndex(t1, 0), t3 = {func: 1, ret: P.int, args: [t2, t2]}, t4 = 0; t4 < _box_0.dirtyCount;) {
          try {
            if (t4 < 0 || t4 >= t1.length)
              return H.ioore(t1, t4);
            t1[t4].rebuild$0();
          } catch (exception) {
            e = H.unwrapException(exception);
            stack = H.getTraceFromException(exception);
            U.assertions_FlutterError_dumpErrorToConsole$closure().call$1(new U.FlutterErrorDetails(e, stack, "widgets library", "while rebuilding dirty elements", new N.BuildOwner_buildScope_closure(_box_0, _this), false));
          }
          t4 = ++_box_0.index;
          t5 = _box_0.dirtyCount;
          t6 = t1.length;
          if (t5 < t6 || H.boolConversionCheck(_this._dirtyElementsNeedsResorting)) {
            H.functionTypeCheck(N.framework_Element__sort$closure(), t3);
            t4 = t6 - 1;
            if (t4 - 0 <= 32)
              H.Sort__insertionSort(t1, 0, t4, N.framework_Element__sort$closure(), t2);
            else
              H.Sort__dualPivotQuicksort(t1, 0, t4, N.framework_Element__sort$closure(), t2);
            t4 = _this._dirtyElementsNeedsResorting = false;
            _box_0.dirtyCount = t1.length;
            while (true) {
              t5 = _box_0.index;
              if (t5 > 0) {
                t6 = t5 - 1;
                if (t6 >= t1.length)
                  return H.ioore(t1, t6);
                t6 = t1[t6]._dirty;
              } else
                t6 = t4;
              if (!t6)
                break;
              _box_0.index = t5 - 1;
            }
            t4 = t5;
          }
        }
      } finally {
        for (t1 = _this._dirtyElements, t2 = t1.length, _i = 0; _i < t2; ++_i) {
          element = t1[_i];
          element._inDirtyList = false;
        }
        C.JSArray_methods.set$length(t1, 0);
        _this._scheduledFlushDirtyElements = false;
        _this._dirtyElementsNeedsResorting = null;
        P.Timeline_finishSync();
      }
    },
    buildScope$1: function(context) {
      return this.buildScope$2(context, null);
    },
    finalizeTree$0: function() {
      var e, stack, exception;
      P.Timeline_startSync("Finalize tree", C.Map_9aZ6I, null);
      try {
        this.lockState$1(new N.BuildOwner_finalizeTree_closure(this));
      } catch (exception) {
        e = H.unwrapException(exception);
        stack = H.getTraceFromException(exception);
        N._debugReportException("while finalizing the widget tree", e, stack, null);
      } finally {
        P.Timeline_finishSync();
      }
    },
    set$onBuildScheduled: function(onBuildScheduled) {
      this.onBuildScheduled = H.functionTypeCheck(onBuildScheduled, {func: 1, ret: -1});
    }
  };
  N.BuildOwner_buildScope_closure.prototype = {
    call$1: function(information) {
      var t2,
        t1 = this._box_0;
      information._contents += "The element being rebuilt at the time was index " + t1.index + " of " + t1.dirtyCount + ":\n";
      t2 = this.$this._dirtyElements;
      t1 = t1.index;
      if (t1 < 0 || t1 >= t2.length)
        return H.ioore(t2, t1);
      information._contents += "  " + t2[t1].toString$0(0);
    },
    $signature: 5
  };
  N.BuildOwner_finalizeTree_closure.prototype = {
    call$0: function() {
      this.$this._inactiveElements._unmountAll$0();
    },
    $signature: 0
  };
  N.Element.prototype = {
    $eq: function(_, other) {
      if (other == null)
        return false;
      return this === other;
    },
    get$hashCode: function(_) {
      return this._cachedHash;
    },
    get$widget: function() {
      return this._widget;
    },
    get$renderObject: function() {
      var t1 = {};
      t1.result = null;
      new N.Element_renderObject_visit(t1).call$1(this);
      return t1.result;
    },
    visitChildren$1: function(visitor) {
      H.functionTypeCheck(visitor, {func: 1, ret: -1, args: [N.Element]});
    },
    updateChild$3: function(child, newWidget, newSlot) {
      var _this = this;
      if (newWidget == null) {
        if (child != null)
          _this.deactivateChild$1(child);
        return;
      }
      if (child != null) {
        if (child.get$widget() === newWidget) {
          if (!J.$eq$(child._slot, newSlot))
            _this.updateSlotForChild$2(child, newSlot);
          return child;
        }
        if (N.Widget_canUpdate(child.get$widget(), newWidget)) {
          if (!J.$eq$(child._slot, newSlot))
            _this.updateSlotForChild$2(child, newSlot);
          child.update$1(0, newWidget);
          return child;
        }
        _this.deactivateChild$1(child);
      }
      return _this.inflateWidget$2(newWidget, newSlot);
    },
    mount$2: function($parent, newSlot) {
      var t1, t2, key, _this = this;
      _this._framework$_parent = $parent;
      _this._slot = newSlot;
      t1 = $parent != null;
      if (t1) {
        t2 = $parent._depth;
        if (typeof t2 !== "number")
          return t2.$add();
        ++t2;
      } else
        t2 = 1;
      _this._depth = t2;
      _this._active = true;
      if (t1)
        _this._owner = $parent._owner;
      if (!!J.getInterceptor$(_this.get$widget().key).$isGlobalKey) {
        key = H.assertSubtype(_this.get$widget().key, "$isGlobalKey", [[N.State, N.StatefulWidget]], "$asGlobalKey");
        key.toString;
        $.GlobalKey__registry.$indexSet(0, key, _this);
      }
      _this._updateInheritance$0();
    },
    update$1: function(_, newWidget) {
      this._widget = newWidget;
    },
    updateSlotForChild$2: function(child, newSlot) {
      new N.Element_updateSlotForChild_visit(newSlot).call$1(child);
    },
    _updateSlot$1: function(newSlot) {
      this._slot = newSlot;
    },
    _updateDepth$1: function(parentDepth) {
      var expectedDepth, t1;
      if (typeof parentDepth !== "number")
        return parentDepth.$add();
      expectedDepth = parentDepth + 1;
      t1 = this._depth;
      if (typeof t1 !== "number")
        return t1.$lt();
      if (t1 < expectedDepth) {
        this._depth = expectedDepth;
        this.visitChildren$1(new N.Element__updateDepth_closure(expectedDepth));
      }
    },
    detachRenderObject$0: function() {
      this.visitChildren$1(new N.Element_detachRenderObject_closure());
      this._slot = null;
    },
    attachRenderObject$1: function(newSlot) {
      this.visitChildren$1(new N.Element_attachRenderObject_closure(newSlot));
      this._slot = newSlot;
    },
    _retakeInactiveElement$2: function(key, newWidget) {
      var $parent,
        element = $.GlobalKey__registry.$index(0, H.assertSubtype(key, "$isGlobalKey", [[N.State, N.StatefulWidget]], "$asGlobalKey"));
      if (element == null)
        return;
      if (!N.Widget_canUpdate(element.get$widget(), newWidget))
        return;
      $parent = element._framework$_parent;
      if ($parent != null) {
        $parent.forgetChild$1(element);
        $parent.deactivateChild$1(element);
      }
      this._owner._inactiveElements._elements.remove$1(0, element);
      return element;
    },
    inflateWidget$2: function(newWidget, newSlot) {
      var newChild, _this = this,
        key = newWidget.key;
      if (!!J.getInterceptor$(key).$isGlobalKey) {
        newChild = _this._retakeInactiveElement$2(key, newWidget);
        if (newChild != null) {
          newChild._framework$_parent = _this;
          newChild._updateDepth$1(_this._depth);
          newChild.activate$0();
          newChild.visitChildren$1(N.framework_Element__activateRecursively$closure());
          newChild.attachRenderObject$1(newSlot);
          return _this.updateChild$3(newChild, newWidget, newSlot);
        }
      }
      newChild = newWidget.createElement$0(0);
      newChild.mount$2(_this, newSlot);
      return newChild;
    },
    deactivateChild$1: function(child) {
      var t1;
      child._framework$_parent = null;
      child.detachRenderObject$0();
      t1 = this._owner._inactiveElements;
      if (child._active) {
        child.deactivate$0();
        child.visitChildren$1(N.framework__InactiveElements__deactivateRecursively$closure());
      }
      t1._elements.add$1(0, child);
    },
    activate$0: function() {
      var _this = this,
        t1 = _this._dependencies,
        t2 = t1 == null,
        hadDependencies = !t2 && t1._collection$_length !== 0 || _this._hadUnsatisfiedDependencies;
      _this._active = true;
      if (!t2)
        t1.clear$0(0);
      _this._hadUnsatisfiedDependencies = false;
      _this._updateInheritance$0();
      if (_this._dirty)
        _this._owner.scheduleBuildFor$1(_this);
      if (hadDependencies)
        _this.didChangeDependencies$0();
    },
    deactivate$0: function() {
      var _this = this,
        t1 = _this._dependencies;
      if (t1 != null && t1._collection$_length !== 0)
        for (t1 = new P._HashSetIterator(t1, t1._computeElements$0(), [H.getTypeArgumentByIndex(t1, 0)]); t1.moveNext$0();)
          t1._collection$_current._dependents.remove$1(0, _this);
      _this.set$_inheritedWidgets(null);
      _this._active = false;
    },
    unmount$0: function() {
      if (!!J.getInterceptor$(this.get$widget().key).$isGlobalKey) {
        var key = H.assertSubtype(this.get$widget().key, "$isGlobalKey", [[N.State, N.StatefulWidget]], "$asGlobalKey");
        key.toString;
        if (J.$eq$($.GlobalKey__registry.$index(0, key), this))
          $.GlobalKey__registry.remove$1(0, key);
      }
    },
    get$size: function(_) {
      var renderObject = this.get$renderObject();
      if (renderObject instanceof S.RenderBox)
        return renderObject._size;
      return;
    },
    inheritFromElement$2$aspect: function(ancestor, aspect) {
      var _this = this;
      if (_this._dependencies == null)
        _this.set$_dependencies(P.HashSet_HashSet(N.InheritedElement));
      _this._dependencies.add$1(0, ancestor);
      ancestor._dependents.$indexSet(0, _this, null);
      return H.interceptedTypeCheck(N.ProxyElement.prototype.get$widget.call(ancestor), "$isInheritedWidget");
    },
    inheritFromWidgetOfExactType$2$aspect: function(targetType, aspect) {
      var t1 = this._inheritedWidgets,
        ancestor = t1 == null ? null : t1.$index(0, targetType);
      if (ancestor != null)
        return this.inheritFromElement$2$aspect(ancestor, aspect);
      this._hadUnsatisfiedDependencies = true;
      return;
    },
    inheritFromWidgetOfExactType$1: function(targetType) {
      return this.inheritFromWidgetOfExactType$2$aspect(targetType, null);
    },
    _updateInheritance$0: function() {
      var t1 = this._framework$_parent;
      this.set$_inheritedWidgets(t1 == null ? null : t1._inheritedWidgets);
    },
    ancestorWidgetOfExactType$1: function(targetType) {
      var t1,
        ancestor = this._framework$_parent;
      while (true) {
        t1 = ancestor == null;
        if (!(!t1 && !J.get$runtimeType$(ancestor.get$widget()).$eq(0, targetType)))
          break;
        ancestor = ancestor._framework$_parent;
      }
      return t1 ? null : ancestor.get$widget();
    },
    ancestorStateOfType$1: function(matcher) {
      var t1, t2, t3,
        ancestor = this._framework$_parent;
      for (t1 = H.getTypeArgumentByIndex(matcher, 0); t2 = ancestor == null, !t2;) {
        if (!!ancestor.$isStatefulElement) {
          t3 = ancestor._framework$_state;
          t3 = H.checkSubtypeOfRuntimeType(t3, t1);
        } else
          t3 = false;
        if (t3)
          break;
        ancestor = ancestor._framework$_parent;
      }
      H.interceptedTypeCheck(ancestor, "$isStatefulElement");
      return t2 ? null : ancestor._framework$_state;
    },
    ancestorRenderObjectOfType$1: function(matcher) {
      var t1, t2, t3,
        ancestor = this._framework$_parent;
      for (t1 = H.getTypeArgumentByIndex(matcher, 0); t2 = ancestor == null, !t2;) {
        if (!!ancestor.$isRenderObjectElement) {
          t3 = ancestor.get$renderObject();
          t3 = H.checkSubtypeOfRuntimeType(t3, t1);
        } else
          t3 = false;
        if (t3)
          break;
        ancestor = ancestor._framework$_parent;
      }
      H.interceptedTypeCheck(ancestor, "$isRenderObjectElement");
      return t2 ? null : ancestor.get$renderObject();
    },
    visitAncestorElements$1: function(visitor) {
      var ancestor;
      H.functionTypeCheck(visitor, {func: 1, ret: P.bool, args: [N.Element]});
      ancestor = this._framework$_parent;
      while (true) {
        if (!(ancestor != null && H.boolConversionCheck(visitor.call$1(ancestor))))
          break;
        ancestor = ancestor._framework$_parent;
      }
    },
    didChangeDependencies$0: function() {
      this.markNeedsBuild$0();
    },
    toStringShort$0: function() {
      return this.get$widget() != null ? this.get$widget().toStringShort$0() : "[" + new H.TypeImpl(H.getRti(this)).toString$0(0) + "]";
    },
    debugDescribeChildren$0: function() {
      var children = H.setRuntimeTypeInfo([], [Y.DiagnosticsNode]);
      this.visitChildren$1(new N.Element_debugDescribeChildren_closure(children));
      return children;
    },
    markNeedsBuild$0: function() {
      var _this = this;
      if (!_this._active)
        return;
      if (_this._dirty)
        return;
      _this._dirty = true;
      _this._owner.scheduleBuildFor$1(_this);
    },
    rebuild$0: function() {
      if (!this._active || !this._dirty)
        return;
      this.performRebuild$0();
    },
    set$_inheritedWidgets: function(_inheritedWidgets) {
      this._inheritedWidgets = H.assertSubtype(_inheritedWidgets, "$isMap", [P.Type, N.InheritedElement], "$asMap");
    },
    set$_dependencies: function(_dependencies) {
      this._dependencies = H.assertSubtype(_dependencies, "$isSet", [N.InheritedElement], "$asSet");
    },
    $isBuildContext: 1
  };
  N.Element_renderObject_visit.prototype = {
    call$1: function(element) {
      H.interceptedTypeCheck(element, "$isElement");
      if (element instanceof N.RenderObjectElement)
        this._box_0.result = element.get$renderObject();
      else
        element.visitChildren$1(this);
    },
    $signature: 10
  };
  N.Element_updateSlotForChild_visit.prototype = {
    call$1: function(element) {
      H.interceptedTypeCheck(element, "$isElement");
      element._updateSlot$1(this.newSlot);
      if (!element.$isRenderObjectElement)
        element.visitChildren$1(this);
    },
    $signature: 10
  };
  N.Element__updateDepth_closure.prototype = {
    call$1: function(child) {
      H.interceptedTypeCheck(child, "$isElement")._updateDepth$1(this.expectedDepth);
    },
    $signature: 9
  };
  N.Element_detachRenderObject_closure.prototype = {
    call$1: function(child) {
      H.interceptedTypeCheck(child, "$isElement").detachRenderObject$0();
    },
    $signature: 9
  };
  N.Element_attachRenderObject_closure.prototype = {
    call$1: function(child) {
      H.interceptedTypeCheck(child, "$isElement").attachRenderObject$1(this.newSlot);
    },
    $signature: 9
  };
  N.Element_debugDescribeChildren_closure.prototype = {
    call$1: function(child) {
      var t1;
      H.interceptedTypeCheck(child, "$isElement");
      t1 = this.children;
      if (child != null)
        C.JSArray_methods.add$1(t1, new Y._DiagnosticableTreeNode(child, null, true, true, null));
      else
        C.JSArray_methods.add$1(t1, Y.DiagnosticsNode_DiagnosticsNode$message("<null child>", C.DiagnosticsTreeStyle_5));
    },
    $signature: 9
  };
  N.ErrorWidget.prototype = {
    createRenderObject$1: function(context) {
      return V.RenderErrorBox$(this.message);
    }
  };
  N.ErrorWidget_closure.prototype = {
    call$1: function(details) {
      return new N.ErrorWidget(N.ErrorWidget__stringify(details.exception), new N.UniqueKey());
    },
    $signature: 144
  };
  N.ComponentElement.prototype = {
    mount$2: function($parent, newSlot) {
      this.super$Element$mount($parent, newSlot);
      this._firstBuild$0();
    },
    _firstBuild$0: function() {
      this.rebuild$0();
    },
    performRebuild$0: function() {
      var e, stack, e0, stack0, exception, built0, _this = this, built = null;
      try {
        built = _this.build$0();
        _this.get$widget();
      } catch (exception) {
        e = H.unwrapException(exception);
        stack = H.getTraceFromException(exception);
        built0 = $.$get$ErrorWidget_builder().call$1(N._debugReportException("building " + _this.toString$0(0), e, stack, null));
        built = built0;
      } finally {
        _this._dirty = false;
      }
      try {
        _this._framework$_child = _this.updateChild$3(_this._framework$_child, built, _this._slot);
      } catch (exception) {
        e0 = H.unwrapException(exception);
        stack0 = H.getTraceFromException(exception);
        built0 = $.$get$ErrorWidget_builder().call$1(N._debugReportException("building " + _this.toString$0(0), e0, stack0, null));
        built = built0;
        _this._framework$_child = _this.updateChild$3(null, built, _this._slot);
      }
    },
    visitChildren$1: function(visitor) {
      var t1;
      H.functionTypeCheck(visitor, {func: 1, ret: -1, args: [N.Element]});
      t1 = this._framework$_child;
      if (t1 != null)
        visitor.call$1(t1);
    },
    forgetChild$1: function(child) {
      this._framework$_child = null;
    }
  };
  N.StatelessElement.prototype = {
    get$widget: function() {
      return H.interceptedTypeCheck(N.Element.prototype.get$widget.call(this), "$isStatelessWidget");
    },
    build$0: function() {
      return H.interceptedTypeCheck(N.Element.prototype.get$widget.call(this), "$isStatelessWidget").build$1(this);
    },
    update$1: function(_, newWidget) {
      this.super$Element$update(0, H.interceptedTypeCheck(newWidget, "$isStatelessWidget"));
      this._dirty = true;
      this.rebuild$0();
    }
  };
  N.StatefulElement.prototype = {
    build$0: function() {
      return this._framework$_state.build$1(this);
    },
    _firstBuild$0: function() {
      var debugCheckForReturnedFuture, _this = this;
      try {
        _this._debugAllowIgnoredCallsToMarkNeedsBuild = true;
        debugCheckForReturnedFuture = _this._framework$_state.initState$0();
      } finally {
        _this._debugAllowIgnoredCallsToMarkNeedsBuild = false;
      }
      _this._framework$_state.didChangeDependencies$0();
      _this.super$ComponentElement$_firstBuild();
    },
    update$1: function(_, newWidget) {
      var oldWidget, debugCheckForReturnedFuture, t1, _this = this;
      _this.super$Element$update(0, H.interceptedTypeCheck(newWidget, "$isStatefulWidget"));
      t1 = _this._framework$_state;
      oldWidget = t1._widget;
      _this._dirty = true;
      t1.set$_widget(H.interceptedTypeCheck(_this.get$widget(), "$isStatefulWidget"));
      try {
        _this._debugAllowIgnoredCallsToMarkNeedsBuild = true;
        debugCheckForReturnedFuture = _this._framework$_state.didUpdateWidget$1(oldWidget);
      } finally {
        _this._debugAllowIgnoredCallsToMarkNeedsBuild = false;
      }
      _this.rebuild$0();
    },
    activate$0: function() {
      this.super$Element$activate();
      this.markNeedsBuild$0();
    },
    deactivate$0: function() {
      this._framework$_state.deactivate$0();
      this.super$Element$deactivate();
    },
    unmount$0: function() {
      var _this = this;
      _this.super$Element$unmount();
      _this._framework$_state.dispose$0();
      _this._framework$_state._element = null;
      _this.set$_framework$_state(null);
    },
    inheritFromElement$2$aspect: function(ancestor, aspect) {
      return this.super$Element$inheritFromElement(ancestor, aspect);
    },
    didChangeDependencies$0: function() {
      this.super$Element$didChangeDependencies();
      this._framework$_state.didChangeDependencies$0();
    },
    set$_framework$_state: function(_state) {
      this._framework$_state = H.assertSubtype(_state, "$isState", [N.StatefulWidget], "$asState");
    }
  };
  N.ProxyElement.prototype = {
    get$widget: function() {
      return H.interceptedTypeCheck(N.Element.prototype.get$widget.call(this), "$isProxyWidget");
    },
    build$0: function() {
      return this.get$widget().child;
    },
    update$1: function(_, newWidget) {
      var oldWidget, _this = this;
      H.interceptedTypeCheck(newWidget, "$isProxyWidget");
      oldWidget = _this.get$widget();
      _this.super$Element$update(0, newWidget);
      _this.updated$1(oldWidget);
      _this._dirty = true;
      _this.rebuild$0();
    },
    updated$1: function(oldWidget) {
      this.notifyClients$1(oldWidget);
    }
  };
  N.ParentDataElement.prototype = {
    get$widget: function() {
      return H.assertSubtype(N.ProxyElement.prototype.get$widget.call(this), "$isParentDataWidget", this.$ti, "$asParentDataWidget");
    },
    mount$2: function($parent, newSlot) {
      this.super$ComponentElement$mount($parent, newSlot);
    },
    _applyParentData$1: function(widget) {
      this.visitChildren$1(new N.ParentDataElement__applyParentData_applyParentDataToChild(H.assertSubtype(widget, "$isParentDataWidget", this.$ti, "$asParentDataWidget")));
    },
    notifyClients$1: function(oldWidget) {
      var t1 = this.$ti;
      H.assertSubtype(oldWidget, "$isParentDataWidget", t1, "$asParentDataWidget");
      this._applyParentData$1(H.assertSubtype(N.ProxyElement.prototype.get$widget.call(this), "$isParentDataWidget", t1, "$asParentDataWidget"));
    }
  };
  N.ParentDataElement__applyParentData_applyParentDataToChild.prototype = {
    call$1: function(child) {
      H.interceptedTypeCheck(child, "$isElement");
      if (child instanceof N.RenderObjectElement)
        H.assertSubtype(this.widget, "$isParentDataWidget", [N.RenderObjectWidget], "$asParentDataWidget").applyParentData$1(child.get$renderObject());
      else
        child.visitChildren$1(this);
    },
    $signature: 10
  };
  N.InheritedElement.prototype = {
    get$widget: function() {
      return H.interceptedTypeCheck(N.ProxyElement.prototype.get$widget.call(this), "$isInheritedWidget");
    },
    _updateInheritance$0: function() {
      var t2, _this = this,
        t1 = _this._framework$_parent,
        incomingWidgets = t1 == null ? null : t1._inheritedWidgets;
      t1 = P.Type;
      t2 = N.InheritedElement;
      if (incomingWidgets != null)
        _this.set$_inheritedWidgets(P.HashMap_HashMap$from(incomingWidgets, t1, t2));
      else
        _this.set$_inheritedWidgets(P.HashMap_HashMap(t1, t2));
      _this._inheritedWidgets.$indexSet(0, J.get$runtimeType$(H.interceptedTypeCheck(N.ProxyElement.prototype.get$widget.call(_this), "$isInheritedWidget")), _this);
    },
    updated$1: function(oldWidget) {
      H.interceptedTypeCheck(oldWidget, "$isInheritedWidget");
      if (H.interceptedTypeCheck(N.ProxyElement.prototype.get$widget.call(this), "$isInheritedWidget").updateShouldNotify$1(oldWidget))
        this.super$ProxyElement$updated(oldWidget);
    },
    notifyClients$1: function(oldWidget) {
      var t1;
      H.interceptedTypeCheck(oldWidget, "$isInheritedWidget");
      for (t1 = this._dependents, t1 = new P._HashMapKeyIterable(t1, [H.getTypeArgumentByIndex(t1, 0)]), t1 = t1.get$iterator(t1); t1.moveNext$0();)
        t1._collection$_current.didChangeDependencies$0();
    }
  };
  N.RenderObjectElement.prototype = {
    get$widget: function() {
      return H.interceptedTypeCheck(N.Element.prototype.get$widget.call(this), "$isRenderObjectWidget");
    },
    get$renderObject: function() {
      return this._renderObject;
    },
    _findAncestorRenderObjectElement$0: function() {
      var ancestor = this._framework$_parent;
      while (true) {
        if (!(ancestor != null && !ancestor.$isRenderObjectElement))
          break;
        ancestor = ancestor._framework$_parent;
      }
      return H.interceptedTypeCheck(ancestor, "$isRenderObjectElement");
    },
    _findAncestorParentDataElement$0: function() {
      var ancestor = this._framework$_parent;
      while (true) {
        if (!(ancestor != null && !ancestor.$isRenderObjectElement))
          break;
        if (!!J.getInterceptor$(ancestor).$isParentDataElement)
          return ancestor;
        ancestor = ancestor._framework$_parent;
      }
      return;
    },
    mount$2: function($parent, newSlot) {
      var _this = this;
      _this.super$Element$mount($parent, newSlot);
      _this._renderObject = _this.get$widget().createRenderObject$1(_this);
      _this.attachRenderObject$1(newSlot);
      _this._dirty = false;
    },
    update$1: function(_, newWidget) {
      var _this = this;
      _this.super$Element$update(0, H.interceptedTypeCheck(newWidget, "$isRenderObjectWidget"));
      _this.get$widget().updateRenderObject$2(_this, _this.get$renderObject());
      _this._dirty = false;
    },
    performRebuild$0: function() {
      var _this = this;
      _this.get$widget().updateRenderObject$2(_this, _this.get$renderObject());
      _this._dirty = false;
    },
    updateChildren$3$forgottenChildren: function(oldChildren, newWidgets, forgottenChildren) {
      var replaceWithNullIfForgotten, t2, t3, newChildrenBottom, oldChildrenBottom, newChildren, t4, previousChild, newChildrenTop, oldChildrenTop, oldChild, newWidget, newChild, oldChildrenBottom0, haveOldChildren, oldKeyedChildren, key, _this = this, _null = null,
        t1 = N.Element;
      H.assertSubtype(oldChildren, "$isList", [t1], "$asList");
      H.assertSubtype(newWidgets, "$isList", [N.Widget], "$asList");
      H.assertSubtype(forgottenChildren, "$isSet", [t1], "$asSet");
      replaceWithNullIfForgotten = new N.RenderObjectElement_updateChildren_replaceWithNullIfForgotten(forgottenChildren);
      t2 = J.getInterceptor$asx(newWidgets);
      t3 = t2.get$length(newWidgets);
      if (typeof t3 !== "number")
        return t3.$sub();
      newChildrenBottom = t3 - 1;
      t3 = oldChildren.length;
      oldChildrenBottom = t3 - 1;
      if (t3 === t2.get$length(newWidgets))
        newChildren = oldChildren;
      else {
        t4 = t2.get$length(newWidgets);
        if (typeof t4 !== "number")
          return H.iae(t4);
        t4 = new Array(t4);
        t4.fixed$length = Array;
        newChildren = H.setRuntimeTypeInfo(t4, [t1]);
      }
      previousChild = _null;
      newChildrenTop = 0;
      oldChildrenTop = 0;
      while (true) {
        if (!(oldChildrenTop <= oldChildrenBottom && newChildrenTop <= newChildrenBottom))
          break;
        if (oldChildrenTop >= t3)
          return H.ioore(oldChildren, oldChildrenTop);
        oldChild = replaceWithNullIfForgotten.call$1(oldChildren[oldChildrenTop]);
        newWidget = t2.$index(newWidgets, newChildrenTop);
        if (oldChild != null) {
          t4 = oldChild.get$widget();
          t4 = !(J.get$runtimeType$(t4).$eq(0, J.get$runtimeType$(newWidget)) && J.$eq$(t4.key, newWidget.key));
        } else
          t4 = true;
        if (t4)
          break;
        newChild = _this.updateChild$3(oldChild, newWidget, previousChild);
        C.JSArray_methods.$indexSet(newChildren, newChildrenTop, newChild);
        ++newChildrenTop;
        ++oldChildrenTop;
        previousChild = newChild;
      }
      oldChildrenBottom0 = oldChildrenBottom;
      while (true) {
        haveOldChildren = oldChildrenTop <= oldChildrenBottom0;
        if (!(haveOldChildren && newChildrenTop <= newChildrenBottom))
          break;
        if (oldChildrenBottom0 < 0)
          return H.ioore(oldChildren, oldChildrenBottom0);
        oldChild = replaceWithNullIfForgotten.call$1(oldChildren[oldChildrenBottom0]);
        newWidget = t2.$index(newWidgets, newChildrenBottom);
        if (oldChild != null) {
          t4 = oldChild.get$widget();
          t4 = !(J.get$runtimeType$(t4).$eq(0, J.get$runtimeType$(newWidget)) && J.$eq$(t4.key, newWidget.key));
        } else
          t4 = true;
        if (t4)
          break;
        --oldChildrenBottom0;
        --newChildrenBottom;
      }
      if (haveOldChildren) {
        oldKeyedChildren = P.LinkedHashMap_LinkedHashMap$_empty(D.Key, t1);
        for (; oldChildrenTop <= oldChildrenBottom0;) {
          oldChild = replaceWithNullIfForgotten.call$1(oldChildren[oldChildrenTop]);
          if (oldChild != null)
            if (oldChild.get$widget().key != null)
              oldKeyedChildren.$indexSet(0, oldChild.get$widget().key, oldChild);
            else {
              oldChild._framework$_parent = null;
              oldChild.detachRenderObject$0();
              t1 = _this._owner._inactiveElements;
              if (oldChild._active) {
                oldChild.deactivate$0();
                oldChild.visitChildren$1(N.framework__InactiveElements__deactivateRecursively$closure());
              }
              t1._elements.add$1(0, oldChild);
            }
          ++oldChildrenTop;
        }
        haveOldChildren = true;
      } else
        oldKeyedChildren = _null;
      for (; newChildrenTop <= newChildrenBottom; previousChild = newChild) {
        newWidget = t2.$index(newWidgets, newChildrenTop);
        if (haveOldChildren) {
          key = newWidget.key;
          if (key != null) {
            oldChild = oldKeyedChildren.$index(0, key);
            if (oldChild != null) {
              t1 = oldChild.get$widget();
              if (J.get$runtimeType$(t1).$eq(0, J.get$runtimeType$(newWidget)) && J.$eq$(t1.key, key))
                oldKeyedChildren.remove$1(0, key);
              else
                oldChild = _null;
            }
          } else
            oldChild = _null;
        } else
          oldChild = _null;
        newChild = _this.updateChild$3(oldChild, newWidget, previousChild);
        C.JSArray_methods.$indexSet(newChildren, newChildrenTop, newChild);
        ++newChildrenTop;
      }
      t1 = t2.get$length(newWidgets);
      if (typeof t1 !== "number")
        return t1.$sub();
      newChildrenBottom = t1 - 1;
      while (true) {
        if (!(oldChildrenTop <= oldChildrenBottom && newChildrenTop <= newChildrenBottom))
          break;
        if (oldChildrenTop >= t3)
          return H.ioore(oldChildren, oldChildrenTop);
        newChild = _this.updateChild$3(oldChildren[oldChildrenTop], t2.$index(newWidgets, newChildrenTop), previousChild);
        C.JSArray_methods.$indexSet(newChildren, newChildrenTop, newChild);
        ++newChildrenTop;
        ++oldChildrenTop;
        previousChild = newChild;
      }
      if (haveOldChildren && oldKeyedChildren.get$isNotEmpty(oldKeyedChildren))
        for (t1 = oldKeyedChildren.get$values(oldKeyedChildren), t1 = t1.get$iterator(t1); t1.moveNext$0();) {
          t2 = t1.get$current(t1);
          if (!forgottenChildren.contains$1(0, t2)) {
            t2._framework$_parent = null;
            t2.detachRenderObject$0();
            t3 = _this._owner._inactiveElements;
            if (t2._active) {
              t2.deactivate$0();
              t2.visitChildren$1(N.framework__InactiveElements__deactivateRecursively$closure());
            }
            t3._elements.add$1(0, t2);
          }
        }
      return newChildren;
    },
    deactivate$0: function() {
      this.super$Element$deactivate();
    },
    unmount$0: function() {
      this.super$Element$unmount();
      this.get$widget().didUnmountRenderObject$1(this.get$renderObject());
    },
    _updateSlot$1: function(newSlot) {
      var _this = this;
      _this.super$Element$_updateSlot(newSlot);
      _this._ancestorRenderObjectElement.moveChildRenderObject$2(_this.get$renderObject(), _this._slot);
    },
    attachRenderObject$1: function(newSlot) {
      var t1, parentDataElement, _this = this;
      _this._slot = newSlot;
      t1 = _this._ancestorRenderObjectElement = _this._findAncestorRenderObjectElement$0();
      if (t1 != null)
        t1.insertChildRenderObject$2(_this.get$renderObject(), newSlot);
      parentDataElement = _this._findAncestorParentDataElement$0();
      if (parentDataElement != null)
        H.assertSubtype(H.assertSubtype(N.ProxyElement.prototype.get$widget.call(parentDataElement), "$isParentDataWidget", [H.getTypeArgumentByIndex(parentDataElement, 0)], "$asParentDataWidget"), "$isParentDataWidget", [N.RenderObjectWidget], "$asParentDataWidget").applyParentData$1(_this.get$renderObject());
    },
    detachRenderObject$0: function() {
      var _this = this,
        t1 = _this._ancestorRenderObjectElement;
      if (t1 != null) {
        t1.removeChildRenderObject$1(_this.get$renderObject());
        _this._ancestorRenderObjectElement = null;
      }
      _this._slot = null;
    }
  };
  N.RenderObjectElement_updateChildren_replaceWithNullIfForgotten.prototype = {
    call$1: function(child) {
      var t1 = this.forgottenChildren.contains$1(0, child);
      return t1 ? null : child;
    },
    $signature: 145
  };
  N.RootRenderObjectElement.prototype = {
    mount$2: function($parent, newSlot) {
      this.super$RenderObjectElement$mount($parent, newSlot);
    }
  };
  N.LeafRenderObjectElement.prototype = {
    forgetChild$1: function(child) {
    },
    insertChildRenderObject$2: function(child, slot) {
    },
    moveChildRenderObject$2: function(child, slot) {
    },
    removeChildRenderObject$1: function(child) {
    },
    debugDescribeChildren$0: function() {
      H.interceptedTypeCheck(N.Element.prototype.get$widget.call(this), "$isRenderObjectWidget").toString;
      return C.List_empty;
    }
  };
  N.SingleChildRenderObjectElement.prototype = {
    get$widget: function() {
      return H.interceptedTypeCheck(N.RenderObjectElement.prototype.get$widget.call(this), "$isSingleChildRenderObjectWidget");
    },
    visitChildren$1: function(visitor) {
      var t1;
      H.functionTypeCheck(visitor, {func: 1, ret: -1, args: [N.Element]});
      t1 = this._framework$_child;
      if (t1 != null)
        visitor.call$1(t1);
    },
    forgetChild$1: function(child) {
      this._framework$_child = null;
    },
    mount$2: function($parent, newSlot) {
      var _this = this;
      _this.super$RenderObjectElement$mount($parent, newSlot);
      _this._framework$_child = _this.updateChild$3(_this._framework$_child, _this.get$widget().child, null);
    },
    update$1: function(_, newWidget) {
      var _this = this;
      _this.super$RenderObjectElement$update(0, H.interceptedTypeCheck(newWidget, "$isSingleChildRenderObjectWidget"));
      _this._framework$_child = _this.updateChild$3(_this._framework$_child, _this.get$widget().child, null);
    },
    insertChildRenderObject$2: function(child, slot) {
      H.assertSubtype(this._renderObject, "$isRenderObjectWithChildMixin", [K.RenderObject], "$asRenderObjectWithChildMixin").set$child(child);
    },
    moveChildRenderObject$2: function(child, slot) {
    },
    removeChildRenderObject$1: function(child) {
      H.assertSubtype(this._renderObject, "$isRenderObjectWithChildMixin", [K.RenderObject], "$asRenderObjectWithChildMixin").set$child(null);
    }
  };
  N.MultiChildRenderObjectElement.prototype = {
    get$widget: function() {
      return H.interceptedTypeCheck(N.RenderObjectElement.prototype.get$widget.call(this), "$isMultiChildRenderObjectWidget");
    },
    get$children: function(_) {
      var t2,
        t1 = this._children;
      t1.toString;
      t2 = H.getTypeArgumentByIndex(t1, 0);
      return new H.WhereIterable(t1, H.functionTypeCheck(new N.MultiChildRenderObjectElement_children_closure(this), {func: 1, ret: P.bool, args: [t2]}), [t2]);
    },
    insertChildRenderObject$2: function(child, slot) {
      var renderObject;
      H.interceptedTypeCheck(slot, "$isElement");
      renderObject = H.assertSubtype(this.get$renderObject(), "$isContainerRenderObjectMixin", [K.RenderObject, [K.ContainerParentDataMixin, K.RenderObject]], "$asContainerRenderObjectMixin");
      renderObject.insert$2$after(0, child, slot == null ? null : slot.get$renderObject());
    },
    moveChildRenderObject$2: function(child, slot) {
      var renderObject = H.assertSubtype(this.get$renderObject(), "$isContainerRenderObjectMixin", [K.RenderObject, [K.ContainerParentDataMixin, K.RenderObject]], "$asContainerRenderObjectMixin");
      renderObject.move$2$after(child, slot == null ? null : slot.get$renderObject());
    },
    removeChildRenderObject$1: function(child) {
      H.assertSubtype(this.get$renderObject(), "$isContainerRenderObjectMixin", [K.RenderObject, [K.ContainerParentDataMixin, K.RenderObject]], "$asContainerRenderObjectMixin").remove$1(0, child);
    },
    visitChildren$1: function(visitor) {
      var t1, t2, t3, _i, child;
      H.functionTypeCheck(visitor, {func: 1, ret: -1, args: [N.Element]});
      for (t1 = this._children, t2 = t1.length, t3 = this._forgottenChildren, _i = 0; _i < t2; ++_i) {
        child = t1[_i];
        if (!t3.contains$1(0, child))
          visitor.call$1(child);
      }
    },
    forgetChild$1: function(child) {
      this._forgottenChildren.add$1(0, child);
    },
    mount$2: function($parent, newSlot) {
      var t1, previousChild, i, newChild, _this = this;
      _this.super$RenderObjectElement$mount($parent, newSlot);
      t1 = J.get$length$asx(_this.get$widget().children);
      if (typeof t1 !== "number")
        return H.iae(t1);
      t1 = new Array(t1);
      t1.fixed$length = Array;
      _this.set$_children(0, H.setRuntimeTypeInfo(t1, [N.Element]));
      for (previousChild = null, i = 0; i < _this._children.length; ++i, previousChild = newChild) {
        newChild = _this.inflateWidget$2(J.$index$asx(_this.get$widget().children, i), previousChild);
        t1 = _this._children;
        (t1 && C.JSArray_methods).$indexSet(t1, i, newChild);
      }
    },
    update$1: function(_, newWidget) {
      var t1, _this = this;
      _this.super$RenderObjectElement$update(0, H.interceptedTypeCheck(newWidget, "$isMultiChildRenderObjectWidget"));
      t1 = _this._forgottenChildren;
      _this.set$_children(0, _this.updateChildren$3$forgottenChildren(_this._children, _this.get$widget().children, t1));
      t1.clear$0(0);
    },
    set$_children: function(_, _children) {
      this._children = H.assertSubtype(_children, "$isList", [N.Element], "$asList");
    }
  };
  N.MultiChildRenderObjectElement_children_closure.prototype = {
    call$1: function(child) {
      return !this.$this._forgottenChildren.contains$1(0, H.interceptedTypeCheck(child, "$isElement"));
    },
    $signature: 14
  };
  D.GestureRecognizerFactory.prototype = {};
  D.GestureRecognizerFactoryWithHandlers.prototype = {};
  D.GestureDetector.prototype = {
    build$1: function(context) {
      var t1, _this = this,
        gestures = P.LinkedHashMap_LinkedHashMap$_empty(P.Type, [D.GestureRecognizerFactory, S.GestureRecognizer]);
      if (_this.onTapDown == null)
        t1 = _this.onTap != null || _this.onTapCancel != null;
      else
        t1 = true;
      if (t1)
        gestures.$indexSet(0, C.Type_TapGestureRecognizer_62h, new D.GestureRecognizerFactoryWithHandlers(new D.GestureDetector_build_closure(_this), new D.GestureDetector_build_closure0(_this), [N.TapGestureRecognizer]));
      if (_this.onDoubleTap != null)
        gestures.$indexSet(0, C.Type_DoubleTapGestureRecognizer_oyU, new D.GestureRecognizerFactoryWithHandlers(new D.GestureDetector_build_closure1(_this), new D.GestureDetector_build_closure2(_this), [F.DoubleTapGestureRecognizer]));
      if (_this.onLongPress == null)
        t1 = false;
      else
        t1 = true;
      if (t1)
        gestures.$indexSet(0, C.Type_LongPressGestureRecognizer_46y, new D.GestureRecognizerFactoryWithHandlers(new D.GestureDetector_build_closure3(_this), new D.GestureDetector_build_closure4(_this), [T.LongPressGestureRecognizer]));
      t1 = _this.onVerticalDragUpdate != null || _this.onVerticalDragEnd != null || false;
      if (t1)
        gestures.$indexSet(0, C.Type_mLh, new D.GestureRecognizerFactoryWithHandlers(new D.GestureDetector_build_closure5(_this), new D.GestureDetector_build_closure6(_this), [O.VerticalDragGestureRecognizer]));
      if (_this.onHorizontalDragDown == null)
        t1 = _this.onHorizontalDragUpdate != null || _this.onHorizontalDragEnd != null || _this.onHorizontalDragCancel != null;
      else
        t1 = true;
      if (t1)
        gestures.$indexSet(0, C.Type_Vq1, new D.GestureRecognizerFactoryWithHandlers(new D.GestureDetector_build_closure7(_this), new D.GestureDetector_build_closure8(_this), [O.HorizontalDragGestureRecognizer]));
      if (_this.onPanDown == null)
        t1 = _this.onPanUpdate != null || _this.onPanEnd != null || false;
      else
        t1 = true;
      if (t1)
        gestures.$indexSet(0, C.Type_PanGestureRecognizer_bbH, new D.GestureRecognizerFactoryWithHandlers(new D.GestureDetector_build_closure9(_this), new D.GestureDetector_build_closure10(_this), [O.PanGestureRecognizer]));
      return D.RawGestureDetector$(_this.behavior, _this.child, _this.excludeFromSemantics, gestures, null);
    }
  };
  D.GestureDetector_build_closure.prototype = {
    call$0: function() {
      var t1 = P.int;
      return new N.TapGestureRecognizer(C.Duration_100000, 18, C.GestureRecognizerState_0, P.LinkedHashMap_LinkedHashMap$_empty(t1, D.GestureArenaEntry), P.HashSet_HashSet(t1), this.$this, null);
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 147
  };
  D.GestureDetector_build_closure0.prototype = {
    call$1: function(instance) {
      var t1;
      H.interceptedTypeCheck(instance, "$isTapGestureRecognizer");
      t1 = this.$this;
      instance.set$onTapDown(t1.onTapDown);
      instance.set$onTapUp(null);
      instance.set$onTap(t1.onTap);
      instance.set$onTapCancel(t1.onTapCancel);
    },
    $signature: 148
  };
  D.GestureDetector_build_closure1.prototype = {
    call$0: function() {
      return new F.DoubleTapGestureRecognizer(P.LinkedHashMap_LinkedHashMap$_empty(P.int, F._TapTracker), this.$this, null);
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 149
  };
  D.GestureDetector_build_closure2.prototype = {
    call$1: function(instance) {
      H.interceptedTypeCheck(instance, "$isDoubleTapGestureRecognizer").set$onDoubleTap(this.$this.onDoubleTap);
    },
    $signature: 150
  };
  D.GestureDetector_build_closure3.prototype = {
    call$0: function() {
      var t1 = P.int;
      return new T.LongPressGestureRecognizer(C.Duration_500000, null, C.GestureRecognizerState_0, P.LinkedHashMap_LinkedHashMap$_empty(t1, D.GestureArenaEntry), P.HashSet_HashSet(t1), this.$this, null);
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 151
  };
  D.GestureDetector_build_closure4.prototype = {
    call$1: function(instance) {
      var _null = null;
      H.interceptedTypeCheck(instance, "$isLongPressGestureRecognizer");
      instance.set$onLongPress(this.$this.onLongPress);
      instance.set$onLongPressStart(_null);
      instance.set$onLongPressMoveUpdate(_null);
      instance.set$onLongPressEnd(_null);
      instance.set$onLongPressUp(_null);
    },
    $signature: 152
  };
  D.GestureDetector_build_closure5.prototype = {
    call$0: function() {
      var t1 = P.int;
      return new O.VerticalDragGestureRecognizer(C.DragStartBehavior_1, C._DragState_0, P.LinkedHashMap_LinkedHashMap$_empty(t1, R.VelocityTracker), P.LinkedHashMap_LinkedHashMap$_empty(t1, D.GestureArenaEntry), P.HashSet_HashSet(t1), this.$this, null);
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 56
  };
  D.GestureDetector_build_closure6.prototype = {
    call$1: function(instance) {
      var t1;
      H.interceptedTypeCheck(instance, "$isVerticalDragGestureRecognizer");
      instance.set$onDown(null);
      instance.set$onStart(0, null);
      t1 = this.$this;
      instance.set$onUpdate(t1.onVerticalDragUpdate);
      instance.set$onEnd(0, t1.onVerticalDragEnd);
      instance.set$onCancel(0, null);
      instance.dragStartBehavior = t1.dragStartBehavior;
    },
    $signature: 55
  };
  D.GestureDetector_build_closure7.prototype = {
    call$0: function() {
      var t1 = P.int;
      return new O.HorizontalDragGestureRecognizer(C.DragStartBehavior_1, C._DragState_0, P.LinkedHashMap_LinkedHashMap$_empty(t1, R.VelocityTracker), P.LinkedHashMap_LinkedHashMap$_empty(t1, D.GestureArenaEntry), P.HashSet_HashSet(t1), this.$this, null);
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 73
  };
  D.GestureDetector_build_closure8.prototype = {
    call$1: function(instance) {
      var t1;
      H.interceptedTypeCheck(instance, "$isHorizontalDragGestureRecognizer");
      t1 = this.$this;
      instance.set$onDown(t1.onHorizontalDragDown);
      instance.set$onStart(0, null);
      instance.set$onUpdate(t1.onHorizontalDragUpdate);
      instance.set$onEnd(0, t1.onHorizontalDragEnd);
      instance.set$onCancel(0, t1.onHorizontalDragCancel);
      instance.dragStartBehavior = t1.dragStartBehavior;
    },
    $signature: 72
  };
  D.GestureDetector_build_closure9.prototype = {
    call$0: function() {
      var t1 = P.int;
      return new O.PanGestureRecognizer(C.DragStartBehavior_1, C._DragState_0, P.LinkedHashMap_LinkedHashMap$_empty(t1, R.VelocityTracker), P.LinkedHashMap_LinkedHashMap$_empty(t1, D.GestureArenaEntry), P.HashSet_HashSet(t1), this.$this, null);
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 185
  };
  D.GestureDetector_build_closure10.prototype = {
    call$1: function(instance) {
      var t1;
      H.interceptedTypeCheck(instance, "$isPanGestureRecognizer");
      t1 = this.$this;
      instance.set$onDown(t1.onPanDown);
      instance.set$onStart(0, null);
      instance.set$onUpdate(t1.onPanUpdate);
      instance.set$onEnd(0, t1.onPanEnd);
      instance.set$onCancel(0, null);
      instance.dragStartBehavior = t1.dragStartBehavior;
    },
    $signature: 158
  };
  D.RawGestureDetector.prototype = {
    createState$0: function() {
      return new D.RawGestureDetectorState(C.Map_empty2, C._StateLifecycle_0);
    },
    get$child: function() {
      return this.child;
    },
    get$excludeFromSemantics: function() {
      return this.excludeFromSemantics;
    }
  };
  D.RawGestureDetectorState.prototype = {
    initState$0: function() {
      this.super$State$initState();
      this._syncAll$1(this._widget.gestures);
    },
    didUpdateWidget$1: function(oldWidget) {
      this.super$State$didUpdateWidget(H.interceptedTypeCheck(oldWidget, "$isRawGestureDetector"));
      this._syncAll$1(this._widget.gestures);
    },
    replaceGestureRecognizers$1: function(gestures) {
      var semanticsGestureHandler, t1, _this = this;
      _this._syncAll$1(H.assertSubtype(gestures, "$isMap", [P.Type, [D.GestureRecognizerFactory, S.GestureRecognizer]], "$asMap"));
      if (!_this._widget.excludeFromSemantics) {
        semanticsGestureHandler = H.interceptedTypeCheck(_this._element.get$renderObject(), "$isRenderSemanticsGestureHandler");
        t1 = _this._element;
        t1.toString;
        t1.visitChildren$1(H.functionTypeCheck(new D.RawGestureDetectorState_replaceGestureRecognizers_closure(semanticsGestureHandler), {func: 1, ret: -1, args: [N.Element]}));
      }
    },
    dispose$0: function() {
      for (var t1 = this._gesture_detector$_recognizers, t1 = t1.get$values(t1), t1 = t1.get$iterator(t1); t1.moveNext$0();)
        t1.get$current(t1).dispose$0();
      this.set$_gesture_detector$_recognizers(null);
      this.super$State$dispose();
    },
    _syncAll$1: function(gestures) {
      var oldRecognizers, t2, t3, t4, _this = this,
        t1 = P.Type;
      H.assertSubtype(gestures, "$isMap", [t1, [D.GestureRecognizerFactory, S.GestureRecognizer]], "$asMap");
      oldRecognizers = _this._gesture_detector$_recognizers;
      _this.set$_gesture_detector$_recognizers(P.LinkedHashMap_LinkedHashMap$_empty(t1, S.GestureRecognizer));
      for (t1 = gestures.get$keys(gestures), t1 = t1.get$iterator(t1); t1.moveNext$0();) {
        t2 = t1.get$current(t1);
        t3 = _this._gesture_detector$_recognizers;
        t4 = oldRecognizers.$index(0, t2);
        t3.$indexSet(0, t2, t4 == null ? gestures.$index(0, t2)._constructor.call$0() : t4);
        t3 = gestures.$index(0, t2);
        t2 = _this._gesture_detector$_recognizers.$index(0, t2);
        t3.toString;
        H.assertSubtypeOfRuntimeType(t2, H.getTypeArgumentByIndex(t3, 0));
        t3._initializer.call$1(t2);
      }
      for (t1 = oldRecognizers.get$keys(oldRecognizers), t1 = t1.get$iterator(t1); t1.moveNext$0();) {
        t2 = t1.get$current(t1);
        if (!_this._gesture_detector$_recognizers.containsKey$1(0, t2))
          oldRecognizers.$index(0, t2).dispose$0();
      }
    },
    _gesture_detector$_handlePointerDown$1: function($event) {
      var t1, t2;
      for (t1 = this._gesture_detector$_recognizers, t1 = t1.get$values(t1), t1 = t1.get$iterator(t1); t1.moveNext$0();) {
        t2 = t1.get$current(t1);
        t2.addAllowedPointer$1($event);
      }
    },
    _handleSemanticsTap$0: function() {
      var recognizer = H.interceptedTypeCheck(this._gesture_detector$_recognizers.$index(0, C.Type_TapGestureRecognizer_62h), "$isTapGestureRecognizer"),
        t1 = recognizer.onTapDown;
      if (t1 != null)
        t1.call$1(new N.TapDownDetails(C.Offset_0_0));
      t1 = recognizer.onTap;
      if (t1 != null)
        t1.call$0();
    },
    _handleSemanticsLongPress$0: function() {
      var t1 = H.interceptedTypeCheck(this._gesture_detector$_recognizers.$index(0, C.Type_LongPressGestureRecognizer_46y), "$isLongPressGestureRecognizer").onLongPress;
      if (t1 != null)
        t1.call$0();
    },
    _handleSemanticsHorizontalDragUpdate$1: function(updateDetails) {
      var recognizer, t1;
      H.interceptedTypeCheck(updateDetails, "$isDragUpdateDetails");
      recognizer = H.interceptedTypeCheck(this._gesture_detector$_recognizers.$index(0, C.Type_Vq1), "$isHorizontalDragGestureRecognizer");
      if (recognizer != null) {
        t1 = recognizer.onDown;
        if (t1 != null)
          t1.call$1(new O.DragDownDetails(C.Offset_0_0));
        if (recognizer.onStart != null)
          recognizer.onStart.call$1(new O.DragStartDetails(null, C.Offset_0_0));
        t1 = recognizer.onUpdate;
        if (t1 != null)
          t1.call$1(updateDetails);
        if (recognizer.onEnd != null)
          recognizer.onEnd.call$1(new O.DragEndDetails(C.Velocity_Offset_0_0, 0));
        return;
      }
      recognizer = H.interceptedTypeCheck(this._gesture_detector$_recognizers.$index(0, C.Type_PanGestureRecognizer_bbH), "$isPanGestureRecognizer");
      if (recognizer != null) {
        t1 = recognizer.onDown;
        if (t1 != null)
          t1.call$1(new O.DragDownDetails(C.Offset_0_0));
        if (recognizer.onStart != null)
          recognizer.onStart.call$1(new O.DragStartDetails(null, C.Offset_0_0));
        t1 = recognizer.onUpdate;
        if (t1 != null)
          t1.call$1(updateDetails);
        if (recognizer.onEnd != null)
          recognizer.onEnd.call$1(new O.DragEndDetails(C.Velocity_Offset_0_0, null));
        return;
      }
    },
    _handleSemanticsVerticalDragUpdate$1: function(updateDetails) {
      var recognizer, t1;
      H.interceptedTypeCheck(updateDetails, "$isDragUpdateDetails");
      recognizer = H.interceptedTypeCheck(this._gesture_detector$_recognizers.$index(0, C.Type_mLh), "$isVerticalDragGestureRecognizer");
      if (recognizer != null) {
        t1 = recognizer.onDown;
        if (t1 != null)
          t1.call$1(new O.DragDownDetails(C.Offset_0_0));
        if (recognizer.onStart != null)
          recognizer.onStart.call$1(new O.DragStartDetails(null, C.Offset_0_0));
        t1 = recognizer.onUpdate;
        if (t1 != null)
          t1.call$1(updateDetails);
        if (recognizer.onEnd != null)
          recognizer.onEnd.call$1(new O.DragEndDetails(C.Velocity_Offset_0_0, 0));
        return;
      }
      recognizer = H.interceptedTypeCheck(this._gesture_detector$_recognizers.$index(0, C.Type_PanGestureRecognizer_bbH), "$isPanGestureRecognizer");
      if (recognizer != null) {
        t1 = recognizer.onDown;
        if (t1 != null)
          t1.call$1(new O.DragDownDetails(C.Offset_0_0));
        if (recognizer.onStart != null)
          recognizer.onStart.call$1(new O.DragStartDetails(null, C.Offset_0_0));
        t1 = recognizer.onUpdate;
        if (t1 != null)
          t1.call$1(updateDetails);
        if (recognizer.onEnd != null)
          recognizer.onEnd.call$1(new O.DragEndDetails(C.Velocity_Offset_0_0, null));
        return;
      }
    },
    build$1: function(context) {
      var result, _null = null,
        t1 = this._widget,
        t2 = t1.behavior;
      if (t2 == null)
        t2 = t1.child == null ? C.HitTestBehavior_2 : C.HitTestBehavior_0;
      result = T.Listener$(t2, t1.child, _null, this.get$_gesture_detector$_handlePointerDown(), _null, _null);
      return !t1.excludeFromSemantics ? new D._GestureSemantics(this, result, _null) : result;
    },
    set$_gesture_detector$_recognizers: function(_recognizers) {
      this._gesture_detector$_recognizers = H.assertSubtype(_recognizers, "$isMap", [P.Type, S.GestureRecognizer], "$asMap");
    },
    $asState: function() {
      return [D.RawGestureDetector];
    }
  };
  D.RawGestureDetectorState_replaceGestureRecognizers_closure.prototype = {
    call$1: function(element) {
      H.interceptedTypeCheck(H.interceptedTypeCheck(element, "$isElement").get$widget(), "$is_GestureSemantics")._updateHandlers$1(this.semanticsGestureHandler);
    },
    $signature: 9
  };
  D._GestureSemantics.prototype = {
    createRenderObject$1: function(context) {
      var _this = this,
        t1 = new E.RenderSemanticsGestureHandler(_this.get$_onTapHandler(), _this.get$_onLongPressHandler(), _this.get$_onHorizontalDragUpdateHandler(), _this.get$_onVerticalDragUpdateHandler(), null);
      t1.get$isRepaintBoundary();
      t1.get$alwaysNeedsCompositing();
      t1._needsCompositing = false;
      t1.set$child(null);
      return t1;
    },
    _updateHandlers$1: function(renderObject) {
      var _this = this;
      renderObject.set$onTap(_this.get$_onTapHandler());
      renderObject.set$onLongPress(_this.get$_onLongPressHandler());
      renderObject.set$onHorizontalDragUpdate(_this.get$_onHorizontalDragUpdateHandler());
      renderObject.set$onVerticalDragUpdate(_this.get$_onVerticalDragUpdateHandler());
    },
    updateRenderObject$2: function(context, renderObject) {
      this._updateHandlers$1(H.interceptedTypeCheck(renderObject, "$isRenderSemanticsGestureHandler"));
    },
    get$_onTapHandler: function() {
      var t1 = this.owner;
      return t1._gesture_detector$_recognizers.containsKey$1(0, C.Type_TapGestureRecognizer_62h) ? t1.get$_handleSemanticsTap() : null;
    },
    get$_onLongPressHandler: function() {
      var t1 = this.owner;
      return t1._gesture_detector$_recognizers.containsKey$1(0, C.Type_LongPressGestureRecognizer_46y) ? t1.get$_handleSemanticsLongPress() : null;
    },
    get$_onHorizontalDragUpdateHandler: function() {
      var t1 = this.owner;
      return t1._gesture_detector$_recognizers.containsKey$1(0, C.Type_Vq1) || t1._gesture_detector$_recognizers.containsKey$1(0, C.Type_PanGestureRecognizer_bbH) ? t1.get$_handleSemanticsHorizontalDragUpdate() : null;
    },
    get$_onVerticalDragUpdateHandler: function() {
      var t1 = this.owner;
      return t1._gesture_detector$_recognizers.containsKey$1(0, C.Type_mLh) || t1._gesture_detector$_recognizers.containsKey$1(0, C.Type_PanGestureRecognizer_bbH) ? t1.get$_handleSemanticsVerticalDragUpdate() : null;
    }
  };
  T.HeroFlightDirection.prototype = {
    toString$0: function(_) {
      return this._heroes$_name;
    }
  };
  T.Hero.prototype = {
    createState$0: function() {
      return new T._HeroState(new N.LabeledGlobalKey(null, [[N.State, N.StatefulWidget]]), C._StateLifecycle_0);
    },
    get$child: function() {
      return this.child;
    }
  };
  T.Hero__allHeroesFor_visitor.prototype = {
    call$1: function(element) {
      var heroWidget, t1;
      H.interceptedTypeCheck(element, "$isElement");
      if (element.get$widget() instanceof T.Hero) {
        H.interceptedTypeCheck(element, "$isStatefulElement");
        heroWidget = H.interceptedTypeCheck(element.get$widget(), "$isHero");
        if (this.isUserGestureTransition) {
          heroWidget.toString;
          t1 = false;
        } else
          t1 = true;
        if (t1)
          this.result.$indexSet(0, heroWidget.tag, H.interceptedTypeCheck(element._framework$_state, "$is_HeroState"));
      }
      element.visitChildren$1(this);
    },
    $signature: 10
  };
  T._HeroState.prototype = {
    startFlight$0: function() {
      this.setState$1(new T._HeroState_startFlight_closure(this, H.interceptedTypeCheck(this._element.get$renderObject(), "$isRenderBox")));
    },
    endFlight$0: function() {
      if (this._element != null)
        this.setState$1(new T._HeroState_endFlight_closure(this));
    },
    build$1: function(context) {
      var t2, _this = this,
        t1 = _this._placeholderSize;
      if (t1 != null) {
        _this._widget.toString;
        t2 = t1._dx;
        t1 = t1._dy;
        return new T.SizedBox(t2, t1, null, null);
      }
      return new T.KeyedSubtree(_this._widget.child, _this._heroes$_key);
    },
    $asState: function() {
      return [T.Hero];
    }
  };
  T._HeroState_startFlight_closure.prototype = {
    call$0: function() {
      this.$this._placeholderSize = this.box._size;
    },
    $signature: 0
  };
  T._HeroState_endFlight_closure.prototype = {
    call$0: function() {
      this.$this._placeholderSize = null;
    },
    $signature: 0
  };
  T._HeroFlightManifest.prototype = {
    get$animation: function(_) {
      return S.CurvedAnimation$(C.Cubic_ifx, this.type === C.HeroFlightDirection_0 ? this.toRoute._animationProxy : this.fromRoute._animationProxy, null);
    },
    toString$0: function(_) {
      var _this = this,
        t1 = _this.fromHero;
      return "_HeroFlightManifest(" + _this.type.toString$0(0) + " tag: " + t1._widget.tag.toString$0(0) + " from route: " + _this.fromRoute.settings.toString$0(0) + " to route: " + _this.toRoute.settings.toString$0(0) + " with hero: " + H.S(t1) + " to " + H.S(_this.toHero) + ")";
    }
  };
  T._HeroFlight.prototype = {
    _doCreateRectTween$2: function(begin, end) {
      var createRectTween,
        t1 = this.manifest;
      t1.toHero._widget.toString;
      createRectTween = t1.createRectTween;
      return createRectTween.call$2(begin, end);
    },
    _buildOverlay$1: function(context) {
      var t1, t2, t3, t4, t5, _this = this;
      H.interceptedTypeCheck(context, "$isBuildContext");
      t1 = _this.shuttle;
      if (t1 == null) {
        t1 = _this.manifest;
        t2 = t1.get$animation(t1);
        t3 = _this.manifest;
        t4 = t3.type;
        t5 = t3.fromHero._element;
        t3 = t3.toHero._element;
        t3 = _this.shuttle = H.interceptedTypeCheck(t1.shuttleBuilder.call$5(context, t2, t4, t5, t3), "$isWidget");
        t1 = t3;
      }
      return K.AnimatedBuilder$(_this._proxyAnimation, new T._HeroFlight__buildOverlay_closure(_this), t1);
    },
    _handleAnimationUpdate$1: function($status) {
      var _this = this;
      H.interceptedTypeCheck($status, "$isAnimationStatus");
      if ($status === C.AnimationStatus_3 || $status === C.AnimationStatus_0) {
        _this._proxyAnimation.set$parent(0, null);
        _this.overlayEntry.remove$0(0);
        _this.overlayEntry = null;
        _this.manifest.fromHero.endFlight$0();
        _this.manifest.toHero.endFlight$0();
        _this.onFlightEnded.call$1(_this);
      }
    },
    toString$0: function(_) {
      var t1 = this.manifest,
        t2 = t1.fromRoute,
        t3 = t1.toRoute;
      return "HeroFlight(for: " + t1.fromHero._widget.tag.toString$0(0) + ", from: " + t2.settings.toString$0(0) + ", to: " + t3.settings.toString$0(0) + " " + H.S(this._proxyAnimation._animations$_parent) + ")";
    },
    set$heroRectTween: function(heroRectTween) {
      this.heroRectTween = H.assertSubtype(heroRectTween, "$isTween", [Q.Rect], "$asTween");
    },
    set$_heroOpacity: function(_heroOpacity) {
      this._heroOpacity = H.assertSubtype(_heroOpacity, "$isAnimation", [P.double], "$asAnimation");
    }
  };
  T._HeroFlight__buildOverlay_closure.prototype = {
    call$2: function(context, child) {
      var t1, t2, toHeroBox, t3, t4, t5, toHeroOrigin, t6, t7, t8, rect, t9, _null = null;
      H.interceptedTypeCheck(context, "$isBuildContext");
      H.interceptedTypeCheck(child, "$isWidget");
      t1 = this.$this;
      t2 = t1.manifest.toHero._element;
      toHeroBox = H.interceptedTypeCheck(t2 == null ? _null : t2.get$renderObject(), "$isRenderBox");
      if (t1._aborted || toHeroBox == null || toHeroBox._node$_owner == null) {
        t2 = t1._heroOpacity;
        if (t2.get$status(t2) === C.AnimationStatus_3) {
          t2 = t1._proxyAnimation;
          t3 = $.$get$_HeroFlight__reverseTween();
          t4 = t2.get$value(t2);
          t3.toString;
          t5 = P.double;
          t1.set$_heroOpacity(t2.drive$1$1(new R._ChainedEvaluation(H.assertSubtype(new R.CurveTween(new Z.Interval(t4, 1, C.C__Linear)), "$isAnimatable", [t5], "$asAnimatable"), t3, [H.getRuntimeTypeArgument(t3, "Animatable", 0)]), t5));
        }
      } else if (toHeroBox._size != null) {
        t2 = $.GlobalKey__registry.$index(0, t1.manifest.toRoute._subtreeKey);
        toHeroOrigin = T.MatrixUtils_transformPoint(toHeroBox.getTransformTo$1(0, H.interceptedTypeCheck(t2 == null ? _null : t2.get$renderObject(), "$isRenderBox")), C.Offset_0_0);
        t2 = t1.heroRectTween.end;
        if (!toHeroOrigin.$eq(0, new Q.Offset(t2.left, t2.top))) {
          t2 = t1.heroRectTween;
          t3 = t2.end;
          t4 = t3.right;
          t5 = t3.left;
          if (typeof t4 !== "number")
            return t4.$sub();
          if (typeof t5 !== "number")
            return H.iae(t5);
          t6 = t3.bottom;
          t3 = t3.top;
          if (typeof t6 !== "number")
            return t6.$sub();
          if (typeof t3 !== "number")
            return H.iae(t3);
          t7 = toHeroOrigin._dx;
          t8 = toHeroOrigin._dy;
          if (typeof t7 !== "number")
            return t7.$add();
          if (typeof t8 !== "number")
            return t8.$add();
          t1.set$heroRectTween(t1._doCreateRectTween$2(t2.begin, new Q.Rect(t7, t8, t7 + (t4 - t5), t8 + (t6 - t3))));
        }
      }
      t2 = t1.heroRectTween;
      t3 = t1._proxyAnimation;
      t2.toString;
      H.assertSubtype(t3, "$isAnimation", [P.double], "$asAnimation");
      rect = t2.transform$1(0, t3.get$value(t3));
      t3 = t1.manifest.navigatorRect;
      t2 = t3.right;
      t4 = t3.left;
      if (typeof t2 !== "number")
        return t2.$sub();
      if (typeof t4 !== "number")
        return H.iae(t4);
      t5 = t3.bottom;
      t3 = t3.top;
      if (typeof t5 !== "number")
        return t5.$sub();
      if (typeof t3 !== "number")
        return H.iae(t3);
      t6 = rect.left;
      t7 = rect.top;
      t8 = rect.right;
      if (typeof t8 !== "number")
        return H.iae(t8);
      t9 = rect.bottom;
      if (typeof t9 !== "number")
        return H.iae(t9);
      t1 = t1._heroOpacity;
      return T.Positioned$(t5 - t3 - t9, new T.IgnorePointer(true, _null, new T.RepaintBoundary(T.Opacity$(child, t1.get$value(t1)), _null), _null), _null, _null, t6, t2 - t4 - t8, t7, _null);
    },
    "call*": "call$2",
    $requiredArgCount: 2,
    $signature: 159
  };
  T.HeroController.prototype = {
    didPush$2: function(route, previousRoute) {
      this._maybeStartHeroTransition$4(previousRoute, route, C.HeroFlightDirection_0, false);
    },
    didPop$2: function(route, previousRoute) {
      this._maybeStartHeroTransition$4(route, previousRoute, C.HeroFlightDirection_1, false);
    },
    didStartUserGesture$2: function(route, previousRoute) {
      this._maybeStartHeroTransition$4(route, previousRoute, C.HeroFlightDirection_1, true);
    },
    _maybeStartHeroTransition$4: function(fromRoute, toRoute, flightType, isUserGestureTransition) {
      var animation, t1, t2;
      if (toRoute != fromRoute && toRoute instanceof V.PageRoute && fromRoute instanceof V.PageRoute) {
        animation = flightType === C.HeroFlightDirection_0 ? toRoute._animationProxy : fromRoute._animationProxy;
        switch (flightType) {
          case C.HeroFlightDirection_1:
            if (animation.get$value(animation) === 0)
              return;
            break;
          case C.HeroFlightDirection_0:
            if (animation.get$value(animation) === 1)
              return;
            break;
        }
        if (isUserGestureTransition)
          if (flightType === C.HeroFlightDirection_1) {
            toRoute.get$maintainState();
            t1 = true;
          } else
            t1 = false;
        else
          t1 = false;
        if (t1)
          this._startHeroTransition$5(fromRoute, toRoute, animation, flightType, isUserGestureTransition);
        else {
          t1 = toRoute._animationProxy;
          toRoute.set$offstage(t1.get$value(t1) === 0);
          t1 = $.SchedulerBinding__instance;
          t1.toString;
          t2 = H.functionTypeCheck(new T.HeroController__maybeStartHeroTransition_closure(this, fromRoute, toRoute, animation, flightType, isUserGestureTransition), {func: 1, ret: -1, args: [P.Duration]});
          C.JSArray_methods.add$1(t1.SchedulerBinding__postFrameCallbacks, t2);
        }
      }
    },
    _startHeroTransition$5: function(from, to, animation, flightType, isUserGestureTransition) {
      var navigatorRect, fromHeroes, toHeroes, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, tag, t17, t18, t19, t20, manifest, t21, t22, t23, box, _this = this, _null = null,
        t1 = P.double,
        t2 = [t1];
      H.assertSubtype(animation, "$isAnimation", t2, "$asAnimation");
      if (_this._navigator$_navigator == null || $.GlobalKey__registry.$index(0, from._subtreeKey) == null || $.GlobalKey__registry.$index(0, to._subtreeKey) == null) {
        to.set$offstage(false);
        return;
      }
      navigatorRect = T._globalBoundingBoxFor(_this._navigator$_navigator._element);
      fromHeroes = T.Hero__allHeroesFor($.GlobalKey__registry.$index(0, from._subtreeKey), isUserGestureTransition);
      toHeroes = T.Hero__allHeroesFor($.GlobalKey__registry.$index(0, to._subtreeKey), isUserGestureTransition);
      to.set$offstage(false);
      for (t3 = fromHeroes.get$keys(fromHeroes), t3 = t3.get$iterator(t3), t4 = _this._flights, t5 = [X._OverlayEntryState], t6 = {func: 1, ret: -1, args: [X.AnimationStatus]}, t7 = _this.get$_handleFlightEnded(), t8 = [t6], t9 = [t6], t10 = {func: 1, ret: -1}, t11 = [t10], t10 = [t10], t12 = _this.createRectTween, t13 = [t1], t1 = [t1], t14 = [Q.Rect], t15 = flightType === C.HeroFlightDirection_0, t16 = flightType === C.HeroFlightDirection_1; t3.moveNext$0();) {
        tag = t3.get$current(t3);
        if (toHeroes.$index(0, tag) != null) {
          fromHeroes.$index(0, tag)._widget.toString;
          toHeroes.$index(0, tag)._widget.toString;
          t17 = _this._navigator$_navigator._overlayKey.get$currentState();
          t18 = fromHeroes.$index(0, tag);
          t19 = toHeroes.$index(0, tag);
          t20 = $.$get$HeroController__defaultHeroFlightShuttleBuilder();
          manifest = new T._HeroFlightManifest(flightType, t17, navigatorRect, from, to, t18, t19, t12, t20, isUserGestureTransition);
          if (t4.$index(0, tag) != null) {
            t17 = t4.$index(0, tag);
            t20 = t17.manifest.type;
            if (t20 === C.HeroFlightDirection_0 && t16) {
              t18 = t17._proxyAnimation;
              t19 = t15 ? to._animationProxy : from._animationProxy;
              t20 = new S.CurvedAnimation(t19, C.Cubic_ifx, _null);
              t20._updateCurveDirection$1(t19.get$status(t19));
              t21 = H.functionTypeCheck(t20.get$_updateCurveDirection(), t6);
              t19.didRegisterListener$0();
              t19 = t19.AnimationLocalStatusListenersMixin__statusListeners;
              H.assertSubtypeOfRuntimeType(t21, H.getTypeArgumentByIndex(t19, 0));
              t19._isDirty = true;
              C.JSArray_methods.add$1(t19._list, t21);
              t18.set$parent(0, new S.ReverseAnimation(t20, new R.ObserverList(H.setRuntimeTypeInfo([], t8), t9), 0));
              t20 = t17.heroRectTween;
              t17.set$heroRectTween(new R.ReverseTween(t20, t20.end, t20.begin, t14));
            } else if (t20 === C.HeroFlightDirection_1 && t15) {
              t18 = t17._proxyAnimation;
              t20 = t15 ? to._animationProxy : from._animationProxy;
              t21 = new S.CurvedAnimation(t20, C.Cubic_ifx, _null);
              t21._updateCurveDirection$1(t20.get$status(t20));
              t22 = H.functionTypeCheck(t21.get$_updateCurveDirection(), t6);
              t20.didRegisterListener$0();
              t20 = t20.AnimationLocalStatusListenersMixin__statusListeners;
              H.assertSubtypeOfRuntimeType(t22, H.getTypeArgumentByIndex(t20, 0));
              t20._isDirty = true;
              C.JSArray_methods.add$1(t20._list, t22);
              t22 = t17.manifest;
              t20 = t22.type === C.HeroFlightDirection_0 ? t22.toRoute._animationProxy : t22.fromRoute._animationProxy;
              t22 = new S.CurvedAnimation(t20, C.Cubic_ifx, _null);
              t22._updateCurveDirection$1(t20.get$status(t20));
              t23 = H.functionTypeCheck(t22.get$_updateCurveDirection(), t6);
              t20.didRegisterListener$0();
              t20 = t20.AnimationLocalStatusListenersMixin__statusListeners;
              H.assertSubtypeOfRuntimeType(t23, H.getTypeArgumentByIndex(t20, 0));
              t20._isDirty = true;
              C.JSArray_methods.add$1(t20._list, t23);
              t22 = H.assertSubtype(new R.Tween(t22.get$value(t22), 1, t13), "$isAnimatable", t1, "$asAnimatable");
              t18.set$parent(0, new R._AnimatedEvaluation(H.assertSubtype(t21, "$isAnimation", t2, "$asAnimation"), t22, [H.getTypeArgumentByIndex(t22, 0)]));
              t18 = t17.manifest.fromHero;
              if (t18 != t19) {
                t18.endFlight$0();
                t19.startFlight$0();
                t18 = t17.heroRectTween.end;
                box = H.interceptedTypeCheck(t19._element.get$renderObject(), "$isRenderBox");
                t19 = box.getTransformTo$1(0, _null);
                t20 = box._size;
                t21 = t20._dx;
                t20 = t20._dy;
                if (typeof t21 !== "number")
                  return H.iae(t21);
                if (typeof t20 !== "number")
                  return H.iae(t20);
                t17.set$heroRectTween(t17._doCreateRectTween$2(t18, T.MatrixUtils_transformRect(t19, new Q.Rect(0, 0, 0 + t21, 0 + t20))));
              } else {
                t18 = t17.heroRectTween;
                t17.set$heroRectTween(t17._doCreateRectTween$2(t18.end, t18.begin));
              }
            } else {
              t20 = t17.heroRectTween;
              t21 = t17._proxyAnimation;
              t20.toString;
              H.assertSubtype(t21, "$isAnimation", t2, "$asAnimation");
              t21 = t20.transform$1(0, t21.get$value(t21));
              box = H.interceptedTypeCheck(t19._element.get$renderObject(), "$isRenderBox");
              t20 = box.getTransformTo$1(0, _null);
              t22 = box._size;
              t23 = t22._dx;
              t22 = t22._dy;
              if (typeof t23 !== "number")
                return H.iae(t23);
              if (typeof t22 !== "number")
                return H.iae(t22);
              t17.set$heroRectTween(t17._doCreateRectTween$2(t21, T.MatrixUtils_transformRect(t20, new Q.Rect(0, 0, 0 + t23, 0 + t22))));
              t17.shuttle = null;
              t20 = t17._proxyAnimation;
              if (t16) {
                t21 = t15 ? to._animationProxy : from._animationProxy;
                t22 = new S.CurvedAnimation(t21, C.Cubic_ifx, _null);
                t22._updateCurveDirection$1(t21.get$status(t21));
                t23 = H.functionTypeCheck(t22.get$_updateCurveDirection(), t6);
                t21.didRegisterListener$0();
                t21 = t21.AnimationLocalStatusListenersMixin__statusListeners;
                H.assertSubtypeOfRuntimeType(t23, H.getTypeArgumentByIndex(t21, 0));
                t21._isDirty = true;
                C.JSArray_methods.add$1(t21._list, t23);
                t20.set$parent(0, new S.ReverseAnimation(t22, new R.ObserverList(H.setRuntimeTypeInfo([], t8), t9), 0));
              } else {
                t21 = t15 ? to._animationProxy : from._animationProxy;
                t22 = new S.CurvedAnimation(t21, C.Cubic_ifx, _null);
                t22._updateCurveDirection$1(t21.get$status(t21));
                t23 = H.functionTypeCheck(t22.get$_updateCurveDirection(), t6);
                t21.didRegisterListener$0();
                t21 = t21.AnimationLocalStatusListenersMixin__statusListeners;
                H.assertSubtypeOfRuntimeType(t23, H.getTypeArgumentByIndex(t21, 0));
                t21._isDirty = true;
                C.JSArray_methods.add$1(t21._list, t23);
                t20.set$parent(0, t22);
              }
              t17.manifest.fromHero.endFlight$0();
              t17.manifest.toHero.endFlight$0();
              t18.startFlight$0();
              t19.startFlight$0();
              t18 = t17.overlayEntry._key.get$currentState();
              if (t18 != null)
                t18._markNeedsBuild$0();
            }
            t17._aborted = false;
            t17.manifest = manifest;
          } else {
            t17 = new T._HeroFlight(t7, C.C__AlwaysCompleteAnimation);
            t18 = H.setRuntimeTypeInfo([], t8);
            t19 = new R.ObserverList(t18, t9);
            t20 = new S.ProxyAnimation(t19, new R.ObserverList(H.setRuntimeTypeInfo([], t11), t10), 0);
            t20.set$_animations$_parent(_null);
            if (t20._animations$_parent == null) {
              t20._animations$_status = C.AnimationStatus_0;
              t20._animations$_value = 0;
            }
            t21 = H.functionTypeCheck(t17.get$_handleAnimationUpdate(), t6);
            t20.didRegisterListener$0();
            H.assertSubtypeOfRuntimeType(t21, t6);
            t19._isDirty = true;
            C.JSArray_methods.add$1(t18, t21);
            t17._proxyAnimation = t20;
            t17.manifest = manifest;
            if (t16) {
              t18 = t15 ? to._animationProxy : from._animationProxy;
              t19 = new S.CurvedAnimation(t18, C.Cubic_ifx, _null);
              t19._updateCurveDirection$1(t18.get$status(t18));
              t21 = H.functionTypeCheck(t19.get$_updateCurveDirection(), t6);
              t18.didRegisterListener$0();
              t18 = t18.AnimationLocalStatusListenersMixin__statusListeners;
              H.assertSubtypeOfRuntimeType(t21, H.getTypeArgumentByIndex(t18, 0));
              t18._isDirty = true;
              C.JSArray_methods.add$1(t18._list, t21);
              t20.set$parent(0, new S.ReverseAnimation(t19, new R.ObserverList(H.setRuntimeTypeInfo([], t8), t9), 0));
            } else {
              t18 = t15 ? to._animationProxy : from._animationProxy;
              t19 = new S.CurvedAnimation(t18, C.Cubic_ifx, _null);
              t19._updateCurveDirection$1(t18.get$status(t18));
              t21 = H.functionTypeCheck(t19.get$_updateCurveDirection(), t6);
              t18.didRegisterListener$0();
              t18 = t18.AnimationLocalStatusListenersMixin__statusListeners;
              H.assertSubtypeOfRuntimeType(t21, H.getTypeArgumentByIndex(t18, 0));
              t18._isDirty = true;
              C.JSArray_methods.add$1(t18._list, t21);
              t20.set$parent(0, t19);
            }
            t17.manifest.fromHero.startFlight$0();
            t17.manifest.toHero.startFlight$0();
            box = H.interceptedTypeCheck(t17.manifest.fromHero._element.get$renderObject(), "$isRenderBox");
            t18 = box.getTransformTo$1(0, _null);
            t19 = box._size;
            t20 = t19._dx;
            t19 = t19._dy;
            if (typeof t20 !== "number")
              return H.iae(t20);
            if (typeof t19 !== "number")
              return H.iae(t19);
            t19 = T.MatrixUtils_transformRect(t18, new Q.Rect(0, 0, 0 + t20, 0 + t19));
            box = H.interceptedTypeCheck(t17.manifest.toHero._element.get$renderObject(), "$isRenderBox");
            t20 = box.getTransformTo$1(0, _null);
            t18 = box._size;
            t21 = t18._dx;
            t18 = t18._dy;
            if (typeof t21 !== "number")
              return H.iae(t21);
            if (typeof t18 !== "number")
              return H.iae(t18);
            t17.set$heroRectTween(t17._doCreateRectTween$2(t19, T.MatrixUtils_transformRect(t20, new Q.Rect(0, 0, 0 + t21, 0 + t18))));
            t18 = new X.OverlayEntry(t17.get$_buildOverlay(), false, new N.LabeledGlobalKey(_null, t5));
            t17.overlayEntry = t18;
            t17.manifest.overlay.insert$1(0, t18);
            t4.$indexSet(0, tag, t17);
          }
        } else if (t4.$index(0, tag) != null)
          t4.$index(0, tag)._aborted = true;
      }
    },
    _handleFlightEnded$1: function(flight) {
      this._flights.remove$1(0, flight.manifest.fromHero._widget.tag);
    }
  };
  T.HeroController__maybeStartHeroTransition_closure.prototype = {
    call$1: function(value) {
      var _this = this;
      H.interceptedTypeCheck(value, "$isDuration");
      _this.$this._startHeroTransition$5(_this.from, _this.to, _this.animation, _this.flightType, _this.isUserGestureTransition);
    },
    $signature: 24
  };
  T.HeroController_closure.prototype = {
    call$5: function(flightContext, animation, flightDirection, fromHeroContext, toHeroContext) {
      H.interceptedTypeCheck(flightContext, "$isBuildContext");
      H.assertSubtype(animation, "$isAnimation", [P.double], "$asAnimation");
      H.interceptedTypeCheck(flightDirection, "$isHeroFlightDirection");
      H.interceptedTypeCheck(fromHeroContext, "$isBuildContext");
      return H.interceptedTypeCheck(H.interceptedTypeCheck(toHeroContext, "$isBuildContext").get$widget(), "$isHero").child;
    },
    "call*": "call$5",
    $requiredArgCount: 5,
    $signature: 161
  };
  L.Icon.prototype = {
    build$1: function(context) {
      var t1, t2, iconWidget, _null = null,
        textDirection = T.Directionality_of(context),
        iconThemeData = Y.IconTheme__getInheritedIconThemeData(context),
        iconTheme = iconThemeData.color != null && iconThemeData.get$opacity(iconThemeData) != null && iconThemeData.size != null ? iconThemeData : C.IconThemeData_Color_4278190080_1_24.merge$1(iconThemeData),
        iconSize = iconTheme.size,
        iconOpacity = iconTheme.get$opacity(iconTheme),
        iconColor = this.color;
      if (iconColor == null)
        iconColor = iconTheme.color;
      if (iconOpacity !== 1) {
        t1 = iconColor._value;
        if (typeof iconOpacity !== "number")
          return H.iae(iconOpacity);
        iconColor.toString;
        iconColor = Q.Color$fromARGB(C.JSNumber_methods.round$0(255 * (((4278190080 & t1) >>> 24) / 255 * iconOpacity)), (16711680 & t1) >>> 16, (65280 & t1) >>> 8, (255 & t1) >>> 0);
      }
      t1 = this.icon;
      t2 = H.Primitives_stringFromCharCode(t1.codePoint);
      iconWidget = T.RichText$(_null, _null, C.TextOverflow_0, true, new Q.TextSpan(A.TextStyle$0(_null, _null, iconColor, _null, _null, _null, _null, t1.fontFamily, _null, iconSize, _null, _null, _null, _null, false, _null, _null, _null, _null, _null, _null), t2, _null), C.TextAlign_4, textDirection, 1);
      if (t1.matchTextDirection)
        switch (textDirection) {
          case C.TextDirection_0:
            t1 = new E.Matrix4(new Float64Array(16));
            t1.setIdentity$0();
            t1.scale$3(0, -1, 1, 1);
            iconWidget = T.Transform$(C.Alignment_0_0, iconWidget, t1, false);
            break;
          case C.TextDirection_1:
            break;
        }
      return T.Semantics$(_null, new T.ExcludeSemantics(true, new T.SizedBox(iconSize, iconSize, new T.Center(C.Alignment_0_0, _null, _null, iconWidget, _null), _null), _null), false, _null, false, _null, _null, _null, _null);
    }
  };
  X.IconData.prototype = {
    $eq: function(_, other) {
      var t1, _this = this;
      if (other == null)
        return false;
      if (!new H.TypeImpl(H.getRti(_this)).$eq(0, J.get$runtimeType$(other)))
        return false;
      H.interceptedTypeCheck(other, "$isIconData");
      if (_this.codePoint === other.codePoint)
        if (_this.fontFamily === other.fontFamily)
          t1 = _this.matchTextDirection === other.matchTextDirection;
        else
          t1 = false;
      else
        t1 = false;
      return t1;
    },
    get$hashCode: function(_) {
      return Q.hashValues(this.codePoint, this.fontFamily, null, this.matchTextDirection, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd);
    },
    toString$0: function(_) {
      var t1 = this.super$Object$toString(0);
      return t1;
    }
  };
  Y.IconTheme.prototype = {
    updateShouldNotify$1: function(oldWidget) {
      return !this.data.$eq(0, H.interceptedTypeCheck(oldWidget, "$isIconTheme").data);
    }
  };
  Y.IconTheme_merge_closure.prototype = {
    call$1: function(context) {
      return new Y.IconTheme(Y.IconTheme__getInheritedIconThemeData(H.interceptedTypeCheck(context, "$isBuildContext")).merge$1(this.data), this.child, this.key);
    },
    $signature: 162
  };
  T.IconThemeData.prototype = {
    merge$1: function(other) {
      var _this = this,
        t1 = other.color,
        t2 = other.get$opacity(other),
        t3 = other.size;
      if (t1 == null)
        t1 = _this.color;
      if (t2 == null)
        t2 = _this.get$opacity(_this);
      return new T.IconThemeData(t1, t2, t3 == null ? _this.size : t3);
    },
    get$opacity: function(_) {
      var t1 = this._opacity;
      return t1 == null ? null : C.JSNumber_methods.clamp$2(t1, 0, 1);
    },
    $eq: function(_, other) {
      var _this = this;
      if (other == null)
        return false;
      if (!J.get$runtimeType$(other).$eq(0, new H.TypeImpl(H.getRti(_this))))
        return false;
      H.interceptedTypeCheck(other, "$isIconThemeData");
      return J.$eq$(_this.color, other.color) && _this.get$opacity(_this) == other.get$opacity(other) && _this.size == other.size;
    },
    get$hashCode: function(_) {
      var _this = this;
      return Q.hashValues(_this.color, _this.get$opacity(_this), _this.size, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd);
    }
  };
  G.DecorationTween.prototype = {
    lerp$1: function(t) {
      return Z.Decoration_lerp(this.begin, this.end, t);
    },
    $asAnimatable: function() {
      return [Z.Decoration];
    },
    $asTween: function() {
      return [Z.Decoration];
    }
  };
  G.BorderRadiusTween.prototype = {
    lerp$1: function(t) {
      return K.BorderRadius_lerp(this.begin, this.end, t);
    },
    $asAnimatable: function() {
      return [K.BorderRadius];
    },
    $asTween: function() {
      return [K.BorderRadius];
    }
  };
  G.TextStyleTween.prototype = {
    lerp$1: function(t) {
      return A.TextStyle_lerp(this.begin, this.end, t);
    },
    $asAnimatable: function() {
      return [A.TextStyle0];
    },
    $asTween: function() {
      return [A.TextStyle0];
    }
  };
  G.ImplicitlyAnimatedWidget.prototype = {
    get$curve: function(receiver) {
      return this.curve;
    },
    get$duration: function(receiver) {
      return this.duration;
    }
  };
  G.ImplicitlyAnimatedWidgetState.prototype = {
    initState$0: function() {
      var t1, t2, _this = this;
      _this.super$State$initState();
      t1 = _this._widget;
      t1 = t1.get$duration(t1);
      t2 = _this._widget.toStringShort$0();
      _this._controller = G.AnimationController$(C.AnimationBehavior_0, t2, t1, 0, 1, null, _this);
      _this._updateCurve$0();
      _this._constructTweens$0();
    },
    didUpdateWidget$1: function(oldWidget) {
      var t1, t2, _this = this;
      H.assertSubtypeOfRuntimeType(oldWidget, H.getRuntimeTypeArgument(_this, "ImplicitlyAnimatedWidgetState", 0));
      _this.super$State$didUpdateWidget(oldWidget);
      t1 = _this._widget;
      if (t1.get$curve(t1) !== oldWidget.get$curve(oldWidget))
        _this._updateCurve$0();
      t1 = _this._controller;
      t2 = _this._widget;
      t1.duration = t2.get$duration(t2);
      if (_this._constructTweens$0()) {
        _this.forEachTween$1(new G.ImplicitlyAnimatedWidgetState_didUpdateWidget_closure(_this));
        t1 = _this._controller;
        t1.set$value(0, 0);
        t1.forward$0(0);
      }
    },
    _updateCurve$0: function() {
      var t2, _this = this,
        t1 = _this._widget;
      t1.get$curve(t1);
      t1 = _this._controller;
      t2 = _this._widget;
      _this.set$_animation(S.CurvedAnimation$(t2.get$curve(t2), t1, null));
    },
    dispose$0: function() {
      this._controller.dispose$0();
      this.super$_ImplicitlyAnimatedWidgetState_State_SingleTickerProviderStateMixin$dispose();
    },
    _updateTween$2: function(tween, targetValue) {
      var t1;
      if (tween == null)
        return;
      t1 = H.assertSubtype(this._animation, "$isAnimation", [P.double], "$asAnimation");
      tween.set$begin(tween.transform$1(0, t1.get$value(t1)));
      tween.set$end(0, targetValue);
    },
    _constructTweens$0: function() {
      var t1 = {};
      t1.shouldStartAnimation = false;
      this.forEachTween$1(new G.ImplicitlyAnimatedWidgetState__constructTweens_closure(t1, this));
      return t1.shouldStartAnimation;
    },
    set$_animation: function(_animation) {
      this._animation = H.assertSubtype(_animation, "$isAnimation", [P.double], "$asAnimation");
    },
    $isTickerProvider: 1
  };
  G.ImplicitlyAnimatedWidgetState_didUpdateWidget_closure.prototype = {
    call$3: function(tween, targetValue, $constructor) {
      H.functionTypeCheck($constructor, {func: 1, ret: [R.Tween,,], args: [,]});
      this.$this._updateTween$2(tween, targetValue);
      return tween;
    },
    $signature: 71
  };
  G.ImplicitlyAnimatedWidgetState__constructTweens_closure.prototype = {
    call$3: function(tween, targetValue, $constructor) {
      var t1;
      H.functionTypeCheck($constructor, {func: 1, ret: [R.Tween,,], args: [,]});
      if (targetValue != null) {
        if (tween == null)
          tween = $constructor.call$1(targetValue);
        t1 = tween.end;
        if (!J.$eq$(targetValue, t1 == null ? tween.begin : t1))
          this._box_0.shouldStartAnimation = true;
      } else
        tween = null;
      return tween;
    },
    $signature: 71
  };
  G.AnimatedWidgetBaseState.prototype = {
    initState$0: function() {
      var t1, t2;
      this.super$ImplicitlyAnimatedWidgetState$initState();
      t1 = this._controller;
      t1.toString;
      t2 = H.functionTypeCheck(this.get$_handleAnimationChanged(), {func: 1, ret: -1});
      t1.didRegisterListener$0();
      t1 = t1.AnimationLocalListenersMixin__listeners;
      H.assertSubtypeOfRuntimeType(t2, H.getTypeArgumentByIndex(t1, 0));
      t1._isDirty = true;
      C.JSArray_methods.add$1(t1._list, t2);
    },
    _handleAnimationChanged$0: function() {
      this.setState$1(new G.AnimatedWidgetBaseState__handleAnimationChanged_closure());
    }
  };
  G.AnimatedWidgetBaseState__handleAnimationChanged_closure.prototype = {
    call$0: function() {
    },
    $signature: 0
  };
  G.AnimatedDefaultTextStyle.prototype = {
    createState$0: function() {
      return new G._AnimatedDefaultTextStyleState(null, C._StateLifecycle_0);
    },
    get$child: function() {
      return this.child;
    }
  };
  G._AnimatedDefaultTextStyleState.prototype = {
    forEachTween$1: function(visitor) {
      this._style = H.interceptedTypeCheck(H.functionTypeCheck(visitor, {func: 1, ret: [R.Tween,,], args: [[R.Tween,,],, {func: 1, ret: [R.Tween,,], args: [,]}]}).call$3(this._style, this._widget.style, new G._AnimatedDefaultTextStyleState_forEachTween_closure()), "$isTextStyleTween");
    },
    build$1: function(context) {
      var t1 = this._style,
        t2 = this._animation;
      t1.toString;
      H.assertSubtype(t2, "$isAnimation", [P.double], "$asAnimation");
      t2 = t1.transform$1(0, t2.get$value(t2));
      return L.DefaultTextStyle$(this._widget.child, null, C.TextOverflow_0, true, t2, null);
    },
    $asState: function() {
      return [G.AnimatedDefaultTextStyle];
    },
    $asImplicitlyAnimatedWidgetState: function() {
      return [G.AnimatedDefaultTextStyle];
    }
  };
  G._AnimatedDefaultTextStyleState_forEachTween_closure.prototype = {
    call$1: function(value) {
      return new G.TextStyleTween(H.interceptedTypeCheck(value, "$isTextStyle0"), null);
    },
    $signature: 164
  };
  G.AnimatedPhysicalModel.prototype = {
    createState$0: function() {
      return new G._AnimatedPhysicalModelState(null, C._StateLifecycle_0);
    },
    get$child: function() {
      return this.child;
    },
    get$borderRadius: function(receiver) {
      return this.borderRadius;
    }
  };
  G._AnimatedPhysicalModelState.prototype = {
    forEachTween$1: function(visitor) {
      var _this = this;
      H.functionTypeCheck(visitor, {func: 1, ret: [R.Tween,,], args: [[R.Tween,,],, {func: 1, ret: [R.Tween,,], args: [,]}]});
      _this._implicit_animations$_borderRadius = H.interceptedTypeCheck(visitor.call$3(_this._implicit_animations$_borderRadius, _this._widget.borderRadius, new G._AnimatedPhysicalModelState_forEachTween_closure()), "$isBorderRadiusTween");
      _this.set$_implicit_animations$_elevation(H.assertSubtype(visitor.call$3(_this._implicit_animations$_elevation, _this._widget.elevation, new G._AnimatedPhysicalModelState_forEachTween_closure0()), "$isTween", [P.double], "$asTween"));
      _this._implicit_animations$_color = H.interceptedTypeCheck(visitor.call$3(_this._implicit_animations$_color, _this._widget.color, new G._AnimatedPhysicalModelState_forEachTween_closure1()), "$isColorTween");
      _this._implicit_animations$_shadowColor = H.interceptedTypeCheck(visitor.call$3(_this._implicit_animations$_shadowColor, _this._widget.shadowColor, new G._AnimatedPhysicalModelState_forEachTween_closure2()), "$isColorTween");
    },
    build$1: function(context) {
      var t4, t5, t6, t7, t8, t9, _this = this,
        t1 = _this._widget,
        t2 = t1.child,
        t3 = t1.shape;
      t1 = t1.clipBehavior;
      t4 = _this._implicit_animations$_borderRadius;
      t5 = _this._animation;
      t4.toString;
      t6 = [P.double];
      H.assertSubtype(t5, "$isAnimation", t6, "$asAnimation");
      t5 = t4.transform$1(0, t5.get$value(t5));
      t4 = _this._implicit_animations$_elevation;
      t7 = _this._animation;
      t4.toString;
      H.assertSubtype(t7, "$isAnimation", t6, "$asAnimation");
      t7 = t4.transform$1(0, t7.get$value(t7));
      t4 = _this._widget;
      t8 = t4.color;
      t4.toString;
      t4 = _this._implicit_animations$_shadowColor;
      t9 = _this._animation;
      t4.toString;
      H.assertSubtype(t9, "$isAnimation", t6, "$asAnimation");
      t9 = t4.transform$1(0, t9.get$value(t9));
      return new T.PhysicalModel(t3, t1, t5, t7, t8, t9, t2, null);
    },
    set$_implicit_animations$_elevation: function(_elevation) {
      this._implicit_animations$_elevation = H.assertSubtype(_elevation, "$isTween", [P.double], "$asTween");
    },
    $asState: function() {
      return [G.AnimatedPhysicalModel];
    },
    $asImplicitlyAnimatedWidgetState: function() {
      return [G.AnimatedPhysicalModel];
    }
  };
  G._AnimatedPhysicalModelState_forEachTween_closure.prototype = {
    call$1: function(value) {
      return new G.BorderRadiusTween(H.interceptedTypeCheck(value, "$isBorderRadius"), null);
    },
    $signature: 165
  };
  G._AnimatedPhysicalModelState_forEachTween_closure0.prototype = {
    call$1: function(value) {
      return new R.Tween(H.doubleTypeCheck(value), null, [P.double]);
    },
    $signature: 65
  };
  G._AnimatedPhysicalModelState_forEachTween_closure1.prototype = {
    call$1: function(value) {
      return new R.ColorTween(H.interceptedTypeCheck(value, "$isColor"), null);
    },
    $signature: 43
  };
  G._AnimatedPhysicalModelState_forEachTween_closure2.prototype = {
    call$1: function(value) {
      return new R.ColorTween(H.interceptedTypeCheck(value, "$isColor"), null);
    },
    $signature: 43
  };
  G._ImplicitlyAnimatedWidgetState_State_SingleTickerProviderStateMixin.prototype = {
    dispose$0: function() {
      this.super$State$dispose();
    },
    didChangeDependencies$0: function() {
      var t1 = this.SingleTickerProviderStateMixin__ticker;
      if (t1 != null)
        t1.set$muted(0, !U.TickerMode_of(this._element));
      this.super$State$didChangeDependencies();
    }
  };
  A.LayoutBuilder.prototype = {
    createElement$0: function(_) {
      var t1 = ($.Element__nextHashCode + 1) % 16777215;
      $.Element__nextHashCode = t1;
      return new A._LayoutBuilderElement(t1, this, C._ElementLifecycle_0);
    },
    createRenderObject$1: function(context) {
      var t1 = new A._RenderLayoutBuilder(null);
      t1.get$isRepaintBoundary();
      t1.get$alwaysNeedsCompositing();
      t1._needsCompositing = false;
      return t1;
    }
  };
  A._LayoutBuilderElement.prototype = {
    get$widget: function() {
      return H.interceptedTypeCheck(N.RenderObjectElement.prototype.get$widget.call(this), "$isLayoutBuilder");
    },
    get$renderObject: function() {
      return H.interceptedTypeCheck(N.RenderObjectElement.prototype.get$renderObject.call(this), "$is_RenderLayoutBuilder");
    },
    visitChildren$1: function(visitor) {
      var t1;
      H.functionTypeCheck(visitor, {func: 1, ret: -1, args: [N.Element]});
      t1 = this._layout_builder$_child;
      if (t1 != null)
        visitor.call$1(t1);
    },
    forgetChild$1: function(child) {
      this._layout_builder$_child = null;
    },
    mount$2: function($parent, newSlot) {
      this.super$RenderObjectElement$mount($parent, newSlot);
      H.interceptedTypeCheck(N.RenderObjectElement.prototype.get$renderObject.call(this), "$is_RenderLayoutBuilder").set$callback(this.get$_layout());
    },
    update$1: function(_, newWidget) {
      var _this = this;
      _this.super$RenderObjectElement$update(0, H.interceptedTypeCheck(newWidget, "$isLayoutBuilder"));
      H.interceptedTypeCheck(N.RenderObjectElement.prototype.get$renderObject.call(_this), "$is_RenderLayoutBuilder").set$callback(_this.get$_layout());
      H.interceptedTypeCheck(N.RenderObjectElement.prototype.get$renderObject.call(_this), "$is_RenderLayoutBuilder").markNeedsLayout$0();
    },
    performRebuild$0: function() {
      H.interceptedTypeCheck(N.RenderObjectElement.prototype.get$renderObject.call(this), "$is_RenderLayoutBuilder").markNeedsLayout$0();
      this.super$RenderObjectElement$performRebuild();
    },
    unmount$0: function() {
      H.interceptedTypeCheck(N.RenderObjectElement.prototype.get$renderObject.call(this), "$is_RenderLayoutBuilder").set$callback(null);
      this.super$RenderObjectElement$unmount();
    },
    _layout$1: function(constraints) {
      H.interceptedTypeCheck(constraints, "$isBoxConstraints");
      this._owner.buildScope$2(this, new A._LayoutBuilderElement__layout_closure(this, constraints));
    },
    insertChildRenderObject$2: function(child, slot) {
      H.interceptedTypeCheck(N.RenderObjectElement.prototype.get$renderObject.call(this), "$is_RenderLayoutBuilder").set$child(child);
    },
    moveChildRenderObject$2: function(child, slot) {
    },
    removeChildRenderObject$1: function(child) {
      H.interceptedTypeCheck(N.RenderObjectElement.prototype.get$renderObject.call(this), "$is_RenderLayoutBuilder").set$child(null);
    }
  };
  A._LayoutBuilderElement__layout_closure.prototype = {
    call$0: function() {
      var e, stack, e0, stack0, exception, built0, built = null,
        t1 = this.$this;
      H.interceptedTypeCheck(N.RenderObjectElement.prototype.get$widget.call(t1), "$isLayoutBuilder").builder;
      try {
        built = H.interceptedTypeCheck(N.RenderObjectElement.prototype.get$widget.call(t1), "$isLayoutBuilder").builder.call$2(t1, this.constraints);
        H.interceptedTypeCheck(N.RenderObjectElement.prototype.get$widget.call(t1), "$isLayoutBuilder");
      } catch (exception) {
        e = H.unwrapException(exception);
        stack = H.getTraceFromException(exception);
        built0 = $.$get$ErrorWidget_builder().call$1(A._debugReportException0("building " + H.S(H.interceptedTypeCheck(N.RenderObjectElement.prototype.get$widget.call(t1), "$isLayoutBuilder")), e, stack));
        built = built0;
      }
      try {
        t1._layout_builder$_child = t1.updateChild$3(t1._layout_builder$_child, built, null);
      } catch (exception) {
        e0 = H.unwrapException(exception);
        stack0 = H.getTraceFromException(exception);
        built0 = $.$get$ErrorWidget_builder().call$1(A._debugReportException0("building " + H.S(H.interceptedTypeCheck(N.RenderObjectElement.prototype.get$widget.call(t1), "$isLayoutBuilder")), e0, stack0));
        built = built0;
        t1._layout_builder$_child = t1.updateChild$3(null, built, t1._slot);
      }
    },
    $signature: 0
  };
  A._RenderLayoutBuilder.prototype = {
    set$callback: function(value) {
      H.functionTypeCheck(value, {func: 1, ret: -1, args: [S.BoxConstraints]});
      if (J.$eq$(value, this._layout_builder$_callback))
        return;
      this.set$_layout_builder$_callback(value);
      this.markNeedsLayout$0();
    },
    performLayout$0: function() {
      var t1, _this = this;
      _this.invokeLayoutCallback$1$1(_this._layout_builder$_callback, S.BoxConstraints);
      t1 = _this.RenderObjectWithChildMixin__child;
      if (t1 != null) {
        t1.layout$2$parentUsesSize(H.interceptedTypeCheck(K.RenderObject.prototype.get$constraints.call(_this), "$isBoxConstraints"), true);
        _this._size = H.interceptedTypeCheck(K.RenderObject.prototype.get$constraints.call(_this), "$isBoxConstraints").constrain$1(_this.RenderObjectWithChildMixin__child._size);
      } else {
        t1 = H.interceptedTypeCheck(K.RenderObject.prototype.get$constraints.call(_this), "$isBoxConstraints");
        _this._size = new Q.Size(C.JSInt_methods.clamp$2(1 / 0, t1.minWidth, t1.maxWidth), C.JSInt_methods.clamp$2(1 / 0, t1.minHeight, t1.maxHeight));
      }
    },
    hitTestChildren$2$position: function(result, position) {
      var t1 = this.RenderObjectWithChildMixin__child;
      t1 = t1 == null ? null : t1.hitTest$2$position(result, position);
      return t1 === true;
    },
    paint$2: function(context, offset) {
      var t1 = this.RenderObjectWithChildMixin__child;
      if (t1 != null)
        context.paintChild$2(t1, offset);
    },
    set$_layout_builder$_callback: function(_callback) {
      this._layout_builder$_callback = H.functionTypeCheck(_callback, {func: 1, ret: -1, args: [S.BoxConstraints]});
    },
    $asRenderObjectWithChildMixin: function() {
      return [S.RenderBox];
    }
  };
  A.__RenderLayoutBuilder_RenderBox_RenderObjectWithChildMixin.prototype = {
    attach$1: function(owner) {
      var t1;
      H.interceptedTypeCheck(owner, "$isPipelineOwner");
      this.super$RenderObject$attach(owner);
      t1 = this.RenderObjectWithChildMixin__child;
      if (t1 != null)
        t1.attach$1(owner);
    },
    detach$0: function(_) {
      var t1;
      this.super$AbstractNode$detach(0);
      t1 = this.RenderObjectWithChildMixin__child;
      if (t1 != null)
        t1.detach$0(0);
    },
    set$_object$_child: function(_child) {
      this.RenderObjectWithChildMixin__child = H.assertSubtypeOfRuntimeType(_child, H.getRuntimeTypeArgument(this, "RenderObjectWithChildMixin", 0));
    }
  };
  L._Pending.prototype = {};
  L._loadAll_closure.prototype = {
    call$1: function(value) {
      return this._box_0.completedValue = value;
    },
    $signature: 4
  };
  L._loadAll_closure0.prototype = {
    call$1: function(p) {
      return H.interceptedTypeCheck(p, "$is_Pending").futureValue;
    },
    $signature: 167
  };
  L._loadAll_closure1.prototype = {
    call$1: function(values) {
      var t1, t2, t3, i, t4;
      H.listTypeCheck(values);
      t1 = J.getInterceptor$asx(values);
      t2 = this._box_1;
      t3 = this.output;
      i = 0;
      while (true) {
        t4 = t1.get$length(values);
        if (typeof t4 !== "number")
          return H.iae(t4);
        if (!(i < t4))
          break;
        t4 = t2.pendingList;
        if (i >= t4.length)
          return H.ioore(t4, i);
        t3.$indexSet(0, new H.TypeImpl(H.getRuntimeTypeArgument(t4[i].delegate, "LocalizationsDelegate", 0)), t1.$index(values, i));
        ++i;
      }
      return t3;
    },
    $signature: 168
  };
  L.LocalizationsDelegate.prototype = {
    toString$0: function(_) {
      return new H.TypeImpl(H.getRti(this)).toString$0(0) + "[" + new H.TypeImpl(H.getRuntimeTypeArgument(this, "LocalizationsDelegate", 0)).toString$0(0) + "]";
    }
  };
  L.WidgetsLocalizations.prototype = {};
  L._WidgetsLocalizationsDelegate.prototype = {
    isSupported$1: function(locale) {
      return true;
    },
    load$1: function(_, locale) {
      return new O.SynchronousFuture(C.C_DefaultWidgetsLocalizations, [L.WidgetsLocalizations]);
    },
    shouldReload$1: function(old) {
      H.interceptedTypeCheck(old, "$is_WidgetsLocalizationsDelegate");
      return false;
    },
    $asLocalizationsDelegate: function() {
      return [L.WidgetsLocalizations];
    }
  };
  L.DefaultWidgetsLocalizations.prototype = {$isWidgetsLocalizations: 1};
  L._LocalizationsScope.prototype = {
    updateShouldNotify$1: function(old) {
      var t1 = this.typeToResources,
        t2 = H.interceptedTypeCheck(old, "$is_LocalizationsScope").typeToResources;
      return t1 == null ? t2 != null : t1 !== t2;
    }
  };
  L.Localizations.prototype = {
    createState$0: function() {
      return new L._LocalizationsState(new N.LabeledGlobalKey(null, [[N.State, N.StatefulWidget]]), P.LinkedHashMap_LinkedHashMap$_empty(P.Type, null), C._StateLifecycle_0);
    },
    get$child: function() {
      return this.child;
    }
  };
  L._LocalizationsState.prototype = {
    initState$0: function() {
      this.super$State$initState();
      this.load$1(0, this._widget.locale);
    },
    _anyDelegatesShouldReload$1: function(old) {
      var delegates, oldDelegates, i, delegate, oldDelegate,
        t1 = this._widget.delegates,
        t2 = old.delegates;
      if (t1.length !== t2.length)
        return true;
      delegates = H.setRuntimeTypeInfo(t1.slice(0), [H.getTypeArgumentByIndex(t1, 0)]);
      oldDelegates = H.setRuntimeTypeInfo(t2.slice(0), [H.getTypeArgumentByIndex(t2, 0)]);
      for (i = 0; i < delegates.length; ++i) {
        delegate = delegates[i];
        if (i >= oldDelegates.length)
          return H.ioore(oldDelegates, i);
        oldDelegate = oldDelegates[i];
        if (J.get$runtimeType$(delegate).$eq(0, J.get$runtimeType$(oldDelegate))) {
          delegate.shouldReload$1(oldDelegate);
          t1 = false;
        } else
          t1 = true;
        if (t1)
          return true;
      }
      return false;
    },
    didUpdateWidget$1: function(old) {
      var t1, _this = this;
      H.interceptedTypeCheck(old, "$isLocalizations");
      _this.super$State$didUpdateWidget(old);
      if (J.$eq$(_this._widget.locale, old.locale)) {
        _this._widget.delegates;
        old.delegates;
        t1 = _this._anyDelegatesShouldReload$1(old);
      } else
        t1 = true;
      if (t1)
        _this.load$1(0, _this._widget.locale);
    },
    load$1: function(_, locale) {
      var typeToResourcesFuture, _this = this, t1 = {},
        delegates = _this._widget.delegates,
        t2 = delegates.length;
      if (t2 === 0) {
        _this._localizations$_locale = locale;
        return;
      }
      t1.typeToResources = null;
      typeToResourcesFuture = L._loadAll(locale, delegates).then$1$1(new L._LocalizationsState_load_closure(t1), [P.Map, P.Type,,]);
      t1 = t1.typeToResources;
      if (t1 != null) {
        _this.set$_typeToResources(t1);
        _this._localizations$_locale = locale;
      } else {
        $.WidgetsBinding__instance.deferFirstFrameReport$0();
        typeToResourcesFuture.then$1$1(new L._LocalizationsState_load_closure0(_this, locale), null);
      }
    },
    get$_localizations$_textDirection: function() {
      H.interceptedTypeCheck(J.$index$asx(this._typeToResources, C.Type_WidgetsLocalizations_43h), "$isWidgetsLocalizations").toString;
      return C.TextDirection_1;
    },
    build$1: function(context) {
      var t1, _this = this, _null = null;
      if (_this._localizations$_locale == null)
        return M.Container$(_null, _null, _null, _null, _null, _null, _null, _null, _null);
      t1 = _this.get$_localizations$_textDirection();
      return T.Semantics$(_null, new L._LocalizationsScope(_this, _this._typeToResources, new T.Directionality(_this.get$_localizations$_textDirection(), _this._widget.child, _null), _this._localizedResourcesScopeKey), false, _null, false, _null, _null, _null, t1);
    },
    set$_typeToResources: function(_typeToResources) {
      this._typeToResources = H.assertSubtype(_typeToResources, "$isMap", [P.Type, null], "$asMap");
    },
    $asState: function() {
      return [L.Localizations];
    }
  };
  L._LocalizationsState_load_closure.prototype = {
    call$1: function(value) {
      return this._box_0.typeToResources = H.assertSubtype(value, "$isMap", [P.Type, null], "$asMap");
    },
    $signature: 169
  };
  L._LocalizationsState_load_closure0.prototype = {
    call$1: function(value) {
      var t1;
      H.assertSubtype(value, "$isMap", [P.Type, null], "$asMap");
      $.WidgetsBinding__instance.allowFirstFrameReport$0();
      t1 = this.$this;
      if (t1._element == null)
        return;
      t1.setState$1(new L._LocalizationsState_load__closure(t1, value, this.locale));
    },
    $signature: 170
  };
  L._LocalizationsState_load__closure.prototype = {
    call$0: function() {
      var t1 = this.$this;
      t1.set$_typeToResources(this.value);
      t1._localizations$_locale = this.locale;
    },
    $signature: 0
  };
  F.MediaQueryData.prototype = {
    removePadding$4$removeBottom$removeLeft$removeRight$removeTop: function(removeBottom, removeLeft, removeRight, removeTop) {
      var t1, t2, t3, t4, _this = this, _null = null;
      if (!(removeLeft || removeTop || removeRight || removeBottom))
        return _this;
      t1 = removeLeft ? 0 : _null;
      t2 = removeTop ? 0 : _null;
      t3 = removeRight ? 0 : _null;
      t4 = removeBottom ? 0 : _null;
      return F.MediaQueryData$(_this.accessibleNavigation, false, _this.boldText, _this.devicePixelRatio, _this.disableAnimations, _this.invertColors, _this.padding.copyWith$4$bottom$left$right$top(t4, t1, t3, t2), _this.size, _this.textScaleFactor, _this.viewInsets);
    },
    removeViewInsets$1$removeBottom: function(removeBottom) {
      var _this = this;
      return F.MediaQueryData$(_this.accessibleNavigation, false, _this.boldText, _this.devicePixelRatio, _this.disableAnimations, _this.invertColors, _this.padding, _this.size, _this.textScaleFactor, _this.viewInsets.copyWith$4$bottom$left$right$top(0, null, null, null));
    },
    $eq: function(_, other) {
      var t1, _this = this;
      if (other == null)
        return false;
      if (!J.get$runtimeType$(other).$eq(0, new H.TypeImpl(H.getRti(_this))))
        return false;
      H.interceptedTypeCheck(other, "$isMediaQueryData");
      if (other.size.$eq(0, _this.size))
        if (other.devicePixelRatio === _this.devicePixelRatio)
          if (other.textScaleFactor === _this.textScaleFactor)
            if (other.padding.$eq(0, _this.padding))
              if (other.viewInsets.$eq(0, _this.viewInsets))
                t1 = other.disableAnimations === _this.disableAnimations && other.invertColors === _this.invertColors && other.accessibleNavigation === _this.accessibleNavigation && other.boldText === _this.boldText;
              else
                t1 = false;
            else
              t1 = false;
          else
            t1 = false;
        else
          t1 = false;
      else
        t1 = false;
      return t1;
    },
    get$hashCode: function(_) {
      var _this = this;
      return Q.hashValues(_this.size, _this.devicePixelRatio, _this.textScaleFactor, _this.padding, _this.viewInsets, false, _this.disableAnimations, _this.invertColors, _this.accessibleNavigation, _this.boldText, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd);
    },
    toString$0: function(_) {
      var _this = this;
      return new H.TypeImpl(H.getRti(_this)).toString$0(0) + "(size: " + _this.size.toString$0(0) + ", devicePixelRatio: " + C.JSInt_methods.toStringAsFixed$1(_this.devicePixelRatio, 1) + ", textScaleFactor: " + C.JSInt_methods.toStringAsFixed$1(_this.textScaleFactor, 1) + ", padding: " + _this.padding.toString$0(0) + ", viewInsets: " + _this.viewInsets.toString$0(0) + ", alwaysUse24HourFormat: false, accessibleNavigation: " + _this.accessibleNavigation + "disableAnimations: " + _this.disableAnimations + "invertColors: " + _this.invertColors + "boldText: " + _this.boldText + ")";
    }
  };
  F.MediaQuery.prototype = {
    updateShouldNotify$1: function(oldWidget) {
      return !this.data.$eq(0, H.interceptedTypeCheck(oldWidget, "$isMediaQuery").data);
    }
  };
  X.ModalBarrier.prototype = {
    build$1: function(context) {
      var _null = null,
        t1 = this.color;
      return new T.BlockSemantics(new T.ExcludeSemantics(true, D.GestureDetector$(C.HitTestBehavior_1, T.Semantics$(_null, new T.ConstrainedBox(C.BoxConstraints_ALM, t1 == null ? _null : new M.DecoratedBox(S.BoxDecoration$(_null, _null, _null, t1, _null, _null, C.BoxShape_0), C.DecorationPosition_0, _null, _null), _null), false, _null, false, _null, _null, _null, _null), C.DragStartBehavior_1, false, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, _null, new X.ModalBarrier_build_closure(this, context), _null, _null), _null), _null);
    }
  };
  X.ModalBarrier_build_closure.prototype = {
    call$1: function(details) {
    },
    $signature: 171
  };
  K.RoutePopDisposition.prototype = {
    toString$0: function(_) {
      return this._navigator$_name;
    }
  };
  K.Route.prototype = {
    install$1: function(insertionPoint) {
    },
    willPop$0: function() {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(K.RoutePopDisposition),
        $async$returnValue, $async$self = this;
      var $async$willPop$0 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$returnValue = $async$self.get$isFirst() ? C.RoutePopDisposition_2 : C.RoutePopDisposition_0;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$willPop$0, $async$completer);
    },
    didPop$1: function(result) {
      this._popCompleter.complete$1(0, H.assertSubtypeOfRuntimeType(result, H.getTypeArgumentByIndex(this, 0)));
      return true;
    },
    didPopNext$1: function(nextRoute) {
    },
    didChangeNext$1: function(nextRoute) {
    },
    didChangePrevious$1: function(previousRoute) {
    },
    changedInternalState$0: function() {
    },
    changedExternalState$0: function() {
    },
    dispose$0: function() {
      this._navigator$_navigator = null;
    },
    get$isCurrent: function() {
      var t1 = this._navigator$_navigator;
      return t1 != null && C.JSArray_methods.get$last(t1._history) === this;
    },
    get$isFirst: function() {
      var t1 = this._navigator$_navigator;
      return t1 != null && C.JSArray_methods.get$first(t1._history) === this;
    }
  };
  K.RouteSettings.prototype = {
    toString$0: function(_) {
      var t1 = this.super$Object$toString(0);
      return t1;
    }
  };
  K.NavigatorObserver.prototype = {
    didPush$2: function(route, previousRoute) {
    },
    didPop$2: function(route, previousRoute) {
    },
    didStartUserGesture$2: function(route, previousRoute) {
    }
  };
  K.Navigator.prototype = {
    createState$0: function() {
      var t1 = [K.Route,,];
      return new K.NavigatorState(new N.LabeledGlobalKey(null, [X.OverlayState]), H.setRuntimeTypeInfo([], [t1]), P.LinkedHashSet_LinkedHashSet(t1), new O.FocusScopeNode(), H.setRuntimeTypeInfo([], [X.OverlayEntry]), P.LinkedHashSet_LinkedHashSet$_empty(P.int), null, C._StateLifecycle_0);
    },
    onGenerateRoute$1: function(arg0) {
      return this.onGenerateRoute.call$1(arg0);
    },
    onUnknownRoute$1: function(arg0) {
      return this.onUnknownRoute.call$1(arg0);
    }
  };
  K.NavigatorState.prototype = {
    initState$0: function() {
      var t1, t2, _i, initialRouteName, plannedInitialRouteNames, plannedInitialRoutes, routeParts, routeName, route, t3, _this = this, _null = null;
      _this.super$State$initState();
      for (t1 = _this._widget.observers, t2 = t1.length, _i = 0; _i < t2; ++_i)
        t1[_i]._navigator$_navigator = _this;
      initialRouteName = _this._widget.initialRoute;
      if (C.JSString_methods.startsWith$1(initialRouteName, "/") && initialRouteName.length > 1) {
        initialRouteName = C.JSString_methods.substring$1(initialRouteName, 1);
        plannedInitialRouteNames = H.setRuntimeTypeInfo(["/"], [P.String]);
        plannedInitialRoutes = H.setRuntimeTypeInfo([_this._routeNamed$1$3$allowNull$arguments("/", true, _null, _null)], [[K.Route,,]]);
        routeParts = initialRouteName.split("/");
        if (initialRouteName.length !== 0)
          for (t1 = routeParts.length, routeName = "", _i = 0; _i < t1; ++_i) {
            routeName += "/" + H.S(routeParts[_i]);
            C.JSArray_methods.add$1(plannedInitialRouteNames, routeName);
            C.JSArray_methods.add$1(plannedInitialRoutes, _this._routeNamed$1$3$allowNull$arguments(routeName, true, _null, _null));
          }
        if (_this._shouldAbandonInitialRoute$1(plannedInitialRoutes)) {
          t1 = P.Object;
          _this.push$1$1(_this._routeNamed$1$2$arguments("/", _null, t1), t1);
        } else {
          t1 = H.getTypeArgumentByIndex(plannedInitialRoutes, 0);
          new H.WhereIterable(plannedInitialRoutes, H.functionTypeCheck(new K.NavigatorState_initState_closure(), {func: 1, ret: P.bool, args: [t1]}), [t1]).forEach$1(0, H.instantiate1(_this.get$push(), _null));
        }
      } else {
        route = initialRouteName !== "/" ? _this._routeNamed$1$3$allowNull$arguments(initialRouteName, true, _null, P.Object) : _null;
        if (route == null)
          route = _this._routeNamed$1$2$arguments("/", _null, P.Object);
        _this.push$1$1(route, P.Object);
      }
      for (t1 = _this._history, t2 = t1.length, t3 = _this._initialOverlayEntries, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i)
        C.JSArray_methods.addAll$1(t3, t1[_i]._overlayEntries);
    },
    didUpdateWidget$1: function(oldWidget) {
      var t1, t2, _i, route, t3, _this = this;
      H.interceptedTypeCheck(oldWidget, "$isNavigator");
      _this.super$State$didUpdateWidget(oldWidget);
      t1 = oldWidget.observers;
      t2 = _this._widget.observers;
      if (t1 == null ? t2 != null : t1 !== t2) {
        for (t2 = t1.length, _i = 0; _i < t2; ++_i)
          t1[_i]._navigator$_navigator = null;
        for (t1 = _this._widget.observers, t2 = t1.length, _i = 0; _i < t2; ++_i)
          t1[_i]._navigator$_navigator = _this;
      }
      for (t1 = _this._history, t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
        route = t1[_i];
        route.super$Route$changedExternalState();
        t3 = route._scopeKey;
        if (t3.get$currentState() != null)
          t3.get$currentState()._forceRebuildPage$0();
      }
    },
    dispose$0: function() {
      var t1, t2, _i, doomed, t3, route, t4, t5, _this = this;
      for (t1 = _this._widget.observers, t2 = t1.length, _i = 0; _i < t2; ++_i)
        t1[_i]._navigator$_navigator = null;
      t1 = _this._poppedRoutes;
      doomed = t1.toList$0(0);
      t2 = _this._history;
      C.JSArray_methods.addAll$1(doomed, t2);
      for (t3 = doomed.length, _i = 0; _i < doomed.length; doomed.length === t3 || (0, H.throwConcurrentModificationError)(doomed), ++_i) {
        route = doomed[_i];
        t4 = route.focusScopeNode;
        t5 = t4._parent;
        if (t5 == null || t5._firstChild === t4) {
          t5 = t4._manager;
          if (t5 != null)
            t5._markNeedsUpdate$0();
        }
        t5 = t4._parent;
        if (t5 != null)
          t5._focus_manager$_remove$1(0, t4);
        route.super$TransitionRoute$dispose();
      }
      t1.clear$0(0);
      C.JSArray_methods.set$length(t2, 0);
      _this.focusScopeNode.detach$0(0);
      _this.super$_NavigatorState_State_TickerProviderStateMixin$dispose();
    },
    get$_currentOverlayEntry: function() {
      var t1, t2;
      for (t1 = this._history, t2 = H.getTypeArgumentByIndex(t1, 0), t1 = new H.ReversedListIterable(t1, [t2]), t2 = new H.ListIterator(t1, t1.get$length(t1), [t2]); t2.moveNext$0();) {
        t1 = t2._current._overlayEntries;
        if (t1.length !== 0)
          return C.JSArray_methods.get$last(t1);
      }
      return;
    },
    _shouldAbandonInitialRoute$1: function(plannedInitialRoutes) {
      if (C.JSArray_methods.get$last(H.assertSubtype(plannedInitialRoutes, "$isList", [[K.Route,,]], "$asList")) == null)
        return true;
      return false;
    },
    _routeNamed$1$3$allowNull$arguments: function($name, allowNull, $arguments, $T) {
      var settings = new K.RouteSettings($name, this._history.length === 0, $arguments),
        t1 = [$T],
        route = H.assertSubtype(this._widget.onGenerateRoute$1(settings), "$isRoute", t1, "$asRoute");
      return route == null && !allowNull ? H.assertSubtype(this._widget.onUnknownRoute$1(settings), "$isRoute", t1, "$asRoute") : route;
    },
    _routeNamed$1$2$arguments: function($name, $arguments, $T) {
      return this._routeNamed$1$3$allowNull$arguments($name, false, $arguments, $T);
    },
    push$1$1: function(route, $T) {
      var t1, oldRoute, t2, _i, _this = this;
      H.assertSubtype(route, "$isRoute", [$T], "$asRoute");
      t1 = _this._history;
      oldRoute = t1.length !== 0 ? C.JSArray_methods.get$last(t1) : null;
      route._navigator$_navigator = _this;
      route.super$TransitionRoute$install(_this.get$_currentOverlayEntry());
      route._animationProxy = S.ProxyAnimation$(T.TransitionRoute.prototype.get$animation.call(route, route));
      route._secondaryAnimationProxy = S.ProxyAnimation$(T.TransitionRoute.prototype.get$secondaryAnimation.call(route));
      C.JSArray_methods.add$1(t1, route);
      route._navigator$_navigator.focusScopeNode.setFirstFocus$1(route.focusScopeNode);
      route.super$TransitionRoute$didPush();
      route._updateSecondaryAnimation$1(null);
      route.super$Route$didChangeNext(null);
      if (oldRoute != null) {
        oldRoute._updateSecondaryAnimation$1(route);
        oldRoute.super$Route$didChangeNext(route);
        route.super$Route$didChangePrevious(oldRoute);
        route.changedInternalState$0();
      }
      for (t1 = _this._widget.observers, t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i)
        t1[_i].didPush$2(route, oldRoute);
      _this._afterNavigation$0();
      return route._popCompleter.future;
    },
    push$1: function(route) {
      return this.push$1$1(route, P.Object);
    },
    _afterNavigation$0: function() {
      P.postEvent("Flutter.Navigation", P.LinkedHashMap_LinkedHashMap$_empty(P.String, null));
      this._cancelActivePointers$0();
    },
    maybePop$1$1: function(result, $T) {
      return this.maybePop$body$NavigatorState(H.assertSubtypeOfRuntimeType(result, $T), $T);
    },
    maybePop$1$0: function($T) {
      return this.maybePop$1$1(null, $T);
    },
    maybePop$body$NavigatorState: function(result, $T) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(P.bool),
        $async$returnValue, $async$self = this, disposition;
      var $async$maybePop$1$1 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$goto = 3;
              return P._asyncAwait(H.assertSubtype(C.JSArray_methods.get$last($async$self._history), "$isRoute", [$T], "$asRoute").willPop$0(), $async$maybePop$1$1);
            case 3:
              // returning from await.
              disposition = $async$result;
              if (disposition !== C.RoutePopDisposition_2 && $async$self._element != null) {
                if (disposition === C.RoutePopDisposition_0)
                  $async$self.pop$1$1(result, $T);
                $async$returnValue = true;
                // goto return
                $async$goto = 1;
                break;
              }
              $async$returnValue = false;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$maybePop$1$1, $async$completer);
    },
    pop$1$1: function(result, $T) {
      var t1, route, t2, t3, _i, _this = this;
      H.assertSubtypeOfRuntimeType(result, $T);
      t1 = _this._history;
      route = C.JSArray_methods.get$last(t1);
      if (route.didPop$1(null))
        if (t1.length > 1) {
          t1.pop();
          if (route._navigator$_navigator != null)
            _this._poppedRoutes.add$1(0, route);
          t2 = C.JSArray_methods.get$last(t1);
          t2._updateSecondaryAnimation$1(route);
          t2.super$Route$didPopNext(route);
          for (t2 = _this._widget.observers, t3 = t2.length, _i = 0; _i < t2.length; t2.length === t3 || (0, H.throwConcurrentModificationError)(t2), ++_i)
            t2[_i].didPop$2(route, C.JSArray_methods.get$last(t1));
        } else
          return false;
      _this._afterNavigation$0();
      return true;
    },
    pop$1$0: function($T) {
      return this.pop$1$1(null, $T);
    },
    didStartUserGesture$0: function() {
      var t1, route, t2, t3, previousRoute, _i;
      if (++this._userGesturesInProgress === 1) {
        t1 = this._history;
        route = C.JSArray_methods.get$last(t1);
        if (!route.get$willHandlePopInternally() && t1.length > 1) {
          t2 = t1.length;
          t3 = t2 - 2;
          if (t3 < 0)
            return H.ioore(t1, t3);
          previousRoute = t1[t3];
        } else
          previousRoute = null;
        for (t1 = this._widget.observers, t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i)
          t1[_i].didStartUserGesture$2(route, previousRoute);
      }
    },
    didStopUserGesture$0: function() {
      var t1, t2, _i;
      if (--this._userGesturesInProgress === 0)
        for (t1 = this._widget.observers, t2 = t1.length, _i = 0; _i < t2; ++_i)
          t1[_i].toString;
    },
    _handlePointerDown$1: function($event) {
      this._activePointers.add$1(0, $event.pointer);
    },
    _handlePointerUpOrCancel$1: function($event) {
      this._activePointers.remove$1(0, $event.pointer);
    },
    _cancelActivePointers$0: function() {
      if ($.SchedulerBinding__instance.SchedulerBinding__schedulerPhase === C.SchedulerPhase_0) {
        var t1 = $.GlobalKey__registry.$index(0, this._overlayKey);
        this.setState$1(new K.NavigatorState__cancelActivePointers_closure(H.interceptedTypeCheck(t1 == null ? null : t1.ancestorRenderObjectOfType$1(C.C_TypeMatcher), "$isRenderAbsorbPointer")));
      }
      C.JSArray_methods.forEach$1(this._activePointers.toList$0(0), $.WidgetsBinding__instance.get$cancelPointer());
    },
    build$1: function(context) {
      var _this = this,
        t1 = _this.get$_handlePointerUpOrCancel();
      return T.Listener$(C.HitTestBehavior_0, new T.AbsorbPointer(false, new L.FocusScope(_this.focusScopeNode, true, new X.Overlay(_this._initialOverlayEntries, _this._overlayKey), null), null), t1, _this.get$_handlePointerDown(), null, t1);
    },
    $isTickerProvider: 1,
    $asState: function() {
      return [K.Navigator];
    },
    $asTickerProviderStateMixin: function() {
      return [K.Navigator];
    }
  };
  K.NavigatorState_initState_closure.prototype = {
    call$1: function(route) {
      return H.interceptedTypeCheck(route, "$isRoute") != null;
    },
    $signature: 173
  };
  K.NavigatorState__cancelActivePointers_closure.prototype = {
    call$0: function() {
      var t1 = this.absorber;
      if (t1 != null)
        t1.set$absorbing(true);
    },
    $signature: 0
  };
  K._NavigatorState_State_TickerProviderStateMixin.prototype = {
    dispose$0: function() {
      this.super$State$dispose();
    },
    didChangeDependencies$0: function() {
      var muted = !U.TickerMode_of(this._element),
        t1 = this.TickerProviderStateMixin__tickers;
      if (t1 != null)
        for (t1 = P._LinkedHashSetIterator$(t1, t1._collection$_modifications, H.getTypeArgumentByIndex(t1, 0)); t1.moveNext$0();)
          t1._collection$_current.set$muted(0, muted);
      this.super$State$didChangeDependencies();
    },
    set$_tickers: function(_tickers) {
      this.TickerProviderStateMixin__tickers = H.assertSubtype(_tickers, "$isSet", [M.Ticker], "$asSet");
    }
  };
  U.Notification0.prototype = {
    visitAncestor$1: function(element) {
      var widget;
      if (!!element.$isStatelessElement) {
        widget = H.interceptedTypeCheck(N.Element.prototype.get$widget.call(element), "$isStatelessWidget");
        if (!!J.getInterceptor$(widget).$isNotificationListener)
          if (widget._notification_listener$_dispatch$2(this, element))
            return false;
      }
      return true;
    },
    toString$0: function(_) {
      var description = H.setRuntimeTypeInfo([], [P.String]);
      this.debugFillDescription$1(description);
      return new H.TypeImpl(H.getRti(this)).toString$0(0) + "(" + C.JSArray_methods.join$1(description, ", ") + ")";
    },
    debugFillDescription$1: function(description) {
      H.assertSubtype(description, "$isList", [P.String], "$asList");
    }
  };
  U.NotificationListener.prototype = {
    _notification_listener$_dispatch$2: function(notification, element) {
      var t1 = H.checkSubtypeOfRuntimeType(notification, H.getTypeArgumentByIndex(this, 0));
      if (t1)
        return this.onNotification.call$1(notification) === true;
      return false;
    },
    build$1: function(context) {
      return this.child;
    }
  };
  U.LayoutChangedNotification.prototype = {};
  X.OverlayEntry.prototype = {
    set$opaque: function(value) {
      if (this._opaque === value)
        return;
      this._opaque = value;
      this._overlay._didChangeEntryOpacity$0();
    },
    remove$0: function(_) {
      var t1, t2, _this = this,
        overlay = _this._overlay;
      _this._overlay = null;
      t1 = $.SchedulerBinding__instance;
      if (t1.SchedulerBinding__schedulerPhase === C.SchedulerPhase_3) {
        t1.toString;
        t2 = H.functionTypeCheck(new X.OverlayEntry_remove_closure(_this, overlay), {func: 1, ret: -1, args: [P.Duration]});
        C.JSArray_methods.add$1(t1.SchedulerBinding__postFrameCallbacks, t2);
      } else
        overlay._overlay$_remove$1(0, _this);
    },
    markNeedsBuild$0: function() {
      var t1 = this._key.get$currentState();
      if (t1 != null)
        t1._markNeedsBuild$0();
    }
  };
  X.OverlayEntry_remove_closure.prototype = {
    call$1: function(duration) {
      H.interceptedTypeCheck(duration, "$isDuration");
      this.overlay._overlay$_remove$1(0, this.$this);
    },
    $signature: 24
  };
  X._OverlayEntry.prototype = {
    createState$0: function() {
      return new X._OverlayEntryState(C._StateLifecycle_0);
    }
  };
  X._OverlayEntryState.prototype = {
    build$1: function(context) {
      return this._widget.entry.builder.call$1(context);
    },
    _markNeedsBuild$0: function() {
      this.setState$1(new X._OverlayEntryState__markNeedsBuild_closure());
    },
    $asState: function() {
      return [X._OverlayEntry];
    }
  };
  X._OverlayEntryState__markNeedsBuild_closure.prototype = {
    call$0: function() {
    },
    $signature: 0
  };
  X.Overlay.prototype = {
    createState$0: function() {
      return new X.OverlayState(H.setRuntimeTypeInfo([], [X.OverlayEntry]), null, C._StateLifecycle_0);
    }
  };
  X.OverlayState.prototype = {
    initState$0: function() {
      this.super$State$initState();
      this.insertAll$1(0, this._widget.initialEntries);
    },
    insert$1: function(_, entry) {
      entry._overlay = this;
      this.setState$1(new X.OverlayState_insert_closure(this, null, entry));
    },
    insertAll$2$above: function(_, entries, above) {
      var t1, _i;
      H.assertSubtype(entries, "$isIterable", [X.OverlayEntry], "$asIterable");
      t1 = entries.length;
      if (t1 === 0)
        return;
      for (_i = 0; _i < t1; ++_i)
        entries[_i]._overlay = this;
      this.setState$1(new X.OverlayState_insertAll_closure(this, above, entries));
    },
    insertAll$1: function($receiver, entries) {
      return this.insertAll$2$above($receiver, entries, null);
    },
    _overlay$_remove$1: function(_, entry) {
      if (this._element != null) {
        C.JSArray_methods.remove$1(this._entries, entry);
        this.setState$1(new X.OverlayState__remove_closure());
      }
    },
    _didChangeEntryOpacity$0: function() {
      this.setState$1(new X.OverlayState__didChangeEntryOpacity_closure());
    },
    build$1: function(context) {
      var i, onstage, entry,
        t1 = [N.Widget],
        onstageChildren = H.setRuntimeTypeInfo([], t1),
        offstageChildren = H.setRuntimeTypeInfo([], t1);
      for (t1 = this._entries, i = t1.length - 1, onstage = true; i >= 0; --i) {
        if (i >= t1.length)
          return H.ioore(t1, i);
        entry = t1[i];
        if (onstage) {
          C.JSArray_methods.add$1(onstageChildren, new X._OverlayEntry(entry, entry._key));
          onstage = !entry._opaque || false;
        } else if (entry._maintainState)
          C.JSArray_methods.add$1(offstageChildren, new U.TickerMode(false, new X._OverlayEntry(entry, entry._key), null));
      }
      return new X._Theatre(T.Stack$(C.AlignmentDirectional_m1_m1, new H.ReversedListIterable(onstageChildren, [H.getTypeArgumentByIndex(onstageChildren, 0)]).toList$1$growable(0, false), C.StackFit_1), offstageChildren, null);
    },
    $isTickerProvider: 1,
    $asState: function() {
      return [X.Overlay];
    },
    $asTickerProviderStateMixin: function() {
      return [X.Overlay];
    }
  };
  X.OverlayState_insert_closure.prototype = {
    call$0: function() {
      var t1 = this.$this._entries,
        index = t1.length;
      C.JSArray_methods.insert$2(t1, index, this.entry);
    },
    $signature: 0
  };
  X.OverlayState_insertAll_closure.prototype = {
    call$0: function() {
      var t1 = this.above,
        t2 = this.$this._entries,
        index = t1 == null ? t2.length : C.JSArray_methods.indexOf$1(t2, t1) + 1;
      C.JSArray_methods.insertAll$2(t2, index, this.entries);
    },
    $signature: 0
  };
  X.OverlayState__remove_closure.prototype = {
    call$0: function() {
    },
    $signature: 0
  };
  X.OverlayState__didChangeEntryOpacity_closure.prototype = {
    call$0: function() {
    },
    $signature: 0
  };
  X._Theatre.prototype = {
    createElement$0: function(_) {
      var t1 = P.HashSet_HashSet(N.Element),
        t2 = ($.Element__nextHashCode + 1) % 16777215;
      $.Element__nextHashCode = t2;
      return new X._TheatreElement(t1, t2, this, C._ElementLifecycle_0);
    },
    createRenderObject$1: function(context) {
      var t1 = new X._RenderTheatre(0, null, null, null);
      t1.get$isRepaintBoundary();
      t1.get$alwaysNeedsCompositing();
      t1._needsCompositing = false;
      return t1;
    }
  };
  X._TheatreElement.prototype = {
    get$widget: function() {
      return H.interceptedTypeCheck(N.RenderObjectElement.prototype.get$widget.call(this), "$is_Theatre");
    },
    get$renderObject: function() {
      return H.interceptedTypeCheck(N.RenderObjectElement.prototype.get$renderObject.call(this), "$is_RenderTheatre");
    },
    insertChildRenderObject$2: function(child, slot) {
      var t1, t2, t3;
      H.interceptedTypeCheck(child, "$isRenderBox");
      if (J.$eq$(slot, $.$get$_TheatreElement__onstageSlot()))
        H.interceptedTypeCheck(N.RenderObjectElement.prototype.get$renderObject.call(this), "$is_RenderTheatre").set$child(H.interceptedTypeCheck(child, "$isRenderStack"));
      else {
        t1 = H.interceptedTypeCheck(N.RenderObjectElement.prototype.get$renderObject.call(this), "$is_RenderTheatre");
        t2 = H.interceptedTypeCheck(slot == null ? null : slot.get$renderObject(), "$isRenderBox");
        t1.toString;
        t3 = H.getRuntimeTypeArgument(t1, "ContainerRenderObjectMixin", 0);
        H.assertSubtypeOfRuntimeType(child, t3);
        H.assertSubtypeOfRuntimeType(t2, t3);
        t1.adoptChild$1(child);
        t1._insertIntoChildList$2$after(child, t2);
      }
    },
    moveChildRenderObject$2: function(child, slot) {
      var t1, t2, t3, _this = this;
      H.interceptedTypeCheck(child, "$isRenderBox");
      if (J.$eq$(slot, $.$get$_TheatreElement__onstageSlot())) {
        t1 = H.interceptedTypeCheck(N.RenderObjectElement.prototype.get$renderObject.call(_this), "$is_RenderTheatre");
        t1.toString;
        H.assertSubtypeOfRuntimeType(child, H.getRuntimeTypeArgument(t1, "ContainerRenderObjectMixin", 0));
        t1._removeFromChildList$1(child);
        t1.dropChild$1(child);
        H.interceptedTypeCheck(N.RenderObjectElement.prototype.get$renderObject.call(_this), "$is_RenderTheatre").set$child(H.interceptedTypeCheck(child, "$isRenderStack"));
      } else if (H.interceptedTypeCheck(N.RenderObjectElement.prototype.get$renderObject.call(_this), "$is_RenderTheatre").RenderObjectWithChildMixin__child == child) {
        H.interceptedTypeCheck(N.RenderObjectElement.prototype.get$renderObject.call(_this), "$is_RenderTheatre").set$child(null);
        t1 = H.interceptedTypeCheck(N.RenderObjectElement.prototype.get$renderObject.call(_this), "$is_RenderTheatre");
        t2 = H.interceptedTypeCheck(slot == null ? null : slot.get$renderObject(), "$isRenderBox");
        t1.toString;
        t3 = H.getRuntimeTypeArgument(t1, "ContainerRenderObjectMixin", 0);
        H.assertSubtypeOfRuntimeType(child, t3);
        H.assertSubtypeOfRuntimeType(t2, t3);
        t1.adoptChild$1(child);
        t1._insertIntoChildList$2$after(child, t2);
      } else {
        t1 = H.interceptedTypeCheck(N.RenderObjectElement.prototype.get$renderObject.call(_this), "$is_RenderTheatre");
        t1.move$2$after(child, H.interceptedTypeCheck(slot == null ? null : slot.get$renderObject(), "$isRenderBox"));
      }
    },
    removeChildRenderObject$1: function(child) {
      var t1;
      H.interceptedTypeCheck(child, "$isRenderBox");
      if (H.interceptedTypeCheck(N.RenderObjectElement.prototype.get$renderObject.call(this), "$is_RenderTheatre").RenderObjectWithChildMixin__child == child)
        H.interceptedTypeCheck(N.RenderObjectElement.prototype.get$renderObject.call(this), "$is_RenderTheatre").set$child(null);
      else {
        t1 = H.interceptedTypeCheck(N.RenderObjectElement.prototype.get$renderObject.call(this), "$is_RenderTheatre");
        t1.toString;
        H.assertSubtypeOfRuntimeType(child, H.getRuntimeTypeArgument(t1, "ContainerRenderObjectMixin", 0));
        t1._removeFromChildList$1(child);
        t1.dropChild$1(child);
      }
    },
    visitChildren$1: function(visitor) {
      var t1, t2, t3, _i, child;
      H.functionTypeCheck(visitor, {func: 1, ret: -1, args: [N.Element]});
      t1 = this._onstage;
      if (t1 != null)
        visitor.call$1(t1);
      for (t1 = this._offstage, t2 = t1.length, t3 = this._forgottenOffstageChildren, _i = 0; _i < t2; ++_i) {
        child = t1[_i];
        if (!t3.contains$1(0, child))
          visitor.call$1(child);
      }
    },
    forgetChild$1: function(child) {
      if (child.$eq(0, this._onstage))
        this._onstage = null;
      else
        this._forgottenOffstageChildren.add$1(0, child);
      return true;
    },
    mount$2: function($parent, newSlot) {
      var t1, previousChild, i, newChild, _this = this;
      _this.super$RenderObjectElement$mount($parent, newSlot);
      _this._onstage = _this.updateChild$3(_this._onstage, H.interceptedTypeCheck(N.RenderObjectElement.prototype.get$widget.call(_this), "$is_Theatre").onstage, $.$get$_TheatreElement__onstageSlot());
      t1 = new Array(H.interceptedTypeCheck(N.RenderObjectElement.prototype.get$widget.call(_this), "$is_Theatre").offstage.length);
      t1.fixed$length = Array;
      _this.set$_offstage(H.setRuntimeTypeInfo(t1, [N.Element]));
      for (previousChild = null, i = 0; i < _this._offstage.length; ++i, previousChild = newChild) {
        t1 = H.interceptedTypeCheck(N.RenderObjectElement.prototype.get$widget.call(_this), "$is_Theatre").offstage;
        if (i >= t1.length)
          return H.ioore(t1, i);
        newChild = _this.inflateWidget$2(t1[i], previousChild);
        t1 = _this._offstage;
        (t1 && C.JSArray_methods).$indexSet(t1, i, newChild);
      }
    },
    update$1: function(_, newWidget) {
      var t1, _this = this;
      _this.super$RenderObjectElement$update(0, H.interceptedTypeCheck(newWidget, "$is_Theatre"));
      _this._onstage = _this.updateChild$3(_this._onstage, H.interceptedTypeCheck(N.RenderObjectElement.prototype.get$widget.call(_this), "$is_Theatre").onstage, $.$get$_TheatreElement__onstageSlot());
      t1 = _this._forgottenOffstageChildren;
      _this.set$_offstage(_this.updateChildren$3$forgottenChildren(_this._offstage, H.interceptedTypeCheck(N.RenderObjectElement.prototype.get$widget.call(_this), "$is_Theatre").offstage, t1));
      t1.clear$0(0);
    },
    set$_offstage: function(_offstage) {
      this._offstage = H.assertSubtype(_offstage, "$isList", [N.Element], "$asList");
    }
  };
  X._RenderTheatre.prototype = {
    setupParentData$1: function(child) {
      if (!(child.parentData instanceof K.StackParentData))
        child.parentData = new K.StackParentData(null, null, C.Offset_0_0);
    },
    redepthChildren$0: function() {
      var t1 = this.RenderObjectWithChildMixin__child;
      if (t1 != null)
        this.redepthChild$1(t1);
      this.super$ContainerRenderObjectMixin$redepthChildren();
    },
    visitChildren$1: function(visitor) {
      var t1;
      H.functionTypeCheck(visitor, {func: 1, ret: -1, args: [K.RenderObject]});
      t1 = this.RenderObjectWithChildMixin__child;
      if (t1 != null)
        visitor.call$1(t1);
      this.super$ContainerRenderObjectMixin$visitChildren(visitor);
    },
    debugDescribeChildren$0: function() {
      var child, count,
        children = H.setRuntimeTypeInfo([], [Y.DiagnosticsNode]),
        t1 = this.RenderObjectWithChildMixin__child;
      if (t1 != null)
        C.JSArray_methods.add$1(children, new Y._DiagnosticableTreeNode(t1, "onstage", true, true, null));
      child = this.ContainerRenderObjectMixin__firstChild;
      if (child != null)
        for (count = 1; true;) {
          t1 = "offstage " + count;
          child.toString;
          C.JSArray_methods.add$1(children, new Y._DiagnosticableTreeNode(child, t1, true, true, C.DiagnosticsTreeStyle_1));
          if (child == this.ContainerRenderObjectMixin__lastChild)
            break;
          child = H.interceptedTypeCheck(child.parentData, "$isStackParentData").ContainerParentDataMixin_nextSibling;
          ++count;
        }
      else
        C.JSArray_methods.add$1(children, Y.DiagnosticsNode_DiagnosticsNode$message("no offstage children", C.DiagnosticsTreeStyle_1));
      return children;
    },
    visitChildrenForSemantics$1: function(visitor) {
      var t1;
      H.functionTypeCheck(visitor, {func: 1, ret: -1, args: [K.RenderObject]});
      t1 = this.RenderObjectWithChildMixin__child;
      if (t1 != null)
        visitor.call$1(t1);
    },
    $asRenderObjectWithChildMixin: function() {
      return [K.RenderStack];
    },
    $asContainerRenderObjectMixin: function() {
      return [S.RenderBox, K.StackParentData];
    }
  };
  X._OverlayState_State_TickerProviderStateMixin.prototype = {
    dispose$0: function() {
      this.super$State$dispose();
    },
    didChangeDependencies$0: function() {
      var muted = !U.TickerMode_of(this._element),
        t1 = this.TickerProviderStateMixin__tickers;
      if (t1 != null)
        for (t1 = P._LinkedHashSetIterator$(t1, t1._collection$_modifications, H.getTypeArgumentByIndex(t1, 0)); t1.moveNext$0();)
          t1._collection$_current.set$muted(0, muted);
      this.super$State$didChangeDependencies();
    },
    set$_tickers: function(_tickers) {
      this.TickerProviderStateMixin__tickers = H.assertSubtype(_tickers, "$isSet", [M.Ticker], "$asSet");
    }
  };
  X.__RenderTheatre_RenderBox_RenderObjectWithChildMixin.prototype = {
    attach$1: function(owner) {
      var t1;
      H.interceptedTypeCheck(owner, "$isPipelineOwner");
      this.super$RenderObject$attach(owner);
      t1 = this.RenderObjectWithChildMixin__child;
      if (t1 != null)
        t1.attach$1(owner);
    },
    detach$0: function(_) {
      var t1;
      this.super$AbstractNode$detach(0);
      t1 = this.RenderObjectWithChildMixin__child;
      if (t1 != null)
        t1.detach$0(0);
    },
    set$_object$_child: function(_child) {
      this.RenderObjectWithChildMixin__child = H.assertSubtypeOfRuntimeType(_child, H.getRuntimeTypeArgument(this, "RenderObjectWithChildMixin", 0));
    }
  };
  X.__RenderTheatre_RenderBox_RenderObjectWithChildMixin_RenderProxyBoxMixin.prototype = {
    computeDistanceToActualBaseline$1: function(baseline) {
      var t1 = this.RenderObjectWithChildMixin__child;
      if (t1 != null)
        return t1.getDistanceToActualBaseline$1(baseline);
      return this.super$RenderBox$computeDistanceToActualBaseline(baseline);
    }
  };
  X.__RenderTheatre_RenderBox_RenderObjectWithChildMixin_RenderProxyBoxMixin_ContainerRenderObjectMixin.prototype = {
    attach$1: function(owner) {
      var child;
      H.interceptedTypeCheck(owner, "$isPipelineOwner");
      this.super$__RenderTheatre_RenderBox_RenderObjectWithChildMixin$attach(owner);
      child = this.ContainerRenderObjectMixin__firstChild;
      for (; child != null;) {
        child.attach$1(owner);
        child = H.interceptedTypeCheck(child.parentData, "$isStackParentData").ContainerParentDataMixin_nextSibling;
      }
    },
    detach$0: function(_) {
      var child;
      this.super$__RenderTheatre_RenderBox_RenderObjectWithChildMixin$detach(0);
      child = this.ContainerRenderObjectMixin__firstChild;
      for (; child != null;) {
        child.detach$0(0);
        child = H.interceptedTypeCheck(child.parentData, "$isStackParentData").ContainerParentDataMixin_nextSibling;
      }
    },
    set$_object$_firstChild: function(_firstChild) {
      this.ContainerRenderObjectMixin__firstChild = H.assertSubtypeOfRuntimeType(_firstChild, H.getRuntimeTypeArgument(this, "ContainerRenderObjectMixin", 0));
    },
    set$_object$_lastChild: function(_lastChild) {
      this.ContainerRenderObjectMixin__lastChild = H.assertSubtypeOfRuntimeType(_lastChild, H.getRuntimeTypeArgument(this, "ContainerRenderObjectMixin", 0));
    }
  };
  L.GlowingOverscrollIndicator.prototype = {
    createState$0: function() {
      var t1 = P.bool;
      return new L._GlowingOverscrollIndicatorState(P.LinkedHashMap_LinkedHashMap$_literal([false, true, true, true], t1, t1), null, C._StateLifecycle_0);
    },
    notificationPredicate$1: function(arg0) {
      return G.scroll_notification__defaultScrollNotificationPredicate$closure().call$1(arg0);
    },
    get$child: function() {
      return this.child;
    }
  };
  L._GlowingOverscrollIndicatorState.prototype = {
    initState$0: function() {
      var t1, t2, _this = this;
      _this.super$State$initState();
      t1 = _this._widget;
      t2 = t1.color;
      _this._leadingController = L._GlowController$(G.axisDirectionToAxis(t1.axisDirection), t2, _this);
      t2 = _this._widget;
      t1 = t2.color;
      t1 = L._GlowController$(G.axisDirectionToAxis(t2.axisDirection), t1, _this);
      _this._trailingController = t1;
      _this._leadingAndTrailingListener = B._MergingListenable$(H.setRuntimeTypeInfo([_this._leadingController, t1], [B.Listenable]));
    },
    didUpdateWidget$1: function(oldWidget) {
      var _this = this;
      H.interceptedTypeCheck(oldWidget, "$isGlowingOverscrollIndicator");
      _this.super$State$didUpdateWidget(oldWidget);
      if (!J.$eq$(oldWidget.color, _this._widget.color) || G.axisDirectionToAxis(oldWidget.axisDirection) != G.axisDirectionToAxis(_this._widget.axisDirection)) {
        _this._leadingController.set$color(0, _this._widget.color);
        _this._leadingController.set$axis(G.axisDirectionToAxis(_this._widget.axisDirection));
        _this._trailingController.set$color(0, _this._widget.color);
        _this._trailingController.set$axis(G.axisDirectionToAxis(_this._widget.axisDirection));
      }
    },
    _handleScrollNotification$1: function(notification) {
      var t1, controller, isLeading, t2, velocity, t3, renderer, size, position, _this = this;
      H.interceptedTypeCheck(notification, "$isScrollNotification");
      if (!H.boolConversionCheck(_this._widget.notificationPredicate$1(notification)))
        return false;
      if (!!notification.$isOverscrollNotification) {
        t1 = notification.overscroll;
        if (t1 < 0)
          controller = _this._leadingController;
        else
          controller = t1 > 0 ? _this._trailingController : null;
        isLeading = controller == _this._leadingController;
        if (!J.$eq$(_this._lastNotificationType, C.Type_OverscrollNotification_Ps9)) {
          _this._element.visitAncestorElements$1(new L.OverscrollIndicatorNotification(isLeading, 0).get$visitAncestor());
          _this._accepted.$indexSet(0, isLeading, true);
        }
        if (H.boolConversionCheck(_this._accepted.$index(0, isLeading))) {
          t2 = notification.velocity;
          if (t2 !== 0) {
            t1 = controller._pullRecedeTimer;
            if (t1 != null)
              t1.cancel$0(0);
            controller._pullRecedeTimer = null;
            velocity = C.JSNumber_methods.clamp$2(Math.abs(t2), 100, 10000);
            t1 = controller._glowOpacityTween;
            if (controller._overscroll_indicator$_state === C._GlowState_0)
              t2 = 0.3;
            else {
              t2 = controller._glowOpacity;
              t3 = t2._evaluatable;
              t2 = H.assertSubtype(t2.parent, "$isAnimation", [P.double], "$asAnimation");
              t2 = t3.transform$1(0, t2.get$value(t2));
            }
            t1.set$begin(t2);
            t1.set$end(0, C.JSNumber_methods.clamp$2(velocity * 0.00006, t1.begin, 0.5));
            t1 = controller._glowSizeTween;
            t2 = controller._glowSize;
            t3 = t2._evaluatable;
            t2 = H.assertSubtype(t2.parent, "$isAnimation", [P.double], "$asAnimation");
            t1.set$begin(t3.transform$1(0, t2.get$value(t2)));
            t1.set$end(0, Math.min(0.025 + 75e-8 * velocity * velocity, 1));
            controller._glowController.duration = P.Duration$(0, C.JSDouble_methods.round$0(0.15 + velocity * 0.02), 0);
            controller._glowController.forward$1$from(0, 0);
            controller._displacement = 0.5;
            controller._overscroll_indicator$_state = C._GlowState_1;
          } else {
            t2 = notification.dragDetails;
            if (t2 != null) {
              renderer = H.interceptedTypeCheck(notification.context.get$renderObject(), "$isRenderBox");
              size = renderer._size;
              position = renderer.globalToLocal$1(t2.globalPosition);
              switch (G.axisDirectionToAxis(notification.metrics.axisDirection)) {
                case C.Axis_0:
                  t2 = size._dx;
                  t3 = size._dy;
                  controller.pull$4(0, Math.abs(t1), t2, J.clamp$2$n(position._dy, 0, t3), t3);
                  break;
                case C.Axis_1:
                  t2 = size._dy;
                  t3 = size._dx;
                  controller.pull$4(0, Math.abs(t1), t2, J.clamp$2$n(position._dx, 0, t3), t3);
                  break;
              }
            }
          }
        }
      } else if (!!notification.$isScrollEndNotification || !!notification.$isScrollUpdateNotification)
        if (notification.get$dragDetails() != null) {
          _this._leadingController.scrollEnd$0();
          _this._trailingController.scrollEnd$0();
        }
      _this._lastNotificationType = new H.TypeImpl(H.getRti(notification));
      return false;
    },
    dispose$0: function() {
      this._leadingController.dispose$0();
      this._trailingController.dispose$0();
      this.super$__GlowingOverscrollIndicatorState_State_TickerProviderStateMixin$dispose();
    },
    build$1: function(context) {
      var _this = this,
        t1 = _this._widget,
        t2 = _this._leadingController,
        t3 = _this._trailingController,
        t4 = t1.axisDirection,
        t5 = _this._leadingAndTrailingListener;
      return U.NotificationListener$(new T.RepaintBoundary(T.CustomPaint$(new T.RepaintBoundary(t1.child, null), new L._GlowingOverscrollIndicatorPainter(t2, t3, t4, t5), null), null), _this.get$_handleScrollNotification(), G.ScrollNotification);
    },
    $isTickerProvider: 1,
    $asState: function() {
      return [L.GlowingOverscrollIndicator];
    },
    $asTickerProviderStateMixin: function() {
      return [L.GlowingOverscrollIndicator];
    }
  };
  L._GlowState.prototype = {
    toString$0: function(_) {
      return this._overscroll_indicator$_name;
    }
  };
  L._GlowController.prototype = {
    set$color: function(_, value) {
      if (J.$eq$(this._overscroll_indicator$_color, value))
        return;
      this._overscroll_indicator$_color = value;
      this.notifyListeners$0();
    },
    set$axis: function(value) {
      if (this._axis == value)
        return;
      this._axis = value;
      this.notifyListeners$0();
    },
    dispose$0: function() {
      var t1, _this = this;
      _this._glowController.dispose$0();
      t1 = _this._displacementTicker;
      t1._creator.TickerProviderStateMixin__tickers.remove$1(0, t1);
      t1.super$Ticker$dispose();
      t1 = _this._pullRecedeTimer;
      if (t1 != null)
        t1.cancel$0(0);
      _this.super$ChangeNotifier$dispose();
    },
    pull$4: function(_, overscroll, extent, crossAxisOffset, crossExtent) {
      var t2, t3, t4, height, t5, _this = this,
        t1 = _this._pullRecedeTimer;
      if (t1 != null)
        t1.cancel$0(0);
      _this._pullDistance = _this._pullDistance + overscroll / 200;
      t1 = _this._glowOpacityTween;
      t2 = _this._glowOpacity;
      t3 = t2._evaluatable;
      t4 = [P.double];
      t2 = H.assertSubtype(t2.parent, "$isAnimation", t4, "$asAnimation");
      t1.set$begin(t3.transform$1(0, t2.get$value(t2)));
      t2 = _this._glowOpacity;
      t3 = t2._evaluatable;
      t2 = H.assertSubtype(t2.parent, "$isAnimation", t4, "$asAnimation");
      t2 = t3.transform$1(0, t2.get$value(t2));
      if (typeof extent !== "number")
        return H.iae(extent);
      t1.set$end(0, Math.min(J.$add$ansx(t2, overscroll / extent * 0.8), 0.5));
      if (typeof crossExtent !== "number")
        return crossExtent.$mul();
      height = Math.min(extent, crossExtent * 0.20096189432249995);
      t2 = _this._glowSizeTween;
      t1 = _this._glowSize;
      t3 = t1._evaluatable;
      t1 = H.assertSubtype(t1.parent, "$isAnimation", t4, "$asAnimation");
      t2.set$begin(t3.transform$1(0, t1.get$value(t1)));
      t1 = Math.sqrt(_this._pullDistance * height);
      t3 = _this._glowSize;
      t5 = t3._evaluatable;
      t4 = H.assertSubtype(t3.parent, "$isAnimation", t4, "$asAnimation");
      t2.set$end(0, Math.max(1 - 1 / (0.7 * t1), H.checkNum(t5.transform$1(0, t4.get$value(t4)))));
      t4 = crossAxisOffset / crossExtent;
      _this._displacementTarget = t4;
      if (t4 !== _this._displacement) {
        if (!_this._displacementTicker.get$isTicking())
          _this._displacementTicker.start$0(0);
      } else {
        _this._displacementTicker.stop$0(0);
        _this._displacementTickerLastElapsed = null;
      }
      t1 = _this._glowController;
      t1.duration = C.Duration_167000;
      if (_this._overscroll_indicator$_state !== C._GlowState_2) {
        t1.forward$1$from(0, 0);
        _this._overscroll_indicator$_state = C._GlowState_2;
      } else {
        t1 = t1._ticker;
        if (!(t1 != null && t1._future != null))
          _this.notifyListeners$0();
      }
      _this._pullRecedeTimer = P.Timer_Timer(C.Duration_167000, new L._GlowController_pull_closure(_this));
    },
    scrollEnd$0: function() {
      if (this._overscroll_indicator$_state === C._GlowState_2)
        this._recede$1(C.Duration_600000);
    },
    _changePhase$1: function($status) {
      var _this = this;
      if (H.interceptedTypeCheck($status, "$isAnimationStatus") !== C.AnimationStatus_3)
        return;
      switch (_this._overscroll_indicator$_state) {
        case C._GlowState_1:
          _this._recede$1(C.Duration_600000);
          break;
        case C._GlowState_3:
          _this._overscroll_indicator$_state = C._GlowState_0;
          _this._pullDistance = 0;
          break;
        case C._GlowState_2:
        case C._GlowState_0:
          break;
      }
    },
    _recede$1: function(duration) {
      var t2, t3, t4, _this = this,
        t1 = _this._overscroll_indicator$_state;
      if (t1 === C._GlowState_3 || t1 === C._GlowState_0)
        return;
      t1 = _this._pullRecedeTimer;
      if (t1 != null)
        t1.cancel$0(0);
      _this._pullRecedeTimer = null;
      t1 = _this._glowOpacityTween;
      t2 = _this._glowOpacity;
      t3 = t2._evaluatable;
      t4 = [P.double];
      t2 = H.assertSubtype(t2.parent, "$isAnimation", t4, "$asAnimation");
      t1.set$begin(t3.transform$1(0, t2.get$value(t2)));
      t1.set$end(0, 0);
      t1 = _this._glowSizeTween;
      t2 = _this._glowSize;
      t3 = t2._evaluatable;
      t4 = H.assertSubtype(t2.parent, "$isAnimation", t4, "$asAnimation");
      t1.set$begin(t3.transform$1(0, t4.get$value(t4)));
      t1.set$end(0, 0);
      t1 = _this._glowController;
      t1.duration = duration;
      t1.forward$1$from(0, 0);
      _this._overscroll_indicator$_state = C._GlowState_3;
    },
    _tickDisplacement$1: function(elapsed) {
      var t2, _this = this,
        t1 = _this._displacementTickerLastElapsed;
      if (t1 != null) {
        t1 = t1._duration;
        t2 = _this._displacementTarget;
        _this._displacement = t2 - (t2 - _this._displacement) * Math.pow(2, -(elapsed._duration - t1) / $.$get$_GlowController__crossAxisHalfTime()._duration);
        _this.notifyListeners$0();
      }
      if (B.nearEqual(_this._displacementTarget, _this._displacement, 0.001)) {
        _this._displacementTicker.stop$0(0);
        _this._displacementTickerLastElapsed = null;
      } else
        _this._displacementTickerLastElapsed = elapsed;
    },
    paint$2: function(canvas, size) {
      var baseGlowScale, radius, height, t4, scaleY, paint, t5, t6, _this = this,
        t1 = _this._glowOpacity,
        t2 = t1._evaluatable,
        t3 = [P.double];
      t1 = H.assertSubtype(t1.parent, "$isAnimation", t3, "$asAnimation");
      if (J.$eq$(t2.transform$1(0, t1.get$value(t1)), 0))
        return;
      t1 = size._dx;
      t2 = size._dy;
      if (typeof t1 !== "number")
        return t1.$gt();
      if (typeof t2 !== "number")
        return H.iae(t2);
      baseGlowScale = t1 > t2 ? t2 / t1 : 1;
      radius = t1 * 3 / 2;
      height = Math.min(t2, t1 * 0.20096189432249995);
      t2 = _this._glowSize;
      t4 = t2._evaluatable;
      t2 = H.assertSubtype(t2.parent, "$isAnimation", t3, "$asAnimation");
      scaleY = J.$mul$ns(t4.transform$1(0, t2.get$value(t2)), baseGlowScale);
      t2 = _this._displacement;
      paint = new Q.Paint(new Q.PaintData());
      t4 = _this._overscroll_indicator$_color;
      t5 = _this._glowOpacity;
      t6 = t5._evaluatable;
      t3 = H.assertSubtype(t5.parent, "$isAnimation", t3, "$asAnimation");
      t3 = t6.transform$1(0, t3.get$value(t3));
      t4.toString;
      H.doubleTypeCheck(t3);
      if (typeof t3 !== "number")
        return H.iae(t3);
      t3 = C.JSNumber_methods.round$0(255 * t3);
      t4 = t4._value;
      paint.set$color(0, Q.Color$fromARGB(t3, (16711680 & t4) >>> 16, (65280 & t4) >>> 8, (255 & t4) >>> 0));
      canvas.save$0(0);
      canvas.scale$2(0, 1, scaleY);
      canvas.clipRect$1(new Q.Rect(0, 0, 0 + t1, 0 + height));
      canvas.drawCircle$3(new Q.Offset(t1 / 2 * (0.5 + t2), height - radius), radius, paint);
      canvas.restore$0(0);
    },
    set$_glowOpacity: function(_glowOpacity) {
      this._glowOpacity = H.assertSubtype(_glowOpacity, "$isAnimation", [P.double], "$asAnimation");
    },
    set$_glowSize: function(_glowSize) {
      this._glowSize = H.assertSubtype(_glowSize, "$isAnimation", [P.double], "$asAnimation");
    }
  };
  L._GlowController_pull_closure.prototype = {
    call$0: function() {
      return this.$this._recede$1(C.Duration_2000000);
    },
    $signature: 1
  };
  L._GlowingOverscrollIndicatorPainter.prototype = {
    _paintSide$5: function(canvas, size, controller, axisDirection, growthDirection) {
      var t1;
      if (controller == null)
        return;
      switch (G.applyGrowthDirectionToAxisDirection(axisDirection, growthDirection)) {
        case C.AxisDirection_0:
          controller.paint$2(canvas, size);
          break;
        case C.AxisDirection_2:
          canvas.save$0(0);
          canvas.translate$2(0, 0, size._dy);
          canvas.scale$2(0, 1, -1);
          controller.paint$2(canvas, size);
          canvas.restore$0(0);
          break;
        case C.AxisDirection_3:
          canvas.save$0(0);
          canvas.rotate$1(0, 1.5707963267948966);
          canvas.scale$2(0, 1, -1);
          controller.paint$2(canvas, new Q.Size(size._dy, size._dx));
          canvas.restore$0(0);
          break;
        case C.AxisDirection_1:
          canvas.save$0(0);
          t1 = size._dx;
          canvas.translate$2(0, t1, 0);
          canvas.rotate$1(0, 1.5707963267948966);
          controller.paint$2(canvas, new Q.Size(size._dy, t1));
          canvas.restore$0(0);
          break;
      }
    },
    paint$2: function(canvas, size) {
      var _this = this,
        t1 = _this.axisDirection;
      _this._paintSide$5(canvas, size, _this.leadingController, t1, C.GrowthDirection_1);
      _this._paintSide$5(canvas, size, _this.trailingController, t1, C.GrowthDirection_0);
    },
    shouldRepaint$1: function(oldDelegate) {
      H.interceptedTypeCheck(oldDelegate, "$is_GlowingOverscrollIndicatorPainter");
      return oldDelegate.leadingController != this.leadingController || oldDelegate.trailingController != this.trailingController;
    }
  };
  L.OverscrollIndicatorNotification.prototype = {
    debugFillDescription$1: function(description) {
      H.assertSubtype(description, "$isList", [P.String], "$asList");
      this.super$_OverscrollIndicatorNotification_Notification_ViewportNotificationMixin$debugFillDescription(description);
      C.JSArray_methods.add$1(description, "side: " + (this.leading ? "leading edge" : "trailing edge"));
    }
  };
  L._OverscrollIndicatorNotification_Notification_ViewportNotificationMixin.prototype = {
    visitAncestor$1: function(element) {
      if (!!element.$isRenderObjectElement && !!J.getInterceptor$(element.get$renderObject()).$isRenderAbstractViewport)
        ++this.ViewportNotificationMixin__depth;
      return this.super$Notification$visitAncestor(element);
    },
    debugFillDescription$1: function(description) {
      var t1;
      H.assertSubtype(description, "$isList", [P.String], "$asList");
      this.super$Notification$debugFillDescription(description);
      t1 = "depth: " + this.ViewportNotificationMixin__depth + " (";
      C.JSArray_methods.add$1(description, t1 + (this.ViewportNotificationMixin__depth === 0 ? "local" : "remote") + ")");
    }
  };
  L.__GlowingOverscrollIndicatorState_State_TickerProviderStateMixin.prototype = {
    dispose$0: function() {
      this.super$State$dispose();
    },
    didChangeDependencies$0: function() {
      var muted = !U.TickerMode_of(this._element),
        t1 = this.TickerProviderStateMixin__tickers;
      if (t1 != null)
        for (t1 = P._LinkedHashSetIterator$(t1, t1._collection$_modifications, H.getTypeArgumentByIndex(t1, 0)); t1.moveNext$0();)
          t1._collection$_current.set$muted(0, muted);
      this.super$State$didChangeDependencies();
    },
    set$_tickers: function(_tickers) {
      this.TickerProviderStateMixin__tickers = H.assertSubtype(_tickers, "$isSet", [M.Ticker], "$asSet");
    }
  };
  S.PageStorageKey.prototype = {};
  S._StorageEntryIdentifier.prototype = {
    $eq: function(_, other) {
      var t1, t2, t3;
      if (other == null)
        return false;
      if (!J.get$runtimeType$(other).$eq(0, new H.TypeImpl(H.getRti(this))))
        return false;
      H.interceptedTypeCheck(other, "$is_StorageEntryIdentifier");
      for (t1 = 0 < this.keys.length, t2 = other.keys, t3 = t2.length; t1;) {
        if (0 >= t3)
          return H.ioore(t2, 0);
        return false;
      }
      return true;
    },
    get$hashCode: function(_) {
      return Q.hashList(this.keys);
    },
    toString$0: function(_) {
      var t1 = C.JSArray_methods.join$1(this.keys, ":");
      return "StorageEntryIdentifier(" + t1 + ")";
    }
  };
  S.PageStorageBucket.prototype = {
    _allKeys$1: function(context) {
      var keys = H.setRuntimeTypeInfo([], [[S.PageStorageKey,,]]);
      if (S.PageStorageBucket__maybeAddKey(context, keys))
        context.visitAncestorElements$1(new S.PageStorageBucket__allKeys_closure(keys));
      return keys;
    },
    writeState$2: function(context, data) {
      var t1, _this = this;
      if (_this._storage == null)
        _this.set$_storage(P.LinkedHashMap_LinkedHashMap$_empty(P.Object, null));
      t1 = _this._allKeys$1(context);
      if (t1.length !== 0)
        _this._storage.$indexSet(0, new S._StorageEntryIdentifier(t1), data);
    },
    readState$1: function(context) {
      var t1;
      if (this._storage == null)
        return;
      t1 = this._allKeys$1(context);
      return t1.length !== 0 ? this._storage.$index(0, new S._StorageEntryIdentifier(t1)) : null;
    },
    set$_storage: function(_storage) {
      this._storage = H.assertSubtype(_storage, "$isMap", [P.Object, null], "$asMap");
    }
  };
  S.PageStorageBucket__allKeys_closure.prototype = {
    call$1: function(element) {
      return S.PageStorageBucket__maybeAddKey(element, this.keys);
    },
    $signature: 14
  };
  S.PageStorage.prototype = {
    build$1: function(context) {
      return this.child;
    }
  };
  D.PageController.prototype = {
    createScrollPosition$3: function(physics, context, oldPosition) {
      var _null = null,
        t1 = {func: 1, ret: -1},
        t2 = [t1];
      t1 = [t1];
      t1 = new D._PagePosition(this.initialPage, this.viewportFraction, C.ScrollDirection_0, physics, context, true, _null, new B.ValueNotifier(false, new R.ObserverList(H.setRuntimeTypeInfo([], t2), t1), [P.bool]), new R.ObserverList(H.setRuntimeTypeInfo([], t2), t1));
      t1.ScrollPosition$5$context$debugLabel$keepScrollOffset$oldPosition$physics(context, _null, true, oldPosition, physics);
      t1.ScrollPositionWithSingleContext$6$context$debugLabel$initialPixels$keepScrollOffset$oldPosition$physics(context, _null, _null, true, oldPosition, physics);
      return t1;
    },
    attach$1: function(position) {
      this.super$ScrollController$attach(position);
      H.interceptedTypeCheck(position, "$is_PagePosition").set$viewportFraction(this.viewportFraction);
    }
  };
  D.PageMetrics.prototype = {};
  D._PagePosition.prototype = {
    set$viewportFraction: function(value) {
      var oldPage, t1, _this = this;
      if (_this._viewportFraction === value)
        return;
      oldPage = _this.get$page(_this);
      _this._viewportFraction = value;
      if (oldPage != null) {
        t1 = _this._viewportDimension;
        if (typeof t1 !== "number")
          return H.iae(t1);
        _this._pixels = oldPage * t1 * value;
        _this._updateSemanticActions$0();
        _this.super$ChangeNotifier$notifyListeners();
      }
    },
    getPageFromPixels$2: function(pixels, viewportDimension) {
      var t1 = Math.max(0, H.checkNum(pixels)),
        t2 = this._viewportFraction;
      if (typeof viewportDimension !== "number")
        return viewportDimension.$mul();
      return t1 / Math.max(1, viewportDimension * t2);
    },
    get$page: function(_) {
      var _this = this,
        t1 = _this._pixels;
      return t1 == null ? null : _this.getPageFromPixels$2(C.JSNumber_methods.clamp$2(t1, _this._minScrollExtent, _this._maxScrollExtent), _this._viewportDimension);
    },
    saveScrollOffset$0: function() {
      var _this = this,
        t1 = _this.context,
        t2 = S.PageStorage_of(t1._element);
      if (t2 != null)
        t2.writeState$2(t1._element, _this.getPageFromPixels$2(_this._pixels, _this._viewportDimension));
    },
    restoreScrollOffset$0: function() {
      var t1, t2, value;
      if (this._pixels == null) {
        t1 = this.context;
        t2 = S.PageStorage_of(t1._element);
        value = t2 == null ? null : t2.readState$1(t1._element);
        if (value != null)
          this._pageToUseOnStartup = value;
      }
    },
    applyViewportDimension$1: function(viewportDimension) {
      var oldPixels, page, t1, newPixels, _this = this,
        oldViewportDimensions = _this._viewportDimension;
      _this.super$ScrollPosition$applyViewportDimension(viewportDimension);
      oldPixels = _this._pixels;
      page = oldPixels == null || oldViewportDimensions === 0 ? _this._pageToUseOnStartup : _this.getPageFromPixels$2(oldPixels, oldViewportDimensions);
      t1 = _this._viewportDimension;
      if (typeof t1 !== "number")
        return H.iae(t1);
      newPixels = page * t1 * _this._viewportFraction;
      if (newPixels !== oldPixels) {
        _this._pixels = newPixels;
        return false;
      }
      return true;
    },
    copyWith$0: function() {
      var _this = this,
        t1 = _this._minScrollExtent,
        t2 = _this._maxScrollExtent,
        t3 = _this._pixels,
        t4 = _this._viewportDimension,
        t5 = _this.context._widget.axisDirection,
        t6 = _this._viewportFraction;
      return new D.PageMetrics(t6, t1, t2, t3, t4, t5);
    }
  };
  D.PageScrollPhysics.prototype = {
    applyTo$1: function(ancestor) {
      return new D.PageScrollPhysics(this.buildParent$1(ancestor));
    },
    _getPage$1: function(position) {
      var t1, t2;
      if (!!position.$is_PagePosition)
        return position.get$page(position);
      t1 = position._pixels;
      t2 = position._viewportDimension;
      if (typeof t1 !== "number")
        return t1.$div();
      if (typeof t2 !== "number")
        return H.iae(t2);
      return t1 / t2;
    },
    _getPixels$2: function(position, page) {
      var t1;
      if (!!position.$is_PagePosition) {
        t1 = position._viewportDimension;
        if (typeof t1 !== "number")
          return H.iae(t1);
        return page * t1 * position._viewportFraction;
      }
      t1 = position._viewportDimension;
      if (typeof t1 !== "number")
        return H.iae(t1);
      return page * t1;
    },
    createBallisticSimulation$2: function(position, velocity) {
      var t1, t2, tolerance, page, target, _this = this;
      if (velocity <= 0) {
        t1 = position._pixels;
        t2 = position._minScrollExtent;
        if (typeof t1 !== "number")
          return t1.$le();
        if (typeof t2 !== "number")
          return H.iae(t2);
        t2 = t1 <= t2;
        t1 = t2;
      } else
        t1 = false;
      if (!t1)
        if (velocity >= 0) {
          t1 = position._pixels;
          t2 = position._maxScrollExtent;
          if (typeof t1 !== "number")
            return t1.$ge();
          if (typeof t2 !== "number")
            return H.iae(t2);
          t2 = t1 >= t2;
          t1 = t2;
        } else
          t1 = false;
      else
        t1 = true;
      if (t1)
        return _this.super$ScrollPhysics$createBallisticSimulation(position, velocity);
      tolerance = _this.get$tolerance();
      page = _this._getPage$1(position);
      t1 = tolerance.velocity;
      if (velocity < -t1) {
        if (typeof page !== "number")
          return page.$sub();
        page -= 0.5;
      } else if (velocity > t1) {
        if (typeof page !== "number")
          return page.$add();
        page += 0.5;
      }
      target = _this._getPixels$2(position, J.roundToDouble$0$n(page));
      if (target !== position._pixels) {
        t1 = _this.get$spring();
        t2 = position._pixels;
        if (typeof t2 !== "number")
          return t2.$sub();
        return new M.ScrollSpringSimulation(target, M._SpringSolution__SpringSolution(t1, t2 - target, velocity), tolerance);
      }
      return;
    },
    get$allowImplicitScrolling: function() {
      return false;
    }
  };
  D.PageView.prototype = {
    createState$0: function() {
      return new D._PageViewState(C._StateLifecycle_0);
    }
  };
  D._PageViewState.prototype = {
    initState$0: function() {
      this.super$State$initState();
      this._lastReportedPage = this._widget.controller.initialPage;
    },
    _getDirection$1: function(context) {
      var axisDirection,
        t1 = this._widget;
      t1.toString;
      switch (C.Axis_0) {
        case C.Axis_0:
          axisDirection = G.textDirectionToAxisDirection(T.Directionality_of(context));
          this._widget.reverse;
          t1 = G.flipAxisDirection(axisDirection);
          return t1;
        case C.Axis_1:
          t1.reverse;
          return C.AxisDirection_0;
      }
      return;
    },
    build$1: function(context) {
      var t1, _this = this,
        axisDirection = _this._getDirection$1(context);
      _this._widget.toString;
      t1 = C.PageScrollPhysics_null.buildParent$1(null);
      return U.NotificationListener$(F.Scrollable$(axisDirection, _this._widget.controller, C.DragStartBehavior_0, new D.PageScrollPhysics(t1), null, new D._PageViewState_build_closure(_this, axisDirection)), new D._PageViewState_build_closure0(_this), G.ScrollNotification);
    },
    $asState: function() {
      return [D.PageView];
    }
  };
  D._PageViewState_build_closure0.prototype = {
    call$1: function(notification) {
      if (H.interceptedTypeCheck(notification, "$isScrollNotification")._scroll_notification$_depth === 0)
        this.$this._widget.toString;
      return false;
    },
    $signature: 42
  };
  D._PageViewState_build_closure.prototype = {
    call$2: function(context, position) {
      var t1;
      H.interceptedTypeCheck(context, "$isBuildContext");
      H.interceptedTypeCheck(position, "$isViewportOffset");
      t1 = this.$this._widget;
      return Q.Viewport$(this.axisDirection, 0, position, H.setRuntimeTypeInfo([new G.SliverFillViewport(t1.controller.viewportFraction, t1.childrenDelegate, null)], [N.Widget]));
    },
    "call*": "call$2",
    $requiredArgCount: 2,
    $signature: 175
  };
  V.PageRoute.prototype = {
    get$opaque: function() {
      return true;
    },
    get$barrierDismissible: function() {
      return false;
    },
    canTransitionTo$1: function(nextRoute) {
      return true;
    },
    canTransitionFrom$1: function(previousRoute) {
      return true;
    }
  };
  V.PageRouteBuilder.prototype = {
    buildPage$3: function(context, animation, secondaryAnimation) {
      var t1 = [P.double];
      return this.pageBuilder.call$3(context, H.assertSubtype(animation, "$isAnimation", t1, "$asAnimation"), H.assertSubtype(secondaryAnimation, "$isAnimation", t1, "$asAnimation"));
    },
    buildTransitions$4: function(context, animation, secondaryAnimation, child) {
      var t1 = [P.double];
      return this.transitionsBuilder.call$4(context, H.assertSubtype(animation, "$isAnimation", t1, "$asAnimation"), H.assertSubtype(secondaryAnimation, "$isAnimation", t1, "$asAnimation"), child);
    },
    get$transitionDuration: function() {
      return C.Duration_300000;
    },
    get$opaque: function() {
      return this.opaque;
    },
    get$barrierDismissible: function() {
      return false;
    },
    get$barrierColor: function() {
      return null;
    },
    get$barrierLabel: function() {
      return null;
    },
    get$maintainState: function() {
      return true;
    }
  };
  L.PerformanceOverlay.prototype = {
    createRenderObject$1: function(context) {
      var t1 = new L.RenderPerformanceOverlay(this.optionsMask, 0, false, false);
      t1.get$isRepaintBoundary();
      t1.get$alwaysNeedsCompositing();
      t1._needsCompositing = true;
      return t1;
    },
    updateRenderObject$2: function(context, renderObject) {
      H.interceptedTypeCheck(renderObject, "$isRenderPerformanceOverlay");
      renderObject.set$optionsMask(this.optionsMask);
      renderObject.set$rasterizerThreshold(0);
    }
  };
  E.PrimaryScrollController.prototype = {
    updateShouldNotify$1: function(oldWidget) {
      return this.controller != H.interceptedTypeCheck(oldWidget, "$isPrimaryScrollController").controller;
    }
  };
  T.OverlayRoute.prototype = {
    install$1: function(insertionPoint) {
      var t2, _this = this,
        t1 = _this._overlayEntries;
      C.JSArray_methods.addAll$1(t1, _this.createOverlayEntries$0());
      t2 = _this._navigator$_navigator._overlayKey.get$currentState();
      if (t2 != null)
        t2.insertAll$2$above(0, t1, insertionPoint);
      _this.super$Route$install(insertionPoint);
    },
    didPop$1: function(result) {
      var _this = this;
      _this.super$Route$didPop(H.assertSubtypeOfRuntimeType(result, H.getTypeArgumentByIndex(_this, 0)));
      if (_this._routes$_controller._status === C.AnimationStatus_0) {
        _this._navigator$_navigator._poppedRoutes.remove$1(0, _this);
        _this.focusScopeNode.detach$0(0);
        _this.super$TransitionRoute$dispose();
      }
      return true;
    },
    dispose$0: function() {
      var t1, t2, _i;
      for (t1 = this._overlayEntries, t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i)
        J.remove$0$ax(t1[_i]);
      C.JSArray_methods.set$length(t1, 0);
      this.super$Route$dispose();
    }
  };
  T.TransitionRoute.prototype = {
    get$animation: function(_) {
      return this._routes$_animation;
    },
    createAnimationController$0: function() {
      var _this = this,
        duration = _this.get$transitionDuration(_this);
      return G.AnimationController$(C.AnimationBehavior_0, _this.get$debugLabel(), duration, 0, 1, null, _this._navigator$_navigator);
    },
    _handleStatusChanged$1: function($status) {
      var t1, _this = this;
      switch (H.interceptedTypeCheck($status, "$isAnimationStatus")) {
        case C.AnimationStatus_3:
          t1 = _this._overlayEntries;
          if (t1.length !== 0)
            C.JSArray_methods.get$first(t1).set$opaque(_this.get$opaque());
          break;
        case C.AnimationStatus_1:
        case C.AnimationStatus_2:
          t1 = _this._overlayEntries;
          if (t1.length !== 0)
            C.JSArray_methods.get$first(t1).set$opaque(false);
          break;
        case C.AnimationStatus_0:
          if (!_this.get$isCurrent()) {
            _this._navigator$_navigator._poppedRoutes.remove$1(0, _this);
            _this.focusScopeNode.detach$0(0);
            _this.super$TransitionRoute$dispose();
          }
          break;
      }
      _this.changedInternalState$0();
    },
    get$secondaryAnimation: function() {
      return this._secondaryAnimation;
    },
    install$1: function(insertionPoint) {
      var _this = this,
        controller = _this.super$TransitionRoute$createAnimationController();
      if (_this.settings.isInitialRoute)
        controller.set$value(0, 1);
      _this._routes$_controller = controller;
      _this.set$_routes$_animation(controller);
      _this.super$OverlayRoute$install(insertionPoint);
    },
    didPush$0: function() {
      this._routes$_animation.addStatusListener$1(this.get$_handleStatusChanged());
      return this._routes$_controller.forward$0(0);
    },
    didPop$1: function(result) {
      var _this = this;
      H.assertSubtypeOfRuntimeType(result, H.getTypeArgumentByIndex(_this, 0));
      _this.set$_result(result);
      _this._routes$_controller.reverse$0(0);
      _this.super$OverlayRoute$didPop(result);
      return true;
    },
    _updateSecondaryAnimation$1: function(nextRoute) {
      var current, newAnimation, _this = this, t1 = {},
        t2 = nextRoute instanceof T.TransitionRoute && _this.canTransitionTo$1(nextRoute) && nextRoute.canTransitionFrom$1(_this),
        t3 = _this._secondaryAnimation;
      if (t2) {
        current = t3._animations$_parent;
        if (current != null)
          if (!!current.$isTrainHoppingAnimation) {
            t1.newAnimation = null;
            newAnimation = S.TrainHoppingAnimation$(current._currentTrain, nextRoute._routes$_animation, new T.TransitionRoute__updateSecondaryAnimation_closure(t1, _this, nextRoute));
            t1.newAnimation = newAnimation;
            t3.set$parent(0, newAnimation);
            current.dispose$0();
          } else
            t3.set$parent(0, S.TrainHoppingAnimation$(current, nextRoute._routes$_animation, null));
        else
          t3.set$parent(0, nextRoute._routes$_animation);
      } else
        t3.set$parent(0, C.C__AlwaysDismissedAnimation);
    },
    dispose$0: function() {
      var _this = this,
        t1 = _this._routes$_controller;
      if (t1 != null)
        t1.dispose$0();
      _this._transitionCompleter.complete$1(0, _this._result);
      _this.super$OverlayRoute$dispose();
    },
    get$debugLabel: function() {
      return new H.TypeImpl(H.getRti(this)).toString$0(0);
    },
    toString$0: function(_) {
      return new H.TypeImpl(H.getRti(this)).toString$0(0) + "(animation: " + H.S(this._routes$_controller) + ")";
    },
    set$_routes$_animation: function(_animation) {
      this._routes$_animation = H.assertSubtype(_animation, "$isAnimation", [P.double], "$asAnimation");
    },
    set$_result: function(_result) {
      this._result = H.assertSubtypeOfRuntimeType(_result, H.getTypeArgumentByIndex(this, 0));
    }
  };
  T.TransitionRoute__updateSecondaryAnimation_closure.prototype = {
    call$0: function() {
      var t1 = this._box_0;
      this.$this._secondaryAnimation.set$parent(0, t1.newAnimation._currentTrain);
      t1.newAnimation.dispose$0();
    },
    $signature: 0
  };
  T.LocalHistoryEntry.prototype = {};
  T.LocalHistoryRoute.prototype = {
    get$willHandlePopInternally: function() {
      var t1 = this.LocalHistoryRoute__localHistory;
      return t1 != null && t1.length !== 0;
    }
  };
  T._ModalScopeStatus.prototype = {
    updateShouldNotify$1: function(old) {
      H.interceptedTypeCheck(old, "$is_ModalScopeStatus");
      return this.isCurrent !== old.isCurrent || this.canPop !== old.canPop || this.route !== old.route;
    }
  };
  T._ModalScope.prototype = {
    createState$0: function() {
      return new T._ModalScopeState(C._StateLifecycle_0, this.$ti);
    }
  };
  T._ModalScopeState.prototype = {
    initState$0: function() {
      var animations, t1, _this = this;
      _this.super$State$initState();
      animations = H.setRuntimeTypeInfo([], [B.Listenable]);
      t1 = _this._widget.route._animationProxy;
      if (t1 != null)
        C.JSArray_methods.add$1(animations, t1);
      t1 = _this._widget.route._secondaryAnimationProxy;
      if (t1 != null)
        C.JSArray_methods.add$1(animations, t1);
      _this._listenable = B._MergingListenable$(animations);
    },
    didUpdateWidget$1: function(oldWidget) {
      this.super$State$didUpdateWidget(H.assertSubtype(oldWidget, "$is_ModalScope", this.$ti, "$as_ModalScope"));
    },
    didChangeDependencies$0: function() {
      this.super$State$didChangeDependencies();
      this._page = null;
    },
    _forceRebuildPage$0: function() {
      this.setState$1(new T._ModalScopeState__forceRebuildPage_closure(this));
    },
    build$1: function(context) {
      var t4, t5, t6, t7, _this = this, _null = null,
        t1 = _this._widget.route,
        t2 = t1.get$isCurrent(),
        t3 = _this._widget.route;
      t3 = !t3.get$isFirst() || t3.get$willHandlePopInternally();
      t4 = _this._widget.route;
      t5 = t4._routes$_offstage;
      t6 = _this._listenable;
      t7 = _this._page;
      if (t7 == null)
        t7 = _this._page = new T.RepaintBoundary(new T.Builder(new T._ModalScopeState_build_closure(_this), _null), t4._subtreeKey);
      return new T._ModalScopeStatus(t2, t3, t1, new T.Offstage(t5, new S.PageStorage(new L.FocusScope(t4.focusScopeNode, false, new T.RepaintBoundary(K.AnimatedBuilder$(t6, new T._ModalScopeState_build_closure0(_this), t7), _null), _null), t4._storageBucket, _null), _null), _null);
    },
    $asState: function($T) {
      return [[T._ModalScope, $T]];
    }
  };
  T._ModalScopeState__forceRebuildPage_closure.prototype = {
    call$0: function() {
      this.$this._page = null;
    },
    $signature: 0
  };
  T._ModalScopeState_build_closure0.prototype = {
    call$2: function(context, child) {
      var t1, t2, t3;
      H.interceptedTypeCheck(context, "$isBuildContext");
      H.interceptedTypeCheck(child, "$isWidget");
      t1 = this.$this._widget.route;
      t2 = t1._animationProxy;
      t3 = t1._secondaryAnimationProxy;
      return t1.buildTransitions$4(context, t2, t3, new T.IgnorePointer((t2 == null ? null : t2.get$status(t2)) === C.AnimationStatus_2, null, child, null));
    },
    "call*": "call$2",
    $requiredArgCount: 2,
    $signature: 176
  };
  T._ModalScopeState_build_closure.prototype = {
    call$1: function(context) {
      var t1;
      H.interceptedTypeCheck(context, "$isBuildContext");
      t1 = this.$this._widget.route;
      return t1.buildPage$3(context, t1._animationProxy, t1._secondaryAnimationProxy);
    },
    $signature: 11
  };
  T.ModalRoute.prototype = {
    setState$1: function(fn) {
      var t1;
      H.functionTypeCheck(fn, {func: 1, ret: -1});
      t1 = this._scopeKey;
      if (t1.get$currentState() != null)
        t1.get$currentState().setState$1(fn);
      else
        fn.call$0();
    },
    buildTransitions$4: function(context, animation, secondaryAnimation, child) {
      var t1 = [P.double];
      H.assertSubtype(animation, "$isAnimation", t1, "$asAnimation");
      H.assertSubtype(secondaryAnimation, "$isAnimation", t1, "$asAnimation");
      return child;
    },
    dispose$0: function() {
      this.focusScopeNode.detach$0(0);
      this.super$TransitionRoute$dispose();
    },
    set$offstage: function(value) {
      var t1, _this = this;
      if (_this._routes$_offstage === value)
        return;
      _this.setState$1(new T.ModalRoute_offstage_closure(_this, value));
      t1 = _this._animationProxy;
      t1.set$parent(0, _this._routes$_offstage ? C.C__AlwaysCompleteAnimation : T.TransitionRoute.prototype.get$animation.call(_this, _this));
      t1 = _this._secondaryAnimationProxy;
      t1.set$parent(0, _this._routes$_offstage ? C.C__AlwaysDismissedAnimation : T.TransitionRoute.prototype.get$secondaryAnimation.call(_this));
    },
    willPop$0: function() {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(K.RoutePopDisposition),
        $async$returnValue, $async$self = this, t1, t2, _i, $async$temp1;
      var $async$willPop$0 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              $async$self._scopeKey.get$currentState();
              t1 = P.List_List$from($async$self._willPopCallbacks, true, {func: 1, ret: [P.Future, P.bool]}), t2 = t1.length, _i = 0;
            case 3:
              // for condition
              if (!(_i < t1.length)) {
                // goto after for
                $async$goto = 5;
                break;
              }
              $async$temp1 = H;
              $async$goto = 6;
              return P._asyncAwait(t1[_i].call$0(), $async$willPop$0);
            case 6:
              // returning from await.
              if (!$async$temp1.boolConversionCheck($async$result)) {
                $async$returnValue = C.RoutePopDisposition_1;
                // goto return
                $async$goto = 1;
                break;
              }
            case 4:
              // for update
              t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i;
              // goto for condition
              $async$goto = 3;
              break;
            case 5:
              // after for
              $async$goto = 7;
              return P._asyncAwait($async$self.super$_ModalRoute_TransitionRoute_LocalHistoryRoute$willPop(), $async$willPop$0);
            case 7:
              // returning from await.
              $async$returnValue = $async$result;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$willPop$0, $async$completer);
    },
    changedInternalState$0: function() {
      this.super$Route$changedInternalState();
      this.setState$1(new T.ModalRoute_changedInternalState_closure());
      this._modalBarrier.markNeedsBuild$0();
    },
    _buildModalBarrier$1: function(context) {
      var barrier, t1, _this = this;
      H.interceptedTypeCheck(context, "$isBuildContext");
      _this.get$barrierColor();
      _this.get$barrierDismissible();
      barrier = X.ModalBarrier$(true, null, false, _this.get$barrierLabel());
      t1 = _this._animationProxy;
      if (t1.get$status(t1) !== C.AnimationStatus_2) {
        t1 = _this._animationProxy;
        t1 = t1.get$status(t1) === C.AnimationStatus_0;
      } else
        t1 = true;
      return new T.IgnorePointer(t1, null, barrier, null);
    },
    _buildModalScope$1: function(context) {
      var t1, _this = this;
      H.interceptedTypeCheck(context, "$isBuildContext");
      t1 = _this._modalScopeCache;
      return t1 == null ? _this._modalScopeCache = new T._ModalScope(_this, _this._scopeKey, _this.$ti) : t1;
    },
    createOverlayEntries$0: function() {
      var $async$self = this;
      return P._makeSyncStarIterable(function() {
        var $async$goto = 0, $async$handler = 1, $async$currentError, t1;
        return function $async$createOverlayEntries$0($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
                t1 = X.OverlayEntry$($async$self.get$_buildModalBarrier(), false);
                $async$self._modalBarrier = t1;
                $async$goto = 2;
                return t1;
              case 2:
                // after yield
                $async$self.get$maintainState();
                $async$goto = 3;
                return X.OverlayEntry$($async$self.get$_buildModalScope(), true);
              case 3:
                // after yield
                // implicit return
                return P._IterationMarker_endOfIteration();
              case 1:
                // rethrow
                return P._IterationMarker_uncaughtError($async$currentError);
            }
        };
      }, X.OverlayEntry);
    },
    toString$0: function(_) {
      return new H.TypeImpl(H.getRti(this)).toString$0(0) + "(" + this.settings.toString$0(0) + ", animation: " + H.S(this._routes$_animation) + ")";
    }
  };
  T.ModalRoute_offstage_closure.prototype = {
    call$0: function() {
      this.$this._routes$_offstage = this.value;
    },
    $signature: 0
  };
  T.ModalRoute_changedInternalState_closure.prototype = {
    call$0: function() {
    },
    $signature: 0
  };
  T._ModalRoute_TransitionRoute_LocalHistoryRoute.prototype = {
    willPop$0: function() {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(K.RoutePopDisposition),
        $async$returnValue, $async$self = this;
      var $async$willPop$0 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              if ($async$self.get$willHandlePopInternally()) {
                $async$returnValue = C.RoutePopDisposition_0;
                // goto return
                $async$goto = 1;
                break;
              }
              $async$goto = 3;
              return P._asyncAwait($async$self.super$Route$willPop(), $async$willPop$0);
            case 3:
              // returning from await.
              $async$returnValue = $async$result;
              // goto return
              $async$goto = 1;
              break;
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
          }
      });
      return P._asyncStartSync($async$willPop$0, $async$completer);
    },
    didPop$1: function(result) {
      var t1, entry, _this = this;
      H.assertSubtypeOfRuntimeType(result, H.getTypeArgumentByIndex(_this, 0));
      t1 = _this.LocalHistoryRoute__localHistory;
      if (t1 != null && t1.length !== 0) {
        if (0 >= t1.length)
          return H.ioore(t1, -1);
        entry = t1.pop();
        entry._routes$_owner = null;
        entry.onRemove.call$0();
        if (_this.LocalHistoryRoute__localHistory.length === 0)
          _this.changedInternalState$0();
        return false;
      }
      _this.super$TransitionRoute$didPop(result);
      return true;
    }
  };
  M.ScrollActivity.prototype = {
    resetActivity$0: function() {
    },
    dispatchScrollStartNotification$2: function(metrics, context) {
      context.visitAncestorElements$1(new G.ScrollStartNotification(null, metrics, context).get$visitAncestor());
    },
    dispatchScrollUpdateNotification$3: function(metrics, context, scrollDelta) {
      context.visitAncestorElements$1(new G.ScrollUpdateNotification(null, scrollDelta, metrics, context).get$visitAncestor());
    },
    dispatchOverscrollNotification$3: function(metrics, context, overscroll) {
      context.visitAncestorElements$1(G.OverscrollNotification$(context, null, metrics, overscroll, 0).get$visitAncestor());
    },
    dispatchScrollEndNotification$2: function(metrics, context) {
      context.visitAncestorElements$1(new G.ScrollEndNotification(null, metrics, context).get$visitAncestor());
    },
    applyNewDimensions$0: function() {
    },
    dispose$0: function() {
      this._delegate = null;
    },
    toString$0: function(_) {
      return this.get$runtimeType(this).toString$0(0) + "#" + Y.shortHash(this);
    }
  };
  M.IdleScrollActivity.prototype = {
    applyNewDimensions$0: function() {
      this._delegate.goBallistic$1(0);
    },
    get$shouldIgnorePointer: function() {
      return false;
    },
    get$isScrolling: function() {
      return false;
    },
    get$velocity: function() {
      return 0;
    }
  };
  M.HoldScrollActivity.prototype = {
    get$shouldIgnorePointer: function() {
      return false;
    },
    get$isScrolling: function() {
      return false;
    },
    get$velocity: function() {
      return 0;
    },
    dispose$0: function() {
      this.onHoldCanceled.call$0();
      this.super$ScrollActivity$dispose();
    },
    $isScrollHoldController: 1
  };
  M.ScrollDragController.prototype = {
    _adjustForScrollStartThreshold$2: function(offset, timestamp) {
      var t1, t2, _this = this;
      if (timestamp == null)
        return offset;
      if (offset === 0) {
        if (_this.motionStartDistanceThreshold != null)
          if (_this._offsetSinceLastStop == null) {
            t1 = _this._lastNonStationaryTimestamp;
            t1 = timestamp._duration - t1._duration > 50000;
          } else
            t1 = false;
        else
          t1 = false;
        if (t1)
          _this._offsetSinceLastStop = 0;
        return 0;
      } else {
        t1 = _this._offsetSinceLastStop;
        if (t1 == null)
          return offset;
        else {
          if (typeof offset !== "number")
            return H.iae(offset);
          t1 += offset;
          _this._offsetSinceLastStop = t1;
          t2 = _this.motionStartDistanceThreshold;
          if (typeof t2 !== "number")
            return H.iae(t2);
          if (Math.abs(t1) > t2) {
            _this._offsetSinceLastStop = null;
            t1 = Math.abs(offset);
            if (t1 > 24)
              return offset;
            else
              return Math.min(t2 / 3, t1) * J.get$sign$in(offset);
          } else
            return 0;
        }
      }
    },
    update$1: function(_, details) {
      var offset, t1, t2, t3, _this = this;
      _this._lastDetails = details;
      offset = details.primaryDelta;
      t1 = offset === 0;
      if (!t1)
        _this._lastNonStationaryTimestamp = details.sourceTimeStamp;
      t2 = details.sourceTimeStamp;
      if (_this._retainMomentum)
        if (t1)
          if (t2 != null) {
            t1 = _this._lastNonStationaryTimestamp;
            t1 = t2._duration - t1._duration > 20000;
          } else
            t1 = true;
        else
          t1 = false;
      else
        t1 = false;
      if (t1)
        _this._retainMomentum = false;
      offset = _this._adjustForScrollStartThreshold$2(offset, t2);
      if (offset === 0)
        return;
      t1 = _this._delegate;
      if (H.boolConversionCheck(G.axisDirectionIsReversed(t1.context._widget.axisDirection))) {
        if (typeof offset !== "number")
          return offset.$negate();
        offset = -offset;
      }
      if (typeof offset !== "number")
        return offset.$gt();
      t1.updateUserScrollDirection$1(offset > 0 ? C.ScrollDirection_1 : C.ScrollDirection_2);
      t2 = t1._pixels;
      t3 = t1.physics.applyPhysicsToUserOffset$2(t1, offset);
      if (typeof t2 !== "number")
        return t2.$sub();
      t1.super$ScrollPosition$setPixels(t2 - t3);
    },
    dispose$0: function() {
      this._lastDetails = null;
      this.onDragCanceled.call$0();
    },
    $isDrag: 1
  };
  M.DragScrollActivity.prototype = {
    dispatchScrollStartNotification$2: function(metrics, context) {
      context.visitAncestorElements$1(new G.ScrollStartNotification(H.interceptedTypeCheck(this._scroll_activity$_controller._lastDetails, "$isDragStartDetails"), metrics, context).get$visitAncestor());
    },
    dispatchScrollUpdateNotification$3: function(metrics, context, scrollDelta) {
      context.visitAncestorElements$1(new G.ScrollUpdateNotification(H.interceptedTypeCheck(this._scroll_activity$_controller._lastDetails, "$isDragUpdateDetails"), scrollDelta, metrics, context).get$visitAncestor());
    },
    dispatchOverscrollNotification$3: function(metrics, context, overscroll) {
      context.visitAncestorElements$1(G.OverscrollNotification$(context, H.interceptedTypeCheck(this._scroll_activity$_controller._lastDetails, "$isDragUpdateDetails"), metrics, overscroll, 0).get$visitAncestor());
    },
    dispatchScrollEndNotification$2: function(metrics, context) {
      var lastDetails = this._scroll_activity$_controller._lastDetails;
      context.visitAncestorElements$1(new G.ScrollEndNotification(lastDetails instanceof O.DragEndDetails ? lastDetails : null, metrics, context).get$visitAncestor());
    },
    get$shouldIgnorePointer: function() {
      return true;
    },
    get$isScrolling: function() {
      return true;
    },
    get$velocity: function() {
      return 0;
    },
    dispose$0: function() {
      this._scroll_activity$_controller = null;
      this.super$ScrollActivity$dispose();
    }
  };
  M.BallisticScrollActivity.prototype = {
    get$velocity: function() {
      return this._scroll_activity$_controller.get$velocity();
    },
    resetActivity$0: function() {
      this._delegate.goBallistic$1(this._scroll_activity$_controller.get$velocity());
    },
    applyNewDimensions$0: function() {
      this._delegate.goBallistic$1(this._scroll_activity$_controller.get$velocity());
    },
    _scroll_activity$_tick$0: function() {
      var t1 = this._scroll_activity$_controller._animation_controller$_value;
      if (this._delegate.super$ScrollPosition$setPixels(t1) !== 0) {
        t1 = this._delegate;
        t1.beginActivity$1(new M.IdleScrollActivity(t1));
      }
    },
    _scroll_activity$_end$0: function() {
      var t1 = this._delegate;
      if (t1 != null)
        t1.goBallistic$1(0);
    },
    dispatchOverscrollNotification$3: function(metrics, context, overscroll) {
      context.visitAncestorElements$1(G.OverscrollNotification$(context, null, metrics, overscroll, this._scroll_activity$_controller.get$velocity()).get$visitAncestor());
    },
    get$shouldIgnorePointer: function() {
      return true;
    },
    get$isScrolling: function() {
      return true;
    },
    dispose$0: function() {
      this._scroll_activity$_controller.dispose$0();
      this.super$ScrollActivity$dispose();
    }
  };
  M.DrivenScrollActivity.prototype = {
    get$velocity: function() {
      return this._scroll_activity$_controller.get$velocity();
    },
    _scroll_activity$_tick$0: function() {
      if (this._delegate.super$ScrollPosition$setPixels(this._scroll_activity$_controller._animation_controller$_value) !== 0) {
        var t1 = this._delegate;
        t1.beginActivity$1(new M.IdleScrollActivity(t1));
      }
    },
    _scroll_activity$_end$0: function() {
      var t1 = this._delegate;
      if (t1 != null)
        t1.goBallistic$1(this._scroll_activity$_controller.get$velocity());
    },
    dispatchOverscrollNotification$3: function(metrics, context, overscroll) {
      context.visitAncestorElements$1(G.OverscrollNotification$(context, null, metrics, overscroll, this._scroll_activity$_controller.get$velocity()).get$visitAncestor());
    },
    get$shouldIgnorePointer: function() {
      return true;
    },
    get$isScrolling: function() {
      return true;
    },
    dispose$0: function() {
      this._scroll_activity$_completer.complete$0(0);
      this._scroll_activity$_controller.dispose$0();
      this.super$ScrollActivity$dispose();
    },
    set$_scroll_activity$_completer: function(_completer) {
      this._scroll_activity$_completer = H.assertSubtype(_completer, "$isCompleter", [P.Null], "$asCompleter");
    }
  };
  K.ScrollBehavior.prototype = {
    getPlatform$1: function(context) {
      return T.defaultTargetPlatform();
    },
    buildViewportChrome$3: function(context, child, axisDirection) {
      switch (this.getPlatform$1(context)) {
        case C.TargetPlatform_2:
          return child;
        case C.TargetPlatform_0:
        case C.TargetPlatform_1:
          return L.GlowingOverscrollIndicator$(axisDirection, child, C.Color_4294967295);
      }
      return;
    },
    getScrollPhysics$1: function(context) {
      switch (this.getPlatform$1(context)) {
        case C.TargetPlatform_2:
          return C.BouncingScrollPhysics_null;
        case C.TargetPlatform_0:
        case C.TargetPlatform_1:
          return C.ClampingScrollPhysics_null;
      }
      return;
    },
    toString$0: function(_) {
      return new H.TypeImpl(H.getRti(this)).toString$0(0);
    }
  };
  K.ScrollConfiguration.prototype = {
    updateShouldNotify$1: function(oldWidget) {
      var t1;
      H.interceptedTypeCheck(oldWidget, "$isScrollConfiguration");
      if (new H.TypeImpl(H.getRti(this.behavior)).$eq(0, new H.TypeImpl(H.getRti(oldWidget.behavior))))
        t1 = false;
      else
        t1 = true;
      return t1;
    }
  };
  F.ScrollController.prototype = {
    get$initialScrollOffset: function() {
      return this._initialScrollOffset;
    },
    animateTo$3$curve$duration: function(offset, curve, duration) {
      var animations, i,
        t1 = this._positions,
        t2 = new Array(t1.length);
      t2.fixed$length = Array;
      animations = H.setRuntimeTypeInfo(t2, [[P.Future, -1]]);
      for (i = 0; i < t1.length; ++i)
        C.JSArray_methods.$indexSet(animations, i, t1[i].animateTo$3$curve$duration(offset, curve, duration));
      t1 = -1;
      return P.Future_wait(animations, t1).then$1$1(new F.ScrollController_animateTo_closure(), t1);
    },
    attach$1: function(position) {
      var t1, t2;
      C.JSArray_methods.add$1(this._positions, position);
      position.toString;
      t1 = H.functionTypeCheck(this.get$notifyListeners(), {func: 1, ret: -1});
      t2 = position._listeners;
      t2.toString;
      H.assertSubtypeOfRuntimeType(t1, H.getTypeArgumentByIndex(t2, 0));
      t2._isDirty = true;
      C.JSArray_methods.add$1(t2._list, t1);
    },
    detach$1: function(_, position) {
      var t1, t2;
      position.toString;
      t1 = H.functionTypeCheck(this.get$notifyListeners(), {func: 1, ret: -1});
      t2 = position._listeners;
      t2.toString;
      H.assertSubtypeOfRuntimeType(t1, H.getTypeArgumentByIndex(t2, 0));
      t2._isDirty = true;
      C.JSArray_methods.remove$1(t2._list, t1);
      C.JSArray_methods.remove$1(this._positions, position);
    },
    dispose$0: function() {
      var t1, t2, t3, t4, _i, position, t5;
      for (t1 = this._positions, t2 = t1.length, t3 = this.get$notifyListeners(), t4 = {func: 1, ret: -1}, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
        position = t1[_i];
        position.toString;
        H.functionTypeCheck(t3, t4);
        t5 = position._listeners;
        t5.toString;
        H.assertSubtypeOfRuntimeType(t3, H.getTypeArgumentByIndex(t5, 0));
        t5._isDirty = true;
        C.JSArray_methods.remove$1(t5._list, t3);
      }
      this.super$ChangeNotifier$dispose();
    },
    createScrollPosition$3: function(physics, context, oldPosition) {
      return R.ScrollPositionWithSingleContext$(context, this.debugLabel, this.get$initialScrollOffset(), this.keepScrollOffset, oldPosition, physics);
    },
    toString$0: function(_) {
      var t2, _this = this,
        t1 = [P.String],
        description = H.setRuntimeTypeInfo([], t1);
      H.assertSubtype(description, "$isList", t1, "$asList");
      t1 = _this.debugLabel;
      if (t1 != null)
        C.JSArray_methods.add$1(description, t1);
      if (_this.get$initialScrollOffset() !== 0)
        C.JSArray_methods.add$1(description, "initialScrollOffset: " + J.toStringAsFixed$1$n(_this.get$initialScrollOffset(), 1) + ", ");
      t1 = _this._positions;
      t2 = t1.length;
      if (t2 === 0)
        C.JSArray_methods.add$1(description, "no clients");
      else if (t2 === 1) {
        t1 = C.JSArray_methods.get$single(t1)._pixels;
        C.JSArray_methods.add$1(description, "one client, offset " + H.S(t1 == null ? null : C.JSNumber_methods.toStringAsFixed$1(t1, 1)));
      } else
        C.JSArray_methods.add$1(description, "" + t2 + " clients");
      return _this.get$runtimeType(_this).toString$0(0) + "#" + Y.shortHash(_this) + "(" + C.JSArray_methods.join$1(description, ", ") + ")";
    }
  };
  F.ScrollController_animateTo_closure.prototype = {
    call$1: function(_) {
      H.assertSubtype(_, "$isList", [-1], "$asList");
      return;
    },
    $signature: 177
  };
  F.TrackingScrollController.prototype = {
    get$initialScrollOffset: function() {
      var t1 = this._lastUpdatedOffset;
      return t1 == null ? F.ScrollController.prototype.get$initialScrollOffset.call(this) : t1;
    },
    attach$1: function(position) {
      var t1, t2;
      this.super$ScrollController$attach(position);
      t1 = this._positionToListener;
      t1.$indexSet(0, position, new F.TrackingScrollController_attach_closure(this, position));
      t1 = t1.$index(0, position);
      position.toString;
      H.functionTypeCheck(t1, {func: 1, ret: -1});
      t2 = position._listeners;
      t2.toString;
      H.assertSubtypeOfRuntimeType(t1, H.getTypeArgumentByIndex(t2, 0));
      t2._isDirty = true;
      C.JSArray_methods.add$1(t2._list, t1);
    },
    detach$1: function(_, position) {
      var t1, t2, t3, _this = this;
      _this.super$ScrollController$detach(0, position);
      t1 = _this._positionToListener;
      t2 = t1.$index(0, position);
      position.toString;
      H.functionTypeCheck(t2, {func: 1, ret: -1});
      t3 = position._listeners;
      t3.toString;
      H.assertSubtypeOfRuntimeType(t2, H.getTypeArgumentByIndex(t3, 0));
      t3._isDirty = true;
      C.JSArray_methods.remove$1(t3._list, t2);
      t1.remove$1(0, position);
      if (_this._lastUpdated == position)
        _this._lastUpdated = null;
      if (t1.get$isEmpty(t1))
        _this._lastUpdatedOffset = null;
    },
    dispose$0: function() {
      var t1, t2, t3, t4, _i, position, t5, t6;
      for (t1 = this._positions, t2 = t1.length, t3 = this._positionToListener, t4 = {func: 1, ret: -1}, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
        position = t1[_i];
        t5 = t3.$index(0, position);
        position.toString;
        H.functionTypeCheck(t5, t4);
        t6 = position._listeners;
        t6.toString;
        H.assertSubtypeOfRuntimeType(t5, H.getTypeArgumentByIndex(t6, 0));
        t6._isDirty = true;
        C.JSArray_methods.remove$1(t6._list, t5);
      }
      this.super$ScrollController$dispose();
    }
  };
  F.TrackingScrollController_attach_closure.prototype = {
    call$0: function() {
      var t1 = this.$this,
        t2 = this.position;
      t1._lastUpdated = t2;
      t1._lastUpdatedOffset = t2._pixels;
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 0
  };
  M.ScrollMetrics.prototype = {
    copyWith$0: function() {
      var _this = this,
        t1 = _this.get$minScrollExtent(),
        t2 = _this.get$maxScrollExtent(),
        t3 = _this.get$pixels(),
        t4 = _this.get$viewportDimension(),
        t5 = _this.get$axisDirection();
      return M.FixedScrollMetrics$(t5, t2, t1, t3, t4);
    },
    get$outOfRange: function() {
      var _this = this,
        t1 = _this.get$pixels(),
        t2 = _this.get$minScrollExtent();
      if (typeof t1 !== "number")
        return t1.$lt();
      if (typeof t2 !== "number")
        return H.iae(t2);
      if (!(t1 < t2)) {
        t1 = _this.get$pixels();
        t2 = _this.get$maxScrollExtent();
        if (typeof t1 !== "number")
          return t1.$gt();
        if (typeof t2 !== "number")
          return H.iae(t2);
        t2 = t1 > t2;
        t1 = t2;
      } else
        t1 = true;
      return t1;
    }
  };
  M.FixedScrollMetrics.prototype = {
    toString$0: function(_) {
      var t1 = this.super$Object$toString(0);
      return t1;
    },
    get$minScrollExtent: function() {
      return this.minScrollExtent;
    },
    get$maxScrollExtent: function() {
      return this.maxScrollExtent;
    },
    get$pixels: function() {
      return this.pixels;
    },
    get$viewportDimension: function() {
      return this.viewportDimension;
    },
    get$axisDirection: function() {
      return this.axisDirection;
    }
  };
  G.ViewportNotificationMixin.prototype = {};
  G.ScrollNotification.prototype = {
    debugFillDescription$1: function(description) {
      var t1, _this = this;
      H.assertSubtype(description, "$isList", [P.String], "$asList");
      _this.super$Notification$debugFillDescription(description);
      t1 = "depth: " + _this._scroll_notification$_depth + " (";
      C.JSArray_methods.add$1(description, t1 + (_this._scroll_notification$_depth === 0 ? "local" : "remote") + ")");
      C.JSArray_methods.add$1(description, _this.metrics.toString$0(0));
    },
    visitAncestor$1: function(element) {
      if (!!element.$isRenderObjectElement && !!J.getInterceptor$(element.get$renderObject()).$isRenderAbstractViewport)
        ++this._scroll_notification$_depth;
      return this.super$Notification$visitAncestor(element);
    }
  };
  G.ScrollStartNotification.prototype = {
    debugFillDescription$1: function(description) {
      var t1;
      H.assertSubtype(description, "$isList", [P.String], "$asList");
      this.super$ScrollNotification$debugFillDescription(description);
      t1 = this.dragDetails;
      if (t1 != null)
        C.JSArray_methods.add$1(description, t1.toString$0(0));
    },
    get$dragDetails: function() {
      return this.dragDetails;
    }
  };
  G.ScrollUpdateNotification.prototype = {
    debugFillDescription$1: function(description) {
      var t1;
      H.assertSubtype(description, "$isList", [P.String], "$asList");
      this.super$ScrollNotification$debugFillDescription(description);
      C.JSArray_methods.add$1(description, "scrollDelta: " + H.S(this.scrollDelta));
      t1 = this.dragDetails;
      if (t1 != null)
        C.JSArray_methods.add$1(description, t1.toString$0(0));
    },
    get$dragDetails: function() {
      return this.dragDetails;
    }
  };
  G.OverscrollNotification.prototype = {
    debugFillDescription$1: function(description) {
      var t1, _this = this;
      H.assertSubtype(description, "$isList", [P.String], "$asList");
      _this.super$ScrollNotification$debugFillDescription(description);
      C.JSArray_methods.add$1(description, "overscroll: " + C.JSNumber_methods.toStringAsFixed$1(_this.overscroll, 1));
      C.JSArray_methods.add$1(description, "velocity: " + C.JSNumber_methods.toStringAsFixed$1(_this.velocity, 1));
      t1 = _this.dragDetails;
      if (t1 != null)
        C.JSArray_methods.add$1(description, t1.toString$0(0));
    },
    get$dragDetails: function() {
      return this.dragDetails;
    }
  };
  G.ScrollEndNotification.prototype = {
    debugFillDescription$1: function(description) {
      var t1;
      H.assertSubtype(description, "$isList", [P.String], "$asList");
      this.super$ScrollNotification$debugFillDescription(description);
      t1 = this.dragDetails;
      if (t1 != null)
        C.JSArray_methods.add$1(description, t1.toString$0(0));
    },
    get$dragDetails: function() {
      return this.dragDetails;
    }
  };
  G.UserScrollNotification.prototype = {
    debugFillDescription$1: function(description) {
      H.assertSubtype(description, "$isList", [P.String], "$asList");
      this.super$ScrollNotification$debugFillDescription(description);
      C.JSArray_methods.add$1(description, "direction: " + this.direction.toString$0(0));
    }
  };
  L.ScrollPhysics.prototype = {
    buildParent$1: function(ancestor) {
      var t1 = this.parent;
      t1 = t1 == null ? null : t1.applyTo$1(ancestor);
      return t1 == null ? ancestor : t1;
    },
    applyPhysicsToUserOffset$2: function(position, offset) {
      var t1 = this.parent;
      if (t1 == null)
        return offset;
      return t1.applyPhysicsToUserOffset$2(position, offset);
    },
    shouldAcceptUserOffset$1: function(position) {
      var t1 = this.parent;
      if (t1 == null)
        return position._pixels !== 0 || position._minScrollExtent != position._maxScrollExtent;
      return t1.shouldAcceptUserOffset$1(position);
    },
    applyBoundaryConditions$2: function(position, value) {
      var t1 = this.parent;
      if (t1 == null)
        return 0;
      return t1.applyBoundaryConditions$2(position, value);
    },
    createBallisticSimulation$2: function(position, velocity) {
      var t1 = this.parent;
      if (t1 == null)
        return;
      return t1.createBallisticSimulation$2(position, velocity);
    },
    get$spring: function() {
      var t1 = this.parent;
      t1 = t1 == null ? null : t1.get$spring();
      return t1 == null ? $.$get$ScrollPhysics__kDefaultSpring() : t1;
    },
    get$tolerance: function() {
      var t1 = this.parent;
      t1 = t1 == null ? null : t1.get$tolerance();
      return t1 == null ? $.$get$ScrollPhysics__kDefaultTolerance() : t1;
    },
    get$minFlingDistance: function() {
      var t1 = this.parent;
      t1 = t1 == null ? null : t1.get$minFlingDistance();
      return t1 == null ? 18 : t1;
    },
    get$minFlingVelocity: function() {
      var t1 = this.parent;
      t1 = t1 == null ? null : t1.get$minFlingVelocity();
      return t1 == null ? 50 : t1;
    },
    get$maxFlingVelocity: function() {
      var t1 = this.parent;
      t1 = t1 == null ? null : t1.get$maxFlingVelocity();
      return t1 == null ? 8000 : t1;
    },
    carriedMomentum$1: function(existingVelocity) {
      var t1 = this.parent;
      if (t1 == null)
        return 0;
      return t1.carriedMomentum$1(existingVelocity);
    },
    get$dragStartDistanceMotionThreshold: function() {
      var t1 = this.parent;
      return t1 == null ? null : t1.get$dragStartDistanceMotionThreshold();
    },
    get$allowImplicitScrolling: function() {
      return true;
    },
    toString$0: function(_) {
      var t1 = this.parent;
      if (t1 == null)
        return new H.TypeImpl(H.getRti(this)).get$_typeName();
      return new H.TypeImpl(H.getRti(this)).toString$0(0) + " -> " + t1.toString$0(0);
    }
  };
  L.BouncingScrollPhysics.prototype = {
    applyTo$1: function(ancestor) {
      return new L.BouncingScrollPhysics(this.buildParent$1(ancestor));
    },
    applyPhysicsToUserOffset$2: function(position, offset) {
      var t1, t2, overscrollPastStart, overscrollPastEnd, overscrollPast, easing, friction;
      if (!position.get$outOfRange())
        return offset;
      t1 = position._minScrollExtent;
      t2 = position._pixels;
      if (typeof t1 !== "number")
        return t1.$sub();
      if (typeof t2 !== "number")
        return H.iae(t2);
      overscrollPastStart = Math.max(t1 - t2, 0);
      t1 = position._maxScrollExtent;
      if (typeof t1 !== "number")
        return H.iae(t1);
      overscrollPastEnd = Math.max(t2 - t1, 0);
      overscrollPast = Math.max(overscrollPastStart, overscrollPastEnd);
      if (!(overscrollPastStart > 0 && offset < 0))
        easing = overscrollPastEnd > 0 && offset > 0;
      else
        easing = true;
      t1 = position._viewportDimension;
      if (easing) {
        if (typeof t1 !== "number")
          return H.iae(t1);
        friction = 0.52 * Math.pow(1 - (overscrollPast - Math.abs(offset)) / t1, 2);
      } else {
        if (typeof t1 !== "number")
          return H.iae(t1);
        friction = 0.52 * Math.pow(1 - overscrollPast / t1, 2);
      }
      return J.get$sign$in(offset) * L.BouncingScrollPhysics__applyFriction(overscrollPast, Math.abs(offset), friction);
    },
    applyBoundaryConditions$2: function(position, value) {
      return 0;
    },
    createBallisticSimulation$2: function(position, velocity) {
      var t1, t2, t3, t4, t5, t6, finalX,
        tolerance = this.get$tolerance();
      if (Math.abs(velocity) >= tolerance.velocity || position.get$outOfRange()) {
        t1 = this.get$spring();
        t2 = position._pixels;
        t3 = velocity * 0.91;
        t4 = position._minScrollExtent;
        t5 = position._maxScrollExtent;
        t6 = new Y.BouncingScrollSimulation(t4, t5, t1, tolerance);
        if (typeof t2 !== "number")
          return t2.$lt();
        if (typeof t4 !== "number")
          return H.iae(t4);
        if (t2 < t4) {
          t6._springSimulation = new M.ScrollSpringSimulation(t4, M._SpringSolution__SpringSolution(t1, t2 - t4, t3), C.Tolerance_Gdw);
          t6._springTime = -1 / 0;
        } else {
          if (typeof t5 !== "number")
            return H.iae(t5);
          if (t2 > t5) {
            t6._springSimulation = new M.ScrollSpringSimulation(t5, M._SpringSolution__SpringSolution(t1, t2 - t5, t3), C.Tolerance_Gdw);
            t6._springTime = -1 / 0;
          } else {
            t2 = t6._frictionSimulation = new D.FrictionSimulation(0.135, Math.log(0.135), t2, t3, C.Tolerance_Gdw);
            finalX = t2.get$finalX();
            if (t3 > 0 && finalX > t5) {
              t2 = t2.timeAtX$1(t5);
              t6._springTime = t2;
              t6._springSimulation = new M.ScrollSpringSimulation(t5, M._SpringSolution__SpringSolution(t1, t5 - t5, Math.min(t3 * Math.pow(0.135, t2), 5000)), C.Tolerance_Gdw);
            } else if (t3 < 0 && finalX < t4) {
              t2 = t2.timeAtX$1(t4);
              t6._springTime = t2;
              t6._springSimulation = new M.ScrollSpringSimulation(t4, M._SpringSolution__SpringSolution(t1, t4 - t4, Math.min(t3 * Math.pow(0.135, t2), 5000)), C.Tolerance_Gdw);
            } else
              t6._springTime = 1 / 0;
          }
        }
        return t6;
      }
      return;
    },
    get$minFlingVelocity: function() {
      return 100;
    },
    carriedMomentum$1: function(existingVelocity) {
      return J.get$sign$in(existingVelocity) * Math.min(0.000816 * Math.pow(Math.abs(existingVelocity), 1.967), 40000);
    },
    get$dragStartDistanceMotionThreshold: function() {
      return 3.5;
    }
  };
  L.ClampingScrollPhysics.prototype = {
    applyTo$1: function(ancestor) {
      return new L.ClampingScrollPhysics(this.buildParent$1(ancestor));
    },
    applyBoundaryConditions$2: function(position, value) {
      var t2, t3,
        t1 = position._pixels;
      if (typeof value !== "number")
        return value.$lt();
      if (typeof t1 !== "number")
        return H.iae(t1);
      if (value < t1) {
        t2 = position._minScrollExtent;
        if (typeof t2 !== "number")
          return H.iae(t2);
        t2 = t1 <= t2;
      } else
        t2 = false;
      if (t2)
        return value - t1;
      t2 = position._maxScrollExtent;
      if (typeof t2 !== "number")
        return t2.$le();
      if (t2 <= t1 && t1 < value)
        return value - t1;
      t3 = position._minScrollExtent;
      if (typeof t3 !== "number")
        return H.iae(t3);
      if (value < t3 && t3 < t1)
        return value - t3;
      if (t1 < t2 && t2 < value)
        return value - t2;
      return 0;
    },
    createBallisticSimulation$2: function(position, velocity) {
      var t1, t2, end, t3, deceleration,
        tolerance = this.get$tolerance();
      if (position.get$outOfRange()) {
        t1 = position._pixels;
        t2 = position._maxScrollExtent;
        if (typeof t1 !== "number")
          return t1.$gt();
        if (typeof t2 !== "number")
          return H.iae(t2);
        if (t1 > t2)
          end = t2;
        else
          end = null;
        t2 = position._minScrollExtent;
        if (typeof t2 !== "number")
          return H.iae(t2);
        if (t1 < t2)
          end = t2;
        t1 = this.get$spring();
        t2 = position._pixels;
        t3 = Math.min(0, velocity);
        if (typeof t2 !== "number")
          return t2.$sub();
        if (typeof end !== "number")
          return H.iae(end);
        return new M.ScrollSpringSimulation(end, M._SpringSolution__SpringSolution(t1, t2 - end, t3), tolerance);
      }
      t1 = Math.abs(velocity);
      if (t1 < tolerance.velocity)
        return;
      if (velocity > 0) {
        t2 = position._pixels;
        t3 = position._maxScrollExtent;
        if (typeof t2 !== "number")
          return t2.$ge();
        if (typeof t3 !== "number")
          return H.iae(t3);
        t3 = t2 >= t3;
        t2 = t3;
      } else
        t2 = false;
      if (t2)
        return;
      if (velocity < 0) {
        t2 = position._pixels;
        t3 = position._minScrollExtent;
        if (typeof t2 !== "number")
          return t2.$le();
        if (typeof t3 !== "number")
          return H.iae(t3);
        t3 = t2 <= t3;
        t2 = t3;
      } else
        t2 = false;
      if (t2)
        return;
      t2 = new Y.ClampingScrollSimulation(position._pixels, velocity, tolerance);
      deceleration = Math.log(0.35 * t1 / 778.3530259679999);
      t1 = $.$get$ClampingScrollSimulation__kDecelerationRate();
      if (typeof t1 !== "number")
        return t1.$sub();
      t1 = Math.exp(deceleration / (t1 - 1));
      t2._scroll_simulation$_duration = t1;
      t2._distance = Math.abs(velocity * t1 / 3.065);
      return t2;
    }
  };
  L.AlwaysScrollableScrollPhysics.prototype = {
    applyTo$1: function(ancestor) {
      return new L.AlwaysScrollableScrollPhysics(this.buildParent$1(ancestor));
    },
    shouldAcceptUserOffset$1: function(position) {
      return true;
    }
  };
  A.ScrollPosition.prototype = {
    ScrollPosition$5$context$debugLabel$keepScrollOffset$oldPosition$physics: function(context, debugLabel, keepScrollOffset, oldPosition, physics) {
      if (oldPosition != null)
        this.absorb$1(oldPosition);
      if (H.boolConversionCheck(this.keepScrollOffset))
        this.restoreScrollOffset$0();
    },
    get$minScrollExtent: function() {
      return this._minScrollExtent;
    },
    get$maxScrollExtent: function() {
      return this._maxScrollExtent;
    },
    get$pixels: function() {
      return this._pixels;
    },
    get$viewportDimension: function() {
      return this._viewportDimension;
    },
    absorb$1: function(other) {
      var _this = this;
      _this._minScrollExtent = other._minScrollExtent;
      _this._maxScrollExtent = other._maxScrollExtent;
      _this._pixels = other._pixels;
      _this._viewportDimension = other._viewportDimension;
      _this._activity = other._activity;
      other._activity = null;
      if (!new H.TypeImpl(H.getRti(other)).$eq(0, new H.TypeImpl(H.getRti(_this))))
        _this._activity.resetActivity$0();
      _this.context.setIgnorePointer$1(_this._activity.get$shouldIgnorePointer());
      _this.isScrollingNotifier.set$value(0, _this._activity.get$isScrolling());
    },
    setPixels$1: function(newPixels) {
      var result, oldPixels, t1, _this = this;
      if (newPixels != _this._pixels) {
        result = _this.physics.applyBoundaryConditions$2(_this, newPixels);
        oldPixels = _this._pixels;
        if (typeof newPixels !== "number")
          return newPixels.$sub();
        t1 = newPixels - result;
        _this._pixels = t1;
        if (t1 !== oldPixels) {
          _this._updateSemanticActions$0();
          _this.super$ChangeNotifier$notifyListeners();
          t1 = _this._pixels;
          if (typeof t1 !== "number")
            return t1.$sub();
          if (typeof oldPixels !== "number")
            return H.iae(oldPixels);
          _this.didUpdateScrollPositionBy$1(t1 - oldPixels);
        }
        if (result !== 0) {
          _this._activity.dispatchOverscrollNotification$3(_this.copyWith$0(), $.GlobalKey__registry.$index(0, _this.context._gestureDetectorKey), result);
          return result;
        }
      }
      return 0;
    },
    correctBy$1: function(correction) {
      var t1 = this._pixels;
      if (typeof t1 !== "number")
        return t1.$add();
      if (typeof correction !== "number")
        return H.iae(correction);
      this._pixels = t1 + correction;
      this._didChangeViewportDimensionOrReceiveCorrection = true;
    },
    saveScrollOffset$0: function() {
      var t1 = this.context,
        t2 = S.PageStorage_of(t1._element);
      if (t2 != null)
        t2.writeState$2(t1._element, this._pixels);
    },
    restoreScrollOffset$0: function() {
      var t1, t2, value;
      if (this._pixels == null) {
        t1 = this.context;
        t2 = S.PageStorage_of(t1._element);
        value = t2 == null ? null : t2.readState$1(t1._element);
        if (value != null)
          this._pixels = value;
      }
    },
    applyViewportDimension$1: function(viewportDimension) {
      if (this._viewportDimension != viewportDimension) {
        this._viewportDimension = viewportDimension;
        this._didChangeViewportDimensionOrReceiveCorrection = true;
      }
      return true;
    },
    _updateSemanticActions$0: function() {
      var $forward, backward, t1, actions, t2, t3, _this = this;
      switch (G.axisDirectionToAxis(_this.get$axisDirection())) {
        case C.Axis_1:
          $forward = C.SemanticsAction_16;
          backward = C.SemanticsAction_32;
          break;
        case C.Axis_0:
          $forward = C.SemanticsAction_4;
          backward = C.SemanticsAction_8;
          break;
        default:
          $forward = null;
          backward = null;
      }
      t1 = Q.SemanticsAction;
      actions = P.LinkedHashSet_LinkedHashSet(t1);
      t2 = _this._pixels;
      t3 = _this._minScrollExtent;
      if (typeof t2 !== "number")
        return t2.$gt();
      if (typeof t3 !== "number")
        return H.iae(t3);
      if (t2 > t3)
        actions.add$1(0, backward);
      t2 = _this._pixels;
      t3 = _this._maxScrollExtent;
      if (typeof t2 !== "number")
        return t2.$lt();
      if (typeof t3 !== "number")
        return H.iae(t3);
      if (t2 < t3)
        actions.add$1(0, $forward);
      if (S.setEquals(actions, _this._semanticActions, t1))
        return;
      _this.set$_semanticActions(actions);
      t1 = H.assertSubtype(_this._semanticActions, "$isSet", [t1], "$asSet");
      t2 = _this.context._gestureDetectorKey;
      if (t2.get$currentState() != null) {
        t2 = t2.get$currentState();
        if (!t2._widget.excludeFromSemantics)
          H.interceptedTypeCheck(t2._element.get$renderObject(), "$isRenderSemanticsGestureHandler").set$validActions(t1);
      }
    },
    applyContentDimensions$2: function(minScrollExtent, maxScrollExtent) {
      var _this = this;
      if (!B.nearEqual(_this._minScrollExtent, minScrollExtent, 0.001) || !B.nearEqual(_this._maxScrollExtent, maxScrollExtent, 0.001) || _this._didChangeViewportDimensionOrReceiveCorrection) {
        _this._minScrollExtent = minScrollExtent;
        _this._maxScrollExtent = maxScrollExtent;
        _this._haveDimensions = true;
        _this.super$ScrollPosition$applyNewDimensions();
        _this.context.setCanDrag$1(_this.physics.shouldAcceptUserOffset$1(_this));
        _this._didChangeViewportDimensionOrReceiveCorrection = false;
      }
      return true;
    },
    applyNewDimensions$0: function() {
      this._activity.applyNewDimensions$0();
      this._updateSemanticActions$0();
    },
    beginActivity$1: function(newActivity) {
      var oldIgnorePointer, wasScrolling, _this = this,
        t1 = _this._activity;
      if (t1 != null) {
        oldIgnorePointer = t1.get$shouldIgnorePointer();
        wasScrolling = _this._activity.get$isScrolling();
        if (wasScrolling && !newActivity.get$isScrolling())
          _this.didEndScroll$0();
        _this._activity.dispose$0();
      } else {
        wasScrolling = false;
        oldIgnorePointer = false;
      }
      _this._activity = newActivity;
      if (oldIgnorePointer !== newActivity.get$shouldIgnorePointer())
        _this.context.setIgnorePointer$1(_this._activity.get$shouldIgnorePointer());
      _this.isScrollingNotifier.set$value(0, _this._activity.get$isScrolling());
      if (!wasScrolling && _this._activity.get$isScrolling())
        _this.didStartScroll$0();
    },
    didStartScroll$0: function() {
      this._activity.dispatchScrollStartNotification$2(this.copyWith$0(), $.GlobalKey__registry.$index(0, this.context._gestureDetectorKey));
    },
    didUpdateScrollPositionBy$1: function(delta) {
      this._activity.dispatchScrollUpdateNotification$3(this.copyWith$0(), $.GlobalKey__registry.$index(0, this.context._gestureDetectorKey), delta);
    },
    didEndScroll$0: function() {
      var _this = this;
      _this._activity.dispatchScrollEndNotification$2(_this.copyWith$0(), $.GlobalKey__registry.$index(0, _this.context._gestureDetectorKey));
      if (H.boolConversionCheck(_this.keepScrollOffset))
        _this.saveScrollOffset$0();
    },
    dispose$0: function() {
      var t1 = this._activity;
      if (t1 != null)
        t1.dispose$0();
      this._activity = null;
      this.super$ChangeNotifier$dispose();
    },
    debugFillDescription$1: function(description) {
      var t1, t2, _this = this;
      H.assertSubtype(description, "$isList", [P.String], "$asList");
      t1 = _this.debugLabel;
      if (t1 != null)
        C.JSArray_methods.add$1(description, t1);
      _this.super$ViewportOffset$debugFillDescription(description);
      t1 = _this._minScrollExtent;
      t1 = "range: " + H.S(t1 == null ? null : C.JSNumber_methods.toStringAsFixed$1(t1, 1)) + "..";
      t2 = _this._maxScrollExtent;
      C.JSArray_methods.add$1(description, t1 + H.S(t2 == null ? null : C.JSNumber_methods.toStringAsFixed$1(t2, 1)));
      t1 = _this._viewportDimension;
      C.JSArray_methods.add$1(description, "viewport: " + H.S(t1 == null ? null : C.JSNumber_methods.toStringAsFixed$1(t1, 1)));
    },
    set$_semanticActions: function(_semanticActions) {
      this._semanticActions = H.assertSubtype(_semanticActions, "$isSet", [Q.SemanticsAction], "$asSet");
    }
  };
  A._ScrollPosition_ViewportOffset_ScrollMetrics.prototype = {};
  R.ScrollPositionWithSingleContext.prototype = {
    ScrollPositionWithSingleContext$6$context$debugLabel$initialPixels$keepScrollOffset$oldPosition$physics: function(context, debugLabel, initialPixels, keepScrollOffset, oldPosition, physics) {
      var _this = this;
      if (_this._pixels == null && initialPixels != null)
        _this._pixels = initialPixels;
      if (_this._activity == null)
        _this.beginActivity$1(new M.IdleScrollActivity(_this));
    },
    get$axisDirection: function() {
      return this.context._widget.axisDirection;
    },
    absorb$1: function(other) {
      var t1, _this = this;
      _this.super$ScrollPosition$absorb(other);
      _this._activity._delegate = _this;
      _this._userScrollDirection = other._userScrollDirection;
      t1 = other._currentDrag;
      if (t1 != null) {
        _this._currentDrag = t1;
        t1._delegate = _this;
        other._currentDrag = null;
      }
    },
    beginActivity$1: function(newActivity) {
      var t1, _this = this;
      _this._heldPreviousVelocity = 0;
      _this.super$ScrollPosition$beginActivity(newActivity);
      t1 = _this._currentDrag;
      if (t1 != null)
        t1.dispose$0();
      _this._currentDrag = null;
      if (!_this._activity.get$isScrolling())
        _this.updateUserScrollDirection$1(C.ScrollDirection_0);
    },
    goBallistic$1: function(velocity) {
      var t1, t2, t3, t4, _this = this,
        simulation = _this.physics.createBallisticSimulation$2(_this, velocity);
      if (simulation != null) {
        t1 = new M.BallisticScrollActivity(_this);
        t2 = new H.TypeImpl(H.getRti(t1)).toString$0(0);
        t2 = G.AnimationController$unbounded(t2, 0, _this.context);
        t3 = H.functionTypeCheck(t1.get$_scroll_activity$_tick(), {func: 1, ret: -1});
        t2.didRegisterListener$0();
        t4 = t2.AnimationLocalListenersMixin__listeners;
        H.assertSubtypeOfRuntimeType(t3, H.getTypeArgumentByIndex(t4, 0));
        t4._isDirty = true;
        C.JSArray_methods.add$1(t4._list, t3);
        t2.stop$0(0);
        t3 = t2._startSimulation$1(simulation);
        t3.toString;
        t4 = H.functionTypeCheck(t1.get$_scroll_activity$_end(), {func: 1});
        t3._primaryCompleter.future.whenComplete$1(t4);
        t1._scroll_activity$_controller = t2;
        _this.beginActivity$1(t1);
      } else
        _this.beginActivity$1(new M.IdleScrollActivity(_this));
    },
    updateUserScrollDirection$1: function(value) {
      var t1, t2, t3, _this = this;
      if (_this._userScrollDirection === value)
        return;
      _this._userScrollDirection = value;
      t1 = _this.copyWith$0();
      t2 = _this.context._gestureDetectorKey;
      t3 = $.GlobalKey__registry.$index(0, t2);
      $.GlobalKey__registry.$index(0, t2).visitAncestorElements$1(new G.UserScrollNotification(value, t1, t3).get$visitAncestor());
    },
    animateTo$3$curve$duration: function(to, curve, duration) {
      var t1, activity, t2, t3, _this = this;
      if (B.nearEqual(to, _this._pixels, _this.physics.get$tolerance().distance)) {
        _this.jumpTo$1(to);
        t1 = new P._Future($.Zone__current, [-1]);
        t1._asyncComplete$1(null);
        return t1;
      }
      t1 = _this._pixels;
      activity = new M.DrivenScrollActivity(_this);
      t2 = P.Null;
      activity.set$_scroll_activity$_completer(new P._AsyncCompleter(new P._Future($.Zone__current, [t2]), [t2]));
      t1 = G.AnimationController$unbounded(new H.TypeImpl(H.getRti(activity)).toString$0(0), t1, _this.context);
      t2 = H.functionTypeCheck(activity.get$_scroll_activity$_tick(), {func: 1, ret: -1});
      t1.didRegisterListener$0();
      t3 = t1.AnimationLocalListenersMixin__listeners;
      H.assertSubtypeOfRuntimeType(t2, H.getTypeArgumentByIndex(t3, 0));
      t3._isDirty = true;
      C.JSArray_methods.add$1(t3._list, t2);
      t1._direction = C._AnimationDirection_0;
      t2 = t1._animateToInternal$3$curve$duration(to, curve, duration);
      t2.toString;
      t3 = H.functionTypeCheck(activity.get$_scroll_activity$_end(), {func: 1});
      t2._primaryCompleter.future.whenComplete$1(t3);
      activity._scroll_activity$_controller = t1;
      _this.beginActivity$1(activity);
      return activity._scroll_activity$_completer.future;
    },
    jumpTo$1: function(value) {
      var t1, t2, _this = this;
      _this.beginActivity$1(new M.IdleScrollActivity(_this));
      t1 = _this._pixels;
      if (t1 != value) {
        _this._pixels = value;
        _this._updateSemanticActions$0();
        _this.super$ChangeNotifier$notifyListeners();
        _this._updateSemanticActions$0();
        _this.super$ChangeNotifier$notifyListeners();
        _this.didStartScroll$0();
        t2 = _this._pixels;
        if (typeof t2 !== "number")
          return t2.$sub();
        if (typeof t1 !== "number")
          return H.iae(t1);
        _this.didUpdateScrollPositionBy$1(t2 - t1);
        _this.didEndScroll$0();
      }
      _this.goBallistic$1(0);
    },
    dispose$0: function() {
      var t1 = this._currentDrag;
      if (t1 != null)
        t1.dispose$0();
      this._currentDrag = null;
      this.super$ScrollPosition$dispose();
    },
    $isScrollActivityDelegate: 1
  };
  Y.BouncingScrollSimulation.prototype = {
    _scroll_simulation$_simulation$1: function(time) {
      var simulation, _this = this,
        t1 = _this._springTime;
      if (typeof t1 !== "number")
        return H.iae(t1);
      if (time > t1) {
        if (!isFinite(t1))
          t1 = 0;
        _this._timeOffset = t1;
        simulation = _this._springSimulation;
      } else {
        _this._timeOffset = 0;
        simulation = _this._frictionSimulation;
      }
      simulation.tolerance = _this.tolerance;
      return simulation;
    },
    x$1: function(_, time) {
      var t1 = this._scroll_simulation$_simulation$1(time),
        t2 = this._timeOffset;
      if (typeof t2 !== "number")
        return H.iae(t2);
      return t1.x$1(0, time - t2);
    },
    dx$1: function(_, time) {
      var t1 = this._scroll_simulation$_simulation$1(time),
        t2 = this._timeOffset;
      if (typeof t2 !== "number")
        return H.iae(t2);
      return t1.dx$1(0, time - t2);
    },
    isDone$1: function(time) {
      var t1 = this._scroll_simulation$_simulation$1(time),
        t2 = this._timeOffset;
      if (typeof t2 !== "number")
        return H.iae(t2);
      return t1.isDone$1(time - t2);
    },
    toString$0: function(_) {
      var t1 = this.super$Simulation$toString(0);
      return t1;
    }
  };
  Y.ClampingScrollSimulation.prototype = {
    x$1: function(_, time) {
      var t, t2, t3, _this = this,
        t1 = _this._scroll_simulation$_duration;
      if (typeof t1 !== "number")
        return H.iae(t1);
      t = C.JSDouble_methods.clamp$2(time / t1, 0, 1);
      t1 = _this.position;
      t2 = _this._distance;
      if (typeof t2 !== "number")
        return t2.$mul();
      t3 = J.get$sign$in(_this.velocity);
      if (typeof t1 !== "number")
        return t1.$add();
      return t1 + t2 * (1.2 * t * t * t - 3.27 * t * t + 3.065 * t) * t3;
    },
    dx$1: function(_, time) {
      var t, t2, t3, _this = this,
        t1 = _this._scroll_simulation$_duration;
      if (typeof t1 !== "number")
        return H.iae(t1);
      t = C.JSDouble_methods.clamp$2(time / t1, 0, 1);
      t1 = _this._distance;
      if (typeof t1 !== "number")
        return t1.$mul();
      t2 = J.get$sign$in(_this.velocity);
      t3 = _this._scroll_simulation$_duration;
      if (typeof t3 !== "number")
        return H.iae(t3);
      return t1 * (3.6 * t * t - 6.54 * t + 3.065) * t2 / t3;
    },
    isDone$1: function(time) {
      var t1 = this._scroll_simulation$_duration;
      if (typeof t1 !== "number")
        return H.iae(t1);
      return time >= t1;
    }
  };
  B.ScrollView.prototype = {
    buildViewport$4: function(context, offset, axisDirection, slivers) {
      H.assertSubtype(slivers, "$isList", [N.Widget], "$asList");
      return Q.Viewport$(axisDirection, this.cacheExtent, offset, slivers);
    },
    build$1: function(context) {
      var t1, mediaQueryHorizontalPadding, mediaQueryVerticalPadding, t2, t3, t4, t5, t6, t7, t8, t9, slivers, axisDirection, result, scrollController, scrollable, _this = this, _null = null,
        sliver = _this.buildChildLayout$1(context),
        effectivePadding = _this.padding,
        mediaQuery = F.MediaQuery_of(context, true);
      if (mediaQuery != null) {
        t1 = mediaQuery.padding;
        mediaQueryHorizontalPadding = t1.copyWith$2$bottom$top(0, 0);
        mediaQueryVerticalPadding = t1.copyWith$2$left$right(0, 0);
        t1 = _this.scrollDirection === C.Axis_1;
        effectivePadding = t1 ? mediaQueryVerticalPadding : mediaQueryHorizontalPadding;
        t1 = t1 ? mediaQueryHorizontalPadding : mediaQueryVerticalPadding;
        t2 = mediaQuery.size;
        t3 = mediaQuery.devicePixelRatio;
        t4 = mediaQuery.textScaleFactor;
        t5 = mediaQuery.viewInsets;
        t6 = mediaQuery.invertColors;
        t7 = mediaQuery.disableAnimations;
        t8 = mediaQuery.accessibleNavigation;
        t9 = mediaQuery.boldText;
        sliver = new F.MediaQuery(F.MediaQueryData$(t8, false, t9, t3, t7, t6, t1, t2, t4, t5), sliver, _null);
      }
      slivers = H.setRuntimeTypeInfo([effectivePadding != null ? new T.SliverPadding(effectivePadding, sliver, _null) : sliver], [N.Widget]);
      axisDirection = T.getAxisDirectionFromAxisReverseAndDirectionality(context, _this.scrollDirection, false);
      t1 = _this.primary;
      if (t1) {
        result = H.interceptedTypeCheck(context.inheritFromWidgetOfExactType$1(C.Type_PrimaryScrollController_CZ8), "$isPrimaryScrollController");
        scrollController = result == null ? _null : result.controller;
      } else
        scrollController = _this.controller;
      scrollable = F.Scrollable$(axisDirection, scrollController, _this.dragStartBehavior, _this.physics, _this.semanticChildCount, new B.ScrollView_build_closure(_this, axisDirection, slivers));
      return t1 && scrollController != null ? new E.PrimaryScrollController(_null, scrollable, _null) : scrollable;
    }
  };
  B.ScrollView_build_closure.prototype = {
    call$2: function(context, offset) {
      return this.$this.buildViewport$4(H.interceptedTypeCheck(context, "$isBuildContext"), H.interceptedTypeCheck(offset, "$isViewportOffset"), this.axisDirection, this.slivers);
    },
    "call*": "call$2",
    $requiredArgCount: 2,
    $signature: 178
  };
  B.BoxScrollView.prototype = {};
  B.ListView.prototype = {
    buildChildLayout$1: function(context) {
      return new G.SliverList(this.childrenDelegate, null);
    }
  };
  F.Scrollable0.prototype = {
    createState$0: function() {
      var _null = null,
        t1 = [[N.State, N.StatefulWidget]];
      return new F.ScrollableState(new N.LabeledGlobalKey(_null, t1), new N.LabeledGlobalKey(_null, [D.RawGestureDetectorState]), new N.LabeledGlobalKey(_null, t1), C.Map_empty3, _null, C._StateLifecycle_0);
    },
    viewportBuilder$2: function(arg0, arg1) {
      return this.viewportBuilder.call$2(arg0, arg1);
    },
    get$excludeFromSemantics: function() {
      return false;
    }
  };
  F._ScrollableScope.prototype = {
    updateShouldNotify$1: function(old) {
      return this.position != H.interceptedTypeCheck(old, "$is_ScrollableScope").position;
    }
  };
  F.ScrollableState.prototype = {
    _updatePosition$0: function() {
      var t2, controller, oldPosition, _this = this,
        configuration = H.interceptedTypeCheck(_this._element.inheritFromWidgetOfExactType$1(C.Type_ScrollConfiguration_eoF), "$isScrollConfiguration"),
        t1 = configuration == null ? null : configuration.behavior;
      if (t1 == null)
        t1 = C.C_ScrollBehavior;
      _this._scrollable$_configuration = t1;
      t1 = t1.getScrollPhysics$1(_this._element);
      _this._physics = t1;
      t2 = _this._widget.physics;
      if (t2 != null)
        _this._physics = t2.applyTo$1(t1);
      controller = _this._widget.controller;
      oldPosition = _this._scrollable$_position;
      if (oldPosition != null) {
        if (controller != null)
          controller.detach$1(0, oldPosition);
        P.scheduleMicrotask(oldPosition.get$dispose());
      }
      t1 = controller == null;
      t2 = t1 ? null : controller.createScrollPosition$3(_this._physics, _this, oldPosition);
      if (t2 == null)
        t2 = R.ScrollPositionWithSingleContext$(_this, null, 0, true, oldPosition, _this._physics);
      _this._scrollable$_position = t2;
      if (!t1)
        controller.attach$1(t2);
    },
    didChangeDependencies$0: function() {
      this.super$_ScrollableState_State_TickerProviderStateMixin$didChangeDependencies();
      this._updatePosition$0();
    },
    _shouldUpdatePosition$1: function(oldWidget) {
      var t1, t2, t3, _null = null,
        newPhysics = this._widget.physics,
        oldPhysics = oldWidget.physics;
      do {
        t1 = newPhysics == null;
        t2 = t1 ? _null : new H.TypeImpl(H.getRti(newPhysics));
        t3 = oldPhysics == null;
        if (!J.$eq$(t2, t3 ? _null : new H.TypeImpl(H.getRti(oldPhysics))))
          return true;
        newPhysics = t1 ? _null : newPhysics.parent;
        oldPhysics = t3 ? _null : oldPhysics.parent;
      } while (newPhysics != null || oldPhysics != null);
      t1 = this._widget.controller;
      t1 = t1 == null ? _null : new H.TypeImpl(H.getRti(t1));
      t2 = oldWidget.controller;
      return !J.$eq$(t1, t2 == null ? _null : new H.TypeImpl(H.getRti(t2)));
    },
    didUpdateWidget$1: function(oldWidget) {
      var t1, t2, _this = this;
      H.interceptedTypeCheck(oldWidget, "$isScrollable0");
      _this.super$State$didUpdateWidget(oldWidget);
      t1 = _this._widget.controller;
      t2 = oldWidget.controller;
      if (t1 != t2) {
        if (t2 != null)
          t2.detach$1(0, _this._scrollable$_position);
        t1 = _this._widget.controller;
        if (t1 != null)
          t1.attach$1(_this._scrollable$_position);
      }
      if (_this._shouldUpdatePosition$1(oldWidget))
        _this._updatePosition$0();
    },
    dispose$0: function() {
      var _this = this,
        t1 = _this._widget.controller;
      if (t1 != null)
        t1.detach$1(0, _this._scrollable$_position);
      _this._scrollable$_position.dispose$0();
      _this.super$_ScrollableState_State_TickerProviderStateMixin$dispose();
    },
    setCanDrag$1: function(canDrag) {
      var t1, _this = this;
      if (canDrag === _this._lastCanDrag)
        t1 = !canDrag || G.axisDirectionToAxis(_this._widget.axisDirection) == _this._lastAxisDirection;
      else
        t1 = false;
      if (t1)
        return;
      if (!canDrag)
        _this.set$_gestureRecognizers(C.Map_empty3);
      else {
        switch (G.axisDirectionToAxis(_this._widget.axisDirection)) {
          case C.Axis_1:
            _this.set$_gestureRecognizers(P.LinkedHashMap_LinkedHashMap$_literal([C.Type_mLh, new D.GestureRecognizerFactoryWithHandlers(new F.ScrollableState_setCanDrag_closure(), new F.ScrollableState_setCanDrag_closure0(_this), [O.VerticalDragGestureRecognizer])], P.Type, [D.GestureRecognizerFactory, S.GestureRecognizer]));
            break;
          case C.Axis_0:
            _this.set$_gestureRecognizers(P.LinkedHashMap_LinkedHashMap$_literal([C.Type_Vq1, new D.GestureRecognizerFactoryWithHandlers(new F.ScrollableState_setCanDrag_closure1(), new F.ScrollableState_setCanDrag_closure2(_this), [O.HorizontalDragGestureRecognizer])], P.Type, [D.GestureRecognizerFactory, S.GestureRecognizer]));
            break;
        }
        canDrag = true;
      }
      _this._lastCanDrag = canDrag;
      _this._lastAxisDirection = G.axisDirectionToAxis(_this._widget.axisDirection);
      t1 = _this._gestureDetectorKey;
      if (t1.get$currentState() != null)
        t1.get$currentState().replaceGestureRecognizers$1(_this._gestureRecognizers);
    },
    setIgnorePointer$1: function(value) {
      var t1, _this = this;
      if (_this._shouldIgnorePointer === value)
        return;
      _this._shouldIgnorePointer = value;
      t1 = _this._ignorePointerKey;
      if ($.GlobalKey__registry.$index(0, t1) != null)
        H.interceptedTypeCheck($.GlobalKey__registry.$index(0, t1).get$renderObject(), "$isRenderIgnorePointer").set$ignoring(_this._shouldIgnorePointer);
    },
    _handleDragDown$1: function(details) {
      var t1, t2, previousVelocity, holdActivity;
      H.interceptedTypeCheck(details, "$isDragDownDetails");
      t1 = this._scrollable$_position;
      t1.toString;
      t2 = H.functionTypeCheck(this.get$_disposeHold(), {func: 1, ret: -1});
      previousVelocity = t1._activity.get$velocity();
      holdActivity = new M.HoldScrollActivity(t2, t1);
      t1.beginActivity$1(holdActivity);
      t1._heldPreviousVelocity = previousVelocity;
      this._hold = holdActivity;
    },
    _scrollable$_handleDragStart$1: function(details) {
      var t1, t2, t3, t4, t5, t6, drag;
      H.interceptedTypeCheck(details, "$isDragStartDetails");
      t1 = this._scrollable$_position;
      t1.toString;
      t2 = H.functionTypeCheck(this.get$_disposeDrag(), {func: 1, ret: -1});
      t3 = t1.physics;
      t4 = t3.carriedMomentum$1(t1._heldPreviousVelocity);
      t3 = t3.get$dragStartDistanceMotionThreshold();
      t5 = details.sourceTimeStamp;
      t6 = t3 == null ? null : 0;
      drag = new M.ScrollDragController(t1, t2, t4, t3, t5, t4 !== 0, t6, details);
      t1.beginActivity$1(new M.DragScrollActivity(drag, t1));
      this._drag = t1._currentDrag = drag;
    },
    _scrollable$_handleDragUpdate$1: function(details) {
      var t1;
      H.interceptedTypeCheck(details, "$isDragUpdateDetails");
      t1 = this._drag;
      if (t1 != null)
        t1.update$1(0, details);
    },
    _scrollable$_handleDragEnd$1: function(details) {
      var t1, t2, velocity;
      H.interceptedTypeCheck(details, "$isDragEndDetails");
      t1 = this._drag;
      if (t1 != null) {
        t2 = details.primaryVelocity;
        if (typeof t2 !== "number")
          return t2.$negate();
        velocity = -t2;
        if (H.boolConversionCheck(G.axisDirectionIsReversed(t1._delegate.context._widget.axisDirection)))
          velocity = -velocity;
        t1._lastDetails = details;
        if (t1._retainMomentum && J.get$sign$in(velocity) === J.get$sign$in(t1.carriedVelocity))
          velocity += t1.carriedVelocity;
        t1._delegate.goBallistic$1(velocity);
      }
    },
    _scrollable$_handleDragCancel$0: function() {
      var t1 = this._hold;
      if (t1 != null)
        t1._delegate.goBallistic$1(0);
      t1 = this._drag;
      if (t1 != null)
        t1._delegate.goBallistic$1(0);
    },
    _disposeHold$0: function() {
      this._hold = null;
    },
    _disposeDrag$0: function() {
      this._drag = null;
    },
    _targetScrollOffsetForPointerScroll$1: function($event) {
      var t2,
        t1 = $event.scrollDelta,
        delta = G.axisDirectionToAxis(this._widget.axisDirection) === C.Axis_0 ? t1._dx : t1._dy;
      t1 = this._scrollable$_position;
      t2 = t1._pixels;
      if (typeof t2 !== "number")
        return t2.$add();
      if (typeof delta !== "number")
        return H.iae(delta);
      return Math.min(Math.max(t2 + delta, H.checkNum(t1._minScrollExtent)), H.checkNum(t1._maxScrollExtent));
    },
    _receivedPointerSignal$1: function($event) {
      var _this = this,
        t1 = _this._scrollable$_position;
      if (t1 != null)
        if (_this._targetScrollOffsetForPointerScroll$1($event) !== _this._scrollable$_position._pixels)
          $.GestureBinding__instance.GestureBinding_pointerSignalResolver.register$2(0, $event, _this.get$_handlePointerScroll());
    },
    _handlePointerScroll$1: function($event) {
      var targetScrollOffset = this._targetScrollOffsetForPointerScroll$1($event),
        t1 = this._scrollable$_position;
      if (targetScrollOffset !== t1._pixels)
        t1.jumpTo$1(targetScrollOffset);
    },
    build$1: function(context) {
      var t4, t5, result, _this = this, _null = null,
        t1 = _this._scrollable$_position,
        t2 = _this._gestureRecognizers,
        t3 = _this._widget;
      t2 = T.Listener$(C.HitTestBehavior_0, D.RawGestureDetector$(C.HitTestBehavior_1, T.Semantics$(_null, new T.IgnorePointer(_this._shouldIgnorePointer, false, t3.viewportBuilder$2(context, t1), _this._ignorePointerKey), false, _null, true, _null, _null, _null, _null), false, t2, _this._gestureDetectorKey), _null, _null, _this.get$_receivedPointerSignal(), _null);
      t3 = _this._widget;
      t3.toString;
      t4 = _this._scrollable$_position;
      t3 = t3 == null ? _null : t3.physics;
      t3 = t3 == null ? _null : t3.get$allowImplicitScrolling();
      if (t3 == null)
        t3 = _this._physics.get$allowImplicitScrolling();
      t5 = _this._widget;
      result = new F._ScrollSemantics(t4, t3, t5.semanticChildCount, new F._ScrollableScope(t1, t2, _null), _this._scrollSemanticsKey);
      t1 = t5;
      return _this._scrollable$_configuration.buildViewportChrome$3(context, result, t1.axisDirection);
    },
    set$_gestureRecognizers: function(_gestureRecognizers) {
      this._gestureRecognizers = H.assertSubtype(_gestureRecognizers, "$isMap", [P.Type, [D.GestureRecognizerFactory, S.GestureRecognizer]], "$asMap");
    },
    $isTickerProvider: 1,
    $asState: function() {
      return [F.Scrollable0];
    },
    $isScrollContext: 1,
    $asTickerProviderStateMixin: function() {
      return [F.Scrollable0];
    }
  };
  F.ScrollableState_setCanDrag_closure.prototype = {
    call$0: function() {
      var t1 = P.int;
      return new O.VerticalDragGestureRecognizer(C.DragStartBehavior_1, C._DragState_0, P.LinkedHashMap_LinkedHashMap$_empty(t1, R.VelocityTracker), P.LinkedHashMap_LinkedHashMap$_empty(t1, D.GestureArenaEntry), P.HashSet_HashSet(t1), null, null);
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 56
  };
  F.ScrollableState_setCanDrag_closure0.prototype = {
    call$1: function(instance) {
      var t1, t2;
      H.interceptedTypeCheck(instance, "$isVerticalDragGestureRecognizer");
      t1 = this.$this;
      instance.set$onDown(t1.get$_handleDragDown());
      instance.set$onStart(0, t1.get$_scrollable$_handleDragStart());
      instance.set$onUpdate(t1.get$_scrollable$_handleDragUpdate());
      instance.set$onEnd(0, t1.get$_scrollable$_handleDragEnd());
      instance.set$onCancel(0, t1.get$_scrollable$_handleDragCancel());
      t2 = t1._physics;
      instance.minFlingDistance = t2 == null ? null : t2.get$minFlingDistance();
      t2 = t1._physics;
      instance.minFlingVelocity = t2 == null ? null : t2.get$minFlingVelocity();
      t2 = t1._physics;
      instance.maxFlingVelocity = t2 == null ? null : t2.get$maxFlingVelocity();
      instance.dragStartBehavior = t1._widget.dragStartBehavior;
    },
    $signature: 55
  };
  F.ScrollableState_setCanDrag_closure1.prototype = {
    call$0: function() {
      var t1 = P.int;
      return new O.HorizontalDragGestureRecognizer(C.DragStartBehavior_1, C._DragState_0, P.LinkedHashMap_LinkedHashMap$_empty(t1, R.VelocityTracker), P.LinkedHashMap_LinkedHashMap$_empty(t1, D.GestureArenaEntry), P.HashSet_HashSet(t1), null, null);
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 73
  };
  F.ScrollableState_setCanDrag_closure2.prototype = {
    call$1: function(instance) {
      var t1, t2;
      H.interceptedTypeCheck(instance, "$isHorizontalDragGestureRecognizer");
      t1 = this.$this;
      instance.set$onDown(t1.get$_handleDragDown());
      instance.set$onStart(0, t1.get$_scrollable$_handleDragStart());
      instance.set$onUpdate(t1.get$_scrollable$_handleDragUpdate());
      instance.set$onEnd(0, t1.get$_scrollable$_handleDragEnd());
      instance.set$onCancel(0, t1.get$_scrollable$_handleDragCancel());
      t2 = t1._physics;
      instance.minFlingDistance = t2 == null ? null : t2.get$minFlingDistance();
      t2 = t1._physics;
      instance.minFlingVelocity = t2 == null ? null : t2.get$minFlingVelocity();
      t2 = t1._physics;
      instance.maxFlingVelocity = t2 == null ? null : t2.get$maxFlingVelocity();
      instance.dragStartBehavior = t1._widget.dragStartBehavior;
    },
    $signature: 72
  };
  F._ScrollSemantics.prototype = {
    createRenderObject$1: function(context) {
      var t3,
        t1 = this.position,
        t2 = new F._RenderScrollSemantics(t1, this.allowImplicitScrolling, this.semanticChildCount, null);
      t2.get$isRepaintBoundary();
      t2.get$alwaysNeedsCompositing();
      t2._needsCompositing = false;
      t2.set$child(null);
      t1.toString;
      t3 = H.functionTypeCheck(t2.get$markNeedsSemanticsUpdate(), {func: 1, ret: -1});
      t1 = t1._listeners;
      t1.toString;
      H.assertSubtypeOfRuntimeType(t3, H.getTypeArgumentByIndex(t1, 0));
      t1._isDirty = true;
      C.JSArray_methods.add$1(t1._list, t3);
      return t2;
    },
    updateRenderObject$2: function(context, renderObject) {
      H.interceptedTypeCheck(renderObject, "$is_RenderScrollSemantics");
      renderObject.set$allowImplicitScrolling(this.allowImplicitScrolling);
      renderObject.set$position(0, this.position);
      renderObject.set$semanticChildCount(this.semanticChildCount);
    }
  };
  F._RenderScrollSemantics.prototype = {
    set$position: function(_, value) {
      var t2, _this = this,
        t1 = _this._scrollable$_position;
      if (value == t1)
        return;
      t1.toString;
      t2 = H.functionTypeCheck(_this.get$markNeedsSemanticsUpdate(), {func: 1, ret: -1});
      t1 = t1._listeners;
      t1.toString;
      H.assertSubtypeOfRuntimeType(t2, H.getTypeArgumentByIndex(t1, 0));
      t1._isDirty = true;
      C.JSArray_methods.remove$1(t1._list, t2);
      _this._scrollable$_position = value;
      t1 = value._listeners;
      t1.toString;
      H.assertSubtypeOfRuntimeType(t2, H.getTypeArgumentByIndex(t1, 0));
      t1._isDirty = true;
      C.JSArray_methods.add$1(t1._list, t2);
      _this.markNeedsSemanticsUpdate$0();
    },
    set$allowImplicitScrolling: function(value) {
      if (value === this._allowImplicitScrolling)
        return;
      this._allowImplicitScrolling = value;
      this.markNeedsSemanticsUpdate$0();
    },
    set$semanticChildCount: function(value) {
      if (value == this._semanticChildCount)
        return;
      this._semanticChildCount = value;
      this.markNeedsSemanticsUpdate$0();
    },
    describeSemanticsConfiguration$1: function(config) {
      var t1, _this = this;
      _this.super$RenderObject$describeSemanticsConfiguration(config);
      config._isSemanticBoundary = true;
      if (_this._scrollable$_position._haveDimensions) {
        config._setFlag$2(C.SemanticsFlag_262144, _this._allowImplicitScrolling);
        t1 = _this._scrollable$_position;
        config._scrollPosition = t1._pixels;
        config._hasBeenAnnotated = true;
        config._scrollExtentMax = t1._maxScrollExtent;
        config._scrollExtentMin = t1._minScrollExtent;
        config.set$scrollChildCount(_this._semanticChildCount);
      }
    },
    assembleSemanticsNode$3: function(node, config, children) {
      var t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, excluded, included, firstVisibleIndex, _i, child, _this = this,
        t1 = A.SemanticsNode;
      H.assertSubtype(children, "$isIterable", [t1], "$asIterable");
      if (children.length === 0 || !C.JSArray_methods.get$first(children).isTagged$1(C.SemanticsTag_FIw)) {
        _this.super$RenderObject$assembleSemanticsNode(node, config, children);
        return;
      }
      t2 = _this._innerNode;
      if (t2 == null) {
        t2 = $.$get$SemanticsNode__kEmptyConfig();
        t3 = t2._isMergingSemanticsOfDescendants;
        t4 = t2._actions;
        t5 = t2._customSemanticsActions;
        t6 = t2._actionsAsBits;
        t7 = t2._flags;
        t8 = t2._label;
        t9 = t2._semantics$_value;
        t10 = t2._decreasedValue;
        t11 = t2._increasedValue;
        t12 = t2._hint;
        t13 = t2._elevation;
        t14 = t2._thickness;
        t2 = t2._semantics$_textDirection;
        t15 = ($.SemanticsNode__lastIdentifier + 1) % 65535;
        $.SemanticsNode__lastIdentifier = t15;
        t2 = _this._innerNode = new A.SemanticsNode(null, t15, _this.get$showOnScreen(), C.Rect_0_0_0_0, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t2);
      }
      t2.set$isMergedIntoParent(node._mergeAllDescendantsIntoThisNode || node._isMergedIntoParent);
      t3 = node._semantics$_rect;
      t4 = t3.right;
      t5 = t3.left;
      if (typeof t4 !== "number")
        return t4.$sub();
      if (typeof t5 !== "number")
        return H.iae(t5);
      t6 = t3.bottom;
      t3 = t3.top;
      if (typeof t6 !== "number")
        return t6.$sub();
      if (typeof t3 !== "number")
        return H.iae(t3);
      t2.set$rect(0, new Q.Rect(0, 0, 0 + (t4 - t5), 0 + (t6 - t3)));
      t1 = [t1];
      excluded = H.setRuntimeTypeInfo([_this._innerNode], t1);
      included = H.setRuntimeTypeInfo([], t1);
      for (t1 = children.length, firstVisibleIndex = null, _i = 0; _i < children.length; children.length === t1 || (0, H.throwConcurrentModificationError)(children), ++_i) {
        child = children[_i];
        t2 = child.tags;
        if (t2 != null && t2.contains$1(0, C.SemanticsTag_bQQ))
          C.JSArray_methods.add$1(excluded, child);
        else {
          if ((child._flags & 8192) === 0)
            firstVisibleIndex = firstVisibleIndex == null ? child.indexInParent : firstVisibleIndex;
          C.JSArray_methods.add$1(included, child);
        }
      }
      config.set$scrollIndex(firstVisibleIndex);
      node.updateWith$2$childrenInInversePaintOrder$config(0, excluded, null);
      _this._innerNode.updateWith$2$childrenInInversePaintOrder$config(0, included, config);
    },
    clearSemantics$0: function() {
      this.super$RenderObject$clearSemantics();
      this._innerNode = null;
    }
  };
  F._ScrollableState_State_TickerProviderStateMixin.prototype = {
    dispose$0: function() {
      this.super$State$dispose();
    },
    didChangeDependencies$0: function() {
      var muted = !U.TickerMode_of(this._element),
        t1 = this.TickerProviderStateMixin__tickers;
      if (t1 != null)
        for (t1 = P._LinkedHashSetIterator$(t1, t1._collection$_modifications, H.getTypeArgumentByIndex(t1, 0)); t1.moveNext$0();)
          t1._collection$_current.set$muted(0, muted);
      this.super$State$didChangeDependencies();
    },
    set$_tickers: function(_tickers) {
      this.TickerProviderStateMixin__tickers = H.assertSubtype(_tickers, "$isSet", [M.Ticker], "$asSet");
    }
  };
  G.SliverChildDelegate.prototype = {
    toString$0: function(_) {
      var _this = this,
        description = H.setRuntimeTypeInfo([], [P.String]);
      _this.debugFillDescription$1(description);
      return _this.get$runtimeType(_this).toString$0(0) + "#" + Y.shortHash(_this) + "(" + C.JSArray_methods.join$1(description, ", ") + ")";
    },
    debugFillDescription$1: function(description) {
      var children, e, exception;
      H.assertSubtype(description, "$isList", [P.String], "$asList");
      try {
        children = this.childCount;
        if (children != null)
          J.add$1$ax(description, "estimated child count: " + H.S(children));
      } catch (exception) {
        e = H.unwrapException(exception);
        J.add$1$ax(description, "estimated child count: EXCEPTION (" + J.get$runtimeType$(e).toString$0(0) + ")");
      }
    }
  };
  G.SliverChildBuilderDelegate.prototype = {
    build$2: function(context, index) {
      var child, exception, stackTrace, t1, exception0, details, t2, semanticIndex;
      if (typeof index !== "number")
        return index.$lt();
      if (index >= 0)
        t1 = index >= this.childCount;
      else
        t1 = true;
      if (t1)
        return;
      child = null;
      try {
        child = this.builder.call$2(context, index);
      } catch (exception0) {
        exception = H.unwrapException(exception0);
        stackTrace = H.getTraceFromException(exception0);
        details = U.FlutterErrorDetails$("building", exception, null, "widgets library", false, stackTrace);
        U.assertions_FlutterError_dumpErrorToConsole$closure().call$1(details);
        child = H.interceptedTypeCheck($.$get$ErrorWidget_builder().call$1(details), "$isErrorWidget");
      }
      if (child == null)
        return;
      t1 = child;
      t2 = t1.key;
      child = new T.RepaintBoundary(t1, t2 != null ? new D.ValueKey(t2, [D.Key]) : new D.ValueKey(index, [P.int]));
      semanticIndex = G._kDefaultSemanticIndexCallback(child, index);
      if (semanticIndex != null)
        child = new T.IndexedSemantics(semanticIndex, child, null);
      t1 = child;
      child = new L.AutomaticKeepAlive(t1, null);
      return child;
    }
  };
  G.SliverWithKeepAliveWidget.prototype = {};
  G.SliverMultiBoxAdaptorWidget.prototype = {
    createElement$0: function(_) {
      var t3,
        t1 = P.int,
        t2 = P.HashMap_HashMap(t1, N.Widget);
      t1 = P.SplayTreeMap$(t1, N.Element);
      t3 = ($.Element__nextHashCode + 1) % 16777215;
      $.Element__nextHashCode = t3;
      return new G.SliverMultiBoxAdaptorElement(t2, t1, t3, this, C._ElementLifecycle_0);
    }
  };
  G.SliverList.prototype = {
    createRenderObject$1: function(context) {
      var t1 = new U.RenderSliverList(H.interceptedTypeCheck(context, "$isSliverMultiBoxAdaptorElement"), P.LinkedHashMap_LinkedHashMap$_empty(P.int, S.RenderBox), 0, null, null);
      t1.get$isRepaintBoundary();
      t1.get$alwaysNeedsCompositing();
      t1._needsCompositing = false;
      return t1;
    }
  };
  G.SliverFillViewport.prototype = {
    createRenderObject$1: function(context) {
      var t1 = new A.RenderSliverFillViewport(this.viewportFraction, H.interceptedTypeCheck(context, "$isSliverMultiBoxAdaptorElement"), P.LinkedHashMap_LinkedHashMap$_empty(P.int, S.RenderBox), 0, null, null);
      t1.get$isRepaintBoundary();
      t1.get$alwaysNeedsCompositing();
      t1._needsCompositing = false;
      return t1;
    },
    updateRenderObject$2: function(context, renderObject) {
      H.interceptedTypeCheck(renderObject, "$isRenderSliverFillViewport").set$viewportFraction(this.viewportFraction);
    }
  };
  G.SliverMultiBoxAdaptorElement.prototype = {
    get$widget: function() {
      return H.interceptedTypeCheck(N.RenderObjectElement.prototype.get$widget.call(this), "$isSliverMultiBoxAdaptorWidget");
    },
    get$renderObject: function() {
      return H.interceptedTypeCheck(N.RenderObjectElement.prototype.get$renderObject.call(this), "$isRenderSliverMultiBoxAdaptor");
    },
    update$1: function(_, newWidget) {
      var oldWidget, newDelegate, oldDelegate, t1;
      H.interceptedTypeCheck(newWidget, "$isSliverMultiBoxAdaptorWidget");
      oldWidget = H.interceptedTypeCheck(N.RenderObjectElement.prototype.get$widget.call(this), "$isSliverMultiBoxAdaptorWidget");
      this.super$RenderObjectElement$update(0, newWidget);
      newDelegate = newWidget.delegate;
      oldDelegate = oldWidget.delegate;
      if (newDelegate !== oldDelegate) {
        new H.TypeImpl(H.getRti(newDelegate)).$eq(0, new H.TypeImpl(H.getRti(oldDelegate)));
        t1 = true;
      } else
        t1 = false;
      if (t1)
        this.performRebuild$0();
    },
    performRebuild$0: function() {
      var processElement, lastKey, t2, lastKey0, _this = this,
        t1 = _this._childWidgets;
      if (t1._collection$_length > 0) {
        t1._collection$_strings = t1._collection$_nums = t1._collection$_rest = t1._collection$_keys = null;
        t1._collection$_length = 0;
      }
      _this.super$RenderObjectElement$performRebuild();
      _this._currentBeforeChild = null;
      try {
        processElement = new G.SliverMultiBoxAdaptorElement_performRebuild_processElement(_this);
        t1 = _this._sliver0$_childElements;
        t2 = H.getTypeArgumentByIndex(t1, 0);
        C.JSArray_methods.forEach$1(P.List_List$from(new P._SplayTreeKeyIterable(t1, [t2]), true, t2), processElement);
        if (_this._didUnderflow) {
          lastKey0 = t1.lastKey$0();
          lastKey = lastKey0 == null ? -1 : lastKey0;
          processElement.call$1(J.$add$ansx(lastKey, 1));
        }
      } finally {
        _this._currentlyUpdatingChildIndex = null;
      }
    },
    _build$1: function(index) {
      return this._childWidgets.putIfAbsent$2(0, index, new G.SliverMultiBoxAdaptorElement__build_closure(this, index));
    },
    createChild$2$after: function(index, after) {
      this._owner.buildScope$2(this, new G.SliverMultiBoxAdaptorElement_createChild_closure(this, after, index));
    },
    updateChild$3: function(child, newWidget, newSlot) {
      var newParentData, _null = null,
        t1 = child == null ? _null : child.get$renderObject(),
        oldParentData = H.interceptedTypeCheck(t1 == null ? _null : t1.parentData, "$isSliverMultiBoxAdaptorParentData"),
        newChild = this.super$Element$updateChild(child, newWidget, newSlot);
      t1 = newChild == null ? _null : newChild.get$renderObject();
      newParentData = H.interceptedTypeCheck(t1 == null ? _null : t1.parentData, "$isSliverMultiBoxAdaptorParentData");
      if (oldParentData != newParentData && oldParentData != null && newParentData != null)
        newParentData.layoutOffset = oldParentData.layoutOffset;
      return newChild;
    },
    forgetChild$1: function(child) {
      this._sliver0$_childElements.remove$1(0, child._slot);
    },
    removeChild$1: function(child) {
      var index, _this = this;
      H.interceptedTypeCheck(child, "$isRenderBox");
      H.interceptedTypeCheck(N.RenderObjectElement.prototype.get$renderObject.call(_this), "$isRenderSliverMultiBoxAdaptor").toString;
      index = H.interceptedTypeCheck(child.parentData, "$isSliverMultiBoxAdaptorParentData").index;
      _this._owner.buildScope$2(_this, new G.SliverMultiBoxAdaptorElement_removeChild_closure(_this, index));
    },
    estimateMaxScrollOffset$5$firstIndex$lastIndex$leadingScrollOffset$trailingScrollOffset: function(constraints, firstIndex, lastIndex, leadingScrollOffset, trailingScrollOffset) {
      var t1 = H.interceptedTypeCheck(N.RenderObjectElement.prototype.get$widget.call(this), "$isSliverMultiBoxAdaptorWidget").delegate;
      H.interceptedTypeCheck(N.RenderObjectElement.prototype.get$widget.call(this), "$isSliverMultiBoxAdaptorWidget").delegate;
      t1 = G.SliverMultiBoxAdaptorElement__extrapolateMaxScrollOffset(firstIndex, lastIndex, leadingScrollOffset, trailingScrollOffset, t1.childCount);
      return t1;
    },
    didFinishLayout$0: function() {
      var t1 = this._sliver0$_childElements;
      t1.firstKey$0();
      t1.lastKey$0();
      H.interceptedTypeCheck(N.RenderObjectElement.prototype.get$widget.call(this), "$isSliverMultiBoxAdaptorWidget").delegate;
    },
    insertChildRenderObject$2: function(child, slot) {
      H.intTypeCheck(slot);
      H.interceptedTypeCheck(N.RenderObjectElement.prototype.get$renderObject.call(this), "$isRenderSliverMultiBoxAdaptor").super$ContainerRenderObjectMixin$insert(0, H.interceptedTypeCheck(child, "$isRenderBox"), this._currentBeforeChild);
    },
    moveChildRenderObject$2: function(child, slot) {
      H.intTypeCheck(slot);
    },
    removeChildRenderObject$1: function(child) {
      H.interceptedTypeCheck(N.RenderObjectElement.prototype.get$renderObject.call(this), "$isRenderSliverMultiBoxAdaptor").remove$1(0, H.interceptedTypeCheck(child, "$isRenderBox"));
    },
    visitChildren$1: function(visitor) {
      var t1, t2;
      H.functionTypeCheck(visitor, {func: 1, ret: -1, args: [N.Element]});
      t1 = this._sliver0$_childElements;
      t2 = H.getTypeArgumentByIndex(t1, 1);
      C.JSArray_methods.forEach$1(P.List_List$from(new P._SplayTreeValueIterable(t1, [H.getTypeArgumentByIndex(t1, 0), t2]), true, t2), visitor);
    },
    $isRenderSliverBoxChildManager: 1
  };
  G.SliverMultiBoxAdaptorElement_performRebuild_processElement.prototype = {
    call$1: function(index) {
      var newChild, parentData, t1, t2;
      H.intTypeCheck(index);
      t1 = this.$this;
      t1._currentlyUpdatingChildIndex = H.intTypeCheck(index);
      t2 = t1._sliver0$_childElements;
      newChild = t1.updateChild$3(t2.$index(0, index), t1._build$1(index), index);
      if (newChild != null) {
        t2.$indexSet(0, index, newChild);
        parentData = H.interceptedTypeCheck(newChild.get$renderObject().parentData, "$isSliverMultiBoxAdaptorParentData");
        if (!parentData._keptAlive)
          t1._currentBeforeChild = H.interceptedTypeCheck(newChild.get$renderObject(), "$isRenderBox");
      } else
        t2.remove$1(0, index);
    },
    $signature: 33
  };
  G.SliverMultiBoxAdaptorElement__build_closure.prototype = {
    call$0: function() {
      var t1 = this.$this;
      return H.interceptedTypeCheck(N.RenderObjectElement.prototype.get$widget.call(t1), "$isSliverMultiBoxAdaptorWidget").delegate.build$2(t1, this.index);
    },
    $signature: 182
  };
  G.SliverMultiBoxAdaptorElement_createChild_closure.prototype = {
    call$0: function() {
      var newChild, t2, _this = this,
        t1 = _this.$this;
      t1._currentBeforeChild = H.interceptedTypeCheck(_this.after == null ? null : t1._sliver0$_childElements.$index(0, _this.index - 1).get$renderObject(), "$isRenderBox");
      newChild = null;
      try {
        t2 = t1._currentlyUpdatingChildIndex = _this.index;
        newChild = t1.updateChild$3(t1._sliver0$_childElements.$index(0, t2), t1._build$1(t2), t2);
      } finally {
        t1._currentlyUpdatingChildIndex = null;
      }
      t2 = _this.index;
      t1 = t1._sliver0$_childElements;
      if (newChild != null)
        t1.$indexSet(0, t2, newChild);
      else
        t1.remove$1(0, t2);
    },
    $signature: 0
  };
  G.SliverMultiBoxAdaptorElement_removeChild_closure.prototype = {
    call$0: function() {
      var result, t1, t2, _this = this;
      try {
        t1 = _this.$this;
        t2 = t1._currentlyUpdatingChildIndex = _this.index;
        result = t1.updateChild$3(t1._sliver0$_childElements.$index(0, t2), null, t2);
      } finally {
        _this.$this._currentlyUpdatingChildIndex = null;
      }
      _this.$this._sliver0$_childElements.remove$1(0, _this.index);
    },
    $signature: 0
  };
  G.KeepAlive.prototype = {
    applyParentData$1: function(renderObject) {
      var targetParent,
        parentData = H.interceptedTypeCheck(renderObject.parentData, "$isKeepAliveParentDataMixin"),
        t1 = this.keepAlive;
      if (parentData.KeepAliveParentDataMixin_keepAlive !== t1) {
        parentData.KeepAliveParentDataMixin_keepAlive = t1;
        targetParent = renderObject._node$_parent;
        if (targetParent instanceof K.RenderObject && !t1)
          targetParent.markNeedsLayout$0();
      }
    },
    $asParentDataWidget: function() {
      return [G.SliverWithKeepAliveWidget];
    }
  };
  R.Spacer.prototype = {
    build$1: function(context) {
      return new T.Expanded(1, C.FlexFit_0, C.SizedBox_0_0_null_null, null);
    }
  };
  L.DefaultTextStyle.prototype = {
    updateShouldNotify$1: function(oldWidget) {
      var t1;
      H.interceptedTypeCheck(oldWidget, "$isDefaultTextStyle");
      if (J.$eq$(this.style, oldWidget.style))
        if (this.overflow === oldWidget.overflow) {
          oldWidget.maxLines;
          t1 = false;
        } else
          t1 = true;
      else
        t1 = true;
      return t1;
    }
  };
  L.Text.prototype = {
    build$1: function(context) {
      var t2, result, _null = null,
        t1 = context.inheritFromWidgetOfExactType$1(C.Type_DefaultTextStyle_ird),
        defaultTextStyle = H.interceptedTypeCheck(t1 == null ? C.DefaultTextStyle_mnK : t1, "$isDefaultTextStyle"),
        effectiveTextStyle = this.style;
      if (effectiveTextStyle == null || effectiveTextStyle.inherit)
        effectiveTextStyle = defaultTextStyle.style.merge$1(effectiveTextStyle);
      t1 = F.MediaQuery_of(context, true);
      t1 = t1 == null ? _null : t1.boldText;
      if (t1 === true)
        effectiveTextStyle = effectiveTextStyle.merge$1(C.TextStyle_CKH);
      t1 = this.textAlign;
      if (t1 == null)
        t1 = defaultTextStyle.textAlign;
      if (t1 == null)
        t1 = C.TextAlign_4;
      t2 = F.MediaQuery_of(context, true);
      t2 = t2 == null ? _null : t2.textScaleFactor;
      if (t2 == null)
        t2 = 1;
      result = T.RichText$(_null, defaultTextStyle.maxLines, defaultTextStyle.overflow, true, new Q.TextSpan(effectiveTextStyle, this.data, _null), t1, _null, t2);
      return result;
    }
  };
  U.TickerMode.prototype = {
    updateShouldNotify$1: function(oldWidget) {
      H.interceptedTypeCheck(oldWidget, "$isTickerMode").enabled;
      return false;
    }
  };
  U.SingleTickerProviderStateMixin.prototype = {
    createTicker$1: function(onTick) {
      var t1;
      H.functionTypeCheck(onTick, {func: 1, ret: -1, args: [P.Duration]});
      t1 = this._widget.toStringShort$0();
      return this.SingleTickerProviderStateMixin__ticker = new M.Ticker(onTick, t1);
    }
  };
  U.TickerProviderStateMixin.prototype = {
    createTicker$1: function(onTick) {
      var result, _this = this;
      H.functionTypeCheck(onTick, {func: 1, ret: -1, args: [P.Duration]});
      if (_this.TickerProviderStateMixin__tickers == null)
        _this.set$_tickers(P.LinkedHashSet_LinkedHashSet(U._WidgetTicker));
      result = new U._WidgetTicker(_this, onTick, null);
      _this.TickerProviderStateMixin__tickers.add$1(0, result);
      return result;
    },
    set$_tickers: function(_tickers) {
      this.TickerProviderStateMixin__tickers = H.assertSubtype(_tickers, "$isSet", [M.Ticker], "$asSet");
    }
  };
  U._WidgetTicker.prototype = {
    dispose$0: function() {
      this._creator.TickerProviderStateMixin__tickers.remove$1(0, this);
      this.super$Ticker$dispose();
    }
  };
  U.Title.prototype = {
    build$1: function(context) {
      X.SystemChrome_setApplicationSwitcherDescription(new X.ApplicationSwitcherDescription(this.title, this.color._value));
      return this.child;
    }
  };
  K.AnimatedWidget.prototype = {
    createState$0: function() {
      return new K._AnimatedState(C._StateLifecycle_0);
    }
  };
  K._AnimatedState.prototype = {
    initState$0: function() {
      this.super$State$initState();
      this._widget.listenable.addListener$1(0, this.get$_transitions$_handleChange());
    },
    didUpdateWidget$1: function(oldWidget) {
      var t1, t2, _this = this;
      H.interceptedTypeCheck(oldWidget, "$isAnimatedWidget");
      _this.super$State$didUpdateWidget(oldWidget);
      t1 = _this._widget.listenable;
      t2 = oldWidget.listenable;
      if (t1 != t2) {
        t1 = _this.get$_transitions$_handleChange();
        t2.removeListener$1(0, t1);
        _this._widget.listenable.addListener$1(0, t1);
      }
    },
    dispose$0: function() {
      this._widget.listenable.removeListener$1(0, this.get$_transitions$_handleChange());
      this.super$State$dispose();
    },
    _transitions$_handleChange$0: function() {
      this.setState$1(new K._AnimatedState__handleChange_closure());
    },
    build$1: function(context) {
      return this._widget.build$1(context);
    },
    $asState: function() {
      return [K.AnimatedWidget];
    }
  };
  K._AnimatedState__handleChange_closure.prototype = {
    call$0: function() {
    },
    $signature: 0
  };
  K.SlideTransition.prototype = {
    build$1: function(context) {
      var _this = this,
        t1 = H.assertSubtype(_this.listenable, "$isAnimation", [Q.Offset], "$asAnimation"),
        offset = t1.get$value(t1);
      if (_this.textDirection === C.TextDirection_0) {
        t1 = offset._dx;
        if (typeof t1 !== "number")
          return t1.$negate();
        offset = new Q.Offset(-t1, offset._dy);
      }
      return new T.FractionalTranslation(offset, _this.transformHitTests, _this.child, null);
    },
    get$child: function() {
      return this.child;
    }
  };
  K.ScaleTransition.prototype = {
    build$1: function(context) {
      var t1 = H.assertSubtype(this.listenable, "$isAnimation", [P.double], "$asAnimation"),
        scaleValue = t1.get$value(t1),
        transform = new E.Matrix4(new Float64Array(16));
      transform.setIdentity$0();
      transform.scale$3(0, scaleValue, scaleValue, 1);
      return T.Transform$(C.Alignment_0_0, this.child, transform, true);
    },
    get$child: function() {
      return this.child;
    }
  };
  K.RotationTransition.prototype = {
    build$1: function(context) {
      var t2, c, s,
        t1 = H.assertSubtype(this.listenable, "$isAnimation", [P.double], "$asAnimation"),
        turnsValue = t1.get$value(t1);
      if (typeof turnsValue !== "number")
        return turnsValue.$mul();
      t1 = turnsValue * 3.141592653589793 * 2;
      t2 = new Float64Array(16);
      t2[15] = 1;
      c = Math.cos(t1);
      s = Math.sin(t1);
      t2[0] = c;
      t2[1] = s;
      t2[2] = 0;
      t2[4] = -s;
      t2[5] = c;
      t2[6] = 0;
      t2[8] = 0;
      t2[9] = 0;
      t2[10] = 1;
      t2[3] = 0;
      t2[7] = 0;
      t2[11] = 0;
      return T.Transform$(C.Alignment_0_0, this.child, new E.Matrix4(t2), true);
    },
    get$child: function() {
      return this.child;
    }
  };
  K.FadeTransition.prototype = {
    createRenderObject$1: function(context) {
      var t2,
        t1 = new E.RenderAnimatedOpacity(false, null);
      t1.get$isRepaintBoundary();
      t2 = t1.get$alwaysNeedsCompositing();
      t1._needsCompositing = t2;
      t1.set$child(null);
      t1.set$opacity(0, this.opacity);
      return t1;
    },
    updateRenderObject$2: function(context, renderObject) {
      H.interceptedTypeCheck(renderObject, "$isRenderAnimatedOpacity");
      renderObject.set$opacity(0, this.opacity);
      renderObject.set$alwaysIncludeSemantics(false);
    }
  };
  K.DecoratedBoxTransition.prototype = {
    build$1: function(context) {
      var t1 = this.decoration,
        t2 = H.assertSubtype(t1.parent, "$isAnimation", [P.double], "$asAnimation");
      return new M.DecoratedBox(t1._evaluatable.transform$1(0, t2.get$value(t2)), C.DecorationPosition_0, this.child, null);
    },
    get$child: function() {
      return this.child;
    }
  };
  K.AnimatedBuilder.prototype = {
    build$1: function(context) {
      return this.builder.call$2(context, this.child);
    },
    builder$1: function(arg0) {
      return this.builder.call$1(arg0);
    },
    get$child: function() {
      return this.child;
    }
  };
  Q.Viewport.prototype = {
    createRenderObject$1: function(context) {
      var t1 = this.axisDirection,
        t2 = Q.Viewport_getDefaultCrossAxisDirection(context, t1),
        t3 = this.cacheExtent;
      if (t3 == null)
        t3 = 250;
      t3 = new Q.RenderViewport(0, t1, t2, this.offset, t3, 0, null, null);
      t3.get$isRepaintBoundary();
      t3._needsCompositing = true;
      t3.addAll$1(0, null);
      t1 = t3.ContainerRenderObjectMixin__firstChild;
      if (t1 != null)
        t3._viewport$_center = H.interceptedTypeCheck(t1, "$isRenderSliver");
      return t3;
    },
    updateRenderObject$2: function(context, renderObject) {
      var t1;
      H.interceptedTypeCheck(renderObject, "$isRenderViewport");
      t1 = this.axisDirection;
      renderObject.set$axisDirection(t1);
      t1 = Q.Viewport_getDefaultCrossAxisDirection(context, t1);
      renderObject.set$crossAxisDirection(t1);
      renderObject.set$anchor(0);
      renderObject.set$offset(0, this.offset);
      renderObject.set$cacheExtent(this.cacheExtent);
    },
    createElement$0: function(_) {
      var t1 = P.HashSet_HashSet(N.Element),
        t2 = ($.Element__nextHashCode + 1) % 16777215;
      $.Element__nextHashCode = t2;
      return new Q._ViewportElement(t1, t2, this, C._ElementLifecycle_0);
    }
  };
  Q._ViewportElement.prototype = {
    get$widget: function() {
      return H.interceptedTypeCheck(N.MultiChildRenderObjectElement.prototype.get$widget.call(this), "$isViewport");
    },
    get$renderObject: function() {
      return H.interceptedTypeCheck(N.RenderObjectElement.prototype.get$renderObject.call(this), "$isRenderViewport");
    },
    mount$2: function($parent, newSlot) {
      this.super$MultiChildRenderObjectElement$mount($parent, newSlot);
      this._updateCenter$0();
    },
    update$1: function(_, newWidget) {
      this.super$MultiChildRenderObjectElement$update(0, H.interceptedTypeCheck(newWidget, "$isMultiChildRenderObjectWidget"));
      this._updateCenter$0();
    },
    _updateCenter$0: function() {
      var t1, t2, _this = this;
      H.interceptedTypeCheck(N.MultiChildRenderObjectElement.prototype.get$widget.call(_this), "$isViewport").toString;
      t1 = _this.get$children(_this);
      if (!t1.get$isEmpty(t1)) {
        t1 = H.interceptedTypeCheck(N.RenderObjectElement.prototype.get$renderObject.call(_this), "$isRenderViewport");
        t2 = _this.get$children(_this);
        t1.set$center(H.interceptedTypeCheck(t2.get$first(t2).get$renderObject(), "$isRenderSliver"));
      } else
        H.interceptedTypeCheck(N.RenderObjectElement.prototype.get$renderObject.call(_this), "$isRenderViewport").set$center(null);
    }
  };
  K.WebOnlyNavigatorObserver.prototype = {
    didPush$2: function(route, previousRoute) {
      this._webOnlyNotifyRouteName$1(route);
    },
    didPop$2: function(route, previousRoute) {
      this._webOnlyNotifyRouteName$1(previousRoute);
    },
    _webOnlyNotifyRouteName$1: function(route) {
      var t1, t2,
        routeName = route.settings.name;
      if (routeName != null) {
        t1 = $.$get$window()._browserHistory;
        t2 = t1._locationStrategy;
        if (t2 != null)
          t1._setupFlutterEntry$3$path$replace(t2, routeName, true);
      }
    }
  };
  T.webOnlyInitializeEngine_closure.prototype = {
    call$2: function(_, __) {
      var t1, _i;
      H.stringTypeCheck(_);
      t1 = P.String;
      H.assertSubtype(__, "$isMap", [t1, t1], "$asMap");
      for (t1 = $._hotRestartListeners.length, _i = 0; _i < $._hotRestartListeners.length; $._hotRestartListeners.length === t1 || (0, H.throwConcurrentModificationError)($._hotRestartListeners), ++_i)
        $._hotRestartListeners[_i].call$0();
      t1 = new P._Future($.Zone__current, [P.ServiceExtensionResponse]);
      t1._asyncComplete$1(new P.ServiceExtensionResponse("OK", null, null));
      return t1;
    },
    "call*": "call$2",
    $requiredArgCount: 2,
    $signature: 52
  };
  T.webOnlyInitializeEngine_closure0.prototype = {
    call$0: function() {
      var t1 = this._box_0;
      if (!t1.waitingForAnimation) {
        t1.waitingForAnimation = true;
        C.Window_methods.requestAnimationFrame$1(window, new T.webOnlyInitializeEngine__closure(t1));
      }
    },
    $signature: 0
  };
  T.webOnlyInitializeEngine__closure.prototype = {
    call$1: function(highResTime) {
      var highResTimeMicroseconds, t1;
      H.numTypeCheck(highResTime);
      this._box_0.waitingForAnimation = false;
      if (typeof highResTime !== "number")
        return H.iae(highResTime);
      highResTimeMicroseconds = C.JSNumber_methods.toInt$0(1000 * highResTime);
      t1 = $.$get$window();
      if (t1._onBeginFrame != null)
        t1.onBeginFrame$1(P.Duration$(highResTimeMicroseconds, 0, 0));
      if (t1._onDrawFrame != null)
        t1.onDrawFrame$0();
    },
    $signature: 40
  };
  T.AlarmClock.prototype = {
    set$datetime: function(value) {
      var now, t1, t2, _this = this;
      if (J.$eq$(value, _this._datetime))
        return;
      if (value == null) {
        _this._cancelTimer$0();
        return _this._datetime = null;
      }
      now = _this._timestampFunction.call$0();
      t1 = value._core$_value;
      t2 = now._core$_value;
      if (t1 < t2) {
        _this._cancelTimer$0();
        _this._datetime = value;
        return;
      }
      if (_this._timer == null)
        _this._timer = P.Timer_Timer(P.Duration$(0, t1 - t2, 0), _this.get$_timerDidFire());
      else if (_this._datetime._core$_value > t1) {
        _this._cancelTimer$0();
        _this._timer = P.Timer_Timer(P.Duration$(0, t1 - t2, 0), _this.get$_timerDidFire());
      }
      _this._datetime = value;
    },
    _cancelTimer$0: function() {
      var t1 = this._timer;
      if (t1 != null) {
        t1.cancel$0(0);
        this._timer = null;
      }
    },
    _timerDidFire$0: function() {
      var _this = this,
        now = _this._timestampFunction.call$0(),
        t1 = _this._datetime,
        t2 = now._core$_value;
      t1 = t1._core$_value;
      if (t2 >= t1) {
        _this._timer = null;
        _this.callback.call$0();
      } else
        _this._timer = P.Timer_Timer(P.Duration$(0, t1 - t2, 0), _this.get$_timerDidFire());
    },
    set$callback: function(callback) {
      this.callback = H.functionTypeCheck(callback, {func: 1, ret: -1});
    }
  };
  T.AssetManager.prototype = {
    getAssetUrl$1: function(asset) {
      return P.Uri_parse(asset).get$hasScheme() ? asset : "assets/" + H.S(asset);
    },
    load$1: function(_, asset) {
      return this.load$body$AssetManager(_, asset);
    },
    load$body$AssetManager: function(_, asset) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(P.ByteData),
        $async$returnValue, $async$handler = 2, $async$currentError, $async$next = [], $async$self = this, request, e, target, t1, exception, url, $async$exception;
      var $async$load$1 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              url = $async$self.getAssetUrl$1(asset);
              $async$handler = 4;
              $async$goto = 7;
              return P._asyncAwait(W.HttpRequest_request(url, "arraybuffer"), $async$load$1);
            case 7:
              // returning from await.
              request = $async$result;
              t1 = H.interceptedTypeCast(W._convertNativeToDart_XHR_Response(request.response), "$isByteBuffer");
              t1.toString;
              t1 = H.NativeByteData_NativeByteData$view(t1, 0, null);
              $async$returnValue = t1;
              // goto return
              $async$goto = 1;
              break;
              $async$handler = 2;
              // goto after finally
              $async$goto = 6;
              break;
            case 4:
              // catch
              $async$handler = 3;
              $async$exception = $async$currentError;
              t1 = H.unwrapException($async$exception);
              if (!!J.getInterceptor$(t1).$isProgressEvent) {
                e = t1;
                target = W._convertNativeToDart_EventTarget(e.target);
                if (!!J.getInterceptor$(target).$isHttpRequest) {
                  if (target.status === 404 && asset === "AssetManifest.json") {
                    t1 = "Asset manifest does not exist at `" + H.S(url) + "` \u2013 ignoring.";
                    if (typeof console != "undefined")
                      window.console.warn(t1);
                    t1 = new Uint8Array(H._ensureNativeList(C.C_Utf8Codec.get$encoder().convert$1("{}"))).buffer;
                    t1.toString;
                    $async$returnValue = H.NativeByteData_NativeByteData$view(t1, 0, null);
                    // goto return
                    $async$goto = 1;
                    break;
                  }
                  throw H.wrapException(new T.AssetManagerException(url, target.status));
                }
                throw $async$exception;
              } else
                throw $async$exception;
              // goto after finally
              $async$goto = 6;
              break;
            case 3:
              // uncaught
              // goto rethrow
              $async$goto = 2;
              break;
            case 6:
              // after finally
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
            case 2:
              // rethrow
              return P._asyncRethrow($async$currentError, $async$completer);
          }
      });
      return P._asyncStartSync($async$load$1, $async$completer);
    }
  };
  T.AssetManagerException.prototype = {
    toString$0: function(_) {
      return 'Failed to load asset at "' + H.S(this.url) + '" (' + H.S(this.httpStatus) + ")";
    },
    $isException: 1
  };
  T.BitmapCanvas.prototype = {
    BitmapCanvas$1: function(bounds) {
      var t3, t4, t5, t6, _this = this,
        _s8_ = "absolute",
        t1 = _this.rootElement,
        t2 = t1.style;
      t2.position = _s8_;
      t2 = _this.bounds;
      t3 = t2.right;
      t4 = t2.left;
      if (typeof t3 !== "number")
        return t3.$sub();
      if (typeof t4 !== "number")
        return H.iae(t4);
      t5 = t2.bottom;
      t2 = t2.top;
      if (typeof t5 !== "number")
        return t5.$sub();
      if (typeof t2 !== "number")
        return H.iae(t2);
      t6 = window.devicePixelRatio;
      if (typeof t6 !== "number")
        return H.iae(t6);
      _this._widthInBitmapPixels = C.JSNumber_methods.ceil$0((t3 - t4 + 1 + 2) * t6);
      t6 = window.devicePixelRatio;
      if (typeof t6 !== "number")
        return H.iae(t6);
      t6 = _this._heightInBitmapPixels = C.JSNumber_methods.ceil$0((t5 - t2 + 1 + 2) * t6);
      t2 = _this._widthInBitmapPixels;
      t5 = window.devicePixelRatio;
      if (typeof t2 !== "number")
        return t2.$div();
      if (typeof t5 !== "number")
        return H.iae(t5);
      t4 = window.devicePixelRatio;
      if (typeof t4 !== "number")
        return H.iae(t4);
      t3 = W.CanvasElement_CanvasElement(t6, t2);
      _this._canvas = t3;
      t3 = t3.style;
      t3.position = _s8_;
      t2 = H.S(t2 / t5) + "px";
      t3.width = t2;
      t2 = H.S(t6 / t4) + "px";
      t3.height = t2;
      _this._ctx = _this._canvas.getContext("2d");
      t1.appendChild(_this._canvas);
      _this._initializeViewport$0();
    },
    dispose$0: function() {
      this.super$EngineCanvas$dispose();
      var t1 = $._browserEngine;
      if ((t1 == null ? $._browserEngine = T._detectBrowserEngine() : t1) === C.BrowserEngine_1) {
        t1 = this._canvas;
        t1.width = t1.height = 0;
      }
    },
    clear$0: function(_) {
      var t1, len, i, t2, t3, _this = this;
      _this.super$SaveStackTracking$clear(0);
      for (t1 = _this._engine$_children, len = t1.length, i = 0; i < len; ++i) {
        if (i >= t1.length)
          return H.ioore(t1, i);
        t2 = t1[i];
        t3 = t2.parentNode;
        if (t3 != null)
          t3.removeChild(t2);
      }
      C.JSArray_methods.set$length(t1, 0);
      _this._cachedLastStyle = null;
      t1 = _this._ctx;
      if (t1 != null) {
        t1.restore();
        _this._ctx.clearRect(0, 0, _this._widthInBitmapPixels, _this._heightInBitmapPixels);
        _this._ctx.font = "";
        _this._initializeViewport$0();
      }
      t1 = _this._canvas;
      if (t1 != null) {
        t1 = t1.style;
        C.CssStyleDeclaration_methods._setPropertyHelper$3(t1, (t1 && C.CssStyleDeclaration_methods)._browserPropertyName$1(t1, "transform-origin"), "", "");
        t1 = _this._canvas.style;
        C.CssStyleDeclaration_methods._setPropertyHelper$3(t1, (t1 && C.CssStyleDeclaration_methods)._browserPropertyName$1(t1, "transform"), "", "");
      }
    },
    _initializeViewport$0: function() {
      var canvasPositionX, canvasPositionY, t1, t2, t3, t4, _this = this;
      _this._ctx.save();
      _this._ctx.setTransform(1, 0, 0, 1, 0, 0);
      _this._ctx.scale(window.devicePixelRatio, window.devicePixelRatio);
      canvasPositionX = J.floor$0$n(_this.bounds.left) - 1;
      canvasPositionY = J.floor$0$n(_this.bounds.top) - 1;
      t1 = _this.bounds;
      t2 = t1.left;
      if (typeof t2 !== "number")
        return t2.$sub();
      t1 = t1.top;
      if (typeof t1 !== "number")
        return t1.$sub();
      t3 = _this.rootElement.style;
      t4 = "translate(" + canvasPositionX + "px, " + canvasPositionY + "px)";
      C.CssStyleDeclaration_methods._setPropertyHelper$3(t3, (t3 && C.CssStyleDeclaration_methods)._browserPropertyName$1(t3, "transform"), t4, "");
      t4 = _this.bounds;
      t3 = t4.left;
      if (typeof t3 !== "number")
        return t3.$negate();
      t2 = -t3 + (t2 - 1 - canvasPositionX) + 1;
      t4 = t4.top;
      if (typeof t4 !== "number")
        return t4.$negate();
      t1 = -t4 + (t1 - 1 - canvasPositionY) + 1;
      _this.super$SaveStackTracking$translate(0, t2, t1);
      _this._ctx.translate(t2, t1);
    },
    _applyPaint$1: function(paint) {
      var cap, paintStyle, colorString, _this = this,
        t1 = _this._ctx,
        t2 = T._stringForBlendMode(paint.blendMode);
      t1.globalCompositeOperation = t2 == null ? "source-over" : t2;
      t1 = _this._ctx;
      t2 = paint.strokeWidth;
      t1.lineWidth = t2 == null ? 1 : t2;
      cap = paint.strokeCap;
      if (cap != null)
        t1.lineCap = T._stringForStrokeCap(cap);
      else
        t1.lineCap = "butt";
      t1.lineJoin = "miter";
      t2 = paint.shader;
      if (t2 != null) {
        paintStyle = t2.createPaintStyle$1(t1);
        _this._setFillAndStrokeStyle$2(paintStyle, paintStyle);
      } else {
        t1 = paint.color;
        if (t1 != null) {
          colorString = t1.toCssString$0();
          _this._setFillAndStrokeStyle$2(colorString, colorString);
        }
      }
      t1 = paint.maskFilter;
      if (t1 != null)
        _this._setFilter$1("blur(" + H.S(t1._sigma) + "px)");
    },
    _strokeOrFill$2$resetPaint: function(paint, resetPaint) {
      var _this = this;
      switch (paint.style) {
        case C.PaintingStyle_1:
          _this._ctx.stroke();
          break;
        case C.PaintingStyle_0:
        default:
          _this._ctx.fill();
          break;
      }
      if (resetPaint) {
        _this._setFilter$1("none");
        _this._setFillAndStrokeStyle$2(null, null);
      }
    },
    _strokeOrFill$1: function(paint) {
      return this._strokeOrFill$2$resetPaint(paint, true);
    },
    _setFilter$1: function(value) {
      if (this._prevFilter !== value)
        this._prevFilter = this._ctx.filter = value;
    },
    _setFillAndStrokeStyle$2: function(fillStyle, strokeStyle) {
      var _this = this,
        _ctx = _this._ctx,
        t1 = _this._prevFillStyle;
      if (t1 == null ? fillStyle != null : t1 !== fillStyle)
        _this._prevFillStyle = _ctx.fillStyle = fillStyle;
      t1 = _this._prevStrokeStyle;
      if (t1 == null ? strokeStyle != null : t1 !== strokeStyle)
        _this._prevStrokeStyle = _ctx.strokeStyle = strokeStyle;
    },
    save$0: function(_) {
      this.super$SaveStackTracking$save(0);
      this._ctx.save();
      return this._saveCount++;
    },
    restore$0: function(_) {
      var _this = this;
      _this.super$SaveStackTracking$restore(0);
      _this._ctx.restore();
      --_this._saveCount;
      _this._cachedLastStyle = null;
    },
    translate$2: function(_, dx, dy) {
      this.super$SaveStackTracking$translate(0, dx, dy);
      this._ctx.translate(dx, dy);
    },
    scale$2: function(_, sx, sy) {
      this.super$SaveStackTracking$scale(0, sx, sy);
      this._ctx.scale(sx, sy);
    },
    rotate$1: function(_, radians) {
      this.super$SaveStackTracking$rotate(0, radians);
      this._ctx.rotate(radians);
    },
    transform$1: function(_, matrix4) {
      this.super$SaveStackTracking$transform(0, matrix4);
      this._ctx.transform(matrix4[0], matrix4[1], matrix4[4], matrix4[5], matrix4[12], matrix4[13]);
    },
    clipRect$1: function(rect) {
      var t1, t2, t3, t4, t5, _this = this;
      _this.super$SaveStackTracking$clipRect(rect);
      _this._ctx.beginPath();
      t1 = _this._ctx;
      t2 = rect.left;
      t3 = rect.top;
      t4 = rect.right;
      if (typeof t4 !== "number")
        return t4.$sub();
      if (typeof t2 !== "number")
        return H.iae(t2);
      t5 = rect.bottom;
      if (typeof t5 !== "number")
        return t5.$sub();
      if (typeof t3 !== "number")
        return H.iae(t3);
      t1.rect(t2, t3, t4 - t2, t5 - t3);
      _this._ctx.clip();
    },
    clipRRect$1: function(rrect) {
      var path;
      this.super$SaveStackTracking$clipRRect(rrect);
      path = new Q.Path(H.setRuntimeTypeInfo([], [T.Subpath]), C.PathFillType_0);
      path.addRRect$1(rrect);
      this._runPath$1(path);
      this._ctx.clip();
    },
    clipPath$1: function(_, path) {
      this.super$SaveStackTracking$clipPath(0, path);
      this._runPath$1(path);
      this._ctx.clip();
    },
    drawRect$2: function(rect, paint) {
      var t1, t2, t3, t4, t5, _this = this;
      _this._applyPaint$1(paint);
      _this._ctx.beginPath();
      t1 = _this._ctx;
      t2 = rect.left;
      t3 = rect.top;
      t4 = rect.right;
      if (typeof t4 !== "number")
        return t4.$sub();
      if (typeof t2 !== "number")
        return H.iae(t2);
      t5 = rect.bottom;
      if (typeof t5 !== "number")
        return t5.$sub();
      if (typeof t3 !== "number")
        return H.iae(t3);
      t1.rect(t2, t3, t4 - t2, t5 - t3);
      _this._strokeOrFill$1(paint);
    },
    drawRRect$2: function(rrect, paint) {
      this._applyPaint$1(paint);
      this._drawRRectPath$1(rrect);
      this._strokeOrFill$1(paint);
    },
    _drawRRectPath$2$startNewPath: function(rrect, startNewPath) {
      var t0, t1, trRadiusX, tlRadiusX, trRadiusY, tlRadiusY, blRadiusX, brRadiusX, blRadiusY, brRadiusY, _this = this,
        left = rrect.left,
        right = rrect.right,
        $top = rrect.top,
        bottom = rrect.bottom;
      if (typeof left !== "number")
        return left.$gt();
      if (typeof right !== "number")
        return H.iae(right);
      if (left > right) {
        t0 = right;
        right = left;
        left = t0;
      }
      if (typeof $top !== "number")
        return $top.$gt();
      if (typeof bottom !== "number")
        return H.iae(bottom);
      if ($top > bottom) {
        t0 = bottom;
        bottom = $top;
        $top = t0;
      }
      t1 = rrect.trRadiusX;
      if (typeof t1 !== "number")
        return t1.abs$0();
      trRadiusX = Math.abs(t1);
      t1 = rrect.tlRadiusX;
      if (typeof t1 !== "number")
        return t1.abs$0();
      tlRadiusX = Math.abs(t1);
      t1 = rrect.trRadiusY;
      if (typeof t1 !== "number")
        return t1.abs$0();
      trRadiusY = Math.abs(t1);
      t1 = rrect.tlRadiusY;
      if (typeof t1 !== "number")
        return t1.abs$0();
      tlRadiusY = Math.abs(t1);
      t1 = rrect.blRadiusX;
      if (typeof t1 !== "number")
        return t1.abs$0();
      blRadiusX = Math.abs(t1);
      t1 = rrect.brRadiusX;
      if (typeof t1 !== "number")
        return t1.abs$0();
      brRadiusX = Math.abs(t1);
      t1 = rrect.blRadiusY;
      if (typeof t1 !== "number")
        return t1.abs$0();
      blRadiusY = Math.abs(t1);
      t1 = rrect.brRadiusY;
      if (typeof t1 !== "number")
        return t1.abs$0();
      brRadiusY = Math.abs(t1);
      _this._ctx.moveTo(left + trRadiusX, $top);
      if (startNewPath)
        _this._ctx.beginPath();
      t1 = right - trRadiusX;
      _this._ctx.lineTo(t1, $top);
      _this._ctx.ellipse(t1, $top + trRadiusY, trRadiusX, trRadiusY, 0, 4.71238898038469, 6.283185307179586, false);
      t1 = bottom - brRadiusY;
      _this._ctx.lineTo(right, t1);
      _this._ctx.ellipse(right - brRadiusX, t1, brRadiusX, brRadiusY, 0, 0, 1.5707963267948966, false);
      t1 = left + blRadiusX;
      _this._ctx.lineTo(t1, bottom);
      _this._ctx.ellipse(t1, bottom - blRadiusY, blRadiusX, blRadiusY, 0, 1.5707963267948966, 3.141592653589793, false);
      t1 = $top + tlRadiusY;
      _this._ctx.lineTo(left, t1);
      _this._ctx.ellipse(left + tlRadiusX, t1, tlRadiusX, tlRadiusY, 0, 3.141592653589793, 4.71238898038469, false);
    },
    _drawRRectPath$1: function(rrect) {
      return this._drawRRectPath$2$startNewPath(rrect, true);
    },
    drawDRRect$3: function(outer, inner, paint) {
      var left, right, $top, bottom, t1, trRadiusX, tlRadiusX, trRadiusY, tlRadiusY, blRadiusX, brRadiusX, blRadiusY, brRadiusY, t0, t2, _this = this;
      _this._applyPaint$1(paint);
      _this._drawRRectPath$1(outer);
      left = inner.left;
      right = inner.right;
      $top = inner.top;
      bottom = inner.bottom;
      t1 = inner.trRadiusX;
      if (typeof t1 !== "number")
        return t1.abs$0();
      trRadiusX = Math.abs(t1);
      t1 = inner.tlRadiusX;
      if (typeof t1 !== "number")
        return t1.abs$0();
      tlRadiusX = Math.abs(t1);
      t1 = inner.trRadiusY;
      if (typeof t1 !== "number")
        return t1.abs$0();
      trRadiusY = Math.abs(t1);
      t1 = inner.tlRadiusY;
      if (typeof t1 !== "number")
        return t1.abs$0();
      tlRadiusY = Math.abs(t1);
      t1 = inner.blRadiusX;
      if (typeof t1 !== "number")
        return t1.abs$0();
      blRadiusX = Math.abs(t1);
      t1 = inner.brRadiusX;
      if (typeof t1 !== "number")
        return t1.abs$0();
      brRadiusX = Math.abs(t1);
      t1 = inner.blRadiusY;
      if (typeof t1 !== "number")
        return t1.abs$0();
      blRadiusY = Math.abs(t1);
      t1 = inner.brRadiusY;
      if (typeof t1 !== "number")
        return t1.abs$0();
      brRadiusY = Math.abs(t1);
      if (typeof left !== "number")
        return left.$gt();
      if (typeof right !== "number")
        return H.iae(right);
      if (left > right) {
        t0 = right;
        right = left;
        left = t0;
      }
      if (typeof $top !== "number")
        return $top.$gt();
      if (typeof bottom !== "number")
        return H.iae(bottom);
      if ($top > bottom) {
        t0 = bottom;
        bottom = $top;
        $top = t0;
      }
      t1 = right - trRadiusX;
      _this._ctx.moveTo(t1, $top);
      t2 = left + tlRadiusX;
      _this._ctx.lineTo(t2, $top);
      _this._ctx.ellipse(t2, $top + tlRadiusY, tlRadiusX, tlRadiusY, 0, 4.71238898038469, 3.141592653589793, true);
      t2 = bottom - blRadiusY;
      _this._ctx.lineTo(left, t2);
      _this._ctx.ellipse(left + blRadiusX, t2, blRadiusX, blRadiusY, 0, 3.141592653589793, 1.5707963267948966, true);
      t2 = right - brRadiusX;
      _this._ctx.lineTo(t2, bottom);
      _this._ctx.ellipse(t2, bottom - brRadiusY, brRadiusX, brRadiusY, 0, 1.5707963267948966, 0, true);
      t2 = $top + trRadiusY;
      _this._ctx.lineTo(right, t2);
      _this._ctx.ellipse(t1, t2, trRadiusX, trRadiusY, 0, 0, 4.71238898038469, true);
      _this._strokeOrFill$1(paint);
    },
    drawCircle$3: function(c, radius, paint) {
      var _this = this;
      _this._applyPaint$1(paint);
      _this._ctx.beginPath();
      _this._ctx.ellipse(c._dx, c._dy, radius, radius, 0, 0, 6.283185307179586, false);
      _this._strokeOrFill$1(paint);
    },
    drawPath$2: function(path, paint) {
      this._applyPaint$1(paint);
      this._runPath$1(path);
      this._strokeOrFill$1(paint);
    },
    drawShadow$4: function(path, color, elevation, transparentOccluder) {
      var _i, shadow, t2, t3, t4, _this = this,
        shadows = T.ElevationShadow_computeCanvasShadows(elevation, color),
        t1 = shadows.length;
      if (t1 !== 0) {
        for (_i = 0; _i < shadows.length; shadows.length === t1 || (0, H.throwConcurrentModificationError)(shadows), ++_i) {
          shadow = shadows[_i];
          if (transparentOccluder) {
            t2 = $._browserEngine;
            t2 = (t2 == null ? $._browserEngine = T._detectBrowserEngine() : t2) !== C.BrowserEngine_1;
          } else
            t2 = false;
          t3 = shadow.color;
          if (t2) {
            t2 = new Q.PaintData();
            t2.color = t3;
            t2.style = C.PaintingStyle_0;
            t2.strokeWidth = 0;
            t2.maskFilter = new Q.MaskFilter(C.BlurStyle_0, shadow.blur);
            _this._ctx.save();
            _this._ctx.translate(shadow.offsetX, shadow.offsetY);
            _this._applyPaint$1(t2);
            _this._runPath$1(path);
            switch (t2.style) {
              case C.PaintingStyle_1:
                _this._ctx.stroke();
                break;
              case C.PaintingStyle_0:
              default:
                _this._ctx.fill();
                break;
            }
            _this._ctx.restore();
          } else {
            t2 = new Q.PaintData();
            t2.color = t3;
            t2.style = C.PaintingStyle_0;
            t2.strokeWidth = 0;
            _this._ctx.save();
            _this._applyPaint$1(t2);
            t4 = _this._ctx;
            t4.shadowBlur = shadow.blur;
            t3 = t3._value;
            t4.shadowColor = Q.Color$fromARGB(255, (16711680 & t3) >>> 16, (65280 & t3) >>> 8, (255 & t3) >>> 0).toCssString$0();
            t3 = _this._ctx;
            t3.shadowOffsetX = shadow.offsetX;
            t3.shadowOffsetY = shadow.offsetY;
            _this._runPath$1(path);
            switch (t2.style) {
              case C.PaintingStyle_1:
                _this._ctx.stroke();
                break;
              case C.PaintingStyle_0:
              default:
                _this._ctx.fill();
                break;
            }
            _this._ctx.restore();
          }
        }
        _this._setFilter$1("none");
        _this._setFillAndStrokeStyle$2(null, null);
      }
    },
    drawParagraph$2: function(paragraph, offset) {
      var t1, t2, t3, t4, t5, paragraphElement, paragraphStyle, clipElements, _i, clipElement, cssTransform, _this = this,
        style = paragraph._paragraphGeometricStyle;
      if (paragraph._webOnlyIsSingleLine && paragraph._plainText != null && style.ellipsis == null && style.decoration == null && style.letterSpacing == null && style.wordSpacing == null && paragraph._background == null) {
        if (!style.$eq(0, _this._cachedLastStyle)) {
          _this._ctx.font = style.get$cssFontString();
          _this._cachedLastStyle = style;
        }
        t1 = paragraph._paint;
        t1._frozen = true;
        _this._applyPaint$1(t1._paintData);
        t1 = _this._ctx;
        t2 = offset._dx;
        t3 = paragraph.webOnlyAlignOffset;
        if (typeof t2 !== "number")
          return t2.$add();
        t4 = offset._dy;
        t5 = paragraph._alphabeticBaseline;
        if (typeof t4 !== "number")
          return t4.$add();
        (t1 && C.CanvasRenderingContext2D_methods).fillText$3(t1, paragraph._plainText, t2 + t3, t4 + t5);
        _this._setFilter$1("none");
        _this._setFillAndStrokeStyle$2(null, null);
        return;
      }
      paragraphElement = H.interceptedTypeCheck(paragraph._paragraphElement.cloneNode(true), "$isElement0");
      paragraphStyle = paragraphElement.style;
      paragraphStyle.position = "absolute";
      paragraphStyle.whiteSpace = "pre-wrap";
      t1 = H.S(paragraph._width) + "px";
      paragraphStyle.width = t1;
      if (style.ellipsis != null) {
        t1 = style.maxLines;
        t1 = t1 == null || t1 === 1;
      } else
        t1 = false;
      if (t1) {
        t1 = H.S(paragraph.get$webOnlyMaxLinesHeight()) + "px";
        paragraphStyle.height = t1;
        paragraphStyle.whiteSpace = "pre";
        paragraphStyle.overflow = "hidden";
        C.CssStyleDeclaration_methods._setPropertyHelper$3(paragraphStyle, (paragraphStyle && C.CssStyleDeclaration_methods)._browserPropertyName$1(paragraphStyle, "text-overflow"), "ellipsis", "");
      } else if (paragraph._didExceedMaxLines) {
        t1 = H.S(paragraph.get$webOnlyMaxLinesHeight()) + "px";
        paragraphStyle.height = t1;
        C.CssStyleDeclaration_methods._setPropertyHelper$3(paragraphStyle, (paragraphStyle && C.CssStyleDeclaration_methods)._browserPropertyName$1(paragraphStyle, "overflow-y"), "hidden", "");
      } else {
        t1 = H.S(paragraph._height) + "px";
        paragraphStyle.height = t1;
      }
      t1 = _this.SaveStackTracking__clipStack;
      t2 = _this.SaveStackTracking__currentTransform;
      if (t1 != null) {
        clipElements = T._clipContent(t1, H.interceptedTypeCheck(paragraphElement, "$isHtmlElement"), offset, t2);
        for (t1 = clipElements.length, t2 = _this.rootElement, t3 = J.getInterceptor$x(t2), t4 = _this._engine$_children, _i = 0; _i < clipElements.length; clipElements.length === t1 || (0, H.throwConcurrentModificationError)(clipElements), ++_i) {
          clipElement = clipElements[_i];
          t3.append$1(t2, clipElement);
          C.JSArray_methods.add$1(t4, clipElement);
        }
      } else {
        cssTransform = T.float64ListToCssTransform(T.transformWithOffset(t2, offset)._engine$_m4storage);
        C.CssStyleDeclaration_methods._setPropertyHelper$3(paragraphStyle, (paragraphStyle && C.CssStyleDeclaration_methods)._browserPropertyName$1(paragraphStyle, "transform"), cssTransform, "");
        _this.rootElement.appendChild(paragraphElement);
      }
      C.JSArray_methods.add$1(_this._engine$_children, paragraphElement);
    },
    _runPath$1: function(path) {
      var t1, t2, _i, t3, t4, _i0, command, _this = this;
      _this._ctx.beginPath();
      for (t1 = path.subpaths, t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i)
        for (t3 = t1[_i].commands, t4 = t3.length, _i0 = 0; _i0 < t3.length; t3.length === t4 || (0, H.throwConcurrentModificationError)(t3), ++_i0) {
          command = t3[_i0];
          switch (command.type) {
            case 5:
              H.interceptedTypeCheck(command, "$isBezierCurveTo");
              _this._ctx.bezierCurveTo(command.x1, command.y1, command.x2, command.y2, command.x3, command.y3);
              break;
            case 3:
              _this._ctx.closePath();
              break;
            case 2:
              H.interceptedTypeCheck(command, "$isEllipse");
              _this._ctx.ellipse(command.x, command.y, command.radiusX, command.radiusY, command.rotation, command.startAngle, command.endAngle, false);
              break;
            case 1:
              H.interceptedTypeCheck(command, "$isLineTo");
              _this._ctx.lineTo(command.x, command.y);
              break;
            case 0:
              H.interceptedTypeCheck(command, "$isMoveTo");
              _this._ctx.moveTo(command.x, command.y);
              break;
            case 7:
              _this._drawRRectPath$2$startNewPath(H.interceptedTypeCheck(command, "$isRRectCommand").rrect, false);
              break;
            case 6:
              H.interceptedTypeCheck(command, "$isRectCommand");
              _this._ctx.rect(command.x, command.y, command.width, command.height);
              break;
            case 4:
              H.interceptedTypeCheck(command, "$isQuadraticCurveTo");
              _this._ctx.quadraticCurveTo(command.get$x1(command), command.get$y1(command), command.get$x2(command), command.get$y2(command));
              break;
            default:
              throw H.wrapException(P.UnimplementedError$("Unknown path command " + command.toString$0(0)));
          }
        }
    },
    get$rootElement: function(receiver) {
      return this.rootElement;
    }
  };
  T._NullTreeSanitizer0.prototype = {
    sanitizeTree$1: function(node) {
    },
    $isNodeTreeSanitizer: 1
  };
  T.BrowserEngine.prototype = {
    toString$0: function(_) {
      return this._engine$_name;
    }
  };
  T.PrerollContext.prototype = {};
  T.PaintContext.prototype = {};
  T.LayerScene.prototype = {$isScene: 1};
  T.CompositorContext.prototype = {};
  T.Rasterizer.prototype = {};
  T.Surface.prototype = {};
  T._CanvasCache.prototype = {
    acquireCanvas$1: function(size) {
      var t2, t3, t4,
        t1 = this._canvas;
      if (t1 == null)
        t1 = null;
      else {
        t1 = t1.bounds;
        t2 = t1.right;
        t3 = t1.left;
        if (typeof t2 !== "number")
          return t2.$sub();
        if (typeof t3 !== "number")
          return H.iae(t3);
        t4 = t1.bottom;
        t1 = t1.top;
        if (typeof t4 !== "number")
          return t4.$sub();
        if (typeof t1 !== "number")
          return H.iae(t1);
        t1 = new Q.Size(t2 - t3, t4 - t1);
      }
      if (size.$eq(0, t1))
        return this._canvas;
      t1 = size._dx;
      t2 = size._dy;
      if (typeof t1 !== "number")
        return H.iae(t1);
      if (typeof t2 !== "number")
        return H.iae(t2);
      return this._canvas = T.BitmapCanvas$(new Q.Rect(0, 0, 0 + t1, 0 + t2));
    }
  };
  T.DomCanvas.prototype = {
    clear$0: function(_) {
      this.super$SaveElementStackTracking$clear(0);
      $.$get$domRenderer().clearDom$1(this.rootElement);
    },
    clipRect$1: function(rect) {
      throw H.wrapException(P.UnimplementedError$(null));
    },
    clipRRect$1: function(rrect) {
      throw H.wrapException(P.UnimplementedError$(null));
    },
    clipPath$1: function(_, path) {
      throw H.wrapException(P.UnimplementedError$(null));
    },
    drawRect$2: function(rect, paint) {
      var $top, bottom, effectiveTransform, translated, style, cssColor, _this = this,
        rectangle = H.interceptedTypeCheck(W._ElementFactoryProvider_createElement_tag("draw-rect", null), "$isElement0"),
        isStroke = paint.style === C.PaintingStyle_1,
        t1 = rect.left,
        t2 = rect.right,
        left = Math.min(H.checkNum(t1), H.checkNum(t2)),
        right = Math.max(H.checkNum(t1), H.checkNum(t2));
      t2 = rect.top;
      t1 = rect.bottom;
      $top = Math.min(H.checkNum(t2), H.checkNum(t1));
      bottom = Math.max(H.checkNum(t2), H.checkNum(t1));
      if (_this.SaveElementStackTracking__currentTransform.isIdentity$0(0))
        if (isStroke) {
          t1 = paint.strokeWidth;
          if (typeof t1 !== "number")
            return t1.$div();
          t1 = "translate(" + H.S(left - t1 / 2) + "px, ";
          t2 = paint.strokeWidth;
          if (typeof t2 !== "number")
            return t2.$div();
          effectiveTransform = t1 + H.S($top - t2 / 2) + "px)";
        } else
          effectiveTransform = "translate(" + H.S(left) + "px, " + H.S($top) + "px)";
      else {
        t1 = _this.SaveElementStackTracking__currentTransform;
        t2 = new Float64Array(16);
        translated = new T.Matrix40(t2);
        translated.setFrom$1(t1);
        if (isStroke) {
          t1 = paint.strokeWidth;
          if (typeof t1 !== "number")
            return t1.$div();
          t1 /= 2;
          translated.translate$2(0, left - t1, $top - t1);
        } else
          translated.translate$2(0, left, $top);
        effectiveTransform = T.float64ListToCssTransform(t2);
      }
      style = rectangle.style;
      style.position = "absolute";
      C.CssStyleDeclaration_methods._setPropertyHelper$3(style, (style && C.CssStyleDeclaration_methods)._browserPropertyName$1(style, "transform-origin"), "0 0 0", "");
      C.CssStyleDeclaration_methods._setPropertyHelper$3(style, C.CssStyleDeclaration_methods._browserPropertyName$1(style, "transform"), effectiveTransform, "");
      t1 = paint.color;
      cssColor = t1 == null ? null : t1.toCssString$0();
      if (cssColor == null)
        cssColor = "#000000";
      t1 = paint.maskFilter;
      if (t1 != null) {
        t1 = "blur(" + H.S(t1._sigma) + "px)";
        C.CssStyleDeclaration_methods._setPropertyHelper$3(style, C.CssStyleDeclaration_methods._browserPropertyName$1(style, "filter"), t1, "");
      }
      t1 = right - left;
      if (isStroke) {
        t2 = paint.strokeWidth;
        if (typeof t2 !== "number")
          return H.iae(t2);
        t2 = H.S(t1 - t2) + "px";
        style.width = t2;
        t1 = paint.strokeWidth;
        if (typeof t1 !== "number")
          return H.iae(t1);
        t1 = H.S(bottom - $top - t1) + "px";
        style.height = t1;
        t1 = H.S(paint.strokeWidth) + "px solid " + cssColor;
        style.border = t1;
      } else {
        t1 = H.S(t1) + "px";
        style.width = t1;
        t1 = H.S(bottom - $top) + "px";
        style.height = t1;
        style.backgroundColor = cssColor;
      }
      t1 = _this.SaveElementStackTracking__elementStack;
      (t1.length === 0 ? _this.rootElement : C.JSArray_methods.get$last(t1)).appendChild(rectangle);
    },
    drawRRect$2: function(rrect, paint) {
      throw H.wrapException(P.UnimplementedError$(null));
    },
    drawDRRect$3: function(outer, inner, paint) {
      throw H.wrapException(P.UnimplementedError$(null));
    },
    drawCircle$3: function(c, radius, paint) {
      throw H.wrapException(P.UnimplementedError$(null));
    },
    drawPath$2: function(path, paint) {
      throw H.wrapException(P.UnimplementedError$(null));
    },
    drawShadow$4: function(path, color, elevation, transparentOccluder) {
      throw H.wrapException(P.UnimplementedError$(null));
    },
    drawParagraph$2: function(paragraph, offset) {
      var t1, style,
        paragraphElement = H.interceptedTypeCheck(paragraph._paragraphElement.cloneNode(true), "$isElement0"),
        cssTransform = T.float64ListToCssTransform(T.transformWithOffset(this.SaveElementStackTracking__currentTransform, offset)._engine$_m4storage),
        paragraphStyle = paragraphElement.style;
      paragraphStyle.position = "absolute";
      C.CssStyleDeclaration_methods._setPropertyHelper$3(paragraphStyle, (paragraphStyle && C.CssStyleDeclaration_methods)._browserPropertyName$1(paragraphStyle, "transform-origin"), "0 0 0", "");
      C.CssStyleDeclaration_methods._setPropertyHelper$3(paragraphStyle, C.CssStyleDeclaration_methods._browserPropertyName$1(paragraphStyle, "transform"), cssTransform, "");
      paragraphStyle.whiteSpace = "pre-wrap";
      t1 = H.S(paragraph._width) + "px";
      paragraphStyle.width = t1;
      style = paragraph._paragraphGeometricStyle;
      if (style.ellipsis != null) {
        t1 = style.maxLines;
        t1 = t1 == null || t1 === 1;
      } else
        t1 = false;
      if (t1) {
        t1 = H.S(paragraph.get$webOnlyMaxLinesHeight()) + "px";
        paragraphStyle.height = t1;
        paragraphStyle.whiteSpace = "pre";
        paragraphStyle.overflow = "hidden";
        C.CssStyleDeclaration_methods._setPropertyHelper$3(paragraphStyle, C.CssStyleDeclaration_methods._browserPropertyName$1(paragraphStyle, "text-overflow"), "ellipsis", "");
      } else if (paragraph._didExceedMaxLines) {
        t1 = H.S(paragraph.get$webOnlyMaxLinesHeight()) + "px";
        paragraphStyle.height = t1;
        C.CssStyleDeclaration_methods._setPropertyHelper$3(paragraphStyle, C.CssStyleDeclaration_methods._browserPropertyName$1(paragraphStyle, "overflow-y"), "hidden", "");
      } else {
        t1 = H.S(paragraph._height) + "px";
        paragraphStyle.height = t1;
      }
      t1 = this.SaveElementStackTracking__elementStack;
      (t1.length === 0 ? this.rootElement : C.JSArray_methods.get$last(t1)).appendChild(paragraphElement);
    },
    get$rootElement: function(receiver) {
      return this.rootElement;
    }
  };
  T.DomRenderer.prototype = {
    createElement$1: function(_, tagName) {
      var element = document.createElement(tagName);
      return element;
    },
    setElementStyle$3: function(element, $name, value) {
      var t1;
      if (value == null)
        element.style.removeProperty($name);
      else {
        t1 = element.style;
        C.CssStyleDeclaration_methods._setPropertyHelper$3(t1, (t1 && C.CssStyleDeclaration_methods)._browserPropertyName$1(t1, $name), value, null);
      }
    },
    reset$0: function(_) {
      var t2, sheet, bodyElement, t3, t4, initialInnerWidth, _this = this, _s1_ = "0", _s4_ = "none", _box_0 = {},
        t1 = _this._styleElement;
      if (t1 != null)
        C.StyleElement_methods.remove$0(t1);
      t1 = document;
      t2 = t1.createElement("style");
      _this._styleElement = t2;
      t1.head.appendChild(t2);
      sheet = H.interceptedTypeCheck(_this._styleElement.sheet, "$isCssStyleSheet");
      sheet.insertRule("flt-ruler-host p, flt-scene p {\n  margin: 0;\n}", sheet.cssRules.length);
      sheet.insertRule("flt-semantics input[type=range] {\n  appearance: none;\n  -webkit-appearance: none;\n  width: 100%;\n  position: absolute;\n  border: none;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n}", sheet.cssRules.length);
      t2 = $._browserEngine;
      if ((t2 == null ? $._browserEngine = T._detectBrowserEngine() : t2) === C.BrowserEngine_1) {
        sheet.insertRule("flt-semantics input[type=range]::-webkit-slider-thumb {  -webkit-appearance: none;}", sheet.cssRules.length);
        sheet.insertRule("flt-semantics ::selection {  background-color: transparent;}", sheet.cssRules.length);
      }
      sheet.insertRule('flt-semantics input,\nflt-semantics textarea,\nflt-semantics [contentEditable="true"] {\n  caret-color: transparent;\n}\n', sheet.cssRules.length);
      t2 = $._browserEngine;
      if ((t2 == null ? $._browserEngine = T._detectBrowserEngine() : t2) === C.BrowserEngine_1)
        sheet.insertRule("flt-glass-pane * {\n  -webkit-tap-highlight-color: transparent;\n}\n", sheet.cssRules.length);
      bodyElement = t1.body;
      _this.setElementStyle$3(bodyElement, "position", "fixed");
      _this.setElementStyle$3(bodyElement, "top", _s1_);
      _this.setElementStyle$3(bodyElement, "right", _s1_);
      _this.setElementStyle$3(bodyElement, "bottom", _s1_);
      _this.setElementStyle$3(bodyElement, "left", _s1_);
      _this.setElementStyle$3(bodyElement, "overflow", "hidden");
      _this.setElementStyle$3(bodyElement, "padding", _s1_);
      _this.setElementStyle$3(bodyElement, "margin", _s1_);
      _this.setElementStyle$3(bodyElement, "user-select", _s4_);
      _this.setElementStyle$3(bodyElement, "-webkit-user-select", _s4_);
      _this.setElementStyle$3(bodyElement, "-ms-user-select", _s4_);
      _this.setElementStyle$3(bodyElement, "-moz-user-select", _s4_);
      _this.setElementStyle$3(bodyElement, "touch-action", _s4_);
      _this.setElementStyle$3(bodyElement, "font", "normal normal 14px sans-serif");
      _this.setElementStyle$3(bodyElement, "color", "red");
      for (t2 = t1.head, t3 = W.Element0, t2.toString, H.assertIsSubtype(t3, t3, "The type argument '", "' is not a subtype of the type variable bound '", "' of type variable 'T' in 'querySelectorAll'."), t2 = new W._FrozenElementList(t2.querySelectorAll('meta[name="viewport"]'), [t3]), t3 = new H.ListIterator(t2, t2.get$length(t2), [t3]); t3.moveNext$0();) {
        t2 = t3._current;
        t4 = t2.parentNode;
        if (t4 != null)
          t4.removeChild(t2);
      }
      t2 = _this._viewportMeta;
      if (t2 != null)
        C.MetaElement_methods.remove$0(t2);
      t2 = t1.createElement("meta");
      t2.setAttribute("flt-viewport", "");
      t2.name = "viewport";
      t2.content = "width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no";
      _this._viewportMeta = t2;
      t1.head.appendChild(t2);
      t2 = _this._sceneHostElement;
      if (t2 != null)
        J.remove$0$ax(t2);
      t1 = _this.createElement$1(0, "flt-scene-host");
      _this._sceneHostElement = t1;
      bodyElement.appendChild(t1);
      t1 = _this._glassPaneElement;
      if (t1 != null)
        J.remove$0$ax(t1);
      t1 = _this._glassPaneElement = _this.createElement$1(0, "flt-glass-pane");
      t2 = t1.style;
      t2.position = "absolute";
      t2.top = _s1_;
      t2.right = _s1_;
      t2.bottom = _s1_;
      t2.left = _s1_;
      bodyElement.appendChild(t1);
      T.EngineSemanticsOwner_instance().autoEnableOnTap$1(_this);
      if ($.PointerBinding__instance == null) {
        t1 = $.PointerBinding__instance = new T.PointerBinding(_this);
        t1._detector = C.C_PointerSupportDetector;
        t1._adapter = t1._createAdapter$0();
      }
      _this._sceneHostElement.setAttribute("aria-hidden", "true");
      $.$get$window().devicePixelRatio = 1;
      t1 = $._browserEngine;
      if ((t1 == null ? $._browserEngine = T._detectBrowserEngine() : t1) === C.BrowserEngine_1) {
        initialInnerWidth = window.innerWidth;
        _box_0.checkCount = 0;
        P.Timer_Timer$periodic(C.Duration_100000, new T.DomRenderer_reset_closure(_box_0, _this, initialInnerWidth));
      }
      t1 = W.Event;
      _this._resizeSubscription = W._EventStreamSubscription$(window, "resize", H.functionTypeCheck(_this.get$_metricsDidChange(), {func: 1, ret: -1, args: [t1]}), false, t1);
    },
    _metricsDidChange$1: function($event) {
      var t1 = $.$get$window();
      if (t1._onMetricsChanged != null)
        t1.onMetricsChanged$0();
    },
    clearDom$1: function(node) {
      var t1, t2;
      for (; t1 = node.lastChild, t1 != null;) {
        t2 = t1.parentNode;
        if (t2 != null)
          t2.removeChild(t1);
      }
    }
  };
  T.DomRenderer_reset_closure.prototype = {
    call$1: function(t) {
      var t1;
      H.interceptedTypeCheck(t, "$isTimer");
      t1 = ++this._box_0.checkCount;
      if (this.initialInnerWidth != window.innerWidth) {
        t.cancel$0(0);
        t1 = $.$get$window();
        if (t1._onMetricsChanged != null)
          t1.onMetricsChanged$0();
      } else if (t1 > 5)
        t.cancel$0(0);
    },
    $signature: 48
  };
  T.EngineCanvas.prototype = {
    dispose$0: function() {
      this.clear$0(0);
    }
  };
  T._SaveStackEntry.prototype = {};
  T._SaveClipEntry.prototype = {};
  T.SaveStackTracking.prototype = {
    clear$0: function(_) {
      var t1;
      C.JSArray_methods.set$length(this.SaveStackTracking__saveStack, 0);
      this.set$_clipStack(null);
      t1 = new T.Matrix40(new Float64Array(16));
      t1.setIdentity$0();
      this.SaveStackTracking__currentTransform = t1;
    },
    save$0: function(_) {
      var t1 = this.SaveStackTracking__currentTransform,
        t2 = new T.Matrix40(new Float64Array(16));
      t2.setFrom$1(t1);
      t1 = this.SaveStackTracking__clipStack;
      t1 = t1 == null ? null : P.List_List$from(t1, true, T._SaveClipEntry);
      C.JSArray_methods.add$1(this.SaveStackTracking__saveStack, new T._SaveStackEntry(t2, t1));
    },
    restore$0: function(_) {
      var entry,
        t1 = this.SaveStackTracking__saveStack,
        t2 = t1.length;
      if (t2 === 0)
        return;
      if (0 >= t2)
        return H.ioore(t1, -1);
      entry = t1.pop();
      this.SaveStackTracking__currentTransform = entry.transform;
      this.set$_clipStack(entry.clipStack);
    },
    translate$2: function(_, dx, dy) {
      this.SaveStackTracking__currentTransform.translate$2(0, dx, dy);
    },
    scale$2: function(_, sx, sy) {
      this.SaveStackTracking__currentTransform.scale$2(0, sx, sy);
    },
    rotate$1: function(_, radians) {
      this.SaveStackTracking__currentTransform.rotate$2(0, $.$get$SaveStackTracking__unitZ(), radians);
    },
    transform$1: function(_, matrix4) {
      this.SaveStackTracking__currentTransform.multiply$1(0, new T.Matrix40(matrix4));
    },
    clipRect$1: function(rect) {
      var t1, t2, t3, _this = this;
      if (_this.SaveStackTracking__clipStack == null)
        _this.set$_clipStack(H.setRuntimeTypeInfo([], [T._SaveClipEntry]));
      t1 = _this.SaveStackTracking__clipStack;
      t2 = _this.SaveStackTracking__currentTransform;
      t3 = new T.Matrix40(new Float64Array(16));
      t3.setFrom$1(t2);
      (t1 && C.JSArray_methods).add$1(t1, new T._SaveClipEntry(rect, null, null, t3));
    },
    clipRRect$1: function(rrect) {
      var t1, t2, t3, _this = this;
      if (_this.SaveStackTracking__clipStack == null)
        _this.set$_clipStack(H.setRuntimeTypeInfo([], [T._SaveClipEntry]));
      t1 = _this.SaveStackTracking__clipStack;
      t2 = _this.SaveStackTracking__currentTransform;
      t3 = new T.Matrix40(new Float64Array(16));
      t3.setFrom$1(t2);
      (t1 && C.JSArray_methods).add$1(t1, new T._SaveClipEntry(null, rrect, null, t3));
    },
    clipPath$1: function(_, path) {
      var t1, t2, t3, _this = this;
      if (_this.SaveStackTracking__clipStack == null)
        _this.set$_clipStack(H.setRuntimeTypeInfo([], [T._SaveClipEntry]));
      t1 = _this.SaveStackTracking__clipStack;
      t2 = _this.SaveStackTracking__currentTransform;
      t3 = new T.Matrix40(new Float64Array(16));
      t3.setFrom$1(t2);
      (t1 && C.JSArray_methods).add$1(t1, new T._SaveClipEntry(null, null, path, t3));
    },
    set$_clipStack: function(_clipStack) {
      this.SaveStackTracking__clipStack = H.assertSubtype(_clipStack, "$isList", [T._SaveClipEntry], "$asList");
    }
  };
  T.BrowserHistory.prototype = {
    get$currentPath: function() {
      var t1, path;
      if (this._locationStrategy == null)
        t1 = null;
      else {
        path = window.location.hash;
        if (path == null)
          path = "";
        t1 = Q.ensureLeading(path.length === 0 ? path : C.JSString_methods.substring$1(path, 1), "/");
      }
      return t1 == null ? "/" : t1;
    },
    exit$0: function() {
      var backFuture, _this = this,
        t1 = _this._locationStrategy;
      if (t1 != null) {
        _this._tearoffStrategy$1(t1);
        t1 = _this._locationStrategy;
        t1.toString;
        window.history.back();
        backFuture = t1._waitForPopState$0();
        _this._locationStrategy = null;
        return backFuture;
      }
      t1 = new P._Future($.Zone__current, [-1]);
      t1._asyncComplete$1(null);
      return t1;
    },
    _popStateListener$1: function($event) {
      var t1, t2, newRouteName, _this = this,
        _s18_ = "flutter/navigation";
      H.interceptedTypeCheck($event, "$isPopStateEvent");
      t1 = new P._AcceptStructuredCloneDart2Js([], []).convertNativeToDart_AcceptStructuredClone$2$mustCopy($event.state, true);
      t2 = J.getInterceptor$(t1);
      if (!!t2.$isMap && J.$eq$(t2.$index(t1, "origin"), true)) {
        _this._setupFlutterEntry$1(_this._locationStrategy);
        $.$get$window().onPlatformMessage$3(_s18_, C.C_JSONMethodCodec.encodeMethodCall$1($.$get$_popRouteMethodCall()), new T.BrowserHistory__popStateListener_closure());
      } else if (T._isFlutterEntry(new P._AcceptStructuredCloneDart2Js([], []).convertNativeToDart_AcceptStructuredClone$2$mustCopy($event.state, true))) {
        newRouteName = _this._userProvidedRouteName;
        _this._userProvidedRouteName = null;
        $.$get$window().onPlatformMessage$3(_s18_, C.C_JSONMethodCodec.encodeMethodCall$1(new T.MethodCall("pushRoute", newRouteName)), new T.BrowserHistory__popStateListener_closure0());
      } else {
        _this._userProvidedRouteName = _this.get$currentPath();
        t1 = _this._locationStrategy;
        t1.toString;
        window.history.back();
        t1._waitForPopState$0();
      }
    },
    _setupFlutterEntry$3$path$replace: function(strategy, path, replace) {
      var t1, t2, t3;
      if (path == null)
        path = this.get$currentPath();
      t1 = $._flutterState;
      if (replace) {
        t2 = strategy.prepareExternalUrl$1(path);
        t3 = window.history;
        t3.toString;
        t3.replaceState(new P._StructuredCloneDart2Js([], []).walk$1(t1), "flutter", t2);
      } else {
        t2 = strategy.prepareExternalUrl$1(path);
        t3 = window.history;
        t3.toString;
        t3.pushState(new P._StructuredCloneDart2Js([], []).walk$1(t1), "flutter", t2);
      }
    },
    _setupFlutterEntry$1: function(strategy) {
      return this._setupFlutterEntry$3$path$replace(strategy, null, false);
    },
    _setupStrategy$1: function(strategy) {
      var path, t1, t2, t3, _this = this;
      if (strategy == null)
        return;
      path = _this.get$currentPath();
      if (!T._isFlutterEntry(new P._AcceptStructuredCloneDart2Js([], []).convertNativeToDart_AcceptStructuredClone$2$mustCopy(window.history.state, true))) {
        t1 = $._originState;
        t2 = strategy.prepareExternalUrl$1("");
        t3 = window.history;
        t3.toString;
        t3.replaceState(new P._StructuredCloneDart2Js([], []).walk$1(t1), "origin", t2);
        _this._setupFlutterEntry$3$path$replace(strategy, path, false);
      }
      _this.set$_unsubscribe(strategy.onPopState$1(0, H.functionTypeCheck(_this.get$_popStateListener(), {func: 1, args: [W.Event]})));
    },
    _tearoffStrategy$1: function(strategy) {
      if (strategy == null)
        return;
      this._unsubscribe.call$0();
      this.set$_unsubscribe(null);
      window.history.back();
      strategy._waitForPopState$0();
    },
    set$_unsubscribe: function(_unsubscribe) {
      this._unsubscribe = H.functionTypeCheck(_unsubscribe, {func: 1, ret: -1});
    }
  };
  T.BrowserHistory__popStateListener_closure.prototype = {
    call$1: function(_) {
      H.interceptedTypeCheck(_, "$isByteData");
    },
    $signature: 25
  };
  T.BrowserHistory__popStateListener_closure0.prototype = {
    call$1: function(_) {
      H.interceptedTypeCheck(_, "$isByteData");
    },
    $signature: 25
  };
  T._SaveElementStackEntry.prototype = {};
  T.SaveElementStackTracking.prototype = {
    clear$0: function(_) {
      var t1;
      C.JSArray_methods.set$length(this.SaveElementStackTracking__saveStack, 0);
      C.JSArray_methods.set$length(this.SaveElementStackTracking__elementStack, 0);
      t1 = new T.Matrix40(new Float64Array(16));
      t1.setIdentity$0();
      this.SaveElementStackTracking__currentTransform = t1;
    },
    save$0: function(_) {
      var t2, t3, _this = this,
        t1 = _this.SaveElementStackTracking__elementStack;
      t1 = t1.length === 0 ? _this.rootElement : C.JSArray_methods.get$last(t1);
      t2 = _this.SaveElementStackTracking__currentTransform;
      t3 = new T.Matrix40(new Float64Array(16));
      t3.setFrom$1(t2);
      C.JSArray_methods.add$1(_this.SaveElementStackTracking__saveStack, new T._SaveElementStackEntry(t1, t3));
    },
    restore$0: function(_) {
      var entry, t3, _this = this,
        t1 = _this.SaveElementStackTracking__saveStack,
        t2 = t1.length;
      if (t2 === 0)
        return;
      if (0 >= t2)
        return H.ioore(t1, -1);
      entry = t1.pop();
      _this.SaveElementStackTracking__currentTransform = entry.transform;
      t1 = _this.SaveElementStackTracking__elementStack;
      t2 = entry.savedElement;
      t3 = _this.rootElement;
      while (true) {
        if (!((t1.length === 0 ? t3 : C.JSArray_methods.get$last(t1)) !== t2))
          break;
        if (0 >= t1.length)
          return H.ioore(t1, -1);
        t1.pop();
      }
    },
    translate$2: function(_, dx, dy) {
      this.SaveElementStackTracking__currentTransform.translate$2(0, dx, dy);
    },
    scale$2: function(_, sx, sy) {
      this.SaveElementStackTracking__currentTransform.scale$2(0, sx, sy);
    },
    rotate$1: function(_, radians) {
      this.SaveElementStackTracking__currentTransform.rotate$2(0, $.$get$SaveElementStackTracking__unitZ(), radians);
    },
    transform$1: function(_, matrix4) {
      this.SaveElementStackTracking__currentTransform.multiply$1(0, new T.Matrix40(matrix4));
    }
  };
  T.Keyboard.prototype = {
    Keyboard$_$0: function() {
      var _this = this;
      _this.set$_keydownListener(new T.Keyboard$__closure(_this));
      C.Window_methods.addEventListener$2(window, "keydown", _this._keydownListener);
      _this.set$_keyupListener(new T.Keyboard$__closure0(_this));
      C.Window_methods.addEventListener$2(window, "keyup", _this._keyupListener);
      C.JSArray_methods.add$1($._hotRestartListeners, new T.Keyboard$__closure1(_this));
    },
    dispose$0: function() {
      var _this = this;
      C.Window_methods.removeEventListener$2(window, "keydown", _this._keydownListener);
      C.Window_methods.removeEventListener$2(window, "keyup", _this._keyupListener);
      _this.set$_keydownListener(null);
      _this.set$_keyupListener(null);
      $.Keyboard__instance = null;
    },
    _handleHtmlEvent$1: function($event) {
      var eventData = P.LinkedHashMap__makeLiteral(["type", $event.type, "keymap", "android", "keyCode", $event.keyCode]),
        t1 = $event.key;
      if (t1.length === 1) {
        t1 = new H.CodeUnits(t1);
        eventData.$indexSet(0, "codePoint", t1.get$first(t1));
      }
      $.$get$window().onPlatformMessage$3("flutter/keyevent", this._messageCodec.encodeMessage$1(eventData), T.engine___noopCallback$closure());
    },
    set$_keydownListener: function(_keydownListener) {
      this._keydownListener = H.functionTypeCheck(_keydownListener, {func: 1, args: [W.Event]});
    },
    set$_keyupListener: function(_keyupListener) {
      this._keyupListener = H.functionTypeCheck(_keyupListener, {func: 1, args: [W.Event]});
    }
  };
  T.Keyboard$__closure.prototype = {
    call$1: function($event) {
      this.$this._handleHtmlEvent$1(H.interceptedTypeCheck(H.interceptedTypeCheck($event, "$isEvent"), "$isKeyboardEvent"));
    },
    $signature: 2
  };
  T.Keyboard$__closure0.prototype = {
    call$1: function($event) {
      this.$this._handleHtmlEvent$1(H.interceptedTypeCheck(H.interceptedTypeCheck($event, "$isEvent"), "$isKeyboardEvent"));
    },
    $signature: 2
  };
  T.Keyboard$__closure1.prototype = {
    call$0: function() {
      var t1 = this.$this;
      C.Window_methods.removeEventListener$2(window, "keydown", t1._keydownListener);
      C.Window_methods.removeEventListener$2(window, "keyup", t1._keyupListener);
      t1.set$_keydownListener(null);
      t1.set$_keyupListener(null);
      $.Keyboard__instance = null;
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 0
  };
  T.PointerBinding.prototype = {
    _createAdapter$0: function() {
      var t1, _this = this;
      _this._detector.toString;
      if ("PointerEvent" in window) {
        t1 = new T.PointerAdapter(_this.domRenderer, _this.get$_onPointerData(), P.LinkedHashMap_LinkedHashMap$_empty(P.int, P.bool));
        t1._setup$0();
        return t1;
      }
      if ("TouchEvent" in window) {
        t1 = new T.TouchAdapter(_this.domRenderer, _this.get$_onPointerData(), P.LinkedHashMap_LinkedHashMap$_empty(P.int, P.bool));
        t1._setup$0();
        return t1;
      }
      if ("MouseEvent" in window) {
        t1 = new T.MouseAdapter(_this.domRenderer, _this.get$_onPointerData(), P.LinkedHashMap_LinkedHashMap$_empty(P.int, P.bool));
        t1._setup$0();
        return t1;
      }
      return;
    },
    _onPointerData$1: function(data) {
      H.assertSubtype(data, "$isList", [Q.PointerData], "$asList");
      $.$get$window().onPointerDataPacket$1(new Q.PointerDataPacket(data));
    }
  };
  T.PointerSupportDetector.prototype = {
    toString$0: function(_) {
      return "pointers:" + ("PointerEvent" in window) + ", touch:" + ("TouchEvent" in window) + ", mouse:" + ("MouseEvent" in window);
    }
  };
  T.BaseAdapter.prototype = {
    _engine$_addEventListener$2: function(_, eventName, handler) {
      var loggedHandler = new T.BaseAdapter__addEventListener_closure(H.functionTypeCheck(handler, {func: 1, args: [W.Event]}));
      $.BaseAdapter__listeners.$indexSet(0, eventName, loggedHandler);
      J.addEventListener$3$x(this.domRenderer._glassPaneElement, eventName, loggedHandler, true);
    }
  };
  T.BaseAdapter__addEventListener_closure.prototype = {
    call$1: function($event) {
      H.interceptedTypeCheck($event, "$isEvent");
      if (T.EngineSemanticsOwner_instance().receiveGlobalEvent$1($event))
        this.handler.call$1($event);
    },
    $signature: 2
  };
  T.PointerAdapter.prototype = {
    _setup$0: function() {
      var _this = this;
      _this._engine$_addEventListener$2(0, "pointerdown", new T.PointerAdapter__setup_closure(_this));
      _this._engine$_addEventListener$2(0, "pointermove", new T.PointerAdapter__setup_closure0(_this));
      _this._engine$_addEventListener$2(0, "pointerup", new T.PointerAdapter__setup_closure1(_this));
      _this._engine$_addEventListener$2(0, "pointercancel", new T.PointerAdapter__setup_closure2(_this));
      T._addWheelEventListener(new T.PointerAdapter__setup_closure3(_this));
    },
    _convertEventToPointerData$2: function(change, evt) {
      var data, i, $event, ms, t3, t4, t5, t6, t7, t8, t9, t10,
        allEvents = this._expandEvents$1(evt),
        t1 = J.getInterceptor$asx(allEvents),
        t2 = t1.get$length(allEvents);
      if (typeof t2 !== "number")
        return H.iae(t2);
      t2 = new Array(t2);
      t2.fixed$length = Array;
      data = H.setRuntimeTypeInfo(t2, [Q.PointerData]);
      i = 0;
      while (true) {
        t2 = t1.get$length(allEvents);
        if (typeof t2 !== "number")
          return H.iae(t2);
        if (!(i < t2))
          break;
        $event = t1.$index(allEvents, i);
        t2 = $event.timeStamp;
        ms = J.toInt$0$n(t2);
        t2 = P.Duration$(C.JSNumber_methods.toInt$0((t2 - ms) * 1000), ms, 0);
        t3 = this._pointerTypeToDeviceKind$1($event.pointerType);
        t4 = $event.pointerId;
        t5 = $event.clientX;
        t6 = $event.clientY;
        t7 = $event.buttons;
        t8 = $event.pressure;
        t9 = $event.tiltX;
        if (typeof t9 !== "number")
          return t9.abs$0();
        t10 = $event.tiltY;
        if (typeof t10 !== "number")
          return t10.abs$0();
        if (!(Math.abs(t9) > Math.abs(t10)))
          t9 = t10;
        C.JSArray_methods.$indexSet(data, i, Q.PointerData$(t7, change, t4, t3, t5, t6, t8, 1, 0, 0, 0, null, t9 / 180 * 3.141592653589793, t2));
        ++i;
      }
      return data;
    },
    _expandEvents$1: function($event) {
      var coalescedEvents;
      if ("getCoalescedEvents" in $event) {
        coalescedEvents = $event.getCoalescedEvents();
        if (J.get$isNotEmpty$asx(coalescedEvents))
          return coalescedEvents;
      }
      return H.setRuntimeTypeInfo([$event], [W.PointerEvent0]);
    },
    _pointerTypeToDeviceKind$1: function(pointerType) {
      switch (pointerType) {
        case "mouse":
          return C.PointerDeviceKind_1;
        case "pen":
          return C.PointerDeviceKind_2;
        case "touch":
          return C.PointerDeviceKind_0;
        default:
          return C.PointerDeviceKind_4;
      }
    }
  };
  T.PointerAdapter__setup_closure.prototype = {
    call$1: function($event) {
      var t3,
        pointerButton = T._pointerButtonFromHtmlEvent($event),
        t1 = this.$this,
        t2 = t1._isDownMap;
      if (t2.$index(0, pointerButton) === true) {
        t3 = t1._convertEventToPointerData$2(C.PointerChange_6, H.interceptedTypeCheck($event, "$isPointerEvent0"));
        t1._callback.call$1(t3);
      }
      t2.$indexSet(0, pointerButton, true);
      t2 = t1._convertEventToPointerData$2(C.PointerChange_4, H.interceptedTypeCheck($event, "$isPointerEvent0"));
      t1._callback.call$1(t2);
    },
    $signature: 2
  };
  T.PointerAdapter__setup_closure0.prototype = {
    call$1: function($event) {
      var t2,
        t1 = this.$this;
      if (t1._isDownMap.$index(0, T._pointerButtonFromHtmlEvent($event)) !== true)
        return;
      t2 = t1._convertEventToPointerData$2(C.PointerChange_5, H.interceptedTypeCheck($event, "$isPointerEvent0"));
      t1._callback.call$1(t2);
    },
    $signature: 2
  };
  T.PointerAdapter__setup_closure1.prototype = {
    call$1: function($event) {
      var pointerButton = T._pointerButtonFromHtmlEvent($event),
        t1 = this.$this,
        t2 = t1._isDownMap;
      if (t2.$index(0, pointerButton) !== true)
        return;
      t2.$indexSet(0, pointerButton, false);
      t2 = t1._convertEventToPointerData$2(C.PointerChange_6, H.interceptedTypeCheck($event, "$isPointerEvent0"));
      t1._callback.call$1(t2);
    },
    $signature: 2
  };
  T.PointerAdapter__setup_closure2.prototype = {
    call$1: function($event) {
      var t1 = this.$this,
        t2 = t1._convertEventToPointerData$2(C.PointerChange_0, H.interceptedTypeCheck($event, "$isPointerEvent0"));
      t1._callback.call$1(t2);
    },
    $signature: 2
  };
  T.PointerAdapter__setup_closure3.prototype = {
    call$1: function($event) {
      var t1 = T._convertWheelEventToPointerData($event);
      this.$this._callback.call$1(t1);
      $event.preventDefault();
    },
    $signature: 45
  };
  T.TouchAdapter.prototype = {
    _setup$0: function() {
      var _this = this;
      _this._engine$_addEventListener$2(0, "touchstart", new T.TouchAdapter__setup_closure(_this));
      _this._engine$_addEventListener$2(0, "touchmove", new T.TouchAdapter__setup_closure0(_this));
      _this._engine$_addEventListener$2(0, "touchend", new T.TouchAdapter__setup_closure1(_this));
      _this._engine$_addEventListener$2(0, "touchcancel", new T.TouchAdapter__setup_closure2(_this));
    },
    _convertEventToPointerData$2: function(change, $event) {
      var data, len, i, touch, ms, t2, t3,
        touches = $event.changedTouches,
        t1 = new Array(touches.length);
      t1.fixed$length = Array;
      data = H.setRuntimeTypeInfo(t1, [Q.PointerData]);
      for (len = touches.length, i = 0; i < len; ++i) {
        if (i >= touches.length)
          return H.ioore(touches, i);
        touch = touches[i];
        t1 = $event.timeStamp;
        ms = J.toInt$0$n(t1);
        t1 = P.Duration$(C.JSNumber_methods.toInt$0((t1 - ms) * 1000), ms, 0);
        t2 = touch.identifier;
        t3 = C.JSNumber_methods.round$0(touch.clientX);
        C.JSNumber_methods.round$0(touch.clientY);
        C.JSNumber_methods.round$0(touch.clientX);
        C.JSArray_methods.$indexSet(data, i, Q.PointerData$(0, change, t2, C.PointerDeviceKind_0, t3, C.JSNumber_methods.round$0(touch.clientY), 1, 1, 0, 0, 0, C.PointerSignalKind_0, 0, t1));
      }
      return data;
    }
  };
  T.TouchAdapter__setup_closure.prototype = {
    call$1: function($event) {
      var t2,
        t1 = this.$this;
      t1._isDownMap.$indexSet(0, 1, true);
      t2 = t1._convertEventToPointerData$2(C.PointerChange_4, H.interceptedTypeCheck($event, "$isTouchEvent"));
      t1._callback.call$1(t2);
    },
    $signature: 2
  };
  T.TouchAdapter__setup_closure0.prototype = {
    call$1: function($event) {
      var t1, t2;
      $event.preventDefault();
      t1 = this.$this;
      if (t1._isDownMap.$index(0, 1) !== true)
        return;
      t2 = t1._convertEventToPointerData$2(C.PointerChange_5, H.interceptedTypeCheck($event, "$isTouchEvent"));
      t1._callback.call$1(t2);
    },
    $signature: 2
  };
  T.TouchAdapter__setup_closure1.prototype = {
    call$1: function($event) {
      var t2,
        t1 = this.$this;
      t1._isDownMap.$indexSet(0, 1, false);
      t2 = t1._convertEventToPointerData$2(C.PointerChange_6, H.interceptedTypeCheck($event, "$isTouchEvent"));
      t1._callback.call$1(t2);
    },
    $signature: 2
  };
  T.TouchAdapter__setup_closure2.prototype = {
    call$1: function($event) {
      var t1 = this.$this,
        t2 = t1._convertEventToPointerData$2(C.PointerChange_0, H.interceptedTypeCheck($event, "$isTouchEvent"));
      t1._callback.call$1(t2);
    },
    $signature: 2
  };
  T.MouseAdapter.prototype = {
    _setup$0: function() {
      var _this = this;
      _this._engine$_addEventListener$2(0, "mousedown", new T.MouseAdapter__setup_closure(_this));
      _this._engine$_addEventListener$2(0, "mousemove", new T.MouseAdapter__setup_closure0(_this));
      _this._engine$_addEventListener$2(0, "mouseup", new T.MouseAdapter__setup_closure1(_this));
      T._addWheelEventListener(new T.MouseAdapter__setup_closure2(_this));
    },
    _convertEventToPointerData$2: function(change, $event) {
      var t1 = T._eventTimeStampToDuration($event.timeStamp),
        t2 = $event.clientX,
        t3 = $event.clientY;
      return H.setRuntimeTypeInfo([Q.PointerData$($event.buttons, change, -1, C.PointerDeviceKind_1, t2, t3, 1, 1, 0, 0, 0, C.PointerSignalKind_0, 0, t1)], [Q.PointerData]);
    }
  };
  T.MouseAdapter__setup_closure.prototype = {
    call$1: function($event) {
      var t3,
        pointerButton = T._pointerButtonFromHtmlEvent($event),
        t1 = this.$this,
        t2 = t1._isDownMap;
      if (t2.$index(0, pointerButton) === true) {
        t3 = t1._convertEventToPointerData$2(C.PointerChange_6, H.interceptedTypeCheck($event, "$isMouseEvent"));
        t1._callback.call$1(t3);
      }
      t2.$indexSet(0, pointerButton, true);
      t2 = t1._convertEventToPointerData$2(C.PointerChange_4, H.interceptedTypeCheck($event, "$isMouseEvent"));
      t1._callback.call$1(t2);
    },
    $signature: 2
  };
  T.MouseAdapter__setup_closure0.prototype = {
    call$1: function($event) {
      var t2,
        t1 = this.$this;
      if (t1._isDownMap.$index(0, T._pointerButtonFromHtmlEvent($event)) !== true)
        return;
      t2 = t1._convertEventToPointerData$2(C.PointerChange_5, H.interceptedTypeCheck($event, "$isMouseEvent"));
      t1._callback.call$1(t2);
    },
    $signature: 2
  };
  T.MouseAdapter__setup_closure1.prototype = {
    call$1: function($event) {
      var t2,
        t1 = this.$this;
      t1._isDownMap.$indexSet(0, T._pointerButtonFromHtmlEvent($event), false);
      t2 = t1._convertEventToPointerData$2(C.PointerChange_6, H.interceptedTypeCheck($event, "$isMouseEvent"));
      t1._callback.call$1(t2);
    },
    $signature: 2
  };
  T.MouseAdapter__setup_closure2.prototype = {
    call$1: function($event) {
      var t1 = T._convertWheelEventToPointerData($event);
      this.$this._callback.call$1(t1);
      $event.preventDefault();
    },
    $signature: 45
  };
  T._addWheelEventListener_closure.prototype = {
    call$1: function($event) {
      return this.listener.call$1(H.interceptedTypeCheck($event, "$isWheelEvent"));
    },
    $signature: 7
  };
  T.RecordingCanvas.prototype = {
    apply$1: function(engineCanvas) {
      var t1, i;
      for (t1 = this._engine$_commands, i = 0; i < t1.length; ++i)
        t1[i].apply$1(engineCanvas);
    },
    drawDRRect$3: function(outer, inner, paint) {
      var strokeWidth, t1, t2, t3, t4, _this = this;
      if (!(outer.contains$1(0, new Q.Offset(inner.left, inner.top)) && outer.contains$1(0, new Q.Offset(inner.right, inner.bottom))))
        return;
      _this._didDraw = _this._hasArbitraryPaint = true;
      paint.get$strokeWidth();
      strokeWidth = paint.get$strokeWidth();
      t1 = outer.left;
      if (typeof t1 !== "number")
        return t1.$sub();
      t2 = outer.top;
      if (typeof t2 !== "number")
        return t2.$sub();
      t3 = outer.right;
      if (typeof t3 !== "number")
        return t3.$add();
      t4 = outer.bottom;
      if (typeof t4 !== "number")
        return t4.$add();
      _this._paintBounds.growLTRB$4(t1 - strokeWidth, t2 - strokeWidth, t3 + strokeWidth, t4 + strokeWidth);
      paint._frozen = true;
      C.JSArray_methods.add$1(_this._engine$_commands, new T.PaintDrawDRRect(outer, inner, paint._paintData));
    }
  };
  T.PaintCommand.prototype = {};
  T.PaintSave.prototype = {
    apply$1: function(canvas) {
      canvas.save$0(0);
    },
    toString$0: function(_) {
      var t1 = this.super$Object$toString(0);
      return t1;
    }
  };
  T.PaintRestore.prototype = {
    apply$1: function(canvas) {
      canvas.restore$0(0);
    },
    toString$0: function(_) {
      var t1 = this.super$Object$toString(0);
      return t1;
    }
  };
  T.PaintTranslate.prototype = {
    apply$1: function(canvas) {
      canvas.translate$2(0, this.dx, this.dy);
    },
    toString$0: function(_) {
      var t1 = this.super$Object$toString(0);
      return t1;
    }
  };
  T.PaintScale.prototype = {
    apply$1: function(canvas) {
      canvas.scale$2(0, this.sx, this.sy);
    },
    toString$0: function(_) {
      var t1 = this.super$Object$toString(0);
      return t1;
    }
  };
  T.PaintRotate.prototype = {
    apply$1: function(canvas) {
      canvas.rotate$1(0, this.radians);
    },
    toString$0: function(_) {
      var t1 = this.super$Object$toString(0);
      return t1;
    }
  };
  T.PaintTransform.prototype = {
    apply$1: function(canvas) {
      canvas.transform$1(0, this.matrix4);
    },
    toString$0: function(_) {
      var t1 = this.super$Object$toString(0);
      return t1;
    }
  };
  T.PaintClipRect.prototype = {
    apply$1: function(canvas) {
      canvas.clipRect$1(this.rect);
    },
    toString$0: function(_) {
      var t1 = this.super$Object$toString(0);
      return t1;
    }
  };
  T.PaintClipRRect.prototype = {
    apply$1: function(canvas) {
      canvas.clipRRect$1(this.rrect);
    },
    toString$0: function(_) {
      var t1 = this.super$Object$toString(0);
      return t1;
    }
  };
  T.PaintClipPath.prototype = {
    apply$1: function(canvas) {
      canvas.clipPath$1(0, this.path);
    },
    toString$0: function(_) {
      var t1 = this.super$Object$toString(0);
      return t1;
    }
  };
  T.PaintDrawRect.prototype = {
    apply$1: function(canvas) {
      canvas.drawRect$2(this.rect, this.paint);
    },
    toString$0: function(_) {
      var t1 = this.super$Object$toString(0);
      return t1;
    },
    paint$3$textDirection: function(arg0, arg1, arg2) {
      return this.paint.call$3$textDirection(arg0, arg1, arg2);
    }
  };
  T.PaintDrawRRect.prototype = {
    apply$1: function(canvas) {
      canvas.drawRRect$2(this.rrect, this.paint);
    },
    toString$0: function(_) {
      var t1 = this.super$Object$toString(0);
      return t1;
    },
    paint$3$textDirection: function(arg0, arg1, arg2) {
      return this.paint.call$3$textDirection(arg0, arg1, arg2);
    }
  };
  T.PaintDrawDRRect.prototype = {
    apply$1: function(canvas) {
      canvas.drawDRRect$3(this.outer, this.inner, this.paint);
    },
    toString$0: function(_) {
      var t1 = this.super$Object$toString(0);
      return t1;
    },
    paint$3$textDirection: function(arg0, arg1, arg2) {
      return this.paint.call$3$textDirection(arg0, arg1, arg2);
    }
  };
  T.PaintDrawCircle.prototype = {
    apply$1: function(canvas) {
      canvas.drawCircle$3(this.c, this.radius, this.paint);
    },
    toString$0: function(_) {
      var t1 = this.super$Object$toString(0);
      return t1;
    },
    paint$3$textDirection: function(arg0, arg1, arg2) {
      return this.paint.call$3$textDirection(arg0, arg1, arg2);
    }
  };
  T.PaintDrawPath.prototype = {
    apply$1: function(canvas) {
      canvas.drawPath$2(this.path, this.paint);
    },
    toString$0: function(_) {
      var t1 = this.super$Object$toString(0);
      return t1;
    },
    paint$3$textDirection: function(arg0, arg1, arg2) {
      return this.paint.call$3$textDirection(arg0, arg1, arg2);
    }
  };
  T.PaintDrawShadow.prototype = {
    apply$1: function(canvas) {
      var _this = this;
      canvas.drawShadow$4(_this.path, _this.color, _this.elevation, _this.transparentOccluder);
    },
    toString$0: function(_) {
      var t1 = this.super$Object$toString(0);
      return t1;
    }
  };
  T.PaintDrawParagraph.prototype = {
    apply$1: function(canvas) {
      var t1 = this.paragraph;
      if (!t1._webOnlyIsLaidOut)
        return;
      canvas.drawParagraph$2(t1, this.offset);
    },
    toString$0: function(_) {
      var t1 = this.super$Object$toString(0);
      return t1;
    }
  };
  T.Subpath.prototype = {
    shift$1: function(offset) {
      var t3, t4, t5, result, _i, _this = this,
        t1 = _this.startX,
        t2 = offset._dx;
      if (typeof t1 !== "number")
        return t1.$add();
      if (typeof t2 !== "number")
        return H.iae(t2);
      t3 = _this.startY;
      t4 = offset._dy;
      if (typeof t3 !== "number")
        return t3.$add();
      if (typeof t4 !== "number")
        return H.iae(t4);
      t5 = H.setRuntimeTypeInfo([], [T.PathCommand]);
      result = new T.Subpath(t1 + t2, t3 + t4, t5);
      t3 = _this.currentX;
      if (typeof t3 !== "number")
        return t3.$add();
      result.currentX = t3 + t2;
      t2 = _this.currentY;
      if (typeof t2 !== "number")
        return t2.$add();
      result.currentY = t2 + t4;
      for (t1 = _this.commands, t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i)
        C.JSArray_methods.add$1(t5, t1[_i].shifted$1(offset));
      return result;
    },
    toString$0: function(_) {
      var t1 = this.super$Object$toString(0);
      return t1;
    }
  };
  T.PathCommand.prototype = {};
  T.MoveTo.prototype = {
    shifted$1: function(offset) {
      var t3, t4,
        t1 = this.x,
        t2 = offset._dx;
      if (typeof t1 !== "number")
        return t1.$add();
      if (typeof t2 !== "number")
        return H.iae(t2);
      t3 = this.y;
      t4 = offset._dy;
      if (typeof t3 !== "number")
        return t3.$add();
      if (typeof t4 !== "number")
        return H.iae(t4);
      return new T.MoveTo(t1 + t2, t3 + t4, 0);
    },
    toString$0: function(_) {
      var t1 = this.super$Object$toString(0);
      return t1;
    }
  };
  T.LineTo.prototype = {
    shifted$1: function(offset) {
      var t3, t4,
        t1 = this.x,
        t2 = offset._dx;
      if (typeof t1 !== "number")
        return t1.$add();
      if (typeof t2 !== "number")
        return H.iae(t2);
      t3 = this.y;
      t4 = offset._dy;
      if (typeof t3 !== "number")
        return t3.$add();
      if (typeof t4 !== "number")
        return H.iae(t4);
      return new T.LineTo(t1 + t2, t3 + t4, 1);
    },
    toString$0: function(_) {
      var t1 = this.super$Object$toString(0);
      return t1;
    }
  };
  T.Ellipse.prototype = {
    shifted$1: function(offset) {
      var t3, t4, _this = this,
        t1 = _this.x,
        t2 = offset._dx;
      if (typeof t1 !== "number")
        return t1.$add();
      if (typeof t2 !== "number")
        return H.iae(t2);
      t3 = _this.y;
      t4 = offset._dy;
      if (typeof t3 !== "number")
        return t3.$add();
      if (typeof t4 !== "number")
        return H.iae(t4);
      return new T.Ellipse(t1 + t2, t3 + t4, _this.radiusX, _this.radiusY, _this.rotation, _this.startAngle, _this.endAngle, false, 2);
    },
    toString$0: function(_) {
      var t1 = this.super$Object$toString(0);
      return t1;
    }
  };
  T.BezierCurveTo.prototype = {
    shifted$1: function(offset) {
      var t2, _this = this,
        t1 = offset._dx;
      if (typeof t1 !== "number")
        return H.iae(t1);
      t2 = offset._dy;
      if (typeof t2 !== "number")
        return H.iae(t2);
      return new T.BezierCurveTo(_this.x1 + t1, _this.y1 + t2, _this.x2 + t1, _this.y2 + t2, _this.x3 + t1, _this.y3 + t2, 5);
    },
    toString$0: function(_) {
      var t1 = this.super$Object$toString(0);
      return t1;
    }
  };
  T.RectCommand.prototype = {
    shifted$1: function(offset) {
      var t3, t4, _this = this,
        t1 = _this.x,
        t2 = offset._dx;
      if (typeof t1 !== "number")
        return t1.$add();
      if (typeof t2 !== "number")
        return H.iae(t2);
      t3 = _this.y;
      t4 = offset._dy;
      if (typeof t3 !== "number")
        return t3.$add();
      if (typeof t4 !== "number")
        return H.iae(t4);
      return new T.RectCommand(t1 + t2, t3 + t4, _this.width, _this.height, 6);
    },
    toString$0: function(_) {
      var t1 = this.super$Object$toString(0);
      return t1;
    }
  };
  T.RRectCommand.prototype = {
    shifted$1: function(offset) {
      return new T.RRectCommand(this.rrect.shift$1(offset), 7);
    },
    toString$0: function(_) {
      var t1 = this.super$Object$toString(0);
      return t1;
    }
  };
  T.CloseCommand.prototype = {
    shifted$1: function(offset) {
      return this;
    },
    toString$0: function(_) {
      var t1 = this.super$Object$toString(0);
      return t1;
    }
  };
  T._PaintBounds.prototype = {
    clipRect$1: function(rect) {
      var t1, t2, t3, t4, leftTop, t5, rightTop, leftBottom, rightBottom, t6, t7, t8, t9, t10, _this = this;
      if (!_this._currentMatrixIsIdentity) {
        t1 = _this._currentMatrix;
        t2 = rect.left;
        t3 = rect.top;
        t4 = new T.Vector30(new Float64Array(3));
        t4.setValues$3(t2, t3, 0);
        leftTop = t1.transform3$1(t4);
        t4 = _this._currentMatrix;
        t1 = rect.right;
        t5 = new T.Vector30(new Float64Array(3));
        t5.setValues$3(t1, t3, 0);
        rightTop = t4.transform3$1(t5);
        t5 = _this._currentMatrix;
        t4 = rect.bottom;
        t3 = new T.Vector30(new Float64Array(3));
        t3.setValues$3(t2, t4, 0);
        leftBottom = t5.transform3$1(t3);
        t3 = _this._currentMatrix;
        t2 = new T.Vector30(new Float64Array(3));
        t2.setValues$3(t1, t4, 0);
        rightBottom = t3.transform3$1(t2);
        t2 = leftTop._engine$_v3storage;
        t3 = t2[0];
        t4 = rightTop._engine$_v3storage;
        t1 = t4[0];
        t5 = Math.min(t3, t1);
        t6 = leftBottom._engine$_v3storage;
        t7 = t6[0];
        t5 = Math.min(t5, t7);
        t8 = rightBottom._engine$_v3storage;
        t9 = t8[0];
        t5 = Math.min(t5, t9);
        t2 = t2[1];
        t4 = t4[1];
        t10 = Math.min(t2, t4);
        t6 = t6[1];
        t10 = Math.min(t10, t6);
        t8 = t8[1];
        rect = new Q.Rect(t5, Math.min(t10, t8), Math.max(Math.max(Math.max(t3, t1), t7), t9), Math.max(Math.max(Math.max(t2, t4), t6), t8));
      }
      if (!_this._clipRectInitialized) {
        _this._currentClipLeft = rect.left;
        _this._currentClipTop = rect.top;
        _this._currentClipRight = rect.right;
        _this._currentClipBottom = rect.bottom;
        _this._clipRectInitialized = true;
      } else {
        t1 = rect.left;
        t2 = _this._currentClipLeft;
        if (typeof t1 !== "number")
          return t1.$gt();
        if (typeof t2 !== "number")
          return H.iae(t2);
        if (t1 > t2)
          _this._currentClipLeft = t1;
        t1 = rect.top;
        t2 = _this._currentClipTop;
        if (typeof t1 !== "number")
          return t1.$gt();
        if (typeof t2 !== "number")
          return H.iae(t2);
        if (t1 > t2)
          _this._currentClipTop = t1;
        t1 = rect.right;
        t2 = _this._currentClipRight;
        if (typeof t1 !== "number")
          return t1.$lt();
        if (typeof t2 !== "number")
          return H.iae(t2);
        if (t1 < t2)
          _this._currentClipRight = t1;
        t1 = rect.bottom;
        t2 = _this._currentClipBottom;
        if (typeof t1 !== "number")
          return t1.$lt();
        if (typeof t2 !== "number")
          return H.iae(t2);
        if (t1 < t2)
          _this._currentClipBottom = t1;
      }
    },
    grow$1: function(r) {
      this.growLTRB$4(r.left, r.top, r.right, r.bottom);
    },
    growLTRB$4: function(left, $top, right, bottom) {
      var transformedRect, transformedPointLeft, transformedPointTop, transformedPointRight, transformedPointBottom, t1, t2, t3, t4, _this = this;
      if (left == right || $top == bottom)
        return;
      if (!_this._currentMatrixIsIdentity) {
        transformedRect = T.localClipToGlobalClip(bottom, left, right, $top, _this._currentMatrix);
        transformedPointLeft = transformedRect.left;
        transformedPointTop = transformedRect.top;
        transformedPointRight = transformedRect.right;
        transformedPointBottom = transformedRect.bottom;
      } else {
        transformedPointBottom = bottom;
        transformedPointRight = right;
        transformedPointTop = $top;
        transformedPointLeft = left;
      }
      if (_this._clipRectInitialized) {
        t1 = _this._currentClipRight;
        if (typeof transformedPointLeft !== "number")
          return transformedPointLeft.$gt();
        if (typeof t1 !== "number")
          return H.iae(t1);
        if (transformedPointLeft > t1)
          return;
        t2 = _this._currentClipLeft;
        if (typeof transformedPointRight !== "number")
          return transformedPointRight.$lt();
        if (typeof t2 !== "number")
          return H.iae(t2);
        if (transformedPointRight < t2)
          return;
        t3 = _this._currentClipBottom;
        if (typeof transformedPointTop !== "number")
          return transformedPointTop.$gt();
        if (typeof t3 !== "number")
          return H.iae(t3);
        if (transformedPointTop > t3)
          return;
        t4 = _this._currentClipTop;
        if (typeof transformedPointBottom !== "number")
          return transformedPointBottom.$lt();
        if (typeof t4 !== "number")
          return H.iae(t4);
        if (transformedPointBottom < t4)
          return;
        if (transformedPointLeft < t2)
          transformedPointLeft = t2;
        if (transformedPointRight > t1)
          transformedPointRight = t1;
        if (transformedPointTop < t4)
          transformedPointTop = t4;
        if (transformedPointBottom > t3)
          transformedPointBottom = t3;
      }
      if (_this._didPaintInsideClipArea) {
        _this._engine$_left = Math.min(Math.min(H.checkNum(_this._engine$_left), H.checkNum(transformedPointLeft)), H.checkNum(transformedPointRight));
        _this._engine$_right = Math.max(Math.max(H.checkNum(_this._engine$_right), H.checkNum(transformedPointLeft)), H.checkNum(transformedPointRight));
        _this._engine$_top = Math.min(Math.min(H.checkNum(_this._engine$_top), H.checkNum(transformedPointTop)), H.checkNum(transformedPointBottom));
        _this._engine$_bottom = Math.max(Math.max(H.checkNum(_this._engine$_bottom), H.checkNum(transformedPointTop)), H.checkNum(transformedPointBottom));
      } else {
        _this._engine$_left = Math.min(H.checkNum(transformedPointLeft), H.checkNum(transformedPointRight));
        _this._engine$_right = Math.max(H.checkNum(transformedPointLeft), H.checkNum(transformedPointRight));
        _this._engine$_top = Math.min(H.checkNum(transformedPointTop), H.checkNum(transformedPointBottom));
        _this._engine$_bottom = Math.max(H.checkNum(transformedPointTop), H.checkNum(transformedPointBottom));
      }
      _this._didPaintInsideClipArea = true;
    },
    saveTransformsAndClip$0: function() {
      var t1, t2, t3, _this = this;
      if (_this._clipStack == null)
        _this.set$_clipStack(H.setRuntimeTypeInfo([], [Q.Rect]));
      if (_this._transforms == null)
        _this.set$_transforms(H.setRuntimeTypeInfo([], [T.Matrix40]));
      t1 = _this._transforms;
      t2 = _this._currentMatrix;
      if (t2 == null)
        t2 = null;
      else {
        t3 = new T.Matrix40(new Float64Array(16));
        t3.setFrom$1(t2);
        t2 = t3;
      }
      (t1 && C.JSArray_methods).add$1(t1, t2);
      t2 = _this._clipStack;
      t1 = _this._clipRectInitialized ? new Q.Rect(_this._currentClipLeft, _this._currentClipTop, _this._currentClipRight, _this._currentClipBottom) : null;
      (t2 && C.JSArray_methods).add$1(t2, t1);
    },
    computeBounds$0: function() {
      var t1, maxLeft, maxRight, maxTop, maxBottom, t2, left, right, $top, bottom, _this = this;
      if (!_this._didPaintInsideClipArea)
        return C.Rect_0_0_0_0;
      t1 = _this.maxPaintBounds;
      maxLeft = t1.left;
      maxLeft.toString;
      if (isNaN(maxLeft))
        maxLeft = -1 / 0;
      maxRight = t1.right;
      maxRight.toString;
      if (isNaN(maxRight))
        maxRight = 1 / 0;
      maxTop = t1.top;
      maxTop.toString;
      if (isNaN(maxTop))
        maxTop = -1 / 0;
      maxBottom = t1.bottom;
      maxBottom.toString;
      if (isNaN(maxBottom))
        maxBottom = 1 / 0;
      t1 = _this._engine$_left;
      t2 = _this._engine$_right;
      left = Math.min(H.checkNum(t1), H.checkNum(t2));
      right = Math.max(H.checkNum(t1), H.checkNum(t2));
      t2 = _this._engine$_top;
      t1 = _this._engine$_bottom;
      $top = Math.min(H.checkNum(t2), H.checkNum(t1));
      bottom = Math.max(H.checkNum(t2), H.checkNum(t1));
      if (typeof maxLeft !== "number")
        return H.iae(maxLeft);
      if (!(right < maxLeft)) {
        if (typeof maxTop !== "number")
          return H.iae(maxTop);
        t1 = bottom < maxTop;
      } else
        t1 = true;
      if (t1)
        return C.Rect_0_0_0_0;
      return new Q.Rect(Math.max(left, maxLeft), Math.max($top, H.checkNum(maxTop)), Math.min(right, H.checkNum(maxRight)), Math.min(bottom, H.checkNum(maxBottom)));
    },
    toString$0: function(_) {
      var t1 = this.super$Object$toString(0);
      return t1;
    },
    set$_transforms: function(_transforms) {
      this._transforms = H.assertSubtype(_transforms, "$isList", [T.Matrix40], "$asList");
    },
    set$_clipStack: function(_clipStack) {
      this._clipStack = H.assertSubtype(_clipStack, "$isList", [Q.Rect], "$asList");
    }
  };
  T._CheckableKind.prototype = {
    toString$0: function(_) {
      return this._engine$_name;
    }
  };
  T.Checkable.prototype = {
    update$0: function(_) {
      var t2,
        t1 = this.semanticsObject;
      if ((t1._dirtyFields & 1) !== 0) {
        switch (this._engine$_kind) {
          case C._CheckableKind_0:
            t1.setAriaRole$2("checkbox", true);
            break;
          case C._CheckableKind_1:
            t1.setAriaRole$2("radio", true);
            break;
        }
        t2 = t1._engine$_flags;
        if (typeof t2 !== "number")
          return t2.$and();
        t2 = (t2 & 2) !== 0 ? "true" : "false";
        t1.element.setAttribute("aria-checked", t2);
      }
    },
    dispose$0: function() {
      switch (this._engine$_kind) {
        case C._CheckableKind_0:
          this.semanticsObject.setAriaRole$2("checkbox", false);
          break;
        case C._CheckableKind_1:
          this.semanticsObject.setAriaRole$2("radio", false);
          break;
      }
    }
  };
  T.Incrementable.prototype = {
    Incrementable$1: function(semanticsObject) {
      var _this = this,
        t1 = _this._engine$_element;
      semanticsObject.element.appendChild(t1);
      t1.type = "range";
      t1.setAttribute("role", "slider");
      C.InputElement_methods.addEventListener$2(t1, "change", new T.Incrementable_closure(_this, semanticsObject));
      _this.set$_gestureModeListener(new T.Incrementable_closure0(_this));
      C.JSArray_methods.add$1(semanticsObject.owner._gestureModeListeners, H.functionTypeCheck(_this._gestureModeListener, {func: 1, ret: -1, args: [T.GestureMode]}));
    },
    update$0: function(_) {
      var _this = this;
      switch (_this.semanticsObject.owner._gestureMode) {
        case C.GestureMode_1:
          _this._enableBrowserGestureHandling$0();
          _this._updateInputValues$0();
          break;
        case C.GestureMode_0:
          _this._disableBrowserGestureHandling$0();
          break;
      }
    },
    _enableBrowserGestureHandling$0: function() {
      var t1 = this._engine$_element;
      if (!H.boolConversionCheck(t1.disabled))
        return;
      t1.disabled = false;
    },
    _updateInputValues$0: function() {
      var t1, updateNeeded, surrogateTextValue, t2, surrogateMaxTextValue, surrogateMinTextValue, _this = this;
      if (!_this._pendingResync) {
        t1 = _this.semanticsObject._dirtyFields;
        updateNeeded = (t1 & 4096) !== 0 || (t1 & 8192) !== 0 || (t1 & 16384) !== 0;
      } else
        updateNeeded = true;
      if (!updateNeeded)
        return;
      _this._pendingResync = false;
      surrogateTextValue = "" + _this._currentSurrogateValue;
      t1 = _this._engine$_element;
      t1.value = surrogateTextValue;
      t1.setAttribute("aria-valuenow", surrogateTextValue);
      t2 = _this.semanticsObject;
      t1.setAttribute("aria-valuetext", t2._engine$_value);
      surrogateMaxTextValue = t2._engine$_increasedValue != null ? "" + (_this._currentSurrogateValue + 1) : surrogateTextValue;
      t1.max = surrogateMaxTextValue;
      t1.setAttribute("aria-valuemax", surrogateMaxTextValue);
      surrogateMinTextValue = t2._engine$_decreasedValue != null ? "" + (_this._currentSurrogateValue - 1) : surrogateTextValue;
      t1.min = surrogateMinTextValue;
      t1.setAttribute("aria-valuemin", surrogateMinTextValue);
    },
    _disableBrowserGestureHandling$0: function() {
      var t1 = this._engine$_element;
      if (H.boolConversionCheck(t1.disabled))
        return;
      t1.disabled = true;
    },
    dispose$0: function() {
      var t1, _this = this;
      C.JSArray_methods.remove$1(_this.semanticsObject.owner._gestureModeListeners, H.functionTypeCheck(_this._gestureModeListener, {func: 1, ret: -1, args: [T.GestureMode]}));
      _this.set$_gestureModeListener(null);
      _this._disableBrowserGestureHandling$0();
      t1 = _this._engine$_element;
      (t1 && C.InputElement_methods).remove$0(t1);
    },
    set$_gestureModeListener: function(_gestureModeListener) {
      this._gestureModeListener = H.functionTypeCheck(_gestureModeListener, {func: 1, ret: -1, args: [T.GestureMode]});
    }
  };
  T.Incrementable_closure.prototype = {
    call$1: function(_) {
      var t1, t2, newInputValue, _null = null;
      H.interceptedTypeCheck(_, "$isEvent");
      t1 = this.$this;
      t2 = t1._engine$_element;
      if (H.boolConversionCheck(t2.disabled))
        return;
      t1._pendingResync = true;
      newInputValue = P.int_parse(t2.value, _null, _null);
      t2 = t1._currentSurrogateValue;
      if (typeof newInputValue !== "number")
        return newInputValue.$gt();
      if (newInputValue > t2) {
        t1._currentSurrogateValue = t2 + 1;
        $.$get$window().onSemanticsAction$3(this.semanticsObject.id, C.SemanticsAction_64, _null);
      } else if (newInputValue < t2) {
        t1._currentSurrogateValue = t2 - 1;
        $.$get$window().onSemanticsAction$3(this.semanticsObject.id, C.SemanticsAction_128, _null);
      }
    },
    $signature: 2
  };
  T.Incrementable_closure0.prototype = {
    call$1: function(mode) {
      H.interceptedTypeCheck(mode, "$isGestureMode");
      this.$this.update$0(0);
    },
    $signature: 66
  };
  T.LabelAndValue.prototype = {
    update$0: function(_) {
      var hasLabel, t3, shouldDisplayValue, t4, t5, t6, _this = this,
        t1 = _this.semanticsObject,
        t2 = t1._engine$_value,
        hasValue = t2 != null && t2.length !== 0;
      t2 = t1._engine$_label;
      hasLabel = t2 != null && t2.length !== 0;
      if (hasValue) {
        t3 = t1._engine$_actions;
        if (typeof t3 !== "number")
          return t3.$and();
        if (!((t3 & 64) !== 0 || (t3 & 128) !== 0)) {
          t3 = t1._engine$_flags;
          if (typeof t3 !== "number")
            return t3.$and();
          t3 = (t3 & 16) === 0;
          shouldDisplayValue = t3;
        } else
          shouldDisplayValue = false;
      } else
        shouldDisplayValue = false;
      if (!hasLabel && !shouldDisplayValue) {
        _this._cleanUpDom$0();
        return;
      }
      if (hasLabel) {
        t2 = H.S(t2);
        if (shouldDisplayValue)
          t2 += " ";
      } else
        t2 = "";
      if (shouldDisplayValue)
        t2 += H.S(t1._engine$_value);
      t3 = t1.element;
      t2 = t2.charCodeAt(0) == 0 ? t2 : t2;
      t3.setAttribute("aria-label", t2);
      if (_this._auxiliaryValueElement == null) {
        _this._auxiliaryValueElement = H.interceptedTypeCheck(W._ElementFactoryProvider_createElement_tag("flt-semantics-value", null), "$isElement0");
        t4 = t1._engine$_childrenInTraversalOrder;
        if (t4 != null && !C.NativeInt32List_methods.get$isEmpty(t4)) {
          t4 = _this._auxiliaryValueElement.style;
          t4.position = "absolute";
          t4.top = "0";
          t4.left = "0";
          t5 = t1._engine$_rect;
          t6 = t5.right;
          t5 = t5.left;
          if (typeof t6 !== "number")
            return t6.$sub();
          if (typeof t5 !== "number")
            return H.iae(t5);
          t5 = H.S(t6 - t5) + "px";
          t4.width = t5;
          t1 = t1._engine$_rect;
          t5 = t1.bottom;
          t1 = t1.top;
          if (typeof t5 !== "number")
            return t5.$sub();
          if (typeof t1 !== "number")
            return H.iae(t1);
          t1 = H.S(t5 - t1) + "px";
          t4.height = t1;
        }
        t1 = _this._auxiliaryValueElement;
        t4 = t1.style;
        t4.fontSize = "6px";
        t3.appendChild(t1);
      }
      _this._auxiliaryValueElement.textContent = t2;
    },
    _cleanUpDom$0: function() {
      var t1 = this._auxiliaryValueElement;
      if (t1 != null) {
        J.remove$0$ax(t1);
        this._auxiliaryValueElement = null;
      }
      this.semanticsObject.element.removeAttribute("aria-label");
    },
    dispose$0: function() {
      this._cleanUpDom$0();
    }
  };
  T.Scrollable.prototype = {
    _recomputeScrollPosition$0: function() {
      var t1, t2, t3, semanticsId, _this = this, _null = null;
      if (_this.get$_domScrollPosition() !== _this._effectiveNeutralScrollPosition) {
        t1 = _this.semanticsObject;
        if (!t1.owner.shouldAcceptBrowserGesture$1("scroll"))
          return;
        t2 = _this.get$_domScrollPosition();
        t3 = _this._effectiveNeutralScrollPosition;
        _this._neutralizeDomScrollPosition$0();
        t1.recomputePositionAndSize$0();
        semanticsId = t1.id;
        if (t2 > t3) {
          t1 = t1._engine$_actions;
          if (typeof t1 !== "number")
            return t1.$and();
          if ((t1 & 32) !== 0 || (t1 & 16) !== 0)
            $.$get$window().onSemanticsAction$3(semanticsId, C.SemanticsAction_16, _null);
          else
            $.$get$window().onSemanticsAction$3(semanticsId, C.SemanticsAction_4, _null);
        } else {
          t1 = t1._engine$_actions;
          if (typeof t1 !== "number")
            return t1.$and();
          if ((t1 & 32) !== 0 || (t1 & 16) !== 0)
            $.$get$window().onSemanticsAction$3(semanticsId, C.SemanticsAction_32, _null);
          else
            $.$get$window().onSemanticsAction$3(semanticsId, C.SemanticsAction_8, _null);
        }
      }
    },
    update$0: function(_) {
      var t1, t2, t3, _this = this;
      if (_this._scrollListener == null) {
        t1 = _this.semanticsObject;
        t2 = t1.element;
        t3 = t2.style;
        C.CssStyleDeclaration_methods._setPropertyHelper$3(t3, (t3 && C.CssStyleDeclaration_methods)._browserPropertyName$1(t3, "touch-action"), "none", "");
        _this._gestureModeDidChange$0();
        t1 = t1.owner;
        t3 = H.functionTypeCheck(new T.Scrollable_update_closure(_this), {func: 1, ret: -1});
        C.JSArray_methods.add$1(t1._oneTimePostUpdateCallbacks, t3);
        _this.set$_gestureModeListener(new T.Scrollable_update_closure0(_this));
        C.JSArray_methods.add$1(t1._gestureModeListeners, H.functionTypeCheck(_this._gestureModeListener, {func: 1, ret: -1, args: [T.GestureMode]}));
        _this.set$_scrollListener(new T.Scrollable_update_closure1(_this));
        J.addEventListener$2$x(t2, "scroll", _this._scrollListener);
      }
    },
    get$_domScrollPosition: function() {
      var t1 = this.semanticsObject,
        t2 = t1._engine$_actions;
      if (typeof t2 !== "number")
        return t2.$and();
      t2 = (t2 & 32) !== 0 || (t2 & 16) !== 0;
      t1 = t1.element;
      if (t2)
        return C.JSNumber_methods.round$0(t1.scrollTop);
      else
        return C.JSNumber_methods.round$0(t1.scrollLeft);
    },
    _neutralizeDomScrollPosition$0: function() {
      var t1 = this.semanticsObject,
        element = t1.element,
        t2 = t1._engine$_actions;
      if (typeof t2 !== "number")
        return t2.$and();
      if ((t2 & 32) !== 0 || (t2 & 16) !== 0) {
        element.scrollTop = 10;
        t1.verticalContainerAdjustment = this._effectiveNeutralScrollPosition = C.JSNumber_methods.round$0(element.scrollTop);
        t1.horizontalContainerAdjustment = 0;
      } else {
        element.scrollLeft = 10;
        t2 = C.JSNumber_methods.round$0(element.scrollLeft);
        this._effectiveNeutralScrollPosition = t2;
        t1.verticalContainerAdjustment = 0;
        t1.horizontalContainerAdjustment = t2;
      }
    },
    _gestureModeDidChange$0: function() {
      var t2, t3,
        _s10_ = "overflow-y",
        _s10_0 = "overflow-x",
        t1 = this.semanticsObject,
        element = t1.element;
      switch (t1.owner._gestureMode) {
        case C.GestureMode_1:
          t1 = t1._engine$_actions;
          if (typeof t1 !== "number")
            return t1.$and();
          t1 = (t1 & 32) !== 0 || (t1 & 16) !== 0;
          t2 = element.style;
          t3 = t2 && C.CssStyleDeclaration_methods;
          if (t1)
            C.CssStyleDeclaration_methods._setPropertyHelper$3(t2, t3._browserPropertyName$1(t2, _s10_), "scroll", "");
          else
            C.CssStyleDeclaration_methods._setPropertyHelper$3(t2, t3._browserPropertyName$1(t2, _s10_0), "scroll", "");
          break;
        case C.GestureMode_0:
          t1 = t1._engine$_actions;
          if (typeof t1 !== "number")
            return t1.$and();
          t1 = (t1 & 32) !== 0 || (t1 & 16) !== 0;
          t2 = element.style;
          t3 = t2 && C.CssStyleDeclaration_methods;
          if (t1)
            C.CssStyleDeclaration_methods._setPropertyHelper$3(t2, t3._browserPropertyName$1(t2, _s10_), "hidden", "");
          else
            C.CssStyleDeclaration_methods._setPropertyHelper$3(t2, t3._browserPropertyName$1(t2, _s10_0), "hidden", "");
          break;
      }
    },
    dispose$0: function() {
      var t3, _this = this,
        t1 = _this.semanticsObject,
        t2 = t1.element,
        style = t2.style;
      style.removeProperty("overflowY");
      style.removeProperty("overflowX");
      style.removeProperty("touch-action");
      t3 = _this._scrollListener;
      if (t3 != null)
        J.removeEventListener$2$x(t2, "scroll", t3);
      C.JSArray_methods.remove$1(t1.owner._gestureModeListeners, H.functionTypeCheck(_this._gestureModeListener, {func: 1, ret: -1, args: [T.GestureMode]}));
      _this.set$_gestureModeListener(null);
    },
    set$_gestureModeListener: function(_gestureModeListener) {
      this._gestureModeListener = H.functionTypeCheck(_gestureModeListener, {func: 1, ret: -1, args: [T.GestureMode]});
    },
    set$_scrollListener: function(_scrollListener) {
      this._scrollListener = H.functionTypeCheck(_scrollListener, {func: 1, args: [W.Event]});
    }
  };
  T.Scrollable_update_closure.prototype = {
    call$0: function() {
      this.$this._neutralizeDomScrollPosition$0();
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 0
  };
  T.Scrollable_update_closure0.prototype = {
    call$1: function(_) {
      H.interceptedTypeCheck(_, "$isGestureMode");
      this.$this._gestureModeDidChange$0();
    },
    $signature: 66
  };
  T.Scrollable_update_closure1.prototype = {
    call$1: function(_) {
      H.interceptedTypeCheck(_, "$isEvent");
      this.$this._recomputeScrollPosition$0();
    },
    $signature: 2
  };
  T.SemanticsUpdate.prototype = {$isSemanticsUpdate0: 1};
  T.SemanticsNodeUpdate.prototype = {};
  T.Role.prototype = {
    toString$0: function(_) {
      return this._engine$_name;
    }
  };
  T.closure.prototype = {
    call$1: function(object) {
      return T.Incrementable$(object);
    },
    $signature: 187
  };
  T.closure0.prototype = {
    call$1: function(object) {
      return new T.Scrollable(object);
    },
    $signature: 188
  };
  T.closure1.prototype = {
    call$1: function(object) {
      return new T.LabelAndValue(object);
    },
    $signature: 189
  };
  T.closure2.prototype = {
    call$1: function(object) {
      return new T.Tappable(object);
    },
    $signature: 190
  };
  T.closure3.prototype = {
    call$1: function(object) {
      var editableDomElement,
        t1 = new T.TextField(object),
        t2 = object._engine$_flags;
      if (typeof t2 !== "number")
        return t2.$and();
      editableDomElement = (t2 & 524288) !== 0 ? document.createElement("textarea") : W.InputElement_InputElement();
      t2 = new T.PersistentTextEditingElement(H.setRuntimeTypeInfo([], [[P.StreamSubscription,,]]));
      t2.domElement = editableDomElement;
      t1.persistentTextEditingElement = t2;
      t1._setupDomElement$0();
      return t1;
    },
    $signature: 191
  };
  T.closure4.prototype = {
    call$1: function(object) {
      var t1 = new T.Checkable(object),
        t2 = object._engine$_flags;
      if (typeof t2 !== "number")
        return t2.$and();
      if ((t2 & 256) !== 0)
        t1._engine$_kind = C._CheckableKind_1;
      else
        t1._engine$_kind = C._CheckableKind_0;
      return t1;
    },
    $signature: 192
  };
  T.RoleManager.prototype = {};
  T.SemanticsObject.prototype = {
    getOrCreateChildContainer$0: function() {
      var t1, t2, _this = this;
      if (_this._childContainerElement == null) {
        t1 = H.interceptedTypeCheck(W._ElementFactoryProvider_createElement_tag("flt-semantics-container", null), "$isElement0");
        _this._childContainerElement = t1;
        t2 = t1.style;
        t2.position = "absolute";
        _this.element.appendChild(t1);
      }
      return _this._childContainerElement;
    },
    setAriaRole$2: function(ariaRoleName, condition) {
      var t1;
      if (condition)
        this.element.setAttribute("role", ariaRoleName);
      else {
        t1 = this.element;
        if (t1.getAttribute("role") === ariaRoleName)
          t1.removeAttribute("role");
      }
    },
    _updateRole$2: function(role, enabled) {
      var t1 = this._roleManagers,
        manager = t1.$index(0, role);
      if (enabled) {
        if (manager == null) {
          manager = $.$get$_roleFactories().$index(0, role).call$1(this);
          t1.$indexSet(0, role, manager);
        }
        manager.update$0(0);
      } else if (manager != null) {
        manager.dispose$0();
        t1.remove$1(0, role);
      }
    },
    recomputePositionAndSize$0: function() {
      var containerElement, effectiveTransformIsIdentity, hasZeroRectOffset, t5, hasIdentityTransform, left, effectiveTransform, _this = this,
        _s16_ = "transform-origin",
        _s9_ = "transform",
        t1 = _this.element,
        t2 = t1.style,
        t3 = _this._engine$_rect,
        t4 = t3.right;
      t3 = t3.left;
      if (typeof t4 !== "number")
        return t4.$sub();
      if (typeof t3 !== "number")
        return H.iae(t3);
      t3 = H.S(t4 - t3) + "px";
      t2.width = t3;
      t3 = _this._engine$_rect;
      t4 = t3.bottom;
      t3 = t3.top;
      if (typeof t4 !== "number")
        return t4.$sub();
      if (typeof t3 !== "number")
        return H.iae(t3);
      t3 = H.S(t4 - t3) + "px";
      t2.height = t3;
      t2 = _this._engine$_childrenInTraversalOrder;
      containerElement = t2 != null && !C.NativeInt32List_methods.get$isEmpty(t2) ? _this.getOrCreateChildContainer$0() : null;
      t2 = _this._engine$_rect;
      t3 = t2.top;
      effectiveTransformIsIdentity = t3 === 0;
      hasZeroRectOffset = effectiveTransformIsIdentity && t2.left === 0;
      t4 = _this._engine$_transform;
      t5 = t4 == null;
      if (!t5)
        hasIdentityTransform = t4[0] === 1 && t4[1] === 0 && t4[2] === 0 && t4[3] === 0 && t4[4] === 0 && t4[5] === 1 && t4[6] === 0 && t4[7] === 0 && t4[8] === 0 && t4[9] === 0 && t4[10] === 1 && t4[11] === 0 && t4[12] === 0 && t4[13] === 0 && t4[14] === 0 && t4[15] === 1;
      else
        hasIdentityTransform = true;
      if (hasZeroRectOffset && hasIdentityTransform && _this.verticalContainerAdjustment === 0 && _this.horizontalContainerAdjustment === 0) {
        t1 = t1.style;
        t1.removeProperty(_s16_);
        t1.removeProperty(_s9_);
        if (containerElement != null) {
          t1 = containerElement.style;
          t1.removeProperty(_s16_);
          t1.removeProperty(_s9_);
        }
        return;
      }
      if (!hasZeroRectOffset)
        if (t5) {
          left = t2.left;
          effectiveTransform = T.Matrix4_Matrix4$translationValues(left, t3, 0);
          effectiveTransformIsIdentity = left === 0 && effectiveTransformIsIdentity;
        } else {
          effectiveTransform = new T.Matrix40(new Float64Array(16));
          effectiveTransform.setFrom$1(new T.Matrix40(t4));
          t2 = _this._engine$_rect;
          effectiveTransform.translate$3(0, t2.left, t2.top, 0);
          effectiveTransformIsIdentity = effectiveTransform.isIdentity$0(0);
        }
      else if (!hasIdentityTransform) {
        effectiveTransform = new T.Matrix40(t4);
        effectiveTransformIsIdentity = false;
      } else {
        effectiveTransform = null;
        effectiveTransformIsIdentity = true;
      }
      t1 = t1.style;
      if (!effectiveTransformIsIdentity) {
        C.CssStyleDeclaration_methods._setPropertyHelper$3(t1, (t1 && C.CssStyleDeclaration_methods)._browserPropertyName$1(t1, _s16_), "0 0 0", "");
        t2 = T.float64ListToCssTransform(effectiveTransform._engine$_m4storage);
        C.CssStyleDeclaration_methods._setPropertyHelper$3(t1, C.CssStyleDeclaration_methods._browserPropertyName$1(t1, _s9_), t2, "");
      } else {
        t1.removeProperty(_s16_);
        t1.removeProperty(_s9_);
      }
      if (containerElement != null) {
        t1 = !hasZeroRectOffset || _this.verticalContainerAdjustment !== 0 || _this.horizontalContainerAdjustment !== 0;
        t2 = containerElement.style;
        if (t1) {
          t1 = _this._engine$_rect;
          t3 = t1.left;
          if (typeof t3 !== "number")
            return t3.$negate();
          t4 = _this.horizontalContainerAdjustment;
          t1 = t1.top;
          if (typeof t1 !== "number")
            return t1.$negate();
          t5 = _this.verticalContainerAdjustment;
          C.CssStyleDeclaration_methods._setPropertyHelper$3(t2, (t2 && C.CssStyleDeclaration_methods)._browserPropertyName$1(t2, _s16_), "0 0 0", "");
          t5 = "translate(" + H.S(-t3 + t4) + "px, " + H.S(-t1 + t5) + "px)";
          C.CssStyleDeclaration_methods._setPropertyHelper$3(t2, C.CssStyleDeclaration_methods._browserPropertyName$1(t2, _s9_), t5, "");
        } else {
          t2.removeProperty(_s16_);
          t2.removeProperty(_s9_);
        }
      }
    },
    _updateChildrenInTraversalOrder$0: function() {
      var t2, t3, t4, _i, object, containerElement, id, intersectionIndicesNew, intersectionIndicesOld, minLength, newIndex, oldIndex, longestSequence, stationaryIds, i, refNode, childId, _this = this,
        t1 = _this._engine$_childrenInTraversalOrder;
      if (t1 == null || t1.length === 0) {
        t2 = _this._previousChildrenInTraversalOrder;
        if (t2 == null || t2.length === 0) {
          _this._previousChildrenInTraversalOrder = t1;
          return;
        }
        for (t1 = t2.length, t3 = _this.owner, t4 = t3._semanticsTree, _i = 0; _i < t1; ++_i) {
          object = t4.$index(0, t2[_i]);
          C.JSArray_methods.add$1(t3._detachments, object);
        }
        _this._previousChildrenInTraversalOrder = null;
        J.remove$0$ax(_this._childContainerElement);
        _this._childContainerElement = null;
        _this._previousChildrenInTraversalOrder = _this._engine$_childrenInTraversalOrder;
        return;
      }
      containerElement = _this.getOrCreateChildContainer$0();
      t1 = _this._previousChildrenInTraversalOrder;
      if (t1 == null || t1.length === 0) {
        t1 = _this._previousChildrenInTraversalOrder = _this._engine$_childrenInTraversalOrder;
        for (t2 = t1.length, t3 = _this.owner, t4 = t3._semanticsTree, _i = 0; _i < t2; ++_i) {
          id = t1[_i];
          object = t4.$index(0, id);
          if (object == null) {
            object = T.SemanticsObject$(id, t3);
            t4.$indexSet(0, id, object);
          }
          containerElement.appendChild(object.element);
          object._engine$_parent = _this;
          t3._attachments.$indexSet(0, object.id, _this);
        }
        _this._previousChildrenInTraversalOrder = _this._engine$_childrenInTraversalOrder;
        return;
      }
      t1 = [P.int];
      intersectionIndicesNew = H.setRuntimeTypeInfo([], t1);
      intersectionIndicesOld = H.setRuntimeTypeInfo([], t1);
      minLength = Math.min(_this._previousChildrenInTraversalOrder.length, _this._engine$_childrenInTraversalOrder.length);
      newIndex = 0;
      while (true) {
        if (newIndex < minLength) {
          t2 = _this._previousChildrenInTraversalOrder;
          if (newIndex >= t2.length)
            return H.ioore(t2, newIndex);
          t2 = t2[newIndex];
          t3 = _this._engine$_childrenInTraversalOrder;
          if (newIndex >= t3.length)
            return H.ioore(t3, newIndex);
          t3 = t2 === t3[newIndex];
          t2 = t3;
        } else
          t2 = false;
        if (!t2)
          break;
        C.JSArray_methods.add$1(intersectionIndicesNew, newIndex);
        C.JSArray_methods.add$1(intersectionIndicesOld, newIndex);
        ++newIndex;
      }
      t2 = _this._previousChildrenInTraversalOrder.length;
      t3 = _this._engine$_childrenInTraversalOrder.length;
      if (t2 === t3 && newIndex === t3)
        return;
      for (; t2 = _this._engine$_childrenInTraversalOrder, newIndex < t2.length;) {
        for (t3 = _this._previousChildrenInTraversalOrder, t4 = t3.length, oldIndex = 0; oldIndex < t4; ++oldIndex)
          if (t3[oldIndex] === t2[newIndex]) {
            C.JSArray_methods.add$1(intersectionIndicesNew, newIndex);
            C.JSArray_methods.add$1(intersectionIndicesOld, oldIndex);
            break;
          }
        ++newIndex;
      }
      longestSequence = T.longestIncreasingSubsequence(intersectionIndicesOld);
      stationaryIds = H.setRuntimeTypeInfo([], t1);
      for (t1 = longestSequence.length, i = 0; i < t1; ++i) {
        t2 = _this._previousChildrenInTraversalOrder;
        t3 = C.JSArray_methods.$index(intersectionIndicesOld, longestSequence[i]);
        if (t3 >= t2.length)
          return H.ioore(t2, t3);
        C.JSArray_methods.add$1(stationaryIds, t2[t3]);
      }
      for (t1 = _this.owner, t2 = t1._semanticsTree, i = 0; i < _this._previousChildrenInTraversalOrder.length; ++i)
        if (!C.JSArray_methods.contains$1(intersectionIndicesOld, i)) {
          t3 = _this._previousChildrenInTraversalOrder;
          if (i >= t3.length)
            return H.ioore(t3, i);
          object = t2.$index(0, t3[i]);
          C.JSArray_methods.add$1(t1._detachments, object);
        }
      for (i = _this._engine$_childrenInTraversalOrder.length - 1, refNode = null; i >= 0; --i) {
        t3 = _this._engine$_childrenInTraversalOrder;
        if (i >= t3.length)
          return H.ioore(t3, i);
        childId = t3[i];
        object = t2.$index(0, childId);
        if (object == null) {
          object = T.SemanticsObject$(childId, t1);
          t2.$indexSet(0, childId, object);
        }
        if (!C.JSArray_methods.contains$1(stationaryIds, childId)) {
          t3 = object.element;
          if (refNode == null)
            containerElement.appendChild(t3);
          else
            containerElement.insertBefore(t3, refNode);
          object._engine$_parent = _this;
          t1._attachments.$indexSet(0, object.id, _this);
        }
        refNode = object.element;
      }
      _this._previousChildrenInTraversalOrder = _this._engine$_childrenInTraversalOrder;
    },
    toString$0: function(_) {
      var t1 = this.super$Object$toString(0);
      return t1;
    }
  };
  T.AccessibilityMode.prototype = {
    toString$0: function(_) {
      return this._engine$_name;
    }
  };
  T.GestureMode.prototype = {
    toString$0: function(_) {
      return this._engine$_name;
    }
  };
  T.EngineSemanticsOwner.prototype = {
    EngineSemanticsOwner$_$0: function() {
      C.JSArray_methods.add$1($._hotRestartListeners, new T.EngineSemanticsOwner$__closure(this));
    },
    _finalizeTree$0: function() {
      var t1, t2, t3, _i, object, t4, t5, _this = this;
      for (t1 = _this._detachments, t2 = t1.length, t3 = _this._semanticsTree, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
        object = t1[_i];
        t4 = _this._attachments;
        t5 = object.id;
        if (t4.$index(0, t5) == null) {
          t3.remove$1(0, t5);
          object._engine$_parent = null;
          t4 = object.element;
          t5 = t4.parentNode;
          if (t5 != null)
            t5.removeChild(t4);
        }
      }
      t1 = T.SemanticsObject;
      _this.set$_detachments(H.setRuntimeTypeInfo([], [t1]));
      _this.set$_attachments(P.LinkedHashMap_LinkedHashMap$_empty(P.int, t1));
      t1 = _this._oneTimePostUpdateCallbacks;
      t2 = t1.length;
      if (t2 !== 0) {
        for (_i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i)
          t1[_i].call$0();
        _this.set$_oneTimePostUpdateCallbacks(H.setRuntimeTypeInfo([], [{func: 1, ret: -1}]));
      }
    },
    _tryEnableSemantics$1: function($event) {
      var t1, blinkEnableConditionPassed, activationPoint, activatingElementRect, t2, t3, t4, t5, t6, t7, deltaX, deltaY, safariEnableConditionPassed, _this = this;
      if (_this._schedulePlaceholderRemoval) {
        t1 = $._browserEngine;
        if ((t1 == null ? $._browserEngine = T._detectBrowserEngine() : t1) !== C.BrowserEngine_1 || $event.type === "touchend") {
          J.remove$0$ax(_this._semanticsPlaceholder);
          _this._semanticsActivationTimer = _this._semanticsPlaceholder = null;
        }
        return true;
      }
      if (_this._semanticsEnabled)
        return true;
      if (++_this._semanticsActivationAttempts >= 20)
        return _this._schedulePlaceholderRemoval = true;
      if (!C.JSArray_methods.contains$1(C.List_click_touchstart_touchend, $event.type))
        return true;
      if (_this._semanticsActivationTimer != null)
        return false;
      t1 = $._browserEngine;
      if (t1 == null)
        t1 = $._browserEngine = T._detectBrowserEngine();
      blinkEnableConditionPassed = t1 === C.BrowserEngine_0 && _this._gestureMode === C.GestureMode_1;
      if (t1 === C.BrowserEngine_1) {
        switch ($event.type) {
          case "click":
            activationPoint = J.get$offset$x(H.interceptedTypeCheck($event, "$isMouseEvent"));
            break;
          case "touchstart":
          case "touchend":
            t1 = H.interceptedTypeCheck($event, "$isTouchEvent").changedTouches;
            t1 = (t1 && C.TouchList_methods).get$first(t1);
            activationPoint = new P.Point(C.JSNumber_methods.round$0(t1.clientX), C.JSNumber_methods.round$0(t1.clientY), [P.num]);
            break;
          default:
            return true;
        }
        activatingElementRect = $.$get$domRenderer()._glassPaneElement.getBoundingClientRect();
        t1 = activatingElementRect.left;
        t2 = activatingElementRect.right;
        t3 = activatingElementRect.left;
        t4 = activatingElementRect.top;
        t5 = activatingElementRect.bottom;
        t6 = activatingElementRect.top;
        t7 = activationPoint.x;
        if (typeof t7 !== "number")
          return t7.$sub();
        deltaX = t7 - (t1 + (t2 - t3) / 2);
        t3 = activationPoint.y;
        if (typeof t3 !== "number")
          return t3.$sub();
        deltaY = t3 - (t4 + (t5 - t6) / 2);
        safariEnableConditionPassed = deltaX * deltaX + deltaY * deltaY < 1 && true;
      } else
        safariEnableConditionPassed = false;
      if (blinkEnableConditionPassed || safariEnableConditionPassed) {
        _this._semanticsActivationTimer = P.Timer_Timer(C.Duration_300000, new T.EngineSemanticsOwner__tryEnableSemantics_closure(_this));
        return false;
      }
      return true;
    },
    autoEnableOnTap$1: function(domRenderer) {
      var t2, _this = this,
        t1 = H.interceptedTypeCheck(W._ElementFactoryProvider_createElement_tag("flt-semantics-placeholder", null), "$isElement0");
      _this._semanticsPlaceholder = t1;
      J.addEventListener$3$x(t1, "click", new T.EngineSemanticsOwner_autoEnableOnTap_closure(_this), true);
      t1 = _this._semanticsPlaceholder;
      t1.setAttribute("role", "button");
      t1.setAttribute("aria-label", "Enable accessibility");
      t1 = _this._semanticsPlaceholder;
      t2 = t1.style;
      t2.position = "absolute";
      t2.left = "0";
      t2.top = "0";
      t2.right = "0";
      t2.bottom = "0";
      domRenderer._glassPaneElement.appendChild(t1);
    },
    set$semanticsEnabled: function(value) {
      var t1;
      if (this._semanticsEnabled)
        return;
      this._semanticsEnabled = true;
      t1 = $.$get$window();
      if (t1._onSemanticsEnabledChanged != null)
        t1.onSemanticsEnabledChanged$0();
    },
    _getGestureModeClock$0: function() {
      var t1, _this = this;
      if (_this._gestureModeClock == null) {
        t1 = new T.AlarmClock(_this._now);
        _this._gestureModeClock = t1;
        t1.set$callback(new T.EngineSemanticsOwner__getGestureModeClock_closure(_this));
      }
      return _this._gestureModeClock;
    },
    receiveGlobalEvent$1: function($event) {
      var t1, t2, _this = this;
      if (C.JSArray_methods.contains$1(C.List_e3D, $event.type)) {
        t1 = _this._getGestureModeClock$0();
        t2 = _this._now.call$0();
        t1.set$datetime(P.DateTime$_withValue(t2._core$_value + 500, t2.isUtc));
        if (_this._gestureMode !== C.GestureMode_0) {
          _this._gestureMode = C.GestureMode_0;
          _this._notifyGestureModeListeners$0();
        }
      }
      if (_this._semanticsPlaceholder == null)
        return true;
      else
        return _this._tryEnableSemantics$1($event);
    },
    _notifyGestureModeListeners$0: function() {
      var t1, i;
      for (t1 = this._gestureModeListeners, i = 0; i < t1.length; ++i)
        t1[i].call$1(this._gestureMode);
    },
    shouldAcceptBrowserGesture$1: function(eventType) {
      if (C.JSArray_methods.contains$1(C.List_click_scroll, eventType))
        return this._gestureMode === C.GestureMode_1;
      return false;
    },
    updateSemantics$1: function(uiUpdate) {
      var t1, t2, t3, _i, nodeUpdate, t4, object, t5, _this = this;
      if (!_this._semanticsEnabled)
        return;
      for (t1 = uiUpdate._engine$_nodeUpdates, t2 = t1.length, t3 = _this._semanticsTree, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
        nodeUpdate = t1[_i];
        t4 = nodeUpdate.id;
        object = t3.$index(0, t4);
        if (object == null) {
          object = T.SemanticsObject$(t4, _this);
          t3.$indexSet(0, t4, object);
        }
        t4 = nodeUpdate.flags;
        if (object._engine$_flags !== t4) {
          object._engine$_flags = t4;
          object._dirtyFields = (object._dirtyFields | 1) >>> 0;
        }
        t4 = nodeUpdate.value;
        if (object._engine$_value != t4) {
          object._engine$_value = t4;
          object._dirtyFields = (object._dirtyFields | 4096) >>> 0;
        }
        t4 = nodeUpdate.label;
        if (object._engine$_label != t4) {
          object._engine$_label = t4;
          object._dirtyFields = (object._dirtyFields | 1024) >>> 0;
        }
        t4 = nodeUpdate.rect;
        if (!J.$eq$(object._engine$_rect, t4)) {
          object._engine$_rect = t4;
          object._dirtyFields = (object._dirtyFields | 512) >>> 0;
        }
        t4 = nodeUpdate.transform;
        if (object._engine$_transform !== t4) {
          object._engine$_transform = t4;
          object._dirtyFields = (object._dirtyFields | 65536) >>> 0;
        }
        t4 = nodeUpdate.scrollPosition;
        if (object._engine$_scrollPosition != t4) {
          object._engine$_scrollPosition = t4;
          object._dirtyFields = (object._dirtyFields | 64) >>> 0;
        }
        t4 = nodeUpdate.actions;
        if (object._engine$_actions !== t4) {
          object._engine$_actions = t4;
          object._dirtyFields = (object._dirtyFields | 2) >>> 0;
        }
        t4 = nodeUpdate.textSelectionBase;
        if (object._textSelectionBase !== t4) {
          object._textSelectionBase = t4;
          object._dirtyFields = (object._dirtyFields | 4) >>> 0;
        }
        t4 = nodeUpdate.textSelectionExtent;
        if (object._textSelectionExtent !== t4) {
          object._textSelectionExtent = t4;
          object._dirtyFields = (object._dirtyFields | 8) >>> 0;
        }
        t4 = nodeUpdate.scrollChildren;
        if (object._scrollChildren != t4) {
          object._scrollChildren = t4;
          object._dirtyFields = (object._dirtyFields | 16) >>> 0;
        }
        t4 = nodeUpdate.scrollIndex;
        if (object._engine$_scrollIndex != t4) {
          object._engine$_scrollIndex = t4;
          object._dirtyFields = (object._dirtyFields | 32) >>> 0;
        }
        t4 = nodeUpdate.scrollExtentMax;
        if (object._engine$_scrollExtentMax != t4) {
          object._engine$_scrollExtentMax = t4;
          object._dirtyFields = (object._dirtyFields | 128) >>> 0;
        }
        t4 = nodeUpdate.scrollExtentMin;
        if (object._engine$_scrollExtentMin != t4) {
          object._engine$_scrollExtentMin = t4;
          object._dirtyFields = (object._dirtyFields | 256) >>> 0;
        }
        t4 = nodeUpdate.hint;
        if (object._engine$_hint != t4) {
          object._engine$_hint = t4;
          object._dirtyFields = (object._dirtyFields | 2048) >>> 0;
        }
        t4 = nodeUpdate.increasedValue;
        if (object._engine$_increasedValue != t4) {
          object._engine$_increasedValue = t4;
          object._dirtyFields = (object._dirtyFields | 8192) >>> 0;
        }
        t4 = nodeUpdate.decreasedValue;
        if (object._engine$_decreasedValue != t4) {
          object._engine$_decreasedValue = t4;
          object._dirtyFields = (object._dirtyFields | 16384) >>> 0;
        }
        t4 = nodeUpdate.textDirection;
        if (object._engine$_textDirection != t4) {
          object._engine$_textDirection = t4;
          object._dirtyFields = (object._dirtyFields | 32768) >>> 0;
        }
        t4 = object._childrenInHitTestOrder;
        t5 = nodeUpdate.childrenInHitTestOrder;
        if (t4 == null ? t5 != null : t4 !== t5) {
          object._childrenInHitTestOrder = t5;
          object._dirtyFields = (object._dirtyFields | 1048576) >>> 0;
        }
        t4 = object._engine$_childrenInTraversalOrder;
        t5 = nodeUpdate.childrenInTraversalOrder;
        if (t4 == null ? t5 != null : t4 !== t5) {
          object._engine$_childrenInTraversalOrder = t5;
          object._dirtyFields = (object._dirtyFields | 524288) >>> 0;
        }
        t4 = object._additionalActions;
        t5 = nodeUpdate.additionalActions;
        if (t4 == null ? t5 != null : t4 !== t5) {
          object._additionalActions = t5;
          object._dirtyFields = (object._dirtyFields | 2097152) >>> 0;
        }
        t4 = object._engine$_label;
        if (!(t4 != null && t4.length !== 0)) {
          t4 = object._engine$_value;
          t4 = t4 != null && t4.length !== 0;
        } else
          t4 = true;
        object._updateRole$2(C.Role_2, t4);
        t4 = object._engine$_flags;
        if (typeof t4 !== "number")
          return t4.$and();
        object._updateRole$2(C.Role_4, (t4 & 16) !== 0);
        t4 = object._engine$_actions;
        if (typeof t4 !== "number")
          return t4.$and();
        if ((t4 & 1) === 0) {
          t4 = object._engine$_flags;
          if (typeof t4 !== "number")
            return t4.$and();
          t4 = (t4 & 8) !== 0;
        } else
          t4 = true;
        object._updateRole$2(C.Role_3, t4);
        t4 = object._engine$_actions;
        if (typeof t4 !== "number")
          return t4.$and();
        object._updateRole$2(C.Role_0, (t4 & 64) !== 0 || (t4 & 128) !== 0);
        t4 = object._engine$_actions;
        if (typeof t4 !== "number")
          return t4.$and();
        object._updateRole$2(C.Role_1, (t4 & 32) !== 0 || (t4 & 16) !== 0 || (t4 & 4) !== 0 || (t4 & 8) !== 0);
        t4 = object._engine$_flags;
        if (typeof t4 !== "number")
          return t4.$and();
        object._updateRole$2(C.Role_5, (t4 & 1) !== 0);
        object._updateChildrenInTraversalOrder$0();
        t4 = object._dirtyFields;
        if ((t4 & 512) !== 0 || (t4 & 65536) !== 0 || (t4 & 64) !== 0)
          object.recomputePositionAndSize$0();
        object._dirtyFields = 0;
      }
      if (_this._rootSemanticsElement == null) {
        t1 = t3.$index(0, 0).element;
        _this._rootSemanticsElement = t1;
        $.$get$domRenderer()._glassPaneElement.appendChild(t1);
      }
      _this._finalizeTree$0();
    },
    set$_attachments: function(_attachments) {
      this._attachments = H.assertSubtype(_attachments, "$isMap", [P.int, T.SemanticsObject], "$asMap");
    },
    set$_detachments: function(_detachments) {
      this._detachments = H.assertSubtype(_detachments, "$isList", [T.SemanticsObject], "$asList");
    },
    set$_oneTimePostUpdateCallbacks: function(_oneTimePostUpdateCallbacks) {
      this._oneTimePostUpdateCallbacks = H.assertSubtype(_oneTimePostUpdateCallbacks, "$isList", [{func: 1, ret: -1}], "$asList");
    }
  };
  T.EngineSemanticsOwner$__closure.prototype = {
    call$0: function() {
      var t1 = this.$this._rootSemanticsElement;
      if (t1 != null)
        J.remove$0$ax(t1);
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 0
  };
  T.EngineSemanticsOwner_closure.prototype = {
    call$0: function() {
      return new P.DateTime(Date.now(), false);
    },
    $signature: 193
  };
  T.EngineSemanticsOwner__tryEnableSemantics_closure.prototype = {
    call$0: function() {
      var t1 = this.$this;
      t1.set$semanticsEnabled(true);
      t1._schedulePlaceholderRemoval = true;
    },
    $signature: 0
  };
  T.EngineSemanticsOwner_autoEnableOnTap_closure.prototype = {
    call$1: function($event) {
      this.$this._tryEnableSemantics$1(H.interceptedTypeCheck($event, "$isEvent"));
    },
    $signature: 2
  };
  T.EngineSemanticsOwner__getGestureModeClock_closure.prototype = {
    call$0: function() {
      var t1 = this.$this;
      if (t1._gestureMode === C.GestureMode_1)
        return;
      t1._gestureMode = C.GestureMode_1;
      t1._notifyGestureModeListeners$0();
    },
    $signature: 0
  };
  T.Tappable.prototype = {
    update$0: function(_) {
      var _this = this,
        t1 = _this.semanticsObject,
        t2 = t1._engine$_flags;
      if (typeof t2 !== "number")
        return t2.$and();
      t1.setAriaRole$2("button", (t2 & 8) !== 0);
      t2 = t1._engine$_actions;
      if (typeof t2 !== "number")
        return t2.$and();
      if ((t2 & 1) !== 0) {
        t2 = t1._engine$_flags;
        if (typeof t2 !== "number")
          return t2.$and();
        t2 = (t2 & 16) === 0;
      } else
        t2 = false;
      if (t2) {
        if (_this._clickListener == null) {
          _this.set$_clickListener(new T.Tappable_update_closure(_this));
          J.addEventListener$2$x(t1.element, "click", _this._clickListener);
        }
      } else
        _this._stopListening$0();
    },
    _stopListening$0: function() {
      var t1 = this._clickListener;
      if (t1 == null)
        return;
      J.removeEventListener$2$x(this.semanticsObject.element, "click", t1);
      this.set$_clickListener(null);
    },
    dispose$0: function() {
      this._stopListening$0();
      this.semanticsObject.setAriaRole$2("button", false);
    },
    set$_clickListener: function(_clickListener) {
      this._clickListener = H.functionTypeCheck(_clickListener, {func: 1, args: [W.Event]});
    }
  };
  T.Tappable_update_closure.prototype = {
    call$1: function(_) {
      var t1;
      H.interceptedTypeCheck(_, "$isEvent");
      t1 = this.$this.semanticsObject;
      if (t1.owner._gestureMode !== C.GestureMode_1)
        return;
      $.$get$window().onSemanticsAction$3(t1.id, C.SemanticsAction_1, null);
    },
    $signature: 2
  };
  T.TextField.prototype = {
    _setupDomElement$0: function() {
      var t2, t3, t4, _this = this,
        t1 = _this.persistentTextEditingElement.domElement;
      t1.spellcheck = false;
      t1.setAttribute("spellcheck", "false");
      t1.setAttribute("autocorrect", "off");
      t1.setAttribute("autocomplete", "off");
      t1.setAttribute("data-semantics-role", "text-field");
      t1 = _this.persistentTextEditingElement.domElement.style;
      t1.position = "absolute";
      t1.top = "0";
      t1.left = "0";
      t2 = _this.semanticsObject;
      t3 = t2._engine$_rect;
      t4 = t3.right;
      t3 = t3.left;
      if (typeof t4 !== "number")
        return t4.$sub();
      if (typeof t3 !== "number")
        return H.iae(t3);
      t3 = H.S(t4 - t3) + "px";
      t1.width = t3;
      t3 = t2._engine$_rect;
      t4 = t3.bottom;
      t3 = t3.top;
      if (typeof t4 !== "number")
        return t4.$sub();
      if (typeof t3 !== "number")
        return H.iae(t3);
      t3 = H.S(t4 - t3) + "px";
      t1.height = t3;
      t2.element.appendChild(_this.persistentTextEditingElement.domElement);
      t1 = $._browserEngine;
      switch (t1 == null ? $._browserEngine = T._detectBrowserEngine() : t1) {
        case C.BrowserEngine_0:
        case C.BrowserEngine_2:
          _this._initializeForBlink$0();
          break;
        case C.BrowserEngine_1:
          _this._initializeForWebkit$0();
          break;
      }
    },
    _initializeForBlink$0: function() {
      J.addEventListener$2$x(this.persistentTextEditingElement.domElement, "focus", new T.TextField__initializeForBlink_closure(this));
    },
    _initializeForWebkit$0: function() {
      var _this = this, t1 = {};
      t1.lastTouchStartOffsetY = t1.lastTouchStartOffsetX = null;
      J.addEventListener$3$x(_this.persistentTextEditingElement.domElement, "touchstart", new T.TextField__initializeForWebkit_closure(t1, _this), true);
      J.addEventListener$3$x(_this.persistentTextEditingElement.domElement, "touchend", new T.TextField__initializeForWebkit_closure0(t1, _this), true);
    },
    update$0: function(_) {
    },
    dispose$0: function() {
      J.remove$0$ax(this.persistentTextEditingElement.domElement);
      $.$get$textEditing().useCustomEditableElement$1(null);
    }
  };
  T.TextField__initializeForBlink_closure.prototype = {
    call$1: function($event) {
      var t1, t2;
      H.interceptedTypeCheck($event, "$isEvent");
      t1 = this.$this;
      t2 = t1.semanticsObject;
      if (t2.owner._gestureMode !== C.GestureMode_1)
        return;
      $.$get$textEditing().useCustomEditableElement$1(t1.persistentTextEditingElement);
      $.$get$window().onSemanticsAction$3(t2.id, C.SemanticsAction_1, null);
    },
    $signature: 2
  };
  T.TextField__initializeForWebkit_closure.prototype = {
    call$1: function($event) {
      var t1, t2;
      H.interceptedTypeCheck($event, "$isEvent");
      $.$get$textEditing().useCustomEditableElement$1(this.$this.persistentTextEditingElement);
      H.interceptedTypeCheck($event, "$isTouchEvent");
      t1 = $event.changedTouches;
      t1 = (t1 && C.TouchList_methods).get$last(t1);
      t2 = C.JSNumber_methods.round$0(t1.clientX);
      C.JSNumber_methods.round$0(t1.clientY);
      t1 = this._box_0;
      t1.lastTouchStartOffsetX = t2;
      t2 = $event.changedTouches;
      t2 = (t2 && C.TouchList_methods).get$last(t2);
      C.JSNumber_methods.round$0(t2.clientX);
      t1.lastTouchStartOffsetY = C.JSNumber_methods.round$0(t2.clientY);
    },
    $signature: 2
  };
  T.TextField__initializeForWebkit_closure0.prototype = {
    call$1: function($event) {
      var t1, t2, offsetX, offsetY;
      $event = H.interceptedTypeCheck(H.interceptedTypeCheck($event, "$isEvent"), "$isTouchEvent");
      t1 = this._box_0;
      if (t1.lastTouchStartOffsetX != null) {
        t2 = $event.changedTouches;
        t2 = (t2 && C.TouchList_methods).get$last(t2);
        offsetX = C.JSNumber_methods.round$0(t2.clientX);
        C.JSNumber_methods.round$0(t2.clientY);
        t2 = $event.changedTouches;
        t2 = (t2 && C.TouchList_methods).get$last(t2);
        C.JSNumber_methods.round$0(t2.clientX);
        offsetY = C.JSNumber_methods.round$0(t2.clientY);
        if (offsetX * offsetX + offsetY * offsetY < 324)
          $.$get$window().onSemanticsAction$3(this.$this.semanticsObject.id, C.SemanticsAction_1, null);
      }
      t1.lastTouchStartOffsetY = t1.lastTouchStartOffsetX = null;
    },
    $signature: 2
  };
  T.MethodCall.prototype = {
    toString$0: function(_) {
      return new H.TypeImpl(H.getRti(this)).toString$0(0) + "(" + this.method + ", " + H.S(this.$arguments) + ")";
    }
  };
  T.StringCodec0.prototype = {
    decodeMessage$1: function(message) {
      var t1 = message.buffer;
      t1.toString;
      return new P.Utf8Decoder(false).convert$1(H.NativeUint8List_NativeUint8List$view(t1, 0, null));
    },
    encodeMessage$1: function(message) {
      var t1 = C.C_Utf8Encoder.convert$1(message).buffer;
      t1.toString;
      return H.NativeByteData_NativeByteData$view(t1, 0, null);
    }
  };
  T.JSONMessageCodec.prototype = {
    encodeMessage$1: function(message) {
      return C.C_StringCodec0.encodeMessage$1(C.C_JsonCodec.encode$1(message));
    },
    decodeMessage$1: function(message) {
      if (message == null)
        return message;
      return C.C_JsonCodec.decode$1(0, C.C_StringCodec0.decodeMessage$1(message));
    }
  };
  T.JSONMethodCodec0.prototype = {
    encodeMethodCall$1: function($call) {
      return C.C_JSONMessageCodec0.encodeMessage$1(P.LinkedHashMap_LinkedHashMap$_literal(["method", $call.method, "args", $call.$arguments], P.String, null));
    },
    decodeMethodCall$1: function(methodCall) {
      var method, $arguments, _null = null,
        decoded = C.C_JSONMessageCodec0.decodeMessage$1(methodCall),
        t1 = J.getInterceptor$(decoded);
      if (!t1.$isMap)
        throw H.wrapException(P.FormatException$("Expected method call Map, got " + H.S(decoded), _null, _null));
      method = t1.$index(decoded, "method");
      $arguments = t1.$index(decoded, "args");
      if (typeof method === "string")
        return new T.MethodCall(method, $arguments);
      throw H.wrapException(P.FormatException$("Invalid method call: " + H.S(decoded), _null, _null));
    }
  };
  T.CanvasShadow.prototype = {};
  T.FontCollection.prototype = {
    registerFonts$1: function(assetManager) {
      return this.registerFonts$body$FontCollection(assetManager);
    },
    registerFonts$body$FontCollection: function(assetManager) {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(-1),
        $async$returnValue, $async$handler = 2, $async$currentError, $async$next = [], $async$self = this, e, exception, t1, fontManifest, t2, t3, fontFamily, t4, family, fontAsset, t5, asset, descriptors, t6, t7, byteData, $async$exception;
      var $async$registerFonts$1 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1) {
          $async$currentError = $async$result;
          $async$goto = $async$handler;
        }
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              byteData = null;
              $async$handler = 4;
              $async$goto = 7;
              return P._asyncAwait(assetManager.load$1(0, "FontManifest.json"), $async$registerFonts$1);
            case 7:
              // returning from await.
              byteData = $async$result;
              $async$handler = 2;
              // goto after finally
              $async$goto = 6;
              break;
            case 4:
              // catch
              $async$handler = 3;
              $async$exception = $async$currentError;
              t1 = H.unwrapException($async$exception);
              if (t1 instanceof T.AssetManagerException) {
                e = t1;
                if (e.httpStatus === 404) {
                  t1 = "Font manifest does not exist at `" + H.S(e.url) + "` \u2013 ignoring.";
                  if (typeof console != "undefined")
                    window.console.warn(t1);
                  // goto return
                  $async$goto = 1;
                  break;
                } else
                  throw $async$exception;
              } else
                throw $async$exception;
              // goto after finally
              $async$goto = 6;
              break;
            case 3:
              // uncaught
              // goto rethrow
              $async$goto = 2;
              break;
            case 6:
              // after finally
              if (byteData == null)
                throw H.wrapException(P.AssertionError$("There was a problem trying to load FontManifest.json"));
              t1 = byteData.buffer;
              t1.toString;
              fontManifest = H.listTypeCheck(C.C_JsonCodec.decode$1(0, C.C_Utf8Codec.decode$1(0, H.NativeUint8List_NativeUint8List$view(t1, 0, null))));
              if (fontManifest == null)
                throw H.wrapException(P.AssertionError$("There was a problem trying to load FontManifest.json"));
              if ($.$get$supportsFontLoadingApi())
                $async$self._assetFontManager = T._FontManager__FontManager();
              else
                $async$self._assetFontManager = new T._PolyfillFontManager(H.setRuntimeTypeInfo([], [[P.Future, -1]]));
              t1 = $._browserEngine;
              if ((t1 == null ? $._browserEngine = T._detectBrowserEngine() : t1) !== C.BrowserEngine_0) {
                t1 = P.String;
                $async$self._assetFontManager.registerAsset$3("Roboto", "url(packages/flutter_web_ui/assets/Roboto-Regular.ttf)", P.LinkedHashMap_LinkedHashMap$_empty(t1, t1));
              }
              for (t1 = J.get$iterator$ax(fontManifest), t2 = P.String, t3 = [t2, null]; t1.moveNext$0();) {
                fontFamily = H.assertSubtype(t1.get$current(t1), "$isMap", t3, "$asMap");
                t4 = J.getInterceptor$asx(fontFamily);
                family = H.stringTypeCheck(t4.$index(fontFamily, "family"));
                for (t4 = J.get$iterator$ax(H.listTypeCheck(t4.$index(fontFamily, "fonts"))); t4.moveNext$0();) {
                  fontAsset = H.assertSubtype(t4.get$current(t4), "$isMap", t3, "$asMap");
                  t5 = J.getInterceptor$asx(fontAsset);
                  asset = H.stringTypeCheck(t5.$index(fontAsset, "asset"));
                  descriptors = P.LinkedHashMap_LinkedHashMap$_empty(t2, t2);
                  for (t6 = J.get$iterator$ax(t5.get$keys(fontAsset)); t6.moveNext$0();) {
                    t7 = t6.get$current(t6);
                    if (t7 !== "asset")
                      descriptors.$indexSet(0, t7, H.S(t5.$index(fontAsset, t7)));
                  }
                  t5 = $async$self._assetFontManager;
                  assetManager.toString;
                  t5.registerAsset$3(family, "url(" + H.S(P.Uri_parse(asset).get$hasScheme() ? asset : "assets/" + H.S(asset)) + ")", descriptors);
                }
              }
            case 1:
              // return
              return P._asyncReturn($async$returnValue, $async$completer);
            case 2:
              // rethrow
              return P._asyncRethrow($async$currentError, $async$completer);
          }
      });
      return P._asyncStartSync($async$registerFonts$1, $async$completer);
    },
    ensureFontsLoaded$0: function() {
      var $async$goto = 0,
        $async$completer = P._makeAsyncAwaitCompleter(-1),
        $async$self = this, t1;
      var $async$ensureFontsLoaded$0 = P._wrapJsFunctionForAsync(function($async$errorCode, $async$result) {
        if ($async$errorCode === 1)
          return P._asyncRethrow($async$result, $async$completer);
        while (true)
          switch ($async$goto) {
            case 0:
              // Function start
              t1 = $async$self._assetFontManager;
              $async$goto = 2;
              return P._asyncAwait(t1 == null ? null : P.Future_wait(t1._fontLoadingFutures, -1), $async$ensureFontsLoaded$0);
            case 2:
              // returning from await.
              t1 = $async$self._testFontManager;
              $async$goto = 3;
              return P._asyncAwait(t1 == null ? null : P.Future_wait(t1._fontLoadingFutures, -1), $async$ensureFontsLoaded$0);
            case 3:
              // returning from await.
              // implicit return
              return P._asyncReturn(null, $async$completer);
          }
      });
      return P._asyncStartSync($async$ensureFontsLoaded$0, $async$completer);
    }
  };
  T._FontManager.prototype = {
    registerAsset$3: function(family, asset, descriptors) {
      var t1 = P.String,
        fontFace = W.FontFace_FontFace(family, asset, H.assertSubtype(descriptors, "$isMap", [t1, t1], "$asMap"));
      C.JSArray_methods.add$1(this._fontLoadingFutures, W.promiseToFuture(fontFace.load(), W.FontFace).then$1$2$onError(new T._FontManager_registerAsset_closure(fontFace), new T._FontManager_registerAsset_closure0(family), -1));
    }
  };
  T._FontManager_registerAsset_closure.prototype = {
    call$1: function(_) {
      H.interceptedTypeCheck(_, "$isFontFace");
      return document.fonts.add(this.fontFace);
    },
    $signature: 194
  };
  T._FontManager_registerAsset_closure0.prototype = {
    call$1: function(e) {
      var t1;
      window;
      t1 = 'Error while trying to load font family "' + H.S(this.family) + '":\n' + H.S(e);
      if (typeof console != "undefined")
        window.console.warn(t1);
      return;
    },
    $signature: 6
  };
  T._PolyfillFontManager.prototype = {
    registerAsset$3: function(family, asset, descriptors) {
      var t3, paragraph, t4, t5, sansSerifWidth, fontStyleMap, t6, t7, fontFaceDeclaration, fontLoadStyle, _s5_ = "style", _s6_ = "weight", t1 = {},
        t2 = P.String;
      H.assertSubtype(descriptors, "$isMap", [t2, t2], "$asMap");
      t3 = document;
      paragraph = t3.createElement("p");
      t4 = paragraph.style;
      t4.position = "absolute";
      t4 = paragraph.style;
      t4.visibility = "hidden";
      t4 = paragraph.style;
      t4.fontSize = "72px";
      t4 = paragraph.style;
      t4.fontFamily = "sans-serif";
      if (descriptors.$index(0, _s5_) != null) {
        t4 = paragraph.style;
        t5 = descriptors.$index(0, _s5_);
        t4.toString;
        t4.fontStyle = t5 == null ? "" : t5;
      }
      if (descriptors.$index(0, _s6_) != null) {
        t4 = paragraph.style;
        t5 = descriptors.$index(0, _s6_);
        t4.toString;
        t4.fontWeight = t5 == null ? "" : t5;
      }
      paragraph.textContent = "giItT1WQy@!-/#";
      t3.body.appendChild(paragraph);
      sansSerifWidth = C.JSNumber_methods.round$0(paragraph.offsetWidth);
      t4 = paragraph.style;
      t5 = H.S(family) + ", sans-serif";
      t4.fontFamily = t5;
      t4 = -1;
      t5 = new P._Future($.Zone__current, [t4]);
      t1._fontLoadStart = null;
      fontStyleMap = P.LinkedHashMap_LinkedHashMap$_empty(t2, t2);
      fontStyleMap.$indexSet(0, "font-family", "'" + H.S(family) + "'");
      fontStyleMap.$indexSet(0, "src", asset);
      if (descriptors.$index(0, _s5_) != null)
        fontStyleMap.$indexSet(0, "font-style", descriptors.$index(0, _s5_));
      if (descriptors.$index(0, _s6_) != null)
        fontStyleMap.$indexSet(0, "font-weight", descriptors.$index(0, _s6_));
      t6 = fontStyleMap.get$keys(fontStyleMap);
      t7 = H.getRuntimeTypeArgument(t6, "Iterable", 0);
      fontFaceDeclaration = H.MappedIterable_MappedIterable(t6, H.functionTypeCheck(new T._PolyfillFontManager_registerAsset_closure(fontStyleMap), {func: 1, ret: t2, args: [t7]}), t7, t2).join$1(0, " ");
      fontLoadStyle = t3.createElement("style");
      fontLoadStyle.type = "text/css";
      C.StyleElement_methods.setInnerHtml$1(fontLoadStyle, "@font-face { " + fontFaceDeclaration + " }");
      t3.head.appendChild(fontLoadStyle);
      if (C.JSString_methods.contains$1(family.toLowerCase(), "icon")) {
        C.ParagraphElement_methods.remove$0(paragraph);
        return;
      }
      t1._fontLoadStart = new P.DateTime(Date.now(), false);
      new T._PolyfillFontManager_registerAsset__watchWidth(t1, paragraph, sansSerifWidth, new P._AsyncCompleter(t5, [t4]), family).call$0();
      C.JSArray_methods.add$1(this._fontLoadingFutures, t5);
    }
  };
  T._PolyfillFontManager_registerAsset__watchWidth.prototype = {
    call$0: function() {
      var _this = this,
        t1 = _this.paragraph;
      if (C.JSNumber_methods.round$0(t1.offsetWidth) !== _this.sansSerifWidth) {
        C.ParagraphElement_methods.remove$0(t1);
        _this.completer.complete$0(0);
      } else if (P.Duration$(0, Date.now() - _this._box_0._fontLoadStart._core$_value, 0)._duration > 2000000)
        _this.completer.completeError$1(new P._Exception("Timed out trying to load font: " + H.S(_this.family)));
      else
        P.Timer_Timer(C.Duration_50000, _this);
    },
    $signature: 1
  };
  T._PolyfillFontManager_registerAsset_closure.prototype = {
    call$1: function($name) {
      H.stringTypeCheck($name);
      return H.S($name) + ": " + H.S(this.fontStyleMap.$index(0, $name)) + ";";
    },
    $signature: 28
  };
  T.TextMeasurementService.prototype = {
    TextMeasurementService$_$1$rulerCacheCapacity: function(rulerCacheCapacity) {
      var t1 = this._rulerHost,
        t2 = t1.style;
      t2.position = "fixed";
      t2.visibility = "hidden";
      t2.overflow = "hidden";
      t2.top = "0";
      t2.left = "0";
      t2.width = "0";
      t2.height = "0";
      document.body.appendChild(t1);
      C.JSArray_methods.add$1($._hotRestartListeners, new T.TextMeasurementService$__closure(this));
    },
    _scheduleRulerCacheCleanup$0: function() {
      if (!this._rulerCacheCleanupScheduled) {
        this._rulerCacheCleanupScheduled = true;
        P.scheduleMicrotask(new T.TextMeasurementService__scheduleRulerCacheCleanup_closure(this));
      }
    },
    cleanUpRulerCache$0: function() {
      var sortedByUsage, i, ruler, t3, _this = this,
        t1 = _this._rulers,
        t2 = _this.rulerCacheCapacity;
      if (t1.get$length(t1) > t2) {
        t1 = _this._rulers;
        t1 = t1.get$values(t1);
        sortedByUsage = P.List_List$from(t1, true, H.getRuntimeTypeArgument(t1, "Iterable", 0));
        C.JSArray_methods.sort$1(sortedByUsage, new T.TextMeasurementService_cleanUpRulerCache_closure());
        _this.set$_rulers(P.LinkedHashMap_LinkedHashMap$_empty(T.ParagraphGeometricStyle, T.ParagraphRuler));
        for (i = 0; i < sortedByUsage.length; ++i) {
          ruler = sortedByUsage[i];
          ruler._hitCount = 0;
          if (i < t2)
            _this._rulers.$indexSet(0, ruler.style, ruler);
          else {
            t1 = ruler._singleLineHost;
            t3 = t1.parentNode;
            if (t3 != null)
              t3.removeChild(t1);
            t1 = ruler._minIntrinsicHost;
            t3 = t1.parentNode;
            if (t3 != null)
              t3.removeChild(t1);
            t1 = ruler._constrainedHost;
            t3 = t1.parentNode;
            if (t3 != null)
              t3.removeChild(t1);
            t1 = ruler._lineHeightHost;
            if (t1 != null) {
              t3 = t1.parentNode;
              if (t3 != null)
                t3.removeChild(t1);
            }
          }
        }
      }
    },
    measure$2: function(_, paragraph, constraints) {
      var t1, t2, t3, t4, t5, plainText, minIntrinsicWidth, maxIntrinsicWidth, alphabeticBaseline, height, lineHeight,
        style = paragraph._paragraphGeometricStyle,
        ruler = this._findOrCreateRuler$1(style),
        cacheEntry = ruler.cacheLookup$2(paragraph, constraints);
      if (cacheEntry != null) {
        cacheEntry.applyToParagraph$1(paragraph);
        ++ruler._hitCount;
        return;
      }
      ruler.willMeasure$1(paragraph);
      ruler.measureAsSingleLine$0();
      t1 = ruler.minIntrinsicDimensions;
      t2 = ruler.style;
      t1.updateText$2(ruler._engine$_paragraph, t2);
      t3 = ruler.constrainedDimensions;
      t3.updateText$2(ruler._engine$_paragraph, t2);
      t2 = constraints.width;
      if (typeof t2 !== "number")
        return t2.$add();
      t4 = H.S(t2 + 0.5) + "px";
      t3.set$_cachedBoundingClientRect(null);
      t5 = t3._engine$_element.style;
      t5.width = t4;
      plainText = paragraph._plainText;
      t4 = plainText == null ? null : C.JSString_methods.contains$1(plainText, "\n");
      t4 = t4 !== true && ruler.singleLineDimensions._readAndCacheMetrics$0().width <= t2;
      t5 = ruler.singleLineDimensions;
      if (t4) {
        minIntrinsicWidth = t1._readAndCacheMetrics$0().width;
        maxIntrinsicWidth = t5._readAndCacheMetrics$0().width;
        alphabeticBaseline = ruler.get$alphabeticBaseline(ruler);
        height = t5._readAndCacheMetrics$0().height;
        cacheEntry = T.RulerCacheEntry$(t2, alphabeticBaseline, height, alphabeticBaseline * 1.1662499904632568, true, height, T.TextMeasurementService__applySubPixelRoundingHack(minIntrinsicWidth, maxIntrinsicWidth), minIntrinsicWidth, t2);
        ruler.cacheMeasurement$3(paragraph, constraints, cacheEntry);
        cacheEntry.applyToParagraph$1(paragraph);
      } else {
        minIntrinsicWidth = t1._readAndCacheMetrics$0().width;
        maxIntrinsicWidth = t5._readAndCacheMetrics$0().width;
        alphabeticBaseline = ruler.get$alphabeticBaseline(ruler);
        height = t3._readAndCacheMetrics$0().height;
        lineHeight = style.maxLines != null ? ruler.get$lineHeightDimensions()._readAndCacheMetrics$0().height : height;
        cacheEntry = T.RulerCacheEntry$(t2, alphabeticBaseline, height, alphabeticBaseline * 1.1662499904632568, false, lineHeight, T.TextMeasurementService__applySubPixelRoundingHack(minIntrinsicWidth, maxIntrinsicWidth), minIntrinsicWidth, t2);
        ruler.cacheMeasurement$3(paragraph, constraints, cacheEntry);
        cacheEntry.applyToParagraph$1(paragraph);
      }
      ruler.didMeasure$0();
    },
    _findOrCreateRuler$1: function(style) {
      var t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, _s6_ = "hidden",
        _s8_ = "absolute",
        _s1_ = "0", _s4_ = "flex",
        _s14_ = "flex-direction",
        _s8_0 = "baseline",
        _s11_ = "align-items",
        _s8_1 = "pre-wrap",
        ruler = this._rulers.$index(0, style);
      if (ruler != null)
        return ruler;
      this._scheduleRulerCacheCleanup$0();
      t1 = this._rulers;
      t2 = document;
      t3 = t2.createElement("div");
      t4 = t2.createElement("div");
      t5 = t2.createElement("p");
      t6 = new T.TextDimensions(t5);
      t7 = t2.createElement("div");
      t8 = t2.createElement("p");
      t9 = new T.TextDimensions(t8);
      t10 = t2.createElement("div");
      t2 = t2.createElement("p");
      t11 = new T.TextDimensions(t2);
      t12 = P.String;
      t12 = new T.ParagraphRuler(style, t3, t4, t6, t7, t9, t10, t11, new H.JsLinkedHashMap([t12, [P.List, T.RulerCacheEntry]]), H.setRuntimeTypeInfo([], [t12]));
      t13 = t4.style;
      t13.visibility = _s6_;
      t13.position = _s8_;
      t13.top = _s1_;
      t13.left = _s1_;
      t13.display = _s4_;
      C.CssStyleDeclaration_methods._setPropertyHelper$3(t13, (t13 && C.CssStyleDeclaration_methods)._browserPropertyName$1(t13, _s14_), "row", "");
      C.CssStyleDeclaration_methods._setPropertyHelper$3(t13, C.CssStyleDeclaration_methods._browserPropertyName$1(t13, _s11_), _s8_0, "");
      t13.margin = _s1_;
      t13.border = _s1_;
      t13.padding = _s1_;
      t6.applyStyle$1(style);
      t13 = t5.style;
      t13.whiteSpace = "pre";
      t4.appendChild(t5);
      t6.set$_cachedBoundingClientRect(null);
      $.TextMeasurementService__instance._rulerHost.appendChild(t4);
      t4.appendChild(t3);
      t3 = t7.style;
      t3.visibility = _s6_;
      t3.position = _s8_;
      t3.top = _s1_;
      t3.left = _s1_;
      t3.display = _s4_;
      C.CssStyleDeclaration_methods._setPropertyHelper$3(t3, (t3 && C.CssStyleDeclaration_methods)._browserPropertyName$1(t3, _s14_), "row", "");
      t3.margin = _s1_;
      t3.border = _s1_;
      t3.padding = _s1_;
      t9.applyStyle$1(style);
      t3 = t8.style;
      C.CssStyleDeclaration_methods._setPropertyHelper$3(t3, (t3 && C.CssStyleDeclaration_methods)._browserPropertyName$1(t3, _s4_), _s1_, "");
      t3.display = "inline";
      t3.whiteSpace = _s8_1;
      t7.appendChild(t8);
      $.TextMeasurementService__instance._rulerHost.appendChild(t7);
      t3 = t10.style;
      t3.visibility = _s6_;
      t3.position = _s8_;
      t3.top = _s1_;
      t3.left = _s1_;
      t3.display = _s4_;
      C.CssStyleDeclaration_methods._setPropertyHelper$3(t3, (t3 && C.CssStyleDeclaration_methods)._browserPropertyName$1(t3, _s14_), "row", "");
      C.CssStyleDeclaration_methods._setPropertyHelper$3(t3, C.CssStyleDeclaration_methods._browserPropertyName$1(t3, _s11_), _s8_0, "");
      t3.margin = _s1_;
      t3.border = _s1_;
      t3.padding = _s1_;
      t11.applyStyle$1(style);
      t3 = t2.style;
      t3.display = "block";
      t3.whiteSpace = _s8_1;
      t10.appendChild(t2);
      t11.set$_cachedBoundingClientRect(null);
      $.TextMeasurementService__instance._rulerHost.appendChild(t10);
      t1.$indexSet(0, style, t12);
      return t12;
    },
    set$_rulers: function(_rulers) {
      this._rulers = H.assertSubtype(_rulers, "$isMap", [T.ParagraphGeometricStyle, T.ParagraphRuler], "$asMap");
    }
  };
  T.TextMeasurementService$__closure.prototype = {
    call$0: function() {
      J.remove$0$ax(this.$this._rulerHost);
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 0
  };
  T.TextMeasurementService__scheduleRulerCacheCleanup_closure.prototype = {
    call$0: function() {
      var t1 = this.$this;
      t1._rulerCacheCleanupScheduled = false;
      t1.cleanUpRulerCache$0();
    },
    $signature: 0
  };
  T.TextMeasurementService_cleanUpRulerCache_closure.prototype = {
    call$2: function(a, b) {
      H.interceptedTypeCheck(a, "$isParagraphRuler");
      return H.interceptedTypeCheck(b, "$isParagraphRuler")._hitCount - a._hitCount;
    },
    $signature: 195
  };
  T.ParagraphGeometricStyle.prototype = {
    get$effectiveFontFamily: function() {
      var t1 = this.fontFamily;
      if (t1 == null || t1.length === 0)
        return "sans-serif";
      return t1;
    },
    get$cssFontString: function() {
      var t2, _this = this,
        t1 = _this._cssFontString;
      if (t1 == null) {
        t1 = _this.fontWeight;
        t1 = (t1 != null ? "normal " + H.S(Q.webOnlyFontWeightToCss(t1)) : "normal normal") + " ";
        t2 = _this.fontSize;
        t1 = (t2 != null ? t1 + C.JSNumber_methods.floor$0(t2) + "px" : t1 + "14px") + " " + H.S(_this.get$effectiveFontFamily());
        t1 = _this._cssFontString = t1.charCodeAt(0) == 0 ? t1 : t1;
      }
      return t1;
    },
    $eq: function(_, other) {
      var t1, _this = this;
      if (other == null)
        return false;
      if (_this === other)
        return true;
      if (!J.get$runtimeType$(other).$eq(0, new H.TypeImpl(H.getRti(_this))))
        return false;
      H.interceptedTypeCheck(other, "$isParagraphGeometricStyle");
      if (_this.fontWeight == other.fontWeight)
        t1 = _this.fontFamily == other.fontFamily && _this.fontSize == other.fontSize && _this.lineHeight == other.lineHeight && _this.maxLines == other.maxLines && _this.letterSpacing == other.letterSpacing && _this.wordSpacing == other.wordSpacing && _this.decoration == other.decoration && _this.ellipsis == other.ellipsis;
      else
        t1 = false;
      return t1;
    },
    get$hashCode: function(_) {
      var _this = this,
        t1 = _this._cachedHashCode;
      return t1 == null ? _this._cachedHashCode = Q.hashValues(_this.fontWeight, _this.fontStyle, _this.fontFamily, _this.fontSize, _this.lineHeight, _this.maxLines, _this.letterSpacing, _this.wordSpacing, _this.decoration, _this.ellipsis, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd) : t1;
    },
    toString$0: function(_) {
      var t1 = this.super$Object$toString(0);
      return t1;
    }
  };
  T.TextDimensions.prototype = {
    updateText$2: function(from, style) {
      var plainText, t1, copy;
      this.set$_cachedBoundingClientRect(null);
      plainText = from._plainText;
      t1 = this._engine$_element;
      if (plainText != null)
        t1.textContent = plainText;
      else {
        copy = H.interceptedTypeCheck(from._paragraphElement.cloneNode(true), "$isElement0");
        new W._ChildrenElementList(t1, t1.children).addAll$1(0, J.get$children$x(copy));
      }
    },
    applyStyle$1: function(style) {
      var _null = null,
        t1 = this._engine$_element,
        t2 = t1.style,
        t3 = style.fontSize;
      t3 = t3 != null ? "" + C.JSNumber_methods.floor$0(t3) + "px" : _null;
      t2.toString;
      t2.fontSize = t3 == null ? "" : t3;
      t3 = style.get$effectiveFontFamily();
      t2.fontFamily = t3 == null ? "" : t3;
      t3 = style.fontWeight;
      t3 = t3 != null ? Q.webOnlyFontWeightToCss(t3) : _null;
      t2.fontWeight = t3 == null ? "" : t3;
      t2.fontStyle = "";
      t3 = style.letterSpacing;
      t3 = t3 != null ? H.S(t3) + "px" : _null;
      t2.letterSpacing = t3 == null ? "" : t3;
      t3 = style.wordSpacing;
      t3 = t3 != null ? H.S(t3) + "px" : _null;
      t2.wordSpacing = t3 == null ? "" : t3;
      t3 = style.decoration;
      t2.textDecoration = t3 == null ? "" : t3;
      t2 = style.lineHeight;
      if (t2 != null) {
        t1 = t1.style;
        t2 = C.JSNumber_methods.toString$0(t2);
        t1.lineHeight = t2;
      }
      this.set$_cachedBoundingClientRect(_null);
    },
    _readAndCacheMetrics$0: function() {
      var t1 = this._cachedBoundingClientRect;
      if (t1 == null) {
        t1 = this._engine$_element.getBoundingClientRect();
        this.set$_cachedBoundingClientRect(t1);
      }
      return t1;
    },
    set$_cachedBoundingClientRect: function(_cachedBoundingClientRect) {
      this._cachedBoundingClientRect = H.assertSubtype(_cachedBoundingClientRect, "$isRectangle", [P.num], "$asRectangle");
    }
  };
  T.ParagraphRuler.prototype = {
    get$alphabeticBaseline: function(_) {
      var t1 = this._cachedAlphabeticBaseline;
      return t1 == null ? this._cachedAlphabeticBaseline = this._probe.getBoundingClientRect().bottom : t1;
    },
    get$lineHeightDimensions: function() {
      var t1, t2, _this = this;
      if (_this._lineHeightDimensions == null) {
        t1 = document;
        _this._lineHeightHost = t1.createElement("div");
        _this._lineHeightDimensions = new T.TextDimensions(t1.createElement("p"));
        t1 = _this._lineHeightHost.style;
        t1.visibility = "hidden";
        t1.position = "absolute";
        t1.top = "0";
        t1.left = "0";
        t1.margin = "0";
        t1.border = "0";
        t1.padding = "0";
        _this.get$lineHeightDimensions().applyStyle$1(_this.style);
        t1 = _this.get$lineHeightDimensions()._engine$_element.style;
        t1.whiteSpace = "pre";
        t1 = _this.get$lineHeightDimensions();
        t1.set$_cachedBoundingClientRect(null);
        t1._engine$_element.textContent = " ";
        t1 = _this.get$lineHeightDimensions();
        _this._lineHeightHost.appendChild(t1._engine$_element);
        t1.set$_cachedBoundingClientRect(null);
        t1 = $.TextMeasurementService__instance;
        t2 = _this._lineHeightHost;
        t1._rulerHost.appendChild(t2);
      }
      return _this._lineHeightDimensions;
    },
    willMeasure$1: function(paragraph) {
      ++this._hitCount;
      this._engine$_paragraph = paragraph;
    },
    measureAsSingleLine$0: function() {
      var t1 = this._engine$_paragraph,
        t2 = this.singleLineDimensions;
      if (t1._plainText === "") {
        t2.set$_cachedBoundingClientRect(null);
        t2._engine$_element.textContent = " ";
      } else
        t2.updateText$2(t1, this.style);
    },
    didMeasure$0: function() {
      var t1, _this = this;
      if (_this._engine$_paragraph._plainText == null) {
        t1 = $.$get$domRenderer();
        t1.clearDom$1(_this.singleLineDimensions._engine$_element);
        t1.clearDom$1(_this.minIntrinsicDimensions._engine$_element);
        t1.clearDom$1(_this.constrainedDimensions._engine$_element);
      }
      _this._engine$_paragraph = null;
    },
    measureBoxesForRange$6$alignOffset$end$start$textDirection: function(plainText, constraints, alignOffset, end, start, textDirection) {
      var t2, t3, value, boxes, _i, rect,
        before = J.getInterceptor$s(plainText).substring$2(plainText, 0, start),
        rangeText = C.JSString_methods.substring$2(plainText, start, end),
        after = C.JSString_methods.substring$1(plainText, end),
        t1 = document,
        rangeSpan = t1.createElement("span");
      rangeSpan.textContent = rangeText;
      t2 = this.constrainedDimensions;
      t3 = t2._engine$_element;
      $.$get$domRenderer().clearDom$1(t3);
      t3.appendChild(t1.createTextNode(before));
      t3.appendChild(rangeSpan);
      t3.appendChild(t1.createTextNode(after));
      t1 = H.S(constraints.width) + "px";
      t2.set$_cachedBoundingClientRect(null);
      t2 = t3.style;
      t2.width = t1;
      value = rangeSpan.getClientRects();
      if (value.prototype == null)
        value.prototype = Object.create(null);
      boxes = H.setRuntimeTypeInfo([], [Q.TextBox]);
      for (t1 = value.length, _i = 0; _i < value.length; value.length === t1 || (0, H.throwConcurrentModificationError)(value), ++_i) {
        rect = value[_i];
        t2 = J.getInterceptor$x(rect);
        C.JSArray_methods.add$1(boxes, new Q.TextBox(t2.get$left(rect) + alignOffset, t2.get$top(rect), t2.get$right(rect) + alignOffset, t2.get$bottom(rect), textDirection));
      }
      $.$get$domRenderer().clearDom$1(t3);
      return boxes;
    },
    dispose$0: function() {
      var t1, _this = this;
      C.DivElement_methods.remove$0(_this._singleLineHost);
      C.DivElement_methods.remove$0(_this._minIntrinsicHost);
      C.DivElement_methods.remove$0(_this._constrainedHost);
      t1 = _this._lineHeightHost;
      if (t1 != null)
        C.DivElement_methods.remove$0(t1);
    },
    cacheMeasurement$3: function(paragraph, constraints, item) {
      var t2, t3, i,
        plainText = paragraph._plainText,
        t1 = this._measurementCache,
        constraintCache = t1.$index(0, plainText);
      if (constraintCache == null) {
        constraintCache = H.setRuntimeTypeInfo([], [T.RulerCacheEntry]);
        t1.$indexSet(0, plainText, constraintCache);
      }
      t2 = J.getInterceptor$ax(constraintCache);
      t2.add$1(constraintCache, item);
      t3 = t2.get$length(constraintCache);
      if (typeof t3 !== "number")
        return t3.$gt();
      if (t3 > 8)
        t2.removeAt$1(constraintCache, 0);
      t2 = this._mruList;
      C.JSArray_methods.add$1(t2, plainText);
      if (t2.length > 2400) {
        for (i = 0; i < 100; ++i) {
          if (i >= t2.length)
            return H.ioore(t2, i);
          t1.remove$1(0, t2[i]);
        }
        C.JSArray_methods.removeRange$2(t2, 0, 100);
      }
    },
    cacheLookup$2: function(paragraph, constraints) {
      var t1, len, t2, i, item,
        constraintCache = this._measurementCache.$index(0, paragraph._plainText);
      if (constraintCache == null)
        return;
      t1 = J.getInterceptor$asx(constraintCache);
      len = t1.get$length(constraintCache);
      if (typeof len !== "number")
        return H.iae(len);
      t2 = constraints.width;
      i = 0;
      for (; i < len; ++i) {
        item = t1.$index(constraintCache, i);
        if (item.constraintWidth == t2)
          return item;
      }
      return;
    }
  };
  T.RulerCacheEntry.prototype = {
    applyToParagraph$1: function(paragraph) {
      var _this = this;
      paragraph._width = _this.width;
      paragraph._height = _this.height;
      paragraph._lineHeight = _this.lineHeight;
      paragraph._minIntrinsicWidth = _this.minIntrinsicWidth;
      paragraph._maxIntrinsicWidth = _this.maxIntrinsicWidth;
      paragraph._alphabeticBaseline = _this.alphabeticBaseline;
      paragraph._ideographicBaseline = _this.ideographicBaseline;
      paragraph._webOnlyIsSingleLine = _this.isSingleLine;
      paragraph._webOnlyIsLaidOut = true;
    }
  };
  T._styleEditingElement_closure.prototype = {
    call$1: function(_) {
      var t1;
      H.numTypeCheck(_);
      t1 = this.domElement.style;
      t1.position = "absolute";
      t1.bottom = "0";
      t1.right = "0";
    },
    $signature: 40
  };
  T.EditingState.prototype = {
    $eq: function(_, other) {
      var _this = this;
      if (other == null)
        return false;
      if (_this === other)
        return true;
      if (!new H.TypeImpl(H.getRti(_this)).$eq(0, J.get$runtimeType$(other)))
        return false;
      H.interceptedTypeCheck(other, "$isEditingState");
      return _this.text == other.text && _this.baseOffset == other.baseOffset && _this.extentOffset == other.extentOffset;
    },
    toString$0: function(_) {
      var t1 = this.super$Object$toString(0);
      return t1;
    }
  };
  T.InputType.prototype = {
    toString$0: function(_) {
      return this._engine$_name;
    }
  };
  T.InputConfiguration.prototype = {};
  T.ElementType.prototype = {
    toString$0: function(_) {
      return this._engine$_name;
    }
  };
  T.TextEditingElement.prototype = {
    enable$2$onChange: function(_, inputConfig, onChange) {
      var t1, t2, t3, t4, _this = this;
      H.functionTypeCheck(onChange, {func: 1, ret: -1, args: [T.EditingState]});
      _this._initDomElement$1(inputConfig);
      t1 = _this._engine$_enabled = true;
      _this.set$_onChange(onChange);
      t2 = $._browserEngine;
      if (t2 == null)
        t2 = $._browserEngine = T._detectBrowserEngine();
      if (t2 !== C.BrowserEngine_0)
        t1 = t2 === C.BrowserEngine_2;
      if (t1) {
        t1 = _this.domElement;
        t1.toString;
        t2 = W.Event;
        C.JSArray_methods.add$1(_this._subscriptions, W._EventStreamSubscription$(t1, "blur", H.functionTypeCheck(new T.TextEditingElement_enable_closure(_this), {func: 1, ret: -1, args: [t2]}), false, t2));
      }
      _this.domElement.focus();
      t1 = _this._lastEditingState;
      if (t1 != null)
        _this.setEditingState$1(t1);
      t1 = _this._subscriptions;
      t2 = document;
      t3 = W.Event;
      t4 = H.functionTypeCheck(_this.get$_handleChange(), {func: 1, ret: -1, args: [t3]});
      C.JSArray_methods.add$1(t1, W._EventStreamSubscription$(t2, "selectionchange", t4, false, t3));
      t2 = _this.domElement;
      t2.toString;
      C.JSArray_methods.add$1(t1, W._EventStreamSubscription$(t2, "input", t4, false, t3));
    },
    disable$0: function(_) {
      var t1, i, _this = this;
      _this._engine$_enabled = false;
      _this._lastEditingState = null;
      for (t1 = _this._subscriptions, i = 0; i < t1.length; ++i)
        t1[i].cancel$0(0);
      C.JSArray_methods.set$length(t1, 0);
      _this._removeDomElement$0();
    },
    _initDomElement$1: function(inputConfig) {
      var input, textarea,
        t1 = inputConfig.inputType;
      switch (t1) {
        case C.InputType_0:
          input = W.InputElement_InputElement();
          T._styleEditingElement(input);
          this.domElement = input;
          t1 = input;
          break;
        case C.InputType_1:
          textarea = document.createElement("textarea");
          T._styleEditingElement(textarea);
          this.domElement = textarea;
          t1 = textarea;
          break;
        default:
          throw H.wrapException(P.UnsupportedError$("Unsupported input type: " + t1.toString$0(0)));
      }
      document.body.appendChild(t1);
    },
    _removeDomElement$0: function() {
      J.remove$0$ax(this.domElement);
      this.domElement = null;
    },
    _refocus$0: function() {
      this.domElement.focus();
    },
    setEditingState$1: function(editingState) {
      var t1, input, textarea, t2, t3, firstChild, _this = this;
      _this._lastEditingState = editingState;
      if (_this._engine$_enabled) {
        t1 = editingState.baseOffset;
        if (typeof t1 !== "number")
          return t1.$ge();
        if (t1 >= 0) {
          t1 = editingState.extentOffset;
          if (typeof t1 !== "number")
            return t1.$ge();
          t1 = t1 >= 0;
        } else
          t1 = false;
        t1 = !t1;
      } else
        t1 = true;
      if (t1)
        return;
      switch (T._getTypeFromElement(_this.domElement)) {
        case C.ElementType_0:
          input = H.interceptedTypeCheck(_this.domElement, "$isInputElement");
          input.value = editingState.text;
          input.setSelectionRange(editingState.baseOffset, editingState.extentOffset);
          break;
        case C.ElementType_1:
          textarea = H.interceptedTypeCheck(_this.domElement, "$isTextAreaElement");
          textarea.value = editingState.text;
          textarea.setSelectionRange(editingState.baseOffset, editingState.extentOffset);
          break;
        case C.ElementType_2:
          $.$get$domRenderer().clearDom$1(_this.domElement);
          t1 = _this.domElement;
          t2 = editingState.text;
          t3 = document;
          t1.appendChild(t3.createTextNode(t2));
          t2 = window.getSelection();
          t2.removeAllRanges();
          firstChild = _this.domElement.firstChild;
          t3 = t3.createRange();
          t3.setStart(firstChild, editingState.baseOffset);
          t3.setEnd(firstChild, editingState.extentOffset);
          t2.addRange(t3);
          break;
      }
      _this.domElement.focus();
    },
    _handleChange$1: function($event) {
      var inputElement, editingState, textAreaElement, t1, text, t2, t3, prevSelectionEnd, newSelectionExtent, selection, _this = this;
      switch (T._getTypeFromElement(_this.domElement)) {
        case C.ElementType_0:
          inputElement = H.interceptedTypeCheck(_this.domElement, "$isInputElement");
          editingState = new T.EditingState(inputElement.value, inputElement.selectionStart, inputElement.selectionEnd);
          break;
        case C.ElementType_1:
          textAreaElement = H.interceptedTypeCheck(_this.domElement, "$isTextAreaElement");
          editingState = new T.EditingState(textAreaElement.value, textAreaElement.selectionStart, textAreaElement.selectionEnd);
          break;
        case C.ElementType_2:
          t1 = _this.domElement;
          text = H.stringTypeCheck(t1.innerText);
          if (t1.childNodes.length > 1) {
            t1 = _this._lastEditingState;
            t2 = t1.baseOffset;
            t3 = t1.extentOffset;
            prevSelectionEnd = Math.max(H.checkNum(t2), H.checkNum(t3));
            t1 = t1.text.length;
            newSelectionExtent = text.length - (t1 - prevSelectionEnd);
            editingState = new T.EditingState(text, newSelectionExtent, newSelectionExtent);
          } else {
            selection = window.getSelection();
            editingState = new T.EditingState(text, selection.baseOffset, selection.extentOffset);
          }
          break;
        default:
          editingState = null;
      }
      _this._lastEditingState = editingState;
      _this._onChange.call$1(editingState);
    },
    set$_onChange: function(_onChange) {
      this._onChange = H.functionTypeCheck(_onChange, {func: 1, ret: -1, args: [T.EditingState]});
    }
  };
  T.TextEditingElement_enable_closure.prototype = {
    call$1: function(_) {
      var t1 = this.$this;
      if (t1._engine$_enabled)
        t1._refocus$0();
    },
    $signature: 2
  };
  T.PersistentTextEditingElement.prototype = {
    _initDomElement$1: function(inputConfig) {
    },
    _removeDomElement$0: function() {
      this.domElement.blur();
    },
    _refocus$0: function() {
    }
  };
  T.HybridTextEditing.prototype = {
    get$editingElement: function() {
      var t1 = this._customEditingElement;
      if (t1 != null)
        return t1;
      return this._defaultEditingElement;
    },
    useCustomEditableElement$1: function(customEditingElement) {
      var _this = this;
      if (_this._isEditing && customEditingElement != _this._customEditingElement) {
        _this._isEditing = false;
        _this.get$editingElement().disable$0(0);
      }
      _this._customEditingElement = customEditingElement;
    },
    _syncEditingStateToFlutter$1: function(editingState) {
      $.$get$window().onPlatformMessage$3("flutter/textinput", C.C_JSONMethodCodec.encodeMethodCall$1(new T.MethodCall("TextInputClient.updateEditingState", H.setRuntimeTypeInfo([this._clientId, P.LinkedHashMap_LinkedHashMap$_literal(["text", editingState.text, "selectionBase", editingState.baseOffset, "selectionExtent", editingState.extentOffset], P.String, null)], [P.Object]))), T.engine___emptyCallback$closure());
    },
    set$_engine$_configuration: function(_configuration) {
      this._engine$_configuration = H.assertSubtype(_configuration, "$isMap", [P.String, null], "$asMap");
    }
  };
  T.Matrix40.prototype = {
    setFrom$1: function(arg) {
      var argStorage = arg._engine$_m4storage,
        t1 = this._engine$_m4storage;
      t1[15] = argStorage[15];
      t1[14] = argStorage[14];
      t1[13] = argStorage[13];
      t1[12] = argStorage[12];
      t1[11] = argStorage[11];
      t1[10] = argStorage[10];
      t1[9] = argStorage[9];
      t1[8] = argStorage[8];
      t1[7] = argStorage[7];
      t1[6] = argStorage[6];
      t1[5] = argStorage[5];
      t1[4] = argStorage[4];
      t1[3] = argStorage[3];
      t1[2] = argStorage[2];
      t1[1] = argStorage[1];
      t1[0] = argStorage[0];
    },
    $index: function(_, i) {
      var t1;
      H.intTypeCheck(i);
      t1 = this._engine$_m4storage;
      t1.length;
      if (i < 0 || i >= 16)
        return H.ioore(t1, i);
      return t1[i];
    },
    $indexSet: function(_, i, v) {
      var t1 = this._engine$_m4storage;
      (t1 && C.NativeFloat64List_methods).$indexSet(t1, i, v);
    },
    translate$3: function(_, x, y, z) {
      var tz, ty, tx, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17;
      if (typeof x === "number") {
        tz = z;
        ty = y;
        tx = x;
      } else {
        tx = null;
        ty = null;
        tz = null;
      }
      t1 = this._engine$_m4storage;
      t2 = t1[0];
      if (typeof tx !== "number")
        return H.iae(tx);
      t3 = t1[4];
      if (typeof ty !== "number")
        return H.iae(ty);
      t4 = t1[8];
      if (typeof tz !== "number")
        return H.iae(tz);
      t5 = t1[12];
      t6 = t1[1];
      t7 = t1[5];
      t8 = t1[9];
      t9 = t1[13];
      t10 = t1[2];
      t11 = t1[6];
      t12 = t1[10];
      t13 = t1[14];
      t14 = t1[3];
      t15 = t1[7];
      t16 = t1[11];
      t17 = t1[15];
      t1[12] = t2 * tx + t3 * ty + t4 * tz + t5;
      t1[13] = t6 * tx + t7 * ty + t8 * tz + t9;
      t1[14] = t10 * tx + t11 * ty + t12 * tz + t13;
      t1[15] = t14 * tx + t15 * ty + t16 * tz + t17;
    },
    translate$2: function($receiver, x, y) {
      return this.translate$3($receiver, x, y, 0);
    },
    scale$3: function(_, x, y, z) {
      var sx, sy, sz, t1, t2;
      if (x instanceof T.Vector30) {
        sx = x.get$x(x);
        sy = x.get$y(x);
        sz = x.get$z(x);
      } else if (typeof x === "number") {
        sy = y == null ? x : y;
        sz = x;
        sx = sz;
      } else {
        sx = null;
        sy = null;
        sz = null;
      }
      t1 = this._engine$_m4storage;
      t2 = t1[0];
      if (typeof sx !== "number")
        return H.iae(sx);
      t1[0] = t2 * sx;
      t1[1] = t1[1] * sx;
      t1[2] = t1[2] * sx;
      t1[3] = t1[3] * sx;
      t2 = t1[4];
      if (typeof sy !== "number")
        return H.iae(sy);
      t1[4] = t2 * sy;
      t1[5] = t1[5] * sy;
      t1[6] = t1[6] * sy;
      t1[7] = t1[7] * sy;
      t2 = t1[8];
      if (typeof sz !== "number")
        return H.iae(sz);
      t1[8] = t2 * sz;
      t1[9] = t1[9] * sz;
      t1[10] = t1[10] * sz;
      t1[11] = t1[11] * sz;
      t1[12] = t1[12];
      t1[13] = t1[13];
      t1[14] = t1[14];
      t1[15] = t1[15];
    },
    scale$2: function($receiver, x, y) {
      return this.scale$3($receiver, x, y, null);
    },
    setIdentity$0: function() {
      var t1 = this._engine$_m4storage;
      t1[0] = 1;
      t1[1] = 0;
      t1[2] = 0;
      t1[3] = 0;
      t1[4] = 0;
      t1[5] = 1;
      t1[6] = 0;
      t1[7] = 0;
      t1[8] = 0;
      t1[9] = 0;
      t1[10] = 1;
      t1[11] = 0;
      t1[12] = 0;
      t1[13] = 0;
      t1[14] = 0;
      t1[15] = 1;
    },
    $mul: function(_, arg) {
      var t1;
      if (typeof arg === "number") {
        t1 = new T.Matrix40(new Float64Array(16));
        t1.setFrom$1(this);
        t1.scale$3(0, arg, null, null);
        return t1;
      }
      if (arg instanceof T.Matrix40)
        return this.multiplied$1(arg);
      throw H.wrapException(P.ArgumentError$(arg));
    },
    isIdentity$0: function(_) {
      var t1 = this._engine$_m4storage;
      return t1[0] === 1 && t1[1] === 0 && t1[2] === 0 && t1[3] === 0 && t1[4] === 0 && t1[5] === 1 && t1[6] === 0 && t1[7] === 0 && t1[8] === 0 && t1[9] === 0 && t1[10] === 1 && t1[11] === 0 && t1[12] === 0 && t1[13] === 0 && t1[14] === 0 && t1[15] === 1;
    },
    rotate$2: function(_, axis, angle) {
      var m23, m31, m32, m33, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13,
        len = Math.sqrt(axis.get$length2()),
        axisStorage = axis._engine$_v3storage,
        x = axisStorage[0] / len,
        y = axisStorage[1] / len,
        z = axisStorage[2] / len,
        c = Math.cos(H.checkNum(angle)),
        s = Math.sin(H.checkNum(angle)),
        $C = 1 - c,
        m11 = x * x * $C + c,
        t1 = z * s,
        m12 = x * y * $C - t1,
        t2 = y * s,
        m13 = x * z * $C + t2,
        m21 = y * x * $C + t1,
        m22 = y * y * $C + c;
      t1 = x * s;
      m23 = y * z * $C - t1;
      m31 = z * x * $C - t2;
      m32 = z * y * $C + t1;
      m33 = z * z * $C + c;
      t1 = this._engine$_m4storage;
      t2 = t1[0];
      t3 = t1[4];
      t4 = t1[8];
      t5 = t1[1];
      t6 = t1[5];
      t7 = t1[9];
      t8 = t1[2];
      t9 = t1[6];
      t10 = t1[10];
      t11 = t1[3];
      t12 = t1[7];
      t13 = t1[11];
      t1[0] = t2 * m11 + t3 * m21 + t4 * m31;
      t1[1] = t5 * m11 + t6 * m21 + t7 * m31;
      t1[2] = t8 * m11 + t9 * m21 + t10 * m31;
      t1[3] = t11 * m11 + t12 * m21 + t13 * m31;
      t1[4] = t2 * m12 + t3 * m22 + t4 * m32;
      t1[5] = t5 * m12 + t6 * m22 + t7 * m32;
      t1[6] = t8 * m12 + t9 * m22 + t10 * m32;
      t1[7] = t11 * m12 + t12 * m22 + t13 * m32;
      t1[8] = t2 * m13 + t3 * m23 + t4 * m33;
      t1[9] = t5 * m13 + t6 * m23 + t7 * m33;
      t1[10] = t8 * m13 + t9 * m23 + t10 * m33;
      t1[11] = t11 * m13 + t12 * m23 + t13 * m33;
    },
    setTranslationRaw$3: function(x, y, z) {
      var t1 = this._engine$_m4storage;
      t1[14] = z;
      (t1 && C.NativeFloat64List_methods).$indexSet(t1, 13, y);
      C.NativeFloat64List_methods.$indexSet(t1, 12, x);
    },
    copyInverse$1: function(arg) {
      var invDet, t1, t2, t3,
        argStorage = arg._engine$_m4storage,
        a00 = argStorage[0],
        a01 = argStorage[1],
        a02 = argStorage[2],
        a03 = argStorage[3],
        a10 = argStorage[4],
        a11 = argStorage[5],
        a12 = argStorage[6],
        a13 = argStorage[7],
        a20 = argStorage[8],
        a21 = argStorage[9],
        a22 = argStorage[10],
        a23 = argStorage[11],
        a30 = argStorage[12],
        a31 = argStorage[13],
        a32 = argStorage[14],
        a33 = argStorage[15],
        b00 = a00 * a11 - a01 * a10,
        b01 = a00 * a12 - a02 * a10,
        b02 = a00 * a13 - a03 * a10,
        b03 = a01 * a12 - a02 * a11,
        b04 = a01 * a13 - a03 * a11,
        b05 = a02 * a13 - a03 * a12,
        b06 = a20 * a31 - a21 * a30,
        b07 = a20 * a32 - a22 * a30,
        b08 = a20 * a33 - a23 * a30,
        b09 = a21 * a32 - a22 * a31,
        b10 = a21 * a33 - a23 * a31,
        b11 = a22 * a33 - a23 * a32,
        det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;
      if (det === 0) {
        this.setFrom$1(arg);
        return 0;
      }
      invDet = 1 / det;
      t1 = this._engine$_m4storage;
      t1[0] = (a11 * b11 - a12 * b10 + a13 * b09) * invDet;
      t1[1] = (-a01 * b11 + a02 * b10 - a03 * b09) * invDet;
      t1[2] = (a31 * b05 - a32 * b04 + a33 * b03) * invDet;
      t1[3] = (-a21 * b05 + a22 * b04 - a23 * b03) * invDet;
      t2 = -a10;
      t1[4] = (t2 * b11 + a12 * b08 - a13 * b07) * invDet;
      t1[5] = (a00 * b11 - a02 * b08 + a03 * b07) * invDet;
      t3 = -a30;
      t1[6] = (t3 * b05 + a32 * b02 - a33 * b01) * invDet;
      t1[7] = (a20 * b05 - a22 * b02 + a23 * b01) * invDet;
      t1[8] = (a10 * b10 - a11 * b08 + a13 * b06) * invDet;
      t1[9] = (-a00 * b10 + a01 * b08 - a03 * b06) * invDet;
      t1[10] = (a30 * b04 - a31 * b02 + a33 * b00) * invDet;
      t1[11] = (-a20 * b04 + a21 * b02 - a23 * b00) * invDet;
      t1[12] = (t2 * b09 + a11 * b07 - a12 * b06) * invDet;
      t1[13] = (a00 * b09 - a01 * b07 + a02 * b06) * invDet;
      t1[14] = (t3 * b03 + a31 * b01 - a32 * b00) * invDet;
      t1[15] = (a20 * b03 - a21 * b01 + a22 * b00) * invDet;
      return det;
    },
    multiply$1: function(_, arg) {
      var t1 = this._engine$_m4storage,
        m00 = t1[0],
        m01 = t1[4],
        m02 = t1[8],
        m03 = t1[12],
        m10 = t1[1],
        m11 = t1[5],
        m12 = t1[9],
        m13 = t1[13],
        m20 = t1[2],
        m21 = t1[6],
        m22 = t1[10],
        m23 = t1[14],
        m30 = t1[3],
        m31 = t1[7],
        m32 = t1[11],
        m33 = t1[15],
        argStorage = arg._engine$_m4storage,
        n00 = argStorage[0],
        n01 = argStorage[4],
        n02 = argStorage[8],
        n03 = argStorage[12],
        n10 = argStorage[1],
        n11 = argStorage[5],
        n12 = argStorage[9],
        n13 = argStorage[13],
        n20 = argStorage[2],
        n21 = argStorage[6],
        n22 = argStorage[10],
        n23 = argStorage[14],
        n30 = argStorage[3],
        n31 = argStorage[7],
        n32 = argStorage[11],
        n33 = argStorage[15];
      t1[0] = m00 * n00 + m01 * n10 + m02 * n20 + m03 * n30;
      t1[4] = m00 * n01 + m01 * n11 + m02 * n21 + m03 * n31;
      t1[8] = m00 * n02 + m01 * n12 + m02 * n22 + m03 * n32;
      t1[12] = m00 * n03 + m01 * n13 + m02 * n23 + m03 * n33;
      t1[1] = m10 * n00 + m11 * n10 + m12 * n20 + m13 * n30;
      t1[5] = m10 * n01 + m11 * n11 + m12 * n21 + m13 * n31;
      t1[9] = m10 * n02 + m11 * n12 + m12 * n22 + m13 * n32;
      t1[13] = m10 * n03 + m11 * n13 + m12 * n23 + m13 * n33;
      t1[2] = m20 * n00 + m21 * n10 + m22 * n20 + m23 * n30;
      t1[6] = m20 * n01 + m21 * n11 + m22 * n21 + m23 * n31;
      t1[10] = m20 * n02 + m21 * n12 + m22 * n22 + m23 * n32;
      t1[14] = m20 * n03 + m21 * n13 + m22 * n23 + m23 * n33;
      t1[3] = m30 * n00 + m31 * n10 + m32 * n20 + m33 * n30;
      t1[7] = m30 * n01 + m31 * n11 + m32 * n21 + m33 * n31;
      t1[11] = m30 * n02 + m31 * n12 + m32 * n22 + m33 * n32;
      t1[15] = m30 * n03 + m31 * n13 + m32 * n23 + m33 * n33;
    },
    multiplied$1: function(arg) {
      var t1 = new T.Matrix40(new Float64Array(16));
      t1.setFrom$1(this);
      t1.multiply$1(0, arg);
      return t1;
    },
    transform3$1: function(arg) {
      var argStorage = arg._engine$_v3storage,
        t1 = this._engine$_m4storage,
        t2 = t1[0],
        t3 = argStorage[0],
        t4 = t1[4],
        t5 = argStorage[1],
        t6 = t1[8],
        t7 = argStorage[2],
        t8 = t1[12],
        t9 = t1[1],
        t10 = t1[5],
        t11 = t1[9],
        t12 = t1[13],
        t13 = t1[2],
        t14 = t1[6],
        t15 = t1[10];
      t1 = t1[14];
      argStorage[0] = t2 * t3 + t4 * t5 + t6 * t7 + t8;
      argStorage[1] = t9 * t3 + t10 * t5 + t11 * t7 + t12;
      argStorage[2] = t13 * t3 + t14 * t5 + t15 * t7 + t1;
      return arg;
    }
  };
  T.Vector30.prototype = {
    setValues$3: function(x_, y_, z_) {
      var t1 = this._engine$_v3storage;
      C.NativeFloat64List_methods.$indexSet(t1, 0, x_);
      C.NativeFloat64List_methods.$indexSet(t1, 1, y_);
      t1[2] = z_;
    },
    $index: function(_, i) {
      var t1;
      H.intTypeCheck(i);
      t1 = this._engine$_v3storage;
      if (i < 0 || i >= 3)
        return H.ioore(t1, i);
      return t1[i];
    },
    $indexSet: function(_, i, v) {
      C.NativeFloat64List_methods.$indexSet(this._engine$_v3storage, i, v);
    },
    get$length: function(_) {
      var t1 = this._engine$_v3storage,
        t2 = t1[0],
        t3 = t1[1];
      t1 = t1[2];
      return Math.sqrt(t2 * t2 + t3 * t3 + t1 * t1);
    },
    get$length2: function() {
      var t1 = this._engine$_v3storage,
        t2 = t1[0],
        t3 = t1[1];
      t1 = t1[2];
      return t2 * t2 + t3 * t3 + t1 * t1;
    },
    add$1: function(_, arg) {
      var argStorage = arg.get$_engine$_v3storage(),
        t1 = this._engine$_v3storage;
      t1[0] = C.JSNumber_methods.$add(t1[0], argStorage.$index(0, 0));
      t1[1] = C.JSNumber_methods.$add(t1[1], argStorage.$index(0, 1));
      t1[2] = C.JSNumber_methods.$add(t1[2], argStorage.$index(0, 2));
    }
  };
  T._BitmapCanvas_EngineCanvas_SaveStackTracking.prototype = {
    set$_clipStack: function(_clipStack) {
      this.SaveStackTracking__clipStack = H.assertSubtype(_clipStack, "$isList", [T._SaveClipEntry], "$asList");
    }
  };
  T._DomCanvas_EngineCanvas_SaveElementStackTracking.prototype = {};
  Q.LocationStrategy.prototype = {};
  Q.HashLocationStrategy.prototype = {
    onPopState$1: function(_, fn) {
      H.functionTypeCheck(fn, {func: 1, args: [W.Event]});
      C.Window_methods.addEventListener$2(window, "popstate", fn);
      return new Q.HashLocationStrategy_onPopState_closure(this, fn);
    },
    prepareExternalUrl$1: function(url) {
      return url.length === 0 ? H.S(window.location.pathname) + H.S(window.location.search) : "#" + url;
    },
    _waitForPopState$0: function() {
      var t1 = {},
        t2 = -1,
        t3 = new P._Future($.Zone__current, [t2]);
      t1.unsubscribe = null;
      t1.unsubscribe = this.onPopState$1(0, new Q.HashLocationStrategy__waitForPopState_closure(t1, new P._AsyncCompleter(t3, [t2])));
      return t3;
    }
  };
  Q.HashLocationStrategy_onPopState_closure.prototype = {
    call$0: function() {
      var t1 = H.functionTypeCheck(this.fn, {func: 1, args: [W.Event]});
      C.Window_methods.removeEventListener$2(window, "popstate", t1);
      return;
    },
    $signature: 1
  };
  Q.HashLocationStrategy__waitForPopState_closure.prototype = {
    call$1: function(_) {
      H.interceptedTypeCheck(_, "$isEvent");
      this._box_0.unsubscribe.call$0();
      this.completer.complete$0(0);
    },
    $signature: 2
  };
  Q.PlatformLocation.prototype = {};
  Q.BrowserPlatformLocation.prototype = {};
  Q.ClipOp.prototype = {
    toString$0: function(_) {
      return this._ui$_name;
    }
  };
  Q.PictureRecorder.prototype = {
    endRecording$0: function() {
      var _this = this;
      if (!_this._isRecording)
        return;
      _this._isRecording = false;
      return new Q.Picture(_this._ui$_canvas, _this.cullRect);
    }
  };
  Q.Canvas.prototype = {
    save$0: function(_) {
      var t1 = this._ui$_canvas;
      t1._paintBounds.saveTransformsAndClip$0();
      C.JSArray_methods.add$1(t1._engine$_commands, C.C_PaintSave);
      ++t1.saveCount;
    },
    saveLayer$2: function(bounds, paint) {
      var t1 = this._ui$_canvas;
      t1._hasArbitraryPaint = true;
      C.JSArray_methods.add$1(t1._engine$_commands, C.C_PaintSave);
      t1._paintBounds.saveTransformsAndClip$0();
      ++t1.saveCount;
    },
    restore$0: function(_) {
      var clipRect,
        t1 = this._ui$_canvas,
        t2 = t1._paintBounds,
        t3 = t2._transforms;
      if (0 >= t3.length)
        return H.ioore(t3, -1);
      t2._currentMatrix = t3.pop();
      t3 = t2._clipStack;
      if (0 >= t3.length)
        return H.ioore(t3, -1);
      clipRect = t3.pop();
      if (clipRect != null) {
        t2._currentClipLeft = clipRect.left;
        t2._currentClipTop = clipRect.top;
        t2._currentClipRight = clipRect.right;
        t2._currentClipBottom = clipRect.bottom;
        t2._clipRectInitialized = true;
      } else if (t2._clipRectInitialized)
        t2._clipRectInitialized = false;
      t2 = t1._engine$_commands;
      if (t2.length !== 0 && !!C.JSArray_methods.get$last(t2).$isPaintSave) {
        if (0 >= t2.length)
          return H.ioore(t2, -1);
        t2.pop();
      } else
        C.JSArray_methods.add$1(t2, C.C_PaintRestore);
      --t1.saveCount;
    },
    translate$2: function(_, dx, dy) {
      var t1 = this._ui$_canvas,
        t2 = t1._paintBounds;
      if (dx !== 0 || dy !== 0)
        t2._currentMatrixIsIdentity = false;
      t2._currentMatrix.translate$2(0, dx, dy);
      C.JSArray_methods.add$1(t1._engine$_commands, new T.PaintTranslate(dx, dy));
    },
    scale$2: function(_, sx, sy) {
      var t1 = this._ui$_canvas,
        t2 = t1._paintBounds;
      if (sx !== 1 || sy !== 1)
        t2._currentMatrixIsIdentity = false;
      t2._currentMatrix.scale$2(0, sx, sy);
      C.JSArray_methods.add$1(t1._engine$_commands, new T.PaintScale(sx, sy));
      return;
    },
    rotate$1: function(_, radians) {
      var cosAngle, sinAngle, t3, t4, t5, t6, t7, t8, t9, t10, t11,
        t1 = this._ui$_canvas,
        t2 = t1._paintBounds;
      if (radians !== 0)
        t2._currentMatrixIsIdentity = false;
      t2 = t2._currentMatrix;
      t2.toString;
      cosAngle = Math.cos(H.checkNum(radians));
      sinAngle = Math.sin(H.checkNum(radians));
      t2 = t2._engine$_m4storage;
      t3 = t2[0];
      t4 = t2[4];
      t5 = t2[1];
      t6 = t2[5];
      t7 = t2[2];
      t8 = t2[6];
      t9 = t2[3];
      t10 = t2[7];
      t11 = -sinAngle;
      t2[0] = t3 * cosAngle + t4 * sinAngle;
      t2[1] = t5 * cosAngle + t6 * sinAngle;
      t2[2] = t7 * cosAngle + t8 * sinAngle;
      t2[3] = t9 * cosAngle + t10 * sinAngle;
      t2[4] = t3 * t11 + t4 * cosAngle;
      t2[5] = t5 * t11 + t6 * cosAngle;
      t2[6] = t7 * t11 + t8 * cosAngle;
      t2[7] = t9 * t11 + t10 * cosAngle;
      C.JSArray_methods.add$1(t1._engine$_commands, new T.PaintRotate(radians));
    },
    transform$1: function(_, matrix4) {
      var t1 = this._ui$_canvas,
        t2 = t1._paintBounds;
      t2._currentMatrix.multiply$1(0, new T.Matrix40(matrix4));
      t2._currentMatrixIsIdentity = t2._currentMatrix.isIdentity$0(0);
      C.JSArray_methods.add$1(t1._engine$_commands, new T.PaintTransform(matrix4));
    },
    clipRect$3$clipOp$doAntiAlias: function(rect, clipOp, doAntiAlias) {
      var t1 = this._ui$_canvas;
      t1._paintBounds.clipRect$1(rect);
      t1._hasArbitraryPaint = true;
      C.JSArray_methods.add$1(t1._engine$_commands, new T.PaintClipRect(rect));
    },
    clipRect$1: function(rect) {
      return this.clipRect$3$clipOp$doAntiAlias(rect, C.ClipOp_1, true);
    },
    clipRect$2$doAntiAlias: function(rect, doAntiAlias) {
      return this.clipRect$3$clipOp$doAntiAlias(rect, C.ClipOp_1, doAntiAlias);
    },
    clipRRect$2$doAntiAlias: function(rrect, doAntiAlias) {
      var t1 = this._ui$_canvas;
      t1._paintBounds.clipRect$1(new Q.Rect(rrect.left, rrect.top, rrect.right, rrect.bottom));
      t1._hasArbitraryPaint = true;
      C.JSArray_methods.add$1(t1._engine$_commands, new T.PaintClipRRect(rrect));
    },
    clipRRect$1: function(rrect) {
      return this.clipRRect$2$doAntiAlias(rrect, true);
    },
    clipPath$2$doAntiAlias: function(_, path, doAntiAlias) {
      var t1 = this._ui$_canvas;
      t1._paintBounds.clipRect$1(path.getBounds$0(0));
      t1._hasArbitraryPaint = true;
      C.JSArray_methods.add$1(t1._engine$_commands, new T.PaintClipPath(path));
    },
    clipPath$1: function($receiver, path) {
      return this.clipPath$2$doAntiAlias($receiver, path, true);
    },
    drawRect$2: function(rect, paint) {
      var t2,
        t1 = this._ui$_canvas;
      t1.toString;
      if (paint._paintData.shader != null)
        t1._hasArbitraryPaint = true;
      t1._didDraw = true;
      paint.get$strokeWidth();
      t2 = paint.get$strokeWidth();
      if (t2 !== 0)
        t1._paintBounds.grow$1(rect.inflate$1(paint.get$strokeWidth() / 2));
      else
        t1._paintBounds.grow$1(rect);
      t1 = t1._engine$_commands;
      paint._frozen = true;
      C.JSArray_methods.add$1(t1, new T.PaintDrawRect(rect, paint._paintData));
    },
    drawRRect$2: function(rrect, paint) {
      var strokeWidth, t2, t3, t4, t5, t6,
        t1 = this._ui$_canvas;
      t1._didDraw = t1._hasArbitraryPaint = true;
      paint.get$strokeWidth();
      strokeWidth = paint.get$strokeWidth();
      t2 = rrect.left;
      t3 = rrect.right;
      t4 = Math.min(H.checkNum(t2), H.checkNum(t3));
      t3 = Math.max(H.checkNum(t2), H.checkNum(t3));
      t2 = rrect.top;
      t5 = rrect.bottom;
      t6 = Math.min(H.checkNum(t2), H.checkNum(t5));
      t5 = Math.max(H.checkNum(t2), H.checkNum(t5));
      t1._paintBounds.growLTRB$4(t4 - strokeWidth, t6 - strokeWidth, t3 + strokeWidth, t5 + strokeWidth);
      t1 = t1._engine$_commands;
      paint._frozen = true;
      C.JSArray_methods.add$1(t1, new T.PaintDrawRRect(rrect, paint._paintData));
    },
    drawDRRect$3: function(outer, inner, paint) {
      this._ui$_canvas.drawDRRect$3(outer, inner, paint);
    },
    drawCircle$3: function(c, radius, paint) {
      var strokeWidth, t2, t3, t4,
        t1 = this._ui$_canvas;
      t1._didDraw = t1._hasArbitraryPaint = true;
      paint.get$strokeWidth();
      strokeWidth = paint.get$strokeWidth();
      t2 = t1._paintBounds;
      t3 = c._dx;
      if (typeof t3 !== "number")
        return t3.$sub();
      if (typeof radius !== "number")
        return H.iae(radius);
      t4 = c._dy;
      if (typeof t4 !== "number")
        return t4.$sub();
      t2.growLTRB$4(t3 - radius - strokeWidth, t4 - radius - strokeWidth, t3 + radius + strokeWidth, t4 + radius + strokeWidth);
      t1 = t1._engine$_commands;
      paint._frozen = true;
      C.JSArray_methods.add$1(t1, new T.PaintDrawCircle(c, radius, paint._paintData));
    },
    drawPath$2: function(path, paint) {
      var pathBounds,
        t1 = this._ui$_canvas;
      t1._didDraw = t1._hasArbitraryPaint = true;
      pathBounds = path.getBounds$0(0);
      paint.get$strokeWidth();
      pathBounds = pathBounds.inflate$1(paint.get$strokeWidth());
      t1._paintBounds.grow$1(pathBounds);
      t1 = t1._engine$_commands;
      paint._frozen = true;
      C.JSArray_methods.add$1(t1, new T.PaintDrawPath(path, paint._paintData));
    },
    drawParagraph$2: function(paragraph, offset) {
      var left, $top, t2, t3, t4,
        t1 = this._ui$_canvas;
      t1._didDraw = true;
      left = offset._dx;
      $top = offset._dy;
      t2 = t1._paintBounds;
      t3 = paragraph._width;
      if (typeof left !== "number")
        return left.$add();
      if (typeof t3 !== "number")
        return H.iae(t3);
      t4 = paragraph._height;
      if (typeof $top !== "number")
        return $top.$add();
      t2.growLTRB$4(left, $top, left + t3, $top + t4);
      C.JSArray_methods.add$1(t1._engine$_commands, new T.PaintDrawParagraph(paragraph, offset));
    },
    drawShadow$4: function(path, color, elevation, transparentOccluder) {
      var shadowRect,
        t1 = this._ui$_canvas;
      t1._didDraw = t1._hasArbitraryPaint = true;
      shadowRect = T.ElevationShadow_computeShadowRect(path.getBounds$0(0), elevation);
      t1._paintBounds.grow$1(shadowRect);
      C.JSArray_methods.add$1(t1._engine$_commands, new T.PaintDrawShadow(path, color, elevation, transparentOccluder));
    }
  };
  Q.Picture.prototype = {};
  Q.PathFillType.prototype = {
    toString$0: function(_) {
      return this._ui$_name;
    }
  };
  Q.Path.prototype = {
    get$_commands: function() {
      var t1 = this.subpaths;
      t1 = t1.length === 0 ? null : C.JSArray_methods.get$last(t1);
      return t1 == null ? null : t1.commands;
    },
    _openNewSubpath$2: function(x, y) {
      var t1 = this.subpaths;
      C.JSArray_methods.add$1(t1, new T.Subpath(x, y, H.setRuntimeTypeInfo([], [T.PathCommand])));
      (t1.length === 0 ? null : C.JSArray_methods.get$last(t1)).currentX = x;
      (t1.length === 0 ? null : C.JSArray_methods.get$last(t1)).currentY = y;
    },
    moveTo$2: function(_, x, y) {
      var t1;
      this._openNewSubpath$2(x, y);
      t1 = this.get$_commands();
      (t1 && C.JSArray_methods).add$1(t1, new T.MoveTo(x, y, 0));
    },
    lineTo$2: function(_, x, y) {
      var t1 = this.get$_commands();
      (t1 && C.JSArray_methods).add$1(t1, new T.LineTo(x, y, 1));
      t1 = this.subpaths;
      (t1.length === 0 ? null : C.JSArray_methods.get$last(t1)).currentX = x;
      (t1.length === 0 ? null : C.JSArray_methods.get$last(t1)).currentY = y;
    },
    addRect$1: function(rect) {
      var t3, t4, t5,
        t1 = rect.left,
        t2 = rect.top;
      this._openNewSubpath$2(t1, t2);
      t3 = this.get$_commands();
      t4 = rect.right;
      if (typeof t4 !== "number")
        return t4.$sub();
      if (typeof t1 !== "number")
        return H.iae(t1);
      t5 = rect.bottom;
      if (typeof t5 !== "number")
        return t5.$sub();
      if (typeof t2 !== "number")
        return H.iae(t2);
      (t3 && C.JSArray_methods).add$1(t3, new T.RectCommand(t1, t2, t4 - t1, t5 - t2, 6));
    },
    addOval$1: function(oval) {
      var radiusX, t3, t4, t5,
        center = oval.get$center(),
        t1 = oval.right,
        t2 = oval.left;
      if (typeof t1 !== "number")
        return t1.$sub();
      if (typeof t2 !== "number")
        return H.iae(t2);
      radiusX = (t1 - t2) / 2;
      t2 = oval.bottom;
      t1 = oval.top;
      if (typeof t2 !== "number")
        return t2.$sub();
      if (typeof t1 !== "number")
        return H.iae(t1);
      t3 = center._dx;
      if (typeof t3 !== "number")
        return t3.$add();
      t4 = center._dy;
      this._openNewSubpath$2(t3 + radiusX, t4);
      t5 = this.get$_commands();
      (t5 && C.JSArray_methods).add$1(t5, new T.Ellipse(t3, t4, radiusX, (t2 - t1) / 2, 0, 0, 6.283185307179586, false, 2));
    },
    addRRect$1: function(rrect) {
      var t1, t2,
        leftRadius = Math.max(H.checkNum(rrect.blRadiusX), H.checkNum(rrect.tlRadiusX));
      Math.max(H.checkNum(rrect.trRadiusX), H.checkNum(rrect.brRadiusX));
      t1 = rrect.left;
      if (typeof t1 !== "number")
        return t1.$add();
      t2 = rrect.right;
      if (typeof t2 !== "number")
        return t2.$sub();
      this._openNewSubpath$2(t1 + leftRadius, rrect.top);
      t1 = this.get$_commands();
      (t1 && C.JSArray_methods).add$1(t1, new T.RRectCommand(rrect, 7));
    },
    contains$1: function(_, point) {
      var pointX, pointY, t2, cmd, rRect, t3, t4, t5, t6, size, result,
        t1 = this.subpaths,
        subPathCount = t1.length;
      if (subPathCount === 0)
        return false;
      pointX = point._dx;
      pointY = point._dy;
      if (subPathCount === 1) {
        if (0 >= subPathCount)
          return H.ioore(t1, 0);
        t1 = t1[0].commands;
        t2 = t1.length;
        if (t2 === 1) {
          if (0 >= t2)
            return H.ioore(t1, 0);
          cmd = t1[0];
          if (!!cmd.$isRectCommand) {
            t1 = cmd.y;
            if (typeof pointY !== "number")
              return pointY.$lt();
            if (typeof t1 !== "number")
              return H.iae(t1);
            if (pointY < t1 || pointY > t1 + cmd.height)
              return false;
            t1 = cmd.x;
            if (typeof pointX !== "number")
              return pointX.$lt();
            if (typeof t1 !== "number")
              return H.iae(t1);
            if (pointX < t1 || pointX > t1 + cmd.width)
              return false;
            return true;
          } else if (!!cmd.$isRRectCommand) {
            rRect = cmd.rrect;
            t1 = rRect.top;
            if (typeof pointY !== "number")
              return pointY.$lt();
            if (typeof t1 !== "number")
              return H.iae(t1);
            if (!(pointY < t1)) {
              t2 = rRect.bottom;
              if (typeof t2 !== "number")
                return H.iae(t2);
              t2 = pointY > t2;
            } else
              t2 = true;
            if (t2)
              return false;
            t2 = rRect.left;
            if (typeof pointX !== "number")
              return pointX.$lt();
            if (typeof t2 !== "number")
              return H.iae(t2);
            if (!(pointX < t2)) {
              t3 = rRect.right;
              if (typeof t3 !== "number")
                return H.iae(t3);
              t3 = pointX > t3;
            } else
              t3 = true;
            if (t3)
              return false;
            t3 = rRect.tlRadiusX;
            if (typeof t3 !== "number")
              return H.iae(t3);
            t4 = t2 + t3;
            if (pointX < t4) {
              t5 = rRect.tlRadiusY;
              if (typeof t5 !== "number")
                return H.iae(t5);
              t5 = pointY < t1 + t5;
            } else
              t5 = false;
            if (t5) {
              t2 = rRect.tlRadiusY;
              if (typeof t2 !== "number")
                return H.iae(t2);
              return Q._ellipseContains(pointX, pointY, t4, t1 + t2, t3, t2);
            } else {
              t3 = rRect.right;
              t4 = rRect.trRadiusX;
              if (typeof t3 !== "number")
                return t3.$sub();
              if (typeof t4 !== "number")
                return H.iae(t4);
              t5 = t3 - t4;
              if (pointX >= t5) {
                t6 = rRect.trRadiusY;
                if (typeof t6 !== "number")
                  return H.iae(t6);
                t6 = pointY < t1 + t6;
              } else
                t6 = false;
              if (t6) {
                t2 = rRect.trRadiusY;
                if (typeof t2 !== "number")
                  return H.iae(t2);
                return Q._ellipseContains(pointX, pointY, t5, t1 + t2, t4, t2);
              } else {
                t1 = rRect.brRadiusX;
                if (typeof t1 !== "number")
                  return H.iae(t1);
                t1 = t3 - t1;
                if (pointX >= t1) {
                  t3 = rRect.bottom;
                  t5 = rRect.brRadiusY;
                  if (typeof t3 !== "number")
                    return t3.$sub();
                  if (typeof t5 !== "number")
                    return H.iae(t5);
                  t5 = pointY >= t3 - t5;
                  t3 = t5;
                } else
                  t3 = false;
                if (t3) {
                  t2 = rRect.bottom;
                  t3 = rRect.brRadiusY;
                  if (typeof t2 !== "number")
                    return t2.$sub();
                  if (typeof t3 !== "number")
                    return H.iae(t3);
                  return Q._ellipseContains(pointX, pointY, t1, t2 - t3, t4, rRect.trRadiusY);
                } else {
                  t1 = rRect.blRadiusX;
                  if (typeof t1 !== "number")
                    return H.iae(t1);
                  t1 = t2 + t1;
                  if (pointX < t1) {
                    t2 = rRect.bottom;
                    t3 = rRect.blRadiusY;
                    if (typeof t2 !== "number")
                      return t2.$sub();
                    if (typeof t3 !== "number")
                      return H.iae(t3);
                    t3 = pointY >= t2 - t3;
                    t2 = t3;
                  } else
                    t2 = false;
                  if (t2) {
                    t2 = rRect.bottom;
                    t3 = rRect.blRadiusY;
                    if (typeof t2 !== "number")
                      return t2.$sub();
                    if (typeof t3 !== "number")
                      return H.iae(t3);
                    return Q._ellipseContains(pointX, pointY, t1, t2 - t3, t4, rRect.trRadiusY);
                  }
                }
              }
            }
            return true;
          }
        }
      }
      t1 = $.$get$window();
      size = t1.get$physicalSize().$div(0, t1.devicePixelRatio);
      t1 = $.Path__rawRecorder;
      if (t1 == null) {
        t1 = size._dx;
        t2 = size._dy;
        if (typeof t1 !== "number")
          return H.iae(t1);
        if (typeof t2 !== "number")
          return H.iae(t2);
        t2 = new Q.Rect(0, 0, 0 + t1, 0 + t2);
        t1 = H.interceptedTypeCheck(W._ElementFactoryProvider_createElement_tag("flt-canvas", null), "$isElement0");
        t3 = H.setRuntimeTypeInfo([], [W.Element0]);
        t4 = window.devicePixelRatio;
        t5 = H.setRuntimeTypeInfo([], [T._SaveStackEntry]);
        t6 = new T.Matrix40(new Float64Array(16));
        t6.setIdentity$0();
        t6 = new Q.RawRecordingCanvas(t2, t1, t3, t4, t5, null, t6);
        t6.BitmapCanvas$1(t2);
        $.Path__rawRecorder = t6;
        t1 = t6;
      }
      t1.super$SaveStackTracking$translate(0, -1, -1);
      t1._ctx.translate(-1, -1);
      t1 = $.Path__rawRecorder;
      t2 = new Q.Paint(new Q.PaintData());
      t2.set$color(0, new Q.Color(4278190080));
      t2._frozen = true;
      t1.drawPath$2(this, t2._paintData);
      result = $.Path__rawRecorder._ctx.isPointInPath(pointX, pointY);
      $.Path__rawRecorder.clear$0(0);
      return result;
    },
    shift$1: function(offset) {
      var t1, t2, _i,
        shiftedSubpaths = H.setRuntimeTypeInfo([], [T.Subpath]);
      for (t1 = this.subpaths, t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i)
        C.JSArray_methods.add$1(shiftedSubpaths, t1[_i].shift$1(offset));
      return new Q.Path(shiftedSubpaths, this.fillType);
    },
    getBounds$0: function(_) {
      var t1, t2, ltrbInitialized, left, $top, right, bottom, curX, curY, minX, maxX, minY, maxY, _i, t3, t4, _i0, op, rx, ry, t5, cosVal, sinVal, rxCos, ryCos, rxSin, rySin, leftDeltaX, rightDeltaX, topDeltaY, bottomDeltaY, centerX, centerY, rotatedX, rotatedY, rotatedX0, rotatedY0, cpX, cpY, x2, y2, denom, t10, tprime, t6, extremaX, extremaY, t20, tprime2, extrema2X, extrema2Y, cpX1, cpY1, cpX2, cpY2, endX, endY, a, b, s, t, t7, left0, width, top0, height, rRect;
      for (t1 = this.subpaths, t2 = t1.length, ltrbInitialized = false, left = 0, $top = 0, right = 0, bottom = 0, curX = 0, curY = 0, minX = 0, maxX = 0, minY = 0, maxY = 0, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i)
        for (t3 = t1[_i].commands, t4 = t3.length, _i0 = 0; _i0 < t3.length; t3.length === t4 || (0, H.throwConcurrentModificationError)(t3), ++_i0) {
          op = t3[_i0];
          switch (op.type) {
            case 0:
              H.interceptedTypeCheck(op, "$isMoveTo");
              maxX = op.x;
              maxY = op.y;
              minY = maxY;
              minX = maxX;
              curY = minY;
              curX = minX;
              break;
            case 1:
              H.interceptedTypeCheck(op, "$isLineTo");
              maxX = op.x;
              maxY = op.y;
              minY = maxY;
              minX = maxX;
              curY = minY;
              curX = minX;
              break;
            case 2:
              H.interceptedTypeCheck(op, "$isEllipse");
              rx = op.radiusX;
              ry = op.radiusY;
              t5 = op.rotation;
              cosVal = Math.cos(t5);
              sinVal = Math.sin(t5);
              rxCos = rx * cosVal;
              ryCos = ry * cosVal;
              rxSin = rx * sinVal;
              rySin = ry * sinVal;
              leftDeltaX = rxCos - rySin;
              rightDeltaX = -rxCos - rySin;
              topDeltaY = ryCos + rxSin;
              bottomDeltaY = ryCos - rxSin;
              centerX = op.x;
              centerY = op.y;
              if (typeof centerX !== "number")
                return centerX.$add();
              rotatedX = centerX + leftDeltaX;
              if (typeof centerY !== "number")
                return centerY.$add();
              rotatedY = centerY + topDeltaY;
              rotatedX0 = centerX + rightDeltaX;
              rotatedY0 = centerY + bottomDeltaY;
              minX = Math.min(rotatedX, rotatedX0);
              maxX = Math.max(rotatedX, rotatedX0);
              minY = Math.min(rotatedY, rotatedY0);
              maxY = Math.max(rotatedY, rotatedY0);
              rotatedX = centerX - leftDeltaX;
              rotatedY = centerY - topDeltaY;
              minX = Math.min(minX, rotatedX);
              maxX = Math.max(maxX, rotatedX);
              minY = Math.min(minY, rotatedY);
              maxY = Math.max(maxY, rotatedY);
              rotatedX = centerX - rightDeltaX;
              rotatedY = centerY - bottomDeltaY;
              minX = Math.min(minX, rotatedX);
              maxX = Math.max(maxX, rotatedX);
              minY = Math.min(minY, rotatedY);
              maxY = Math.max(maxY, rotatedY);
              curX = centerX + rx;
              curY = centerY;
              break;
            case 4:
              H.interceptedTypeCheck(op, "$isQuadraticCurveTo");
              cpX = op.get$x1(op);
              cpY = op.get$y1(op);
              x2 = op.get$x2(op);
              y2 = op.get$y2(op);
              minX = Math.min(H.checkNum(curX), H.checkNum(x2));
              minY = Math.min(H.checkNum(curY), H.checkNum(y2));
              maxX = Math.max(H.checkNum(curX), H.checkNum(x2));
              maxY = Math.max(H.checkNum(curY), H.checkNum(y2));
              t5 = C.JSInt_methods.$mul(2, cpX);
              if (typeof curX !== "number")
                return curX.$sub();
              denom = C.JSNumber_methods.$add(curX - t5, x2);
              if (Math.abs(denom) > 1e-9) {
                t10 = C.JSNumber_methods.$sub(curX, cpX) / denom;
                if (t10 >= 0 && t10 <= 1) {
                  tprime = 1 - t10;
                  t5 = tprime * tprime;
                  t6 = 2 * t10 * tprime;
                  t10 *= t10;
                  extremaX = t5 * curX + C.JSNumber_methods.$mul(t6, cpX) + C.JSDouble_methods.$mul(t10, x2);
                  if (typeof curY !== "number")
                    return H.iae(curY);
                  extremaY = t5 * curY + C.JSNumber_methods.$mul(t6, cpY) + C.JSDouble_methods.$mul(t10, y2);
                  minX = Math.min(minX, extremaX);
                  maxX = Math.max(maxX, extremaX);
                  minY = Math.min(minY, extremaY);
                  maxY = Math.max(maxY, extremaY);
                }
              }
              t5 = C.JSInt_methods.$mul(2, cpY);
              if (typeof curY !== "number")
                return curY.$sub();
              denom = C.JSNumber_methods.$add(curY - t5, y2);
              if (Math.abs(denom) > 1e-9) {
                t20 = C.JSNumber_methods.$sub(curY, cpY) / denom;
                if (t20 >= 0 && t20 <= 1) {
                  tprime2 = 1 - t20;
                  t5 = tprime2 * tprime2;
                  t6 = 2 * t20 * tprime2;
                  t20 *= t20;
                  extrema2X = t5 * curX + C.JSNumber_methods.$mul(t6, cpX) + C.JSDouble_methods.$mul(t20, x2);
                  extrema2Y = t5 * curY + C.JSNumber_methods.$mul(t6, cpY) + C.JSDouble_methods.$mul(t20, y2);
                  minX = Math.min(minX, extrema2X);
                  maxX = Math.max(maxX, extrema2X);
                  minY = Math.min(minY, extrema2Y);
                  maxY = Math.max(maxY, extrema2Y);
                }
              }
              curY = y2;
              curX = x2;
              break;
            case 5:
              H.interceptedTypeCheck(op, "$isBezierCurveTo");
              cpX1 = op.x1;
              cpY1 = op.y1;
              cpX2 = op.x2;
              cpY2 = op.y2;
              endX = op.x3;
              endY = op.y3;
              minX = Math.min(H.checkNum(curX), endX);
              minY = Math.min(H.checkNum(curY), endY);
              maxX = Math.max(H.checkNum(curX), endX);
              maxY = Math.max(H.checkNum(curY), endY);
              if (typeof curX !== "number")
                return curX.$lt();
              if (!(curX < cpX1 && cpX1 < cpX2 && cpX2 < endX))
                t5 = curX > cpX1 && cpX1 > cpX2 && cpX2 > endX;
              else
                t5 = true;
              if (!t5) {
                t5 = -curX;
                a = t5 + 3 * (cpX1 - cpX2) + endX;
                b = 2 * (curX - 2 * cpX1 + cpX2);
                s = b * b - 4 * a * (t5 + cpX1);
                if (s >= 0 && Math.abs(a) > 1e-9) {
                  t5 = -b;
                  t6 = 2 * a;
                  if (s === 0) {
                    t = t5 / t6;
                    tprime = 1 - t;
                    if (t >= 0 && t <= 1) {
                      t5 = 3 * tprime;
                      extremaX = tprime * tprime * tprime * curX + t5 * tprime * t * cpX1 + t5 * t * t * cpX2 + t * t * t * endX;
                      minX = Math.min(extremaX, minX);
                      maxX = Math.max(extremaX, maxX);
                    }
                  } else {
                    s = Math.sqrt(s);
                    t = (t5 - s) / t6;
                    tprime = 1 - t;
                    if (t >= 0 && t <= 1) {
                      t7 = 3 * tprime;
                      extremaX = tprime * tprime * tprime * curX + t7 * tprime * t * cpX1 + t7 * t * t * cpX2 + t * t * t * endX;
                      minX = Math.min(extremaX, minX);
                      maxX = Math.max(extremaX, maxX);
                    }
                    t = (t5 + s) / t6;
                    tprime = 1 - t;
                    if (t >= 0 && t <= 1) {
                      t5 = 3 * tprime;
                      extremaX = tprime * tprime * tprime * curX + t5 * tprime * t * cpX1 + t5 * t * t * cpX2 + t * t * t * endX;
                      minX = Math.min(extremaX, minX);
                      maxX = Math.max(extremaX, maxX);
                    }
                  }
                }
              }
              if (typeof curY !== "number")
                return curY.$lt();
              if (!(curY < cpY1 && cpY1 < cpY2 && cpY2 < endY))
                t5 = curY > cpY1 && cpY1 > cpY2 && cpY2 > endY;
              else
                t5 = true;
              if (!t5) {
                t5 = -curY;
                a = t5 + 3 * (cpY1 - cpY2) + endY;
                b = 2 * (curY - 2 * cpY1 + cpY2);
                s = b * b - 4 * a * (t5 + cpY1);
                if (s >= 0 && Math.abs(a) > 1e-9) {
                  t5 = -b;
                  t6 = 2 * a;
                  if (s === 0) {
                    t = t5 / t6;
                    tprime = 1 - t;
                    if (t >= 0 && t <= 1) {
                      t5 = 3 * tprime;
                      extremaY = tprime * tprime * tprime * curY + t5 * tprime * t * cpY1 + t5 * t * t * cpY2 + t * t * t * endY;
                      minY = Math.min(extremaY, minY);
                      maxY = Math.max(extremaY, maxY);
                    }
                  } else {
                    s = Math.sqrt(s);
                    t = (t5 - s) / t6;
                    tprime = 1 - t;
                    if (t >= 0 && t <= 1) {
                      t7 = 3 * tprime;
                      extremaY = tprime * tprime * tprime * curY + t7 * tprime * t * cpY1 + t7 * t * t * cpY2 + t * t * t * endY;
                      minY = Math.min(extremaY, minY);
                      maxY = Math.max(extremaY, maxY);
                    }
                    t = (t5 + s) / t6;
                    tprime = 1 - t;
                    if (t >= 0 && t <= 1) {
                      t5 = 3 * tprime;
                      extremaY = tprime * tprime * tprime * curY + t5 * tprime * t * cpY1 + t5 * t * t * cpY2 + t * t * t * endY;
                      minY = Math.min(extremaY, minY);
                      maxY = Math.max(extremaY, maxY);
                    }
                  }
                }
              }
              break;
            case 6:
              H.interceptedTypeCheck(op, "$isRectCommand");
              left0 = op.x;
              width = op.width;
              if (width < 0) {
                if (typeof left0 !== "number")
                  return left0.$sub();
                left0 -= width;
                width = -width;
              }
              top0 = op.y;
              height = op.height;
              if (height < 0) {
                if (typeof top0 !== "number")
                  return top0.$sub();
                top0 -= height;
                height = -height;
              }
              if (typeof left0 !== "number")
                return left0.$add();
              maxX = left0 + width;
              if (typeof top0 !== "number")
                return top0.$add();
              maxY = top0 + height;
              minY = top0;
              minX = left0;
              curY = minY;
              curX = minX;
              break;
            case 7:
              rRect = H.interceptedTypeCheck(op, "$isRRectCommand").rrect;
              minX = rRect.left;
              t5 = rRect.right;
              if (typeof t5 !== "number")
                return t5.$sub();
              if (typeof minX !== "number")
                return H.iae(minX);
              maxX = minX + (t5 - minX);
              minY = rRect.top;
              t5 = rRect.bottom;
              if (typeof t5 !== "number")
                return t5.$sub();
              if (typeof minY !== "number")
                return H.iae(minY);
              maxY = minY + (t5 - minY);
              curY = minY;
              curX = minX;
              break;
            case 3:
            default:
              break;
          }
          if (!ltrbInitialized) {
            bottom = maxY;
            right = maxX;
            $top = minY;
            left = minX;
            ltrbInitialized = true;
          } else {
            left = Math.min(H.checkNum(left), H.checkNum(minX));
            right = Math.max(H.checkNum(right), H.checkNum(maxX));
            $top = Math.min(H.checkNum($top), H.checkNum(minY));
            bottom = Math.max(H.checkNum(bottom), H.checkNum(maxY));
          }
        }
      return ltrbInitialized ? new Q.Rect(left, $top, right, bottom) : C.Rect_0_0_0_0;
    },
    get$webOnlyPathAsRoundedRect: function() {
      var command,
        t1 = this.subpaths,
        t2 = t1.length;
      if (t2 !== 1)
        return;
      if (0 >= t2)
        return H.ioore(t1, 0);
      t1 = t1[0].commands;
      t2 = t1.length;
      if (t2 !== 1)
        return;
      if (0 >= t2)
        return H.ioore(t1, 0);
      command = t1[0];
      return !!command.$isRRectCommand ? command.rrect : null;
    },
    get$webOnlyPathAsRect: function() {
      var command,
        t1 = this.subpaths,
        t2 = t1.length;
      if (t2 !== 1)
        return;
      if (0 >= t2)
        return H.ioore(t1, 0);
      t1 = t1[0].commands;
      t2 = t1.length;
      if (t2 !== 1)
        return;
      if (0 >= t2)
        return H.ioore(t1, 0);
      command = t1[0];
      if (!!command.$isRectCommand) {
        t1 = command.x;
        t2 = command.y;
        if (typeof t1 !== "number")
          return t1.$add();
        if (typeof t2 !== "number")
          return t2.$add();
        t2 = new Q.Rect(t1, t2, t1 + command.width, t2 + command.height);
        t1 = t2;
      } else
        t1 = null;
      return t1;
    },
    get$webOnlyPathAsCircle: function() {
      var command,
        t1 = this.subpaths,
        t2 = t1.length;
      if (t2 !== 1)
        return;
      if (0 >= t2)
        return H.ioore(t1, 0);
      t1 = t1[0].commands;
      t2 = t1.length;
      if (t2 !== 1)
        return;
      if (0 >= t2)
        return H.ioore(t1, 0);
      command = t1[0];
      if (!!command.$isEllipse)
        if (C.JSNumber_methods.$mod(command.endAngle - command.startAngle, 6.283185307179586) === 0)
          return command;
      return;
    },
    toString$0: function(_) {
      var t1 = this.super$Object$toString(0);
      return t1;
    }
  };
  Q.RawRecordingCanvas.prototype = {
    dispose$0: function() {
      this.clear$0(0);
    },
    $isPictureRecorder: 1
  };
  Q.Scene.prototype = {
    dispose$0: function() {
    },
    get$webOnlyRootElement: function() {
      return this.webOnlyRootElement;
    }
  };
  Q.SceneBuilder.prototype = {
    _pushSurface$1: function(surface) {
      var t1 = this._surfaceStack;
      C.JSArray_methods.get$last(t1).appendChild$1(0, surface);
      C.JSArray_methods.add$1(t1, surface);
      return surface;
    },
    pushOffset$3$webOnlyPaintedBy: function(dx, dy, webOnlyPaintedBy) {
      return this._pushSurface$1(new Q.PersistedOffset(dx, dy, H.setRuntimeTypeInfo([], [Q.PersistedSurface]), C.PersistedSurfaceReuseStrategy_0, webOnlyPaintedBy));
    },
    pushTransform$2$webOnlyPaintedBy: function(matrix4, webOnlyPaintedBy) {
      return this._pushSurface$1(new Q.PersistedTransform(matrix4, H.setRuntimeTypeInfo([], [Q.PersistedSurface]), C.PersistedSurfaceReuseStrategy_0, webOnlyPaintedBy));
    },
    pushClipRect$3$clipBehavior$webOnlyPaintedBy: function(rect, clipBehavior, webOnlyPaintedBy) {
      return this._pushSurface$1(new Q.PersistedClipRect(rect, null, H.setRuntimeTypeInfo([], [Q.PersistedSurface]), C.PersistedSurfaceReuseStrategy_0, webOnlyPaintedBy));
    },
    pushClipPath$3$clipBehavior$webOnlyPaintedBy: function(path, clipBehavior, webOnlyPaintedBy) {
      return this._pushSurface$1(new Q._PersistedClipPath(path, H.setRuntimeTypeInfo([], [Q.PersistedSurface]), C.PersistedSurfaceReuseStrategy_0, webOnlyPaintedBy));
    },
    pushOpacity$3$offset$webOnlyPaintedBy: function(alpha, offset, webOnlyPaintedBy) {
      return this._pushSurface$1(new Q.PersistedOpacity(alpha, offset, H.setRuntimeTypeInfo([], [Q.PersistedSurface]), C.PersistedSurfaceReuseStrategy_0, webOnlyPaintedBy));
    },
    pushPhysicalShape$6$clipBehavior$color$elevation$path$shadowColor$webOnlyPaintedBy: function(clipBehavior, color, elevation, path, shadowColor, webOnlyPaintedBy) {
      var t1 = color._value,
        t2 = shadowColor == null ? null : shadowColor._value;
      if (t2 == null)
        t2 = 4278190080;
      return this._pushSurface$1(new Q.PersistedPhysicalShape(path, elevation, new Q.Color((t1 & 4294967295) >>> 0), new Q.Color((t2 & 4294967295) >>> 0), clipBehavior, null, H.setRuntimeTypeInfo([], [Q.PersistedSurface]), C.PersistedSurfaceReuseStrategy_0, webOnlyPaintedBy));
    },
    addRetained$1: function(retainedLayer) {
      H.interceptedTypeCheck(retainedLayer, "$isPersistedContainerSurface");
      if (retainedLayer.rootElement != null)
        retainedLayer.reuseStrategy = C.PersistedSurfaceReuseStrategy_1;
      C.JSArray_methods.get$last(this._surfaceStack).appendChild$1(0, retainedLayer);
    },
    pop$0: function() {
      var t1 = this._surfaceStack;
      if (0 >= t1.length)
        return H.ioore(t1, -1);
      t1.pop();
    },
    addPerformanceOverlay$3$webOnlyPaintedBy: function(enabledOptions, bounds, webOnlyPaintedBy) {
      if (!$._webOnlyDidWarnAboutPerformanceOverlay) {
        $._webOnlyDidWarnAboutPerformanceOverlay = true;
        window;
        if (typeof console != "undefined")
          window.console.warn("The performance overlay isn't supported on the web");
      }
    },
    addPicture$5$isComplexHint$webOnlyPaintedBy$willChangeHint: function(offset, picture, isComplexHint, webOnlyPaintedBy, willChangeHint) {
      var t1,
        hints = isComplexHint ? 1 : 0;
      if (willChangeHint)
        hints |= 2;
      t1 = H.interceptedTypeCheck(Q.standardPictureFactory(webOnlyPaintedBy, offset._dx, offset._dy, picture, hints), "$isPersistedSurface");
      C.JSArray_methods.get$last(this._surfaceStack).appendChild$1(0, t1);
    },
    setRasterizerTracingThreshold$1: function(frameInterval) {
    },
    setCheckerboardRasterCacheImages$1: function(checkerboard) {
    },
    setCheckerboardOffscreenLayers$1: function(checkerboard) {
    },
    build$0: function() {
      var t2, t3, _i, i,
        t1 = this._surfaceStack;
      if ($.SceneBuilder__lastFrameScene == null)
        H.interceptedTypeCheck(C.JSArray_methods.get$first(t1), "$isPersistedScene").build$0();
      else
        H.interceptedTypeCheck(C.JSArray_methods.get$first(t1), "$isPersistedScene").update$1(0, $.SceneBuilder__lastFrameScene);
      t2 = $._paintQueue;
      t3 = t2.length;
      if (t3 !== 0) {
        if (t3 > 1)
          C.JSArray_methods.sort$1(t2, new Q.SceneBuilder_build_closure());
        for (t2 = $._paintQueue, t3 = t2.length, _i = 0; _i < t2.length; t2.length === t3 || (0, H.throwConcurrentModificationError)(t2), ++_i)
          t2[_i].paintCallback.call$0();
        $._paintQueue = H.setRuntimeTypeInfo([], [Q._PaintRequest]);
      }
      t2 = $._retainedSurfaces;
      t3 = t2.length;
      if (t3 !== 0) {
        for (i = 0; i < t3; ++i)
          t2[i].reuseStrategy = C.PersistedSurfaceReuseStrategy_0;
        $._retainedSurfaces = H.setRuntimeTypeInfo([], [Q.PersistedSurface]);
      }
      $.SceneBuilder__lastFrameScene = H.interceptedTypeCheck(C.JSArray_methods.get$first(t1), "$isPersistedScene");
      return new Q.Scene(H.interceptedTypeCheck(C.JSArray_methods.get$first(t1), "$isPersistedScene").rootElement);
    }
  };
  Q.SceneBuilder_build_closure.prototype = {
    call$2: function(a, b) {
      var t1, t2, t3, t4;
      H.interceptedTypeCheck(a, "$is_PaintRequest");
      H.interceptedTypeCheck(b, "$is_PaintRequest");
      t1 = a.canvasSize;
      t2 = t1._dy;
      t1 = t1._dx;
      if (typeof t2 !== "number")
        return t2.$mul();
      if (typeof t1 !== "number")
        return H.iae(t1);
      t3 = b.canvasSize;
      t4 = t3._dy;
      t3 = t3._dx;
      if (typeof t4 !== "number")
        return t4.$mul();
      if (typeof t3 !== "number")
        return H.iae(t3);
      return C.JSNumber_methods.compareTo$1(t4 * t3, t2 * t1);
    },
    $signature: 197
  };
  Q.PersistedSurfaceReuseStrategy.prototype = {
    toString$0: function(_) {
      return this._ui$_name;
    }
  };
  Q.PersistedSurface.prototype = {
    get$childContainer: function() {
      return this.rootElement;
    },
    build$0: function() {
      var _this = this;
      _this.recomputeTransformAndClip$0();
      _this.rootElement = _this.createElement$0(0);
      _this.apply$0();
    },
    adoptElements$1: function(oldSurface) {
      this.rootElement = oldSurface.rootElement;
    },
    update$1: function(_, oldSurface) {
      this.recomputeTransformAndClip$0();
      this.adoptElements$1(oldSurface);
      oldSurface.rootElement = null;
    },
    retain$0: function() {
      this.recomputeTransformAndClip$0();
    },
    recycle$0: function() {
      J.remove$0$ax(this.rootElement);
      this.rootElement = null;
    },
    isTotalMatchFor$1: function(other) {
      var t1, t2, _this = this;
      if (_this.reuseStrategy === C.PersistedSurfaceReuseStrategy_1 || other.reuseStrategy === C.PersistedSurfaceReuseStrategy_1)
        return false;
      if (new H.TypeImpl(H.getRti(other)).$eq(0, new H.TypeImpl(H.getRti(_this)))) {
        t1 = other.paintedBy;
        t2 = _this.paintedBy;
        t1 = (t1 == null ? t2 == null : t1 === t2) && _this._hasExactDescendants$1(other);
      } else
        t1 = false;
      return t1;
    },
    isFuzzyMatchFor$1: function(other) {
      if (this.reuseStrategy === C.PersistedSurfaceReuseStrategy_1 || other.reuseStrategy === C.PersistedSurfaceReuseStrategy_1)
        return false;
      return new H.TypeImpl(H.getRti(other)).$eq(0, new H.TypeImpl(H.getRti(this)));
    },
    _hasExactDescendants$1: function(other) {
      var t3,
        t1 = this._descendants,
        t2 = t1 != null;
      if (!t2 || t1._collection$_length === 0) {
        t3 = other._descendants;
        t3 = t3 == null || t3._collection$_length === 0;
      } else
        t3 = false;
      if (t3)
        return true;
      else if (!t2 || other._descendants == null)
        return false;
      t2 = t1._collection$_length;
      t3 = other._descendants;
      if (t2 !== t3._collection$_length)
        return false;
      return t1.containsAll$1(t3);
    },
    defaultCreateElement$1: function(tagName) {
      var element = H.interceptedTypeCheck(W._ElementFactoryProvider_createElement_tag(tagName, null), "$isElement0"),
        t1 = element.style;
      t1.position = "absolute";
      return element;
    },
    recomputeTransformAndClip$0: function() {
      var t1 = this.parent;
      this._ui$_transform = t1._ui$_transform;
      this._globalClip = t1._globalClip;
    },
    toString$0: function(_) {
      var t1 = this.super$Object$toString(0);
      return t1;
    },
    set$_descendants: function(_descendants) {
      this._descendants = H.assertSubtype(_descendants, "$isSet", [P.Object], "$asSet");
    },
    $isEngineLayer: 1
  };
  Q.PersistedLeafSurface.prototype = {};
  Q.PersistedContainerSurface.prototype = {
    appendChild$1: function(_, child) {
      var t1, t2, t3, container, t4, _this = this;
      C.JSArray_methods.add$1(_this._ui$_children, child);
      child.parent = _this;
      t1 = child.paintedBy;
      t2 = _this.paintedBy;
      if (t1 == null ? t2 != null : t1 !== t2) {
        t3 = P.Object;
        container = _this;
        while (true) {
          if (container != null) {
            t4 = container.paintedBy;
            t4 = t4 == null ? t2 == null : t4 === t2;
          } else
            t4 = false;
          if (!t4)
            break;
          if (container._descendants == null)
            container.set$_descendants(P.LinkedHashSet_LinkedHashSet(t3));
          container._descendants.add$1(0, t1);
          container = container.parent;
        }
      }
    },
    build$0: function() {
      var t1, len, containerElement, i, child;
      this.super$PersistedSurface$build();
      t1 = this._ui$_children;
      len = t1.length;
      containerElement = this.get$childContainer();
      for (i = 0; i < len; ++i) {
        if (i >= t1.length)
          return H.ioore(t1, i);
        child = t1[i];
        if (child.reuseStrategy === C.PersistedSurfaceReuseStrategy_1) {
          C.JSArray_methods.add$1($._retainedSurfaces, child);
          child.retain$0();
        } else
          child.build$0();
        containerElement.appendChild(child.rootElement);
      }
    },
    update$1: function(_, oldContainer) {
      var t1, bottomInNew, t2, bottomInOld, containerElement, insertDomNodeIfMoved, t3, newChild, t4, oldChild, searchPointer, match, candidate, len, i, _this = this, _box_0 = {};
      H.interceptedTypeCheck(oldContainer, "$isPersistedContainerSurface");
      _this.super$PersistedSurface$update(0, oldContainer);
      t1 = _this._ui$_children;
      bottomInNew = t1.length - 1;
      t2 = oldContainer._ui$_children;
      bottomInOld = t2.length - 1;
      containerElement = _this.get$childContainer();
      _box_0.nextSibling = null;
      insertDomNodeIfMoved = new Q.PersistedContainerSurface_update_insertDomNodeIfMoved(_box_0, _this, containerElement);
      while (true) {
        if (!(bottomInNew >= 0 && bottomInOld >= 0))
          break;
        t3 = t1.length;
        if (bottomInNew < 0 || bottomInNew >= t3)
          return H.ioore(t1, bottomInNew);
        newChild = t1[bottomInNew];
        if (newChild.reuseStrategy === C.PersistedSurfaceReuseStrategy_1) {
          insertDomNodeIfMoved.call$1(newChild);
          C.JSArray_methods.add$1($._retainedSurfaces, newChild);
          newChild.retain$0();
        } else {
          t4 = t2.length;
          if (bottomInOld < 0 || bottomInOld >= t4)
            return H.ioore(t2, bottomInOld);
          oldChild = t2[bottomInOld];
          t3 = t3 === 1 && t4 === 1 && oldChild.isFuzzyMatchFor$1(newChild) || oldChild.isTotalMatchFor$1(newChild);
          searchPointer = bottomInOld - 1;
          if (t3) {
            oldChild.rootElement;
            newChild.update$1(0, oldChild);
            bottomInOld = searchPointer;
          } else {
            while (true) {
              if (!(searchPointer >= 0)) {
                match = null;
                break;
              }
              if (searchPointer >= t2.length)
                return H.ioore(t2, searchPointer);
              candidate = t2[searchPointer];
              if (candidate.rootElement != null && candidate.isTotalMatchFor$1(newChild)) {
                match = candidate;
                break;
              }
              --searchPointer;
            }
            if (match != null)
              newChild.update$1(0, match);
            else
              newChild.build$0();
            insertDomNodeIfMoved.call$1(newChild);
          }
        }
        --bottomInNew;
        _box_0.nextSibling = newChild;
      }
      for (; bottomInNew >= 0;) {
        if (bottomInNew >= t1.length)
          return H.ioore(t1, bottomInNew);
        newChild = t1[bottomInNew];
        if (newChild.reuseStrategy === C.PersistedSurfaceReuseStrategy_1) {
          C.JSArray_methods.add$1($._retainedSurfaces, newChild);
          newChild.retain$0();
        } else
          newChild.build$0();
        insertDomNodeIfMoved.call$1(newChild);
        --bottomInNew;
        _box_0.nextSibling = newChild;
      }
      len = t2.length;
      for (i = 0; i < len; ++i) {
        if (i >= t2.length)
          return H.ioore(t2, i);
        oldChild = t2[i];
        if (oldChild.rootElement != null && oldChild.reuseStrategy !== C.PersistedSurfaceReuseStrategy_1)
          oldChild.recycle$0();
      }
    },
    retain$0: function() {
      var t1, len, i;
      this.super$PersistedSurface$retain();
      t1 = this._ui$_children;
      len = t1.length;
      for (i = 0; i < len; ++i) {
        if (i >= t1.length)
          return H.ioore(t1, i);
        t1[i].retain$0();
      }
    },
    recycle$0: function() {
      var t1, i, child;
      for (t1 = this._ui$_children, i = 0; i < t1.length; ++i) {
        child = t1[i];
        if (child.reuseStrategy !== C.PersistedSurfaceReuseStrategy_1)
          child.recycle$0();
      }
      this.super$PersistedSurface$recycle();
    }
  };
  Q.PersistedContainerSurface_update_insertDomNodeIfMoved.prototype = {
    call$1: function(newChild) {
      var t4, moved,
        t1 = newChild.rootElement,
        t2 = t1.parentElement,
        t3 = this.containerElement;
      if (t2 == null ? t3 == null : t2 === t3) {
        t2 = t1.nextElementSibling;
        t4 = this._box_0.nextSibling;
        moved = t2 == null ? (t4 == null ? null : t4.rootElement) != null : t2 !== (t4 == null ? null : t4.rootElement);
      } else
        moved = true;
      if (moved) {
        t2 = this._box_0.nextSibling;
        if (t2 == null)
          t3.appendChild(t1);
        else
          t3.insertBefore(t1, t2.rootElement);
      }
    },
    $signature: 198
  };
  Q.PersistedScene.prototype = {
    isTotalMatchFor$1: function(other) {
      return true;
    },
    recomputeTransformAndClip$0: function() {
      var screenHeight,
        screenWidth = window.innerWidth;
      screenWidth.toString;
      screenHeight = window.innerHeight;
      screenHeight.toString;
      this._globalClip = new Q.Rect(0, 0, screenWidth, screenHeight);
    },
    createElement$0: function(_) {
      return this.defaultCreateElement$1("flt-scene");
    },
    apply$0: function() {
    }
  };
  Q.PersistedTransform.prototype = {
    recomputeTransformAndClip$0: function() {
      var _this = this;
      _this._ui$_transform = _this.parent._ui$_transform.multiplied$1(new T.Matrix40(_this.matrix4));
      _this._globalClip = _this.parent._globalClip;
    },
    createElement$0: function(_) {
      var t1 = this.defaultCreateElement$1("flt-transform"),
        t2 = t1.style;
      C.CssStyleDeclaration_methods._setPropertyHelper$3(t2, (t2 && C.CssStyleDeclaration_methods)._browserPropertyName$1(t2, "transform-origin"), "0 0 0", "");
      return t1;
    },
    apply$0: function() {
      var t1 = this.rootElement.style,
        t2 = T.float64ListToCssTransform(this.matrix4);
      C.CssStyleDeclaration_methods._setPropertyHelper$3(t1, (t1 && C.CssStyleDeclaration_methods)._browserPropertyName$1(t1, "transform"), t2, "");
    },
    update$1: function(_, oldSurface) {
      var t1, t2, matrixChanged, i;
      H.interceptedTypeCheck(oldSurface, "$isPersistedTransform");
      this.super$PersistedContainerSurface$update(0, oldSurface);
      t1 = oldSurface.matrix4;
      t2 = this.matrix4;
      if (t1 === t2)
        return;
      i = 0;
      while (true) {
        if (!(i < 16)) {
          matrixChanged = false;
          break;
        }
        if (t2[i] !== t1[i]) {
          matrixChanged = true;
          break;
        }
        ++i;
      }
      if (matrixChanged) {
        t1 = this.rootElement.style;
        t2 = T.float64ListToCssTransform(t2);
        C.CssStyleDeclaration_methods._setPropertyHelper$3(t1, (t1 && C.CssStyleDeclaration_methods)._browserPropertyName$1(t1, "transform"), t2, "");
      }
    }
  };
  Q.PersistedOffset.prototype = {
    recomputeTransformAndClip$0: function() {
      var t3, _this = this,
        t1 = _this._ui$_transform = _this.parent._ui$_transform,
        t2 = _this.dx;
      if (t2 !== 0 || _this.dy !== 0) {
        t1.toString;
        t3 = new T.Matrix40(new Float64Array(16));
        t3.setFrom$1(t1);
        _this._ui$_transform = t3;
        t3.translate$2(0, t2, _this.dy);
      }
      _this._globalClip = _this.parent._globalClip;
    },
    createElement$0: function(_) {
      var t1 = this.defaultCreateElement$1("flt-offset"),
        t2 = t1.style;
      C.CssStyleDeclaration_methods._setPropertyHelper$3(t2, (t2 && C.CssStyleDeclaration_methods)._browserPropertyName$1(t2, "transform-origin"), "0 0 0", "");
      return t1;
    },
    apply$0: function() {
      var t1 = this.rootElement.style,
        t2 = "translate(" + H.S(this.dx) + "px, " + H.S(this.dy) + "px)";
      C.CssStyleDeclaration_methods._setPropertyHelper$3(t1, (t1 && C.CssStyleDeclaration_methods)._browserPropertyName$1(t1, "transform"), t2, "");
    },
    update$1: function(_, oldSurface) {
      var _this = this;
      H.interceptedTypeCheck(oldSurface, "$isPersistedOffset");
      _this.super$PersistedContainerSurface$update(0, oldSurface);
      if (oldSurface.dx !== _this.dx || oldSurface.dy !== _this.dy)
        _this.apply$0();
    }
  };
  Q._DomClip.prototype = {
    get$childContainer: function() {
      return this._DomClip__childContainer;
    },
    createElement$0: function(_) {
      var t2,
        element = this.defaultCreateElement$1("flt-clip"),
        t1 = element.style;
      t1.overflow = "hidden";
      t1 = H.interceptedTypeCheck(W._ElementFactoryProvider_createElement_tag("flt-clip-interior", null), "$isElement0");
      this._DomClip__childContainer = t1;
      t2 = t1.style;
      t2.position = "absolute";
      element.appendChild(t1);
      return element;
    }
  };
  Q.PersistedClipRect.prototype = {
    recomputeTransformAndClip$0: function() {
      var _this = this,
        t1 = _this.parent,
        t2 = t1._ui$_transform;
      _this._ui$_transform = t2;
      _this._globalClip = t1._globalClip.intersect$1(T.localClipRectToGlobalClip(_this.rect, t2));
    },
    createElement$0: function(_) {
      var t1 = this.super$_DomClip$createElement(0);
      t1.setAttribute("clip-type", "rect");
      return t1;
    },
    apply$0: function() {
      var _s9_ = "transform",
        t1 = this.rootElement.style,
        t2 = this.rect,
        t3 = t2.left,
        t4 = t2.top,
        t5 = "translate(" + H.S(t3) + "px, " + H.S(t4) + "px)";
      C.CssStyleDeclaration_methods._setPropertyHelper$3(t1, (t1 && C.CssStyleDeclaration_methods)._browserPropertyName$1(t1, _s9_), t5, "");
      t5 = t2.right;
      if (typeof t5 !== "number")
        return t5.$sub();
      if (typeof t3 !== "number")
        return H.iae(t3);
      t5 = H.S(t5 - t3) + "px";
      t1.width = t5;
      t2 = t2.bottom;
      if (typeof t2 !== "number")
        return t2.$sub();
      if (typeof t4 !== "number")
        return H.iae(t4);
      t2 = H.S(t2 - t4) + "px";
      t1.height = t2;
      t1 = this._DomClip__childContainer.style;
      t4 = "translate(" + H.S(-t3) + "px, " + H.S(-t4) + "px)";
      C.CssStyleDeclaration_methods._setPropertyHelper$3(t1, (t1 && C.CssStyleDeclaration_methods)._browserPropertyName$1(t1, _s9_), t4, "");
    },
    update$1: function(_, oldSurface) {
      H.interceptedTypeCheck(oldSurface, "$isPersistedClipRect");
      this.super$PersistedContainerSurface$update(0, oldSurface);
      if (!this.rect.$eq(0, oldSurface.rect))
        this.apply$0();
    }
  };
  Q.PersistedOpacity.prototype = {
    recomputeTransformAndClip$0: function() {
      var _this = this,
        t1 = _this._ui$_transform = _this.parent._ui$_transform,
        t2 = _this.offset,
        dx = t2._dx,
        dy = t2._dy;
      if (dx !== 0 || dy !== 0) {
        t1.toString;
        t2 = new T.Matrix40(new Float64Array(16));
        t2.setFrom$1(t1);
        _this._ui$_transform = t2;
        t2.translate$2(0, dx, dy);
      }
      _this._globalClip = _this.parent._globalClip;
    },
    createElement$0: function(_) {
      var t1 = this.defaultCreateElement$1("flt-opacity"),
        t2 = t1.style;
      C.CssStyleDeclaration_methods._setPropertyHelper$3(t2, (t2 && C.CssStyleDeclaration_methods)._browserPropertyName$1(t2, "transform-origin"), "0 0 0", "");
      return t1;
    },
    apply$0: function() {
      var _this = this,
        t1 = _this.rootElement.style,
        t2 = _this.alpha;
      if (typeof t2 !== "number")
        return t2.$div();
      t2 = H.S(t2 / 255);
      C.CssStyleDeclaration_methods._setPropertyHelper$3(t1, (t1 && C.CssStyleDeclaration_methods)._browserPropertyName$1(t1, "opacity"), t2, "");
      t2 = _this.rootElement.style;
      t1 = _this.offset;
      t1 = "translate(" + H.S(t1._dx) + "px, " + H.S(t1._dy) + "px)";
      C.CssStyleDeclaration_methods._setPropertyHelper$3(t2, (t2 && C.CssStyleDeclaration_methods)._browserPropertyName$1(t2, "transform"), t1, "");
    },
    update$1: function(_, oldSurface) {
      var _this = this;
      H.interceptedTypeCheck(oldSurface, "$isPersistedOpacity");
      _this.super$PersistedContainerSurface$update(0, oldSurface);
      if (_this.alpha != oldSurface.alpha || !_this.offset.$eq(0, oldSurface.offset))
        _this.apply$0();
    }
  };
  Q._PersistedClipPath.prototype = {
    createElement$0: function(_) {
      return this.defaultCreateElement$1("flt-clippath");
    },
    apply$0: function() {
      var t2, t3, _this = this,
        svgClipPath = Q._pathToSvgClipPath(_this.clipPath, 0, 0),
        t1 = _this._clipElement;
      if (t1 != null)
        J.remove$0$ax(t1);
      t1 = W.Element_Element$html(svgClipPath, new Q._NullTreeSanitizer(), null);
      _this._clipElement = t1;
      t2 = $.$get$domRenderer();
      t3 = _this.rootElement;
      t2.toString;
      t3.appendChild(t1);
      t2.setElementStyle$3(_this.rootElement, "clip-path", "url(#svgClip" + $._clipCounter + ")");
      t2.setElementStyle$3(_this.rootElement, "-webkit-clip-path", "url(#svgClip" + $._clipCounter + ")");
    },
    update$1: function(_, oldSurface) {
      var t1, _this = this;
      H.interceptedTypeCheck(oldSurface, "$is_PersistedClipPath");
      _this.super$PersistedContainerSurface$update(0, oldSurface);
      t1 = oldSurface._clipElement;
      if (oldSurface.clipPath !== _this.clipPath) {
        if (t1 != null)
          J.remove$0$ax(t1);
        _this.apply$0();
      } else
        _this._clipElement = t1;
      oldSurface._clipElement = null;
    },
    recycle$0: function() {
      var t1 = this._clipElement;
      if (t1 != null)
        J.remove$0$ax(t1);
      this._clipElement = null;
      this.super$PersistedContainerSurface$recycle();
    }
  };
  Q._NullTreeSanitizer.prototype = {
    sanitizeTree$1: function(node) {
    },
    $isNodeTreeSanitizer: 1
  };
  Q._PaintRequest.prototype = {};
  Q.PersistedStandardPicture.prototype = {
    _doesCanvasFitBounds$2: function(canvas, newBounds) {
      var t3, t4,
        canvasBounds = canvas.bounds,
        t1 = canvasBounds.right,
        t2 = canvasBounds.left;
      if (typeof t1 !== "number")
        return t1.$sub();
      if (typeof t2 !== "number")
        return H.iae(t2);
      t3 = newBounds.right;
      t4 = newBounds.left;
      if (typeof t3 !== "number")
        return t3.$sub();
      if (typeof t4 !== "number")
        return H.iae(t4);
      if (t1 - t2 >= t3 - t4) {
        t1 = canvasBounds.bottom;
        t2 = canvasBounds.top;
        if (typeof t1 !== "number")
          return t1.$sub();
        if (typeof t2 !== "number")
          return H.iae(t2);
        t3 = newBounds.bottom;
        t4 = newBounds.top;
        if (typeof t3 !== "number")
          return t3.$sub();
        if (typeof t4 !== "number")
          return H.iae(t4);
        t4 = t1 - t2 >= t3 - t4;
        t1 = t4;
      } else
        t1 = false;
      return t1;
    },
    _applyBitmapPaint$1: function(oldCanvas) {
      var t1, t2, t3, t4, t5, _this = this;
      if (oldCanvas instanceof T.BitmapCanvas && _this._doesCanvasFitBounds$2(oldCanvas, _this._localCullRect) && oldCanvas._devicePixelRatio == window.devicePixelRatio) {
        oldCanvas.bounds = _this._localCullRect;
        _this._ui$_canvas = oldCanvas;
        oldCanvas.clear$0(0);
        _this.picture.recordingCanvas.apply$1(_this._ui$_canvas);
      } else {
        Q._recycleCanvas(oldCanvas);
        t1 = $._paintQueue;
        t2 = _this._localCullRect;
        t3 = t2.right;
        t4 = t2.left;
        if (typeof t3 !== "number")
          return t3.$sub();
        if (typeof t4 !== "number")
          return H.iae(t4);
        t5 = t2.bottom;
        t2 = t2.top;
        if (typeof t5 !== "number")
          return t5.$sub();
        if (typeof t2 !== "number")
          return H.iae(t2);
        C.JSArray_methods.add$1(t1, new Q._PaintRequest(new Q.Size(t3 - t4, t5 - t2), new Q.PersistedStandardPicture__applyBitmapPaint_closure(_this)));
      }
    },
    _findOrCreateCanvas$1: function(bounds) {
      var t3, bestRecycledCanvas, lastPixelCount, i, candidate, t4, t5, t6, candidatePixelCount, fits, isSmaller, canvas,
        t1 = bounds.right,
        t2 = bounds.left;
      if (typeof t1 !== "number")
        return t1.$sub();
      if (typeof t2 !== "number")
        return H.iae(t2);
      t2 = t1 - t2;
      t1 = bounds.bottom;
      t3 = bounds.top;
      if (typeof t1 !== "number")
        return t1.$sub();
      if (typeof t3 !== "number")
        return H.iae(t3);
      t3 = t1 - t3;
      for (t1 = $._recycledCanvases.length, bestRecycledCanvas = null, lastPixelCount = 1 / 0, i = 0; i < t1; ++i) {
        candidate = $._recycledCanvases[i];
        if (candidate._devicePixelRatio != window.devicePixelRatio)
          continue;
        t4 = candidate.bounds;
        t5 = t4.right;
        t6 = t4.left;
        if (typeof t5 !== "number")
          return t5.$sub();
        if (typeof t6 !== "number")
          return H.iae(t6);
        t6 = t5 - t6;
        t5 = t4.bottom;
        t4 = t4.top;
        if (typeof t5 !== "number")
          return t5.$sub();
        if (typeof t4 !== "number")
          return H.iae(t4);
        t4 = t5 - t4;
        candidatePixelCount = t6 * t4;
        fits = t6 >= t2 && t4 >= t3;
        isSmaller = candidatePixelCount < lastPixelCount;
        if (fits && isSmaller) {
          if (t6 === t2 && t4 === t3) {
            bestRecycledCanvas = candidate;
            break;
          }
          lastPixelCount = candidatePixelCount;
          bestRecycledCanvas = candidate;
        }
      }
      if (bestRecycledCanvas != null) {
        C.JSArray_methods.remove$1($._recycledCanvases, bestRecycledCanvas);
        bestRecycledCanvas.bounds = bounds;
        return bestRecycledCanvas;
      }
      canvas = T.BitmapCanvas$(bounds);
      return canvas;
    }
  };
  Q.PersistedStandardPicture__applyBitmapPaint_closure.prototype = {
    call$0: function() {
      var t2, t3,
        t1 = this.$this;
      t1._ui$_canvas = t1._findOrCreateCanvas$1(t1._localCullRect);
      $.$get$domRenderer().clearDom$1(t1.rootElement);
      t2 = t1.rootElement;
      t3 = t1._ui$_canvas;
      t2.appendChild(t3.get$rootElement(t3));
      t1._ui$_canvas.clear$0(0);
      t1.picture.recordingCanvas.apply$1(t1._ui$_canvas);
    },
    $signature: 0
  };
  Q.PersistedPicture.prototype = {
    createElement$0: function(_) {
      return this.defaultCreateElement$1("flt-picture");
    },
    recomputeTransformAndClip$0: function() {
      var t3, _this = this,
        t1 = _this._ui$_transform = _this.parent._ui$_transform,
        t2 = _this.dx;
      if (t2 !== 0 || _this.dy !== 0) {
        t1.toString;
        t3 = new T.Matrix40(new Float64Array(16));
        t3.setFrom$1(t1);
        _this._ui$_transform = t3;
        t3.translate$2(0, t2, _this.dy);
      }
      _this._globalClip = _this.parent._globalClip;
    },
    _recomputeCullRect$0: function() {
      var tightLocalCullRect, invertedTransform, wasZero, t4, t5, t6, t7, t8, t9, newLocalCullRect, _this = this,
        t1 = _this.localPaintBounds,
        tightGlobalCullRect = T.localClipRectToGlobalClip(t1, _this._ui$_transform).intersect$1(_this._globalClip),
        t2 = tightGlobalCullRect.right,
        t3 = tightGlobalCullRect.left;
      if (typeof t2 !== "number")
        return t2.$sub();
      if (typeof t3 !== "number")
        return H.iae(t3);
      if (!(t2 - t3 <= 0)) {
        t2 = tightGlobalCullRect.bottom;
        t3 = tightGlobalCullRect.top;
        if (typeof t2 !== "number")
          return t2.$sub();
        if (typeof t3 !== "number")
          return H.iae(t3);
        t3 = t2 - t3 <= 0;
        t2 = t3;
      } else
        t2 = true;
      if (t2) {
        tightGlobalCullRect = C.Rect_0_0_0_0;
        tightLocalCullRect = C.Rect_0_0_0_0;
      } else {
        invertedTransform = new T.Matrix40(new Float64Array(16));
        if (invertedTransform.copyInverse$1(_this._ui$_transform) === 0) {
          tightGlobalCullRect = C.Rect_0_0_0_0;
          tightLocalCullRect = C.Rect_0_0_0_0;
        } else
          tightLocalCullRect = T.localClipRectToGlobalClip(tightGlobalCullRect, invertedTransform);
      }
      if (_this._localCullRect == null) {
        _this._localCullRect = tightLocalCullRect;
        _this._globalCullRect = tightGlobalCullRect;
        return true;
      } else if (tightLocalCullRect.$eq(0, C.Rect_0_0_0_0)) {
        wasZero = J.$eq$(_this._localCullRect, C.Rect_0_0_0_0);
        _this._globalCullRect = _this._localCullRect = C.Rect_0_0_0_0;
        return !wasZero;
      } else {
        t2 = _this._localCullRect;
        t3 = t2.left;
        t4 = tightLocalCullRect.left;
        if (typeof t3 !== "number")
          return t3.$le();
        if (typeof t4 !== "number")
          return H.iae(t4);
        if (t3 <= t4) {
          t5 = t2.top;
          t6 = tightLocalCullRect.top;
          if (typeof t5 !== "number")
            return t5.$le();
          if (typeof t6 !== "number")
            return H.iae(t6);
          if (t5 <= t6) {
            t5 = t2.right;
            t6 = tightLocalCullRect.right;
            if (typeof t5 !== "number")
              return t5.$ge();
            if (typeof t6 !== "number")
              return H.iae(t6);
            if (t5 >= t6) {
              t5 = t2.bottom;
              t6 = tightLocalCullRect.bottom;
              if (typeof t5 !== "number")
                return t5.$ge();
              if (typeof t6 !== "number")
                return H.iae(t6);
              t6 = t5 >= t6;
              t5 = t6;
            } else
              t5 = false;
          } else
            t5 = false;
        } else
          t5 = false;
        if (t5)
          return false;
        else {
          t4 = Math.max(t3 - t4, 0);
          t5 = t2.top;
          t6 = tightLocalCullRect.top;
          if (typeof t5 !== "number")
            return t5.$sub();
          if (typeof t6 !== "number")
            return H.iae(t6);
          t6 = Math.max(t5 - t6, 0);
          t7 = tightLocalCullRect.right;
          t8 = t2.right;
          if (typeof t7 !== "number")
            return t7.$sub();
          if (typeof t8 !== "number")
            return H.iae(t8);
          t7 = Math.max(t7 - t8, 0);
          t9 = tightLocalCullRect.bottom;
          t2 = t2.bottom;
          if (typeof t9 !== "number")
            return t9.$sub();
          if (typeof t2 !== "number")
            return H.iae(t2);
          newLocalCullRect = new Q.Rect(t3 - 3 * t4, t5 - 3 * t6, t8 + 3 * t7, t2 + 3 * Math.max(t9 - t2, 0)).intersect$1(t1);
          t1 = J.$eq$(_this._localCullRect, newLocalCullRect);
          _this._localCullRect = newLocalCullRect;
          _this._globalCullRect = tightGlobalCullRect;
          return !t1;
        }
      }
    },
    _ui$_applyPaint$1: function(oldCanvas) {
      var t2, t3, t4, t5, t6, _this = this,
        t1 = _this.picture.recordingCanvas;
      if (!t1._didDraw) {
        Q._recycleCanvas(oldCanvas);
        $.$get$domRenderer().clearDom$1(_this.rootElement);
        return;
      }
      if (t1._hasArbitraryPaint)
        _this._applyBitmapPaint$1(oldCanvas);
      else {
        Q._recycleCanvas(oldCanvas);
        t2 = H.interceptedTypeCheck(W._ElementFactoryProvider_createElement_tag("flt-dom-canvas", null), "$isElement0");
        t3 = H.setRuntimeTypeInfo([], [T._SaveElementStackEntry]);
        t4 = H.setRuntimeTypeInfo([], [W.Element0]);
        t5 = new T.Matrix40(new Float64Array(16));
        t5.setIdentity$0();
        t6 = t2.style;
        t6.position = "absolute";
        t6.top = "0";
        t6.right = "0";
        t6.bottom = "0";
        t6.left = "0";
        _this._ui$_canvas = new T.DomCanvas(t2, t3, t4, t5);
        $.$get$domRenderer().clearDom$1(_this.rootElement);
        t2 = _this.rootElement;
        t3 = _this._ui$_canvas;
        t2.appendChild(t3.get$rootElement(t3));
        t1.apply$1(_this._ui$_canvas);
      }
    },
    _applyTranslate$0: function() {
      var t1 = this.rootElement.style,
        t2 = "translate(" + H.S(this.dx) + "px, " + H.S(this.dy) + "px)";
      C.CssStyleDeclaration_methods._setPropertyHelper$3(t1, (t1 && C.CssStyleDeclaration_methods)._browserPropertyName$1(t1, "transform"), t2, "");
    },
    apply$0: function() {
      this._recomputeCullRect$0();
      this._applyTranslate$0();
      this._ui$_applyPaint$1(null);
    },
    update$1: function(_, oldSurface) {
      var t1, t2, _this = this;
      H.interceptedTypeCheck(oldSurface, "$isPersistedPicture");
      _this.super$PersistedSurface$update(0, oldSurface);
      if (_this.dx != oldSurface.dx || _this.dy != oldSurface.dy)
        _this._applyTranslate$0();
      _this._localCullRect = oldSurface._localCullRect;
      _this._globalCullRect = oldSurface._globalCullRect;
      if (_this.picture == oldSurface.picture) {
        t1 = _this._recomputeCullRect$0();
        t2 = oldSurface._ui$_canvas;
        if (t1)
          _this._ui$_applyPaint$1(t2);
        else
          _this._ui$_canvas = t2;
      } else {
        _this._recomputeCullRect$0();
        _this._ui$_applyPaint$1(oldSurface._ui$_canvas);
      }
    },
    retain$0: function() {
      var _this = this;
      _this.super$PersistedSurface$retain();
      if (_this._recomputeCullRect$0())
        _this._ui$_applyPaint$1(_this._ui$_canvas);
    },
    recycle$0: function() {
      Q._recycleCanvas(this._ui$_canvas);
      this.super$PersistedSurface$recycle();
    }
  };
  Q.PersistedPhysicalShape.prototype = {
    recomputeTransformAndClip$0: function() {
      var t1, roundRect, rect, _this = this;
      _this._ui$_transform = _this.parent._ui$_transform;
      t1 = _this.path;
      roundRect = t1.get$webOnlyPathAsRoundedRect();
      if (roundRect != null)
        _this._globalClip = _this.parent._globalClip.intersect$1(T.localClipRectToGlobalClip(new Q.Rect(roundRect.left, roundRect.top, roundRect.right, roundRect.bottom), _this._ui$_transform));
      else {
        rect = t1.get$webOnlyPathAsRect();
        t1 = _this.parent;
        if (rect != null)
          _this._globalClip = t1._globalClip.intersect$1(T.localClipRectToGlobalClip(rect, _this._ui$_transform));
        else
          _this._globalClip = t1._globalClip;
      }
    },
    createElement$0: function(_) {
      var t1 = this.super$_DomClip$createElement(0);
      t1.setAttribute("clip-type", "physical-shape");
      return t1;
    },
    apply$0: function() {
      var _this = this,
        t1 = _this.rootElement.style,
        t2 = _this.color.toCssString$0();
      t1.backgroundColor = t2;
      T.ElevationShadow_applyShadow(_this.rootElement.style, _this.elevation, _this.shadowColor);
      _this._applyShape$0();
    },
    _applyShape$0: function() {
      var borderRadius, style, t2, t3, rect, ellipse, rx, ry, left, $top, bounds, t4, t5, t6, t7, rootElementStyle, _this = this,
        _s9_ = "transform",
        _s13_ = "border-radius",
        _s6_ = "hidden",
        t1 = _this.path,
        roundRect = t1.get$webOnlyPathAsRoundedRect();
      if (roundRect != null) {
        borderRadius = H.S(roundRect.tlRadiusX) + "px " + H.S(roundRect.trRadiusX) + "px " + H.S(roundRect.brRadiusX) + "px " + H.S(roundRect.blRadiusX) + "px";
        style = _this.rootElement.style;
        t1 = roundRect.left;
        t2 = "translate(" + H.S(t1) + "px, ";
        t3 = roundRect.top;
        t2 = t2 + H.S(t3) + "px)";
        C.CssStyleDeclaration_methods._setPropertyHelper$3(style, (style && C.CssStyleDeclaration_methods)._browserPropertyName$1(style, _s9_), t2, "");
        t2 = roundRect.right;
        if (typeof t2 !== "number")
          return t2.$sub();
        if (typeof t1 !== "number")
          return H.iae(t1);
        t2 = H.S(t2 - t1) + "px";
        style.width = t2;
        t2 = roundRect.bottom;
        if (typeof t2 !== "number")
          return t2.$sub();
        if (typeof t3 !== "number")
          return H.iae(t3);
        t2 = H.S(t2 - t3) + "px";
        style.height = t2;
        C.CssStyleDeclaration_methods._setPropertyHelper$3(style, C.CssStyleDeclaration_methods._browserPropertyName$1(style, _s13_), borderRadius, "");
        t2 = _this._DomClip__childContainer.style;
        t3 = "translate(" + H.S(-t1) + "px, " + H.S(-t3) + "px)";
        C.CssStyleDeclaration_methods._setPropertyHelper$3(t2, (t2 && C.CssStyleDeclaration_methods)._browserPropertyName$1(t2, _s9_), t3, "");
        if (_this.clipBehavior !== C.Clip_0)
          style.overflow = _s6_;
        return;
      } else {
        rect = t1.get$webOnlyPathAsRect();
        if (rect != null) {
          style = _this.rootElement.style;
          t1 = rect.left;
          t2 = "translate(" + H.S(t1) + "px, ";
          t3 = rect.top;
          t2 = t2 + H.S(t3) + "px)";
          C.CssStyleDeclaration_methods._setPropertyHelper$3(style, (style && C.CssStyleDeclaration_methods)._browserPropertyName$1(style, _s9_), t2, "");
          t2 = rect.right;
          if (typeof t2 !== "number")
            return t2.$sub();
          if (typeof t1 !== "number")
            return H.iae(t1);
          t2 = H.S(t2 - t1) + "px";
          style.width = t2;
          t2 = rect.bottom;
          if (typeof t2 !== "number")
            return t2.$sub();
          if (typeof t3 !== "number")
            return H.iae(t3);
          t2 = H.S(t2 - t3) + "px";
          style.height = t2;
          C.CssStyleDeclaration_methods._setPropertyHelper$3(style, C.CssStyleDeclaration_methods._browserPropertyName$1(style, _s13_), "", "");
          t2 = _this._DomClip__childContainer.style;
          t3 = "translate(" + H.S(-t1) + "px, " + H.S(-t3) + "px)";
          C.CssStyleDeclaration_methods._setPropertyHelper$3(t2, (t2 && C.CssStyleDeclaration_methods)._browserPropertyName$1(t2, _s9_), t3, "");
          if (_this.clipBehavior !== C.Clip_0)
            style.overflow = _s6_;
          return;
        } else {
          ellipse = t1.get$webOnlyPathAsCircle();
          if (ellipse != null) {
            rx = ellipse.radiusX;
            ry = ellipse.radiusY;
            borderRadius = rx === ry ? H.S(rx) + "px " : H.S(rx) + "px " + H.S(ry) + "px ";
            style = _this.rootElement.style;
            t1 = ellipse.x;
            if (typeof t1 !== "number")
              return t1.$sub();
            left = t1 - rx;
            t1 = ellipse.y;
            if (typeof t1 !== "number")
              return t1.$sub();
            $top = t1 - ry;
            t1 = "translate(" + H.S(left) + "px, " + H.S($top) + "px)";
            C.CssStyleDeclaration_methods._setPropertyHelper$3(style, (style && C.CssStyleDeclaration_methods)._browserPropertyName$1(style, _s9_), t1, "");
            t1 = H.S(rx * 2) + "px";
            style.width = t1;
            t1 = H.S(ry * 2) + "px";
            style.height = t1;
            C.CssStyleDeclaration_methods._setPropertyHelper$3(style, C.CssStyleDeclaration_methods._browserPropertyName$1(style, _s13_), borderRadius, "");
            t1 = _this._DomClip__childContainer.style;
            t2 = "translate(" + H.S(-left) + "px, " + H.S(-$top) + "px)";
            C.CssStyleDeclaration_methods._setPropertyHelper$3(t1, (t1 && C.CssStyleDeclaration_methods)._browserPropertyName$1(t1, _s9_), t2, "");
            if (_this.clipBehavior !== C.Clip_0)
              style.overflow = _s6_;
            return;
          }
        }
      }
      bounds = t1.getBounds$0(0);
      t2 = bounds.left;
      if (typeof t2 !== "number")
        return t2.$negate();
      t3 = -t2;
      t4 = bounds.top;
      if (typeof t4 !== "number")
        return t4.$negate();
      t5 = -t4;
      t1 = W.Element_Element$html(Q._pathToSvgClipPath(t1, t3, t5), new Q._NullTreeSanitizer(), null);
      _this._clipElement = t1;
      t6 = $.$get$domRenderer();
      t7 = _this.rootElement;
      t6.toString;
      t7.appendChild(t1);
      t6.setElementStyle$3(_this.rootElement, "clip-path", "url(#svgClip" + $._clipCounter + ")");
      t6.setElementStyle$3(_this.rootElement, "-webkit-clip-path", "url(#svgClip" + $._clipCounter + ")");
      rootElementStyle = _this.rootElement.style;
      rootElementStyle.overflow = "";
      t1 = "translate(" + H.S(t2) + "px, " + H.S(t4) + "px)";
      C.CssStyleDeclaration_methods._setPropertyHelper$3(rootElementStyle, (rootElementStyle && C.CssStyleDeclaration_methods)._browserPropertyName$1(rootElementStyle, _s9_), t1, "");
      t1 = bounds.right;
      if (typeof t1 !== "number")
        return t1.$sub();
      t2 = H.S(t1 - t2) + "px";
      rootElementStyle.width = t2;
      t1 = bounds.bottom;
      if (typeof t1 !== "number")
        return t1.$sub();
      t4 = H.S(t1 - t4) + "px";
      rootElementStyle.height = t4;
      C.CssStyleDeclaration_methods._setPropertyHelper$3(rootElementStyle, C.CssStyleDeclaration_methods._browserPropertyName$1(rootElementStyle, _s13_), "", "");
      t1 = _this._DomClip__childContainer.style;
      t5 = "translate(" + H.S(t3) + "px, " + H.S(t5) + "px)";
      C.CssStyleDeclaration_methods._setPropertyHelper$3(t1, (t1 && C.CssStyleDeclaration_methods)._browserPropertyName$1(t1, _s9_), t5, "");
    },
    update$1: function(_, oldSurface) {
      var t1, t2, style, _this = this;
      H.interceptedTypeCheck(oldSurface, "$isPersistedPhysicalShape");
      _this.super$PersistedContainerSurface$update(0, oldSurface);
      t1 = _this.color;
      if (!oldSurface.color.$eq(0, t1)) {
        t2 = _this.rootElement.style;
        t1 = t1.toCssString$0();
        t2.backgroundColor = t1;
      }
      t1 = _this.elevation;
      if (oldSurface.elevation != t1 || !oldSurface.shadowColor.$eq(0, _this.shadowColor))
        T.ElevationShadow_applyShadow(_this.rootElement.style, t1, _this.shadowColor);
      t1 = oldSurface._clipElement;
      if (oldSurface.path !== _this.path) {
        if (t1 != null)
          J.remove$0$ax(t1);
        style = _this.rootElement.style;
        C.CssStyleDeclaration_methods._setPropertyHelper$3(style, (style && C.CssStyleDeclaration_methods)._browserPropertyName$1(style, "transform"), "", "");
        C.CssStyleDeclaration_methods._setPropertyHelper$3(style, C.CssStyleDeclaration_methods._browserPropertyName$1(style, "border-radius"), "", "");
        t1 = $.$get$domRenderer();
        t1.setElementStyle$3(_this.rootElement, "clip-path", "");
        t1.setElementStyle$3(_this.rootElement, "-webkit-clip-path", "");
        _this._applyShape$0();
      } else
        _this._clipElement = t1;
      oldSurface._clipElement = null;
    }
  };
  Q.OffsetBase.prototype = {
    $le: function(_, other) {
      var t1 = this._dx,
        t2 = other.get$_dx();
      if (typeof t1 !== "number")
        return t1.$le();
      if (C.JSNumber_methods.$le(t1, t2)) {
        t1 = this._dy;
        t2 = other.get$_dy();
        if (typeof t1 !== "number")
          return t1.$le();
        t2 = C.JSNumber_methods.$le(t1, t2);
        t1 = t2;
      } else
        t1 = false;
      return t1;
    },
    $gt: function(_, other) {
      var t1, t2;
      H.interceptedTypeCheck(other, "$isOffsetBase");
      t1 = this._dx;
      t2 = other._dx;
      if (typeof t1 !== "number")
        return t1.$gt();
      if (typeof t2 !== "number")
        return H.iae(t2);
      if (t1 > t2) {
        t1 = this._dy;
        t2 = other._dy;
        if (typeof t1 !== "number")
          return t1.$gt();
        if (typeof t2 !== "number")
          return H.iae(t2);
        t2 = t1 > t2;
        t1 = t2;
      } else
        t1 = false;
      return t1;
    },
    $ge: function(_, other) {
      var t1 = this._dx,
        t2 = other.get$_dx();
      if (typeof t1 !== "number")
        return t1.$gt();
      if (C.JSNumber_methods.$gt(t1, t2)) {
        t1 = this._dy;
        t2 = other.get$_dy();
        if (typeof t1 !== "number")
          return t1.$ge();
        t2 = C.JSNumber_methods.$ge(t1, t2);
        t1 = t2;
      } else
        t1 = false;
      return t1;
    },
    $eq: function(_, other) {
      if (other == null)
        return false;
      if (!(other instanceof Q.OffsetBase))
        return false;
      return this._dx == other._dx && this._dy == other._dy;
    },
    get$hashCode: function(_) {
      return Q.hashValues(this._dx, this._dy, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd);
    },
    toString$0: function(_) {
      var t1 = new H.TypeImpl(H.getRti(this)).toString$0(0) + "(",
        t2 = this._dx;
      t1 = t1 + H.S(t2 == null ? null : C.JSNumber_methods.toStringAsFixed$1(t2, 1)) + ", ";
      t2 = this._dy;
      return t1 + H.S(t2 == null ? null : C.JSNumber_methods.toStringAsFixed$1(t2, 1)) + ")";
    }
  };
  Q.Offset.prototype = {
    get$distance: function() {
      var t2,
        t1 = this._dx;
      if (typeof t1 !== "number")
        return t1.$mul();
      t2 = this._dy;
      if (typeof t2 !== "number")
        return t2.$mul();
      return Math.sqrt(t1 * t1 + t2 * t2);
    },
    get$distanceSquared: function() {
      var t2,
        t1 = this._dx;
      if (typeof t1 !== "number")
        return t1.$mul();
      t2 = this._dy;
      if (typeof t2 !== "number")
        return t2.$mul();
      return t1 * t1 + t2 * t2;
    },
    $sub: function(_, other) {
      var t1, t2, t3, t4;
      H.interceptedTypeCheck(other, "$isOffset");
      t1 = this._dx;
      t2 = other._dx;
      if (typeof t1 !== "number")
        return t1.$sub();
      if (typeof t2 !== "number")
        return H.iae(t2);
      t3 = this._dy;
      t4 = other._dy;
      if (typeof t3 !== "number")
        return t3.$sub();
      if (typeof t4 !== "number")
        return H.iae(t4);
      return new Q.Offset(t1 - t2, t3 - t4);
    },
    $add: function(_, other) {
      var t1, t2, t3, t4;
      H.interceptedTypeCheck(other, "$isOffset");
      t1 = this._dx;
      t2 = other._dx;
      if (typeof t1 !== "number")
        return t1.$add();
      if (typeof t2 !== "number")
        return H.iae(t2);
      t3 = this._dy;
      t4 = other._dy;
      if (typeof t3 !== "number")
        return t3.$add();
      if (typeof t4 !== "number")
        return H.iae(t4);
      return new Q.Offset(t1 + t2, t3 + t4);
    },
    $mul: function(_, operand) {
      var t2,
        t1 = this._dx;
      if (typeof t1 !== "number")
        return t1.$mul();
      if (typeof operand !== "number")
        return H.iae(operand);
      t2 = this._dy;
      if (typeof t2 !== "number")
        return t2.$mul();
      return new Q.Offset(t1 * operand, t2 * operand);
    },
    $div: function(_, operand) {
      var t2,
        t1 = this._dx;
      if (typeof t1 !== "number")
        return t1.$div();
      t2 = this._dy;
      if (typeof t2 !== "number")
        return t2.$div();
      return new Q.Offset(t1 / operand, t2 / operand);
    },
    $eq: function(_, other) {
      if (other == null)
        return false;
      if (!(other instanceof Q.Offset))
        return false;
      return this._dx == other._dx && this._dy == other._dy;
    },
    get$hashCode: function(_) {
      return Q.hashValues(this._dx, this._dy, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd);
    },
    toString$0: function(_) {
      var t2,
        t1 = this._dx;
      t1 = "Offset(" + H.S(t1 == null ? null : C.JSNumber_methods.toStringAsFixed$1(t1, 1)) + ", ";
      t2 = this._dy;
      return t1 + H.S(t2 == null ? null : C.JSNumber_methods.toStringAsFixed$1(t2, 1)) + ")";
    }
  };
  Q.Size.prototype = {
    $sub: function(_, other) {
      var t1, t2, t3, t4, _this = this;
      H.interceptedTypeCheck(other, "$isOffsetBase");
      t1 = J.getInterceptor$(other);
      if (!!t1.$isSize) {
        t1 = _this._dx;
        t2 = other._dx;
        if (typeof t1 !== "number")
          return t1.$sub();
        if (typeof t2 !== "number")
          return H.iae(t2);
        t3 = _this._dy;
        t4 = other._dy;
        if (typeof t3 !== "number")
          return t3.$sub();
        if (typeof t4 !== "number")
          return H.iae(t4);
        return new Q.Offset(t1 - t2, t3 - t4);
      }
      if (!!t1.$isOffset) {
        t1 = _this._dx;
        t2 = other._dx;
        if (typeof t1 !== "number")
          return t1.$sub();
        if (typeof t2 !== "number")
          return H.iae(t2);
        t3 = _this._dy;
        t4 = other._dy;
        if (typeof t3 !== "number")
          return t3.$sub();
        if (typeof t4 !== "number")
          return H.iae(t4);
        return new Q.Size(t1 - t2, t3 - t4);
      }
      throw H.wrapException(P.ArgumentError$(other));
    },
    $add: function(_, other) {
      var t1, t2, t3, t4;
      H.interceptedTypeCheck(other, "$isOffset");
      t1 = this._dx;
      t2 = other._dx;
      if (typeof t1 !== "number")
        return t1.$add();
      if (typeof t2 !== "number")
        return H.iae(t2);
      t3 = this._dy;
      t4 = other._dy;
      if (typeof t3 !== "number")
        return t3.$add();
      if (typeof t4 !== "number")
        return H.iae(t4);
      return new Q.Size(t1 + t2, t3 + t4);
    },
    $mul: function(_, operand) {
      var t2,
        t1 = this._dx;
      if (typeof t1 !== "number")
        return t1.$mul();
      if (typeof operand !== "number")
        return H.iae(operand);
      t2 = this._dy;
      if (typeof t2 !== "number")
        return t2.$mul();
      return new Q.Size(t1 * operand, t2 * operand);
    },
    $div: function(_, operand) {
      var t2,
        t1 = this._dx;
      if (typeof t1 !== "number")
        return t1.$div();
      t2 = this._dy;
      if (typeof t2 !== "number")
        return t2.$div();
      return new Q.Size(t1 / operand, t2 / operand);
    },
    center$1: function(origin) {
      var t3, t4,
        t1 = origin._dx,
        t2 = this._dx;
      if (typeof t2 !== "number")
        return t2.$div();
      if (typeof t1 !== "number")
        return t1.$add();
      t3 = origin._dy;
      t4 = this._dy;
      if (typeof t4 !== "number")
        return t4.$div();
      if (typeof t3 !== "number")
        return t3.$add();
      return new Q.Offset(t1 + t2 / 2, t3 + t4 / 2);
    },
    contains$1: function(_, offset) {
      var t2,
        t1 = offset._dx;
      if (typeof t1 !== "number")
        return t1.$ge();
      if (t1 >= 0) {
        t2 = this._dx;
        if (typeof t2 !== "number")
          return H.iae(t2);
        if (t1 < t2) {
          t1 = offset._dy;
          if (typeof t1 !== "number")
            return t1.$ge();
          if (t1 >= 0) {
            t2 = this._dy;
            if (typeof t2 !== "number")
              return H.iae(t2);
            t2 = t1 < t2;
            t1 = t2;
          } else
            t1 = false;
        } else
          t1 = false;
      } else
        t1 = false;
      return t1;
    },
    $eq: function(_, other) {
      if (other == null)
        return false;
      if (!(other instanceof Q.Size))
        return false;
      return this._dx == other._dx && this._dy == other._dy;
    },
    get$hashCode: function(_) {
      return Q.hashValues(this._dx, this._dy, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd);
    },
    toString$0: function(_) {
      var t2,
        t1 = this._dx;
      t1 = "Size(" + H.S(t1 == null ? null : C.JSNumber_methods.toStringAsFixed$1(t1, 1)) + ", ";
      t2 = this._dy;
      return t1 + H.S(t2 == null ? null : C.JSNumber_methods.toStringAsFixed$1(t2, 1)) + ")";
    }
  };
  Q.Rect.prototype = {
    get$isEmpty: function(_) {
      var _this = this,
        t1 = _this.left,
        t2 = _this.right;
      if (typeof t1 !== "number")
        return t1.$ge();
      if (typeof t2 !== "number")
        return H.iae(t2);
      if (!(t1 >= t2)) {
        t1 = _this.top;
        t2 = _this.bottom;
        if (typeof t1 !== "number")
          return t1.$ge();
        if (typeof t2 !== "number")
          return H.iae(t2);
        t2 = t1 >= t2;
        t1 = t2;
      } else
        t1 = true;
      return t1;
    },
    shift$1: function(offset) {
      var t3, t4, t5, t6, _this = this,
        t1 = _this.left,
        t2 = offset._dx;
      if (typeof t1 !== "number")
        return t1.$add();
      if (typeof t2 !== "number")
        return H.iae(t2);
      t3 = _this.top;
      t4 = offset._dy;
      if (typeof t3 !== "number")
        return t3.$add();
      if (typeof t4 !== "number")
        return H.iae(t4);
      t5 = _this.right;
      if (typeof t5 !== "number")
        return t5.$add();
      t6 = _this.bottom;
      if (typeof t6 !== "number")
        return t6.$add();
      return new Q.Rect(t1 + t2, t3 + t4, t5 + t2, t6 + t4);
    },
    translate$2: function(_, translateX, translateY) {
      var t2, t3, t4, _this = this,
        t1 = _this.left;
      if (typeof t1 !== "number")
        return t1.$add();
      if (typeof translateX !== "number")
        return H.iae(translateX);
      t2 = _this.top;
      if (typeof t2 !== "number")
        return t2.$add();
      t3 = _this.right;
      if (typeof t3 !== "number")
        return t3.$add();
      t4 = _this.bottom;
      if (typeof t4 !== "number")
        return t4.$add();
      return new Q.Rect(t1 + translateX, t2 + translateY, t3 + translateX, t4 + translateY);
    },
    inflate$1: function(delta) {
      var t2, t3, t4, _this = this,
        t1 = _this.left;
      if (typeof t1 !== "number")
        return t1.$sub();
      if (typeof delta !== "number")
        return H.iae(delta);
      t2 = _this.top;
      if (typeof t2 !== "number")
        return t2.$sub();
      t3 = _this.right;
      if (typeof t3 !== "number")
        return t3.$add();
      t4 = _this.bottom;
      if (typeof t4 !== "number")
        return t4.$add();
      return new Q.Rect(t1 - delta, t2 - delta, t3 + delta, t4 + delta);
    },
    intersect$1: function(other) {
      var t2, t3, t4, _this = this,
        t1 = other.left;
      t1 = Math.max(H.checkNum(_this.left), H.checkNum(t1));
      t2 = other.top;
      t2 = Math.max(H.checkNum(_this.top), H.checkNum(t2));
      t3 = other.right;
      t3 = Math.min(H.checkNum(_this.right), H.checkNum(t3));
      t4 = other.bottom;
      return new Q.Rect(t1, t2, t3, Math.min(H.checkNum(_this.bottom), H.checkNum(t4)));
    },
    expandToInclude$1: function(other) {
      var _this = this;
      return new Q.Rect(Math.min(H.checkNum(_this.left), H.checkNum(other.left)), Math.min(H.checkNum(_this.top), H.checkNum(other.top)), Math.max(H.checkNum(_this.right), H.checkNum(other.right)), Math.max(H.checkNum(_this.bottom), H.checkNum(other.bottom)));
    },
    get$shortestSide: function() {
      var t3, t4, _this = this,
        t1 = _this.right,
        t2 = _this.left;
      if (typeof t1 !== "number")
        return t1.$sub();
      if (typeof t2 !== "number")
        return H.iae(t2);
      t3 = _this.bottom;
      t4 = _this.top;
      if (typeof t3 !== "number")
        return t3.$sub();
      if (typeof t4 !== "number")
        return H.iae(t4);
      return Math.min(Math.abs(t1 - t2), Math.abs(t3 - t4));
    },
    get$center: function() {
      var t3, t4, _this = this,
        t1 = _this.left,
        t2 = _this.right;
      if (typeof t2 !== "number")
        return t2.$sub();
      if (typeof t1 !== "number")
        return H.iae(t1);
      t3 = _this.top;
      t4 = _this.bottom;
      if (typeof t4 !== "number")
        return t4.$sub();
      if (typeof t3 !== "number")
        return H.iae(t3);
      return new Q.Offset(t1 + (t2 - t1) / 2, t3 + (t4 - t3) / 2);
    },
    contains$1: function(_, offset) {
      var _this = this,
        t1 = offset._dx,
        t2 = _this.left;
      if (typeof t1 !== "number")
        return t1.$ge();
      if (typeof t2 !== "number")
        return H.iae(t2);
      if (t1 >= t2) {
        t2 = _this.right;
        if (typeof t2 !== "number")
          return H.iae(t2);
        if (t1 < t2) {
          t1 = offset._dy;
          t2 = _this.top;
          if (typeof t1 !== "number")
            return t1.$ge();
          if (typeof t2 !== "number")
            return H.iae(t2);
          if (t1 >= t2) {
            t2 = _this.bottom;
            if (typeof t2 !== "number")
              return H.iae(t2);
            t2 = t1 < t2;
            t1 = t2;
          } else
            t1 = false;
        } else
          t1 = false;
      } else
        t1 = false;
      return t1;
    },
    $eq: function(_, other) {
      var _this = this;
      if (other == null)
        return false;
      if (_this === other)
        return true;
      if (!new H.TypeImpl(H.getRti(_this)).$eq(0, J.get$runtimeType$(other)))
        return false;
      H.interceptedTypeCheck(other, "$isRect");
      return _this.left == other.left && _this.top == other.top && _this.right == other.right && _this.bottom == other.bottom;
    },
    get$hashCode: function(_) {
      var _this = this;
      return Q.hashValues(_this.left, _this.top, _this.right, _this.bottom, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd);
    },
    toString$0: function(_) {
      var _this = this;
      return "Rect.fromLTRB(" + J.toStringAsFixed$1$n(_this.left, 1) + ", " + J.toStringAsFixed$1$n(_this.top, 1) + ", " + J.toStringAsFixed$1$n(_this.right, 1) + ", " + J.toStringAsFixed$1$n(_this.bottom, 1) + ")";
    }
  };
  Q.Radius.prototype = {
    $sub: function(_, other) {
      var t1, t2, t3, t4;
      H.interceptedTypeCheck(other, "$isRadius");
      t1 = this.x;
      t2 = other.x;
      if (typeof t1 !== "number")
        return t1.$sub();
      if (typeof t2 !== "number")
        return H.iae(t2);
      t3 = this.y;
      t4 = other.y;
      if (typeof t3 !== "number")
        return t3.$sub();
      if (typeof t4 !== "number")
        return H.iae(t4);
      return new Q.Radius(t1 - t2, t3 - t4);
    },
    $add: function(_, other) {
      var t1, t2, t3, t4;
      H.interceptedTypeCheck(other, "$isRadius");
      t1 = this.x;
      t2 = other.x;
      if (typeof t1 !== "number")
        return t1.$add();
      if (typeof t2 !== "number")
        return H.iae(t2);
      t3 = this.y;
      t4 = other.y;
      if (typeof t3 !== "number")
        return t3.$add();
      if (typeof t4 !== "number")
        return H.iae(t4);
      return new Q.Radius(t1 + t2, t3 + t4);
    },
    $mul: function(_, operand) {
      var t2,
        t1 = this.x;
      if (typeof t1 !== "number")
        return t1.$mul();
      if (typeof operand !== "number")
        return H.iae(operand);
      t2 = this.y;
      if (typeof t2 !== "number")
        return t2.$mul();
      return new Q.Radius(t1 * operand, t2 * operand);
    },
    $eq: function(_, other) {
      var _this = this;
      if (other == null)
        return false;
      if (_this === other)
        return true;
      if (!new H.TypeImpl(H.getRti(_this)).$eq(0, J.get$runtimeType$(other)))
        return false;
      H.interceptedTypeCheck(other, "$isRadius");
      return other.x == _this.x && other.y == _this.y;
    },
    get$hashCode: function(_) {
      return Q.hashValues(this.x, this.y, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd);
    },
    toString$0: function(_) {
      var t1 = this.x,
        t2 = this.y,
        t3 = J.getInterceptor$n(t1);
      return t1 == t2 ? "Radius.circular(" + t3.toStringAsFixed$1(t1, 1) + ")" : "Radius.elliptical(" + t3.toStringAsFixed$1(t1, 1) + ", " + J.toStringAsFixed$1$n(t2, 1) + ")";
    }
  };
  Q.RRect.prototype = {
    shift$1: function(offset) {
      var t3, t4, t5, t6, _this = this,
        t1 = _this.left,
        t2 = offset._dx;
      if (typeof t1 !== "number")
        return t1.$add();
      if (typeof t2 !== "number")
        return H.iae(t2);
      t3 = _this.top;
      t4 = offset._dy;
      if (typeof t3 !== "number")
        return t3.$add();
      if (typeof t4 !== "number")
        return H.iae(t4);
      t5 = _this.right;
      if (typeof t5 !== "number")
        return t5.$add();
      t6 = _this.bottom;
      if (typeof t6 !== "number")
        return t6.$add();
      return Q.RRect$_raw(_this.blRadiusX, _this.blRadiusY, t6 + t4, _this.brRadiusX, _this.brRadiusY, t1 + t2, t5 + t2, _this.tlRadiusX, _this.tlRadiusY, t3 + t4, _this.trRadiusX, _this.trRadiusY);
    },
    inflate$1: function(delta) {
      var t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, _this = this,
        t1 = _this.left;
      if (typeof t1 !== "number")
        return t1.$sub();
      t2 = _this.top;
      if (typeof t2 !== "number")
        return t2.$sub();
      t3 = _this.right;
      if (typeof t3 !== "number")
        return t3.$add();
      t4 = _this.bottom;
      if (typeof t4 !== "number")
        return t4.$add();
      t5 = _this.tlRadiusX;
      if (typeof t5 !== "number")
        return t5.$add();
      t6 = _this.tlRadiusY;
      if (typeof t6 !== "number")
        return t6.$add();
      t7 = _this.trRadiusX;
      if (typeof t7 !== "number")
        return t7.$add();
      t8 = _this.trRadiusY;
      if (typeof t8 !== "number")
        return t8.$add();
      t9 = _this.blRadiusX;
      if (typeof t9 !== "number")
        return t9.$add();
      t10 = _this.blRadiusY;
      if (typeof t10 !== "number")
        return t10.$add();
      t11 = _this.brRadiusX;
      if (typeof t11 !== "number")
        return t11.$add();
      t12 = _this.brRadiusY;
      if (typeof t12 !== "number")
        return t12.$add();
      return Q.RRect$_raw(t9 + delta, t10 + delta, t4 + delta, t11 + delta, t12 + delta, t1 - delta, t3 + delta, t5 + delta, t6 + delta, t2 - delta, t7 + delta, t8 + delta);
    },
    _getMin$4: function(min, radius1, radius2, limit) {
      var sum;
      if (typeof radius1 !== "number")
        return radius1.$add();
      if (typeof radius2 !== "number")
        return H.iae(radius2);
      sum = radius1 + radius2;
      if (sum > limit && sum !== 0)
        return Math.min(min, limit / sum);
      return min;
    },
    _scaleRadii$0: function() {
      var t5, scale, t6, t7, t8, t9, t10, t11, t12, t13, t14, _this = this,
        t1 = _this.blRadiusY,
        t2 = _this.tlRadiusY,
        t3 = _this.bottom,
        t4 = _this.top;
      if (typeof t3 !== "number")
        return t3.$sub();
      if (typeof t4 !== "number")
        return H.iae(t4);
      t5 = t3 - t4;
      scale = _this._getMin$4(1, t1, t2, t5);
      t6 = _this.tlRadiusX;
      t7 = _this.trRadiusX;
      t8 = _this.right;
      t9 = _this.left;
      if (typeof t8 !== "number")
        return t8.$sub();
      if (typeof t9 !== "number")
        return H.iae(t9);
      t10 = t8 - t9;
      t11 = _this.trRadiusY;
      t12 = _this.brRadiusY;
      t13 = _this.brRadiusX;
      t14 = _this.blRadiusX;
      scale = _this._getMin$4(_this._getMin$4(_this._getMin$4(scale, t6, t7, t10), t11, t12, t5), t13, t14, t10);
      if (scale < 1) {
        if (typeof t6 !== "number")
          return t6.$mul();
        if (typeof t2 !== "number")
          return t2.$mul();
        if (typeof t7 !== "number")
          return t7.$mul();
        if (typeof t11 !== "number")
          return t11.$mul();
        if (typeof t14 !== "number")
          return t14.$mul();
        if (typeof t1 !== "number")
          return t1.$mul();
        if (typeof t13 !== "number")
          return t13.$mul();
        if (typeof t12 !== "number")
          return t12.$mul();
        return Q.RRect$_raw(t14 * scale, t1 * scale, t3, t13 * scale, t12 * scale, t9, t8, t6 * scale, t2 * scale, t4, t7 * scale, t11 * scale);
      }
      return Q.RRect$_raw(t14, t1, t3, t13, t12, t9, t8, t6, t2, t4, t7, t11);
    },
    contains$1: function(_, point) {
      var t3, t4, scaled, t5, t6, x, y, radiusY, radiusX, t7, _this = this,
        t1 = point._dx,
        t2 = _this.left;
      if (typeof t1 !== "number")
        return t1.$lt();
      if (typeof t2 !== "number")
        return H.iae(t2);
      if (!(t1 < t2)) {
        t3 = _this.right;
        if (typeof t3 !== "number")
          return H.iae(t3);
        if (!(t1 >= t3)) {
          t3 = point._dy;
          t4 = _this.top;
          if (typeof t3 !== "number")
            return t3.$lt();
          if (typeof t4 !== "number")
            return H.iae(t4);
          if (!(t3 < t4)) {
            t4 = _this.bottom;
            if (typeof t4 !== "number")
              return H.iae(t4);
            t4 = t3 >= t4;
            t3 = t4;
          } else
            t3 = true;
        } else
          t3 = true;
      } else
        t3 = true;
      if (t3)
        return false;
      scaled = _this._scaleRadii$0();
      t3 = scaled.tlRadiusX;
      if (typeof t3 !== "number")
        return H.iae(t3);
      if (t1 < t2 + t3) {
        t4 = point._dy;
        t5 = _this.top;
        t6 = scaled.tlRadiusY;
        if (typeof t5 !== "number")
          return t5.$add();
        if (typeof t6 !== "number")
          return H.iae(t6);
        if (typeof t4 !== "number")
          return t4.$lt();
        t6 = t4 < t5 + t6;
        t4 = t6;
      } else
        t4 = false;
      if (t4) {
        x = t1 - t2 - t3;
        t1 = point._dy;
        t2 = _this.top;
        if (typeof t1 !== "number")
          return t1.$sub();
        if (typeof t2 !== "number")
          return H.iae(t2);
        t4 = scaled.tlRadiusY;
        if (typeof t4 !== "number")
          return H.iae(t4);
        y = t1 - t2 - t4;
        radiusY = t4;
        radiusX = t3;
      } else {
        t3 = _this.right;
        t4 = scaled.trRadiusX;
        if (typeof t3 !== "number")
          return t3.$sub();
        if (typeof t4 !== "number")
          return H.iae(t4);
        if (t1 > t3 - t4) {
          t5 = point._dy;
          t6 = _this.top;
          t7 = scaled.trRadiusY;
          if (typeof t6 !== "number")
            return t6.$add();
          if (typeof t7 !== "number")
            return H.iae(t7);
          if (typeof t5 !== "number")
            return t5.$lt();
          t7 = t5 < t6 + t7;
          t5 = t7;
        } else
          t5 = false;
        if (t5) {
          x = t1 - t3 + t4;
          t1 = point._dy;
          t2 = _this.top;
          if (typeof t1 !== "number")
            return t1.$sub();
          if (typeof t2 !== "number")
            return H.iae(t2);
          t3 = scaled.trRadiusY;
          if (typeof t3 !== "number")
            return H.iae(t3);
          y = t1 - t2 - t3;
          radiusY = t3;
          radiusX = t4;
        } else {
          t4 = scaled.brRadiusX;
          if (typeof t4 !== "number")
            return H.iae(t4);
          if (t1 > t3 - t4) {
            t5 = point._dy;
            t6 = _this.bottom;
            t7 = scaled.brRadiusY;
            if (typeof t6 !== "number")
              return t6.$sub();
            if (typeof t7 !== "number")
              return H.iae(t7);
            if (typeof t5 !== "number")
              return t5.$gt();
            t7 = t5 > t6 - t7;
            t5 = t7;
          } else
            t5 = false;
          if (t5) {
            x = t1 - t3 + t4;
            t1 = point._dy;
            t2 = _this.bottom;
            if (typeof t1 !== "number")
              return t1.$sub();
            if (typeof t2 !== "number")
              return H.iae(t2);
            t3 = scaled.brRadiusY;
            if (typeof t3 !== "number")
              return H.iae(t3);
            y = t1 - t2 + t3;
            radiusY = t3;
            radiusX = t4;
          } else {
            t3 = scaled.blRadiusX;
            if (typeof t3 !== "number")
              return H.iae(t3);
            if (t1 < t2 + t3) {
              t4 = point._dy;
              t5 = _this.bottom;
              t6 = scaled.blRadiusY;
              if (typeof t5 !== "number")
                return t5.$sub();
              if (typeof t6 !== "number")
                return H.iae(t6);
              if (typeof t4 !== "number")
                return t4.$gt();
              t6 = t4 > t5 - t6;
              t4 = t6;
            } else
              t4 = false;
            if (t4) {
              x = t1 - t2 - t3;
              t1 = point._dy;
              t2 = _this.bottom;
              if (typeof t1 !== "number")
                return t1.$sub();
              if (typeof t2 !== "number")
                return H.iae(t2);
              t4 = scaled.blRadiusY;
              if (typeof t4 !== "number")
                return H.iae(t4);
              y = t1 - t2 + t4;
            } else
              return true;
            radiusY = t4;
            radiusX = t3;
          }
        }
      }
      x /= radiusX;
      y /= radiusY;
      if (x * x + y * y > 1)
        return false;
      return true;
    },
    $eq: function(_, other) {
      var _this = this;
      if (other == null)
        return false;
      if (_this === other)
        return true;
      if (!new H.TypeImpl(H.getRti(_this)).$eq(0, J.get$runtimeType$(other)))
        return false;
      H.interceptedTypeCheck(other, "$isRRect");
      return _this.left == other.left && _this.top == other.top && _this.right == other.right && _this.bottom == other.bottom && _this.tlRadiusX == other.tlRadiusX && _this.tlRadiusY == other.tlRadiusY && _this.trRadiusX == other.trRadiusX && _this.trRadiusY == other.trRadiusY && _this.blRadiusX == other.blRadiusX && _this.blRadiusY == other.blRadiusY && _this.brRadiusX == other.brRadiusX && _this.brRadiusY == other.brRadiusY;
    },
    get$hashCode: function(_) {
      var _this = this;
      return Q.hashValues(_this.left, _this.top, _this.right, _this.bottom, _this.tlRadiusX, _this.tlRadiusY, _this.trRadiusX, _this.trRadiusY, _this.blRadiusX, _this.blRadiusY, _this.brRadiusX, _this.brRadiusY, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd);
    },
    toString$0: function(_) {
      var t5, t6, _this = this,
        rect = J.toStringAsFixed$1$n(_this.left, 1) + ", " + J.toStringAsFixed$1$n(_this.top, 1) + ", " + J.toStringAsFixed$1$n(_this.right, 1) + ", " + J.toStringAsFixed$1$n(_this.bottom, 1),
        t1 = _this.tlRadiusX,
        t2 = _this.tlRadiusY,
        t3 = _this.trRadiusX,
        t4 = _this.trRadiusY;
      if (new Q.Radius(t1, t2).$eq(0, new Q.Radius(t3, t4))) {
        t5 = _this.brRadiusX;
        t6 = _this.brRadiusY;
        t5 = new Q.Radius(t3, t4).$eq(0, new Q.Radius(t5, t6)) && new Q.Radius(t5, t6).$eq(0, new Q.Radius(_this.blRadiusX, _this.blRadiusY));
      } else
        t5 = false;
      if (t5) {
        if (t1 == t2)
          return "RRect.fromLTRBR(" + rect + ", " + J.toStringAsFixed$1$n(t1, 1) + ")";
        return "RRect.fromLTRBXY(" + rect + ", " + J.toStringAsFixed$1$n(t1, 1) + ", " + J.toStringAsFixed$1$n(t2, 1) + ")";
      }
      return "RRect.fromLTRBAndCorners(" + rect + ", topLeft: " + new Q.Radius(t1, t2).toString$0(0) + ", topRight: " + new Q.Radius(t3, t4).toString$0(0) + ", bottomRight: " + new Q.Radius(_this.brRadiusX, _this.brRadiusY).toString$0(0) + ", bottomLeft: " + new Q.Radius(_this.blRadiusX, _this.blRadiusY).toString$0(0) + ")";
    }
  };
  Q._HashEnd.prototype = {};
  Q.Color.prototype = {
    $eq: function(_, other) {
      if (other == null)
        return false;
      if (this === other)
        return true;
      if (!J.get$runtimeType$(other).$eq(0, new H.TypeImpl(H.getRti(this))))
        return false;
      return this._value === H.interceptedTypeCheck(other, "$isColor")._value;
    },
    get$hashCode: function(_) {
      return C.JSInt_methods.get$hashCode(this._value);
    },
    toCssString$0: function() {
      var paddedValue,
        t1 = this._value;
      if ((4278190080 & t1) >>> 0 === 4278190080) {
        paddedValue = "00000" + C.JSInt_methods.toRadixString$1(t1, 16);
        return "#" + C.JSString_methods.substring$1(paddedValue, paddedValue.length - 6);
      } else {
        t1 = "rgba(" + C.JSInt_methods.toString$0(t1 >>> 16 & 255) + "," + C.JSInt_methods.toString$0(t1 >>> 8 & 255) + "," + C.JSInt_methods.toString$0(t1 & 255) + "," + C.JSDouble_methods.toString$0((t1 >>> 24 & 255) / 255) + ")";
        return t1.charCodeAt(0) == 0 ? t1 : t1;
      }
    },
    toString$0: function(_) {
      var t1 = this.super$Object$toString(0);
      return t1;
    }
  };
  Q.StrokeCap.prototype = {
    toString$0: function(_) {
      return this._ui$_name;
    }
  };
  Q.PaintingStyle.prototype = {
    toString$0: function(_) {
      return this._ui$_name;
    }
  };
  Q.BlendMode.prototype = {
    toString$0: function(_) {
      return this._ui$_name;
    }
  };
  Q.Clip.prototype = {
    toString$0: function(_) {
      return this._ui$_name;
    }
  };
  Q.PaintData.prototype = {
    clone$0: function(_) {
      var _this = this,
        t1 = new Q.PaintData();
      t1.blendMode = _this.blendMode;
      t1.filterQuality = _this.filterQuality;
      t1.maskFilter = _this.maskFilter;
      t1.shader = _this.shader;
      t1.color = _this.color;
      t1.colorFilter = _this.colorFilter;
      t1.strokeWidth = _this.strokeWidth;
      t1.style = _this.style;
      t1.strokeJoin = _this.strokeJoin;
      t1.strokeCap = _this.strokeCap;
      return t1;
    },
    set$color: function(_, color) {
      this.color = H.interceptedTypeCheck(color, "$isColor");
    }
  };
  Q.Paint.prototype = {
    set$blendMode: function(value) {
      var _this = this;
      if (_this._frozen) {
        _this._paintData = _this._paintData.clone$0(0);
        _this._frozen = false;
      }
      _this._paintData.blendMode = value;
    },
    set$style: function(_, value) {
      var _this = this;
      if (_this._frozen) {
        _this._paintData = _this._paintData.clone$0(0);
        _this._frozen = false;
      }
      _this._paintData.style = value;
    },
    get$strokeWidth: function() {
      var t1 = this._paintData.strokeWidth;
      return t1 == null ? 0 : t1;
    },
    set$strokeWidth: function(value) {
      var _this = this;
      if (_this._frozen) {
        _this._paintData = _this._paintData.clone$0(0);
        _this._frozen = false;
      }
      _this._paintData.strokeWidth = value;
    },
    set$color: function(_, value) {
      var _this = this;
      if (_this._frozen) {
        _this._paintData = _this._paintData.clone$0(0);
        _this._frozen = false;
      }
      _this._paintData.color = value;
    },
    set$shader: function(value) {
      var _this = this;
      if (_this._frozen) {
        _this._paintData = _this._paintData.clone$0(0);
        _this._frozen = false;
      }
      _this._paintData.shader = value;
    },
    toString$0: function(_) {
      var t1 = this.super$Object$toString(0);
      return t1;
    }
  };
  Q.Shader.prototype = {};
  Q.Gradient0.prototype = {};
  Q._GradientLinear.prototype = {
    createPaintStyle$1: function(ctx) {
      var t3, i, _this = this,
        t1 = _this.from,
        t2 = _this.to,
        gradient = ctx.createLinearGradient(t1._dx, t1._dy, t2._dx, t2._dy);
      t1 = _this.colorStops;
      if (t1 == null) {
        t1 = _this.colors;
        if (0 >= t1.length)
          return H.ioore(t1, 0);
        gradient.addColorStop(0, t1[0].toCssString$0());
        if (1 >= t1.length)
          return H.ioore(t1, 1);
        gradient.addColorStop(1, t1[1].toCssString$0());
        return gradient;
      }
      for (t2 = _this.colors, t3 = gradient && C.CanvasGradient_methods, i = 0; i < t2.length; ++i) {
        if (i >= t1.length)
          return H.ioore(t1, i);
        t3.addColorStop$2(gradient, t1[i], t2[i].toCssString$0());
      }
      return gradient;
    }
  };
  Q.BlurStyle.prototype = {
    toString$0: function(_) {
      return this._ui$_name;
    }
  };
  Q.MaskFilter.prototype = {
    $eq: function(_, other) {
      if (other == null)
        return false;
      if (!(other instanceof Q.MaskFilter))
        return false;
      return this._ui$_style === other._ui$_style && this._sigma === other._sigma;
    },
    get$hashCode: function(_) {
      return Q.hashValues(this._ui$_style, this._sigma, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd);
    },
    toString$0: function(_) {
      return "MaskFilter.blur(" + this._ui$_style.toString$0(0) + ", " + C.JSNumber_methods.toStringAsFixed$1(this._sigma, 1) + ")";
    }
  };
  Q.Shadow.prototype = {};
  Q.PointerChange.prototype = {
    toString$0: function(_) {
      return this._ui$_name;
    }
  };
  Q.PointerDeviceKind.prototype = {
    toString$0: function(_) {
      return this._ui$_name;
    }
  };
  Q.PointerSignalKind.prototype = {
    toString$0: function(_) {
      return this._ui$_name;
    }
  };
  Q.PointerData.prototype = {
    toString$0: function(_) {
      return new H.TypeImpl(H.getRti(this)).toString$0(0) + "(x: " + H.S(this.physicalX) + ", y: " + H.S(this.physicalY) + ")";
    }
  };
  Q.PointerDataPacket.prototype = {};
  Q.SemanticsAction.prototype = {
    toString$0: function(_) {
      switch (this.index) {
        case 1:
          return "SemanticsAction.tap";
        case 2:
          return "SemanticsAction.longPress";
        case 4:
          return "SemanticsAction.scrollLeft";
        case 8:
          return "SemanticsAction.scrollRight";
        case 16:
          return "SemanticsAction.scrollUp";
        case 32:
          return "SemanticsAction.scrollDown";
        case 64:
          return "SemanticsAction.increase";
        case 128:
          return "SemanticsAction.decrease";
        case 256:
          return "SemanticsAction.showOnScreen";
        case 512:
          return "SemanticsAction.moveCursorForwardByCharacter";
        case 1024:
          return "SemanticsAction.moveCursorBackwardByCharacter";
        case 2048:
          return "SemanticsAction.setSelection";
        case 4096:
          return "SemanticsAction.copy";
        case 8192:
          return "SemanticsAction.cut";
        case 16384:
          return "SemanticsAction.paste";
        case 32768:
          return "SemanticsAction.didGainAccessibilityFocus";
        case 65536:
          return "SemanticsAction.didLoseAccessibilityFocus";
        case 131072:
          return "SemanticsAction.customAction";
        case 262144:
          return "SemanticsAction.dismiss";
        case 524288:
          return "SemanticsAction.moveCursorForwardByWord";
        case 1048576:
          return "SemanticsAction.moveCursorBackwardByWord";
      }
      return;
    }
  };
  Q.SemanticsFlag.prototype = {
    toString$0: function(_) {
      switch (this.index) {
        case 1:
          return "SemanticsFlag.hasCheckedState";
        case 2:
          return "SemanticsFlag.isChecked";
        case 4:
          return "SemanticsFlag.isSelected";
        case 8:
          return "SemanticsFlag.isButton";
        case 16:
          return "SemanticsFlag.isTextField";
        case 32:
          return "SemanticsFlag.isFocused";
        case 64:
          return "SemanticsFlag.hasEnabledState";
        case 128:
          return "SemanticsFlag.isEnabled";
        case 256:
          return "SemanticsFlag.isInMutuallyExclusiveGroup";
        case 512:
          return "SemanticsFlag.isHeader";
        case 1024:
          return "SemanticsFlag.isObscured";
        case 2048:
          return "SemanticsFlag.scopesRoute";
        case 4096:
          return "SemanticsFlag.namesRoute";
        case 8192:
          return "SemanticsFlag.isHidden";
        case 16384:
          return "SemanticsFlag.isImage";
        case 32768:
          return "SemanticsFlag.isLiveRegion";
        case 65536:
          return "SemanticsFlag.hasToggledState";
        case 131072:
          return "SemanticsFlag.isToggled";
        case 262144:
          return "SemanticsFlag.hasImplicitScrolling";
        case 524288:
          return "SemanticsFlag.isMultiline";
      }
      return;
    }
  };
  Q.SemanticsUpdateBuilder.prototype = {
    build$0: function() {
      return new T.SemanticsUpdate(this._nodeUpdates);
    }
  };
  Q.FontWeight.prototype = {
    toString$0: function(_) {
      return C.Map_yXAeS.$index(0, this.index);
    }
  };
  Q.TextAlign.prototype = {
    toString$0: function(_) {
      return this._ui$_name;
    }
  };
  Q.TextBaseline.prototype = {
    toString$0: function(_) {
      return this._ui$_name;
    }
  };
  Q.TextDecoration.prototype = {
    contains$1: function(_, other) {
      var t1 = this._mask;
      return (t1 | other._mask) === t1;
    },
    $eq: function(_, other) {
      if (other == null)
        return false;
      if (!(other instanceof Q.TextDecoration))
        return false;
      return this._mask === other._mask;
    },
    get$hashCode: function(_) {
      return C.JSInt_methods.get$hashCode(this._mask);
    },
    toString$0: function(_) {
      var values,
        t1 = this._mask;
      if (t1 === 0)
        return "TextDecoration.none";
      values = H.setRuntimeTypeInfo([], [P.String]);
      if ((t1 & 1) !== 0)
        C.JSArray_methods.add$1(values, "underline");
      if ((t1 & 2) !== 0)
        C.JSArray_methods.add$1(values, "overline");
      if ((t1 & 4) !== 0)
        C.JSArray_methods.add$1(values, "lineThrough");
      t1 = values.length;
      if (t1 === 1) {
        if (0 >= t1)
          return H.ioore(values, 0);
        return "TextDecoration." + values[0];
      }
      return "TextDecoration.combine([" + C.JSArray_methods.join$1(values, ", ") + "])";
    }
  };
  Q.TextDecorationStyle.prototype = {
    toString$0: function(_) {
      return this._ui$_name;
    }
  };
  Q.TextStyle.prototype = {
    get$_effectiveFontFamily: function() {
      var t1 = this._fontFamily;
      if (t1.length === 0)
        return "sans-serif";
      return t1;
    },
    $eq: function(_, other) {
      var t1, _this = this;
      if (other == null)
        return false;
      if (_this === other)
        return true;
      if (!(other instanceof Q.TextStyle))
        return false;
      if (J.$eq$(_this._color, other._color))
        if (J.$eq$(_this._decoration, other._decoration))
          if (J.$eq$(_this._decorationColor, other._decorationColor))
            if (_this._decorationStyle == other._decorationStyle)
              if (_this._fontWeight == other._fontWeight)
                t1 = _this._textBaseline == other._textBaseline && _this._fontFamily === other._fontFamily && _this._fontSize == other._fontSize && _this._letterSpacing == other._letterSpacing && _this._wordSpacing == other._wordSpacing && _this._height == other._height && J.$eq$(_this._locale, other._locale) && _this._background == other._background && _this._foreground == other._foreground && Q._listEquals(_this._shadows, other._shadows, Q.Shadow) && Q._listEquals(_this._fontFamilyFallback, other._fontFamilyFallback, P.String);
              else
                t1 = false;
            else
              t1 = false;
          else
            t1 = false;
        else
          t1 = false;
      else
        t1 = false;
      return t1;
    },
    get$hashCode: function(_) {
      var _this = this;
      return Q.hashValues(_this._color, _this._decoration, _this._decorationColor, _this._decorationStyle, _this._fontWeight, _this._fontStyle, _this._textBaseline, _this._fontFamily, _this._fontFamilyFallback, _this._fontSize, _this._letterSpacing, _this._wordSpacing, _this._height, _this._locale, _this._background, _this._foreground, _this._shadows, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd);
    },
    toString$0: function(_) {
      var t1 = this.super$Object$toString(0);
      return t1;
    }
  };
  Q.ParagraphStyle.prototype = {
    get$_effectiveFontFamily: function() {
      var t1 = this._fontFamily;
      if (t1 == null || t1.length === 0)
        return "sans-serif";
      return t1;
    },
    get$_webOnlyLineHeight: function() {
      var t1 = this._strutStyle;
      if (t1 == null || false)
        return this._height;
      return Math.max(H.checkNum(t1._height), H.checkNum(this._height));
    },
    $eq: function(_, other) {
      var _this = this;
      if (other == null)
        return false;
      if (_this === other)
        return true;
      if (!J.get$runtimeType$(other).$eq(0, new H.TypeImpl(H.getRti(_this))))
        return false;
      H.interceptedTypeCheck(other, "$isParagraphStyle");
      if (_this._textAlign != other._textAlign)
        if (_this._textDirection != other._textDirection)
          _this._fontWeight != other._fontWeight;
      return true;
    },
    get$hashCode: function(_) {
      var _this = this;
      return Q.hashValues(_this._fontFamily, _this._fontSize, _this._height, _this._ellipsis, _this._locale, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd);
    },
    toString$0: function(_) {
      var t1 = this.super$Object$toString(0);
      return t1;
    }
  };
  Q.TextDirection.prototype = {
    toString$0: function(_) {
      return this._ui$_name;
    }
  };
  Q.TextBox.prototype = {
    $eq: function(_, other) {
      var _this = this;
      if (other == null)
        return false;
      if (_this === other)
        return true;
      if (!J.get$runtimeType$(other).$eq(0, new H.TypeImpl(H.getRti(_this))))
        return false;
      H.interceptedTypeCheck(other, "$isTextBox");
      return other.left === _this.left && other.top === _this.top && other.right === _this.right && other.bottom === _this.bottom && other.direction == _this.direction;
    },
    get$hashCode: function(_) {
      var _this = this;
      return Q.hashValues(_this.left, _this.top, _this.right, _this.bottom, _this.direction, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd);
    },
    toString$0: function(_) {
      return this.super$Object$toString(0);
    }
  };
  Q.TextAffinity.prototype = {
    toString$0: function(_) {
      return this._ui$_name;
    }
  };
  Q.TextPosition.prototype = {
    $eq: function(_, other) {
      if (other == null)
        return false;
      if (!J.get$runtimeType$(other).$eq(0, new H.TypeImpl(H.getRti(this))))
        return false;
      H.interceptedTypeCheck(other, "$isTextPosition");
      return other.offset === this.offset && other.affinity === this.affinity;
    },
    get$hashCode: function(_) {
      return Q.hashValues(this.offset, this.affinity, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd);
    },
    toString$0: function(_) {
      return new H.TypeImpl(H.getRti(this)).toString$0(0) + "(offset: " + this.offset + ", affinity: " + this.affinity.toString$0(0) + ")";
    }
  };
  Q.ParagraphConstraints.prototype = {
    $eq: function(_, other) {
      if (other == null)
        return false;
      if (!J.get$runtimeType$(other).$eq(0, new H.TypeImpl(H.getRti(this))))
        return false;
      return H.interceptedTypeCheck(other, "$isParagraphConstraints").width == this.width;
    },
    get$hashCode: function(_) {
      return J.get$hashCode$(this.width);
    },
    toString$0: function(_) {
      return new H.TypeImpl(H.getRti(this)).toString$0(0) + "(width: " + H.S(this.width) + ")";
    }
  };
  Q.Paragraph.prototype = {
    layout$1: function(constraints) {
      var t1, t2, _this = this;
      if (constraints.$eq(0, _this._lastUsedConstraints))
        return;
      $.TextMeasurementService__instance.measure$2(0, _this, constraints);
      _this._lastUsedConstraints = constraints;
      if (_this._paragraphGeometricStyle.maxLines != null) {
        t1 = _this.get$webOnlyMaxLinesHeight();
        t2 = _this._height;
        if (typeof t1 !== "number")
          return t1.$lt();
        _this._didExceedMaxLines = t1 < t2;
      } else
        _this._didExceedMaxLines = false;
      if (_this._webOnlyIsSingleLine && true)
        switch (_this._textAlign) {
          case C.TextAlign_2:
            t1 = constraints.width;
            t2 = _this._maxIntrinsicWidth;
            if (typeof t1 !== "number")
              return t1.$sub();
            _this.webOnlyAlignOffset = (t1 - t2) / 2;
            break;
          case C.TextAlign_1:
            t1 = constraints.width;
            t2 = _this._maxIntrinsicWidth;
            if (typeof t1 !== "number")
              return t1.$sub();
            _this.webOnlyAlignOffset = t1 - t2;
            break;
          case C.TextAlign_4:
            if (_this._textDirection === C.TextDirection_0) {
              t1 = constraints.width;
              t2 = _this._maxIntrinsicWidth;
              if (typeof t1 !== "number")
                return t1.$sub();
              t2 = t1 - t2;
              t1 = t2;
            } else
              t1 = 0;
            _this.webOnlyAlignOffset = t1;
            break;
          case C.TextAlign_5:
            if (_this._textDirection === C.TextDirection_1) {
              t1 = constraints.width;
              t2 = _this._maxIntrinsicWidth;
              if (typeof t1 !== "number")
                return t1.$sub();
              t2 = t1 - t2;
              t1 = t2;
            } else
              t1 = 0;
            _this.webOnlyAlignOffset = t1;
            break;
          default:
            _this.webOnlyAlignOffset = 0;
            break;
        }
    },
    get$webOnlyMaxLinesHeight: function() {
      var t1 = this._paragraphGeometricStyle.maxLines;
      if (t1 == null)
        return;
      return t1 * this._lineHeight;
    },
    _getBoxesForRange$4: function(start, end, boxHeightStyle, boxWidthStyle) {
      var $length, t2, t3, t4, _this = this,
        t1 = _this._plainText;
      if (t1 == null)
        return H.setRuntimeTypeInfo([], [Q.TextBox]);
      $length = t1.length;
      if (typeof start !== "number")
        return start.$lt();
      if (start >= 0) {
        if (typeof end !== "number")
          return end.$lt();
        t2 = end < 0 || start > $length || end > $length;
      } else
        t2 = true;
      if (t2)
        return H.setRuntimeTypeInfo([], [Q.TextBox]);
      t2 = $.TextMeasurementService__instance;
      t3 = _this._lastUsedConstraints;
      t4 = _this.webOnlyAlignOffset;
      return t2._findOrCreateRuler$1(_this._paragraphGeometricStyle).measureBoxesForRange$6$alignOffset$end$start$textDirection(t1, t3, t4, end, start, _this._textDirection);
    },
    getPositionForOffset$1: function(offset) {
      var t2, t3, dx, _measureSingleLineWidth, high, low, current, width, lowWidth, highWidth,
        t1 = this._plainText;
      if (t1 == null)
        return new Q.TextPosition(0, C.TextAffinity_1);
      t2 = offset._dx;
      t3 = this.webOnlyAlignOffset;
      if (typeof t2 !== "number")
        return t2.$sub();
      dx = t2 - t3;
      _measureSingleLineWidth = new Q.Paragraph_getPositionForOffset__measureSingleLineWidth(this, $.TextMeasurementService__instance);
      high = t1.length;
      low = 0;
      do {
        current = C.JSInt_methods._tdivFast$1(low + high, 2);
        width = _measureSingleLineWidth.call$1(C.JSString_methods.substring$2(t1, 0, current));
        if (typeof width !== "number")
          return width.$lt();
        if (width < dx)
          low = current;
        else {
          low = width > dx ? low : current;
          high = current;
        }
      } while (high - low > 1);
      if (low === high)
        return new Q.TextPosition(high, C.TextAffinity_0);
      lowWidth = _measureSingleLineWidth.call$1(C.JSString_methods.substring$2(t1, 0, low));
      highWidth = _measureSingleLineWidth.call$1(C.JSString_methods.substring$2(t1, 0, high));
      if (typeof lowWidth !== "number")
        return H.iae(lowWidth);
      if (typeof highWidth !== "number")
        return highWidth.$sub();
      if (dx - lowWidth < highWidth - dx)
        return new Q.TextPosition(low, C.TextAffinity_1);
      else
        return new Q.TextPosition(high, C.TextAffinity_0);
    }
  };
  Q.Paragraph_getPositionForOffset__measureSingleLineWidth.prototype = {
    call$1: function(text) {
      var ruler,
        t1 = this.$this,
        t2 = t1._paragraphGeometricStyle,
        t3 = t2.letterSpacing != null || t2.wordSpacing != null || t2.decoration != null,
        t4 = this.instance;
      if (t3) {
        t1 = Q.Paragraph$_(t1._background, t1._paint, H.interceptedTypeCheck(t1._paragraphElement.cloneNode(true), "$isHtmlElement"), t2, text, t1._textAlign, t1._textDirection);
        ruler = t4._findOrCreateRuler$1(t1._paragraphGeometricStyle);
        ruler.willMeasure$1(t1);
        ruler.measureAsSingleLine$0();
        ruler.didMeasure$0();
        return ruler.singleLineDimensions._readAndCacheMetrics$0().width;
      } else {
        t1 = t4.canvasContext;
        t1.font = t2.get$cssFontString();
        return t1.measureText(text).width;
      }
    },
    $signature: 199
  };
  Q.ParagraphBuilder.prototype = {
    build$0: function() {
      var t1 = this._tryBuildPlainText$0();
      return t1 == null ? this._buildRichText$0() : t1;
    },
    _tryBuildPlainText$0: function() {
      var style, color0, decoration0, decorationColor0, decorationStyle0, fontWeight0, textBaseline0, fontSize0, letterSpacing0, wordSpacing0, height0, locale0, background0, foreground0, cumulativeStyle, paint, plainTextBuffer, t4, t5, plainText, _this = this, _null = null,
        t1 = _this._paragraphStyle,
        fontWeight = t1._fontWeight,
        fontStyle = t1._fontStyle,
        fontFamily = t1._fontFamily,
        fontSize = t1._fontSize,
        textAlign = t1._textAlign,
        textDirection = t1._textDirection,
        locale = t1._locale,
        t2 = _this._ops,
        t3 = t2.length,
        foreground = _null,
        background = foreground,
        height = background,
        wordSpacing = height,
        letterSpacing = wordSpacing,
        textBaseline = letterSpacing,
        decorationStyle = textBaseline,
        decorationColor = decorationStyle,
        decoration = decorationColor,
        color = decoration,
        i = 0;
      while (true) {
        if (!(i < t3 && t2[i] instanceof Q.TextStyle))
          break;
        if (i >= t3)
          return H.ioore(t2, i);
        style = H.interceptedTypeCheck(t2[i], "$isTextStyle");
        color0 = style._color;
        if (color0 != null)
          color = color0;
        decoration0 = style._decoration;
        if (decoration0 != null)
          decoration = decoration0;
        decorationColor0 = style._decorationColor;
        if (decorationColor0 != null)
          decorationColor = decorationColor0;
        decorationStyle0 = style._decorationStyle;
        if (decorationStyle0 != null)
          decorationStyle = decorationStyle0;
        fontWeight0 = style._fontWeight;
        if (fontWeight0 != null)
          fontWeight = fontWeight0;
        textBaseline0 = style._textBaseline;
        if (textBaseline0 != null)
          textBaseline = textBaseline0;
        fontFamily = style._fontFamily;
        fontSize0 = style._fontSize;
        if (fontSize0 != null)
          fontSize = fontSize0;
        letterSpacing0 = style._letterSpacing;
        if (letterSpacing0 != null)
          letterSpacing = letterSpacing0;
        wordSpacing0 = style._wordSpacing;
        if (wordSpacing0 != null)
          wordSpacing = wordSpacing0;
        height0 = style._height;
        if (height0 != null)
          height = height0;
        locale0 = style._locale;
        if (locale0 != null)
          locale = locale0;
        background0 = style._background;
        if (background0 != null)
          background = background0;
        foreground0 = style._foreground;
        if (foreground0 != null)
          foreground = foreground0;
        ++i;
      }
      cumulativeStyle = Q.TextStyle$(background, color, decoration, decorationColor, decorationStyle, fontFamily, _null, fontSize, fontStyle, fontWeight, foreground, height, letterSpacing, locale, _null, textBaseline, wordSpacing);
      if (foreground != null)
        paint = foreground;
      else {
        paint = new Q.Paint(new Q.PaintData());
        if (color != null)
          paint.set$color(0, color);
      }
      if (i >= t2.length) {
        t2 = _this._paragraphElement;
        Q.applyTextStyleToElement(t2, cumulativeStyle);
        t3 = t1._maxLines;
        return Q.Paragraph$_(cumulativeStyle._background, paint, t2, T.ParagraphGeometricStyle$(Q._textDecorationToCssString(decoration, decorationStyle), t1._ellipsis, fontFamily, fontSize, fontStyle, fontWeight, letterSpacing, height, t3, wordSpacing), "", textAlign, textDirection);
      }
      t3 = t2[i];
      if (typeof t3 !== "string")
        return;
      plainTextBuffer = new P.StringBuffer("");
      t3 = "";
      while (true) {
        t4 = t2.length;
        if (i < t4) {
          t5 = t2[i];
          t5 = typeof t5 === "string";
        } else
          t5 = false;
        if (!t5)
          break;
        if (i >= t4)
          return H.ioore(t2, i);
        t3 += H.S(t2[i]);
        plainTextBuffer._contents = t3;
        ++i;
      }
      for (; i < t2.length; ++i)
        if (!J.$eq$(t2[i], $.$get$ParagraphBuilder__paragraphBuilderPop()))
          return;
      t2 = plainTextBuffer._contents;
      plainText = t2.charCodeAt(0) == 0 ? t2 : t2;
      t2 = _this._paragraphElement;
      $.$get$domRenderer().toString;
      t2.toString;
      t2.appendChild(document.createTextNode(plainText));
      Q.applyTextStyleToElement(t2, cumulativeStyle);
      t3 = cumulativeStyle._background;
      if (t3 != null)
        Q.applyTextBackgroundToElement(t2, cumulativeStyle);
      t4 = t1._maxLines;
      return Q.Paragraph$_(t3, paint, t2, T.ParagraphGeometricStyle$(Q._textDecorationToCssString(decoration, decorationStyle), t1._ellipsis, fontFamily, fontSize, fontStyle, fontWeight, letterSpacing, height, t4, wordSpacing), plainText, textAlign, textDirection);
    },
    _buildRichText$0: function() {
      var t1, i, op, element, t2, t3, t4, t5, t6, t7, _this = this, _null = null, elementStack = [],
        currentElement = new Q.ParagraphBuilder__buildRichText_currentElement(_this, elementStack);
      for (t1 = _this._ops, i = 0; i < t1.length; ++i) {
        op = t1[i];
        if (op instanceof Q.TextStyle) {
          $.$get$domRenderer().toString;
          element = document.createElement("span");
          H.interceptedTypeCheck(element, "$isHtmlElement");
          Q.applyTextStyleToElement(element, op);
          if (op._background != null)
            Q.applyTextBackgroundToElement(element, op);
          H.interceptedTypeCheck(currentElement.call$0(), "$isElement0").appendChild(element);
          elementStack.push(element);
        } else if (typeof op === "string") {
          t2 = $.$get$domRenderer();
          t3 = H.interceptedTypeCheck(currentElement.call$0(), "$isElement0");
          t2.toString;
          t3.toString;
          t3.appendChild(document.createTextNode(op));
        } else {
          t2 = $.$get$ParagraphBuilder__paragraphBuilderPop();
          if (op == null ? t2 == null : op === t2) {
            if (0 >= elementStack.length)
              return H.ioore(elementStack, -1);
            elementStack.pop();
          } else
            throw H.wrapException(P.UnsupportedError$("Unsupported ParagraphBuilder operation: " + H.S(op)));
        }
      }
      t1 = _this._paragraphStyle;
      t2 = t1._fontFamily;
      t3 = t1._fontWeight;
      t4 = t1._fontStyle;
      t5 = t1._fontSize;
      t6 = t1._height;
      t7 = t1._maxLines;
      return Q.Paragraph$_(_null, _null, _this._paragraphElement, T.ParagraphGeometricStyle$(_null, t1._ellipsis, t2, t5, t4, t3, _null, t6, t7, _null), _null, t1._textAlign, t1._textDirection);
    }
  };
  Q.ParagraphBuilder__buildRichText_currentElement.prototype = {
    call$0: function() {
      var t1 = this.elementStack;
      return t1.length !== 0 ? C.JSArray_methods.get$last(t1) : this.$this._paragraphElement;
    },
    $signature: 27
  };
  Q.TileMode.prototype = {
    toString$0: function(_) {
      return this._ui$_name;
    }
  };
  Q.AppLifecycleState.prototype = {
    toString$0: function(_) {
      return this._ui$_name;
    }
  };
  Q.WindowPadding.prototype = {};
  Q.Locale.prototype = {
    $eq: function(_, other) {
      var t1;
      if (other == null)
        return false;
      if (this === other)
        return true;
      if (!(other instanceof Q.Locale))
        return false;
      if (Q.Locale__replaceDeprecatedLanguageSubtag(this._languageCode) === Q.Locale__replaceDeprecatedLanguageSubtag(other._languageCode))
        t1 = Q.Locale__replaceDeprecatedRegionSubtag(this._countryCode) === Q.Locale__replaceDeprecatedRegionSubtag(other._countryCode);
      else
        t1 = false;
      return t1;
    },
    get$hashCode: function(_) {
      return Q.hashValues(Q.Locale__replaceDeprecatedLanguageSubtag(this._languageCode), null, Q.Locale__replaceDeprecatedRegionSubtag(this._countryCode), C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd, C.C__HashEnd);
    },
    toString$0: function(_) {
      var t1 = Q.Locale__replaceDeprecatedLanguageSubtag(this._languageCode);
      t1 += "_" + Q.Locale__replaceDeprecatedRegionSubtag(this._countryCode);
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    }
  };
  Q.Window.prototype = {
    get$physicalSize: function() {
      var _this = this,
        windowInnerWidth = window.innerWidth,
        windowInnerHeight = window.innerHeight;
      if (windowInnerWidth != _this._lastKnownWindowInnerWidth || windowInnerHeight != _this._lastKnownWindowInnerHeight) {
        _this._lastKnownWindowInnerWidth = windowInnerWidth;
        _this._lastKnownWindowInnerHeight = windowInnerHeight;
        windowInnerWidth.toString;
        windowInnerHeight.toString;
        _this._physicalSize = new Q.Size(windowInnerWidth, windowInnerHeight);
      }
      return _this._physicalSize;
    },
    get$onMetricsChanged: function() {
      return this._onMetricsChanged;
    },
    get$locale: function(_) {
      var t1 = C.JSArray_methods.get$first(C.List_Locale_en_US);
      return t1;
    },
    scheduleFrame$0: function() {
      var t1 = this.webOnlyScheduleFrameCallback;
      if (t1 == null)
        throw H.wrapException(P.Exception_Exception("webOnlyScheduleFrameCallback must be initialized first."));
      t1.call$0();
    },
    get$onBeginFrame: function() {
      return this._onBeginFrame;
    },
    get$onDrawFrame: function() {
      return this._onDrawFrame;
    },
    get$onPointerDataPacket: function() {
      return this._onPointerDataPacket;
    },
    get$onSemanticsEnabledChanged: function() {
      return this._onSemanticsEnabledChanged;
    },
    get$onSemanticsAction: function() {
      return this._onSemanticsAction;
    },
    get$onPlatformMessage: function() {
      return this._onPlatformMessage;
    },
    _replyToPlatformMessage$2: function(callback, data) {
      H.functionTypeCheck(callback, {func: 1, ret: -1, args: [P.ByteData]});
      P.Future_Future$delayed(C.Duration_0, -1).then$1$1(new Q.Window__replyToPlatformMessage_closure(callback, data), null);
    },
    sendPlatformMessage$3: function($name, data, callback) {
      var t1, url, decoded, type, t2, $navigator, $arguments, t3, theme, $call, t4, t5, _this = this;
      H.functionTypeCheck(callback, {func: 1, ret: -1, args: [P.ByteData]});
      switch ($name) {
        case "flutter/assets":
          t1 = data.buffer;
          t1.toString;
          url = C.C_Utf8Codec.decode$1(0, H.NativeUint8List_NativeUint8List$view(t1, 0, null));
          $._assetManager.load$1(0, url).then$1$2$onError(new Q.Window_sendPlatformMessage_closure(_this, callback), new Q.Window_sendPlatformMessage_closure0(_this, callback), null);
          return;
        case "flutter/platform":
          decoded = C.C_JSONMethodCodec.decodeMethodCall$1(data);
          switch (decoded.method) {
            case "SystemNavigator.pop":
              _this._browserHistory.exit$0().then$1$1(new Q.Window_sendPlatformMessage_closure1(_this, callback, C.C_JSONMethodCodec), null);
              return;
            case "HapticFeedback.vibrate":
              type = H.stringTypeCheck(decoded.$arguments);
              t1 = $.$get$domRenderer();
              t2 = _this._getHapticFeedbackDuration$1(type);
              t1.toString;
              $navigator = window.navigator;
              if ("vibrate" in $navigator)
                $navigator.vibrate.apply($navigator, H.setRuntimeTypeInfo([t2], [P.num]));
              return;
            case "SystemChrome.setApplicationSwitcherDescription":
              $arguments = H.assertSubtype(decoded.$arguments, "$isMap", [P.String, null], "$asMap");
              t1 = $.$get$domRenderer();
              t2 = J.getInterceptor$asx($arguments);
              t3 = H.stringTypeCheck(t2.$index($arguments, "label"));
              t1.toString;
              t1 = document;
              t1.title = t3;
              t2 = H.intTypeCheck(t2.$index($arguments, "primaryColor"));
              if (typeof t2 !== "number")
                return t2.$and();
              theme = H.interceptedTypeCheck(t1.querySelector("#flutterweb-theme"), "$isMetaElement");
              if (theme == null) {
                theme = t1.createElement("meta");
                theme.id = "flutterweb-theme";
                theme.name = "theme-color";
                t1.head.appendChild(theme);
              }
              theme.content = new Q.Color((t2 & 4294967295) >>> 0).toCssString$0();
              break;
          }
          break;
        case "flutter/textinput":
          t1 = $.$get$textEditing();
          t1.toString;
          $call = C.C_JSONMethodCodec.decodeMethodCall$1(data);
          switch ($call.method) {
            case "TextInput.setClient":
              t2 = $call.$arguments;
              t3 = J.getInterceptor$asx(t2);
              t1._clientId = H.intTypeCheck(t3.$index(t2, 0));
              t1.set$_engine$_configuration(H.assertSubtype(t3.$index(t2, 1), "$isMap", [P.String, null], "$asMap"));
              break;
            case "TextInput.setEditingState":
              t1 = t1.get$editingElement();
              t2 = H.assertSubtype($call.$arguments, "$isMap", [P.String, null], "$asMap");
              t3 = J.getInterceptor$asx(t2);
              t1.setEditingState$1(new T.EditingState(H.stringTypeCheck(t3.$index(t2, "text")), H.intTypeCheck(t3.$index(t2, "selectionBase")), H.intTypeCheck(t3.$index(t2, "selectionExtent"))));
              break;
            case "TextInput.show":
              if (!t1._isEditing) {
                t1._isEditing = true;
                t2 = t1.get$editingElement();
                t3 = t1._engine$_configuration;
                t4 = J.getInterceptor$asx(t3);
                t5 = T._getInputTypeFromString(H.stringTypeCheck(J.$index$asx(t4.$index(t3, "inputType"), "name")));
                H.boolTypeCheck(t4.$index(t3, "obscureText"));
                t2.enable$2$onChange(0, new T.InputConfiguration(t5), t1.get$_syncEditingStateToFlutter());
              }
              break;
            case "TextInput.clearClient":
            case "TextInput.hide":
              if (t1._isEditing) {
                t1._isEditing = false;
                t1.get$editingElement().disable$0(0);
              }
              break;
          }
          break;
      }
    },
    _getHapticFeedbackDuration$1: function(type) {
      switch (type) {
        case "HapticFeedbackType.lightImpact":
          return 10;
        case "HapticFeedbackType.mediumImpact":
          return 20;
        case "HapticFeedbackType.heavyImpact":
          return 30;
        case "HapticFeedbackType.selectionClick":
          return 10;
        default:
          return 50;
      }
    },
    set$_onTextScaleFactorChanged: function(_onTextScaleFactorChanged) {
      H.functionTypeCheck(_onTextScaleFactorChanged, {func: 1, ret: -1});
    },
    set$_onPlatformBrightnessChanged: function(_onPlatformBrightnessChanged) {
      H.functionTypeCheck(_onPlatformBrightnessChanged, {func: 1, ret: -1});
    },
    set$_onMetricsChanged: function(_onMetricsChanged) {
      this._onMetricsChanged = H.functionTypeCheck(_onMetricsChanged, {func: 1, ret: -1});
    },
    set$_onLocaleChanged: function(_onLocaleChanged) {
      H.functionTypeCheck(_onLocaleChanged, {func: 1, ret: -1});
    },
    set$webOnlyScheduleFrameCallback: function(webOnlyScheduleFrameCallback) {
      this.webOnlyScheduleFrameCallback = H.functionTypeCheck(webOnlyScheduleFrameCallback, {func: 1, ret: -1});
    },
    set$_onBeginFrame: function(_onBeginFrame) {
      this._onBeginFrame = H.functionTypeCheck(_onBeginFrame, {func: 1, ret: -1, args: [P.Duration]});
    },
    set$_onDrawFrame: function(_onDrawFrame) {
      this._onDrawFrame = H.functionTypeCheck(_onDrawFrame, {func: 1, ret: -1});
    },
    set$_onPointerDataPacket: function(_onPointerDataPacket) {
      this._onPointerDataPacket = H.functionTypeCheck(_onPointerDataPacket, {func: 1, ret: -1, args: [Q.PointerDataPacket]});
    },
    set$_onSemanticsEnabledChanged: function(_onSemanticsEnabledChanged) {
      this._onSemanticsEnabledChanged = H.functionTypeCheck(_onSemanticsEnabledChanged, {func: 1, ret: -1});
    },
    set$_onSemanticsAction: function(_onSemanticsAction) {
      this._onSemanticsAction = H.functionTypeCheck(_onSemanticsAction, {func: 1, ret: -1, args: [P.int, Q.SemanticsAction, P.ByteData]});
    },
    set$_onAccessibilityFeaturesChanged: function(_onAccessibilityFeaturesChanged) {
      H.functionTypeCheck(_onAccessibilityFeaturesChanged, {func: 1, ret: -1});
    },
    set$_onPlatformMessage: function(_onPlatformMessage) {
      this._onPlatformMessage = H.functionTypeCheck(_onPlatformMessage, {func: 1, ret: -1, args: [P.String, P.ByteData, {func: 1, ret: -1, args: [P.ByteData]}]});
    },
    onMetricsChanged$0: function() {
      return this.get$onMetricsChanged().call$0();
    },
    onBeginFrame$1: function(arg0) {
      return this.get$onBeginFrame().call$1(arg0);
    },
    onDrawFrame$0: function() {
      return this.get$onDrawFrame().call$0();
    },
    onPointerDataPacket$1: function(arg0) {
      return this.get$onPointerDataPacket().call$1(arg0);
    },
    onSemanticsEnabledChanged$0: function() {
      return this.get$onSemanticsEnabledChanged().call$0();
    },
    onSemanticsAction$3: function(arg0, arg1, arg2) {
      return this.get$onSemanticsAction().call$3(arg0, arg1, arg2);
    },
    onPlatformMessage$3: function(arg0, arg1, arg2) {
      return this.get$onPlatformMessage().call$3(arg0, arg1, arg2);
    }
  };
  Q.Window__replyToPlatformMessage_closure.prototype = {
    call$1: function(_) {
      this.callback.call$1(this.data);
    },
    $signature: 36
  };
  Q.Window_sendPlatformMessage_closure.prototype = {
    call$1: function(assetData) {
      this.$this._replyToPlatformMessage$2(this.callback, H.interceptedTypeCheck(assetData, "$isByteData"));
    },
    $signature: 25
  };
  Q.Window_sendPlatformMessage_closure0.prototype = {
    call$1: function(e) {
      var t1;
      window;
      t1 = "Error while trying to load an asset: " + H.S(e);
      if (typeof console != "undefined")
        window.console.warn(t1);
      this.$this._replyToPlatformMessage$2(this.callback, null);
    },
    $signature: 6
  };
  Q.Window_sendPlatformMessage_closure1.prototype = {
    call$1: function(_) {
      this.$this._replyToPlatformMessage$2(this.callback, C.C_JSONMessageCodec0.encodeMessage$1([true]));
    },
    $signature: 36
  };
  Q.AccessibilityFeatures.prototype = {
    toString$0: function(_) {
      var features = H.setRuntimeTypeInfo([], [P.String]),
        t1 = this._ui$_index;
      if ((1 & t1) !== 0)
        C.JSArray_methods.add$1(features, "accessibleNavigation");
      if ((2 & t1) !== 0)
        C.JSArray_methods.add$1(features, "invertColors");
      if ((4 & t1) !== 0)
        C.JSArray_methods.add$1(features, "disableAnimations");
      if ((8 & t1) !== 0)
        C.JSArray_methods.add$1(features, "boldText");
      if ((16 & t1) !== 0)
        C.JSArray_methods.add$1(features, "reduceMotion");
      return "AccessibilityFeatures" + H.S(features);
    },
    $eq: function(_, other) {
      if (other == null)
        return false;
      if (!J.get$runtimeType$(other).$eq(0, new H.TypeImpl(H.getRti(this))))
        return false;
      return this._ui$_index === H.interceptedTypeCheck(other, "$isAccessibilityFeatures")._ui$_index;
    },
    get$hashCode: function(_) {
      return C.JSInt_methods.get$hashCode(this._ui$_index);
    }
  };
  Q.Brightness.prototype = {
    toString$0: function(_) {
      return this._ui$_name;
    }
  };
  Q._PersistedClipRect_PersistedContainerSurface__DomClip.prototype = {
    adoptElements$1: function(oldSurface) {
      H.interceptedTypeCheck(oldSurface, "$is_DomClip");
      this.super$PersistedSurface$adoptElements(oldSurface);
      this._DomClip__childContainer = oldSurface._DomClip__childContainer;
      oldSurface._DomClip__childContainer = null;
    },
    recycle$0: function() {
      this.super$PersistedContainerSurface$recycle();
      this._DomClip__childContainer = null;
    }
  };
  Q._PersistedPhysicalShape_PersistedContainerSurface__DomClip.prototype = {
    adoptElements$1: function(oldSurface) {
      H.interceptedTypeCheck(oldSurface, "$is_DomClip");
      this.super$PersistedSurface$adoptElements(oldSurface);
      this._DomClip__childContainer = oldSurface._DomClip__childContainer;
      oldSurface._DomClip__childContainer = null;
    },
    recycle$0: function() {
      this.super$PersistedContainerSurface$recycle();
      this._DomClip__childContainer = null;
    }
  };
  T.PathProxy.prototype = {};
  T._PathOffset.prototype = {
    $add: function(_, other) {
      H.interceptedTypeCheck(other, "$is_PathOffset");
      return new T._PathOffset(this.dx + other.dx, this.dy + other.dy);
    },
    $sub: function(_, other) {
      H.interceptedTypeCheck(other, "$is_PathOffset");
      return new T._PathOffset(this.dx - other.dx, this.dy - other.dy);
    },
    $mul: function(_, operand) {
      if (typeof operand !== "number")
        return H.iae(operand);
      return new T._PathOffset(this.dx * operand, this.dy * operand);
    },
    toString$0: function(_) {
      return "PathOffset{" + H.S(this.dx) + "," + H.S(this.dy) + "}";
    },
    $eq: function(_, other) {
      if (other == null)
        return false;
      return other instanceof T._PathOffset && other.dx === this.dx && other.dy === this.dy;
    },
    get$hashCode: function(_) {
      return ((391 ^ C.JSNumber_methods.get$hashCode(this.dx)) * 23 ^ C.JSNumber_methods.get$hashCode(this.dy)) >>> 0;
    }
  };
  T.SvgPathStringSource.prototype = {
    _isHtmlSpace$1: function(character) {
      var t1;
      if (character <= 32)
        t1 = character === 32 || character === 10 || character === 9 || character === 13 || character === 12;
      else
        t1 = false;
      return t1;
    },
    _skipOptionalSvgSpaces$0: function() {
      var t1, t2, _this = this;
      while (true) {
        t1 = _this._idx;
        t2 = _this._codePoints._string;
        if (!(t1 < t2.length && _this._isHtmlSpace$1(C.JSString_methods._codeUnitAt$1(t2, t1))))
          break;
        ++_this._idx;
      }
      return _this._idx < _this._codePoints._string.length;
    },
    _skipOptionalSvgSpacesOrDelimiter$0: function() {
      var _this = this,
        t1 = _this._idx,
        t2 = _this._codePoints._string;
      if (t1 < t2.length && !_this._isHtmlSpace$1(C.JSString_methods._codeUnitAt$1(t2, t1)) && C.JSString_methods._codeUnitAt$1(_this._codePoints._string, _this._idx) !== 44)
        return false;
      if (_this._skipOptionalSvgSpaces$0()) {
        t1 = _this._idx;
        t2 = _this._codePoints._string;
        if (t1 < t2.length && C.JSString_methods._codeUnitAt$1(t2, t1) === 44) {
          _this._idx = t1 + 1;
          _this._skipOptionalSvgSpaces$0();
        }
      }
      return _this._idx < _this._codePoints._string.length;
    },
    _maybeImplicitCommand$2: function(lookahead, nextCommand) {
      var t1;
      if (!(lookahead >= 48 && lookahead <= 57 || lookahead === 43 || lookahead === 45 || lookahead === 46) || this._previousCommand === C.SvgPathSegType_1)
        return nextCommand;
      t1 = this._previousCommand;
      if (t1 === C.SvgPathSegType_2)
        return C.SvgPathSegType_4;
      if (t1 === C.SvgPathSegType_3)
        return C.SvgPathSegType_5;
      return t1;
    },
    _parseNumber$0: function() {
      var t1, end, t2, t3, sign, t4, ptrScanIntPart, integer, multiplier, ptrScanIntPart0, decimal, frac, number, exponentIsNegative, exponent, _this = this,
        _s16_ = "Numeric overflow";
      _this._skipOptionalSvgSpaces$0();
      t1 = _this._codePoints._string;
      end = t1.length;
      t2 = _this._idx;
      t3 = t2 < end;
      if (t3 && C.JSString_methods._codeUnitAt$1(t1, t2) === 43) {
        ++t2;
        _this._idx = t2;
        sign = 1;
      } else if (t3 && C.JSString_methods._codeUnitAt$1(t1, t2) === 45) {
        ++t2;
        _this._idx = t2;
        sign = -1;
      } else
        sign = 1;
      if (t2 !== end) {
        t1 = C.JSString_methods._codeUnitAt$1(t1, t2);
        t1 = (t1 < 48 || t1 > 57) && t1 !== 46;
      } else
        t1 = true;
      if (t1)
        throw H.wrapException(P.StateError$("First character of a number must be one of [0-9+-.]"));
      t1 = t2;
      while (true) {
        t3 = t1 < end;
        if (t3) {
          t4 = C.JSString_methods._codeUnitAt$1(_this._codePoints._string, t1);
          t4 = t4 >= 48 && t4 <= 57;
        } else
          t4 = false;
        if (!t4)
          break;
        ++t1;
        _this._idx = t1;
      }
      if (t1 !== t2) {
        ptrScanIntPart = t1 - 1;
        for (t4 = _this._codePoints._string, integer = 0, multiplier = 1; ptrScanIntPart >= t2; ptrScanIntPart = ptrScanIntPart0) {
          ptrScanIntPart0 = ptrScanIntPart - 1;
          integer += multiplier * (C.JSString_methods.codeUnitAt$1(t4, ptrScanIntPart) - 48);
          multiplier *= 10;
        }
        if (!(integer >= -17976931348623157e292 && integer <= 17976931348623157e292))
          throw H.wrapException(P.StateError$(_s16_));
      } else
        integer = 0;
      if (t3 && C.JSString_methods._codeUnitAt$1(_this._codePoints._string, t1) === 46) {
        t1 = _this._idx = t1 + 1;
        if (t1 < end) {
          t2 = C.JSString_methods._codeUnitAt$1(_this._codePoints._string, t1);
          t2 = t2 < 48 || t2 > 57;
        } else
          t2 = true;
        if (t2)
          throw H.wrapException(P.StateError$("There must be at least one digit following the ."));
        decimal = 0;
        frac = 1;
        while (true) {
          if (t1 < end) {
            t2 = C.JSString_methods._codeUnitAt$1(_this._codePoints._string, t1);
            t2 = t2 >= 48 && t2 <= 57;
          } else
            t2 = false;
          if (!t2)
            break;
          frac *= 0.1;
          t2 = _this._codePoints;
          t3 = t1 + 1;
          _this._idx = t3;
          decimal += (C.JSString_methods._codeUnitAt$1(t2._string, t1) - 48) * frac;
          t1 = t3;
        }
      } else
        decimal = 0;
      number = (integer + decimal) * sign;
      t1 = _this._idx;
      t2 = t1 + 1;
      if (t2 < end) {
        t3 = _this._codePoints._string;
        t1 = C.JSString_methods._codeUnitAt$1(t3, t1);
        if (t1 === 101 || t1 === 69) {
          t1 = C.JSString_methods._codeUnitAt$1(t3, t2);
          t1 = t1 !== 120 && t1 !== 109;
        } else
          t1 = false;
      } else
        t1 = false;
      if (t1) {
        _this._idx = t2;
        t1 = _this._codePoints._string;
        t3 = C.JSString_methods._codeUnitAt$1(t1, t2);
        if (t3 === 43) {
          ++t2;
          _this._idx = t2;
          exponentIsNegative = false;
        } else if (t3 === 45) {
          ++t2;
          _this._idx = t2;
          exponentIsNegative = true;
        } else
          exponentIsNegative = false;
        if (t2 < end) {
          t3 = C.JSString_methods._codeUnitAt$1(t1, t2);
          t3 = t3 < 48 || t3 > 57;
        } else
          t3 = true;
        if (t3)
          throw H.wrapException(P.StateError$("Missing exponent"));
        exponent = 0;
        while (true) {
          if (t2 < end) {
            t3 = C.JSString_methods._codeUnitAt$1(t1, t2);
            t3 = t3 >= 48 && t3 <= 57;
          } else
            t3 = false;
          if (!t3)
            break;
          exponent = exponent * 10 + (C.JSString_methods._codeUnitAt$1(t1, t2) - 48);
          ++t2;
          _this._idx = t2;
        }
        if (exponentIsNegative)
          exponent = -exponent;
        if (!(exponent >= -37 && exponent <= 38))
          throw H.wrapException(P.StateError$("Invalid exponent " + exponent));
        if (exponent !== 0)
          number *= Math.pow(10, exponent);
      }
      if (!(number >= -17976931348623157e292 && number <= 17976931348623157e292))
        throw H.wrapException(P.StateError$(_s16_));
      _this._skipOptionalSvgSpacesOrDelimiter$0();
      return number;
    },
    _parseArcFlag$0: function() {
      var flagChar, _this = this,
        t1 = _this._idx,
        t2 = _this._codePoints._string;
      if (t1 >= t2.length)
        throw H.wrapException(P.StateError$("Expected more data"));
      flagChar = C.JSString_methods._codeUnitAt$1(t2, t1);
      _this._idx = t1 + 1;
      _this._skipOptionalSvgSpacesOrDelimiter$0();
      if (flagChar === 48)
        return false;
      else if (flagChar === 49)
        return true;
      else
        throw H.wrapException(P.StateError$("Invalid flag value"));
    },
    parseSegments$0: function() {
      var $async$self = this;
      return P._makeSyncStarIterable(function() {
        var $async$goto = 0, $async$handler = 1, $async$currentError, t1, t2, segment, lookahead, command, target;
        return function $async$parseSegments$0($async$errorCode, $async$result) {
          if ($async$errorCode === 1) {
            $async$currentError = $async$result;
            $async$goto = $async$handler;
          }
          while (true)
            switch ($async$goto) {
              case 0:
                // Function start
              case 2:
                // for condition
                if (!(t1 = $async$self._idx, t2 = $async$self._codePoints._string, t1 < t2.length)) {
                  // goto after for
                  $async$goto = 3;
                  break;
                }
                segment = new T.PathSegmentData(C.SvgPathSegType_0);
                lookahead = C.JSString_methods._codeUnitAt$1(t2, t1);
                command = C.Map_ekiLr.$index(0, lookahead);
                if (command == null)
                  command = C.SvgPathSegType_0;
                if ($async$self._previousCommand === C.SvgPathSegType_0) {
                  if (command !== C.SvgPathSegType_3 && command !== C.SvgPathSegType_2)
                    H.throwExpression(P.StateError$("Expected to find moveTo command"));
                  ++$async$self._idx;
                } else if (command === C.SvgPathSegType_0) {
                  command = $async$self._maybeImplicitCommand$2(lookahead, command);
                  if (command === C.SvgPathSegType_0)
                    H.throwExpression(P.StateError$("Expected a path command"));
                } else
                  ++$async$self._idx;
                segment.command = $async$self._previousCommand = command;
                switch (command) {
                  case C.SvgPathSegType_7:
                  case C.SvgPathSegType_6:
                    target = 1;
                    break;
                  case C.SvgPathSegType_17:
                  case C.SvgPathSegType_16:
                    target = 2;
                    break;
                  case C.SvgPathSegType_3:
                  case C.SvgPathSegType_2:
                  case C.SvgPathSegType_5:
                  case C.SvgPathSegType_4:
                  case C.SvgPathSegType_19:
                  case C.SvgPathSegType_18:
                    target = 3;
                    break;
                  case C.SvgPathSegType_13:
                  case C.SvgPathSegType_12:
                    target = 4;
                    break;
                  case C.SvgPathSegType_15:
                  case C.SvgPathSegType_14:
                    target = 5;
                    break;
                  case C.SvgPathSegType_1:
                    target = 6;
                    break;
                  case C.SvgPathSegType_9:
                  case C.SvgPathSegType_8:
                    target = 7;
                    break;
                  case C.SvgPathSegType_11:
                  case C.SvgPathSegType_10:
                    target = 8;
                    break;
                  case C.SvgPathSegType_0:
                    target = 9;
                    break;
                  default:
                    target = null;
                    break;
                }
                if (target)
                  c$0:
                    for (; true;)
                      switch (target) {
                        case 1:
                          segment.point1 = new T._PathOffset($async$self._parseNumber$0(), $async$self._parseNumber$0());
                          target = 2;
                          continue c$0;
                        case 2:
                          segment.point2 = new T._PathOffset($async$self._parseNumber$0(), $async$self._parseNumber$0());
                          target = 3;
                          continue c$0;
                        case 3:
                          segment.targetPoint = new T._PathOffset($async$self._parseNumber$0(), $async$self._parseNumber$0());
                          break c$0;
                        case 4:
                          t1 = $async$self._parseNumber$0();
                          t2 = segment.targetPoint;
                          t2 = t2 == null ? null : t2.dy;
                          segment.targetPoint = new T._PathOffset(t1, t2 == null ? 0 : t2);
                          break c$0;
                        case 5:
                          t1 = segment.targetPoint;
                          t1 = t1 == null ? null : t1.dx;
                          if (t1 == null)
                            t1 = 0;
                          segment.targetPoint = new T._PathOffset(t1, $async$self._parseNumber$0());
                          break c$0;
                        case 6:
                          $async$self._skipOptionalSvgSpaces$0();
                          break c$0;
                        case 7:
                          segment.point1 = new T._PathOffset($async$self._parseNumber$0(), $async$self._parseNumber$0());
                          segment.targetPoint = new T._PathOffset($async$self._parseNumber$0(), $async$self._parseNumber$0());
                          break c$0;
                        case 8:
                          segment.point1 = new T._PathOffset($async$self._parseNumber$0(), $async$self._parseNumber$0());
                          t1 = $async$self._parseNumber$0();
                          t2 = segment.point2;
                          t2 = t2 == null ? null : t2.dy;
                          segment.point2 = new T._PathOffset(t1, t2 == null ? 0 : t2);
                          segment.arcLarge = $async$self._parseArcFlag$0();
                          segment.arcSweep = $async$self._parseArcFlag$0();
                          segment.targetPoint = new T._PathOffset($async$self._parseNumber$0(), $async$self._parseNumber$0());
                          break c$0;
                        case 9:
                          H.throwExpression(P.StateError$("Unknown segment command"));
                          break c$0;
                      }
                $async$goto = 4;
                return segment;
              case 4:
                // after yield
                // goto for condition
                $async$goto = 2;
                break;
              case 3:
                // after for
                // implicit return
                return P._IterationMarker_endOfIteration();
              case 1:
                // rethrow
                return P._IterationMarker_uncaughtError($async$currentError);
            }
        };
      }, T.PathSegmentData);
    },
    set$_codePoints: function(_codePoints) {
      this._codePoints = H.assertSubtype(_codePoints, "$isList", [P.int], "$asList");
    }
  };
  T.PathSegmentData.prototype = {
    toString$0: function(_) {
      var _this = this;
      return "PathSegmentData{" + _this.command.toString$0(0) + " " + H.S(_this.targetPoint) + " " + H.S(_this.point1) + " " + H.S(_this.point2) + " " + _this.arcSweep + " " + _this.arcLarge + "}";
    }
  };
  T.SvgPathNormalizer.prototype = {
    _decomposeArcToCubic$3: function(currentPoint, arcSegment, path) {
      var angle, midPointDistance, pointTransform, transformedMidPoint, t2, t3, radiiScale, point1, point2, delta, scaleFactor, centerPoint, theta1, thetaArc, segments, t4, i, startTheta, endTheta, t, sinStartTheta, cosStartTheta, sinEndTheta, cosEndTheta, t5, t6, t7, t8, t9, _this = this, _null = null,
        t1 = arcSegment.point1,
        rx = Math.abs(t1.dx),
        ry = Math.abs(t1.dy);
      if (rx === 0 || ry === 0)
        return false;
      if (J.$eq$(arcSegment.targetPoint, currentPoint))
        return false;
      angle = arcSegment.point2.dx;
      midPointDistance = currentPoint.$sub(0, arcSegment.targetPoint).$mul(0, 0.5);
      pointTransform = new T.Matrix41(new Float32Array(16));
      pointTransform.setIdentity$0();
      t1 = -angle;
      pointTransform.rotateZ$1(t1);
      transformedMidPoint = _this._mapPoint$2(pointTransform, new T._PathOffset(midPointDistance.dx, midPointDistance.dy));
      t2 = transformedMidPoint.dx;
      t3 = transformedMidPoint.dy;
      radiiScale = t2 * t2 / (rx * rx) + t3 * t3 / (ry * ry);
      if (radiiScale > 1) {
        rx *= Math.sqrt(radiiScale);
        ry *= Math.sqrt(radiiScale);
      }
      pointTransform.setIdentity$0();
      pointTransform.scale$2(0, 1 / rx, 1 / ry);
      pointTransform.rotateZ$1(t1);
      point1 = _this._mapPoint$2(pointTransform, currentPoint);
      point2 = _this._mapPoint$2(pointTransform, arcSegment.targetPoint);
      delta = point2.$sub(0, point1);
      t1 = delta.dx;
      t2 = delta.dy;
      scaleFactor = Math.sqrt(Math.max(1 / (t1 * t1 + t2 * t2) - 0.25, 0));
      if (!isFinite(scaleFactor))
        scaleFactor = 0;
      delta = delta.$mul(0, arcSegment.arcSweep === arcSegment.arcLarge ? -scaleFactor : scaleFactor);
      t1 = point1.$add(0, point2).$mul(0, 0.5);
      t2 = t1.dx + -delta.dy;
      t1 = t1.dy + delta.dx;
      centerPoint = new T._PathOffset(t2, t1);
      point1 = point1.$sub(0, centerPoint);
      theta1 = Math.atan2(point1.dy, point1.dx);
      point2 = point2.$sub(0, centerPoint);
      thetaArc = Math.atan2(point2.dy, point2.dx) - theta1;
      if (thetaArc < 0 && arcSegment.arcSweep)
        thetaArc += 6.283185307179586;
      else if (thetaArc > 0 && !arcSegment.arcSweep)
        thetaArc -= 6.283185307179586;
      pointTransform.setIdentity$0();
      pointTransform.rotateZ$1(angle);
      pointTransform.scale$2(0, rx, ry);
      segments = C.JSDouble_methods.ceil$0(Math.abs(thetaArc / 1.5717963267948964));
      for (t3 = path.path.subpaths, t4 = [T.PathCommand], i = 0; i < segments;) {
        startTheta = theta1 + i * thetaArc / segments;
        ++i;
        endTheta = theta1 + i * thetaArc / segments;
        t = 1.3333333333333333 * Math.tan(0.25 * (endTheta - startTheta));
        if (!isFinite(t))
          return false;
        sinStartTheta = Math.sin(startTheta);
        cosStartTheta = Math.cos(startTheta);
        sinEndTheta = Math.sin(endTheta);
        cosEndTheta = Math.cos(endTheta);
        t5 = cosEndTheta + t2;
        t6 = sinEndTheta + t1;
        t7 = _this._mapPoint$2(pointTransform, new T._PathOffset(cosStartTheta - t * sinStartTheta + t2, sinStartTheta + t * cosStartTheta + t1));
        t8 = _this._mapPoint$2(pointTransform, new T._PathOffset(t5 + t * sinEndTheta, t6 + -t * cosEndTheta));
        t6 = _this._mapPoint$2(pointTransform, new T._PathOffset(t5, t6));
        t5 = t6.dx;
        t6 = t6.dy;
        if (t3.length === 0)
          C.JSArray_methods.add$1(t3, new T.Subpath(0, 0, H.setRuntimeTypeInfo([], t4)));
        t9 = t3.length === 0 ? _null : C.JSArray_methods.get$last(t3);
        t9 = t9 == null ? _null : t9.commands;
        (t9 && C.JSArray_methods).add$1(t9, new T.BezierCurveTo(t7.dx, t7.dy, t8.dx, t8.dy, t5, t6, 5));
        (t3.length === 0 ? _null : C.JSArray_methods.get$last(t3)).currentX = t5;
        (t3.length === 0 ? _null : C.JSArray_methods.get$last(t3)).currentY = t6;
      }
      return true;
    },
    _mapPoint$2: function(transform, point) {
      var t1 = transform._vector_math$_m4storage,
        t2 = t1[0],
        t3 = point.dx,
        t4 = t1[4],
        t5 = point.dy;
      return new T._PathOffset(t2 * t3 + t4 * t5 + t1[12], t1[1] * t3 + t1[5] * t5 + t1[13]);
    }
  };
  L.SvgPathSegType.prototype = {
    toString$0: function(_) {
      return this._path_segment_type$_name;
    }
  };
  N._TypedDataBuffer.prototype = {
    get$length: function(_) {
      return this._typed_buffers$_length;
    },
    $index: function(_, index) {
      var t1;
      H.intTypeCheck(index);
      t1 = this._typed_buffers$_length;
      if (typeof index !== "number")
        return index.$ge();
      if (index >= t1)
        throw H.wrapException(P.IndexError$(index, this, null, null, null));
      t1 = this._typed_buffers$_buffer;
      if (index < 0 || index >= t1.length)
        return H.ioore(t1, index);
      return t1[index];
    },
    $indexSet: function(_, index, value) {
      var t1, _this = this;
      H.intTypeCheck(index);
      H.assertSubtypeOfRuntimeType(value, H.getRuntimeTypeArgument(_this, "_TypedDataBuffer", 0));
      t1 = _this._typed_buffers$_length;
      if (typeof index !== "number")
        return index.$ge();
      if (index >= t1)
        throw H.wrapException(P.IndexError$(index, _this, null, null, null));
      C.NativeUint8List_methods.$indexSet(_this._typed_buffers$_buffer, index, value);
    },
    set$length: function(_, newLength) {
      var t2, t3, i, newBuffer, _this = this,
        t1 = _this._typed_buffers$_length;
      if (newLength < t1)
        for (t2 = _this._typed_buffers$_buffer, t3 = t2.length, i = newLength; i < t1; ++i) {
          if (i < 0 || i >= t3)
            return H.ioore(t2, i);
          t2[i] = 0;
        }
      else {
        t1 = _this._typed_buffers$_buffer.length;
        if (newLength > t1) {
          if (t1 === 0)
            newBuffer = new Uint8Array(newLength);
          else
            newBuffer = _this._createBiggerBuffer$1(newLength);
          C.NativeUint8List_methods.setRange$3(newBuffer, 0, _this._typed_buffers$_length, _this._typed_buffers$_buffer);
          _this.set$_typed_buffers$_buffer(newBuffer);
        }
      }
      _this._typed_buffers$_length = newLength;
    },
    _typed_buffers$_add$1: function(_, value) {
      var t1, _this = this;
      H.assertSubtypeOfRuntimeType(value, H.getRuntimeTypeArgument(_this, "_TypedDataBuffer", 0));
      t1 = _this._typed_buffers$_length;
      if (t1 === _this._typed_buffers$_buffer.length)
        _this._typed_buffers$_grow$1(t1);
      C.NativeUint8List_methods.$indexSet(_this._typed_buffers$_buffer, _this._typed_buffers$_length++, value);
    },
    add$1: function(_, value) {
      this._typed_buffers$_add$1(0, H.assertSubtypeOfRuntimeType(value, H.getRuntimeTypeArgument(this, "_TypedDataBuffer", 0)));
    },
    addAll$3: function(_, values, start, end) {
      H.assertSubtype(values, "$isIterable", [H.getRuntimeTypeArgument(this, "_TypedDataBuffer", 0)], "$asIterable");
      P.RangeError_checkNotNegative(start, "start");
      if (end != null && start > end)
        throw H.wrapException(P.RangeError$range(end, start, null, "end", null));
      this._addAll$3(values, start, end);
    },
    addAll$1: function($receiver, values) {
      return this.addAll$3($receiver, values, 0, null);
    },
    _addAll$3: function(values, start, end) {
      var t2, i, value, _this = this,
        t1 = H.getRuntimeTypeArgument(_this, "_TypedDataBuffer", 0);
      H.assertSubtype(values, "$isIterable", [t1], "$asIterable");
      t2 = J.getInterceptor$(values);
      if (!!t2.$isList)
        end = end == null ? values.length : end;
      if (end != null) {
        _this._insertKnownLength$4(_this._typed_buffers$_length, values, start, end);
        return;
      }
      for (t2 = t2.get$iterator(values), i = 0; t2.moveNext$0();) {
        value = t2.get$current(t2);
        if (i >= start)
          _this._typed_buffers$_add$1(0, H.assertSubtypeOfRuntimeType(value, t1));
        ++i;
      }
      if (i < start)
        throw H.wrapException(P.StateError$("Too few elements"));
    },
    _insertKnownLength$4: function(index, values, start, end) {
      var t1, valuesLength, newLength, t2, _this = this;
      H.assertSubtype(values, "$isIterable", [H.getRuntimeTypeArgument(_this, "_TypedDataBuffer", 0)], "$asIterable");
      if (!!J.getInterceptor$(values).$isList) {
        t1 = values.length;
        if (start > t1 || end > t1)
          throw H.wrapException(P.StateError$("Too few elements"));
      }
      valuesLength = end - start;
      newLength = _this._typed_buffers$_length + valuesLength;
      _this._ensureCapacity$1(newLength);
      t1 = _this._typed_buffers$_buffer;
      t2 = index + valuesLength;
      C.NativeUint8List_methods.setRange$4(t1, t2, _this._typed_buffers$_length + valuesLength, t1, index);
      C.NativeUint8List_methods.setRange$4(_this._typed_buffers$_buffer, index, t2, values, start);
      _this._typed_buffers$_length = newLength;
    },
    _ensureCapacity$1: function(requiredCapacity) {
      var newBuffer, _this = this;
      if (requiredCapacity <= _this._typed_buffers$_buffer.length)
        return;
      newBuffer = _this._createBiggerBuffer$1(requiredCapacity);
      C.NativeUint8List_methods.setRange$3(newBuffer, 0, _this._typed_buffers$_length, _this._typed_buffers$_buffer);
      _this.set$_typed_buffers$_buffer(newBuffer);
    },
    _createBiggerBuffer$1: function(requiredCapacity) {
      var t1,
        newLength = this._typed_buffers$_buffer.length * 2;
      if (requiredCapacity != null && newLength < requiredCapacity)
        newLength = requiredCapacity;
      else if (newLength < 8)
        newLength = 8;
      t1 = typeof newLength === "number" && Math.floor(newLength) === newLength ? newLength : H.throwExpression(P.ArgumentError$("Invalid length " + H.S(newLength)));
      return new Uint8Array(t1);
    },
    _typed_buffers$_grow$1: function($length) {
      var t1 = this._createBiggerBuffer$1(null);
      C.NativeUint8List_methods.setRange$3(t1, 0, $length, this._typed_buffers$_buffer);
      this.set$_typed_buffers$_buffer(t1);
    },
    set$_typed_buffers$_buffer: function(_buffer) {
      this._typed_buffers$_buffer = H.assertSubtype(_buffer, "$isList", [H.getRuntimeTypeArgument(this, "_TypedDataBuffer", 0)], "$asList");
    }
  };
  N._IntBuffer.prototype = {
    $asEfficientLengthIterable: function() {
      return [P.int];
    },
    $asListMixin: function() {
      return [P.int];
    },
    $asIterable: function() {
      return [P.int];
    },
    $asList: function() {
      return [P.int];
    },
    $as_TypedDataBuffer: function() {
      return [P.int];
    }
  };
  N.Uint8Buffer.prototype = {};
  A.hashObjects_closure.prototype = {
    call$2: function(h, i) {
      var t1, hash;
      H.intTypeCheck(h);
      t1 = J.get$hashCode$(i);
      if (typeof h !== "number")
        return h.$add();
      hash = 536870911 & h + t1;
      hash = 536870911 & hash + ((524287 & hash) << 10);
      return hash ^ hash >>> 6;
    },
    $signature: 200
  };
  T.Matrix41.prototype = {
    setFrom$1: function(arg) {
      var argStorage = arg._vector_math$_m4storage,
        t1 = this._vector_math$_m4storage;
      t1[15] = argStorage[15];
      t1[14] = argStorage[14];
      t1[13] = argStorage[13];
      t1[12] = argStorage[12];
      t1[11] = argStorage[11];
      t1[10] = argStorage[10];
      t1[9] = argStorage[9];
      t1[8] = argStorage[8];
      t1[7] = argStorage[7];
      t1[6] = argStorage[6];
      t1[5] = argStorage[5];
      t1[4] = argStorage[4];
      t1[3] = argStorage[3];
      t1[2] = argStorage[2];
      t1[1] = argStorage[1];
      t1[0] = argStorage[0];
    },
    toString$0: function(_) {
      var _this = this;
      return "[0] " + _this.getRow$1(0).toString$0(0) + "\n[1] " + _this.getRow$1(1).toString$0(0) + "\n[2] " + _this.getRow$1(2).toString$0(0) + "\n[3] " + _this.getRow$1(3).toString$0(0) + "\n";
    },
    $index: function(_, i) {
      var t1;
      H.intTypeCheck(i);
      t1 = this._vector_math$_m4storage;
      if (i < 0 || i >= 16)
        return H.ioore(t1, i);
      return t1[i];
    },
    $indexSet: function(_, i, v) {
      C.NativeFloat32List_methods.$indexSet(this._vector_math$_m4storage, i, v);
    },
    $eq: function(_, other) {
      var t1, t2, t3;
      if (other == null)
        return false;
      if (other instanceof T.Matrix41) {
        t1 = this._vector_math$_m4storage;
        t2 = t1[0];
        t3 = other._vector_math$_m4storage;
        t1 = t2 === t3[0] && t1[1] === t3[1] && t1[2] === t3[2] && t1[3] === t3[3] && t1[4] === t3[4] && t1[5] === t3[5] && t1[6] === t3[6] && t1[7] === t3[7] && t1[8] === t3[8] && t1[9] === t3[9] && t1[10] === t3[10] && t1[11] === t3[11] && t1[12] === t3[12] && t1[13] === t3[13] && t1[14] === t3[14] && t1[15] === t3[15];
      } else
        t1 = false;
      return t1;
    },
    get$hashCode: function(_) {
      return A.hashObjects(this._vector_math$_m4storage);
    },
    getRow$1: function(row) {
      var t3,
        t1 = new Float32Array(4),
        t2 = this._vector_math$_m4storage;
      if (row >= 16)
        return H.ioore(t2, row);
      t1[0] = t2[row];
      t3 = 4 + row;
      if (t3 >= 16)
        return H.ioore(t2, t3);
      t1[1] = t2[t3];
      t3 = 8 + row;
      if (t3 >= 16)
        return H.ioore(t2, t3);
      t1[2] = t2[t3];
      t3 = 12 + row;
      if (t3 >= 16)
        return H.ioore(t2, t3);
      t1[3] = t2[t3];
      return new T.Vector40(t1);
    },
    $mul: function(_, arg) {
      var t1;
      if (typeof arg === "number") {
        t1 = new T.Matrix41(new Float32Array(16));
        t1.setFrom$1(this);
        t1.scale$3(0, arg, null, null);
        return t1;
      }
      throw H.wrapException(P.ArgumentError$(arg));
    },
    $add: function(_, arg) {
      var t1, t2, oStorage;
      H.interceptedTypeCheck(arg, "$isMatrix41");
      t1 = new Float32Array(16);
      t2 = new T.Matrix41(t1);
      t2.setFrom$1(this);
      oStorage = arg._vector_math$_m4storage;
      t1[0] = t1[0] + oStorage[0];
      t1[1] = t1[1] + oStorage[1];
      t1[2] = t1[2] + oStorage[2];
      t1[3] = t1[3] + oStorage[3];
      t1[4] = t1[4] + oStorage[4];
      t1[5] = t1[5] + oStorage[5];
      t1[6] = t1[6] + oStorage[6];
      t1[7] = t1[7] + oStorage[7];
      t1[8] = t1[8] + oStorage[8];
      t1[9] = t1[9] + oStorage[9];
      t1[10] = t1[10] + oStorage[10];
      t1[11] = t1[11] + oStorage[11];
      t1[12] = t1[12] + oStorage[12];
      t1[13] = t1[13] + oStorage[13];
      t1[14] = t1[14] + oStorage[14];
      t1[15] = t1[15] + oStorage[15];
      return t2;
    },
    $sub: function(_, arg) {
      var t1, t2, oStorage;
      H.interceptedTypeCheck(arg, "$isMatrix41");
      t1 = new Float32Array(16);
      t2 = new T.Matrix41(t1);
      t2.setFrom$1(this);
      oStorage = arg._vector_math$_m4storage;
      t1[0] = t1[0] - oStorage[0];
      t1[1] = t1[1] - oStorage[1];
      t1[2] = t1[2] - oStorage[2];
      t1[3] = t1[3] - oStorage[3];
      t1[4] = t1[4] - oStorage[4];
      t1[5] = t1[5] - oStorage[5];
      t1[6] = t1[6] - oStorage[6];
      t1[7] = t1[7] - oStorage[7];
      t1[8] = t1[8] - oStorage[8];
      t1[9] = t1[9] - oStorage[9];
      t1[10] = t1[10] - oStorage[10];
      t1[11] = t1[11] - oStorage[11];
      t1[12] = t1[12] - oStorage[12];
      t1[13] = t1[13] - oStorage[13];
      t1[14] = t1[14] - oStorage[14];
      t1[15] = t1[15] - oStorage[15];
      return t2;
    },
    rotateZ$1: function(angle) {
      var cosAngle = Math.cos(angle),
        sinAngle = Math.sin(angle),
        t1 = this._vector_math$_m4storage,
        t2 = t1[0],
        t3 = t1[4],
        t4 = t1[1],
        t5 = t1[5],
        t6 = t1[2],
        t7 = t1[6],
        t8 = t1[3],
        t9 = t1[7],
        t10 = -sinAngle;
      t1[0] = t2 * cosAngle + t3 * sinAngle;
      t1[1] = t4 * cosAngle + t5 * sinAngle;
      t1[2] = t6 * cosAngle + t7 * sinAngle;
      t1[3] = t8 * cosAngle + t9 * sinAngle;
      t1[4] = t2 * t10 + t3 * cosAngle;
      t1[5] = t4 * t10 + t5 * cosAngle;
      t1[6] = t6 * t10 + t7 * cosAngle;
      t1[7] = t8 * t10 + t9 * cosAngle;
    },
    scale$3: function(_, x, y, z) {
      var sx, sy, sz,
        t1 = J.getInterceptor$(x),
        t2 = !!t1.$isVector40,
        sw = t2 ? x.get$w(x) : 1;
      if (!!t1.$isVector31) {
        sx = x.get$x(x);
        sy = x.get$y(x);
        sz = x.get$z(x);
      } else if (t2) {
        sx = x.get$x(x);
        sy = x.get$y(x);
        sz = x.get$z(x);
      } else if (typeof x === "number") {
        sy = y == null ? x : y;
        sz = x;
        sx = sz;
      } else {
        sx = null;
        sy = null;
        sz = null;
      }
      t1 = this._vector_math$_m4storage;
      t2 = t1[0];
      if (typeof sx !== "number")
        return H.iae(sx);
      t1[0] = t2 * sx;
      t1[1] = t1[1] * sx;
      t1[2] = t1[2] * sx;
      t1[3] = t1[3] * sx;
      t2 = t1[4];
      if (typeof sy !== "number")
        return H.iae(sy);
      t1[4] = t2 * sy;
      t1[5] = t1[5] * sy;
      t1[6] = t1[6] * sy;
      t1[7] = t1[7] * sy;
      t2 = t1[8];
      if (typeof sz !== "number")
        return H.iae(sz);
      t1[8] = t2 * sz;
      t1[9] = t1[9] * sz;
      t1[10] = t1[10] * sz;
      t1[11] = t1[11] * sz;
      t1[12] = t1[12] * sw;
      t1[13] = t1[13] * sw;
      t1[14] = t1[14] * sw;
      t1[15] = t1[15] * sw;
    },
    scale$2: function($receiver, x, y) {
      return this.scale$3($receiver, x, y, null);
    },
    setIdentity$0: function() {
      var t1 = this._vector_math$_m4storage;
      t1[0] = 1;
      t1[1] = 0;
      t1[2] = 0;
      t1[3] = 0;
      t1[4] = 0;
      t1[5] = 1;
      t1[6] = 0;
      t1[7] = 0;
      t1[8] = 0;
      t1[9] = 0;
      t1[10] = 1;
      t1[11] = 0;
      t1[12] = 0;
      t1[13] = 0;
      t1[14] = 0;
      t1[15] = 1;
    },
    add$1: function(_, o) {
      var oStorage = o._vector_math$_m4storage,
        t1 = this._vector_math$_m4storage;
      t1[0] = t1[0] + oStorage[0];
      t1[1] = t1[1] + oStorage[1];
      t1[2] = t1[2] + oStorage[2];
      t1[3] = t1[3] + oStorage[3];
      t1[4] = t1[4] + oStorage[4];
      t1[5] = t1[5] + oStorage[5];
      t1[6] = t1[6] + oStorage[6];
      t1[7] = t1[7] + oStorage[7];
      t1[8] = t1[8] + oStorage[8];
      t1[9] = t1[9] + oStorage[9];
      t1[10] = t1[10] + oStorage[10];
      t1[11] = t1[11] + oStorage[11];
      t1[12] = t1[12] + oStorage[12];
      t1[13] = t1[13] + oStorage[13];
      t1[14] = t1[14] + oStorage[14];
      t1[15] = t1[15] + oStorage[15];
    }
  };
  T.Vector31.prototype = {
    setFrom$1: function(other) {
      var otherStorage = other._vector_math$_v3storage,
        t1 = this._vector_math$_v3storage;
      t1[0] = otherStorage[0];
      t1[1] = otherStorage[1];
      t1[2] = otherStorage[2];
    },
    toString$0: function(_) {
      var t1 = this._vector_math$_v3storage;
      return "[" + H.S(t1[0]) + "," + H.S(t1[1]) + "," + H.S(t1[2]) + "]";
    },
    $eq: function(_, other) {
      var t1, t2, t3;
      if (other == null)
        return false;
      if (other instanceof T.Vector31) {
        t1 = this._vector_math$_v3storage;
        t2 = t1[0];
        t3 = other._vector_math$_v3storage;
        t1 = t2 === t3[0] && t1[1] === t3[1] && t1[2] === t3[2];
      } else
        t1 = false;
      return t1;
    },
    get$hashCode: function(_) {
      return A.hashObjects(this._vector_math$_v3storage);
    },
    $sub: function(_, other) {
      var t1, t2, argStorage;
      H.interceptedTypeCheck(other, "$isVector31");
      t1 = new Float32Array(3);
      t2 = new T.Vector31(t1);
      t2.setFrom$1(this);
      argStorage = other._vector_math$_v3storage;
      t1[0] = t1[0] - argStorage[0];
      t1[1] = t1[1] - argStorage[1];
      t1[2] = t1[2] - argStorage[2];
      return t2;
    },
    $add: function(_, other) {
      var t1, t2, argStorage;
      H.interceptedTypeCheck(other, "$isVector31");
      t1 = new Float32Array(3);
      t2 = new T.Vector31(t1);
      t2.setFrom$1(this);
      argStorage = other._vector_math$_v3storage;
      t1[0] = t1[0] + argStorage[0];
      t1[1] = t1[1] + argStorage[1];
      t1[2] = t1[2] + argStorage[2];
      return t2;
    },
    $mul: function(_, scale) {
      return this.scaled$1(scale);
    },
    $index: function(_, i) {
      var t1;
      H.intTypeCheck(i);
      t1 = this._vector_math$_v3storage;
      if (i < 0 || i >= 3)
        return H.ioore(t1, i);
      return t1[i];
    },
    $indexSet: function(_, i, v) {
      C.NativeFloat32List_methods.$indexSet(this._vector_math$_v3storage, i, v);
    },
    get$length: function(_) {
      var t1 = this._vector_math$_v3storage,
        t2 = t1[0],
        t3 = t1[1];
      t1 = t1[2];
      return Math.sqrt(t2 * t2 + t3 * t3 + t1 * t1);
    },
    add$1: function(_, arg) {
      var argStorage = arg._vector_math$_v3storage,
        t1 = this._vector_math$_v3storage;
      t1[0] = t1[0] + argStorage[0];
      t1[1] = t1[1] + argStorage[1];
      t1[2] = t1[2] + argStorage[2];
    },
    scaled$1: function(arg) {
      var t3,
        t1 = new Float32Array(3),
        t2 = new T.Vector31(t1);
      t2.setFrom$1(this);
      t3 = t1[2];
      if (typeof arg !== "number")
        return H.iae(arg);
      t1[2] = t3 * arg;
      t1[1] = t1[1] * arg;
      t1[0] = t1[0] * arg;
      return t2;
    },
    round$0: function(_) {
      var t1 = this._vector_math$_v3storage;
      t1[0] = C.JSNumber_methods.roundToDouble$0(t1[0]);
      t1[1] = C.JSNumber_methods.roundToDouble$0(t1[1]);
      t1[2] = C.JSNumber_methods.roundToDouble$0(t1[2]);
    }
  };
  T.Vector40.prototype = {
    setFrom$1: function(other) {
      var otherStorage = other._vector_math$_v4storage,
        t1 = this._vector_math$_v4storage;
      t1[3] = otherStorage[3];
      t1[2] = otherStorage[2];
      t1[1] = otherStorage[1];
      t1[0] = otherStorage[0];
    },
    toString$0: function(_) {
      var t1 = this._vector_math$_v4storage;
      return H.S(t1[0]) + "," + H.S(t1[1]) + "," + H.S(t1[2]) + "," + H.S(t1[3]);
    },
    $eq: function(_, other) {
      var t1, t2, t3;
      if (other == null)
        return false;
      if (other instanceof T.Vector40) {
        t1 = this._vector_math$_v4storage;
        t2 = t1[0];
        t3 = other._vector_math$_v4storage;
        t1 = t2 === t3[0] && t1[1] === t3[1] && t1[2] === t3[2] && t1[3] === t3[3];
      } else
        t1 = false;
      return t1;
    },
    get$hashCode: function(_) {
      return A.hashObjects(this._vector_math$_v4storage);
    },
    $sub: function(_, other) {
      var t1, t2, argStorage;
      H.interceptedTypeCheck(other, "$isVector40");
      t1 = new Float32Array(4);
      t2 = new T.Vector40(t1);
      t2.setFrom$1(this);
      argStorage = other._vector_math$_v4storage;
      t1[0] = t1[0] - argStorage[0];
      t1[1] = t1[1] - argStorage[1];
      t1[2] = t1[2] - argStorage[2];
      t1[3] = t1[3] - argStorage[3];
      return t2;
    },
    $add: function(_, other) {
      var t1, t2, argStorage;
      H.interceptedTypeCheck(other, "$isVector40");
      t1 = new Float32Array(4);
      t2 = new T.Vector40(t1);
      t2.setFrom$1(this);
      argStorage = other._vector_math$_v4storage;
      t1[0] = t1[0] + argStorage[0];
      t1[1] = t1[1] + argStorage[1];
      t1[2] = t1[2] + argStorage[2];
      t1[3] = t1[3] + argStorage[3];
      return t2;
    },
    $mul: function(_, scale) {
      var t1 = new T.Vector40(new Float32Array(4));
      t1.setFrom$1(this);
      t1.scale$1(0, scale);
      return t1;
    },
    $index: function(_, i) {
      var t1;
      H.intTypeCheck(i);
      t1 = this._vector_math$_v4storage;
      if (i < 0 || i >= 4)
        return H.ioore(t1, i);
      return t1[i];
    },
    $indexSet: function(_, i, v) {
      C.NativeFloat32List_methods.$indexSet(this._vector_math$_v4storage, i, v);
    },
    get$length: function(_) {
      var t1 = this._vector_math$_v4storage,
        t2 = t1[0],
        t3 = t1[1],
        t4 = t1[2];
      t1 = t1[3];
      return Math.sqrt(t2 * t2 + t3 * t3 + t4 * t4 + t1 * t1);
    },
    add$1: function(_, arg) {
      var argStorage = arg._vector_math$_v4storage,
        t1 = this._vector_math$_v4storage;
      t1[0] = t1[0] + argStorage[0];
      t1[1] = t1[1] + argStorage[1];
      t1[2] = t1[2] + argStorage[2];
      t1[3] = t1[3] + argStorage[3];
    },
    scale$1: function(_, arg) {
      var t1 = this._vector_math$_v4storage,
        t2 = t1[0];
      if (typeof arg !== "number")
        return H.iae(arg);
      t1[0] = t2 * arg;
      t1[1] = t1[1] * arg;
      t1[2] = t1[2] * arg;
      t1[3] = t1[3] * arg;
    },
    round$0: function(_) {
      var t1 = this._vector_math$_v4storage;
      t1[0] = C.JSNumber_methods.roundToDouble$0(t1[0]);
      t1[1] = C.JSNumber_methods.roundToDouble$0(t1[1]);
      t1[2] = C.JSNumber_methods.roundToDouble$0(t1[2]);
      t1[3] = C.JSNumber_methods.roundToDouble$0(t1[3]);
    }
  };
  E.Matrix4.prototype = {
    setFrom$1: function(arg) {
      var argStorage = arg._m4storage,
        t1 = this._m4storage;
      t1[15] = argStorage[15];
      t1[14] = argStorage[14];
      t1[13] = argStorage[13];
      t1[12] = argStorage[12];
      t1[11] = argStorage[11];
      t1[10] = argStorage[10];
      t1[9] = argStorage[9];
      t1[8] = argStorage[8];
      t1[7] = argStorage[7];
      t1[6] = argStorage[6];
      t1[5] = argStorage[5];
      t1[4] = argStorage[4];
      t1[3] = argStorage[3];
      t1[2] = argStorage[2];
      t1[1] = argStorage[1];
      t1[0] = argStorage[0];
    },
    toString$0: function(_) {
      var _this = this;
      return "[0] " + _this.getRow$1(0).toString$0(0) + "\n[1] " + _this.getRow$1(1).toString$0(0) + "\n[2] " + _this.getRow$1(2).toString$0(0) + "\n[3] " + _this.getRow$1(3).toString$0(0) + "\n";
    },
    $index: function(_, i) {
      var t1;
      H.intTypeCheck(i);
      t1 = this._m4storage;
      if (i < 0 || i >= 16)
        return H.ioore(t1, i);
      return t1[i];
    },
    $indexSet: function(_, i, v) {
      C.NativeFloat64List_methods.$indexSet(this._m4storage, i, v);
    },
    $eq: function(_, other) {
      var t1, t2, t3;
      if (other == null)
        return false;
      if (other instanceof E.Matrix4) {
        t1 = this._m4storage;
        t2 = t1[0];
        t3 = other._m4storage;
        t1 = t2 === t3[0] && t1[1] === t3[1] && t1[2] === t3[2] && t1[3] === t3[3] && t1[4] === t3[4] && t1[5] === t3[5] && t1[6] === t3[6] && t1[7] === t3[7] && t1[8] === t3[8] && t1[9] === t3[9] && t1[10] === t3[10] && t1[11] === t3[11] && t1[12] === t3[12] && t1[13] === t3[13] && t1[14] === t3[14] && t1[15] === t3[15];
      } else
        t1 = false;
      return t1;
    },
    get$hashCode: function(_) {
      return A.hashObjects(this._m4storage);
    },
    getRow$1: function(row) {
      var t3,
        t1 = new Float64Array(4),
        t2 = this._m4storage;
      if (row >= 16)
        return H.ioore(t2, row);
      t1[0] = t2[row];
      t3 = 4 + row;
      if (t3 >= 16)
        return H.ioore(t2, t3);
      t1[1] = t2[t3];
      t3 = 8 + row;
      if (t3 >= 16)
        return H.ioore(t2, t3);
      t1[2] = t2[t3];
      t3 = 12 + row;
      if (t3 >= 16)
        return H.ioore(t2, t3);
      t1[3] = t2[t3];
      return new E.Vector4(t1);
    },
    $mul: function(_, arg) {
      var t1;
      if (typeof arg === "number") {
        t1 = new E.Matrix4(new Float64Array(16));
        t1.setFrom$1(this);
        t1.scale$3(0, arg, null, null);
        return t1;
      }
      throw H.wrapException(P.ArgumentError$(arg));
    },
    $add: function(_, arg) {
      var t1, t2, oStorage;
      H.interceptedTypeCheck(arg, "$isMatrix4");
      t1 = new Float64Array(16);
      t2 = new E.Matrix4(t1);
      t2.setFrom$1(this);
      oStorage = arg._m4storage;
      t1[0] = t1[0] + oStorage[0];
      t1[1] = t1[1] + oStorage[1];
      t1[2] = t1[2] + oStorage[2];
      t1[3] = t1[3] + oStorage[3];
      t1[4] = t1[4] + oStorage[4];
      t1[5] = t1[5] + oStorage[5];
      t1[6] = t1[6] + oStorage[6];
      t1[7] = t1[7] + oStorage[7];
      t1[8] = t1[8] + oStorage[8];
      t1[9] = t1[9] + oStorage[9];
      t1[10] = t1[10] + oStorage[10];
      t1[11] = t1[11] + oStorage[11];
      t1[12] = t1[12] + oStorage[12];
      t1[13] = t1[13] + oStorage[13];
      t1[14] = t1[14] + oStorage[14];
      t1[15] = t1[15] + oStorage[15];
      return t2;
    },
    $sub: function(_, arg) {
      var t1, t2, oStorage;
      H.interceptedTypeCheck(arg, "$isMatrix4");
      t1 = new Float64Array(16);
      t2 = new E.Matrix4(t1);
      t2.setFrom$1(this);
      oStorage = arg._m4storage;
      t1[0] = t1[0] - oStorage[0];
      t1[1] = t1[1] - oStorage[1];
      t1[2] = t1[2] - oStorage[2];
      t1[3] = t1[3] - oStorage[3];
      t1[4] = t1[4] - oStorage[4];
      t1[5] = t1[5] - oStorage[5];
      t1[6] = t1[6] - oStorage[6];
      t1[7] = t1[7] - oStorage[7];
      t1[8] = t1[8] - oStorage[8];
      t1[9] = t1[9] - oStorage[9];
      t1[10] = t1[10] - oStorage[10];
      t1[11] = t1[11] - oStorage[11];
      t1[12] = t1[12] - oStorage[12];
      t1[13] = t1[13] - oStorage[13];
      t1[14] = t1[14] - oStorage[14];
      t1[15] = t1[15] - oStorage[15];
      return t2;
    },
    translate$2: function(_, x, y) {
      var ty, tx, tz, t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, t16, t17;
      if (typeof x === "number") {
        ty = y;
        tx = x;
        tz = 0;
      } else {
        tx = null;
        ty = null;
        tz = null;
      }
      t1 = this._m4storage;
      t2 = t1[0];
      if (typeof tx !== "number")
        return H.iae(tx);
      t3 = t1[4];
      if (typeof ty !== "number")
        return H.iae(ty);
      t4 = t1[8];
      if (typeof tz !== "number")
        return H.iae(tz);
      t5 = t1[12];
      t6 = t1[1];
      t7 = t1[5];
      t8 = t1[9];
      t9 = t1[13];
      t10 = t1[2];
      t11 = t1[6];
      t12 = t1[10];
      t13 = t1[14];
      t14 = t1[3];
      t15 = t1[7];
      t16 = t1[11];
      t17 = t1[15];
      t1[12] = t2 * tx + t3 * ty + t4 * tz + t5;
      t1[13] = t6 * tx + t7 * ty + t8 * tz + t9;
      t1[14] = t10 * tx + t11 * ty + t12 * tz + t13;
      t1[15] = t14 * tx + t15 * ty + t16 * tz + t17;
    },
    scale$3: function(_, x, y, z) {
      var sy, sz, sx, t1, t2;
      if (typeof x === "number") {
        sy = y == null ? x : y;
        sz = z == null ? x : z;
        sx = x;
      } else {
        sx = null;
        sy = null;
        sz = null;
      }
      t1 = this._m4storage;
      t2 = t1[0];
      if (typeof sx !== "number")
        return H.iae(sx);
      t1[0] = t2 * sx;
      t1[1] = t1[1] * sx;
      t1[2] = t1[2] * sx;
      t1[3] = t1[3] * sx;
      t2 = t1[4];
      if (typeof sy !== "number")
        return H.iae(sy);
      t1[4] = t2 * sy;
      t1[5] = t1[5] * sy;
      t1[6] = t1[6] * sy;
      t1[7] = t1[7] * sy;
      t2 = t1[8];
      if (typeof sz !== "number")
        return H.iae(sz);
      t1[8] = t2 * sz;
      t1[9] = t1[9] * sz;
      t1[10] = t1[10] * sz;
      t1[11] = t1[11] * sz;
      t1[12] = t1[12];
      t1[13] = t1[13];
      t1[14] = t1[14];
      t1[15] = t1[15];
    },
    setIdentity$0: function() {
      var t1 = this._m4storage;
      t1[0] = 1;
      t1[1] = 0;
      t1[2] = 0;
      t1[3] = 0;
      t1[4] = 0;
      t1[5] = 1;
      t1[6] = 0;
      t1[7] = 0;
      t1[8] = 0;
      t1[9] = 0;
      t1[10] = 1;
      t1[11] = 0;
      t1[12] = 0;
      t1[13] = 0;
      t1[14] = 0;
      t1[15] = 1;
    },
    copyInverse$1: function(arg) {
      var invDet, t1, t2, t3,
        argStorage = arg._m4storage,
        a00 = argStorage[0],
        a01 = argStorage[1],
        a02 = argStorage[2],
        a03 = argStorage[3],
        a10 = argStorage[4],
        a11 = argStorage[5],
        a12 = argStorage[6],
        a13 = argStorage[7],
        a20 = argStorage[8],
        a21 = argStorage[9],
        a22 = argStorage[10],
        a23 = argStorage[11],
        a30 = argStorage[12],
        a31 = argStorage[13],
        a32 = argStorage[14],
        a33 = argStorage[15],
        b00 = a00 * a11 - a01 * a10,
        b01 = a00 * a12 - a02 * a10,
        b02 = a00 * a13 - a03 * a10,
        b03 = a01 * a12 - a02 * a11,
        b04 = a01 * a13 - a03 * a11,
        b05 = a02 * a13 - a03 * a12,
        b06 = a20 * a31 - a21 * a30,
        b07 = a20 * a32 - a22 * a30,
        b08 = a20 * a33 - a23 * a30,
        b09 = a21 * a32 - a22 * a31,
        b10 = a21 * a33 - a23 * a31,
        b11 = a22 * a33 - a23 * a32,
        det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;
      if (det === 0) {
        this.setFrom$1(arg);
        return 0;
      }
      invDet = 1 / det;
      t1 = this._m4storage;
      t1[0] = (a11 * b11 - a12 * b10 + a13 * b09) * invDet;
      t1[1] = (-a01 * b11 + a02 * b10 - a03 * b09) * invDet;
      t1[2] = (a31 * b05 - a32 * b04 + a33 * b03) * invDet;
      t1[3] = (-a21 * b05 + a22 * b04 - a23 * b03) * invDet;
      t2 = -a10;
      t1[4] = (t2 * b11 + a12 * b08 - a13 * b07) * invDet;
      t1[5] = (a00 * b11 - a02 * b08 + a03 * b07) * invDet;
      t3 = -a30;
      t1[6] = (t3 * b05 + a32 * b02 - a33 * b01) * invDet;
      t1[7] = (a20 * b05 - a22 * b02 + a23 * b01) * invDet;
      t1[8] = (a10 * b10 - a11 * b08 + a13 * b06) * invDet;
      t1[9] = (-a00 * b10 + a01 * b08 - a03 * b06) * invDet;
      t1[10] = (a30 * b04 - a31 * b02 + a33 * b00) * invDet;
      t1[11] = (-a20 * b04 + a21 * b02 - a23 * b00) * invDet;
      t1[12] = (t2 * b09 + a11 * b07 - a12 * b06) * invDet;
      t1[13] = (a00 * b09 - a01 * b07 + a02 * b06) * invDet;
      t1[14] = (t3 * b03 + a31 * b01 - a32 * b00) * invDet;
      t1[15] = (a20 * b03 - a21 * b01 + a22 * b00) * invDet;
      return det;
    },
    add$1: function(_, o) {
      var oStorage = o._m4storage,
        t1 = this._m4storage;
      t1[0] = t1[0] + oStorage[0];
      t1[1] = t1[1] + oStorage[1];
      t1[2] = t1[2] + oStorage[2];
      t1[3] = t1[3] + oStorage[3];
      t1[4] = t1[4] + oStorage[4];
      t1[5] = t1[5] + oStorage[5];
      t1[6] = t1[6] + oStorage[6];
      t1[7] = t1[7] + oStorage[7];
      t1[8] = t1[8] + oStorage[8];
      t1[9] = t1[9] + oStorage[9];
      t1[10] = t1[10] + oStorage[10];
      t1[11] = t1[11] + oStorage[11];
      t1[12] = t1[12] + oStorage[12];
      t1[13] = t1[13] + oStorage[13];
      t1[14] = t1[14] + oStorage[14];
      t1[15] = t1[15] + oStorage[15];
    },
    multiply$1: function(_, arg) {
      var t1 = this._m4storage,
        m00 = t1[0],
        m01 = t1[4],
        m02 = t1[8],
        m03 = t1[12],
        m10 = t1[1],
        m11 = t1[5],
        m12 = t1[9],
        m13 = t1[13],
        m20 = t1[2],
        m21 = t1[6],
        m22 = t1[10],
        m23 = t1[14],
        m30 = t1[3],
        m31 = t1[7],
        m32 = t1[11],
        m33 = t1[15],
        argStorage = arg._m4storage,
        n00 = argStorage[0],
        n01 = argStorage[4],
        n02 = argStorage[8],
        n03 = argStorage[12],
        n10 = argStorage[1],
        n11 = argStorage[5],
        n12 = argStorage[9],
        n13 = argStorage[13],
        n20 = argStorage[2],
        n21 = argStorage[6],
        n22 = argStorage[10],
        n23 = argStorage[14],
        n30 = argStorage[3],
        n31 = argStorage[7],
        n32 = argStorage[11],
        n33 = argStorage[15];
      t1[0] = m00 * n00 + m01 * n10 + m02 * n20 + m03 * n30;
      t1[4] = m00 * n01 + m01 * n11 + m02 * n21 + m03 * n31;
      t1[8] = m00 * n02 + m01 * n12 + m02 * n22 + m03 * n32;
      t1[12] = m00 * n03 + m01 * n13 + m02 * n23 + m03 * n33;
      t1[1] = m10 * n00 + m11 * n10 + m12 * n20 + m13 * n30;
      t1[5] = m10 * n01 + m11 * n11 + m12 * n21 + m13 * n31;
      t1[9] = m10 * n02 + m11 * n12 + m12 * n22 + m13 * n32;
      t1[13] = m10 * n03 + m11 * n13 + m12 * n23 + m13 * n33;
      t1[2] = m20 * n00 + m21 * n10 + m22 * n20 + m23 * n30;
      t1[6] = m20 * n01 + m21 * n11 + m22 * n21 + m23 * n31;
      t1[10] = m20 * n02 + m21 * n12 + m22 * n22 + m23 * n32;
      t1[14] = m20 * n03 + m21 * n13 + m22 * n23 + m23 * n33;
      t1[3] = m30 * n00 + m31 * n10 + m32 * n20 + m33 * n30;
      t1[7] = m30 * n01 + m31 * n11 + m32 * n21 + m33 * n31;
      t1[11] = m30 * n02 + m31 * n12 + m32 * n22 + m33 * n32;
      t1[15] = m30 * n03 + m31 * n13 + m32 * n23 + m33 * n33;
    },
    transform3$1: function(arg) {
      var argStorage = arg._v3storage,
        t1 = this._m4storage,
        t2 = t1[0],
        t3 = argStorage[0],
        t4 = t1[4],
        t5 = argStorage[1],
        t6 = t1[8],
        t7 = argStorage[2],
        t8 = t1[12],
        t9 = t1[1],
        t10 = t1[5],
        t11 = t1[9],
        t12 = t1[13],
        t13 = t1[2],
        t14 = t1[6],
        t15 = t1[10];
      t1 = t1[14];
      argStorage[0] = t2 * t3 + t4 * t5 + t6 * t7 + t8;
      argStorage[1] = t9 * t3 + t10 * t5 + t11 * t7 + t12;
      argStorage[2] = t13 * t3 + t14 * t5 + t15 * t7 + t1;
      return arg;
    },
    transform$1: function(_, arg) {
      var argStorage = arg._v4storage,
        t1 = this._m4storage,
        t2 = t1[0],
        t3 = argStorage[0],
        t4 = t1[4],
        t5 = argStorage[1],
        t6 = t1[8],
        t7 = argStorage[2],
        t8 = t1[12],
        t9 = argStorage[3],
        t10 = t1[1],
        t11 = t1[5],
        t12 = t1[9],
        t13 = t1[13],
        t14 = t1[2],
        t15 = t1[6],
        t16 = t1[10],
        t17 = t1[14],
        t18 = t1[3],
        t19 = t1[7],
        t20 = t1[11];
      t1 = t1[15];
      argStorage[0] = t2 * t3 + t4 * t5 + t6 * t7 + t8 * t9;
      argStorage[1] = t10 * t3 + t11 * t5 + t12 * t7 + t13 * t9;
      argStorage[2] = t14 * t3 + t15 * t5 + t16 * t7 + t17 * t9;
      argStorage[3] = t18 * t3 + t19 * t5 + t20 * t7 + t1 * t9;
      return arg;
    },
    perspectiveTransform$1: function(arg) {
      var argStorage = arg._v3storage,
        t1 = this._m4storage,
        t2 = t1[0],
        t3 = argStorage[0],
        t4 = t1[4],
        t5 = argStorage[1],
        t6 = t1[8],
        t7 = argStorage[2],
        t8 = t1[12],
        t9 = t1[1],
        t10 = t1[5],
        t11 = t1[9],
        t12 = t1[13],
        t13 = t1[2],
        t14 = t1[6],
        t15 = t1[10],
        t16 = t1[14],
        w_ = 1 / (t1[3] * t3 + t1[7] * t5 + t1[11] * t7 + t1[15]);
      argStorage[0] = (t2 * t3 + t4 * t5 + t6 * t7 + t8) * w_;
      argStorage[1] = (t9 * t3 + t10 * t5 + t11 * t7 + t12) * w_;
      argStorage[2] = (t13 * t3 + t14 * t5 + t15 * t7 + t16) * w_;
      return arg;
    }
  };
  E.Vector3.prototype = {
    setValues$3: function(x_, y_, z_) {
      var t1 = this._v3storage;
      C.NativeFloat64List_methods.$indexSet(t1, 0, x_);
      C.NativeFloat64List_methods.$indexSet(t1, 1, y_);
      t1[2] = z_;
    },
    setFrom$1: function(other) {
      var otherStorage = other._v3storage,
        t1 = this._v3storage;
      t1[0] = otherStorage[0];
      t1[1] = otherStorage[1];
      t1[2] = otherStorage[2];
    },
    toString$0: function(_) {
      var t1 = this._v3storage;
      return "[" + H.S(t1[0]) + "," + H.S(t1[1]) + "," + H.S(t1[2]) + "]";
    },
    $eq: function(_, other) {
      var t1, t2, t3;
      if (other == null)
        return false;
      if (other instanceof E.Vector3) {
        t1 = this._v3storage;
        t2 = t1[0];
        t3 = other._v3storage;
        t1 = t2 === t3[0] && t1[1] === t3[1] && t1[2] === t3[2];
      } else
        t1 = false;
      return t1;
    },
    get$hashCode: function(_) {
      return A.hashObjects(this._v3storage);
    },
    $sub: function(_, other) {
      var t1, t2, argStorage;
      H.interceptedTypeCheck(other, "$isVector3");
      t1 = new Float64Array(3);
      t2 = new E.Vector3(t1);
      t2.setFrom$1(this);
      argStorage = other._v3storage;
      t1[0] = t1[0] - argStorage[0];
      t1[1] = t1[1] - argStorage[1];
      t1[2] = t1[2] - argStorage[2];
      return t2;
    },
    $add: function(_, other) {
      var t1, t2, argStorage;
      H.interceptedTypeCheck(other, "$isVector3");
      t1 = new Float64Array(3);
      t2 = new E.Vector3(t1);
      t2.setFrom$1(this);
      argStorage = other._v3storage;
      t1[0] = t1[0] + argStorage[0];
      t1[1] = t1[1] + argStorage[1];
      t1[2] = t1[2] + argStorage[2];
      return t2;
    },
    $mul: function(_, scale) {
      return this.scaled$1(scale);
    },
    $index: function(_, i) {
      var t1;
      H.intTypeCheck(i);
      t1 = this._v3storage;
      if (i < 0 || i >= 3)
        return H.ioore(t1, i);
      return t1[i];
    },
    $indexSet: function(_, i, v) {
      C.NativeFloat64List_methods.$indexSet(this._v3storage, i, v);
    },
    get$length: function(_) {
      var t1 = this._v3storage,
        t2 = t1[0],
        t3 = t1[1];
      t1 = t1[2];
      return Math.sqrt(t2 * t2 + t3 * t3 + t1 * t1);
    },
    dot$1: function(other) {
      var otherStorage = other._v3storage,
        t1 = this._v3storage;
      return t1[0] * otherStorage[0] + t1[1] * otherStorage[1] + t1[2] * otherStorage[2];
    },
    add$1: function(_, arg) {
      var argStorage = arg._v3storage,
        t1 = this._v3storage;
      t1[0] = t1[0] + argStorage[0];
      t1[1] = t1[1] + argStorage[1];
      t1[2] = t1[2] + argStorage[2];
    },
    scaled$1: function(arg) {
      var t3,
        t1 = new Float64Array(3),
        t2 = new E.Vector3(t1);
      t2.setFrom$1(this);
      t3 = t1[2];
      if (typeof arg !== "number")
        return H.iae(arg);
      t1[2] = t3 * arg;
      t1[1] = t1[1] * arg;
      t1[0] = t1[0] * arg;
      return t2;
    },
    round$0: function(_) {
      var t1 = this._v3storage;
      t1[0] = C.JSNumber_methods.roundToDouble$0(t1[0]);
      t1[1] = C.JSNumber_methods.roundToDouble$0(t1[1]);
      t1[2] = C.JSNumber_methods.roundToDouble$0(t1[2]);
    }
  };
  E.Vector4.prototype = {
    setFrom$1: function(other) {
      var otherStorage = other._v4storage,
        t1 = this._v4storage;
      t1[3] = otherStorage[3];
      t1[2] = otherStorage[2];
      t1[1] = otherStorage[1];
      t1[0] = otherStorage[0];
    },
    toString$0: function(_) {
      var t1 = this._v4storage;
      return H.S(t1[0]) + "," + H.S(t1[1]) + "," + H.S(t1[2]) + "," + H.S(t1[3]);
    },
    $eq: function(_, other) {
      var t1, t2, t3;
      if (other == null)
        return false;
      if (other instanceof E.Vector4) {
        t1 = this._v4storage;
        t2 = t1[0];
        t3 = other._v4storage;
        t1 = t2 === t3[0] && t1[1] === t3[1] && t1[2] === t3[2] && t1[3] === t3[3];
      } else
        t1 = false;
      return t1;
    },
    get$hashCode: function(_) {
      return A.hashObjects(this._v4storage);
    },
    $sub: function(_, other) {
      var t1, t2, argStorage;
      H.interceptedTypeCheck(other, "$isVector4");
      t1 = new Float64Array(4);
      t2 = new E.Vector4(t1);
      t2.setFrom$1(this);
      argStorage = other._v4storage;
      t1[0] = t1[0] - argStorage[0];
      t1[1] = t1[1] - argStorage[1];
      t1[2] = t1[2] - argStorage[2];
      t1[3] = t1[3] - argStorage[3];
      return t2;
    },
    $add: function(_, other) {
      var t1, t2, argStorage;
      H.interceptedTypeCheck(other, "$isVector4");
      t1 = new Float64Array(4);
      t2 = new E.Vector4(t1);
      t2.setFrom$1(this);
      argStorage = other._v4storage;
      t1[0] = t1[0] + argStorage[0];
      t1[1] = t1[1] + argStorage[1];
      t1[2] = t1[2] + argStorage[2];
      t1[3] = t1[3] + argStorage[3];
      return t2;
    },
    $mul: function(_, scale) {
      var t1 = new E.Vector4(new Float64Array(4));
      t1.setFrom$1(this);
      t1.scale$1(0, scale);
      return t1;
    },
    $index: function(_, i) {
      var t1;
      H.intTypeCheck(i);
      t1 = this._v4storage;
      if (i < 0 || i >= 4)
        return H.ioore(t1, i);
      return t1[i];
    },
    $indexSet: function(_, i, v) {
      C.NativeFloat64List_methods.$indexSet(this._v4storage, i, v);
    },
    get$length: function(_) {
      var t1 = this._v4storage,
        t2 = t1[0],
        t3 = t1[1],
        t4 = t1[2];
      t1 = t1[3];
      return Math.sqrt(t2 * t2 + t3 * t3 + t4 * t4 + t1 * t1);
    },
    add$1: function(_, arg) {
      var argStorage = arg._v4storage,
        t1 = this._v4storage;
      t1[0] = t1[0] + argStorage[0];
      t1[1] = t1[1] + argStorage[1];
      t1[2] = t1[2] + argStorage[2];
      t1[3] = t1[3] + argStorage[3];
    },
    scale$1: function(_, arg) {
      var t1 = this._v4storage,
        t2 = t1[0];
      if (typeof arg !== "number")
        return H.iae(arg);
      t1[0] = t2 * arg;
      t1[1] = t1[1] * arg;
      t1[2] = t1[2] * arg;
      t1[3] = t1[3] * arg;
    },
    round$0: function(_) {
      var t1 = this._v4storage;
      t1[0] = C.JSNumber_methods.roundToDouble$0(t1[0]);
      t1[1] = C.JSNumber_methods.roundToDouble$0(t1[1]);
      t1[2] = C.JSNumber_methods.roundToDouble$0(t1[2]);
      t1[3] = C.JSNumber_methods.roundToDouble$0(t1[3]);
    }
  };
  (function aliases() {
    var _ = J.Interceptor.prototype;
    _.super$Interceptor$toString = _.toString$0;
    _.super$Interceptor$noSuchMethod = _.noSuchMethod$1;
    _ = J.JavaScriptObject.prototype;
    _.super$JavaScriptObject$toString = _.toString$0;
    _ = P._BufferingStreamSubscription.prototype;
    _.super$_BufferingStreamSubscription$_add = _._async$_add$1;
    _.super$_BufferingStreamSubscription$_addError = _._addError$2;
    _ = P.ListMixin.prototype;
    _.super$ListMixin$setRange = _.setRange$4;
    _ = P.Iterable.prototype;
    _.super$Iterable$where = _.where$1;
    _ = P.Object.prototype;
    _.super$Object$toString = _.toString$0;
    _ = W.Element0.prototype;
    _.super$Element$createFragment = _.createFragment$3$treeSanitizer$validator;
    _ = W.EventTarget.prototype;
    _.super$EventTarget$addEventListener = _.addEventListener$3;
    _ = W._SimpleNodeValidator.prototype;
    _.super$_SimpleNodeValidator$allowsAttribute = _.allowsAttribute$3;
    _ = N.HookState.prototype;
    _.super$HookState$initHook = _.initHook$0;
    _.super$HookState$didUpdateHook = _.didUpdateHook$1;
    _ = X.Animation.prototype;
    _.super$Animation$toStringDetails = _.toStringDetails$0;
    _ = S.AnimationEagerListenerMixin.prototype;
    _.super$AnimationEagerListenerMixin$dispose = _.dispose$0;
    _ = N.BindingBase.prototype;
    _.super$BindingBase$initInstances = _.initInstances$0;
    _.super$BindingBase$initServiceExtensions = _.initServiceExtensions$0;
    _.super$BindingBase$unlocked = _.unlocked$0;
    _ = B.ChangeNotifier.prototype;
    _.super$ChangeNotifier$dispose = _.dispose$0;
    _.super$ChangeNotifier$notifyListeners = _.notifyListeners$0;
    _ = Y.DiagnosticableTreeMixin.prototype;
    _.super$DiagnosticableTreeMixin$toStringShallow = _.toStringShallow$2$joiner$minLevel;
    _.super$DiagnosticableTreeMixin$toStringDeep = _.toStringDeep$3$minLevel$prefixLineOne$prefixOtherLines;
    _.super$DiagnosticableTreeMixin$toStringShort = _.toStringShort$0;
    _ = B.AbstractNode.prototype;
    _.super$AbstractNode$attach = _.attach$1;
    _.super$AbstractNode$detach = _.detach$0;
    _.super$AbstractNode$adoptChild = _.adoptChild$1;
    _.super$AbstractNode$dropChild = _.dropChild$1;
    _ = N.GestureBinding.prototype;
    _.super$GestureBinding$hitTest = _.hitTest$2;
    _ = O.HitTestEntry.prototype;
    _.super$HitTestEntry$toString = _.toString$0;
    _ = S.GestureRecognizer.prototype;
    _.super$GestureRecognizer$dispose = _.dispose$0;
    _ = S.OneSequenceGestureRecognizer.prototype;
    _.super$OneSequenceGestureRecognizer$resolve = _.resolve$1;
    _.super$OneSequenceGestureRecognizer$dispose = _.dispose$0;
    _ = S.PrimaryPointerGestureRecognizer.prototype;
    _.super$PrimaryPointerGestureRecognizer$acceptGesture = _.acceptGesture$1;
    _.super$PrimaryPointerGestureRecognizer$rejectGesture = _.rejectGesture$1;
    _ = R.__InkResponseState_State_AutomaticKeepAliveClientMixin.prototype;
    _.super$__InkResponseState_State_AutomaticKeepAliveClientMixin$deactivate = _.deactivate$0;
    _ = M.InkFeature.prototype;
    _.super$InkFeature$dispose = _.dispose$0;
    _ = M._ScaffoldState_State_TickerProviderStateMixin.prototype;
    _.super$_ScaffoldState_State_TickerProviderStateMixin$dispose = _.dispose$0;
    _.super$_ScaffoldState_State_TickerProviderStateMixin$didChangeDependencies = _.didChangeDependencies$0;
    _ = M.__FloatingActionButtonTransitionState_State_TickerProviderStateMixin.prototype;
    _.super$__FloatingActionButtonTransitionState_State_TickerProviderStateMixin$dispose = _.dispose$0;
    _ = K.AlignmentGeometry.prototype;
    _.super$AlignmentGeometry$toString = _.toString$0;
    _ = K.BorderRadiusGeometry.prototype;
    _.super$BorderRadiusGeometry$subtract = _.subtract$1;
    _.super$BorderRadiusGeometry$add = _.add$1;
    _ = Y.ShapeBorder.prototype;
    _.super$ShapeBorder$lerpFrom = _.lerpFrom$2;
    _.super$ShapeBorder$lerpTo = _.lerpTo$2;
    _.super$ShapeBorder$toString = _.toString$0;
    _ = Z.Decoration.prototype;
    _.super$Decoration$lerpFrom = _.lerpFrom$2;
    _.super$Decoration$lerpTo = _.lerpTo$2;
    _ = Z.BoxPainter.prototype;
    _.super$BoxPainter$dispose = _.dispose$0;
    _ = V.EdgeInsetsGeometry.prototype;
    _.super$EdgeInsetsGeometry$add = _.add$1;
    _ = T.Simulation.prototype;
    _.super$Simulation$toString = _.toString$0;
    _ = M.SpringSimulation.prototype;
    _.super$SpringSimulation$x = _.x$1;
    _ = N.RendererBinding.prototype;
    _.super$RendererBinding$handleMetricsChanged = _.handleMetricsChanged$0;
    _.super$RendererBinding$handleTextScaleFactorChanged = _.handleTextScaleFactorChanged$0;
    _.super$RendererBinding$handlePlatformBrightnessChanged = _.handlePlatformBrightnessChanged$0;
    _.super$RendererBinding$drawFrame = _.drawFrame$0;
    _ = S.BoxParentData.prototype;
    _.super$BoxParentData$toString = _.toString$0;
    _ = S.RenderBox.prototype;
    _.super$RenderBox$computeDistanceToActualBaseline = _.computeDistanceToActualBaseline$1;
    _.super$RenderBox$hitTest = _.hitTest$2$position;
    _ = T.Layer.prototype;
    _.super$Layer$updateSubtreeNeedsAddToScene = _.updateSubtreeNeedsAddToScene$0;
    _ = T.ContainerLayer.prototype;
    _.super$ContainerLayer$find = _.find$1$1;
    _ = T.OffsetLayer.prototype;
    _.super$OffsetLayer$find = _.find$1$1;
    _ = K.ParentData.prototype;
    _.super$ParentData$detach = _.detach$0;
    _.super$ParentData$toString = _.toString$0;
    _ = K.RenderObject.prototype;
    _.super$RenderObject$adoptChild = _.adoptChild$1;
    _.super$RenderObject$attach = _.attach$1;
    _.super$RenderObject$markNeedsLayout = _.markNeedsLayout$0;
    _.super$RenderObject$applyPaintTransform = _.applyPaintTransform$2;
    _.super$RenderObject$describeSemanticsConfiguration = _.describeSemanticsConfiguration$1;
    _.super$RenderObject$clearSemantics = _.clearSemantics$0;
    _.super$RenderObject$visitChildrenForSemantics = _.visitChildrenForSemantics$1;
    _.super$RenderObject$assembleSemanticsNode = _.assembleSemanticsNode$3;
    _.super$RenderObject$handleEvent = _.handleEvent$2;
    _.super$RenderObject$toStringShort = _.toStringShort$0;
    _.super$RenderObject$showOnScreen = _.showOnScreen$4$curve$descendant$duration$rect;
    _ = K.ContainerRenderObjectMixin.prototype;
    _.super$ContainerRenderObjectMixin$insert = _.insert$2$after;
    _.super$ContainerRenderObjectMixin$remove = _.remove$1;
    _.super$ContainerRenderObjectMixin$redepthChildren = _.redepthChildren$0;
    _.super$ContainerRenderObjectMixin$visitChildren = _.visitChildren$1;
    _ = E.RenderProxyBoxMixin.prototype;
    _.super$RenderProxyBoxMixin$performLayout = _.performLayout$0;
    _.super$RenderProxyBoxMixin$hitTestChildren = _.hitTestChildren$2$position;
    _.super$RenderProxyBoxMixin$paint = _.paint$2;
    _ = E._RenderProxyBox_RenderBox_RenderObjectWithChildMixin.prototype;
    _.super$_RenderProxyBox_RenderBox_RenderObjectWithChildMixin$attach = _.attach$1;
    _.super$_RenderProxyBox_RenderBox_RenderObjectWithChildMixin$detach = _.detach$0;
    _ = E._RenderProxyBox_RenderBox_RenderObjectWithChildMixin_RenderProxyBoxMixin.prototype;
    _.super$_RenderProxyBox_RenderBox_RenderObjectWithChildMixin_RenderProxyBoxMixin$computeDistanceToActualBaseline = _.computeDistanceToActualBaseline$1;
    _ = G.SliverLogicalParentData.prototype;
    _.super$SliverLogicalParentData$toString = _.toString$0;
    _ = X.RenderSliverFixedExtentBoxAdaptor.prototype;
    _.super$RenderSliverFixedExtentBoxAdaptor$indexToLayoutOffset = _.indexToLayoutOffset$2;
    _.super$RenderSliverFixedExtentBoxAdaptor$getMinChildIndexForScrollOffset = _.getMinChildIndexForScrollOffset$2;
    _.super$RenderSliverFixedExtentBoxAdaptor$getMaxChildIndexForScrollOffset = _.getMaxChildIndexForScrollOffset$2;
    _ = F._RenderSliverMultiBoxAdaptor_RenderSliver_ContainerRenderObjectMixin.prototype;
    _.super$_RenderSliverMultiBoxAdaptor_RenderSliver_ContainerRenderObjectMixin$attach = _.attach$1;
    _.super$_RenderSliverMultiBoxAdaptor_RenderSliver_ContainerRenderObjectMixin$detach = _.detach$0;
    _ = Q._RenderViewportBase_RenderBox_ContainerRenderObjectMixin.prototype;
    _.super$_RenderViewportBase_RenderBox_ContainerRenderObjectMixin$attach = _.attach$1;
    _.super$_RenderViewportBase_RenderBox_ContainerRenderObjectMixin$detach = _.detach$0;
    _ = N.ViewportOffset.prototype;
    _.super$ViewportOffset$moveTo = _.moveTo$3$curve$duration;
    _.super$ViewportOffset$debugFillDescription = _.debugFillDescription$1;
    _ = N.SchedulerBinding.prototype;
    _.super$SchedulerBinding$handleAppLifecycleStateChanged = _.handleAppLifecycleStateChanged$1;
    _ = M.Ticker.prototype;
    _.super$Ticker$dispose = _.dispose$0;
    _ = N.SemanticsBinding.prototype;
    _.super$SemanticsBinding$handleAccessibilityFeaturesChanged = _.handleAccessibilityFeaturesChanged$0;
    _ = Q.AssetBundle.prototype;
    _.super$AssetBundle$loadString = _.loadString$2$cache;
    _ = A.MethodChannel.prototype;
    _.super$MethodChannel$invokeMethod = _.invokeMethod$1$2;
    _ = L.AutomaticKeepAliveClientMixin.prototype;
    _.super$AutomaticKeepAliveClientMixin$build = _.build$1;
    _ = N._WidgetsFlutterBinding_BindingBase_GestureBinding.prototype;
    _.super$_WidgetsFlutterBinding_BindingBase_GestureBinding$initInstances = _.initInstances$0;
    _.super$_WidgetsFlutterBinding_BindingBase_GestureBinding$unlocked = _.unlocked$0;
    _ = N._WidgetsFlutterBinding_BindingBase_GestureBinding_ServicesBinding.prototype;
    _.super$_WidgetsFlutterBinding_BindingBase_GestureBinding_ServicesBinding$initInstances = _.initInstances$0;
    _.super$_WidgetsFlutterBinding_BindingBase_GestureBinding_ServicesBinding$initServiceExtensions = _.initServiceExtensions$0;
    _ = N._WidgetsFlutterBinding_BindingBase_GestureBinding_ServicesBinding_SchedulerBinding.prototype;
    _.super$_WidgetsFlutterBinding_BindingBase_GestureBinding_ServicesBinding_SchedulerBinding$initInstances = _.initInstances$0;
    _.super$_WidgetsFlutterBinding_BindingBase_GestureBinding_ServicesBinding_SchedulerBinding$initServiceExtensions = _.initServiceExtensions$0;
    _ = N._WidgetsFlutterBinding_BindingBase_GestureBinding_ServicesBinding_SchedulerBinding_PaintingBinding.prototype;
    _.super$_WidgetsFlutterBinding_BindingBase_GestureBinding_ServicesBinding_SchedulerBinding_PaintingBinding$initInstances = _.initInstances$0;
    _ = N._WidgetsFlutterBinding_BindingBase_GestureBinding_ServicesBinding_SchedulerBinding_PaintingBinding_SemanticsBinding.prototype;
    _.super$_WidgetsFlutterBinding_BindingBase_GestureBinding_ServicesBinding_SchedulerBinding_PaintingBinding_SemanticsBinding$initInstances = _.initInstances$0;
    _ = N._WidgetsFlutterBinding_BindingBase_GestureBinding_ServicesBinding_SchedulerBinding_PaintingBinding_SemanticsBinding_RendererBinding.prototype;
    _.super$_WidgetsFlutterBinding_BindingBase_GestureBinding_ServicesBinding_SchedulerBinding_PaintingBinding_SemanticsBinding_RendererBinding$initInstances = _.initInstances$0;
    _.super$_WidgetsFlutterBinding_BindingBase_GestureBinding_ServicesBinding_SchedulerBinding_PaintingBinding_SemanticsBinding_RendererBinding$initServiceExtensions = _.initServiceExtensions$0;
    _ = N.State.prototype;
    _.super$State$initState = _.initState$0;
    _.super$State$didUpdateWidget = _.didUpdateWidget$1;
    _.super$State$deactivate = _.deactivate$0;
    _.super$State$dispose = _.dispose$0;
    _.super$State$didChangeDependencies = _.didChangeDependencies$0;
    _ = N.Element.prototype;
    _.super$Element$updateChild = _.updateChild$3;
    _.super$Element$mount = _.mount$2;
    _.super$Element$update = _.update$1;
    _.super$Element$_updateSlot = _._updateSlot$1;
    _.super$Element$activate = _.activate$0;
    _.super$Element$deactivate = _.deactivate$0;
    _.super$Element$unmount = _.unmount$0;
    _.super$Element$inheritFromElement = _.inheritFromElement$2$aspect;
    _.super$Element$inheritFromWidgetOfExactType = _.inheritFromWidgetOfExactType$2$aspect;
    _.super$Element$didChangeDependencies = _.didChangeDependencies$0;
    _ = N.ComponentElement.prototype;
    _.super$ComponentElement$mount = _.mount$2;
    _.super$ComponentElement$_firstBuild = _._firstBuild$0;
    _ = N.StatefulElement.prototype;
    _.super$StatefulElement$build = _.build$0;
    _.super$StatefulElement$unmount = _.unmount$0;
    _ = N.ProxyElement.prototype;
    _.super$ProxyElement$updated = _.updated$1;
    _ = N.RenderObjectElement.prototype;
    _.super$RenderObjectElement$mount = _.mount$2;
    _.super$RenderObjectElement$update = _.update$1;
    _.super$RenderObjectElement$performRebuild = _.performRebuild$0;
    _.super$RenderObjectElement$unmount = _.unmount$0;
    _ = N.RootRenderObjectElement.prototype;
    _.super$RootRenderObjectElement$mount = _.mount$2;
    _ = N.MultiChildRenderObjectElement.prototype;
    _.super$MultiChildRenderObjectElement$mount = _.mount$2;
    _.super$MultiChildRenderObjectElement$update = _.update$1;
    _ = G.ImplicitlyAnimatedWidgetState.prototype;
    _.super$ImplicitlyAnimatedWidgetState$initState = _.initState$0;
    _ = G._ImplicitlyAnimatedWidgetState_State_SingleTickerProviderStateMixin.prototype;
    _.super$_ImplicitlyAnimatedWidgetState_State_SingleTickerProviderStateMixin$dispose = _.dispose$0;
    _ = K.Route.prototype;
    _.super$Route$install = _.install$1;
    _.super$Route$willPop = _.willPop$0;
    _.super$Route$didPop = _.didPop$1;
    _.super$Route$didPopNext = _.didPopNext$1;
    _.super$Route$didChangeNext = _.didChangeNext$1;
    _.super$Route$didChangePrevious = _.didChangePrevious$1;
    _.super$Route$changedInternalState = _.changedInternalState$0;
    _.super$Route$changedExternalState = _.changedExternalState$0;
    _.super$Route$dispose = _.dispose$0;
    _ = K._NavigatorState_State_TickerProviderStateMixin.prototype;
    _.super$_NavigatorState_State_TickerProviderStateMixin$dispose = _.dispose$0;
    _ = U.Notification0.prototype;
    _.super$Notification$visitAncestor = _.visitAncestor$1;
    _.super$Notification$debugFillDescription = _.debugFillDescription$1;
    _ = X.__RenderTheatre_RenderBox_RenderObjectWithChildMixin.prototype;
    _.super$__RenderTheatre_RenderBox_RenderObjectWithChildMixin$attach = _.attach$1;
    _.super$__RenderTheatre_RenderBox_RenderObjectWithChildMixin$detach = _.detach$0;
    _ = L._OverscrollIndicatorNotification_Notification_ViewportNotificationMixin.prototype;
    _.super$_OverscrollIndicatorNotification_Notification_ViewportNotificationMixin$debugFillDescription = _.debugFillDescription$1;
    _ = L.__GlowingOverscrollIndicatorState_State_TickerProviderStateMixin.prototype;
    _.super$__GlowingOverscrollIndicatorState_State_TickerProviderStateMixin$dispose = _.dispose$0;
    _ = T.OverlayRoute.prototype;
    _.super$OverlayRoute$install = _.install$1;
    _.super$OverlayRoute$didPop = _.didPop$1;
    _.super$OverlayRoute$dispose = _.dispose$0;
    _ = T.TransitionRoute.prototype;
    _.super$TransitionRoute$createAnimationController = _.createAnimationController$0;
    _.super$TransitionRoute$install = _.install$1;
    _.super$TransitionRoute$didPush = _.didPush$0;
    _.super$TransitionRoute$didPop = _.didPop$1;
    _.super$TransitionRoute$dispose = _.dispose$0;
    _ = T._ModalRoute_TransitionRoute_LocalHistoryRoute.prototype;
    _.super$_ModalRoute_TransitionRoute_LocalHistoryRoute$willPop = _.willPop$0;
    _ = M.ScrollActivity.prototype;
    _.super$ScrollActivity$dispose = _.dispose$0;
    _ = F.ScrollController.prototype;
    _.super$ScrollController$attach = _.attach$1;
    _.super$ScrollController$detach = _.detach$1;
    _.super$ScrollController$dispose = _.dispose$0;
    _ = G.ScrollNotification.prototype;
    _.super$ScrollNotification$debugFillDescription = _.debugFillDescription$1;
    _ = L.ScrollPhysics.prototype;
    _.super$ScrollPhysics$createBallisticSimulation = _.createBallisticSimulation$2;
    _ = A.ScrollPosition.prototype;
    _.super$ScrollPosition$absorb = _.absorb$1;
    _.super$ScrollPosition$setPixels = _.setPixels$1;
    _.super$ScrollPosition$applyViewportDimension = _.applyViewportDimension$1;
    _.super$ScrollPosition$applyNewDimensions = _.applyNewDimensions$0;
    _.super$ScrollPosition$beginActivity = _.beginActivity$1;
    _.super$ScrollPosition$dispose = _.dispose$0;
    _.super$ScrollPosition$debugFillDescription = _.debugFillDescription$1;
    _ = F._ScrollableState_State_TickerProviderStateMixin.prototype;
    _.super$_ScrollableState_State_TickerProviderStateMixin$dispose = _.dispose$0;
    _.super$_ScrollableState_State_TickerProviderStateMixin$didChangeDependencies = _.didChangeDependencies$0;
    _ = T.EngineCanvas.prototype;
    _.super$EngineCanvas$dispose = _.dispose$0;
    _ = T.SaveStackTracking.prototype;
    _.super$SaveStackTracking$clear = _.clear$0;
    _.super$SaveStackTracking$save = _.save$0;
    _.super$SaveStackTracking$restore = _.restore$0;
    _.super$SaveStackTracking$translate = _.translate$2;
    _.super$SaveStackTracking$scale = _.scale$2;
    _.super$SaveStackTracking$rotate = _.rotate$1;
    _.super$SaveStackTracking$transform = _.transform$1;
    _.super$SaveStackTracking$clipRect = _.clipRect$1;
    _.super$SaveStackTracking$clipRRect = _.clipRRect$1;
    _.super$SaveStackTracking$clipPath = _.clipPath$1;
    _ = T.SaveElementStackTracking.prototype;
    _.super$SaveElementStackTracking$clear = _.clear$0;
    _ = Q.PersistedSurface.prototype;
    _.super$PersistedSurface$build = _.build$0;
    _.super$PersistedSurface$adoptElements = _.adoptElements$1;
    _.super$PersistedSurface$update = _.update$1;
    _.super$PersistedSurface$retain = _.retain$0;
    _.super$PersistedSurface$recycle = _.recycle$0;
    _ = Q.PersistedContainerSurface.prototype;
    _.super$PersistedContainerSurface$update = _.update$1;
    _.super$PersistedContainerSurface$recycle = _.recycle$0;
    _ = Q._DomClip.prototype;
    _.super$_DomClip$createElement = _.createElement$0;
    _ = Q.Color.prototype;
    _.super$Color$$eq = _.$eq;
    _.super$Color$toString = _.toString$0;
  })();
  (function installTearOffs() {
    var _static_2 = hunkHelpers._static_2,
      _static_0 = hunkHelpers._static_0,
      _static_1 = hunkHelpers._static_1,
      _static = hunkHelpers.installStaticTearOff,
      _instance = hunkHelpers.installInstanceTearOff,
      _instance_1_u = hunkHelpers._instance_1u,
      _instance_1_i = hunkHelpers._instance_1i,
      _instance_2_u = hunkHelpers._instance_2u,
      _instance_0_u = hunkHelpers._instance_0u,
      _instance_0_i = hunkHelpers._instance_0i;
    _static_2(J, "_interceptors_JSArray__compareAny$closure", "JSArray__compareAny", 35);
    _static_0(H, "_js_helper_Primitives_dateNow$closure", "Primitives_dateNow", 53);
    _static_1(P, "async__AsyncRun__scheduleImmediateJsOverride$closure", "_AsyncRun__scheduleImmediateJsOverride", 34);
    _static_1(P, "async__AsyncRun__scheduleImmediateWithSetImmediate$closure", "_AsyncRun__scheduleImmediateWithSetImmediate", 34);
    _static_1(P, "async__AsyncRun__scheduleImmediateWithTimer$closure", "_AsyncRun__scheduleImmediateWithTimer", 34);
    _static_0(P, "async___startMicrotaskLoop$closure", "_startMicrotaskLoop", 1);
    _static_1(P, "async___nullDataHandler$closure", "_nullDataHandler", 15);
    _static(P, "async___nullErrorHandler$closure", 1, null, ["call$2", "call$1"], ["_nullErrorHandler", function(error) {
      return P._nullErrorHandler(error, null);
    }], 41, 0);
    _instance(P._Completer.prototype, "get$completeError", 0, 1, function() {
      return [null];
    }, ["call$2", "call$1"], ["completeError$2", "completeError$1"], 41, 0);
    _instance(P._SyncCompleter.prototype, "get$complete", 1, 0, function() {
      return [null];
    }, ["call$1", "call$0"], ["complete$1", "complete$0"], 137, 0);
    var _;
    _instance_1_u(_ = P._Future.prototype, "get$_complete", "_complete$1", 15);
    _instance(_, "get$_completeError", 0, 1, function() {
      return [null];
    }, ["call$2", "call$1"], ["_completeError$2", "_completeError$1"], 41, 0);
    _instance_1_i(_ = P._StreamController.prototype, "get$_async$_add", "_async$_add$1", 15);
    _instance_2_u(_, "get$_addError", "_addError$2", 91);
    _instance_0_u(_, "get$_close", "_close$0", 1);
    _instance_0_u(_ = P._ControllerSubscription.prototype, "get$_onPause", "_onPause$0", 1);
    _instance_0_u(_, "get$_onResume", "_onResume$0", 1);
    _instance_0_u(_ = P._BufferingStreamSubscription.prototype, "get$_onPause", "_onPause$0", 1);
    _instance_0_u(_, "get$_onResume", "_onResume$0", 1);
    _instance_0_u(_ = P._ForwardingStreamSubscription.prototype, "get$_onPause", "_onPause$0", 1);
    _instance_0_u(_, "get$_onResume", "_onResume$0", 1);
    _instance_1_u(_, "get$_handleData", "_handleData$1", 15);
    _instance_2_u(_, "get$_handleError", "_handleError$2", 89);
    _instance_0_u(_, "get$_handleDone", "_handleDone$0", 1);
    _static_2(P, "collection_ListMixin__compareAny$closure", "ListMixin__compareAny", 35);
    _static_2(P, "collection___dynamicCompare$closure", "_dynamicCompare", 35);
    _static_1(P, "convert___defaultToEncodable$closure", "_defaultToEncodable", 4);
    _static_2(P, "core_Comparable_compare$closure", "Comparable_compare", 203);
    _static(W, "html__Html5NodeValidator__standardAttributeValidator$closure", 4, null, ["call$4"], ["_Html5NodeValidator__standardAttributeValidator"], 60, 0);
    _static(W, "html__Html5NodeValidator__uriAttributeValidator$closure", 4, null, ["call$4"], ["_Html5NodeValidator__uriAttributeValidator"], 60, 0);
    _instance_0_u(E._ListenableStateHook.prototype, "get$_listener", "_listener$0", 1);
    _instance_1_u(G.AnimationController.prototype, "get$_animation_controller$_tick", "_animation_controller$_tick$1", 12);
    _instance_1_u(S.ReverseAnimation.prototype, "get$_statusChangeHandler", "_statusChangeHandler$1", 3);
    _instance_1_u(S.CurvedAnimation.prototype, "get$_updateCurveDirection", "_updateCurveDirection$1", 3);
    _instance_1_u(_ = S.TrainHoppingAnimation.prototype, "get$_statusChangeHandler", "_statusChangeHandler$1", 3);
    _instance_0_u(_, "get$_valueChangeHandler", "_valueChangeHandler$0", 1);
    _instance_1_u(_ = S.CompoundAnimation.prototype, "get$_maybeNotifyStatusListeners", "_maybeNotifyStatusListeners$1", 3);
    _instance_0_u(_, "get$_maybeNotifyListeners", "_maybeNotifyListeners$0", 1);
    _instance_0_u(S.AnimationLocalListenersMixin.prototype, "get$notifyListeners", "notifyListeners$0", 1);
    _instance_1_u(S.AnimationLocalStatusListenersMixin.prototype, "get$notifyStatusListeners", "notifyStatusListeners$1", 3);
    _instance_1_u(_ = D._CupertinoBackGestureDetectorState.prototype, "get$_handleDragStart", "_handleDragStart$1", 50);
    _instance_1_u(_, "get$_handleDragUpdate", "_handleDragUpdate$1", 18);
    _instance_1_u(_, "get$_handleDragEnd", "_handleDragEnd$1", 51);
    _instance_0_u(_, "get$_handleDragCancel", "_handleDragCancel$0", 1);
    _instance_1_u(_, "get$_route$_handlePointerDown", "_route$_handlePointerDown$1", 31);
    _instance_1_u(D._CupertinoBackGestureController.prototype, "get$_route$_handleStatusChanged", "_route$_handleStatusChanged$1", 3);
    _static(U, "assertions_FlutterError_dumpErrorToConsole$closure", 1, null, ["call$2$forceReport", "call$1"], ["FlutterError_dumpErrorToConsole", function(details) {
      return U.FlutterError_dumpErrorToConsole(details, false);
    }], 205, 0);
    _instance_0_u(B.ChangeNotifier.prototype, "get$notifyListeners", "notifyListeners$0", 1);
    _instance_1_u(B.AbstractNode.prototype, "get$redepthChild", "redepthChild$1", 78);
    _static(D, "print__debugPrintThrottled$closure", 1, null, ["call$2$wrapWidth", "call$1"], ["debugPrintThrottled", function(message) {
      return D.debugPrintThrottled(message, null);
    }], 206, 0);
    _static_0(D, "print___debugPrintTask$closure", "_debugPrintTask", 1);
    _instance_1_u(_ = N.GestureBinding.prototype, "get$_handlePointerDataPacket", "_handlePointerDataPacket$1", 77);
    _instance_1_u(_, "get$cancelPointer", "cancelPointer$1", 33);
    _instance_0_u(_, "get$_flushPointerEventQueue", "_flushPointerEventQueue$0", 1);
    _instance_0_u(T.LongPressGestureRecognizer.prototype, "get$didExceedDeadline", "didExceedDeadline$0", 1);
    _instance_1_u(O.DragGestureRecognizer.prototype, "get$handleEvent", "handleEvent$1", 13);
    _instance_1_u(Y.MouseTracker.prototype, "get$_mouse_tracking$_handleEvent", "_mouse_tracking$_handleEvent$1", 13);
    _instance_1_u(_ = F.DoubleTapGestureRecognizer.prototype, "get$_handleEvent", "_handleEvent$1", 13);
    _instance_1_u(_, "get$_reject", "_reject$1", 84);
    _instance_0_u(_, "get$_reset", "_reset$0", 1);
    _instance_1_u(_ = S.PrimaryPointerGestureRecognizer.prototype, "get$handleEvent", "handleEvent$1", 13);
    _instance_0_u(_, "get$didExceedDeadline", "didExceedDeadline$0", 1);
    _instance_0_u(N.TapGestureRecognizer.prototype, "get$didExceedDeadline", "didExceedDeadline$0", 1);
    _instance_2_u(S._MaterialAppState.prototype, "get$_createRectTween", "_createRectTween$2", 86);
    _instance_1_u(Z._RawMaterialButtonState.prototype, "get$_handleHighlightChanged", "_handleHighlightChanged$1", 19);
    _instance_1_u(Y.InkHighlight.prototype, "get$_handleAlphaStatusChanged", "_handleAlphaStatusChanged$1", 3);
    _instance_1_u(U.InkSplash.prototype, "get$_ink_splash$_handleAlphaStatusChanged", "_ink_splash$_handleAlphaStatusChanged$1", 3);
    _instance_0_u(_ = R._InkResponseState.prototype, "get$_handleInkHighlightRemoval", "_handleInkHighlightRemoval$0", 1);
    _instance_1_u(_, "get$_handleTapDown", "_handleTapDown$1", 93);
    _instance_0_u(_, "get$_handleTapCancel", "_handleTapCancel$0", 1);
    _instance_1_u(_ = M._FloatingActionButtonTransitionState.prototype, "get$_handlePreviousAnimationStatusChanged", "_handlePreviousAnimationStatusChanged$1", 3);
    _instance_0_u(_, "get$_onProgressChanged", "_onProgressChanged$0", 1);
    _instance_0_u(M.ScaffoldState.prototype, "get$_handleStatusBarTap", "_handleStatusBarTap$0", 1);
    _instance_0_u(_ = N.RendererBinding.prototype, "get$_handleSemanticsEnabledChanged", "_handleSemanticsEnabledChanged$0", 1);
    _instance(_, "get$_handleSemanticsAction", 0, 3, null, ["call$3"], ["_handleSemanticsAction$3"], 110, 0);
    _instance_0_u(_, "get$_handleSemanticsOwnerCreated", "_handleSemanticsOwnerCreated$0", 1);
    _instance_0_u(_, "get$_handleSemanticsOwnerDisposed", "_handleSemanticsOwnerDisposed$0", 1);
    _instance_1_u(_, "get$_handlePersistentFrameCallback", "_handlePersistentFrameCallback$1", 12);
    _instance_0_u(S.RenderBox.prototype, "get$markNeedsLayout", "markNeedsLayout$0", 1);
    _instance_2_u(S.RenderBoxContainerDefaultsMixin.prototype, "get$defaultPaint", "defaultPaint$2", 21);
    _instance_0_u(_ = K.RenderObject.prototype, "get$markNeedsPaint", "markNeedsPaint$0", 1);
    _instance_0_u(_, "get$markNeedsSemanticsUpdate", "markNeedsSemanticsUpdate$0", 1);
    _instance(_, "get$showOnScreen", 0, 0, null, ["call$4$curve$descendant$duration$rect", "call$0"], ["showOnScreen$4$curve$descendant$duration$rect", "showOnScreen$0"], 64, 0);
    _instance_1_u(_ = K.ContainerRenderObjectMixin.prototype, "get$childBefore", "childBefore$1", function() {
      return H.computeSignature(function(ChildType, ParentDataType) {
        return {func: 1, ret: ChildType, args: [P.Object]};
      }, this.$receiver, "ContainerRenderObjectMixin");
    });
    _instance_1_u(_, "get$childAfter", "childAfter$1", function() {
      return H.computeSignature(function(ChildType, ParentDataType) {
        return {func: 1, ret: ChildType, args: [P.Object]};
      }, this.$receiver, "ContainerRenderObjectMixin");
    });
    _instance_2_u(E.RenderProxyBoxMixin.prototype, "get$paint", "paint$2", 21);
    _instance_0_u(E.RenderAnimatedOpacity.prototype, "get$_updateOpacity", "_updateOpacity$0", 1);
    _instance_0_u(_ = E.RenderSemanticsGestureHandler.prototype, "get$_performSemanticScrollLeft", "_performSemanticScrollLeft$0", 1);
    _instance_0_u(_, "get$_performSemanticScrollRight", "_performSemanticScrollRight$0", 1);
    _instance_0_u(_, "get$_performSemanticScrollUp", "_performSemanticScrollUp$0", 1);
    _instance_0_u(_, "get$_performSemanticScrollDown", "_performSemanticScrollDown$0", 1);
    _instance_0_u(E.RenderSemanticsAnnotations.prototype, "get$_performDismiss", "_performDismiss$0", 1);
    _instance_2_u(K.RenderStack.prototype, "get$paintStack", "paintStack$2", 21);
    _instance_2_u(_ = Q.RenderViewportBase.prototype, "get$_paintContents", "_paintContents$2", 21);
    _instance(_, "get$showOnScreen", 0, 0, null, ["call$4$curve$descendant$duration$rect", "call$0"], ["showOnScreen$4$curve$descendant$duration$rect", "showOnScreen$0"], 64, 0);
    _static_2(N, "binding_SchedulerBinding__taskSorter$closure", "SchedulerBinding__taskSorter", 207);
    _static(N, "binding__defaultSchedulingStrategy$closure", 0, null, ["call$2$priority$scheduler", "call$0"], ["defaultSchedulingStrategy", function() {
      return N.defaultSchedulingStrategy(null, null);
    }], 208, 0);
    _instance_1_u(_ = N.SchedulerBinding.prototype, "get$_handleLifecycleMessage", "_handleLifecycleMessage$1", 121);
    _instance_0_u(_, "get$_runTasks", "_runTasks$0", 1);
    _instance_0_u(_, "get$ensureVisualUpdate", "ensureVisualUpdate$0", 1);
    _instance_1_u(_, "get$_handleBeginFrame", "_handleBeginFrame$1", 12);
    _instance_0_u(_, "get$_handleDrawFrame", "_handleDrawFrame$0", 1);
    _instance_1_u(M.Ticker.prototype, "get$_ticker$_tick", "_ticker$_tick$1", 12);
    _static_1(N, "binding0_ServicesBinding__parseLicenses$closure", "ServicesBinding__parseLicenses", 209);
    _instance_0_u(N.ServicesBinding.prototype, "get$_addLicenses", "_addLicenses$0", 132);
    _static(B, "platform_messages_BinaryMessages_handlePlatformMessage$closure", 3, null, ["call$3"], ["BinaryMessages_handlePlatformMessage"], 210, 0);
    _instance_1_u(_ = S._WidgetsAppState.prototype, "get$_onGenerateRoute", "_onGenerateRoute$1", 57);
    _instance_1_u(_, "get$_onUnknownRoute", "_onUnknownRoute$1", 57);
    _instance_1_u(L._AutomaticKeepAliveState.prototype, "get$_addClient", "_addClient$1", 136);
    _instance_0_u(_ = N.WidgetsBinding.prototype, "get$handleLocaleChanged", "handleLocaleChanged$0", 1);
    _instance_1_u(_, "get$_handleNavigationInvocation", "_handleNavigationInvocation$1", 140);
    _instance_1_u(_, "get$_handleSystemMessage", "_handleSystemMessage$1", 141);
    _instance_0_u(_, "get$_handleBuildScheduled", "_handleBuildScheduled$0", 1);
    _instance_0_u(_ = N._WidgetsFlutterBinding_BindingBase_GestureBinding_ServicesBinding_SchedulerBinding_PaintingBinding_SemanticsBinding_RendererBinding_WidgetsBinding.prototype, "get$handleMetricsChanged", "handleMetricsChanged$0", 1);
    _instance_0_u(_, "get$handleTextScaleFactorChanged", "handleTextScaleFactorChanged$0", 1);
    _instance_0_u(_, "get$handlePlatformBrightnessChanged", "handlePlatformBrightnessChanged$0", 1);
    _instance_0_u(_, "get$handleAccessibilityFeaturesChanged", "handleAccessibilityFeaturesChanged$0", 1);
    _instance_0_i(O.FocusManager.prototype, "get$_update", "_update$0", 1);
    _static_1(N, "framework__InactiveElements__deactivateRecursively$closure", "_InactiveElements__deactivateRecursively", 10);
    _static_2(N, "framework_Element__sort$closure", "Element__sort", 211);
    _static_1(N, "framework_Element__activateRecursively$closure", "Element__activateRecursively", 10);
    _instance_1_u(N._InactiveElements.prototype, "get$_unmount", "_unmount$1", 10);
    _instance_1_u(_ = D.RawGestureDetectorState.prototype, "get$_gesture_detector$_handlePointerDown", "_gesture_detector$_handlePointerDown$1", 31);
    _instance_0_u(_, "get$_handleSemanticsTap", "_handleSemanticsTap$0", 1);
    _instance_0_u(_, "get$_handleSemanticsLongPress", "_handleSemanticsLongPress$0", 1);
    _instance_1_u(_, "get$_handleSemanticsHorizontalDragUpdate", "_handleSemanticsHorizontalDragUpdate$1", 18);
    _instance_1_u(_, "get$_handleSemanticsVerticalDragUpdate", "_handleSemanticsVerticalDragUpdate$1", 18);
    _instance_1_u(_ = T._HeroFlight.prototype, "get$_buildOverlay", "_buildOverlay$1", 11);
    _instance_1_u(_, "get$_handleAnimationUpdate", "_handleAnimationUpdate$1", 3);
    _instance_1_u(T.HeroController.prototype, "get$_handleFlightEnded", "_handleFlightEnded$1", 160);
    _instance_0_u(G.AnimatedWidgetBaseState.prototype, "get$_handleAnimationChanged", "_handleAnimationChanged$0", 1);
    _instance_1_u(A._LayoutBuilderElement.prototype, "get$_layout", "_layout$1", 166);
    _instance(_ = K.NavigatorState.prototype, "get$push", 0, 1, null, ["call$1$1", "call$1"], ["push$1$1", "push$1"], 172, 0);
    _instance_1_u(_, "get$_handlePointerDown", "_handlePointerDown$1", 31);
    _instance_1_u(_, "get$_handlePointerUpOrCancel", "_handlePointerUpOrCancel$1", 13);
    _instance_1_u(U.Notification0.prototype, "get$visitAncestor", "visitAncestor$1", 14);
    _instance_1_u(L._GlowingOverscrollIndicatorState.prototype, "get$_handleScrollNotification", "_handleScrollNotification$1", 42);
    _instance_1_u(_ = L._GlowController.prototype, "get$_changePhase", "_changePhase$1", 3);
    _instance_1_u(_, "get$_tickDisplacement", "_tickDisplacement$1", 12);
    _instance_1_u(L._OverscrollIndicatorNotification_Notification_ViewportNotificationMixin.prototype, "get$visitAncestor", "visitAncestor$1", 14);
    _instance_1_u(T.TransitionRoute.prototype, "get$_handleStatusChanged", "_handleStatusChanged$1", 3);
    _instance_1_u(_ = T.ModalRoute.prototype, "get$_buildModalBarrier", "_buildModalBarrier$1", 11);
    _instance_1_u(_, "get$_buildModalScope", "_buildModalScope$1", 11);
    _instance_0_u(_ = M.BallisticScrollActivity.prototype, "get$_scroll_activity$_tick", "_scroll_activity$_tick$0", 1);
    _instance_0_u(_, "get$_scroll_activity$_end", "_scroll_activity$_end$0", 1);
    _instance_0_u(_ = M.DrivenScrollActivity.prototype, "get$_scroll_activity$_tick", "_scroll_activity$_tick$0", 1);
    _instance_0_u(_, "get$_scroll_activity$_end", "_scroll_activity$_end$0", 1);
    _static_1(G, "scroll_notification__defaultScrollNotificationPredicate$closure", "defaultScrollNotificationPredicate", 42);
    _instance_1_u(G.ScrollNotification.prototype, "get$visitAncestor", "visitAncestor$1", 14);
    _instance_0_u(R.ScrollPositionWithSingleContext.prototype, "get$dispose", "dispose$0", 1);
    _instance_1_u(_ = F.ScrollableState.prototype, "get$_handleDragDown", "_handleDragDown$1", 179);
    _instance_1_u(_, "get$_scrollable$_handleDragStart", "_scrollable$_handleDragStart$1", 50);
    _instance_1_u(_, "get$_scrollable$_handleDragUpdate", "_scrollable$_handleDragUpdate$1", 18);
    _instance_1_u(_, "get$_scrollable$_handleDragEnd", "_scrollable$_handleDragEnd$1", 51);
    _instance_0_u(_, "get$_scrollable$_handleDragCancel", "_scrollable$_handleDragCancel$0", 1);
    _instance_0_u(_, "get$_disposeHold", "_disposeHold$0", 1);
    _instance_0_u(_, "get$_disposeDrag", "_disposeDrag$0", 1);
    _instance_1_u(_, "get$_receivedPointerSignal", "_receivedPointerSignal$1", 180);
    _instance_1_u(_, "get$_handlePointerScroll", "_handlePointerScroll$1", 13);
    _static_2(G, "sliver0___kDefaultSemanticIndexCallback$closure", "_kDefaultSemanticIndexCallback", 212);
    _instance_1_u(G.SliverMultiBoxAdaptorElement.prototype, "get$removeChild", "removeChild$1", 181);
    _instance_0_u(K._AnimatedState.prototype, "get$_transitions$_handleChange", "_transitions$_handleChange$0", 1);
    _static_1(T, "engine___noopCallback$closure", "_noopCallback", 157);
    _static_1(T, "engine___emptyCallback$closure", "_emptyCallback", 7);
    _instance_0_u(T.AlarmClock.prototype, "get$_timerDidFire", "_timerDidFire$0", 1);
    _instance_1_u(T.DomRenderer.prototype, "get$_metricsDidChange", "_metricsDidChange$1", 68);
    _instance_1_u(T.BrowserHistory.prototype, "get$_popStateListener", "_popStateListener$1", 15);
    _instance_1_u(T.PointerBinding.prototype, "get$_onPointerData", "_onPointerData$1", 184);
    _instance_1_u(T.TextEditingElement.prototype, "get$_handleChange", "_handleChange$1", 68);
    _instance_1_u(T.HybridTextEditing.prototype, "get$_syncEditingStateToFlutter", "_syncEditingStateToFlutter$1", 196);
    _static_1(Q, "ui_Window__submitScene$closure", "Window__submitScene", 142);
  })();
  (function inheritance() {
    var _mixin = hunkHelpers.mixin,
      _inherit = hunkHelpers.inherit,
      _inheritMany = hunkHelpers.inheritMany;
    _inherit(P.Object, null);
    _inheritMany(P.Object, [H.JS_CONST, J.Interceptor, J.JSObject, J.ArrayIterator, P.Iterable, H.Closure, H.CastIterator, P._ListBase_Object_ListMixin, H.ListIterator, P.Iterator, H.ExpandIterator, H.EmptyIterator, H.FixedLengthListMixin, H.UnmodifiableListMixin, H.Symbol, P.MapView, H.ConstantMap, H.JSInvocationMirror, H.TypeErrorDecoder, P.Error, H.ExceptionAndStackTrace, H._StackTrace, H.TypeImpl, P.MapMixin, H.LinkedHashMapCell, H.LinkedHashMapKeyIterator, H.JSSyntaxRegExp, H._MatchImplementation, H.StringMatch, P._TimerImpl, P._AsyncAwaitCompleter, P._AsyncStarStreamController, P._IterationMarker, P._SyncStarIterator, P.Future, P._Completer, P._FutureListener, P._Future, P._AsyncCallbackEntry, P.Stream, P.StreamSubscription, P.StreamTransformerBase, P._StreamController, P._SyncStreamControllerDispatch, P._AsyncStreamControllerDispatch, P._BufferingStreamSubscription, P._AddStreamState, P._PendingEvents, P._DelayedEvent, P._DelayedDone, P._StreamIterator, P.Timer, P.AsyncError, P._Zone, P._HashMapKeyIterator, P._SetBase, P._HashSetIterator, P._LinkedHashSetCell, P._LinkedHashSetIterator, P.LinkedHashSet, P.ListMixin, P._UnmodifiableMapMixin, P._ListQueueIterator, P._SplayTreeNode, P._SplayTree, P._SplayTreeIterator, P.Codec, P._JsonStringifier, P._Utf8Encoder, P._Utf8Decoder, P.bool, P.Comparable, P.DateTime, P.num, P.Duration, P.OutOfMemoryError, P.StackOverflowError, P._Exception, P.FormatException, P.Function, P.List, P.Map, P.Null, P.StackTrace, P.Stopwatch, P.String, P.StringBuffer, P.Symbol0, P.Type, P._Uri, P.UriData, P._SimpleUri, P.ServiceExtensionResponse, P._SyncBlock, W.CssStyleDeclarationBase, W._Html5NodeValidator, W.ImmutableListMixin, W.NodeValidatorBuilder, W._SimpleNodeValidator, W._SvgNodeValidator, W.FixedSizeListIterator, W._DOMWindowCrossFrame, W.NodeValidator, W._SameOriginUriPolicy, W._ValidatingTreeSanitizer, P._StructuredClone, P._AcceptStructuredClone, P.Point, P._RectangleBase, P.ByteBuffer, P.Endian, P.ByteData, P.Int8List, P.Uint8List, P.Uint8ClampedList, P.Int16List, P.Uint16List, P.Int32List, P.Uint32List, P.Float32List, P.Float64List, Y.HeapPriorityQueue, N.Hook, N.HookState, Y.Diagnosticable, E.UseScrollController, B.Listenable, T.PathProxy, X.AnimationStatus, G._AnimationDirection, G.AnimationBehavior, T.Simulation, S.AnimationWithParentMixin, S._TrainHoppingMode, Z.Curve, S.AnimationLazyListenerMixin, S.AnimationEagerListenerMixin, S.AnimationLocalListenersMixin, S.AnimationLocalStatusListenersMixin, R.Animatable, L.CupertinoLocalizations, L.LocalizationsDelegate, L.DefaultCupertinoLocalizations, D._CupertinoBackGestureController, Z.BoxPainter, U.FlutterErrorDetails, N.BindingBase, Y.DiagnosticLevel, Y.DiagnosticsTreeStyle, Y.TextTreeConfiguration, Y._PrefixedStringBuilder, Y._NoDefaultValue, Y.DiagnosticsNode, Y.DiagnosticPropertiesBuilder, Y.DiagnosticableTreeMixin, D.Key, D._TypeLiteral, F.LicenseEntry, B.AbstractNode, T.TargetPlatform, D._WordWrapParseMode, G.WriteBuffer, G.ReadBuffer, O.SynchronousFuture, D.GestureDisposition, D.GestureArenaMember, D.GestureArenaEntry, D._GestureArena, D.GestureArenaManager, N.GestureBinding, G._PointerState, O.DragDownDetails, O.DragStartDetails, O.DragUpdateDetails, O.DragEndDetails, O.HitTestEntry, O.HitTestResult, T.LongPressStartDetails, T.LongPressMoveUpdateDetails, T.LongPressEndDetails, B._Vector, B._Matrix, B.PolynomialFit, B.LeastSquaresSolver, O._DragState, Y.MouseTrackerAnnotation, Y._TrackedAnnotation, Y.MouseTracker, F._TapTracker, O.PointerRouter, G.PointerSignalResolver, S.DragStartBehavior, S.GestureRecognizerState, N.TapDownDetails, N.TapUpDetails, R.Velocity, R.VelocityEstimate, R._PointAtTime, R.VelocityTracker, K.ScrollBehavior, D._CornerId, D._Diagonal, M.ButtonTextTheme, M.ButtonBarLayoutBehavior, Q.Color, E._DefaultHeroTag, A.FloatingActionButtonLocation, A.FloatingActionButtonAnimator, M.InkFeature, R.InteractiveInkFeatureFactory, M.MaterialType, U.MaterialLocalizations, U.DefaultMaterialLocalizations, K.Route, K.PageTransitionsBuilder, M._ScaffoldSlot, M.ScaffoldPrelayoutGeometry, M.ScaffoldGeometry, B.MultiChildLayoutDelegate, M.ScaffoldFeatureController, Q.ShowValueIndicator, Q.SliderComponentShape, N.SnackBarClosedReason, X.MaterialTapTargetSize, X._IdentityThemeDataCacheKey, X._FifoCache, U.ScriptCategory, K.AlignmentGeometry, G.RenderComparison, G.Axis, G.VerticalDirection, G.AxisDirection, N.PaintingBinding, K.BorderRadiusGeometry, Y.BorderStyle, Y.BorderSide, Y.ShapeBorder, F.BoxShape, O.BoxShadow, Z.ClipContext, V.EdgeInsetsGeometry, T._ColorsAndStops, T.Gradient, E.ImageCache, E._CachedImage, M.ImageConfiguration, U.TextPainter, M.SpringDescription, M.SpringType, M._CriticalSolution, M._OverdampedSolution, M._UnderdampedSolution, N.Tolerance, N.RendererBinding, K.Constraints, K.ParentData, S._IntrinsicDimensionsCacheEntry, S.RenderBoxContainerDefaultsMixin, V.CustomPainterSemantics, T.DebugOverflowIndicatorMixin, F.FlexFit, F.MainAxisSize, F.MainAxisAlignment, F.CrossAxisAlignment, K.SemanticsHandle, K.PipelineOwner, K.RenderObjectWithChildMixin, K.ContainerParentDataMixin, K.ContainerRenderObjectMixin, K._SemanticsFragment, K._SemanticsGeometry, Q.TextOverflow, E.RenderProxyBoxMixin, E.HitTestBehavior, E.CustomClipper, E.DecorationPosition, G.GrowthDirection, G.RenderSliverHelpers, F.KeepAliveParentDataMixin, F.RenderSliverWithKeepAliveMixin, K.RelativeRect, K.StackFit, K.Overflow, A.ViewConfiguration, Q.RevealedOffset, N.ScrollDirection, N._TaskEntry, N._FrameCallbackEntry, N.SchedulerPhase, N.SchedulerBinding, M.TickerProvider, M.Ticker, M.TickerFuture, N.SemanticsBinding, A.SemanticsTag, A.CustomSemanticsAction, A._BoxEdge, A._TraversalSortNode, A.SemanticsConfiguration, A.DebugSemanticsDumpOrder, E.SemanticsEvent, Q.AssetBundle, N.ServicesBinding, F.MethodCall0, F.PlatformException, F.MissingPluginException, U.StringCodec, U.JSONMessageCodec0, U.JSONMethodCodec, U.StandardMessageCodec, A.BasicMessageChannel, A.MethodChannel, X.ApplicationSwitcherDescription, X.SystemUiOverlayStyle, V.SystemSoundType, X.TextRange, B.ConnectionState, B.AsyncSnapshot, U.Notification0, L.AutomaticKeepAliveClientMixin, N.WidgetsBindingObserver, N.WidgetsBinding, O._FocusScopeNode_Object_DiagnosticableTreeMixin, O.FocusManager, N.TypeMatcher, N._StateLifecycle, N._ElementLifecycle, N._InactiveElements, N.BuildContext, N.BuildOwner, D.GestureRecognizerFactory, T.HeroFlightDirection, T._HeroFlightManifest, T._HeroFlight, K.NavigatorObserver, X.IconData, L._Pending, L.WidgetsLocalizations, L.DefaultWidgetsLocalizations, F.MediaQueryData, K.RoutePopDisposition, K.RouteSettings, X.OverlayEntry, L._GlowState, S._StorageEntryIdentifier, S.PageStorageBucket, M.ScrollMetrics, L.ScrollPhysics, T.LocalHistoryEntry, T.LocalHistoryRoute, M.ScrollActivity, M.ScrollDragController, G.ViewportNotificationMixin, G.SliverChildDelegate, U.SingleTickerProviderStateMixin, U.TickerProviderStateMixin, T.AlarmClock, T.AssetManager, T.AssetManagerException, T.EngineCanvas, T._NullTreeSanitizer0, T.BrowserEngine, T.PrerollContext, T.PaintContext, T.LayerScene, T.CompositorContext, T.Rasterizer, T.Surface, T._CanvasCache, T.DomRenderer, T._SaveStackEntry, T._SaveClipEntry, T.SaveStackTracking, T.BrowserHistory, T._SaveElementStackEntry, T.SaveElementStackTracking, T.Keyboard, T.PointerBinding, T.PointerSupportDetector, T.BaseAdapter, T.RecordingCanvas, T.PaintCommand, T.Subpath, T.PathCommand, T._PaintBounds, T._CheckableKind, T.RoleManager, T.SemanticsUpdate, T.SemanticsNodeUpdate, T.Role, T.SemanticsObject, T.AccessibilityMode, T.GestureMode, T.EngineSemanticsOwner, T.MethodCall, T.StringCodec0, T.JSONMessageCodec, T.JSONMethodCodec0, T.CanvasShadow, T.FontCollection, T._FontManager, T.TextMeasurementService, T.ParagraphGeometricStyle, T.TextDimensions, T.ParagraphRuler, T.RulerCacheEntry, T.EditingState, T.InputType, T.InputConfiguration, T.ElementType, T.TextEditingElement, T.HybridTextEditing, T.Matrix40, T.Vector30, Q.LocationStrategy, Q.PlatformLocation, Q.ClipOp, Q.PictureRecorder, Q.Canvas, Q.Picture, Q.PathFillType, Q.Path, Q.Scene, Q.SceneBuilder, Q.PersistedSurfaceReuseStrategy, Q.PersistedSurface, Q._DomClip, Q._NullTreeSanitizer, Q._PaintRequest, Q.OffsetBase, Q.Rect, Q.Radius, Q.RRect, Q._HashEnd, Q.StrokeCap, Q.PaintingStyle, Q.BlendMode, Q.Clip, Q.PaintData, Q.Paint, Q.Shader, Q.BlurStyle, Q.MaskFilter, Q.Shadow, Q.PointerChange, Q.PointerDeviceKind, Q.PointerSignalKind, Q.PointerData, Q.PointerDataPacket, Q.SemanticsAction, Q.SemanticsFlag, Q.SemanticsUpdateBuilder, Q.FontWeight, Q.TextAlign, Q.TextBaseline, Q.TextDecoration, Q.TextDecorationStyle, Q.TextStyle, Q.ParagraphStyle, Q.TextDirection, Q.TextBox, Q.TextAffinity, Q.TextPosition, Q.ParagraphConstraints, Q.Paragraph, Q.ParagraphBuilder, Q.TileMode, Q.AppLifecycleState, Q.WindowPadding, Q.Locale, Q.Window, Q.AccessibilityFeatures, Q.Brightness, T._PathOffset, T.SvgPathStringSource, T.PathSegmentData, T.SvgPathNormalizer, L.SvgPathSegType, T.Matrix41, T.Vector31, T.Vector40, E.Matrix4, E.Vector3, E.Vector4]);
    _inheritMany(J.Interceptor, [J.JSBool, J.JSNull, J.JavaScriptObject, J.JSArray, J.JSNumber, J.JSString, H.NativeByteBuffer, H.NativeTypedData, W.EventTarget, W.AccessibleNodeList, W.Blob, W.CanvasGradient, W.CanvasRenderingContext2D, W.CssStyleValue, W.CssTransformComponent, W.CssRule, W._CssStyleDeclaration_Interceptor_CssStyleDeclarationBase, W.StyleSheet, W.DataTransferItemList, W.DomException, W._DomRectList_Interceptor_ListMixin, W.DomRectReadOnly, W._DomStringList_Interceptor_ListMixin, W.DomTokenList, W.Entry, W.Event, W._FileList_Interceptor_ListMixin, W.FontFace, W.Gamepad, W.History, W._HtmlCollection_Interceptor_ListMixin, W.ImageData, W.Location, W.MediaList, W._MidiInputMap_Interceptor_MapMixin, W._MidiOutputMap_Interceptor_MapMixin, W.MimeType, W._MimeTypeArray_Interceptor_ListMixin, W._NodeList_Interceptor_ListMixin, W.Plugin, W._PluginArray_Interceptor_ListMixin, W.Range, W._RtcStatsReport_Interceptor_MapMixin, W.SpeechGrammar, W._SpeechGrammarList_Interceptor_ListMixin, W.SpeechRecognitionResult, W._Storage_Interceptor_MapMixin, W._TextTrackCueList_Interceptor_ListMixin, W.TimeRanges, W.Touch, W._TouchList_Interceptor_ListMixin, W.TrackDefaultList, W.Url, W.__CssRuleList_Interceptor_ListMixin, W.__GamepadList_Interceptor_ListMixin, W.__NamedNodeMap_Interceptor_ListMixin, W.__SpeechRecognitionResultList_Interceptor_ListMixin, W.__StyleSheetList_Interceptor_ListMixin, P.ObjectStore, P.Length, P._LengthList_Interceptor_ListMixin, P.Number, P._NumberList_Interceptor_ListMixin, P.PointList, P._StringList_Interceptor_ListMixin, P.Transform, P._TransformList_Interceptor_ListMixin, P.AudioBuffer, P._AudioParamMap_Interceptor_MapMixin, P._SqlResultSetRowList_Interceptor_ListMixin]);
    _inheritMany(J.JavaScriptObject, [J.PlainJavaScriptObject, J.UnknownJavaScriptObject, J.JavaScriptFunction]);
    _inherit(J.JSUnmodifiableArray, J.JSArray);
    _inheritMany(J.JSNumber, [J.JSInt, J.JSDouble]);
    _inheritMany(P.Iterable, [H._CastIterableBase, H.EfficientLengthIterable, H.MappedIterable, H.WhereIterable, H.ExpandIterable, H.TakeIterable, H.SkipIterable, H._ConstantMapKeyIterable, P.IterableBase, R.ObserverList]);
    _inheritMany(H.Closure, [H._CastIterableBase_lastWhere_closure0, H._CastIterableBase_lastWhere_closure, H._CastListBase_sort_closure, H.ConstantStringMap_values_closure, H.Instantiation, H.Primitives_initTicker_closure, H.Primitives_functionNoSuchMethod_closure, H.unwrapException_saveStackTrace, H.TearOffClosure, H.JsLinkedHashMap_values_closure, H.JsLinkedHashMap_addAll_closure, H.initHooks_closure, H.initHooks_closure0, H.initHooks_closure1, P._AsyncRun__initializeScheduleImmediate_internalCallback, P._AsyncRun__initializeScheduleImmediate_closure, P._AsyncRun__scheduleImmediateJsOverride_internalCallback, P._AsyncRun__scheduleImmediateWithSetImmediate_internalCallback, P._TimerImpl_internalCallback, P._TimerImpl$periodic_closure, P._AsyncAwaitCompleter_complete_closure, P._AsyncAwaitCompleter_completeError_closure, P._awaitOnObject_closure, P._awaitOnObject_closure0, P._wrapJsFunctionForAsync_closure, P._asyncStarHelper_closure, P._asyncStarHelper_closure0, P._AsyncStarStreamController__resumeBody, P._AsyncStarStreamController__resumeBody_closure, P._AsyncStarStreamController_closure0, P._AsyncStarStreamController_closure1, P._AsyncStarStreamController_closure, P._AsyncStarStreamController__closure, P.Future_Future$delayed_closure, P.Future_wait_handleError, P.Future_wait_closure, P._Future__addListener_closure, P._Future__prependListeners_closure, P._Future__chainForeignFuture_closure, P._Future__chainForeignFuture_closure0, P._Future__chainForeignFuture_closure1, P._Future__asyncComplete_closure, P._Future__chainFuture_closure, P._Future__asyncCompleteError_closure, P._Future__propagateToListeners_handleWhenCompleteCallback, P._Future__propagateToListeners_handleWhenCompleteCallback_closure, P._Future__propagateToListeners_handleValueCallback, P._Future__propagateToListeners_handleError, P.Stream_Stream$fromIterable_closure, P.Stream_Stream$periodic_sendEvent, P.Stream_Stream$periodic_startPeriodicTimer, P.Stream_Stream$periodic_startPeriodicTimer_closure, P.Stream_Stream$periodic_closure0, P.Stream_Stream$periodic_closure1, P.Stream_Stream$periodic_closure2, P.Stream_Stream$periodic__closure, P.Stream_Stream$periodic_closure, P.Stream_length_closure, P.Stream_length_closure0, P.Stream_toList_closure, P.Stream_toList_closure0, P.Stream_last_closure, P.Stream_last_closure0, P.Stream_lastWhere_closure, P.Stream_lastWhere__closure, P.Stream_lastWhere__closure0, P.Stream_lastWhere_closure0, P._StreamController__subscribe_closure, P._StreamController__recordCancel_complete, P._AddStreamState_cancel_closure, P._BufferingStreamSubscription__sendError_sendError, P._BufferingStreamSubscription__sendDone_sendDone, P._PendingEvents_schedule_closure, P._cancelAndError_closure, P._cancelAndErrorClosure_closure, P._rootHandleUncaughtError_closure, P._RootZone_bindCallback_closure, P._RootZone_bindCallbackGuarded_closure, P._RootZone_bindUnaryCallbackGuarded_closure, P.HashMap_HashMap$from_closure, P.LinkedHashMap_LinkedHashMap$from_closure, P.MapBase_mapToString_closure, P.SplayTreeMap_closure, P._JsonStringifier_writeMap_closure, P.NoSuchMethodError_toString_closure, P.Duration_toString_sixDigits, P.Duration_toString_twoDigits, P.Uri__parseIPv4Address_error, P.Uri_parseIPv6Address_error, P.Uri_parseIPv6Address_parseHex, P._Uri__Uri$notSimple_closure, P._Uri__makePath_closure, P._createTables_closure, P._createTables_build, P._createTables_setChars, P._createTables_setRange, W.promiseToFuture_closure, W.promiseToFuture_closure0, W.Element_Element$html_closure, W.Entry_remove_closure, W.Entry_remove_closure0, W.HttpRequest_request_closure, W.MidiInputMap_keys_closure, W.MidiOutputMap_keys_closure, W.RtcStatsReport_keys_closure, W.Storage_keys_closure, W.Window_animationFrame_closure, W._EventStreamSubscription_closure, W.NodeValidatorBuilder_allowsElement_closure, W.NodeValidatorBuilder_allowsAttribute_closure, W._SimpleNodeValidator_closure, W._SimpleNodeValidator_closure0, W._TemplatingNodeValidator_closure, W._ValidatingTreeSanitizer_sanitizeTree_walk, P._StructuredClone_walk_closure, P._AcceptStructuredClone_walk_closure, P.convertDartToNative_Dictionary_closure, P.convertNativePromiseToDartFuture_closure, P.convertNativePromiseToDartFuture_closure0, P.FilteredElementList__iterable_closure, P.FilteredElementList__iterable_closure0, P.FilteredElementList_removeRange_closure, P._completeRequest_closure, P.AudioParamMap_keys_closure, E._StreamHookState__subscribe_closure, E._StreamHookState__subscribe__closure1, E._StreamHookState__subscribe_closure1, E._StreamHookState__subscribe__closure, E._StreamHookState__subscribe_closure0, E._StreamHookState__subscribe__closure0, E._ListenableStateHook__listener_closure, F.h_closure, F.run_closure, F.run__closure, F.run___closure, F.run__closure0, F.home_closure, F.home__closure, F.home___closure0, F.home___closure, F.home__closure0, F.home__closure1, F.tabs_closure, F.tabs__closure, F.tabs___closure, F.tabs____closure, F.tabs____closure0, F.list_closure, F.header_closure, F.overview_closure, F.overview__closure, F.detail_closure, F.graph_closure, F.LP_paint_np, F.LP_paint_closure, F.LP_paint_closure0, F.LP_paint_ha, S.AnimationLocalListenersMixin_notifyListeners_closure, S.AnimationLocalStatusListenersMixin_notifyStatusListeners_closure, D.CupertinoPageRoute__startPopGesture_closure, D.CupertinoPageRoute_buildPageTransitions_closure, D.CupertinoPageRoute_buildPageTransitions_closure0, N.BindingBase_lockEvents_closure, N.BindingBase_registerSignalServiceExtension_closure, N.BindingBase_registerNumericServiceExtension_closure, N.BindingBase_registerServiceExtension_closure, N.BindingBase_registerServiceExtension__closure, B.ChangeNotifier_notifyListeners_closure, Y.DiagnosticsNode_toStringDeep_closure, Y.DiagnosticableTreeMixin_toStringShallow_closure, D.debugPrintThrottled_closure, O.SynchronousFuture_whenComplete_closure, D.GestureArenaManager_add_closure, D.GestureArenaManager__tryToResolveArena_closure, N.GestureBinding_dispatchEvent_closure, N.GestureBinding_dispatchEvent_closure0, G.PointerEventConverter__ensureStateForPointer_closure, O.DragGestureRecognizer_addAllowedPointer_closure, O.DragGestureRecognizer_handleEvent_closure, O.DragGestureRecognizer_acceptGesture_closure, O.DragGestureRecognizer_acceptGesture_closure0, O.DragGestureRecognizer_didStopTrackingLastPointer_closure, O.DragGestureRecognizer_didStopTrackingLastPointer_closure0, O.DragGestureRecognizer_didStopTrackingLastPointer_closure1, O.DragGestureRecognizer_didStopTrackingLastPointer_closure2, Y.MouseTracker__scheduleMousePositionCheck_closure, Y.MouseTracker_collectMousePositions_exitAnnotation, Y.MouseTracker_collectMousePositions_exitAllDevices, O.PointerRouter_addRoute_closure, O.PointerRouter__dispatch_closure, G.PointerSignalResolver_resolve_closure, S.GestureRecognizer_invokeCallback_closure, N.TapGestureRecognizer__checkDown_closure, S._MaterialAppState_build_closure, S._MaterialAppState_build_closure0, D.MaterialPointArcTween__initialize_sweepAngle, D.MaterialRectArcTween__initialize_closure, Z._RawMaterialButtonState__handleHighlightChanged_closure, U._getClipCallback_closure, R._InkResponseState__createInkFeature_onRemoved, R._InkResponseState_build_closure, M._MaterialState_build_closure, M._MaterialInteriorState_forEachTween_closure, M._MaterialInteriorState_forEachTween_closure0, M._MaterialInteriorState_forEachTween_closure1, K.PageTransitionsTheme__all_closure, M._FloatingActionButtonTransitionState__handlePreviousAnimationStatusChanged_closure, M.ScaffoldState_hideCurrentSnackBar_closure, M.ScaffoldState__moveFloatingActionButton_closure, M.ScaffoldState_build_closure, K._AnimatedThemeState_forEachTween_closure, X.ThemeData_localize_closure, Y._CompoundBorder_dimensions_closure, Y._CompoundBorder_scale_closure, Y._CompoundBorder_toString_closure, Z.ClipContext_clipPathAndPaint_closure, Z.ClipContext_clipRRectAndPaint_closure, Z.ClipContext_clipRectAndPaint_closure, T.Gradient__impliedStops_closure, T.LinearGradient_scale_closure, Q.TextSpan_getSpanForPosition_closure, Q.TextSpan_toPlainText_closure, Q.TextSpan_debugDescribeChildren_closure, N.RendererBinding__createMouseTracker_closure, S.RenderBox_getDistanceToActualBaseline_closure, K.PaintingContext_pushClipRect_closure, K.PaintingContext_pushClipPath_closure, K.PipelineOwner_flushLayout_closure, K.PipelineOwner_flushLayout_closure0, K.PipelineOwner_flushLayout_closure1, K.PipelineOwner_flushCompositingBits_closure, K.PipelineOwner_flushCompositingBits_closure0, K.PipelineOwner_flushCompositingBits_closure1, K.PipelineOwner_flushPaint_closure, K.PipelineOwner_flushPaint_closure0, K.PipelineOwner_flushPaint_closure1, K.PipelineOwner_flushSemantics_closure, K.PipelineOwner_flushSemantics_closure0, K.PipelineOwner_flushSemantics_closure1, K.RenderObject__debugReportException_closure, K.RenderObject__debugReportException_closure_visitor, K.RenderObject__cleanRelayoutBoundary_closure, K.RenderObject_invokeLayoutCallback_closure, K.RenderObject__updateCompositingBits_closure, K.RenderObject_clearSemantics_closure, K.RenderObject__getSemanticsForParent_closure, Q.RenderParagraph_handleEvent_closure, Q.RenderParagraph_describeSemanticsConfiguration_closure, Q.RenderParagraph_assembleSemanticsNode_buildSemanticsConfig, E.RenderPhysicalModel_paint_closure, E.RenderPhysicalShape_paint_closure, U.RenderSliverList_performLayout_advance, F.RenderSliverMultiBoxAdaptor__createOrObtainChild_closure, F.RenderSliverMultiBoxAdaptor_collectGarbage_closure, F.RenderSliverMultiBoxAdaptor_collectGarbage__closure, Q.RenderViewportBase_visitChildrenForSemantics_closure, N.SchedulerBinding_endOfFrame_closure, N.SchedulerBinding_scheduleWarmUpFrame_closure, N.SchedulerBinding_scheduleWarmUpFrame_closure0, N.SchedulerBinding_scheduleWarmUpFrame_closure1, N.SchedulerBinding_handleBeginFrame_closure, N.SchedulerBinding_handleBeginFrame_closure0, N.SchedulerBinding_handleDrawFrame_closure, A.SemanticsNode_getSemanticsData_closure, A.SemanticsNode__childrenInTraversalOrder_closure, A.SemanticsNode_debugDescribeChildren_closure, A._SemanticsSortGroup_sortedWithinKnot_closure, A._SemanticsSortGroup_sortedWithinKnot_search, A._SemanticsSortGroup_sortedWithinKnot_closure0, A._SemanticsSortGroup_sortedWithinKnot_closure1, A.SemanticsOwner_sendSemanticsUpdate_closure, A.SemanticsOwner_sendSemanticsUpdate_closure0, A.SemanticsOwner_sendSemanticsUpdate_closure1, A.SemanticsOwner__getSemanticsActionHandlerForId_closure, A.SemanticsConfiguration__addArgumentlessAction_closure, A.SemanticsConfiguration_onMoveCursorForwardByCharacter_closure, A.SemanticsConfiguration_onMoveCursorBackwardByCharacter_closure, A.SemanticsConfiguration_onSetSelection_closure, Q.CachingAssetBundle_loadString_closure, N.ServicesBinding__addLicenses_closure, N.ServicesBinding__addLicenses_closure0, U.StandardMessageCodec_writeValue_closure, A.BasicMessageChannel_setMessageHandler_closure, A.MethodChannel_setMethodCallHandler_closure, B.BinaryMessages__sendPlatformMessage_closure, S._WidgetsAppState__onGenerateRoute_closure, S._WidgetsAppState_didChangeLocale_closure, S._WidgetsAppState_didChangeAccessibilityFeatures_closure, S._WidgetsAppState_didChangeMetrics_closure, S._WidgetsAppState_didChangeTextScaleFactor_closure, S._WidgetsAppState_didChangePlatformBrightness_closure, B._FutureBuilderState__subscribe_closure, B._FutureBuilderState__subscribe__closure0, B._FutureBuilderState__subscribe_closure0, B._FutureBuilderState__subscribe__closure, L._AutomaticKeepAliveState__addClient_closure, L._AutomaticKeepAliveState__getChildElement_closure, L._AutomaticKeepAliveState__createCallback_closure, L._AutomaticKeepAliveState__createCallback__closure, L._AutomaticKeepAliveState__createCallback__closure0, L._AutomaticKeepAliveState__createCallback___closure, N._WidgetsFlutterBinding_BindingBase_GestureBinding_ServicesBinding_SchedulerBinding_PaintingBinding_SemanticsBinding_RendererBinding_initServiceExtensions_closure, N._WidgetsFlutterBinding_BindingBase_GestureBinding_ServicesBinding_SchedulerBinding_PaintingBinding_SemanticsBinding_RendererBinding_initServiceExtensions_closure0, N._WidgetsFlutterBinding_BindingBase_GestureBinding_ServicesBinding_SchedulerBinding_PaintingBinding_SemanticsBinding_RendererBinding_initServiceExtensions_closure1, N._WidgetsFlutterBinding_BindingBase_GestureBinding_ServicesBinding_SchedulerBinding_initServiceExtensions_closure, N._WidgetsFlutterBinding_BindingBase_GestureBinding_ServicesBinding_SchedulerBinding_initServiceExtensions_closure0, N._WidgetsFlutterBinding_BindingBase_GestureBinding_ServicesBinding_SchedulerBinding_PaintingBinding_SemanticsBinding_RendererBinding_WidgetsBinding_initServiceExtensions_closure, N._WidgetsFlutterBinding_BindingBase_GestureBinding_ServicesBinding_SchedulerBinding_PaintingBinding_SemanticsBinding_RendererBinding_WidgetsBinding_initServiceExtensions__closure, N._WidgetsFlutterBinding_BindingBase_GestureBinding_ServicesBinding_SchedulerBinding_PaintingBinding_SemanticsBinding_RendererBinding_WidgetsBinding_initServiceExtensions__closure0, N.WidgetsBinding_deferFirstFrameReport_closure, N.WidgetsBinding_allowFirstFrameReport_closure, N._WidgetsFlutterBinding_BindingBase_GestureBinding_ServicesBinding_SchedulerBinding_PaintingBinding_SemanticsBinding_RendererBinding_WidgetsBinding_drawFrame_closure, N.RenderObjectToWidgetAdapter_attachToRenderTree_closure, N.RenderObjectToWidgetAdapter_attachToRenderTree_closure0, O.FocusScopeNode__updateManager_update, N._InactiveElements__unmount_closure, N.BuildOwner_buildScope_closure, N.BuildOwner_finalizeTree_closure, N.Element_renderObject_visit, N.Element_updateSlotForChild_visit, N.Element__updateDepth_closure, N.Element_detachRenderObject_closure, N.Element_attachRenderObject_closure, N.Element_debugDescribeChildren_closure, N.ErrorWidget_closure, N.ParentDataElement__applyParentData_applyParentDataToChild, N.RenderObjectElement_updateChildren_replaceWithNullIfForgotten, N.MultiChildRenderObjectElement_children_closure, D.GestureDetector_build_closure, D.GestureDetector_build_closure0, D.GestureDetector_build_closure1, D.GestureDetector_build_closure2, D.GestureDetector_build_closure3, D.GestureDetector_build_closure4, D.GestureDetector_build_closure5, D.GestureDetector_build_closure6, D.GestureDetector_build_closure7, D.GestureDetector_build_closure8, D.GestureDetector_build_closure9, D.GestureDetector_build_closure10, D.RawGestureDetectorState_replaceGestureRecognizers_closure, T.Hero__allHeroesFor_visitor, T._HeroState_startFlight_closure, T._HeroState_endFlight_closure, T._HeroFlight__buildOverlay_closure, T.HeroController__maybeStartHeroTransition_closure, T.HeroController_closure, Y.IconTheme_merge_closure, G.ImplicitlyAnimatedWidgetState_didUpdateWidget_closure, G.ImplicitlyAnimatedWidgetState__constructTweens_closure, G.AnimatedWidgetBaseState__handleAnimationChanged_closure, G._AnimatedDefaultTextStyleState_forEachTween_closure, G._AnimatedPhysicalModelState_forEachTween_closure, G._AnimatedPhysicalModelState_forEachTween_closure0, G._AnimatedPhysicalModelState_forEachTween_closure1, G._AnimatedPhysicalModelState_forEachTween_closure2, A._LayoutBuilderElement__layout_closure, L._loadAll_closure, L._loadAll_closure0, L._loadAll_closure1, L._LocalizationsState_load_closure, L._LocalizationsState_load_closure0, L._LocalizationsState_load__closure, X.ModalBarrier_build_closure, K.NavigatorState_initState_closure, K.NavigatorState__cancelActivePointers_closure, X.OverlayEntry_remove_closure, X._OverlayEntryState__markNeedsBuild_closure, X.OverlayState_insert_closure, X.OverlayState_insertAll_closure, X.OverlayState__remove_closure, X.OverlayState__didChangeEntryOpacity_closure, L._GlowController_pull_closure, S.PageStorageBucket__allKeys_closure, D._PageViewState_build_closure0, D._PageViewState_build_closure, T.TransitionRoute__updateSecondaryAnimation_closure, T._ModalScopeState__forceRebuildPage_closure, T._ModalScopeState_build_closure0, T._ModalScopeState_build_closure, T.ModalRoute_offstage_closure, T.ModalRoute_changedInternalState_closure, F.ScrollController_animateTo_closure, F.TrackingScrollController_attach_closure, B.ScrollView_build_closure, F.ScrollableState_setCanDrag_closure, F.ScrollableState_setCanDrag_closure0, F.ScrollableState_setCanDrag_closure1, F.ScrollableState_setCanDrag_closure2, G.SliverMultiBoxAdaptorElement_performRebuild_processElement, G.SliverMultiBoxAdaptorElement__build_closure, G.SliverMultiBoxAdaptorElement_createChild_closure, G.SliverMultiBoxAdaptorElement_removeChild_closure, K._AnimatedState__handleChange_closure, T.webOnlyInitializeEngine_closure, T.webOnlyInitializeEngine_closure0, T.webOnlyInitializeEngine__closure, T.DomRenderer_reset_closure, T.BrowserHistory__popStateListener_closure, T.BrowserHistory__popStateListener_closure0, T.Keyboard$__closure, T.Keyboard$__closure0, T.Keyboard$__closure1, T.BaseAdapter__addEventListener_closure, T.PointerAdapter__setup_closure, T.PointerAdapter__setup_closure0, T.PointerAdapter__setup_closure1, T.PointerAdapter__setup_closure2, T.PointerAdapter__setup_closure3, T.TouchAdapter__setup_closure, T.TouchAdapter__setup_closure0, T.TouchAdapter__setup_closure1, T.TouchAdapter__setup_closure2, T.MouseAdapter__setup_closure, T.MouseAdapter__setup_closure0, T.MouseAdapter__setup_closure1, T.MouseAdapter__setup_closure2, T._addWheelEventListener_closure, T.Incrementable_closure, T.Incrementable_closure0, T.Scrollable_update_closure, T.Scrollable_update_closure0, T.Scrollable_update_closure1, T.closure, T.closure0, T.closure1, T.closure2, T.closure3, T.closure4, T.EngineSemanticsOwner$__closure, T.EngineSemanticsOwner_closure, T.EngineSemanticsOwner__tryEnableSemantics_closure, T.EngineSemanticsOwner_autoEnableOnTap_closure, T.EngineSemanticsOwner__getGestureModeClock_closure, T.Tappable_update_closure, T.TextField__initializeForBlink_closure, T.TextField__initializeForWebkit_closure, T.TextField__initializeForWebkit_closure0, T._FontManager_registerAsset_closure, T._FontManager_registerAsset_closure0, T._PolyfillFontManager_registerAsset__watchWidth, T._PolyfillFontManager_registerAsset_closure, T.TextMeasurementService$__closure, T.TextMeasurementService__scheduleRulerCacheCleanup_closure, T.TextMeasurementService_cleanUpRulerCache_closure, T._styleEditingElement_closure, T.TextEditingElement_enable_closure, Q.HashLocationStrategy_onPopState_closure, Q.HashLocationStrategy__waitForPopState_closure, Q.SceneBuilder_build_closure, Q.PersistedContainerSurface_update_insertDomNodeIfMoved, Q.PersistedStandardPicture__applyBitmapPaint_closure, Q.Paragraph_getPositionForOffset__measureSingleLineWidth, Q.ParagraphBuilder__buildRichText_currentElement, Q.Window__replyToPlatformMessage_closure, Q.Window_sendPlatformMessage_closure, Q.Window_sendPlatformMessage_closure0, Q.Window_sendPlatformMessage_closure1, A.hashObjects_closure]);
    _inheritMany(H._CastIterableBase, [H.CastIterable, H.__CastListBase__CastIterableBase_ListMixin]);
    _inherit(H._EfficientLengthCastIterable, H.CastIterable);
    _inherit(H._CastListBase, H.__CastListBase__CastIterableBase_ListMixin);
    _inherit(H.CastList, H._CastListBase);
    _inherit(P.ListBase, P._ListBase_Object_ListMixin);
    _inheritMany(P.ListBase, [H.UnmodifiableListBase, W._ChildrenElementList, W._FrozenElementList, W._ChildNodeListLazy, P.FilteredElementList, N._TypedDataBuffer]);
    _inherit(H.CodeUnits, H.UnmodifiableListBase);
    _inheritMany(H.EfficientLengthIterable, [H.ListIterable, H.EmptyIterable, H.LinkedHashMapKeyIterable, P._HashMapKeyIterable, P._SplayTreeKeyIterable, P._SplayTreeValueIterable, P.Set]);
    _inheritMany(H.ListIterable, [H.SubListIterable, H.MappedListIterable, H.ReversedListIterable, P.ListQueue, P._JsonMapKeyIterable]);
    _inherit(H.EfficientLengthMappedIterable, H.MappedIterable);
    _inheritMany(P.Iterator, [H.MappedIterator, H.WhereIterator, H.TakeIterator, H.SkipIterator]);
    _inherit(H.EfficientLengthTakeIterable, H.TakeIterable);
    _inherit(H.EfficientLengthSkipIterable, H.SkipIterable);
    _inherit(P._UnmodifiableMapView_MapView__UnmodifiableMapMixin, P.MapView);
    _inherit(P.UnmodifiableMapView, P._UnmodifiableMapView_MapView__UnmodifiableMapMixin);
    _inherit(H.ConstantMapView, P.UnmodifiableMapView);
    _inheritMany(H.ConstantMap, [H.ConstantStringMap, H.GeneralConstantMap]);
    _inherit(H.Instantiation1, H.Instantiation);
    _inheritMany(P.Error, [H.NullError, H.JsNoSuchMethodError, H.UnknownJsTypeError, H.TypeErrorImplementation, H.CastErrorImplementation, H.RuntimeError, P.AssertionError, P.JsonUnsupportedObjectError, P.NullThrownError, P.ArgumentError, P.NoSuchMethodError, P.UnsupportedError, P.UnimplementedError, P.StateError, P.ConcurrentModificationError, P.CyclicInitializationError]);
    _inheritMany(H.TearOffClosure, [H.StaticClosure, H.BoundClosure]);
    _inheritMany(P.AssertionError, [H._AssertionError, U.FlutterError]);
    _inherit(P.MapBase, P.MapMixin);
    _inheritMany(P.MapBase, [H.JsLinkedHashMap, P._HashMap, P._JsonMap, W._AttributeMap]);
    _inheritMany(H.NativeTypedData, [H.NativeByteData, H.NativeTypedArray]);
    _inheritMany(H.NativeTypedArray, [H._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin, H._NativeTypedArrayOfInt_NativeTypedArray_ListMixin]);
    _inherit(H._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin, H._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin);
    _inherit(H.NativeTypedArrayOfDouble, H._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin);
    _inherit(H._NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin, H._NativeTypedArrayOfInt_NativeTypedArray_ListMixin);
    _inherit(H.NativeTypedArrayOfInt, H._NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin);
    _inheritMany(H.NativeTypedArrayOfDouble, [H.NativeFloat32List, H.NativeFloat64List]);
    _inheritMany(H.NativeTypedArrayOfInt, [H.NativeInt16List, H.NativeInt32List, H.NativeInt8List, H.NativeUint16List, H.NativeUint32List, H.NativeUint8ClampedList, H.NativeUint8List]);
    _inherit(P._SyncStarIterable, P.IterableBase);
    _inheritMany(P._Completer, [P._AsyncCompleter, P._SyncCompleter]);
    _inheritMany(P._StreamController, [P._AsyncStreamController, P._SyncStreamController]);
    _inheritMany(P.Stream, [P._StreamImpl, P._ForwardingStream, W._EventStream]);
    _inheritMany(P._StreamImpl, [P._ControllerStream, P._GeneratedStreamImpl]);
    _inheritMany(P._BufferingStreamSubscription, [P._ControllerSubscription, P._ForwardingStreamSubscription]);
    _inherit(P._StreamControllerAddStreamState, P._AddStreamState);
    _inheritMany(P._PendingEvents, [P._IterablePendingEvents, P._StreamImplEvents]);
    _inheritMany(P._DelayedEvent, [P._DelayedData, P._DelayedError]);
    _inheritMany(P._ForwardingStream, [P._ExpandStream, P._SkipStream]);
    _inherit(P._StateStreamSubscription, P._ForwardingStreamSubscription);
    _inherit(P._RootZone, P._Zone);
    _inheritMany(P._SetBase, [P._HashSet, P._LinkedHashSet]);
    _inherit(P._SplayTreeMapNode, P._SplayTreeNode);
    _inherit(P._SplayTreeMap__SplayTree_MapMixin, P._SplayTree);
    _inherit(P.SplayTreeMap, P._SplayTreeMap__SplayTree_MapMixin);
    _inheritMany(P._SplayTreeIterator, [P._SplayTreeKeyIterator, P._SplayTreeValueIterator, P._SplayTreeNodeIterator]);
    _inheritMany(P.Codec, [P.Base64Codec, P.Encoding, P.JsonCodec]);
    _inherit(P.Converter, P.StreamTransformerBase);
    _inheritMany(P.Converter, [P.Base64Encoder, P.JsonEncoder, P.JsonDecoder, P.Utf8Encoder, P.Utf8Decoder]);
    _inherit(P.JsonCyclicError, P.JsonUnsupportedObjectError);
    _inherit(P._JsonStringStringifier, P._JsonStringifier);
    _inherit(P.Utf8Codec, P.Encoding);
    _inheritMany(P.num, [P.double, P.int]);
    _inheritMany(P.ArgumentError, [P.RangeError, P.IndexError]);
    _inherit(P._DataUri, P._Uri);
    _inheritMany(W.EventTarget, [W.Node, W.FileWriter, W.FontFaceSet, W.HttpRequestEventTarget, W.MediaKeySession, W.MessagePort, W.SourceBuffer, W._SourceBufferList_EventTarget_ListMixin, W.TextTrack, W.TextTrackCue, W._TextTrackList_EventTarget_ListMixin, W.VideoTrackList, W.Window0, P.Request, P.AudioTrackList, P.BaseAudioContext]);
    _inheritMany(W.Node, [W.Element0, W.CharacterData, W.Document, W._Attr]);
    _inheritMany(W.Element0, [W.HtmlElement, P.SvgElement]);
    _inheritMany(W.HtmlElement, [W.AnchorElement, W.AreaElement, W.BaseElement, W.BodyElement, W.CanvasElement, W.DivElement, W.FormElement, W.InputElement, W.MetaElement, W.ParagraphElement, W.SelectElement, W.StyleElement, W.TableElement, W.TableRowElement, W.TableSectionElement, W.TemplateElement, W.TextAreaElement]);
    _inheritMany(W.CssStyleValue, [W.CssNumericValue, W.CssTransformValue, W.CssUnparsedValue]);
    _inherit(W.CssPerspective, W.CssTransformComponent);
    _inherit(W.CssStyleDeclaration, W._CssStyleDeclaration_Interceptor_CssStyleDeclarationBase);
    _inherit(W.CssStyleSheet, W.StyleSheet);
    _inherit(W._DomRectList_Interceptor_ListMixin_ImmutableListMixin, W._DomRectList_Interceptor_ListMixin);
    _inherit(W.DomRectList, W._DomRectList_Interceptor_ListMixin_ImmutableListMixin);
    _inherit(W._DomStringList_Interceptor_ListMixin_ImmutableListMixin, W._DomStringList_Interceptor_ListMixin);
    _inherit(W.DomStringList, W._DomStringList_Interceptor_ListMixin_ImmutableListMixin);
    _inherit(W.File, W.Blob);
    _inherit(W._FileList_Interceptor_ListMixin_ImmutableListMixin, W._FileList_Interceptor_ListMixin);
    _inherit(W.FileList, W._FileList_Interceptor_ListMixin_ImmutableListMixin);
    _inherit(W._HtmlCollection_Interceptor_ListMixin_ImmutableListMixin, W._HtmlCollection_Interceptor_ListMixin);
    _inherit(W.HtmlCollection, W._HtmlCollection_Interceptor_ListMixin_ImmutableListMixin);
    _inherit(W.HttpRequest, W.HttpRequestEventTarget);
    _inheritMany(W.Event, [W.UIEvent, W.PopStateEvent, W.ProgressEvent]);
    _inheritMany(W.UIEvent, [W.KeyboardEvent, W.MouseEvent, W.TouchEvent]);
    _inherit(W.MidiInputMap, W._MidiInputMap_Interceptor_MapMixin);
    _inherit(W.MidiOutputMap, W._MidiOutputMap_Interceptor_MapMixin);
    _inherit(W._MimeTypeArray_Interceptor_ListMixin_ImmutableListMixin, W._MimeTypeArray_Interceptor_ListMixin);
    _inherit(W.MimeTypeArray, W._MimeTypeArray_Interceptor_ListMixin_ImmutableListMixin);
    _inherit(W._NodeList_Interceptor_ListMixin_ImmutableListMixin, W._NodeList_Interceptor_ListMixin);
    _inherit(W.NodeList, W._NodeList_Interceptor_ListMixin_ImmutableListMixin);
    _inherit(W._PluginArray_Interceptor_ListMixin_ImmutableListMixin, W._PluginArray_Interceptor_ListMixin);
    _inherit(W.PluginArray, W._PluginArray_Interceptor_ListMixin_ImmutableListMixin);
    _inheritMany(W.MouseEvent, [W.PointerEvent0, W.WheelEvent]);
    _inherit(W.RtcStatsReport, W._RtcStatsReport_Interceptor_MapMixin);
    _inherit(W._SourceBufferList_EventTarget_ListMixin_ImmutableListMixin, W._SourceBufferList_EventTarget_ListMixin);
    _inherit(W.SourceBufferList, W._SourceBufferList_EventTarget_ListMixin_ImmutableListMixin);
    _inherit(W._SpeechGrammarList_Interceptor_ListMixin_ImmutableListMixin, W._SpeechGrammarList_Interceptor_ListMixin);
    _inherit(W.SpeechGrammarList, W._SpeechGrammarList_Interceptor_ListMixin_ImmutableListMixin);
    _inherit(W.Storage, W._Storage_Interceptor_MapMixin);
    _inherit(W._TextTrackCueList_Interceptor_ListMixin_ImmutableListMixin, W._TextTrackCueList_Interceptor_ListMixin);
    _inherit(W.TextTrackCueList, W._TextTrackCueList_Interceptor_ListMixin_ImmutableListMixin);
    _inherit(W._TextTrackList_EventTarget_ListMixin_ImmutableListMixin, W._TextTrackList_EventTarget_ListMixin);
    _inherit(W.TextTrackList, W._TextTrackList_EventTarget_ListMixin_ImmutableListMixin);
    _inherit(W._TouchList_Interceptor_ListMixin_ImmutableListMixin, W._TouchList_Interceptor_ListMixin);
    _inherit(W.TouchList, W._TouchList_Interceptor_ListMixin_ImmutableListMixin);
    _inherit(W.__CssRuleList_Interceptor_ListMixin_ImmutableListMixin, W.__CssRuleList_Interceptor_ListMixin);
    _inherit(W._CssRuleList, W.__CssRuleList_Interceptor_ListMixin_ImmutableListMixin);
    _inherit(W._DomRect, W.DomRectReadOnly);
    _inherit(W.__GamepadList_Interceptor_ListMixin_ImmutableListMixin, W.__GamepadList_Interceptor_ListMixin);
    _inherit(W._GamepadList, W.__GamepadList_Interceptor_ListMixin_ImmutableListMixin);
    _inherit(W.__NamedNodeMap_Interceptor_ListMixin_ImmutableListMixin, W.__NamedNodeMap_Interceptor_ListMixin);
    _inherit(W._NamedNodeMap, W.__NamedNodeMap_Interceptor_ListMixin_ImmutableListMixin);
    _inherit(W.__SpeechRecognitionResultList_Interceptor_ListMixin_ImmutableListMixin, W.__SpeechRecognitionResultList_Interceptor_ListMixin);
    _inherit(W._SpeechRecognitionResultList, W.__SpeechRecognitionResultList_Interceptor_ListMixin_ImmutableListMixin);
    _inherit(W.__StyleSheetList_Interceptor_ListMixin_ImmutableListMixin, W.__StyleSheetList_Interceptor_ListMixin);
    _inherit(W._StyleSheetList, W.__StyleSheetList_Interceptor_ListMixin_ImmutableListMixin);
    _inherit(W._ElementAttributeMap, W._AttributeMap);
    _inherit(W._ElementEventStreamImpl, W._EventStream);
    _inherit(W._EventStreamSubscription, P.StreamSubscription);
    _inherit(W._TemplatingNodeValidator, W._SimpleNodeValidator);
    _inherit(P._StructuredCloneDart2Js, P._StructuredClone);
    _inherit(P._AcceptStructuredCloneDart2Js, P._AcceptStructuredClone);
    _inherit(P.Rectangle, P._RectangleBase);
    _inherit(P._LengthList_Interceptor_ListMixin_ImmutableListMixin, P._LengthList_Interceptor_ListMixin);
    _inherit(P.LengthList, P._LengthList_Interceptor_ListMixin_ImmutableListMixin);
    _inherit(P._NumberList_Interceptor_ListMixin_ImmutableListMixin, P._NumberList_Interceptor_ListMixin);
    _inherit(P.NumberList, P._NumberList_Interceptor_ListMixin_ImmutableListMixin);
    _inherit(P.ScriptElement, P.SvgElement);
    _inherit(P._StringList_Interceptor_ListMixin_ImmutableListMixin, P._StringList_Interceptor_ListMixin);
    _inherit(P.StringList, P._StringList_Interceptor_ListMixin_ImmutableListMixin);
    _inherit(P._TransformList_Interceptor_ListMixin_ImmutableListMixin, P._TransformList_Interceptor_ListMixin);
    _inherit(P.TransformList, P._TransformList_Interceptor_ListMixin_ImmutableListMixin);
    _inherit(P.AudioParamMap, P._AudioParamMap_Interceptor_MapMixin);
    _inherit(P.OfflineAudioContext, P.BaseAudioContext);
    _inherit(P._SqlResultSetRowList_Interceptor_ListMixin_ImmutableListMixin, P._SqlResultSetRowList_Interceptor_ListMixin);
    _inherit(P.SqlResultSetRowList, P._SqlResultSetRowList_Interceptor_ListMixin_ImmutableListMixin);
    _inheritMany(Y.Diagnosticable, [Y.DiagnosticableTree, N.State, Z.Decoration, K.CupertinoThemeData, F.PointerEvent, V.AppBarTheme, D.BottomAppBarTheme, M.ButtonThemeData, A.CardTheme, K.ChipThemeData, A.ColorScheme, Y.DialogTheme, L.InputDecorationTheme, K.PageTransitionsTheme, Q.SliderThemeData, U.TabBarTheme, R.TextTheme, X.ThemeData, U.Typography, L.ImageStreamCompleter, A.TextStyle0, G.SliverGeometry, A.SemanticsData, A.SemanticsSortKey, T.IconThemeData]);
    _inheritMany(Y.DiagnosticableTree, [N.Element, N.Widget, Q.TextSpan, A.SemanticsProperties]);
    _inheritMany(N.Element, [N.ComponentElement, N.RenderObjectElement]);
    _inheritMany(N.ComponentElement, [N.StatefulElement, N.StatelessElement, N.ProxyElement]);
    _inherit(N.HookElement, N.StatefulElement);
    _inheritMany(N.Widget, [N.StatefulWidget, N.StatelessWidget, N.ProxyWidget, N.RenderObjectWidget]);
    _inheritMany(N.StatefulWidget, [N.HookWidget, D._CupertinoBackGestureDetector, S.MaterialApp, Z.RawMaterialButton, Z.DrawerController, R.InkResponse, M.Material, G.ImplicitlyAnimatedWidget, M._FloatingActionButtonTransition, M.Scaffold, M._PersistentBottomSheet, S.WidgetsApp, B.FutureBuilder, L.AutomaticKeepAlive, L.FocusScope, D.RawGestureDetector, T.Hero, L.Localizations, K.Navigator, X._OverlayEntry, X.Overlay, L.GlowingOverscrollIndicator, D.PageView, T._ModalScope, F.Scrollable0, K.AnimatedWidget]);
    _inheritMany(N.State, [N._HookWidgetState, D._CupertinoBackGestureDetectorState, S._MaterialAppState, Z._RawMaterialButtonState, Z._DrawerControllerState_State_SingleTickerProviderStateMixin, R.__InkResponseState_State_AutomaticKeepAliveClientMixin, M.__MaterialState_State_TickerProviderStateMixin, G._ImplicitlyAnimatedWidgetState_State_SingleTickerProviderStateMixin, M.__FloatingActionButtonTransitionState_State_TickerProviderStateMixin, M._ScaffoldState_State_TickerProviderStateMixin, S._WidgetsAppState, B._FutureBuilderState, L._AutomaticKeepAliveState, L._FocusScopeState, D.RawGestureDetectorState, T._HeroState, L._LocalizationsState, K._NavigatorState_State_TickerProviderStateMixin, X._OverlayEntryState, X._OverlayState_State_TickerProviderStateMixin, L.__GlowingOverscrollIndicatorState_State_TickerProviderStateMixin, D._PageViewState, T._ModalScopeState, F._ScrollableState_State_TickerProviderStateMixin, K._AnimatedState]);
    _inherit(N.HookBuilder, N.HookWidget);
    _inheritMany(N.Hook, [E._AnimationControllerHook, E._SingleTickerProviderHook, E._StreamHook, E._PageControllerHook, E._ScrollControllerHook, E._TrackingScrollControllerHook, E._ListenableHook, E._MemoizedHook, E._EffectHook]);
    _inheritMany(N.HookState, [E._AnimationControllerHookState, E._TickerProviderHookState, E._StreamHookState, E._PageControllerHookState, E._ScrollControllerHookState, E._TrackingScrollControllerHookState, E._ListenableStateHook, E._MemoizedHookState, E._EffectHookState]);
    _inheritMany(B.Listenable, [V.CustomPainter, X.Animation, B.ChangeNotifier]);
    _inheritMany(V.CustomPainter, [F.LP, M._ShapeBorderPainter, L._GlowingOverscrollIndicatorPainter]);
    _inherit(X.FlutterPathProxy, T.PathProxy);
    _inheritMany(X.Animation, [G._AnimationController_Animation_AnimationEagerListenerMixin, S._AlwaysCompleteAnimation, S._AlwaysDismissedAnimation, S._ProxyAnimation_Animation_AnimationLazyListenerMixin, S._ReverseAnimation_Animation_AnimationLazyListenerMixin, S._CurvedAnimation_Animation_AnimationWithParentMixin, S._TrainHoppingAnimation_Animation_AnimationEagerListenerMixin, S._CompoundAnimation_Animation_AnimationLazyListenerMixin, R.__AnimatedEvaluation_Animation_AnimationWithParentMixin]);
    _inherit(G._AnimationController_Animation_AnimationEagerListenerMixin_AnimationLocalListenersMixin, G._AnimationController_Animation_AnimationEagerListenerMixin);
    _inherit(G._AnimationController_Animation_AnimationEagerListenerMixin_AnimationLocalListenersMixin_AnimationLocalStatusListenersMixin, G._AnimationController_Animation_AnimationEagerListenerMixin_AnimationLocalListenersMixin);
    _inherit(G.AnimationController, G._AnimationController_Animation_AnimationEagerListenerMixin_AnimationLocalListenersMixin_AnimationLocalStatusListenersMixin);
    _inheritMany(T.Simulation, [G._InterpolationSimulation, G._RepeatingSimulation, D.FrictionSimulation, M.SpringSimulation, Y.BouncingScrollSimulation, Y.ClampingScrollSimulation]);
    _inherit(S._ProxyAnimation_Animation_AnimationLazyListenerMixin_AnimationLocalListenersMixin, S._ProxyAnimation_Animation_AnimationLazyListenerMixin);
    _inherit(S._ProxyAnimation_Animation_AnimationLazyListenerMixin_AnimationLocalListenersMixin_AnimationLocalStatusListenersMixin, S._ProxyAnimation_Animation_AnimationLazyListenerMixin_AnimationLocalListenersMixin);
    _inherit(S.ProxyAnimation, S._ProxyAnimation_Animation_AnimationLazyListenerMixin_AnimationLocalListenersMixin_AnimationLocalStatusListenersMixin);
    _inherit(S._ReverseAnimation_Animation_AnimationLazyListenerMixin_AnimationLocalStatusListenersMixin, S._ReverseAnimation_Animation_AnimationLazyListenerMixin);
    _inherit(S.ReverseAnimation, S._ReverseAnimation_Animation_AnimationLazyListenerMixin_AnimationLocalStatusListenersMixin);
    _inherit(S.CurvedAnimation, S._CurvedAnimation_Animation_AnimationWithParentMixin);
    _inherit(S._TrainHoppingAnimation_Animation_AnimationEagerListenerMixin_AnimationLocalListenersMixin, S._TrainHoppingAnimation_Animation_AnimationEagerListenerMixin);
    _inherit(S._TrainHoppingAnimation_Animation_AnimationEagerListenerMixin_AnimationLocalListenersMixin_AnimationLocalStatusListenersMixin, S._TrainHoppingAnimation_Animation_AnimationEagerListenerMixin_AnimationLocalListenersMixin);
    _inherit(S.TrainHoppingAnimation, S._TrainHoppingAnimation_Animation_AnimationEagerListenerMixin_AnimationLocalListenersMixin_AnimationLocalStatusListenersMixin);
    _inherit(S._CompoundAnimation_Animation_AnimationLazyListenerMixin_AnimationLocalListenersMixin, S._CompoundAnimation_Animation_AnimationLazyListenerMixin);
    _inherit(S._CompoundAnimation_Animation_AnimationLazyListenerMixin_AnimationLocalListenersMixin_AnimationLocalStatusListenersMixin, S._CompoundAnimation_Animation_AnimationLazyListenerMixin_AnimationLocalListenersMixin);
    _inherit(S.CompoundAnimation, S._CompoundAnimation_Animation_AnimationLazyListenerMixin_AnimationLocalListenersMixin_AnimationLocalStatusListenersMixin);
    _inheritMany(S.CompoundAnimation, [S.AnimationMin, A._AnimationSwap]);
    _inheritMany(Z.Curve, [Z._Linear, Z.Interval, Z.Threshold, Z.Cubic, Z.FlippedCurve, Z._DecelerateCurve]);
    _inherit(R._AnimatedEvaluation, R.__AnimatedEvaluation_Animation_AnimationWithParentMixin);
    _inheritMany(R.Animatable, [R._ChainedEvaluation, R.Tween, R.CurveTween]);
    _inheritMany(R.Tween, [R.ReverseTween, R.ColorTween, R.RectTween, R.IntTween, D.MaterialPointArcTween, M.ShapeBorderTween, K.ThemeDataTween, G.DecorationTween, G.BorderRadiusTween, G.TextStyleTween]);
    _inheritMany(L.LocalizationsDelegate, [L._CupertinoLocalizationsDelegate, U._MaterialLocalizationsDelegate, L._WidgetsLocalizationsDelegate]);
    _inheritMany(N.StatelessWidget, [D.CupertinoPageTransition, E.FloatingActionButton, B.IconButton, M._ShapeBorderPaint, K._FadeUpwardsPageTransition, N.SnackBar, K.Theme, T.PositionedDirectional, T.KeyedSubtree, T.Builder, M.Container, D.GestureDetector, L.Icon, X.ModalBarrier, U.NotificationListener, S.PageStorage, B.ScrollView, R.Spacer, L.Text, U.Title]);
    _inheritMany(Z.Decoration, [D._CupertinoEdgeShadowDecoration, S.BoxDecoration]);
    _inheritMany(Z.BoxPainter, [D._CupertinoEdgeShadowPainter, S._BoxDecorationPainter]);
    _inheritMany(N.ProxyWidget, [N.InheritedWidget, N.ParentDataWidget]);
    _inheritMany(N.InheritedWidget, [K.CupertinoTheme, M._ScaffoldScope, K._InheritedTheme, T.Directionality, T.DefaultAssetBundle, L._FocusScopeMarker, Y.IconTheme, L._LocalizationsScope, F.MediaQuery, E.PrimaryScrollController, T._ModalScopeStatus, K.ScrollConfiguration, F._ScrollableScope, L.DefaultTextStyle, U.TickerMode]);
    _inheritMany(B.ChangeNotifier, [B._MergingListenable, B.ValueNotifier, M._ScaffoldGeometryNotifier, N.ViewportOffset, A.SemanticsOwner, L.KeepAliveHandle, L._GlowController, F.ScrollController]);
    _inheritMany(Y.DiagnosticsNode, [Y.DiagnosticsProperty, Y.DiagnosticableNode]);
    _inheritMany(Y.DiagnosticableNode, [Y._DiagnosticableTreeNode, A._SemanticsDiagnosticableNode]);
    _inheritMany(D.Key, [D.LocalKey, N.GlobalKey]);
    _inheritMany(D.LocalKey, [D.ValueKey, N.UniqueKey]);
    _inherit(F.LicenseEntryWithLineBreaks, F.LicenseEntry);
    _inheritMany(U.FlutterErrorDetails, [N.FlutterErrorDetailsForPointerEventDispatcher, O.FlutterErrorDetailsForPointerRouter, K.FlutterErrorDetailsForRendering]);
    _inheritMany(F.PointerEvent, [F.PointerAddedEvent, F.PointerRemovedEvent, F.PointerHoverEvent, F.PointerEnterEvent, F.PointerExitEvent, F.PointerDownEvent, F.PointerMoveEvent, F.PointerUpEvent, F.PointerSignalEvent, F.PointerCancelEvent]);
    _inherit(F.PointerScrollEvent, F.PointerSignalEvent);
    _inherit(S._GestureRecognizer_GestureArenaMember_DiagnosticableTreeMixin, D.GestureArenaMember);
    _inherit(S.GestureRecognizer, S._GestureRecognizer_GestureArenaMember_DiagnosticableTreeMixin);
    _inheritMany(S.GestureRecognizer, [S.OneSequenceGestureRecognizer, F.DoubleTapGestureRecognizer]);
    _inheritMany(S.OneSequenceGestureRecognizer, [S.PrimaryPointerGestureRecognizer, O.DragGestureRecognizer]);
    _inheritMany(S.PrimaryPointerGestureRecognizer, [T.LongPressGestureRecognizer, N.TapGestureRecognizer]);
    _inheritMany(O.DragGestureRecognizer, [O.VerticalDragGestureRecognizer, O.HorizontalDragGestureRecognizer, O.PanGestureRecognizer]);
    _inherit(S._MaterialScrollBehavior, K.ScrollBehavior);
    _inherit(D.MaterialRectArcTween, R.RectTween);
    _inheritMany(N.RenderObjectWidget, [N.SingleChildRenderObjectWidget, N.MultiChildRenderObjectWidget, N.LeafRenderObjectWidget, N.RenderObjectToWidgetAdapter, A.LayoutBuilder, X._Theatre, G.SliverWithKeepAliveWidget]);
    _inheritMany(N.SingleChildRenderObjectWidget, [Z._InputPadding, M._InkFeatures, T.Opacity, T.CustomPaint, T.ClipPath, T.PhysicalModel, T.PhysicalShape, T.Transform0, T.FractionalTranslation, T.Padding, T.Align, T.SizedBox, T.ConstrainedBox, T.LimitedBox, T.Offstage, T.SliverPadding, T.Listener, T.RepaintBoundary, T.IgnorePointer, T.AbsorbPointer, T.Semantics, T.BlockSemantics, T.ExcludeSemantics, T.IndexedSemantics, M.DecoratedBox, D._GestureSemantics, F._ScrollSemantics, K.FadeTransition]);
    _inheritMany(B.AbstractNode, [K._RenderObject_AbstractNode_DiagnosticableTreeMixin, T._Layer_AbstractNode_DiagnosticableTreeMixin, A._SemanticsNode_AbstractNode_DiagnosticableTreeMixin]);
    _inherit(K.RenderObject, K._RenderObject_AbstractNode_DiagnosticableTreeMixin);
    _inheritMany(K.RenderObject, [S.RenderBox, G.RenderSliver, A._RenderView_RenderObject_RenderObjectWithChildMixin]);
    _inheritMany(S.RenderBox, [T._RenderShiftedBox_RenderBox_RenderObjectWithChildMixin, E._RenderProxyBox_RenderBox_RenderObjectWithChildMixin, B._RenderCustomMultiChildLayoutBox_RenderBox_ContainerRenderObjectMixin, V.RenderErrorBox, F._RenderFlex_RenderBox_ContainerRenderObjectMixin, Q.RenderParagraph, L.RenderPerformanceOverlay, K._RenderStack_RenderBox_ContainerRenderObjectMixin, Q._RenderViewportBase_RenderBox_ContainerRenderObjectMixin, A.__RenderLayoutBuilder_RenderBox_RenderObjectWithChildMixin, X.__RenderTheatre_RenderBox_RenderObjectWithChildMixin]);
    _inherit(T.RenderShiftedBox, T._RenderShiftedBox_RenderBox_RenderObjectWithChildMixin);
    _inheritMany(T.RenderShiftedBox, [Z._RenderInputPadding, T.RenderPadding, T.RenderAligningShiftedBox]);
    _inherit(E.ColorSwatch, Q.Color);
    _inherit(E.MaterialColor, E.ColorSwatch);
    _inherit(Z.DrawerControllerState, Z._DrawerControllerState_State_SingleTickerProviderStateMixin);
    _inheritMany(A.FloatingActionButtonLocation, [A._CenterFloatFloatingActionButtonLocation, M._TransitionSnapshotFabLocation]);
    _inherit(A._ScalingFabMotionAnimator, A.FloatingActionButtonAnimator);
    _inherit(R.InteractiveInkFeature, M.InkFeature);
    _inheritMany(R.InteractiveInkFeature, [Y.InkHighlight, U.InkSplash]);
    _inherit(U._InkSplashFactory, R.InteractiveInkFeatureFactory);
    _inherit(R._InkResponseState, R.__InkResponseState_State_AutomaticKeepAliveClientMixin);
    _inherit(R.InkWell, R.InkResponse);
    _inherit(M._MaterialState, M.__MaterialState_State_TickerProviderStateMixin);
    _inherit(E._RenderProxyBox_RenderBox_RenderObjectWithChildMixin_RenderProxyBoxMixin, E._RenderProxyBox_RenderBox_RenderObjectWithChildMixin);
    _inherit(E.RenderProxyBox, E._RenderProxyBox_RenderBox_RenderObjectWithChildMixin_RenderProxyBoxMixin);
    _inheritMany(E.RenderProxyBox, [M._RenderInkFeatures, V.RenderCustomPaint, E.RenderProxyBoxWithHitTestBehavior, E.RenderConstrainedBox, E.RenderLimitedBox, E.RenderOpacity, E.RenderAnimatedOpacity, E._RenderCustomClip, E.RenderDecoratedBox, E.RenderTransform, E.RenderFractionalTranslation, E.RenderRepaintBoundary, E.RenderIgnorePointer, E.RenderOffstage, E.RenderAbsorbPointer, E.RenderSemanticsGestureHandler, E.RenderSemanticsAnnotations, E.RenderBlockSemantics, E.RenderExcludeSemantics, E.RenderIndexedSemantics, F._RenderScrollSemantics]);
    _inheritMany(G.ImplicitlyAnimatedWidget, [M._MaterialInterior, K.AnimatedTheme, G.AnimatedDefaultTextStyle, G.AnimatedPhysicalModel]);
    _inherit(G.ImplicitlyAnimatedWidgetState, G._ImplicitlyAnimatedWidgetState_State_SingleTickerProviderStateMixin);
    _inherit(G.AnimatedWidgetBaseState, G.ImplicitlyAnimatedWidgetState);
    _inheritMany(G.AnimatedWidgetBaseState, [M._MaterialInteriorState, K._AnimatedThemeState, G._AnimatedDefaultTextStyleState, G._AnimatedPhysicalModelState]);
    _inherit(T.OverlayRoute, K.Route);
    _inherit(T.TransitionRoute, T.OverlayRoute);
    _inherit(T._ModalRoute_TransitionRoute_LocalHistoryRoute, T.TransitionRoute);
    _inherit(T.ModalRoute, T._ModalRoute_TransitionRoute_LocalHistoryRoute);
    _inherit(V.PageRoute, T.ModalRoute);
    _inheritMany(V.PageRoute, [V.MaterialPageRoute, V.PageRouteBuilder]);
    _inheritMany(K.PageTransitionsBuilder, [K.FadeUpwardsPageTransitionsBuilder, K.CupertinoPageTransitionsBuilder]);
    _inherit(M._ScaffoldLayout, B.MultiChildLayoutDelegate);
    _inherit(M._FloatingActionButtonTransitionState, M.__FloatingActionButtonTransitionState_State_TickerProviderStateMixin);
    _inherit(M.ScaffoldState, M._ScaffoldState_State_TickerProviderStateMixin);
    _inheritMany(Q.SliderComponentShape, [Q.RoundSliderThumbShape, Q.PaddleSliderValueIndicatorShape]);
    _inherit(X.MaterialBasedCupertinoThemeData, K.CupertinoThemeData);
    _inheritMany(K.AlignmentGeometry, [K.Alignment, K.AlignmentDirectional, K._MixedAlignment]);
    _inheritMany(K.BorderRadiusGeometry, [K.BorderRadius, K._MixedBorderRadius]);
    _inheritMany(Y.ShapeBorder, [Y._CompoundBorder, F.BoxBorder, X.CircleBorder, X.RoundedRectangleBorder, X._RoundedRectangleToCircleBorder, S.StadiumBorder, S._StadiumToCircleBorder, S._StadiumToRoundedRectangleBorder]);
    _inheritMany(F.BoxBorder, [F.Border, F.BorderDirectional]);
    _inheritMany(V.EdgeInsetsGeometry, [V.EdgeInsets, V.EdgeInsetsDirectional, V._MixedEdgeInsets]);
    _inherit(T.LinearGradient, T.Gradient);
    _inherit(M.ScrollSpringSimulation, M.SpringSimulation);
    _inheritMany(K.Constraints, [S.BoxConstraints, G.SliverConstraints]);
    _inheritMany(O.HitTestEntry, [S.BoxHitTestEntry, G.SliverHitTestEntry]);
    _inheritMany(K.ParentData, [S.BoxParentData, G.SliverLogicalParentData, G.SliverPhysicalParentData]);
    _inherit(S._ContainerBoxParentData_BoxParentData_ContainerParentDataMixin, S.BoxParentData);
    _inherit(S.ContainerBoxParentData, S._ContainerBoxParentData_BoxParentData_ContainerParentDataMixin);
    _inheritMany(S.ContainerBoxParentData, [B.MultiChildLayoutParentData, F.FlexParentData, K.StackParentData]);
    _inherit(B._RenderCustomMultiChildLayoutBox_RenderBox_ContainerRenderObjectMixin_RenderBoxContainerDefaultsMixin, B._RenderCustomMultiChildLayoutBox_RenderBox_ContainerRenderObjectMixin);
    _inherit(B.RenderCustomMultiChildLayoutBox, B._RenderCustomMultiChildLayoutBox_RenderBox_ContainerRenderObjectMixin_RenderBoxContainerDefaultsMixin);
    _inherit(F._RenderFlex_RenderBox_ContainerRenderObjectMixin_RenderBoxContainerDefaultsMixin, F._RenderFlex_RenderBox_ContainerRenderObjectMixin);
    _inherit(F._RenderFlex_RenderBox_ContainerRenderObjectMixin_RenderBoxContainerDefaultsMixin_DebugOverflowIndicatorMixin, F._RenderFlex_RenderBox_ContainerRenderObjectMixin_RenderBoxContainerDefaultsMixin);
    _inherit(F.RenderFlex, F._RenderFlex_RenderBox_ContainerRenderObjectMixin_RenderBoxContainerDefaultsMixin_DebugOverflowIndicatorMixin);
    _inherit(T.Layer, T._Layer_AbstractNode_DiagnosticableTreeMixin);
    _inheritMany(T.Layer, [T.PictureLayer, T.PerformanceOverlayLayer, T.ContainerLayer]);
    _inheritMany(T.ContainerLayer, [T.OffsetLayer, T.ClipRectLayer, T.ClipPathLayer, T.OpacityLayer, T.PhysicalModelLayer, T.AnnotatedRegionLayer]);
    _inherit(T.TransformLayer, T.OffsetLayer);
    _inherit(K.PaintingContext, Z.ClipContext);
    _inheritMany(K._SemanticsFragment, [K._ContainerSemanticsFragment, K._InterestingSemanticsFragment]);
    _inheritMany(K._InterestingSemanticsFragment, [K._RootSemanticsFragment, K._SwitchableSemanticsFragment, K._AbortingSemanticsFragment]);
    _inherit(E.ShapeBorderClipper, E.CustomClipper);
    _inheritMany(E._RenderCustomClip, [E.RenderClipPath, E._RenderPhysicalModelBase]);
    _inheritMany(E._RenderPhysicalModelBase, [E.RenderPhysicalModel, E.RenderPhysicalShape]);
    _inherit(E.RenderPointerListener, E.RenderProxyBoxWithHitTestBehavior);
    _inherit(T.RenderPositionedBox, T.RenderAligningShiftedBox);
    _inherit(G._SliverPhysicalContainerParentData_SliverPhysicalParentData_ContainerParentDataMixin, G.SliverPhysicalParentData);
    _inherit(G.SliverPhysicalContainerParentData, G._SliverPhysicalContainerParentData_SliverPhysicalParentData_ContainerParentDataMixin);
    _inheritMany(G.RenderSliver, [F._RenderSliverMultiBoxAdaptor_RenderSliver_ContainerRenderObjectMixin, T._RenderSliverPadding_RenderSliver_RenderObjectWithChildMixin]);
    _inherit(F._RenderSliverMultiBoxAdaptor_RenderSliver_ContainerRenderObjectMixin_RenderSliverHelpers, F._RenderSliverMultiBoxAdaptor_RenderSliver_ContainerRenderObjectMixin);
    _inherit(F._RenderSliverMultiBoxAdaptor_RenderSliver_ContainerRenderObjectMixin_RenderSliverHelpers_RenderSliverWithKeepAliveMixin, F._RenderSliverMultiBoxAdaptor_RenderSliver_ContainerRenderObjectMixin_RenderSliverHelpers);
    _inherit(F.RenderSliverMultiBoxAdaptor, F._RenderSliverMultiBoxAdaptor_RenderSliver_ContainerRenderObjectMixin_RenderSliverHelpers_RenderSliverWithKeepAliveMixin);
    _inheritMany(F.RenderSliverMultiBoxAdaptor, [X.RenderSliverFixedExtentBoxAdaptor, U.RenderSliverList]);
    _inherit(A.RenderSliverFillViewport, X.RenderSliverFixedExtentBoxAdaptor);
    _inherit(F._SliverMultiBoxAdaptorParentData_SliverLogicalParentData_ContainerParentDataMixin, G.SliverLogicalParentData);
    _inherit(F._SliverMultiBoxAdaptorParentData_SliverLogicalParentData_ContainerParentDataMixin_KeepAliveParentDataMixin, F._SliverMultiBoxAdaptorParentData_SliverLogicalParentData_ContainerParentDataMixin);
    _inherit(F.SliverMultiBoxAdaptorParentData, F._SliverMultiBoxAdaptorParentData_SliverLogicalParentData_ContainerParentDataMixin_KeepAliveParentDataMixin);
    _inherit(T.RenderSliverPadding, T._RenderSliverPadding_RenderSliver_RenderObjectWithChildMixin);
    _inherit(K._RenderStack_RenderBox_ContainerRenderObjectMixin_RenderBoxContainerDefaultsMixin, K._RenderStack_RenderBox_ContainerRenderObjectMixin);
    _inherit(K.RenderStack, K._RenderStack_RenderBox_ContainerRenderObjectMixin_RenderBoxContainerDefaultsMixin);
    _inherit(A.RenderView, A._RenderView_RenderObject_RenderObjectWithChildMixin);
    _inherit(Q.RenderViewportBase, Q._RenderViewportBase_RenderBox_ContainerRenderObjectMixin);
    _inherit(Q.RenderViewport, Q.RenderViewportBase);
    _inherit(A.SemanticsNode, A._SemanticsNode_AbstractNode_DiagnosticableTreeMixin);
    _inherit(A._SemanticsSortGroup, P.Comparable);
    _inherit(A.OrdinalSortKey, A.SemanticsSortKey);
    _inherit(E.TapSemanticEvent, E.SemanticsEvent);
    _inherit(Q.CachingAssetBundle, Q.AssetBundle);
    _inherit(Q.PlatformAssetBundle, Q.CachingAssetBundle);
    _inherit(A.OptionalMethodChannel, A.MethodChannel);
    _inherit(X.TextSelection, X.TextRange);
    _inheritMany(U.Notification0, [L.KeepAliveNotification, U.LayoutChangedNotification, L._OverscrollIndicatorNotification_Notification_ViewportNotificationMixin]);
    _inherit(T.Center, T.Align);
    _inheritMany(N.ParentDataWidget, [T.LayoutId, T.Positioned, T.Flexible, G.KeepAlive]);
    _inheritMany(N.MultiChildRenderObjectWidget, [T.CustomMultiChildLayout, T.Stack, T.Flex, Q.Viewport]);
    _inheritMany(N.RenderObjectElement, [N.SingleChildRenderObjectElement, N.RootRenderObjectElement, N.LeafRenderObjectElement, N.MultiChildRenderObjectElement, A._LayoutBuilderElement, X._TheatreElement, G.SliverMultiBoxAdaptorElement]);
    _inherit(T._OffstageElement, N.SingleChildRenderObjectElement);
    _inherit(T.Expanded, T.Flexible);
    _inheritMany(N.LeafRenderObjectWidget, [T.RichText, N.ErrorWidget, L.PerformanceOverlay]);
    _inherit(N.RenderObjectToWidgetElement, N.RootRenderObjectElement);
    _inherit(N._WidgetsFlutterBinding_BindingBase_GestureBinding, N.BindingBase);
    _inherit(N._WidgetsFlutterBinding_BindingBase_GestureBinding_ServicesBinding, N._WidgetsFlutterBinding_BindingBase_GestureBinding);
    _inherit(N._WidgetsFlutterBinding_BindingBase_GestureBinding_ServicesBinding_SchedulerBinding, N._WidgetsFlutterBinding_BindingBase_GestureBinding_ServicesBinding);
    _inherit(N._WidgetsFlutterBinding_BindingBase_GestureBinding_ServicesBinding_SchedulerBinding_PaintingBinding, N._WidgetsFlutterBinding_BindingBase_GestureBinding_ServicesBinding_SchedulerBinding);
    _inherit(N._WidgetsFlutterBinding_BindingBase_GestureBinding_ServicesBinding_SchedulerBinding_PaintingBinding_SemanticsBinding, N._WidgetsFlutterBinding_BindingBase_GestureBinding_ServicesBinding_SchedulerBinding_PaintingBinding);
    _inherit(N._WidgetsFlutterBinding_BindingBase_GestureBinding_ServicesBinding_SchedulerBinding_PaintingBinding_SemanticsBinding_RendererBinding, N._WidgetsFlutterBinding_BindingBase_GestureBinding_ServicesBinding_SchedulerBinding_PaintingBinding_SemanticsBinding);
    _inherit(N._WidgetsFlutterBinding_BindingBase_GestureBinding_ServicesBinding_SchedulerBinding_PaintingBinding_SemanticsBinding_RendererBinding_WidgetsBinding, N._WidgetsFlutterBinding_BindingBase_GestureBinding_ServicesBinding_SchedulerBinding_PaintingBinding_SemanticsBinding_RendererBinding);
    _inherit(N.WidgetsFlutterBinding, N._WidgetsFlutterBinding_BindingBase_GestureBinding_ServicesBinding_SchedulerBinding_PaintingBinding_SemanticsBinding_RendererBinding_WidgetsBinding);
    _inherit(O.FocusScopeNode, O._FocusScopeNode_Object_DiagnosticableTreeMixin);
    _inheritMany(N.GlobalKey, [N.LabeledGlobalKey, N.GlobalObjectKey]);
    _inheritMany(N.ProxyElement, [N.ParentDataElement, N.InheritedElement]);
    _inherit(D.GestureRecognizerFactoryWithHandlers, D.GestureRecognizerFactory);
    _inheritMany(K.NavigatorObserver, [T.HeroController, K.WebOnlyNavigatorObserver]);
    _inherit(A._RenderLayoutBuilder, A.__RenderLayoutBuilder_RenderBox_RenderObjectWithChildMixin);
    _inherit(K.NavigatorState, K._NavigatorState_State_TickerProviderStateMixin);
    _inherit(X.OverlayState, X._OverlayState_State_TickerProviderStateMixin);
    _inherit(X.__RenderTheatre_RenderBox_RenderObjectWithChildMixin_RenderProxyBoxMixin, X.__RenderTheatre_RenderBox_RenderObjectWithChildMixin);
    _inherit(X.__RenderTheatre_RenderBox_RenderObjectWithChildMixin_RenderProxyBoxMixin_ContainerRenderObjectMixin, X.__RenderTheatre_RenderBox_RenderObjectWithChildMixin_RenderProxyBoxMixin);
    _inherit(X._RenderTheatre, X.__RenderTheatre_RenderBox_RenderObjectWithChildMixin_RenderProxyBoxMixin_ContainerRenderObjectMixin);
    _inherit(L._GlowingOverscrollIndicatorState, L.__GlowingOverscrollIndicatorState_State_TickerProviderStateMixin);
    _inherit(L.OverscrollIndicatorNotification, L._OverscrollIndicatorNotification_Notification_ViewportNotificationMixin);
    _inherit(S.PageStorageKey, D.ValueKey);
    _inheritMany(F.ScrollController, [D.PageController, F.TrackingScrollController]);
    _inherit(M.FixedScrollMetrics, M.ScrollMetrics);
    _inherit(D.PageMetrics, M.FixedScrollMetrics);
    _inherit(A._ScrollPosition_ViewportOffset_ScrollMetrics, N.ViewportOffset);
    _inherit(A.ScrollPosition, A._ScrollPosition_ViewportOffset_ScrollMetrics);
    _inherit(R.ScrollPositionWithSingleContext, A.ScrollPosition);
    _inherit(D._PagePosition, R.ScrollPositionWithSingleContext);
    _inheritMany(L.ScrollPhysics, [D.PageScrollPhysics, L.BouncingScrollPhysics, L.ClampingScrollPhysics, L.AlwaysScrollableScrollPhysics]);
    _inheritMany(M.ScrollActivity, [M.IdleScrollActivity, M.HoldScrollActivity, M.DragScrollActivity, M.BallisticScrollActivity, M.DrivenScrollActivity]);
    _inherit(G.ScrollNotification, U.LayoutChangedNotification);
    _inheritMany(G.ScrollNotification, [G.ScrollStartNotification, G.ScrollUpdateNotification, G.OverscrollNotification, G.ScrollEndNotification, G.UserScrollNotification]);
    _inherit(B.BoxScrollView, B.ScrollView);
    _inherit(B.ListView, B.BoxScrollView);
    _inherit(F.ScrollableState, F._ScrollableState_State_TickerProviderStateMixin);
    _inherit(G.SliverChildBuilderDelegate, G.SliverChildDelegate);
    _inherit(G.SliverMultiBoxAdaptorWidget, G.SliverWithKeepAliveWidget);
    _inheritMany(G.SliverMultiBoxAdaptorWidget, [G.SliverList, G.SliverFillViewport]);
    _inherit(U._WidgetTicker, M.Ticker);
    _inheritMany(K.AnimatedWidget, [K.SlideTransition, K.ScaleTransition, K.RotationTransition, K.DecoratedBoxTransition, K.AnimatedBuilder]);
    _inherit(Q._ViewportElement, N.MultiChildRenderObjectElement);
    _inheritMany(T.EngineCanvas, [T._BitmapCanvas_EngineCanvas_SaveStackTracking, T._DomCanvas_EngineCanvas_SaveElementStackTracking]);
    _inherit(T.BitmapCanvas, T._BitmapCanvas_EngineCanvas_SaveStackTracking);
    _inherit(T.DomCanvas, T._DomCanvas_EngineCanvas_SaveElementStackTracking);
    _inheritMany(T.BaseAdapter, [T.PointerAdapter, T.TouchAdapter, T.MouseAdapter]);
    _inheritMany(T.PaintCommand, [T.PaintSave, T.PaintRestore, T.PaintTranslate, T.PaintScale, T.PaintRotate, T.PaintTransform, T.PaintClipRect, T.PaintClipRRect, T.PaintClipPath, T.PaintDrawRect, T.PaintDrawRRect, T.PaintDrawDRRect, T.PaintDrawCircle, T.PaintDrawPath, T.PaintDrawShadow, T.PaintDrawParagraph]);
    _inheritMany(T.PathCommand, [T.MoveTo, T.LineTo, T.Ellipse, T.BezierCurveTo, T.RectCommand, T.RRectCommand, T.CloseCommand]);
    _inheritMany(T.RoleManager, [T.Checkable, T.Incrementable, T.LabelAndValue, T.Scrollable, T.Tappable, T.TextField]);
    _inherit(T._PolyfillFontManager, T._FontManager);
    _inherit(T.PersistentTextEditingElement, T.TextEditingElement);
    _inherit(Q.HashLocationStrategy, Q.LocationStrategy);
    _inherit(Q.BrowserPlatformLocation, Q.PlatformLocation);
    _inherit(Q.RawRecordingCanvas, T.BitmapCanvas);
    _inheritMany(Q.PersistedSurface, [Q.PersistedLeafSurface, Q.PersistedContainerSurface]);
    _inheritMany(Q.PersistedContainerSurface, [Q.PersistedScene, Q.PersistedTransform, Q.PersistedOffset, Q._PersistedClipRect_PersistedContainerSurface__DomClip, Q.PersistedOpacity, Q._PersistedClipPath, Q._PersistedPhysicalShape_PersistedContainerSurface__DomClip]);
    _inherit(Q.PersistedClipRect, Q._PersistedClipRect_PersistedContainerSurface__DomClip);
    _inherit(Q.PersistedPicture, Q.PersistedLeafSurface);
    _inherit(Q.PersistedStandardPicture, Q.PersistedPicture);
    _inherit(Q.PersistedPhysicalShape, Q._PersistedPhysicalShape_PersistedContainerSurface__DomClip);
    _inheritMany(Q.OffsetBase, [Q.Offset, Q.Size]);
    _inherit(Q.Gradient0, Q.Shader);
    _inherit(Q._GradientLinear, Q.Gradient0);
    _inherit(N._IntBuffer, N._TypedDataBuffer);
    _inherit(N.Uint8Buffer, N._IntBuffer);
    _mixin(H.UnmodifiableListBase, H.UnmodifiableListMixin);
    _mixin(H.__CastListBase__CastIterableBase_ListMixin, P.ListMixin);
    _mixin(H._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin, P.ListMixin);
    _mixin(H._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin, H.FixedLengthListMixin);
    _mixin(H._NativeTypedArrayOfInt_NativeTypedArray_ListMixin, P.ListMixin);
    _mixin(H._NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin, H.FixedLengthListMixin);
    _mixin(P._AsyncStreamController, P._AsyncStreamControllerDispatch);
    _mixin(P._SyncStreamController, P._SyncStreamControllerDispatch);
    _mixin(P._ListBase_Object_ListMixin, P.ListMixin);
    _mixin(P._SplayTreeMap__SplayTree_MapMixin, P.MapMixin);
    _mixin(P._UnmodifiableMapView_MapView__UnmodifiableMapMixin, P._UnmodifiableMapMixin);
    _mixin(W._CssStyleDeclaration_Interceptor_CssStyleDeclarationBase, W.CssStyleDeclarationBase);
    _mixin(W._DomRectList_Interceptor_ListMixin, P.ListMixin);
    _mixin(W._DomRectList_Interceptor_ListMixin_ImmutableListMixin, W.ImmutableListMixin);
    _mixin(W._DomStringList_Interceptor_ListMixin, P.ListMixin);
    _mixin(W._DomStringList_Interceptor_ListMixin_ImmutableListMixin, W.ImmutableListMixin);
    _mixin(W._FileList_Interceptor_ListMixin, P.ListMixin);
    _mixin(W._FileList_Interceptor_ListMixin_ImmutableListMixin, W.ImmutableListMixin);
    _mixin(W._HtmlCollection_Interceptor_ListMixin, P.ListMixin);
    _mixin(W._HtmlCollection_Interceptor_ListMixin_ImmutableListMixin, W.ImmutableListMixin);
    _mixin(W._MidiInputMap_Interceptor_MapMixin, P.MapMixin);
    _mixin(W._MidiOutputMap_Interceptor_MapMixin, P.MapMixin);
    _mixin(W._MimeTypeArray_Interceptor_ListMixin, P.ListMixin);
    _mixin(W._MimeTypeArray_Interceptor_ListMixin_ImmutableListMixin, W.ImmutableListMixin);
    _mixin(W._NodeList_Interceptor_ListMixin, P.ListMixin);
    _mixin(W._NodeList_Interceptor_ListMixin_ImmutableListMixin, W.ImmutableListMixin);
    _mixin(W._PluginArray_Interceptor_ListMixin, P.ListMixin);
    _mixin(W._PluginArray_Interceptor_ListMixin_ImmutableListMixin, W.ImmutableListMixin);
    _mixin(W._RtcStatsReport_Interceptor_MapMixin, P.MapMixin);
    _mixin(W._SourceBufferList_EventTarget_ListMixin, P.ListMixin);
    _mixin(W._SourceBufferList_EventTarget_ListMixin_ImmutableListMixin, W.ImmutableListMixin);
    _mixin(W._SpeechGrammarList_Interceptor_ListMixin, P.ListMixin);
    _mixin(W._SpeechGrammarList_Interceptor_ListMixin_ImmutableListMixin, W.ImmutableListMixin);
    _mixin(W._Storage_Interceptor_MapMixin, P.MapMixin);
    _mixin(W._TextTrackCueList_Interceptor_ListMixin, P.ListMixin);
    _mixin(W._TextTrackCueList_Interceptor_ListMixin_ImmutableListMixin, W.ImmutableListMixin);
    _mixin(W._TextTrackList_EventTarget_ListMixin, P.ListMixin);
    _mixin(W._TextTrackList_EventTarget_ListMixin_ImmutableListMixin, W.ImmutableListMixin);
    _mixin(W._TouchList_Interceptor_ListMixin, P.ListMixin);
    _mixin(W._TouchList_Interceptor_ListMixin_ImmutableListMixin, W.ImmutableListMixin);
    _mixin(W.__CssRuleList_Interceptor_ListMixin, P.ListMixin);
    _mixin(W.__CssRuleList_Interceptor_ListMixin_ImmutableListMixin, W.ImmutableListMixin);
    _mixin(W.__GamepadList_Interceptor_ListMixin, P.ListMixin);
    _mixin(W.__GamepadList_Interceptor_ListMixin_ImmutableListMixin, W.ImmutableListMixin);
    _mixin(W.__NamedNodeMap_Interceptor_ListMixin, P.ListMixin);
    _mixin(W.__NamedNodeMap_Interceptor_ListMixin_ImmutableListMixin, W.ImmutableListMixin);
    _mixin(W.__SpeechRecognitionResultList_Interceptor_ListMixin, P.ListMixin);
    _mixin(W.__SpeechRecognitionResultList_Interceptor_ListMixin_ImmutableListMixin, W.ImmutableListMixin);
    _mixin(W.__StyleSheetList_Interceptor_ListMixin, P.ListMixin);
    _mixin(W.__StyleSheetList_Interceptor_ListMixin_ImmutableListMixin, W.ImmutableListMixin);
    _mixin(P._LengthList_Interceptor_ListMixin, P.ListMixin);
    _mixin(P._LengthList_Interceptor_ListMixin_ImmutableListMixin, W.ImmutableListMixin);
    _mixin(P._NumberList_Interceptor_ListMixin, P.ListMixin);
    _mixin(P._NumberList_Interceptor_ListMixin_ImmutableListMixin, W.ImmutableListMixin);
    _mixin(P._StringList_Interceptor_ListMixin, P.ListMixin);
    _mixin(P._StringList_Interceptor_ListMixin_ImmutableListMixin, W.ImmutableListMixin);
    _mixin(P._TransformList_Interceptor_ListMixin, P.ListMixin);
    _mixin(P._TransformList_Interceptor_ListMixin_ImmutableListMixin, W.ImmutableListMixin);
    _mixin(P._AudioParamMap_Interceptor_MapMixin, P.MapMixin);
    _mixin(P._SqlResultSetRowList_Interceptor_ListMixin, P.ListMixin);
    _mixin(P._SqlResultSetRowList_Interceptor_ListMixin_ImmutableListMixin, W.ImmutableListMixin);
    _mixin(G._AnimationController_Animation_AnimationEagerListenerMixin, S.AnimationEagerListenerMixin);
    _mixin(G._AnimationController_Animation_AnimationEagerListenerMixin_AnimationLocalListenersMixin, S.AnimationLocalListenersMixin);
    _mixin(G._AnimationController_Animation_AnimationEagerListenerMixin_AnimationLocalListenersMixin_AnimationLocalStatusListenersMixin, S.AnimationLocalStatusListenersMixin);
    _mixin(S._CompoundAnimation_Animation_AnimationLazyListenerMixin, S.AnimationLazyListenerMixin);
    _mixin(S._CompoundAnimation_Animation_AnimationLazyListenerMixin_AnimationLocalListenersMixin, S.AnimationLocalListenersMixin);
    _mixin(S._CompoundAnimation_Animation_AnimationLazyListenerMixin_AnimationLocalListenersMixin_AnimationLocalStatusListenersMixin, S.AnimationLocalStatusListenersMixin);
    _mixin(S._CurvedAnimation_Animation_AnimationWithParentMixin, S.AnimationWithParentMixin);
    _mixin(S._ProxyAnimation_Animation_AnimationLazyListenerMixin, S.AnimationLazyListenerMixin);
    _mixin(S._ProxyAnimation_Animation_AnimationLazyListenerMixin_AnimationLocalListenersMixin, S.AnimationLocalListenersMixin);
    _mixin(S._ProxyAnimation_Animation_AnimationLazyListenerMixin_AnimationLocalListenersMixin_AnimationLocalStatusListenersMixin, S.AnimationLocalStatusListenersMixin);
    _mixin(S._ReverseAnimation_Animation_AnimationLazyListenerMixin, S.AnimationLazyListenerMixin);
    _mixin(S._ReverseAnimation_Animation_AnimationLazyListenerMixin_AnimationLocalStatusListenersMixin, S.AnimationLocalStatusListenersMixin);
    _mixin(S._TrainHoppingAnimation_Animation_AnimationEagerListenerMixin, S.AnimationEagerListenerMixin);
    _mixin(S._TrainHoppingAnimation_Animation_AnimationEagerListenerMixin_AnimationLocalListenersMixin, S.AnimationLocalListenersMixin);
    _mixin(S._TrainHoppingAnimation_Animation_AnimationEagerListenerMixin_AnimationLocalListenersMixin_AnimationLocalStatusListenersMixin, S.AnimationLocalStatusListenersMixin);
    _mixin(R.__AnimatedEvaluation_Animation_AnimationWithParentMixin, S.AnimationWithParentMixin);
    _mixin(S._GestureRecognizer_GestureArenaMember_DiagnosticableTreeMixin, Y.DiagnosticableTreeMixin);
    _mixin(R.__InkResponseState_State_AutomaticKeepAliveClientMixin, L.AutomaticKeepAliveClientMixin);
    _mixin(M.__MaterialState_State_TickerProviderStateMixin, U.TickerProviderStateMixin);
    _mixin(M._ScaffoldState_State_TickerProviderStateMixin, U.TickerProviderStateMixin);
    _mixin(M.__FloatingActionButtonTransitionState_State_TickerProviderStateMixin, U.TickerProviderStateMixin);
    _mixin(S._ContainerBoxParentData_BoxParentData_ContainerParentDataMixin, K.ContainerParentDataMixin);
    _mixin(B._RenderCustomMultiChildLayoutBox_RenderBox_ContainerRenderObjectMixin, K.ContainerRenderObjectMixin);
    _mixin(B._RenderCustomMultiChildLayoutBox_RenderBox_ContainerRenderObjectMixin_RenderBoxContainerDefaultsMixin, S.RenderBoxContainerDefaultsMixin);
    _mixin(F._RenderFlex_RenderBox_ContainerRenderObjectMixin, K.ContainerRenderObjectMixin);
    _mixin(F._RenderFlex_RenderBox_ContainerRenderObjectMixin_RenderBoxContainerDefaultsMixin, S.RenderBoxContainerDefaultsMixin);
    _mixin(F._RenderFlex_RenderBox_ContainerRenderObjectMixin_RenderBoxContainerDefaultsMixin_DebugOverflowIndicatorMixin, T.DebugOverflowIndicatorMixin);
    _mixin(T._Layer_AbstractNode_DiagnosticableTreeMixin, Y.DiagnosticableTreeMixin);
    _mixin(K._RenderObject_AbstractNode_DiagnosticableTreeMixin, Y.DiagnosticableTreeMixin);
    _mixin(E._RenderProxyBox_RenderBox_RenderObjectWithChildMixin, K.RenderObjectWithChildMixin);
    _mixin(E._RenderProxyBox_RenderBox_RenderObjectWithChildMixin_RenderProxyBoxMixin, E.RenderProxyBoxMixin);
    _mixin(T._RenderShiftedBox_RenderBox_RenderObjectWithChildMixin, K.RenderObjectWithChildMixin);
    _mixin(G._SliverPhysicalContainerParentData_SliverPhysicalParentData_ContainerParentDataMixin, K.ContainerParentDataMixin);
    _mixin(F._RenderSliverMultiBoxAdaptor_RenderSliver_ContainerRenderObjectMixin, K.ContainerRenderObjectMixin);
    _mixin(F._RenderSliverMultiBoxAdaptor_RenderSliver_ContainerRenderObjectMixin_RenderSliverHelpers, G.RenderSliverHelpers);
    _mixin(F._RenderSliverMultiBoxAdaptor_RenderSliver_ContainerRenderObjectMixin_RenderSliverHelpers_RenderSliverWithKeepAliveMixin, F.RenderSliverWithKeepAliveMixin);
    _mixin(F._SliverMultiBoxAdaptorParentData_SliverLogicalParentData_ContainerParentDataMixin, K.ContainerParentDataMixin);
    _mixin(F._SliverMultiBoxAdaptorParentData_SliverLogicalParentData_ContainerParentDataMixin_KeepAliveParentDataMixin, F.KeepAliveParentDataMixin);
    _mixin(T._RenderSliverPadding_RenderSliver_RenderObjectWithChildMixin, K.RenderObjectWithChildMixin);
    _mixin(K._RenderStack_RenderBox_ContainerRenderObjectMixin, K.ContainerRenderObjectMixin);
    _mixin(K._RenderStack_RenderBox_ContainerRenderObjectMixin_RenderBoxContainerDefaultsMixin, S.RenderBoxContainerDefaultsMixin);
    _mixin(A._RenderView_RenderObject_RenderObjectWithChildMixin, K.RenderObjectWithChildMixin);
    _mixin(Q._RenderViewportBase_RenderBox_ContainerRenderObjectMixin, K.ContainerRenderObjectMixin);
    _mixin(A._SemanticsNode_AbstractNode_DiagnosticableTreeMixin, Y.DiagnosticableTreeMixin);
    _mixin(N._WidgetsFlutterBinding_BindingBase_GestureBinding, N.GestureBinding);
    _mixin(N._WidgetsFlutterBinding_BindingBase_GestureBinding_ServicesBinding, N.ServicesBinding);
    _mixin(N._WidgetsFlutterBinding_BindingBase_GestureBinding_ServicesBinding_SchedulerBinding, N.SchedulerBinding);
    _mixin(N._WidgetsFlutterBinding_BindingBase_GestureBinding_ServicesBinding_SchedulerBinding_PaintingBinding, N.PaintingBinding);
    _mixin(N._WidgetsFlutterBinding_BindingBase_GestureBinding_ServicesBinding_SchedulerBinding_PaintingBinding_SemanticsBinding, N.SemanticsBinding);
    _mixin(N._WidgetsFlutterBinding_BindingBase_GestureBinding_ServicesBinding_SchedulerBinding_PaintingBinding_SemanticsBinding_RendererBinding, N.RendererBinding);
    _mixin(N._WidgetsFlutterBinding_BindingBase_GestureBinding_ServicesBinding_SchedulerBinding_PaintingBinding_SemanticsBinding_RendererBinding_WidgetsBinding, N.WidgetsBinding);
    _mixin(O._FocusScopeNode_Object_DiagnosticableTreeMixin, Y.DiagnosticableTreeMixin);
    _mixin(G._ImplicitlyAnimatedWidgetState_State_SingleTickerProviderStateMixin, U.SingleTickerProviderStateMixin);
    _mixin(A.__RenderLayoutBuilder_RenderBox_RenderObjectWithChildMixin, K.RenderObjectWithChildMixin);
    _mixin(K._NavigatorState_State_TickerProviderStateMixin, U.TickerProviderStateMixin);
    _mixin(X._OverlayState_State_TickerProviderStateMixin, U.TickerProviderStateMixin);
    _mixin(X.__RenderTheatre_RenderBox_RenderObjectWithChildMixin, K.RenderObjectWithChildMixin);
    _mixin(X.__RenderTheatre_RenderBox_RenderObjectWithChildMixin_RenderProxyBoxMixin, E.RenderProxyBoxMixin);
    _mixin(X.__RenderTheatre_RenderBox_RenderObjectWithChildMixin_RenderProxyBoxMixin_ContainerRenderObjectMixin, K.ContainerRenderObjectMixin);
    _mixin(L._OverscrollIndicatorNotification_Notification_ViewportNotificationMixin, G.ViewportNotificationMixin);
    _mixin(L.__GlowingOverscrollIndicatorState_State_TickerProviderStateMixin, U.TickerProviderStateMixin);
    _mixin(T._ModalRoute_TransitionRoute_LocalHistoryRoute, T.LocalHistoryRoute);
    _mixin(A._ScrollPosition_ViewportOffset_ScrollMetrics, M.ScrollMetrics);
    _mixin(F._ScrollableState_State_TickerProviderStateMixin, U.TickerProviderStateMixin);
    _mixin(T._BitmapCanvas_EngineCanvas_SaveStackTracking, T.SaveStackTracking);
    _mixin(T._DomCanvas_EngineCanvas_SaveElementStackTracking, T.SaveElementStackTracking);
    _mixin(Q._PersistedClipRect_PersistedContainerSurface__DomClip, Q._DomClip);
    _mixin(Q._PersistedPhysicalShape_PersistedContainerSurface__DomClip, Q._DomClip);
  })();
  (function constants() {
    var makeConstList = hunkHelpers.makeConstList;
    C.BodyElement_methods = W.BodyElement.prototype;
    C.CanvasGradient_methods = W.CanvasGradient.prototype;
    C.CanvasRenderingContext2D_methods = W.CanvasRenderingContext2D.prototype;
    C.CssStyleDeclaration_methods = W.CssStyleDeclaration.prototype;
    C.DivElement_methods = W.DivElement.prototype;
    C.HttpRequest_methods = W.HttpRequest.prototype;
    C.InputElement_methods = W.InputElement.prototype;
    C.Interceptor_methods = J.Interceptor.prototype;
    C.JSArray_methods = J.JSArray.prototype;
    C.JSBool_methods = J.JSBool.prototype;
    C.JSDouble_methods = J.JSDouble.prototype;
    C.JSInt_methods = J.JSInt.prototype;
    C.JSNull_methods = J.JSNull.prototype;
    C.JSNumber_methods = J.JSNumber.prototype;
    C.JSString_methods = J.JSString.prototype;
    C.JavaScriptFunction_methods = J.JavaScriptFunction.prototype;
    C.MetaElement_methods = W.MetaElement.prototype;
    C.NativeByteBuffer_methods = H.NativeByteBuffer.prototype;
    C.NativeByteData_methods = H.NativeByteData.prototype;
    C.NativeFloat32List_methods = H.NativeFloat32List.prototype;
    C.NativeFloat64List_methods = H.NativeFloat64List.prototype;
    C.NativeInt32List_methods = H.NativeInt32List.prototype;
    C.NativeUint8List_methods = H.NativeUint8List.prototype;
    C.NodeList_methods = W.NodeList.prototype;
    C.ParagraphElement_methods = W.ParagraphElement.prototype;
    C.PlainJavaScriptObject_methods = J.PlainJavaScriptObject.prototype;
    C.StyleElement_methods = W.StyleElement.prototype;
    C.TableElement_methods = W.TableElement.prototype;
    C.TouchList_methods = W.TouchList.prototype;
    C.UnknownJavaScriptObject_methods = J.UnknownJavaScriptObject.prototype;
    C.WheelEvent_methods = W.WheelEvent.prototype;
    C.Window_methods = W.Window0.prototype;
    C.AccessibilityMode_0 = new T.AccessibilityMode("AccessibilityMode.unknown");
    C.AlignmentDirectional_m1_m1 = new K.AlignmentDirectional(-1, -1);
    C.Alignment_0_0 = new K.Alignment(0, 0);
    C.Alignment_0_1 = new K.Alignment(0, 1);
    C.Alignment_1_0 = new K.Alignment(1, 0);
    C.Alignment_m1_0 = new K.Alignment(-1, 0);
    C.AlwaysScrollableScrollPhysics_null = new L.AlwaysScrollableScrollPhysics(null);
    C.AnimationBehavior_0 = new G.AnimationBehavior("AnimationBehavior.normal");
    C.AnimationBehavior_1 = new G.AnimationBehavior("AnimationBehavior.preserve");
    C.AnimationStatus_0 = new X.AnimationStatus("AnimationStatus.dismissed");
    C.AnimationStatus_1 = new X.AnimationStatus("AnimationStatus.forward");
    C.AnimationStatus_2 = new X.AnimationStatus("AnimationStatus.reverse");
    C.AnimationStatus_3 = new X.AnimationStatus("AnimationStatus.completed");
    C.AppBarTheme_7mv = new V.AppBarTheme(null, null, null, null, null);
    C.AppLifecycleState_0 = new Q.AppLifecycleState("AppLifecycleState.resumed");
    C.AppLifecycleState_1 = new Q.AppLifecycleState("AppLifecycleState.inactive");
    C.AppLifecycleState_2 = new Q.AppLifecycleState("AppLifecycleState.paused");
    C.AppLifecycleState_3 = new Q.AppLifecycleState("AppLifecycleState.suspending");
    C.AxisDirection_0 = new G.AxisDirection("AxisDirection.up");
    C.AxisDirection_1 = new G.AxisDirection("AxisDirection.right");
    C.AxisDirection_2 = new G.AxisDirection("AxisDirection.down");
    C.AxisDirection_3 = new G.AxisDirection("AxisDirection.left");
    C.Axis_0 = new G.Axis("Axis.horizontal");
    C.Axis_1 = new G.Axis("Axis.vertical");
    C.C_StandardMessageCodec = new U.StandardMessageCodec();
    C.BasicMessageChannel_8hp = new A.BasicMessageChannel("flutter/accessibility", C.C_StandardMessageCodec, [null]);
    C.C_StringCodec = new U.StringCodec();
    C.BasicMessageChannel_No7 = new A.BasicMessageChannel("flutter/lifecycle", C.C_StringCodec, [P.String]);
    C.C_JSONMessageCodec = new U.JSONMessageCodec0();
    C.BasicMessageChannel_Qma = new A.BasicMessageChannel("flutter/system", C.C_JSONMessageCodec, [null]);
    C.BlendMode_1 = new Q.BlendMode("BlendMode.src");
    C.BlendMode_10 = new Q.BlendMode("BlendMode.dstATop");
    C.BlendMode_11 = new Q.BlendMode("BlendMode.xor");
    C.BlendMode_12 = new Q.BlendMode("BlendMode.plus");
    C.BlendMode_13 = new Q.BlendMode("BlendMode.modulate");
    C.BlendMode_14 = new Q.BlendMode("BlendMode.screen");
    C.BlendMode_15 = new Q.BlendMode("BlendMode.overlay");
    C.BlendMode_16 = new Q.BlendMode("BlendMode.darken");
    C.BlendMode_17 = new Q.BlendMode("BlendMode.lighten");
    C.BlendMode_18 = new Q.BlendMode("BlendMode.colorDodge");
    C.BlendMode_19 = new Q.BlendMode("BlendMode.colorBurn");
    C.BlendMode_20 = new Q.BlendMode("BlendMode.hardLight");
    C.BlendMode_21 = new Q.BlendMode("BlendMode.softLight");
    C.BlendMode_22 = new Q.BlendMode("BlendMode.difference");
    C.BlendMode_23 = new Q.BlendMode("BlendMode.exclusion");
    C.BlendMode_24 = new Q.BlendMode("BlendMode.multiply");
    C.BlendMode_25 = new Q.BlendMode("BlendMode.hue");
    C.BlendMode_26 = new Q.BlendMode("BlendMode.saturation");
    C.BlendMode_27 = new Q.BlendMode("BlendMode.color");
    C.BlendMode_28 = new Q.BlendMode("BlendMode.luminosity");
    C.BlendMode_3 = new Q.BlendMode("BlendMode.srcOver");
    C.BlendMode_4 = new Q.BlendMode("BlendMode.dstOver");
    C.BlendMode_5 = new Q.BlendMode("BlendMode.srcIn");
    C.BlendMode_6 = new Q.BlendMode("BlendMode.dstIn");
    C.BlendMode_7 = new Q.BlendMode("BlendMode.srcOut");
    C.BlendMode_8 = new Q.BlendMode("BlendMode.dstOut");
    C.BlendMode_9 = new Q.BlendMode("BlendMode.srcATop");
    C.BlurStyle_0 = new Q.BlurStyle("BlurStyle.normal");
    C.Radius_0_0 = new Q.Radius(0, 0);
    C.BorderRadius_tLn = new K.BorderRadius(C.Radius_0_0, C.Radius_0_0, C.Radius_0_0, C.Radius_0_0);
    C.Color_4278190080 = new Q.Color(4278190080);
    C.BorderStyle_0 = new Y.BorderStyle("BorderStyle.none");
    C.BorderSide_m7u = new Y.BorderSide(C.Color_4278190080, 0, C.BorderStyle_0);
    C.BorderStyle_1 = new Y.BorderStyle("BorderStyle.solid");
    C.BottomAppBarTheme_null_null_null = new D.BottomAppBarTheme(null, null, null);
    C.BouncingScrollPhysics_null = new L.BouncingScrollPhysics(null);
    C.BoxConstraints_40_40_40_40 = new S.BoxConstraints(40, 40, 40, 40);
    C.BoxConstraints_56_56_56_56 = new S.BoxConstraints(56, 56, 56, 56);
    C.BoxConstraints_ALM = new S.BoxConstraints(1 / 0, 1 / 0, 1 / 0, 1 / 0);
    C.BoxConstraints_mlX = new S.BoxConstraints(0, 1 / 0, 0, 1 / 0);
    C.BoxConstraints_mlX0 = new S.BoxConstraints(48, 1 / 0, 48, 1 / 0);
    C.BoxShape_0 = new F.BoxShape("BoxShape.rectangle");
    C.BoxShape_1 = new F.BoxShape("BoxShape.circle");
    C.Brightness_0 = new Q.Brightness("Brightness.dark");
    C.Brightness_1 = new Q.Brightness("Brightness.light");
    C.BrowserEngine_0 = new T.BrowserEngine("BrowserEngine.blink");
    C.BrowserEngine_1 = new T.BrowserEngine("BrowserEngine.webkit");
    C.BrowserEngine_2 = new T.BrowserEngine("BrowserEngine.unknown");
    C.ButtonBarLayoutBehavior_1 = new M.ButtonBarLayoutBehavior("ButtonBarLayoutBehavior.padded");
    C.ButtonTextTheme_0 = new M.ButtonTextTheme("ButtonTextTheme.normal");
    C.ButtonTextTheme_1 = new M.ButtonTextTheme("ButtonTextTheme.accent");
    C.ButtonTextTheme_2 = new M.ButtonTextTheme("ButtonTextTheme.primary");
    C.C_Base64Encoder = new P.Base64Encoder();
    C.C_Base64Codec = new P.Base64Codec();
    C.C_BrowserPlatformLocation = new Q.BrowserPlatformLocation();
    C.C_DefaultCupertinoLocalizations = new L.DefaultCupertinoLocalizations();
    C.C_DefaultMaterialLocalizations = new U.DefaultMaterialLocalizations();
    C.C_DefaultWidgetsLocalizations = new L.DefaultWidgetsLocalizations();
    C.C_EmptyIterator = new H.EmptyIterator([P.Null]);
    C.C_Endian0 = new P.Endian();
    C.C_Endian = new P.Endian();
    C.C_FadeUpwardsPageTransitionsBuilder = new K.FadeUpwardsPageTransitionsBuilder();
    C.C_HashLocationStrategy = new Q.HashLocationStrategy();
    C.C_InputDecorationTheme = new L.InputDecorationTheme();
    C.C_JSONMessageCodec0 = new T.JSONMessageCodec();
    C.C_JSONMethodCodec = new T.JSONMethodCodec0();
    C.C_JS_CONST = function getTagFallback(o) {
  var s = Object.prototype.toString.call(o);
  return s.substring(8, s.length - 1);
};
    C.C_JS_CONST0 = function() {
  var toStringFunction = Object.prototype.toString;
  function getTag(o) {
    var s = toStringFunction.call(o);
    return s.substring(8, s.length - 1);
  }
  function getUnknownTag(object, tag) {
    if (/^HTML[A-Z].*Element$/.test(tag)) {
      var name = toStringFunction.call(object);
      if (name == "[object Object]") return null;
      return "HTMLElement";
    }
  }
  function getUnknownTagGenericBrowser(object, tag) {
    if (self.HTMLElement && object instanceof HTMLElement) return "HTMLElement";
    return getUnknownTag(object, tag);
  }
  function prototypeForTag(tag) {
    if (typeof window == "undefined") return null;
    if (typeof window[tag] == "undefined") return null;
    var constructor = window[tag];
    if (typeof constructor != "function") return null;
    return constructor.prototype;
  }
  function discriminator(tag) { return null; }
  var isBrowser = typeof navigator == "object";
  return {
    getTag: getTag,
    getUnknownTag: isBrowser ? getUnknownTagGenericBrowser : getUnknownTag,
    prototypeForTag: prototypeForTag,
    discriminator: discriminator };
};
    C.C_JS_CONST6 = function(getTagFallback) {
  return function(hooks) {
    if (typeof navigator != "object") return hooks;
    var ua = navigator.userAgent;
    if (ua.indexOf("DumpRenderTree") >= 0) return hooks;
    if (ua.indexOf("Chrome") >= 0) {
      function confirm(p) {
        return typeof window == "object" && window[p] && window[p].name == p;
      }
      if (confirm("Window") && confirm("HTMLElement")) return hooks;
    }
    hooks.getTag = getTagFallback;
  };
};
    C.C_JS_CONST1 = function(hooks) {
  if (typeof dartExperimentalFixupGetTag != "function") return hooks;
  hooks.getTag = dartExperimentalFixupGetTag(hooks.getTag);
};
    C.C_JS_CONST2 = function(hooks) {
  var getTag = hooks.getTag;
  var prototypeForTag = hooks.prototypeForTag;
  function getTagFixed(o) {
    var tag = getTag(o);
    if (tag == "Document") {
      if (!!o.xmlVersion) return "!Document";
      return "!HTMLDocument";
    }
    return tag;
  }
  function prototypeForTagFixed(tag) {
    if (tag == "Document") return null;
    return prototypeForTag(tag);
  }
  hooks.getTag = getTagFixed;
  hooks.prototypeForTag = prototypeForTagFixed;
};
    C.C_JS_CONST5 = function(hooks) {
  var userAgent = typeof navigator == "object" ? navigator.userAgent : "";
  if (userAgent.indexOf("Firefox") == -1) return hooks;
  var getTag = hooks.getTag;
  var quickMap = {
    "BeforeUnloadEvent": "Event",
    "DataTransfer": "Clipboard",
    "GeoGeolocation": "Geolocation",
    "Location": "!Location",
    "WorkerMessageEvent": "MessageEvent",
    "XMLDocument": "!Document"};
  function getTagFirefox(o) {
    var tag = getTag(o);
    return quickMap[tag] || tag;
  }
  hooks.getTag = getTagFirefox;
};
    C.C_JS_CONST4 = function(hooks) {
  var userAgent = typeof navigator == "object" ? navigator.userAgent : "";
  if (userAgent.indexOf("Trident/") == -1) return hooks;
  var getTag = hooks.getTag;
  var quickMap = {
    "BeforeUnloadEvent": "Event",
    "DataTransfer": "Clipboard",
    "HTMLDDElement": "HTMLElement",
    "HTMLDTElement": "HTMLElement",
    "HTMLPhraseElement": "HTMLElement",
    "Position": "Geoposition"
  };
  function getTagIE(o) {
    var tag = getTag(o);
    var newTag = quickMap[tag];
    if (newTag) return newTag;
    if (tag == "Object") {
      if (window.DataView && (o instanceof window.DataView)) return "DataView";
    }
    return tag;
  }
  function prototypeForTagIE(tag) {
    var constructor = window[tag];
    if (constructor == null) return null;
    return constructor.prototype;
  }
  hooks.getTag = getTagIE;
  hooks.prototypeForTag = prototypeForTagIE;
};
    C.C_JS_CONST3 = function(hooks) { return hooks; }
;
    C.C_JsonCodec = new P.JsonCodec();
    C.C_Object = new P.Object();
    C.C_OutOfMemoryError = new P.OutOfMemoryError();
    C.C_PaddleSliderValueIndicatorShape = new Q.PaddleSliderValueIndicatorShape();
    C.C_PageTransitionsTheme = new K.PageTransitionsTheme();
    C.C_PaintRestore = new T.PaintRestore();
    C.C_PaintSave = new T.PaintSave();
    C.C_PointerSupportDetector = new T.PointerSupportDetector();
    C.C_RoundSliderThumbShape = new Q.RoundSliderThumbShape();
    C.C_ScrollBehavior = new K.ScrollBehavior();
    C.C_StringCodec0 = new T.StringCodec0();
    C.C_TypeMatcher1 = new N.TypeMatcher([K.NavigatorState]);
    C.C_TypeMatcher = new N.TypeMatcher([E.RenderAbsorbPointer]);
    C.C_TypeMatcher0 = new N.TypeMatcher([M._RenderInkFeatures]);
    C.C_Utf8Codec = new P.Utf8Codec();
    C.C_Utf8Encoder = new P.Utf8Encoder();
    C.C__AlwaysCompleteAnimation = new S._AlwaysCompleteAnimation();
    C.C__AlwaysDismissedAnimation = new S._AlwaysDismissedAnimation();
    C.C__CenterFloatFloatingActionButtonLocation = new A._CenterFloatFloatingActionButtonLocation();
    C.C__CupertinoLocalizationsDelegate = new L._CupertinoLocalizationsDelegate();
    C.C__DecelerateCurve = new Z._DecelerateCurve();
    C.C__DefaultHeroTag = new E._DefaultHeroTag();
    C.C__DelayedDone = new P._DelayedDone();
    C.C__HashEnd = new Q._HashEnd();
    C.C__InkSplashFactory = new U._InkSplashFactory();
    C.C__Linear = new Z._Linear();
    C.C__MaterialLocalizationsDelegate = new U._MaterialLocalizationsDelegate();
    C.C__NoDefaultValue = new Y._NoDefaultValue();
    C.C__RootZone = new P._RootZone();
    C.C__ScalingFabMotionAnimator = new A._ScalingFabMotionAnimator();
    C.C__WidgetsLocalizationsDelegate = new L._WidgetsLocalizationsDelegate();
    C.CardTheme_eHw = new A.CardTheme(null, null, null, null, null);
    C.CircleBorder_61T = new X.CircleBorder(C.BorderSide_m7u);
    C.ClampingScrollPhysics_null = new L.ClampingScrollPhysics(null);
    C.ClipOp_1 = new Q.ClipOp("ClipOp.intersect");
    C.Clip_0 = new Q.Clip("Clip.none");
    C.Clip_1 = new Q.Clip("Clip.hardEdge");
    C.Clip_2 = new Q.Clip("Clip.antiAlias");
    C.Clip_3 = new Q.Clip("Clip.antiAliasWithSaveLayer");
    C.Color_0 = new Q.Color(0);
    C.Color_1087163596 = new Q.Color(1087163596);
    C.Color_1107296256 = new Q.Color(1107296256);
    C.Color_1308622847 = new Q.Color(1308622847);
    C.Color_1627389952 = new Q.Color(1627389952);
    C.Color_16777215 = new Q.Color(16777215);
    C.Color_1723645116 = new Q.Color(1723645116);
    C.Color_1724434632 = new Q.Color(1724434632);
    C.Color_2164260863 = new Q.Color(2164260863);
    C.Color_2315255808 = new Q.Color(2315255808);
    C.Color_3019898879 = new Q.Color(3019898879);
    C.Color_4035969024 = new Q.Color(4035969024);
    C.Color_4282549748 = new Q.Color(4282549748);
    C.Color_4294967142 = new Q.Color(4294967142);
    C.Color_4294967295 = new Q.Color(4294967295);
    C.Color_520093696 = new Q.Color(520093696);
    C.Color_536870911 = new Q.Color(536870911);
    C.ConnectionState_0 = new B.ConnectionState("ConnectionState.none");
    C.ConnectionState_1 = new B.ConnectionState("ConnectionState.waiting");
    C.ConnectionState_2 = new B.ConnectionState("ConnectionState.active");
    C.ConnectionState_3 = new B.ConnectionState("ConnectionState.done");
    C.CrossAxisAlignment_0 = new F.CrossAxisAlignment("CrossAxisAlignment.start");
    C.CrossAxisAlignment_1 = new F.CrossAxisAlignment("CrossAxisAlignment.end");
    C.CrossAxisAlignment_2 = new F.CrossAxisAlignment("CrossAxisAlignment.center");
    C.CrossAxisAlignment_3 = new F.CrossAxisAlignment("CrossAxisAlignment.stretch");
    C.CrossAxisAlignment_4 = new F.CrossAxisAlignment("CrossAxisAlignment.baseline");
    C.Cubic_JUR0 = new Z.Cubic(0.25, 0.1, 0.25, 1);
    C.Cubic_JUR = new Z.Cubic(0.42, 0, 1, 1);
    C.Cubic_ifx = new Z.Cubic(0.4, 0, 0.2, 1);
    C.Cubic_xDo = new Z.Cubic(0, 0, 0.58, 1);
    C.Cubic_xDo0 = new Z.Cubic(0.42, 0, 0.58, 1);
    C.DebugSemanticsDumpOrder_0 = new A.DebugSemanticsDumpOrder("DebugSemanticsDumpOrder.inverseHitTest");
    C.DebugSemanticsDumpOrder_1 = new A.DebugSemanticsDumpOrder("DebugSemanticsDumpOrder.traversalOrder");
    C.DecorationPosition_0 = new E.DecorationPosition("DecorationPosition.background");
    C.DecorationPosition_1 = new E.DecorationPosition("DecorationPosition.foreground");
    C.TextStyle_v9c = new A.TextStyle0(true, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null);
    C.TextOverflow_0 = new Q.TextOverflow("TextOverflow.clip");
    C.DefaultTextStyle_mnK = new L.DefaultTextStyle(C.TextStyle_v9c, null, true, C.TextOverflow_0, null, null, null);
    C.DiagnosticLevel_0 = new Y.DiagnosticLevel(0, "DiagnosticLevel.hidden");
    C.DiagnosticLevel_1 = new Y.DiagnosticLevel(1, "DiagnosticLevel.fine");
    C.DiagnosticLevel_2 = new Y.DiagnosticLevel(2, "DiagnosticLevel.debug");
    C.DiagnosticLevel_3 = new Y.DiagnosticLevel(3, "DiagnosticLevel.info");
    C.DiagnosticLevel_4 = new Y.DiagnosticLevel(4, "DiagnosticLevel.warning");
    C.DiagnosticLevel_5 = new Y.DiagnosticLevel(5, "DiagnosticLevel.error");
    C.DiagnosticsTreeStyle_0 = new Y.DiagnosticsTreeStyle("DiagnosticsTreeStyle.sparse");
    C.DiagnosticsTreeStyle_1 = new Y.DiagnosticsTreeStyle("DiagnosticsTreeStyle.offstage");
    C.DiagnosticsTreeStyle_2 = new Y.DiagnosticsTreeStyle("DiagnosticsTreeStyle.dense");
    C.DiagnosticsTreeStyle_3 = new Y.DiagnosticsTreeStyle("DiagnosticsTreeStyle.transition");
    C.DiagnosticsTreeStyle_4 = new Y.DiagnosticsTreeStyle("DiagnosticsTreeStyle.whitespace");
    C.DiagnosticsTreeStyle_5 = new Y.DiagnosticsTreeStyle("DiagnosticsTreeStyle.singleLine");
    C.DialogTheme_maI = new Y.DialogTheme(null, null, null, null, null);
    C.DragStartBehavior_0 = new S.DragStartBehavior("DragStartBehavior.down");
    C.DragStartBehavior_1 = new S.DragStartBehavior("DragStartBehavior.start");
    C.Duration_0 = new P.Duration(0);
    C.Duration_100000 = new P.Duration(100000);
    C.Duration_1000000 = new P.Duration(1000000);
    C.Duration_167000 = new P.Duration(167000);
    C.Duration_200000 = new P.Duration(200000);
    C.Duration_2000000 = new P.Duration(2000000);
    C.Duration_300000 = new P.Duration(300000);
    C.Duration_50000 = new P.Duration(50000);
    C.Duration_500000 = new P.Duration(500000);
    C.Duration_600000 = new P.Duration(600000);
    C.EdgeInsets_0_0_0_0 = new V.EdgeInsets(0, 0, 0, 0);
    C.EdgeInsets_16_0_16_0 = new V.EdgeInsets(16, 0, 16, 0);
    C.EdgeInsets_24_0_24_0 = new V.EdgeInsets(24, 0, 24, 0);
    C.EdgeInsets_4_4_4_4 = new V.EdgeInsets(4, 4, 4, 4);
    C.EdgeInsets_8_0_8_0 = new V.EdgeInsets(8, 0, 8, 0);
    C.EdgeInsets_8_8_8_8 = new V.EdgeInsets(8, 8, 8, 8);
    C.ElementType_0 = new T.ElementType("ElementType.input");
    C.ElementType_1 = new T.ElementType("ElementType.textarea");
    C.ElementType_2 = new T.ElementType("ElementType.contentEditable");
    C.FlexFit_0 = new F.FlexFit("FlexFit.tight");
    C.FlexFit_1 = new F.FlexFit("FlexFit.loose");
    C.FontWeight_6 = new Q.FontWeight(6);
    C.FormatException_oCg = new P.FormatException("Message corrupted", null, null);
    C.GestureDisposition_0 = new D.GestureDisposition("GestureDisposition.accepted");
    C.GestureDisposition_1 = new D.GestureDisposition("GestureDisposition.rejected");
    C.GestureMode_0 = new T.GestureMode("GestureMode.pointerEvents");
    C.GestureMode_1 = new T.GestureMode("GestureMode.browserGestures");
    C.GestureRecognizerState_0 = new S.GestureRecognizerState("GestureRecognizerState.ready");
    C.GestureRecognizerState_1 = new S.GestureRecognizerState("GestureRecognizerState.possible");
    C.GestureRecognizerState_2 = new S.GestureRecognizerState("GestureRecognizerState.defunct");
    C.GrowthDirection_0 = new G.GrowthDirection("GrowthDirection.forward");
    C.GrowthDirection_1 = new G.GrowthDirection("GrowthDirection.reverse");
    C.HeroFlightDirection_0 = new T.HeroFlightDirection("HeroFlightDirection.push");
    C.HeroFlightDirection_1 = new T.HeroFlightDirection("HeroFlightDirection.pop");
    C.HitTestBehavior_0 = new E.HitTestBehavior("HitTestBehavior.deferToChild");
    C.HitTestBehavior_1 = new E.HitTestBehavior("HitTestBehavior.opaque");
    C.HitTestBehavior_2 = new E.HitTestBehavior("HitTestBehavior.translucent");
    C.IconData_58719_MaterialIcons_false = new X.IconData(58719, "MaterialIcons", false);
    C.IconData_58726_MaterialIcons_false = new X.IconData(58726, "MaterialIcons", false);
    C.IconData_58820_MaterialIcons_true = new X.IconData(58820, "MaterialIcons", true);
    C.IconData_58824_MaterialIcons_true = new X.IconData(58824, "MaterialIcons", true);
    C.IconData_58829_MaterialIcons_false = new X.IconData(58829, "MaterialIcons", false);
    C.Color_3707764736 = new Q.Color(3707764736);
    C.IconThemeData_Color_3707764736_null_null = new T.IconThemeData(C.Color_3707764736, null, null);
    C.IconThemeData_Color_4278190080_1_24 = new T.IconThemeData(C.Color_4278190080, 1, 24);
    C.IconThemeData_Color_4278190080_null_null = new T.IconThemeData(C.Color_4278190080, null, null);
    C.IconThemeData_Color_4294967295_null_null = new T.IconThemeData(C.Color_4294967295, null, null);
    C.IconData_59574_MaterialIcons_false = new X.IconData(59574, "MaterialIcons", false);
    C.Icon_8wU = new L.Icon(C.IconData_59574_MaterialIcons_false, null, null);
    C.InputType_0 = new T.InputType("InputType.text");
    C.InputType_1 = new T.InputType("InputType.multiline");
    C.Interval_75R = new Z.Interval(0, 0.1, C.C__Linear);
    C.Interval_E4y = new Z.Interval(0.5, 1, C.Cubic_JUR0);
    C.JsonDecoder_null = new P.JsonDecoder(null);
    C.JsonEncoder_null = new P.JsonEncoder(null);
    C.List_0_1 = H.setRuntimeTypeInfo(makeConstList([0, 1]), [P.double]);
    C.List_127_2047_65535_1114111 = H.setRuntimeTypeInfo(makeConstList([127, 2047, 65535, 1114111]), [P.int]);
    C.FontWeight_0 = new Q.FontWeight(0);
    C.FontWeight_1 = new Q.FontWeight(1);
    C.FontWeight_2 = new Q.FontWeight(2);
    C.FontWeight_3 = new Q.FontWeight(3);
    C.FontWeight_4 = new Q.FontWeight(4);
    C.FontWeight_5 = new Q.FontWeight(5);
    C.FontWeight_7 = new Q.FontWeight(7);
    C.FontWeight_8 = new Q.FontWeight(8);
    C.List_27p = H.setRuntimeTypeInfo(makeConstList([C.FontWeight_0, C.FontWeight_1, C.FontWeight_2, C.FontWeight_3, C.FontWeight_4, C.FontWeight_5, C.FontWeight_6, C.FontWeight_7, C.FontWeight_8]), [Q.FontWeight]);
    C.List_2Vk = H.setRuntimeTypeInfo(makeConstList([0, 0, 32776, 33792, 1, 10240, 0, 0]), [P.int]);
    C.List_2Zi = H.setRuntimeTypeInfo(makeConstList(["*::class", "*::dir", "*::draggable", "*::hidden", "*::id", "*::inert", "*::itemprop", "*::itemref", "*::itemscope", "*::lang", "*::spellcheck", "*::title", "*::translate", "A::accesskey", "A::coords", "A::hreflang", "A::name", "A::shape", "A::tabindex", "A::target", "A::type", "AREA::accesskey", "AREA::alt", "AREA::coords", "AREA::nohref", "AREA::shape", "AREA::tabindex", "AREA::target", "AUDIO::controls", "AUDIO::loop", "AUDIO::mediagroup", "AUDIO::muted", "AUDIO::preload", "BDO::dir", "BODY::alink", "BODY::bgcolor", "BODY::link", "BODY::text", "BODY::vlink", "BR::clear", "BUTTON::accesskey", "BUTTON::disabled", "BUTTON::name", "BUTTON::tabindex", "BUTTON::type", "BUTTON::value", "CANVAS::height", "CANVAS::width", "CAPTION::align", "COL::align", "COL::char", "COL::charoff", "COL::span", "COL::valign", "COL::width", "COLGROUP::align", "COLGROUP::char", "COLGROUP::charoff", "COLGROUP::span", "COLGROUP::valign", "COLGROUP::width", "COMMAND::checked", "COMMAND::command", "COMMAND::disabled", "COMMAND::label", "COMMAND::radiogroup", "COMMAND::type", "DATA::value", "DEL::datetime", "DETAILS::open", "DIR::compact", "DIV::align", "DL::compact", "FIELDSET::disabled", "FONT::color", "FONT::face", "FONT::size", "FORM::accept", "FORM::autocomplete", "FORM::enctype", "FORM::method", "FORM::name", "FORM::novalidate", "FORM::target", "FRAME::name", "H1::align", "H2::align", "H3::align", "H4::align", "H5::align", "H6::align", "HR::align", "HR::noshade", "HR::size", "HR::width", "HTML::version", "IFRAME::align", "IFRAME::frameborder", "IFRAME::height", "IFRAME::marginheight", "IFRAME::marginwidth", "IFRAME::width", "IMG::align", "IMG::alt", "IMG::border", "IMG::height", "IMG::hspace", "IMG::ismap", "IMG::name", "IMG::usemap", "IMG::vspace", "IMG::width", "INPUT::accept", "INPUT::accesskey", "INPUT::align", "INPUT::alt", "INPUT::autocomplete", "INPUT::autofocus", "INPUT::checked", "INPUT::disabled", "INPUT::inputmode", "INPUT::ismap", "INPUT::list", "INPUT::max", "INPUT::maxlength", "INPUT::min", "INPUT::multiple", "INPUT::name", "INPUT::placeholder", "INPUT::readonly", "INPUT::required", "INPUT::size", "INPUT::step", "INPUT::tabindex", "INPUT::type", "INPUT::usemap", "INPUT::value", "INS::datetime", "KEYGEN::disabled", "KEYGEN::keytype", "KEYGEN::name", "LABEL::accesskey", "LABEL::for", "LEGEND::accesskey", "LEGEND::align", "LI::type", "LI::value", "LINK::sizes", "MAP::name", "MENU::compact", "MENU::label", "MENU::type", "METER::high", "METER::low", "METER::max", "METER::min", "METER::value", "OBJECT::typemustmatch", "OL::compact", "OL::reversed", "OL::start", "OL::type", "OPTGROUP::disabled", "OPTGROUP::label", "OPTION::disabled", "OPTION::label", "OPTION::selected", "OPTION::value", "OUTPUT::for", "OUTPUT::name", "P::align", "PRE::width", "PROGRESS::max", "PROGRESS::min", "PROGRESS::value", "SELECT::autocomplete", "SELECT::disabled", "SELECT::multiple", "SELECT::name", "SELECT::required", "SELECT::size", "SELECT::tabindex", "SOURCE::type", "TABLE::align", "TABLE::bgcolor", "TABLE::border", "TABLE::cellpadding", "TABLE::cellspacing", "TABLE::frame", "TABLE::rules", "TABLE::summary", "TABLE::width", "TBODY::align", "TBODY::char", "TBODY::charoff", "TBODY::valign", "TD::abbr", "TD::align", "TD::axis", "TD::bgcolor", "TD::char", "TD::charoff", "TD::colspan", "TD::headers", "TD::height", "TD::nowrap", "TD::rowspan", "TD::scope", "TD::valign", "TD::width", "TEXTAREA::accesskey", "TEXTAREA::autocomplete", "TEXTAREA::cols", "TEXTAREA::disabled", "TEXTAREA::inputmode", "TEXTAREA::name", "TEXTAREA::placeholder", "TEXTAREA::readonly", "TEXTAREA::required", "TEXTAREA::rows", "TEXTAREA::tabindex", "TEXTAREA::wrap", "TFOOT::align", "TFOOT::char", "TFOOT::charoff", "TFOOT::valign", "TH::abbr", "TH::align", "TH::axis", "TH::bgcolor", "TH::char", "TH::charoff", "TH::colspan", "TH::headers", "TH::height", "TH::nowrap", "TH::rowspan", "TH::scope", "TH::valign", "TH::width", "THEAD::align", "THEAD::char", "THEAD::charoff", "THEAD::valign", "TR::align", "TR::bgcolor", "TR::char", "TR::charoff", "TR::valign", "TRACK::default", "TRACK::kind", "TRACK::label", "TRACK::srclang", "UL::compact", "UL::type", "VIDEO::controls", "VIDEO::height", "VIDEO::loop", "VIDEO::mediagroup", "VIDEO::muted", "VIDEO::preload", "VIDEO::width"]), [P.String]);
    C.MainAxisAlignment_0 = new F.MainAxisAlignment("MainAxisAlignment.start");
    C.MainAxisAlignment_1 = new F.MainAxisAlignment("MainAxisAlignment.end");
    C.MainAxisAlignment_2 = new F.MainAxisAlignment("MainAxisAlignment.center");
    C.MainAxisAlignment_3 = new F.MainAxisAlignment("MainAxisAlignment.spaceBetween");
    C.MainAxisAlignment_4 = new F.MainAxisAlignment("MainAxisAlignment.spaceAround");
    C.MainAxisAlignment_5 = new F.MainAxisAlignment("MainAxisAlignment.spaceEvenly");
    C.List_8pF = H.setRuntimeTypeInfo(makeConstList([C.MainAxisAlignment_0, C.MainAxisAlignment_1, C.MainAxisAlignment_2, C.MainAxisAlignment_3, C.MainAxisAlignment_4, C.MainAxisAlignment_5]), [F.MainAxisAlignment]);
    C.List_Axis_0_Axis_1 = H.setRuntimeTypeInfo(makeConstList([C.Axis_0, C.Axis_1]), [G.Axis]);
    C.List_CVk = H.setRuntimeTypeInfo(makeConstList([0, 0, 65490, 45055, 65535, 34815, 65534, 18431]), [P.int]);
    C.List_JMD = H.setRuntimeTypeInfo(makeConstList([C.CrossAxisAlignment_0, C.CrossAxisAlignment_1, C.CrossAxisAlignment_2, C.CrossAxisAlignment_3, C.CrossAxisAlignment_4]), [F.CrossAxisAlignment]);
    C.List_JYB = H.setRuntimeTypeInfo(makeConstList([0, 0, 26624, 1023, 65534, 2047, 65534, 2047]), [P.int]);
    C.Locale_en_US = new Q.Locale("en", "US");
    C.List_Locale_en_US = H.setRuntimeTypeInfo(makeConstList([C.Locale_en_US]), [Q.Locale]);
    C.TextDirection_0 = new Q.TextDirection("TextDirection.rtl");
    C.TextDirection_1 = new Q.TextDirection("TextDirection.ltr");
    C.List_TextDirection_0_TextDirection_1 = H.setRuntimeTypeInfo(makeConstList([C.TextDirection_0, C.TextDirection_1]), [Q.TextDirection]);
    C.TargetPlatform_0 = new T.TargetPlatform("TargetPlatform.android");
    C.TargetPlatform_1 = new T.TargetPlatform("TargetPlatform.fuchsia");
    C.TargetPlatform_2 = new T.TargetPlatform("TargetPlatform.iOS");
    C.List_U0W = H.setRuntimeTypeInfo(makeConstList([C.TargetPlatform_0, C.TargetPlatform_1, C.TargetPlatform_2]), [T.TargetPlatform]);
    C.List_cg9 = H.setRuntimeTypeInfo(makeConstList(["dart:async-patch", "dart:async", "package:stack_trace"]), [P.String]);
    C.List_click_scroll = H.setRuntimeTypeInfo(makeConstList(["click", "scroll"]), [P.String]);
    C.List_click_touchstart_touchend = H.setRuntimeTypeInfo(makeConstList(["click", "touchstart", "touchend"]), [P.String]);
    C.List_e3D = H.setRuntimeTypeInfo(makeConstList(["pointerdown", "pointermove", "pointerup", "pointercancel", "touchstart", "touchend", "touchmove", "touchcancel", "mousedown", "mousemove", "mouseup"]), [P.String]);
    C.List_ego = H.setRuntimeTypeInfo(makeConstList(["HEAD", "AREA", "BASE", "BASEFONT", "BR", "COL", "COLGROUP", "EMBED", "FRAME", "FRAMESET", "HR", "IMAGE", "IMG", "INPUT", "ISINDEX", "LINK", "META", "PARAM", "SOURCE", "STYLE", "TITLE", "WBR"]), [P.String]);
    C.List_empty6 = H.setRuntimeTypeInfo(makeConstList([]), [T.CanvasShadow]);
    C.List_empty4 = H.setRuntimeTypeInfo(makeConstList([]), [V.CustomPainterSemantics]);
    C.List_empty = H.setRuntimeTypeInfo(makeConstList([]), [Y.DiagnosticsNode]);
    C.List_empty2 = H.setRuntimeTypeInfo(makeConstList([]), [K.NavigatorObserver]);
    C.List_empty1 = H.setRuntimeTypeInfo(makeConstList([]), [P.Null]);
    C.List_empty3 = H.setRuntimeTypeInfo(makeConstList([]), [A.SemanticsNode]);
    C.List_empty5 = H.setRuntimeTypeInfo(makeConstList([]), [P.String]);
    C.List_empty7 = H.setRuntimeTypeInfo(makeConstList([]), [N.Widget]);
    C.List_empty0 = makeConstList([]);
    C.List_gRj = H.setRuntimeTypeInfo(makeConstList([0, 0, 32722, 12287, 65534, 34815, 65534, 18431]), [P.int]);
    C.List_gnE = H.setRuntimeTypeInfo(makeConstList([0, 0, 65498, 45055, 65535, 34815, 65534, 18431]), [P.int]);
    C.List_ifn = H.setRuntimeTypeInfo(makeConstList(["_AssertionError", "_FakeAsync", "_FrameCallbackEntry"]), [P.String]);
    C.List_nxB = H.setRuntimeTypeInfo(makeConstList([0, 0, 24576, 1023, 65534, 34815, 65534, 18431]), [P.int]);
    C.List_qNA = H.setRuntimeTypeInfo(makeConstList([0, 0, 32754, 11263, 65534, 34815, 65534, 18431]), [P.int]);
    C.List_qg40 = H.setRuntimeTypeInfo(makeConstList([0, 0, 32722, 12287, 65535, 34815, 65534, 18431]), [P.int]);
    C.List_qg4 = H.setRuntimeTypeInfo(makeConstList([0, 0, 65490, 12287, 65535, 34815, 65534, 18431]), [P.int]);
    C.List_wSV = H.setRuntimeTypeInfo(makeConstList(["bind", "if", "ref", "repeat", "syntax"]), [P.String]);
    C.List_yrN = H.setRuntimeTypeInfo(makeConstList(["A::href", "AREA::href", "BLOCKQUOTE::cite", "BODY::background", "COMMAND::icon", "DEL::cite", "FORM::action", "IMG::src", "INPUT::src", "INS::cite", "Q::cite", "VIDEO::poster"]), [P.String]);
    C._CornerId_0 = new D._CornerId("_CornerId.topLeft");
    C._CornerId_3 = new D._CornerId("_CornerId.bottomRight");
    C._Diagonal__CornerId_0__CornerId_3 = new D._Diagonal(C._CornerId_0, C._CornerId_3);
    C._Diagonal__CornerId_3__CornerId_0 = new D._Diagonal(C._CornerId_3, C._CornerId_0);
    C._CornerId_1 = new D._CornerId("_CornerId.topRight");
    C._CornerId_2 = new D._CornerId("_CornerId.bottomLeft");
    C._Diagonal__CornerId_1__CornerId_2 = new D._Diagonal(C._CornerId_1, C._CornerId_2);
    C._Diagonal__CornerId_2__CornerId_1 = new D._Diagonal(C._CornerId_2, C._CornerId_1);
    C.List_yvP = H.setRuntimeTypeInfo(makeConstList([C._Diagonal__CornerId_0__CornerId_3, C._Diagonal__CornerId_3__CornerId_0, C._Diagonal__CornerId_1__CornerId_2, C._Diagonal__CornerId_2__CornerId_1]), [D._Diagonal]);
    C.MainAxisSize_1 = new F.MainAxisSize("MainAxisSize.max");
    C.List_mode = H.setRuntimeTypeInfo(makeConstList(["mode"]), [P.String]);
    C.Map_9aZ6I = new H.ConstantStringMap(1, {mode: "basic"}, C.List_mode, [P.String, P.String]);
    C.Color_4294638330 = new Q.Color(4294638330);
    C.Color_4294309365 = new Q.Color(4294309365);
    C.Color_4293848814 = new Q.Color(4293848814);
    C.Color_4292927712 = new Q.Color(4292927712);
    C.Color_4292269782 = new Q.Color(4292269782);
    C.Color_4290624957 = new Q.Color(4290624957);
    C.Color_4288585374 = new Q.Color(4288585374);
    C.Color_4285887861 = new Q.Color(4285887861);
    C.Color_4284572001 = new Q.Color(4284572001);
    C.Color_4282532418 = new Q.Color(4282532418);
    C.Color_4281348144 = new Q.Color(4281348144);
    C.Color_4280361249 = new Q.Color(4280361249);
    C.Map_HFpTk = new H.GeneralConstantMap([50, C.Color_4294638330, 100, C.Color_4294309365, 200, C.Color_4293848814, 300, C.Color_4292927712, 350, C.Color_4292269782, 400, C.Color_4290624957, 500, C.Color_4288585374, 600, C.Color_4285887861, 700, C.Color_4284572001, 800, C.Color_4282532418, 850, C.Color_4281348144, 900, C.Color_4280361249], [P.int, Q.Color]);
    C.Color_4294962158 = new Q.Color(4294962158);
    C.Color_4294954450 = new Q.Color(4294954450);
    C.Color_4293892762 = new Q.Color(4293892762);
    C.Color_4293227379 = new Q.Color(4293227379);
    C.Color_4293874512 = new Q.Color(4293874512);
    C.Color_4294198070 = new Q.Color(4294198070);
    C.Color_4293212469 = new Q.Color(4293212469);
    C.Color_4292030255 = new Q.Color(4292030255);
    C.Color_4291176488 = new Q.Color(4291176488);
    C.Color_4290190364 = new Q.Color(4290190364);
    C.Map_JNc9P = new H.GeneralConstantMap([50, C.Color_4294962158, 100, C.Color_4294954450, 200, C.Color_4293892762, 300, C.Color_4293227379, 400, C.Color_4293874512, 500, C.Color_4294198070, 600, C.Color_4293212469, 700, C.Color_4292030255, 800, C.Color_4291176488, 900, C.Color_4290190364], [P.int, Q.Color]);
    C.Color_4293128957 = new Q.Color(4293128957);
    C.Color_4290502395 = new Q.Color(4290502395);
    C.Color_4287679225 = new Q.Color(4287679225);
    C.Color_4284790262 = new Q.Color(4284790262);
    C.Color_4282557941 = new Q.Color(4282557941);
    C.Color_4280391411 = new Q.Color(4280391411);
    C.Color_4280191205 = new Q.Color(4280191205);
    C.Color_4279858898 = new Q.Color(4279858898);
    C.Color_4279592384 = new Q.Color(4279592384);
    C.Color_4279060385 = new Q.Color(4279060385);
    C.Map_JNwaj = new H.GeneralConstantMap([50, C.Color_4293128957, 100, C.Color_4290502395, 200, C.Color_4287679225, 300, C.Color_4284790262, 400, C.Color_4282557941, 500, C.Color_4280391411, 600, C.Color_4280191205, 700, C.Color_4279858898, 800, C.Color_4279592384, 900, C.Color_4279060385], [P.int, Q.Color]);
    C.SvgPathSegType_1 = new L.SvgPathSegType("SvgPathSegType.close");
    C.SvgPathSegType_2 = new L.SvgPathSegType("SvgPathSegType.moveToAbs");
    C.SvgPathSegType_3 = new L.SvgPathSegType("SvgPathSegType.moveToRel");
    C.SvgPathSegType_4 = new L.SvgPathSegType("SvgPathSegType.lineToAbs");
    C.SvgPathSegType_5 = new L.SvgPathSegType("SvgPathSegType.lineToRel");
    C.SvgPathSegType_6 = new L.SvgPathSegType("SvgPathSegType.cubicToAbs");
    C.SvgPathSegType_7 = new L.SvgPathSegType("SvgPathSegType.cubicToRel");
    C.SvgPathSegType_8 = new L.SvgPathSegType("SvgPathSegType.quadToAbs");
    C.SvgPathSegType_9 = new L.SvgPathSegType("SvgPathSegType.quadToRel");
    C.SvgPathSegType_10 = new L.SvgPathSegType("SvgPathSegType.arcToAbs");
    C.SvgPathSegType_11 = new L.SvgPathSegType("SvgPathSegType.arcToRel");
    C.SvgPathSegType_12 = new L.SvgPathSegType("SvgPathSegType.lineToHorizontalAbs");
    C.SvgPathSegType_13 = new L.SvgPathSegType("SvgPathSegType.lineToHorizontalRel");
    C.SvgPathSegType_14 = new L.SvgPathSegType("SvgPathSegType.lineToVerticalAbs");
    C.SvgPathSegType_15 = new L.SvgPathSegType("SvgPathSegType.lineToVerticalRel");
    C.SvgPathSegType_16 = new L.SvgPathSegType("SvgPathSegType.smoothCubicToAbs");
    C.SvgPathSegType_17 = new L.SvgPathSegType("SvgPathSegType.smoothCubicToRel");
    C.SvgPathSegType_18 = new L.SvgPathSegType("SvgPathSegType.smoothQuadToAbs");
    C.SvgPathSegType_19 = new L.SvgPathSegType("SvgPathSegType.smoothQuadToRel");
    C.Map_ekiLr = new H.GeneralConstantMap([90, C.SvgPathSegType_1, 122, C.SvgPathSegType_1, 77, C.SvgPathSegType_2, 109, C.SvgPathSegType_3, 76, C.SvgPathSegType_4, 108, C.SvgPathSegType_5, 67, C.SvgPathSegType_6, 99, C.SvgPathSegType_7, 81, C.SvgPathSegType_8, 113, C.SvgPathSegType_9, 65, C.SvgPathSegType_10, 97, C.SvgPathSegType_11, 72, C.SvgPathSegType_12, 104, C.SvgPathSegType_13, 86, C.SvgPathSegType_14, 118, C.SvgPathSegType_15, 83, C.SvgPathSegType_16, 115, C.SvgPathSegType_17, 84, C.SvgPathSegType_18, 116, C.SvgPathSegType_19], [P.int, L.SvgPathSegType]);
    C.Map_empty0 = new H.ConstantStringMap(0, {}, C.List_empty5, [P.String, {func: 1, ret: N.Widget, args: [N.BuildContext]}]);
    C.Map_empty1 = new H.ConstantStringMap(0, {}, C.List_empty5, [P.String, null]);
    C.List_empty8 = H.setRuntimeTypeInfo(makeConstList([]), [P.Symbol0]);
    C.Map_empty = new H.ConstantStringMap(0, {}, C.List_empty8, [P.Symbol0, null]);
    C.List_empty9 = H.setRuntimeTypeInfo(makeConstList([]), [P.Type]);
    C.Map_empty2 = new H.ConstantStringMap(0, {}, C.List_empty9, [P.Type, S.GestureRecognizer]);
    C.Map_empty3 = new H.ConstantStringMap(0, {}, C.List_empty9, [P.Type, [D.GestureRecognizerFactory, S.GestureRecognizer]]);
    C.Color_4289200107 = new Q.Color(4289200107);
    C.Color_4284809178 = new Q.Color(4284809178);
    C.Color_4280150454 = new Q.Color(4280150454);
    C.Color_4278239141 = new Q.Color(4278239141);
    C.Map_iTYZn = new H.GeneralConstantMap([100, C.Color_4289200107, 200, C.Color_4284809178, 400, C.Color_4280150454, 700, C.Color_4278239141], [P.int, Q.Color]);
    C.C_CupertinoPageTransitionsBuilder = new K.CupertinoPageTransitionsBuilder();
    C.Map_leqom = new H.GeneralConstantMap([C.TargetPlatform_0, C.C_FadeUpwardsPageTransitionsBuilder, C.TargetPlatform_2, C.C_CupertinoPageTransitionsBuilder], [T.TargetPlatform, K.PageTransitionsBuilder]);
    C.Map_yXAeS = new H.GeneralConstantMap([0, "FontWeight.w100", 1, "FontWeight.w200", 2, "FontWeight.w300", 3, "FontWeight.w400", 4, "FontWeight.w500", 5, "FontWeight.w600", 6, "FontWeight.w700", 7, "FontWeight.w800", 8, "FontWeight.w900"], [P.int, P.String]);
    C.MaterialColor_Map_JNwaj_4280391411 = new E.MaterialColor(C.Map_JNwaj, 4280391411);
    C.MaterialTapTargetSize_0 = new X.MaterialTapTargetSize("MaterialTapTargetSize.padded");
    C.MaterialTapTargetSize_1 = new X.MaterialTapTargetSize("MaterialTapTargetSize.shrinkWrap");
    C.MaterialType_0 = new M.MaterialType("MaterialType.canvas");
    C.MaterialType_1 = new M.MaterialType("MaterialType.card");
    C.MaterialType_2 = new M.MaterialType("MaterialType.circle");
    C.MaterialType_3 = new M.MaterialType("MaterialType.button");
    C.MaterialType_4 = new M.MaterialType("MaterialType.transparency");
    C.C_JSONMethodCodec0 = new U.JSONMethodCodec();
    C.MethodChannel_89P = new A.MethodChannel("flutter/navigation", C.C_JSONMethodCodec0);
    C.Offset_0_0 = new Q.Offset(0, 0);
    C.Offset_0_1 = new Q.Offset(0, 1);
    C.Offset_0_m1 = new Q.Offset(0, -1);
    C.Offset_1_0 = new Q.Offset(1, 0);
    C.Offset_Oho = new Q.Offset(-0.3333333333333333, 0);
    C.Offset_chs = new Q.Offset(0, 0.25);
    C.Offset_m1_0 = new Q.Offset(-1, 0);
    C.OptionalMethodChannel_cWd = new A.OptionalMethodChannel("flutter/platform", C.C_JSONMethodCodec0);
    C.Overflow_1 = new K.Overflow("Overflow.clip");
    C.PageScrollPhysics_null = new D.PageScrollPhysics(null);
    C.PaintingStyle_0 = new Q.PaintingStyle("PaintingStyle.fill");
    C.PaintingStyle_1 = new Q.PaintingStyle("PaintingStyle.stroke");
    C.PathFillType_0 = new Q.PathFillType("PathFillType.nonZero");
    C.PersistedSurfaceReuseStrategy_0 = new Q.PersistedSurfaceReuseStrategy("PersistedSurfaceReuseStrategy.match");
    C.PersistedSurfaceReuseStrategy_1 = new Q.PersistedSurfaceReuseStrategy("PersistedSurfaceReuseStrategy.retain");
    C.PointerChange_0 = new Q.PointerChange("PointerChange.cancel");
    C.PointerChange_1 = new Q.PointerChange("PointerChange.add");
    C.PointerChange_2 = new Q.PointerChange("PointerChange.remove");
    C.PointerChange_3 = new Q.PointerChange("PointerChange.hover");
    C.PointerChange_4 = new Q.PointerChange("PointerChange.down");
    C.PointerChange_5 = new Q.PointerChange("PointerChange.move");
    C.PointerChange_6 = new Q.PointerChange("PointerChange.up");
    C.PointerDeviceKind_0 = new Q.PointerDeviceKind("PointerDeviceKind.touch");
    C.PointerDeviceKind_1 = new Q.PointerDeviceKind("PointerDeviceKind.mouse");
    C.PointerDeviceKind_2 = new Q.PointerDeviceKind("PointerDeviceKind.stylus");
    C.PointerDeviceKind_3 = new Q.PointerDeviceKind("PointerDeviceKind.invertedStylus");
    C.PointerDeviceKind_4 = new Q.PointerDeviceKind("PointerDeviceKind.unknown");
    C.PointerSignalKind_0 = new Q.PointerSignalKind("PointerSignalKind.none");
    C.PointerSignalKind_1 = new Q.PointerSignalKind("PointerSignalKind.scroll");
    C.PointerSignalKind_2 = new Q.PointerSignalKind("PointerSignalKind.unknown");
    C.Rect_0_0_0_0 = new Q.Rect(0, 0, 0, 0);
    C.Rect_aha = new Q.Rect(-1000000000, -1000000000, 1000000000, 1000000000);
    C.RenderComparison_0 = new G.RenderComparison(0, "RenderComparison.identical");
    C.RenderComparison_1 = new G.RenderComparison(1, "RenderComparison.metadata");
    C.RenderComparison_2 = new G.RenderComparison(2, "RenderComparison.paint");
    C.RenderComparison_3 = new G.RenderComparison(3, "RenderComparison.layout");
    C.Role_0 = new T.Role("Role.incrementable");
    C.Role_1 = new T.Role("Role.scrollable");
    C.Role_2 = new T.Role("Role.labelAndValue");
    C.Role_3 = new T.Role("Role.tappable");
    C.Role_4 = new T.Role("Role.textField");
    C.Role_5 = new T.Role("Role.checkable");
    C.RoundedRectangleBorder_yx31 = new X.RoundedRectangleBorder(C.BorderSide_m7u, C.BorderRadius_tLn);
    C.Radius_2_2 = new Q.Radius(2, 2);
    C.BorderRadius_tLn0 = new K.BorderRadius(C.Radius_2_2, C.Radius_2_2, C.Radius_2_2, C.Radius_2_2);
    C.RoundedRectangleBorder_yx3 = new X.RoundedRectangleBorder(C.BorderSide_m7u, C.BorderRadius_tLn0);
    C.Radius_4_4 = new Q.Radius(4, 4);
    C.BorderRadius_tLn1 = new K.BorderRadius(C.Radius_4_4, C.Radius_4_4, C.Radius_4_4, C.Radius_4_4);
    C.RoundedRectangleBorder_yx30 = new X.RoundedRectangleBorder(C.BorderSide_m7u, C.BorderRadius_tLn1);
    C.RoutePopDisposition_0 = new K.RoutePopDisposition("RoutePopDisposition.pop");
    C.RoutePopDisposition_1 = new K.RoutePopDisposition("RoutePopDisposition.doNotPop");
    C.RoutePopDisposition_2 = new K.RoutePopDisposition("RoutePopDisposition.bubble");
    C.RouteSettings_null_false_null = new K.RouteSettings(null, false, null);
    C.ScaffoldGeometry_null_null = new M.ScaffoldGeometry(null, null);
    C.SchedulerPhase_0 = new N.SchedulerPhase(0, "SchedulerPhase.idle");
    C.SchedulerPhase_1 = new N.SchedulerPhase(1, "SchedulerPhase.transientCallbacks");
    C.SchedulerPhase_2 = new N.SchedulerPhase(2, "SchedulerPhase.midFrameMicrotasks");
    C.SchedulerPhase_3 = new N.SchedulerPhase(3, "SchedulerPhase.persistentCallbacks");
    C.SchedulerPhase_4 = new N.SchedulerPhase(4, "SchedulerPhase.postFrameCallbacks");
    C.ScriptCategory_0 = new U.ScriptCategory("ScriptCategory.englishLike");
    C.ScriptCategory_1 = new U.ScriptCategory("ScriptCategory.dense");
    C.ScriptCategory_2 = new U.ScriptCategory("ScriptCategory.tall");
    C.ScrollDirection_0 = new N.ScrollDirection("ScrollDirection.idle");
    C.ScrollDirection_1 = new N.ScrollDirection("ScrollDirection.forward");
    C.ScrollDirection_2 = new N.ScrollDirection("ScrollDirection.reverse");
    C.SemanticsAction_1 = new Q.SemanticsAction(1);
    C.SemanticsAction_1024 = new Q.SemanticsAction(1024);
    C.SemanticsAction_128 = new Q.SemanticsAction(128);
    C.SemanticsAction_16 = new Q.SemanticsAction(16);
    C.SemanticsAction_16384 = new Q.SemanticsAction(16384);
    C.SemanticsAction_2 = new Q.SemanticsAction(2);
    C.SemanticsAction_2048 = new Q.SemanticsAction(2048);
    C.SemanticsAction_256 = new Q.SemanticsAction(256);
    C.SemanticsAction_262144 = new Q.SemanticsAction(262144);
    C.SemanticsAction_32 = new Q.SemanticsAction(32);
    C.SemanticsAction_32768 = new Q.SemanticsAction(32768);
    C.SemanticsAction_4 = new Q.SemanticsAction(4);
    C.SemanticsAction_4096 = new Q.SemanticsAction(4096);
    C.SemanticsAction_512 = new Q.SemanticsAction(512);
    C.SemanticsAction_64 = new Q.SemanticsAction(64);
    C.SemanticsAction_65536 = new Q.SemanticsAction(65536);
    C.SemanticsAction_8 = new Q.SemanticsAction(8);
    C.SemanticsAction_8192 = new Q.SemanticsAction(8192);
    C.SemanticsFlag_1 = new Q.SemanticsFlag(1);
    C.SemanticsFlag_1024 = new Q.SemanticsFlag(1024);
    C.SemanticsFlag_128 = new Q.SemanticsFlag(128);
    C.SemanticsFlag_131072 = new Q.SemanticsFlag(131072);
    C.SemanticsFlag_16 = new Q.SemanticsFlag(16);
    C.SemanticsFlag_16384 = new Q.SemanticsFlag(16384);
    C.SemanticsFlag_2 = new Q.SemanticsFlag(2);
    C.SemanticsFlag_2048 = new Q.SemanticsFlag(2048);
    C.SemanticsFlag_256 = new Q.SemanticsFlag(256);
    C.SemanticsFlag_262144 = new Q.SemanticsFlag(262144);
    C.SemanticsFlag_32 = new Q.SemanticsFlag(32);
    C.SemanticsFlag_32768 = new Q.SemanticsFlag(32768);
    C.SemanticsFlag_4 = new Q.SemanticsFlag(4);
    C.SemanticsFlag_4096 = new Q.SemanticsFlag(4096);
    C.SemanticsFlag_512 = new Q.SemanticsFlag(512);
    C.SemanticsFlag_64 = new Q.SemanticsFlag(64);
    C.SemanticsFlag_65536 = new Q.SemanticsFlag(65536);
    C.SemanticsFlag_8 = new Q.SemanticsFlag(8);
    C.SemanticsFlag_8192 = new Q.SemanticsFlag(8192);
    C.SemanticsTag_FIw = new A.SemanticsTag("RenderViewport.twoPane");
    C.SemanticsTag_bQQ = new A.SemanticsTag("RenderViewport.excludeFromScrolling");
    C.ShowValueIndicator_0 = new Q.ShowValueIndicator("ShowValueIndicator.onlyForDiscrete");
    C.Size_0_0 = new Q.Size(0, 0);
    C.Size_100000_100000 = new Q.Size(100000, 100000);
    C.Size_48_48 = new Q.Size(48, 48);
    C.SizedBox_0_0_null_null = new T.SizedBox(0, 0, null, null);
    C.SliverGeometry_yvr = new G.SliverGeometry(0, 0, 0, 0, 0, false, false, null, 0);
    C.SnackBarClosedReason_3 = new N.SnackBarClosedReason("SnackBarClosedReason.hide");
    C.SnackBarClosedReason_5 = new N.SnackBarClosedReason("SnackBarClosedReason.timeout");
    C.SpringType_0 = new M.SpringType("SpringType.criticallyDamped");
    C.SpringType_1 = new M.SpringType("SpringType.underDamped");
    C.SpringType_2 = new M.SpringType("SpringType.overDamped");
    C.StackFit_0 = new K.StackFit("StackFit.loose");
    C.StackFit_1 = new K.StackFit("StackFit.expand");
    C.StackFit_2 = new K.StackFit("StackFit.passthrough");
    C.StadiumBorder_wjC = new S.StadiumBorder(C.BorderSide_m7u);
    C.StrokeCap_0 = new Q.StrokeCap("StrokeCap.butt");
    C.StrokeCap_1 = new Q.StrokeCap("StrokeCap.round");
    C.StrokeCap_2 = new Q.StrokeCap("StrokeCap.square");
    C.SvgPathSegType_0 = new L.SvgPathSegType("SvgPathSegType.unknown");
    C.Symbol_call = new H.Symbol("call");
    C.SystemSoundType_0 = new V.SystemSoundType("SystemSoundType.click");
    C.TabBarTheme_IDd = new U.TabBarTheme(null, null, null, null, null, null);
    C.TapSemanticEvent_tap = new E.TapSemanticEvent("tap");
    C.TextAffinity_0 = new Q.TextAffinity("TextAffinity.upstream");
    C.TextAffinity_1 = new Q.TextAffinity("TextAffinity.downstream");
    C.TextAlign_0 = new Q.TextAlign("TextAlign.left");
    C.TextAlign_1 = new Q.TextAlign("TextAlign.right");
    C.TextAlign_2 = new Q.TextAlign("TextAlign.center");
    C.TextAlign_3 = new Q.TextAlign("TextAlign.justify");
    C.TextAlign_4 = new Q.TextAlign("TextAlign.start");
    C.TextAlign_5 = new Q.TextAlign("TextAlign.end");
    C.TextBaseline_0 = new Q.TextBaseline("TextBaseline.alphabetic");
    C.TextBaseline_1 = new Q.TextBaseline("TextBaseline.ideographic");
    C.TextDecorationStyle_0 = new Q.TextDecorationStyle("TextDecorationStyle.solid");
    C.TextDecorationStyle_1 = new Q.TextDecorationStyle("TextDecorationStyle.double");
    C.TextDecorationStyle_2 = new Q.TextDecorationStyle("TextDecorationStyle.dotted");
    C.TextDecorationStyle_3 = new Q.TextDecorationStyle("TextDecorationStyle.dashed");
    C.TextDecorationStyle_4 = new Q.TextDecorationStyle("TextDecorationStyle.wavy");
    C.TextDecoration_1 = new Q.TextDecoration(1);
    C.TextDecoration_2 = new Q.TextDecoration(2);
    C.TextDecoration_4 = new Q.TextDecoration(4);
    C.TextOverflow_1 = new Q.TextOverflow("TextOverflow.fade");
    C.TextOverflow_2 = new Q.TextOverflow("TextOverflow.ellipsis");
    C.TextOverflow_3 = new Q.TextOverflow("TextOverflow.visible");
    C.TextStyle_CKH = new A.TextStyle0(true, null, null, null, null, null, null, C.FontWeight_6, null, null, null, null, null, null, null, null, null, null, null, null, null);
    C.Color_3506372608 = new Q.Color(3506372608);
    C.Color_4294967040 = new Q.Color(4294967040);
    C.TextStyle_YCI = new A.TextStyle0(true, C.Color_3506372608, null, "monospace", null, null, 48, C.FontWeight_8, null, null, null, null, null, null, null, null, C.TextDecoration_1, C.Color_4294967040, C.TextDecorationStyle_1, "fallback style; consider putting your text in a Material", null);
    C.TextStyle_znX = new A.TextStyle0(false, null, null, null, null, null, 112, C.FontWeight_0, null, null, null, C.TextBaseline_1, null, null, null, null, null, null, null, "dense display4 2014", null);
    C.TextStyle_znX0 = new A.TextStyle0(false, null, null, null, null, null, 56, C.FontWeight_3, null, null, null, C.TextBaseline_1, null, null, null, null, null, null, null, "dense display3 2014", null);
    C.TextStyle_znX1 = new A.TextStyle0(false, null, null, null, null, null, 45, C.FontWeight_3, null, null, null, C.TextBaseline_1, null, null, null, null, null, null, null, "dense display2 2014", null);
    C.TextStyle_znX2 = new A.TextStyle0(false, null, null, null, null, null, 34, C.FontWeight_3, null, null, null, C.TextBaseline_1, null, null, null, null, null, null, null, "dense display1 2014", null);
    C.TextStyle_kiY = new A.TextStyle0(false, null, null, null, null, null, 24, C.FontWeight_3, null, null, null, C.TextBaseline_1, null, null, null, null, null, null, null, "dense headline 2014", null);
    C.TextStyle_xH4 = new A.TextStyle0(false, null, null, null, null, null, 21, C.FontWeight_4, null, null, null, C.TextBaseline_1, null, null, null, null, null, null, null, "dense title 2014", null);
    C.TextStyle_qp3 = new A.TextStyle0(false, null, null, null, null, null, 17, C.FontWeight_3, null, null, null, C.TextBaseline_1, null, null, null, null, null, null, null, "dense subhead 2014", null);
    C.TextStyle_hi8 = new A.TextStyle0(false, null, null, null, null, null, 15, C.FontWeight_4, null, null, null, C.TextBaseline_1, null, null, null, null, null, null, null, "dense body2 2014", null);
    C.TextStyle_hi80 = new A.TextStyle0(false, null, null, null, null, null, 15, C.FontWeight_3, null, null, null, C.TextBaseline_1, null, null, null, null, null, null, null, "dense body1 2014", null);
    C.TextStyle_aZ8 = new A.TextStyle0(false, null, null, null, null, null, 13, C.FontWeight_3, null, null, null, C.TextBaseline_1, null, null, null, null, null, null, null, "dense caption 2014", null);
    C.TextStyle_mYV = new A.TextStyle0(false, null, null, null, null, null, 15, C.FontWeight_4, null, null, null, C.TextBaseline_1, null, null, null, null, null, null, null, "dense button 2014", null);
    C.TextStyle_IJC = new A.TextStyle0(false, null, null, null, null, null, 15, C.FontWeight_4, null, null, null, C.TextBaseline_1, null, null, null, null, null, null, null, "dense subtitle 2014", null);
    C.TextStyle_i7V = new A.TextStyle0(false, null, null, null, null, null, 11, C.FontWeight_3, null, null, null, C.TextBaseline_1, null, null, null, null, null, null, null, "dense overline 2014", null);
    C.TextTheme_2Vk = new R.TextTheme(C.TextStyle_znX, C.TextStyle_znX0, C.TextStyle_znX1, C.TextStyle_znX2, C.TextStyle_kiY, C.TextStyle_xH4, C.TextStyle_qp3, C.TextStyle_hi8, C.TextStyle_hi80, C.TextStyle_aZ8, C.TextStyle_mYV, C.TextStyle_IJC, C.TextStyle_i7V);
    C.TextDecoration_0 = new Q.TextDecoration(0);
    C.TextStyle_gLM = new A.TextStyle0(true, C.Color_2315255808, null, ".SF UI Display", null, null, null, null, null, null, null, null, null, null, null, null, C.TextDecoration_0, null, null, "blackCupertino display4", null);
    C.TextStyle_gLM0 = new A.TextStyle0(true, C.Color_2315255808, null, ".SF UI Display", null, null, null, null, null, null, null, null, null, null, null, null, C.TextDecoration_0, null, null, "blackCupertino display3", null);
    C.TextStyle_gLM1 = new A.TextStyle0(true, C.Color_2315255808, null, ".SF UI Display", null, null, null, null, null, null, null, null, null, null, null, null, C.TextDecoration_0, null, null, "blackCupertino display2", null);
    C.TextStyle_gLM2 = new A.TextStyle0(true, C.Color_2315255808, null, ".SF UI Display", null, null, null, null, null, null, null, null, null, null, null, null, C.TextDecoration_0, null, null, "blackCupertino display1", null);
    C.TextStyle_JIV = new A.TextStyle0(true, C.Color_3707764736, null, ".SF UI Display", null, null, null, null, null, null, null, null, null, null, null, null, C.TextDecoration_0, null, null, "blackCupertino headline", null);
    C.TextStyle_gsm = new A.TextStyle0(true, C.Color_3707764736, null, ".SF UI Display", null, null, null, null, null, null, null, null, null, null, null, null, C.TextDecoration_0, null, null, "blackCupertino title", null);
    C.TextStyle_39y = new A.TextStyle0(true, C.Color_3707764736, null, ".SF UI Text", null, null, null, null, null, null, null, null, null, null, null, null, C.TextDecoration_0, null, null, "blackCupertino subhead", null);
    C.TextStyle_62A = new A.TextStyle0(true, C.Color_3707764736, null, ".SF UI Text", null, null, null, null, null, null, null, null, null, null, null, null, C.TextDecoration_0, null, null, "blackCupertino body2", null);
    C.TextStyle_62A0 = new A.TextStyle0(true, C.Color_3707764736, null, ".SF UI Text", null, null, null, null, null, null, null, null, null, null, null, null, C.TextDecoration_0, null, null, "blackCupertino body1", null);
    C.TextStyle_yrN = new A.TextStyle0(true, C.Color_2315255808, null, ".SF UI Text", null, null, null, null, null, null, null, null, null, null, null, null, C.TextDecoration_0, null, null, "blackCupertino caption", null);
    C.TextStyle_KKo = new A.TextStyle0(true, C.Color_3707764736, null, ".SF UI Text", null, null, null, null, null, null, null, null, null, null, null, null, C.TextDecoration_0, null, null, "blackCupertino button", null);
    C.TextStyle_fsN = new A.TextStyle0(true, C.Color_4278190080, null, ".SF UI Text", null, null, null, null, null, null, null, null, null, null, null, null, C.TextDecoration_0, null, null, "blackCupertino subtitle", null);
    C.TextStyle_CuP = new A.TextStyle0(true, C.Color_4278190080, null, ".SF UI Text", null, null, null, null, null, null, null, null, null, null, null, null, C.TextDecoration_0, null, null, "blackCupertino overline", null);
    C.TextTheme_6TA = new R.TextTheme(C.TextStyle_gLM, C.TextStyle_gLM0, C.TextStyle_gLM1, C.TextStyle_gLM2, C.TextStyle_JIV, C.TextStyle_gsm, C.TextStyle_39y, C.TextStyle_62A, C.TextStyle_62A0, C.TextStyle_yrN, C.TextStyle_KKo, C.TextStyle_fsN, C.TextStyle_CuP);
    C.TextStyle_ewF = new A.TextStyle0(false, null, null, null, null, null, 112, C.FontWeight_0, null, null, null, C.TextBaseline_0, null, null, null, null, null, null, null, "englishLike display4 2014", null);
    C.TextStyle_ewF0 = new A.TextStyle0(false, null, null, null, null, null, 56, C.FontWeight_3, null, null, null, C.TextBaseline_0, null, null, null, null, null, null, null, "englishLike display3 2014", null);
    C.TextStyle_ewF1 = new A.TextStyle0(false, null, null, null, null, null, 45, C.FontWeight_3, null, null, null, C.TextBaseline_0, null, null, null, null, null, null, null, "englishLike display2 2014", null);
    C.TextStyle_ewF2 = new A.TextStyle0(false, null, null, null, null, null, 34, C.FontWeight_3, null, null, null, C.TextBaseline_0, null, null, null, null, null, null, null, "englishLike display1 2014", null);
    C.TextStyle_qNu = new A.TextStyle0(false, null, null, null, null, null, 24, C.FontWeight_3, null, null, null, C.TextBaseline_0, null, null, null, null, null, null, null, "englishLike headline 2014", null);
    C.TextStyle_4CA = new A.TextStyle0(false, null, null, null, null, null, 20, C.FontWeight_4, null, null, null, C.TextBaseline_0, null, null, null, null, null, null, null, "englishLike title 2014", null);
    C.TextStyle_eLw = new A.TextStyle0(false, null, null, null, null, null, 16, C.FontWeight_3, null, null, null, C.TextBaseline_0, null, null, null, null, null, null, null, "englishLike subhead 2014", null);
    C.TextStyle_GN8 = new A.TextStyle0(false, null, null, null, null, null, 14, C.FontWeight_4, null, null, null, C.TextBaseline_0, null, null, null, null, null, null, null, "englishLike body2 2014", null);
    C.TextStyle_GN80 = new A.TextStyle0(false, null, null, null, null, null, 14, C.FontWeight_3, null, null, null, C.TextBaseline_0, null, null, null, null, null, null, null, "englishLike body1 2014", null);
    C.TextStyle_Bjb = new A.TextStyle0(false, null, null, null, null, null, 12, C.FontWeight_3, null, null, null, C.TextBaseline_0, null, null, null, null, null, null, null, "englishLike caption 2014", null);
    C.TextStyle_0 = new A.TextStyle0(false, null, null, null, null, null, 14, C.FontWeight_4, null, null, null, C.TextBaseline_0, null, null, null, null, null, null, null, "englishLike button 2014", null);
    C.TextStyle_uIL = new A.TextStyle0(false, null, null, null, null, null, 14, C.FontWeight_4, null, 0.1, null, C.TextBaseline_0, null, null, null, null, null, null, null, "englishLike subtitle 2014", null);
    C.TextStyle_oMs = new A.TextStyle0(false, null, null, null, null, null, 10, C.FontWeight_3, null, 1.5, null, C.TextBaseline_0, null, null, null, null, null, null, null, "englishLike overline 2014", null);
    C.TextTheme_8Wd = new R.TextTheme(C.TextStyle_ewF, C.TextStyle_ewF0, C.TextStyle_ewF1, C.TextStyle_ewF2, C.TextStyle_qNu, C.TextStyle_4CA, C.TextStyle_eLw, C.TextStyle_GN8, C.TextStyle_GN80, C.TextStyle_Bjb, C.TextStyle_0, C.TextStyle_uIL, C.TextStyle_oMs);
    C.TextStyle_GgQ = new A.TextStyle0(false, null, null, null, null, null, 112, C.FontWeight_3, null, null, null, C.TextBaseline_0, null, null, null, null, null, null, null, "tall display4 2014", null);
    C.TextStyle_GgQ0 = new A.TextStyle0(false, null, null, null, null, null, 56, C.FontWeight_3, null, null, null, C.TextBaseline_0, null, null, null, null, null, null, null, "tall display3 2014", null);
    C.TextStyle_GgQ1 = new A.TextStyle0(false, null, null, null, null, null, 45, C.FontWeight_3, null, null, null, C.TextBaseline_0, null, null, null, null, null, null, null, "tall display2 2014", null);
    C.TextStyle_GgQ2 = new A.TextStyle0(false, null, null, null, null, null, 34, C.FontWeight_3, null, null, null, C.TextBaseline_0, null, null, null, null, null, null, null, "tall display1 2014", null);
    C.TextStyle_MNn = new A.TextStyle0(false, null, null, null, null, null, 24, C.FontWeight_3, null, null, null, C.TextBaseline_0, null, null, null, null, null, null, null, "tall headline 2014", null);
    C.TextStyle_p4z = new A.TextStyle0(false, null, null, null, null, null, 21, C.FontWeight_6, null, null, null, C.TextBaseline_0, null, null, null, null, null, null, null, "tall title 2014", null);
    C.TextStyle_wjV = new A.TextStyle0(false, null, null, null, null, null, 17, C.FontWeight_3, null, null, null, C.TextBaseline_0, null, null, null, null, null, null, null, "tall subhead 2014", null);
    C.TextStyle_25U = new A.TextStyle0(false, null, null, null, null, null, 15, C.FontWeight_6, null, null, null, C.TextBaseline_0, null, null, null, null, null, null, null, "tall body2 2014", null);
    C.TextStyle_25U0 = new A.TextStyle0(false, null, null, null, null, null, 15, C.FontWeight_3, null, null, null, C.TextBaseline_0, null, null, null, null, null, null, null, "tall body1 2014", null);
    C.TextStyle_i7B = new A.TextStyle0(false, null, null, null, null, null, 13, C.FontWeight_3, null, null, null, C.TextBaseline_0, null, null, null, null, null, null, null, "tall caption 2014", null);
    C.TextStyle_swW = new A.TextStyle0(false, null, null, null, null, null, 15, C.FontWeight_6, null, null, null, C.TextBaseline_0, null, null, null, null, null, null, null, "tall button 2014", null);
    C.TextStyle_CJj = new A.TextStyle0(false, null, null, null, null, null, 15, C.FontWeight_4, null, null, null, C.TextBaseline_0, null, null, null, null, null, null, null, "tall subtitle 2014", null);
    C.TextStyle_hIk = new A.TextStyle0(false, null, null, null, null, null, 11, C.FontWeight_3, null, null, null, C.TextBaseline_0, null, null, null, null, null, null, null, "tall overline 2014", null);
    C.TextTheme_AgA = new R.TextTheme(C.TextStyle_GgQ, C.TextStyle_GgQ0, C.TextStyle_GgQ1, C.TextStyle_GgQ2, C.TextStyle_MNn, C.TextStyle_p4z, C.TextStyle_wjV, C.TextStyle_25U, C.TextStyle_25U0, C.TextStyle_i7B, C.TextStyle_swW, C.TextStyle_CJj, C.TextStyle_hIk);
    C.TextStyle_TJV = new A.TextStyle0(true, C.Color_2315255808, null, "Roboto", null, null, null, null, null, null, null, null, null, null, null, null, C.TextDecoration_0, null, null, "blackMountainView display4", null);
    C.TextStyle_TJV0 = new A.TextStyle0(true, C.Color_2315255808, null, "Roboto", null, null, null, null, null, null, null, null, null, null, null, null, C.TextDecoration_0, null, null, "blackMountainView display3", null);
    C.TextStyle_TJV1 = new A.TextStyle0(true, C.Color_2315255808, null, "Roboto", null, null, null, null, null, null, null, null, null, null, null, null, C.TextDecoration_0, null, null, "blackMountainView display2", null);
    C.TextStyle_TJV2 = new A.TextStyle0(true, C.Color_2315255808, null, "Roboto", null, null, null, null, null, null, null, null, null, null, null, null, C.TextDecoration_0, null, null, "blackMountainView display1", null);
    C.TextStyle_mXg = new A.TextStyle0(true, C.Color_3707764736, null, "Roboto", null, null, null, null, null, null, null, null, null, null, null, null, C.TextDecoration_0, null, null, "blackMountainView headline", null);
    C.TextStyle_ww8 = new A.TextStyle0(true, C.Color_3707764736, null, "Roboto", null, null, null, null, null, null, null, null, null, null, null, null, C.TextDecoration_0, null, null, "blackMountainView title", null);
    C.TextStyle_xIp = new A.TextStyle0(true, C.Color_3707764736, null, "Roboto", null, null, null, null, null, null, null, null, null, null, null, null, C.TextDecoration_0, null, null, "blackMountainView subhead", null);
    C.TextStyle_Nrs = new A.TextStyle0(true, C.Color_3707764736, null, "Roboto", null, null, null, null, null, null, null, null, null, null, null, null, C.TextDecoration_0, null, null, "blackMountainView body2", null);
    C.TextStyle_Nrs0 = new A.TextStyle0(true, C.Color_3707764736, null, "Roboto", null, null, null, null, null, null, null, null, null, null, null, null, C.TextDecoration_0, null, null, "blackMountainView body1", null);
    C.TextStyle_SFN = new A.TextStyle0(true, C.Color_2315255808, null, "Roboto", null, null, null, null, null, null, null, null, null, null, null, null, C.TextDecoration_0, null, null, "blackMountainView caption", null);
    C.TextStyle_Aec = new A.TextStyle0(true, C.Color_3707764736, null, "Roboto", null, null, null, null, null, null, null, null, null, null, null, null, C.TextDecoration_0, null, null, "blackMountainView button", null);
    C.TextStyle_sQd = new A.TextStyle0(true, C.Color_4278190080, null, "Roboto", null, null, null, null, null, null, null, null, null, null, null, null, C.TextDecoration_0, null, null, "blackMountainView subtitle", null);
    C.TextStyle_EGJ = new A.TextStyle0(true, C.Color_4278190080, null, "Roboto", null, null, null, null, null, null, null, null, null, null, null, null, C.TextDecoration_0, null, null, "blackMountainView overline", null);
    C.TextTheme_IQy = new R.TextTheme(C.TextStyle_TJV, C.TextStyle_TJV0, C.TextStyle_TJV1, C.TextStyle_TJV2, C.TextStyle_mXg, C.TextStyle_ww8, C.TextStyle_xIp, C.TextStyle_Nrs, C.TextStyle_Nrs0, C.TextStyle_SFN, C.TextStyle_Aec, C.TextStyle_sQd, C.TextStyle_EGJ);
    C.TextStyle_66y = new A.TextStyle0(true, C.Color_3019898879, null, "Roboto", null, null, null, null, null, null, null, null, null, null, null, null, C.TextDecoration_0, null, null, "whiteMountainView display4", null);
    C.TextStyle_66y0 = new A.TextStyle0(true, C.Color_3019898879, null, "Roboto", null, null, null, null, null, null, null, null, null, null, null, null, C.TextDecoration_0, null, null, "whiteMountainView display3", null);
    C.TextStyle_66y1 = new A.TextStyle0(true, C.Color_3019898879, null, "Roboto", null, null, null, null, null, null, null, null, null, null, null, null, C.TextDecoration_0, null, null, "whiteMountainView display2", null);
    C.TextStyle_66y2 = new A.TextStyle0(true, C.Color_3019898879, null, "Roboto", null, null, null, null, null, null, null, null, null, null, null, null, C.TextDecoration_0, null, null, "whiteMountainView display1", null);
    C.TextStyle_8oE = new A.TextStyle0(true, C.Color_4294967295, null, "Roboto", null, null, null, null, null, null, null, null, null, null, null, null, C.TextDecoration_0, null, null, "whiteMountainView headline", null);
    C.TextStyle_U06 = new A.TextStyle0(true, C.Color_4294967295, null, "Roboto", null, null, null, null, null, null, null, null, null, null, null, null, C.TextDecoration_0, null, null, "whiteMountainView title", null);
    C.TextStyle_sHD = new A.TextStyle0(true, C.Color_4294967295, null, "Roboto", null, null, null, null, null, null, null, null, null, null, null, null, C.TextDecoration_0, null, null, "whiteMountainView subhead", null);
    C.TextStyle_gGv = new A.TextStyle0(true, C.Color_4294967295, null, "Roboto", null, null, null, null, null, null, null, null, null, null, null, null, C.TextDecoration_0, null, null, "whiteMountainView body2", null);
    C.TextStyle_gGv0 = new A.TextStyle0(true, C.Color_4294967295, null, "Roboto", null, null, null, null, null, null, null, null, null, null, null, null, C.TextDecoration_0, null, null, "whiteMountainView body1", null);
    C.TextStyle_6Vn = new A.TextStyle0(true, C.Color_3019898879, null, "Roboto", null, null, null, null, null, null, null, null, null, null, null, null, C.TextDecoration_0, null, null, "whiteMountainView caption", null);
    C.TextStyle_MYA = new A.TextStyle0(true, C.Color_4294967295, null, "Roboto", null, null, null, null, null, null, null, null, null, null, null, null, C.TextDecoration_0, null, null, "whiteMountainView button", null);
    C.TextStyle_0JF = new A.TextStyle0(true, C.Color_4294967295, null, "Roboto", null, null, null, null, null, null, null, null, null, null, null, null, C.TextDecoration_0, null, null, "whiteMountainView subtitle", null);
    C.TextStyle_CSX = new A.TextStyle0(true, C.Color_4294967295, null, "Roboto", null, null, null, null, null, null, null, null, null, null, null, null, C.TextDecoration_0, null, null, "whiteMountainView overline", null);
    C.TextTheme_Wzh = new R.TextTheme(C.TextStyle_66y, C.TextStyle_66y0, C.TextStyle_66y1, C.TextStyle_66y2, C.TextStyle_8oE, C.TextStyle_U06, C.TextStyle_sHD, C.TextStyle_gGv, C.TextStyle_gGv0, C.TextStyle_6Vn, C.TextStyle_MYA, C.TextStyle_0JF, C.TextStyle_CSX);
    C.TextStyle_Gxg = new A.TextStyle0(true, C.Color_3019898879, null, ".SF UI Display", null, null, null, null, null, null, null, null, null, null, null, null, C.TextDecoration_0, null, null, "whiteCupertino display4", null);
    C.TextStyle_Gxg0 = new A.TextStyle0(true, C.Color_3019898879, null, ".SF UI Display", null, null, null, null, null, null, null, null, null, null, null, null, C.TextDecoration_0, null, null, "whiteCupertino display3", null);
    C.TextStyle_Gxg1 = new A.TextStyle0(true, C.Color_3019898879, null, ".SF UI Display", null, null, null, null, null, null, null, null, null, null, null, null, C.TextDecoration_0, null, null, "whiteCupertino display2", null);
    C.TextStyle_Gxg2 = new A.TextStyle0(true, C.Color_3019898879, null, ".SF UI Display", null, null, null, null, null, null, null, null, null, null, null, null, C.TextDecoration_0, null, null, "whiteCupertino display1", null);
    C.TextStyle_SIL = new A.TextStyle0(true, C.Color_4294967295, null, ".SF UI Display", null, null, null, null, null, null, null, null, null, null, null, null, C.TextDecoration_0, null, null, "whiteCupertino headline", null);
    C.TextStyle_NfP = new A.TextStyle0(true, C.Color_4294967295, null, ".SF UI Display", null, null, null, null, null, null, null, null, null, null, null, null, C.TextDecoration_0, null, null, "whiteCupertino title", null);
    C.TextStyle_Svw = new A.TextStyle0(true, C.Color_4294967295, null, ".SF UI Text", null, null, null, null, null, null, null, null, null, null, null, null, C.TextDecoration_0, null, null, "whiteCupertino subhead", null);
    C.TextStyle_U43 = new A.TextStyle0(true, C.Color_4294967295, null, ".SF UI Text", null, null, null, null, null, null, null, null, null, null, null, null, C.TextDecoration_0, null, null, "whiteCupertino body2", null);
    C.TextStyle_U430 = new A.TextStyle0(true, C.Color_4294967295, null, ".SF UI Text", null, null, null, null, null, null, null, null, null, null, null, null, C.TextDecoration_0, null, null, "whiteCupertino body1", null);
    C.TextStyle_o8I = new A.TextStyle0(true, C.Color_3019898879, null, ".SF UI Text", null, null, null, null, null, null, null, null, null, null, null, null, C.TextDecoration_0, null, null, "whiteCupertino caption", null);
    C.TextStyle_MUs = new A.TextStyle0(true, C.Color_4294967295, null, ".SF UI Text", null, null, null, null, null, null, null, null, null, null, null, null, C.TextDecoration_0, null, null, "whiteCupertino button", null);
    C.TextStyle_5gN = new A.TextStyle0(true, C.Color_4294967295, null, ".SF UI Text", null, null, null, null, null, null, null, null, null, null, null, null, C.TextDecoration_0, null, null, "whiteCupertino subtitle", null);
    C.TextStyle_gsm0 = new A.TextStyle0(true, C.Color_4294967295, null, ".SF UI Text", null, null, null, null, null, null, null, null, null, null, null, null, C.TextDecoration_0, null, null, "whiteCupertino overline", null);
    C.TextTheme_cg9 = new R.TextTheme(C.TextStyle_Gxg, C.TextStyle_Gxg0, C.TextStyle_Gxg1, C.TextStyle_Gxg2, C.TextStyle_SIL, C.TextStyle_NfP, C.TextStyle_Svw, C.TextStyle_U43, C.TextStyle_U430, C.TextStyle_o8I, C.TextStyle_MUs, C.TextStyle_5gN, C.TextStyle_gsm0);
    C.Threshold_znv = new Z.Threshold(0.5);
    C.TileMode_0 = new Q.TileMode("TileMode.clamp");
    C.Tolerance_Gdw = new N.Tolerance(0.001, 0.001);
    C.Tolerance_qbZ = new N.Tolerance(0.01, 1 / 0);
    C.Type_ByteBuffer_RkP = H.createRuntimeType(P.ByteBuffer);
    C.Type_ByteData_zNC = H.createRuntimeType(P.ByteData);
    C.Type_DefaultAssetBundle_8cA = H.createRuntimeType(T.DefaultAssetBundle);
    C.Type_DefaultTextStyle_ird = H.createRuntimeType(L.DefaultTextStyle);
    C.Type_Directionality_8Om = H.createRuntimeType(T.Directionality);
    C.Type_DoubleTapGestureRecognizer_oyU = H.createRuntimeType(F.DoubleTapGestureRecognizer);
    C.Type_Float32List_LB7 = H.createRuntimeType(P.Float32List);
    C.Type_Float64List_LB7 = H.createRuntimeType(P.Float64List);
    C.Type_IconTheme_U8c = H.createRuntimeType(Y.IconTheme);
    C.Type_Int16List_uXf = H.createRuntimeType(P.Int16List);
    C.Type_Int32List_O50 = H.createRuntimeType(P.Int32List);
    C.Type_Int8List_ekJ = H.createRuntimeType(P.Int8List);
    C.Type_JSObject_8k0 = H.createRuntimeType(J.JSObject);
    C.Type_LabeledGlobalKey_6TW = H.createRuntimeType([N.LabeledGlobalKey, [N.State, N.StatefulWidget]]);
    C.Type_LongPressGestureRecognizer_46y = H.createRuntimeType(T.LongPressGestureRecognizer);
    C.Type_MaterialLocalizations_flR = H.createRuntimeType(U.MaterialLocalizations);
    C.Type_MediaQuery_nDB = H.createRuntimeType(F.MediaQuery);
    C.Type_Null_Yyn = H.createRuntimeType(P.Null);
    C.Type_OverscrollNotification_Ps9 = H.createRuntimeType(G.OverscrollNotification);
    C.Type_PageStorage_Jik = H.createRuntimeType(S.PageStorage);
    C.Type_PanGestureRecognizer_bbH = H.createRuntimeType(O.PanGestureRecognizer);
    C.Type_PrimaryScrollController_CZ8 = H.createRuntimeType(E.PrimaryScrollController);
    C.Type_ScrollConfiguration_eoF = H.createRuntimeType(K.ScrollConfiguration);
    C.Type_ShapeBorderClipper_QWG = H.createRuntimeType(E.ShapeBorderClipper);
    C.Type_String_k8F = H.createRuntimeType(P.String);
    C.Type_TapGestureRecognizer_62h = H.createRuntimeType(N.TapGestureRecognizer);
    C.Type_TickerMode_zTp = H.createRuntimeType(U.TickerMode);
    C.Type_Uint16List_2bx = H.createRuntimeType(P.Uint16List);
    C.Type_Uint32List_2bx = H.createRuntimeType(P.Uint32List);
    C.Type_Uint8ClampedList_Jik = H.createRuntimeType(P.Uint8ClampedList);
    C.Type_Uint8List_WLA = H.createRuntimeType(P.Uint8List);
    C.Type_Vq1 = H.createRuntimeType(O.HorizontalDragGestureRecognizer);
    C.Type_WidgetsLocalizations_43h = H.createRuntimeType(L.WidgetsLocalizations);
    C.Type__FocusScopeMarker_xw8 = H.createRuntimeType(L._FocusScopeMarker);
    C.Type__InheritedTheme_pIu = H.createRuntimeType(K._InheritedTheme);
    C.Type__LocalizationsScope_Lpb = H.createRuntimeType(L._LocalizationsScope);
    C.Type__ModalScopeStatus_sUr = H.createRuntimeType(T._ModalScopeStatus);
    C.Type_bool_lhE = H.createRuntimeType(P.bool);
    C.Type_double_K1J = H.createRuntimeType(P.double);
    C.Type_int_tHn = H.createRuntimeType(P.int);
    C.Type_mLh = H.createRuntimeType(O.VerticalDragGestureRecognizer);
    C.Type_num_cv7 = H.createRuntimeType(P.num);
    C.Velocity_Offset_0_0 = new R.Velocity(C.Offset_0_0);
    C.VerticalDirection_0 = new G.VerticalDirection("VerticalDirection.up");
    C.VerticalDirection_1 = new G.VerticalDirection("VerticalDirection.down");
    C.WindowPadding_0_0_0_0 = new Q.WindowPadding(0, 0, 0, 0);
    C._AnimationDirection_0 = new G._AnimationDirection("_AnimationDirection.forward");
    C._AnimationDirection_1 = new G._AnimationDirection("_AnimationDirection.reverse");
    C._CheckableKind_0 = new T._CheckableKind("_CheckableKind.checkbox");
    C._CheckableKind_1 = new T._CheckableKind("_CheckableKind.radio");
    C.Color_67108864 = new Q.Color(67108864);
    C.Color_301989888 = new Q.Color(301989888);
    C.Color_939524096 = new Q.Color(939524096);
    C.List_S2N = H.setRuntimeTypeInfo(makeConstList([C.Color_0, C.Color_67108864, C.Color_301989888, C.Color_939524096]), [Q.Color]);
    C.List_w61 = H.setRuntimeTypeInfo(makeConstList([0, 0.3, 0.6, 1]), [P.double]);
    C.AlignmentDirectional_Yr4 = new K.AlignmentDirectional(0.9, 0);
    C.AlignmentDirectional_1_0 = new K.AlignmentDirectional(1, 0);
    C.LinearGradient_Xsy = new T.LinearGradient(C.AlignmentDirectional_Yr4, C.AlignmentDirectional_1_0, C.TileMode_0, C.List_S2N, C.List_w61);
    C._CupertinoEdgeShadowDecoration_Igx = new D._CupertinoEdgeShadowDecoration(C.LinearGradient_Xsy);
    C._CupertinoEdgeShadowDecoration_null = new D._CupertinoEdgeShadowDecoration(null);
    C._DragState_0 = new O._DragState("_DragState.ready");
    C._DragState_1 = new O._DragState("_DragState.possible");
    C._DragState_2 = new O._DragState("_DragState.accepted");
    C._ElementLifecycle_0 = new N._ElementLifecycle("_ElementLifecycle.initial");
    C._GlowState_0 = new L._GlowState("_GlowState.idle");
    C._GlowState_1 = new L._GlowState("_GlowState.absorb");
    C._GlowState_2 = new L._GlowState("_GlowState.pull");
    C._GlowState_3 = new L._GlowState("_GlowState.recede");
    C._IterationMarker_null_2 = new P._IterationMarker(null, 2);
    C._PathOffset_0_0 = new T._PathOffset(0, 0);
    C._ScaffoldSlot_0 = new M._ScaffoldSlot("_ScaffoldSlot.body");
    C._ScaffoldSlot_1 = new M._ScaffoldSlot("_ScaffoldSlot.appBar");
    C._ScaffoldSlot_2 = new M._ScaffoldSlot("_ScaffoldSlot.bottomSheet");
    C._ScaffoldSlot_3 = new M._ScaffoldSlot("_ScaffoldSlot.snackBar");
    C._ScaffoldSlot_4 = new M._ScaffoldSlot("_ScaffoldSlot.persistentFooter");
    C._ScaffoldSlot_5 = new M._ScaffoldSlot("_ScaffoldSlot.bottomNavigationBar");
    C._ScaffoldSlot_6 = new M._ScaffoldSlot("_ScaffoldSlot.floatingActionButton");
    C._ScaffoldSlot_7 = new M._ScaffoldSlot("_ScaffoldSlot.drawer");
    C._ScaffoldSlot_8 = new M._ScaffoldSlot("_ScaffoldSlot.endDrawer");
    C._ScaffoldSlot_9 = new M._ScaffoldSlot("_ScaffoldSlot.statusBar");
    C._SingleTickerProviderHook_null = new E._SingleTickerProviderHook(null);
    C._StateLifecycle_0 = new N._StateLifecycle("_StateLifecycle.created");
    C._TrainHoppingMode_0 = new S._TrainHoppingMode("_TrainHoppingMode.minimize");
    C._TrainHoppingMode_1 = new S._TrainHoppingMode("_TrainHoppingMode.maximize");
    C._WordWrapParseMode_0 = new D._WordWrapParseMode("_WordWrapParseMode.inSpace");
    C._WordWrapParseMode_1 = new D._WordWrapParseMode("_WordWrapParseMode.inWord");
    C._WordWrapParseMode_2 = new D._WordWrapParseMode("_WordWrapParseMode.atBreak");
  })();
  var init = {mangledGlobalNames: {int: "int", double: "double", num: "num", String: "String", bool: "bool", Null: "Null", List: "List"}, mangledNames: {}, getTypeFromName: getGlobalFromName, metadata: [], types: [{func: 1, ret: P.Null}, {func: 1, ret: -1}, {func: 1, ret: P.Null, args: [W.Event]}, {func: 1, ret: -1, args: [X.AnimationStatus]}, {func: 1, args: [,]}, {func: 1, ret: P.Null, args: [P.StringBuffer]}, {func: 1, ret: P.Null, args: [,]}, {func: 1, ret: -1, args: [,]}, {func: 1, ret: P.Null, args: [,,]}, {func: 1, ret: P.Null, args: [N.Element]}, {func: 1, ret: -1, args: [N.Element]}, {func: 1, ret: N.Widget, args: [N.BuildContext]}, {func: 1, ret: -1, args: [P.Duration]}, {func: 1, ret: -1, args: [F.PointerEvent]}, {func: 1, ret: P.bool, args: [N.Element]}, {func: 1, ret: -1, args: [P.Object]}, {func: 1, ret: [P.Future, -1]}, {func: 1, ret: -1, args: [P.String,,]}, {func: 1, ret: -1, args: [O.DragUpdateDetails]}, {func: 1, ret: -1, args: [P.bool]}, {func: 1, ret: P.bool, args: [Q.TextSpan]}, {func: 1, ret: -1, args: [K.PaintingContext, Q.Offset]}, {func: 1, ret: P.int, args: [K.RenderObject, K.RenderObject]}, {func: 1, ret: P.Null, args: [K.RenderObject]}, {func: 1, ret: P.Null, args: [P.Duration]}, {func: 1, ret: P.Null, args: [P.ByteData]}, {func: 1, ret: P.bool}, {func: 1}, {func: 1, ret: P.String, args: [P.String]}, {func: 1, ret: P.Null, args: [, P.StackTrace]}, {func: 1, ret: [P.Future,,]}, {func: 1, ret: -1, args: [F.PointerDownEvent]}, {func: 1, ret: [P.Future, [P.Map, P.String,,]], args: [[P.Map, P.String, P.String]]}, {func: 1, ret: -1, args: [P.int]}, {func: 1, ret: -1, args: [{func: 1, ret: -1}]}, {func: 1, ret: P.int, args: [,,]}, {func: 1, ret: P.Null, args: [-1]}, {func: 1, ret: [P.Future, P.Null]}, {func: 1, ret: P.bool, args: [A.SemanticsNode]}, {func: 1, ret: P.int, args: [A.SemanticsNode, A.SemanticsNode]}, {func: 1, ret: P.Null, args: [P.num]}, {func: 1, ret: -1, args: [P.Object], opt: [P.StackTrace]}, {func: 1, ret: P.bool, args: [G.ScrollNotification]}, {func: 1, ret: R.ColorTween, args: [,]}, {func: 1, ret: -1, args: [P.Uint8List, P.String, P.int]}, {func: 1, ret: P.Null, args: [W.WheelEvent]}, {func: 1, ret: P.Null, args: [P.Object]}, {func: 1, ret: N.Widget, args: [N.BuildContext, P.int]}, {func: 1, ret: P.Null, args: [P.Timer]}, {func: 1, ret: [P.List,,], args: [,]}, {func: 1, ret: -1, args: [O.DragStartDetails]}, {func: 1, ret: -1, args: [O.DragEndDetails]}, {func: 1, ret: [P.Future, P.ServiceExtensionResponse], args: [P.String, [P.Map, P.String, P.String]]}, {func: 1, ret: P.int}, {func: 1, ret: P.bool, args: [Y.DiagnosticsNode]}, {func: 1, ret: P.Null, args: [O.VerticalDragGestureRecognizer]}, {func: 1, ret: O.VerticalDragGestureRecognizer}, {func: 1, ret: [K.Route,,], args: [K.RouteSettings]}, {func: 1, ret: P.bool, args: [P.String]}, {func: 1, ret: P.bool, args: [W.NodeValidator]}, {func: 1, ret: P.bool, args: [W.Element0, P.String, P.String, W._Html5NodeValidator]}, {func: 1, ret: [P.Future, P.ByteData], args: [P.ByteData]}, {func: 1, ret: P.bool, args: [W.Node]}, {func: 1, ret: P.Null, args: [G.SliverConstraints]}, {func: 1, ret: -1, named: {curve: Z.Curve, descendant: K.RenderObject, duration: P.Duration, rect: Q.Rect}}, {func: 1, ret: [R.Tween, P.double], args: [,]}, {func: 1, ret: P.Null, args: [T.GestureMode]}, {func: 1, ret: P.String, args: [P.int]}, {func: 1, ret: -1, args: [W.Event]}, {func: 1, ret: P.double}, {func: 1, ret: P.String}, {func: 1, ret: [R.Tween,,], args: [[R.Tween,,],, {func: 1, ret: [R.Tween,,], args: [,]}]}, {func: 1, ret: P.Null, args: [O.HorizontalDragGestureRecognizer]}, {func: 1, ret: O.HorizontalDragGestureRecognizer}, {func: 1, ret: P.bool, args: [,]}, {func: 1, ret: [P.Iterable, P.String], args: [P.String]}, {func: 1, ret: D._GestureArena}, {func: 1, ret: -1, args: [Q.PointerDataPacket]}, {func: 1, ret: -1, args: [B.AbstractNode]}, {func: 1, ret: G._PointerState}, {func: 1, ret: P.Null, args: [P.Symbol0,,]}, {func: 1, ret: P.Null, args: [P.int,,]}, {func: 1, ret: -1, args: [Y._TrackedAnnotation, P.int]}, {func: 1, ret: -1, args: [Y._TrackedAnnotation]}, {func: 1, ret: -1, args: [F._TapTracker]}, {func: 1, ret: [P.LinkedHashSet, {func: 1, ret: -1, args: [F.PointerEvent]}]}, {func: 1, ret: R.RectTween, args: [Q.Rect, Q.Rect]}, {func: 1, ret: [V.MaterialPageRoute,,], args: [K.RouteSettings, {func: 1, ret: N.Widget, args: [N.BuildContext]}]}, {func: 1, ret: E.FloatingActionButton, args: [N.BuildContext, {func: 1, ret: -1}]}, {func: 1, ret: -1, args: [, P.StackTrace]}, {func: 1, ret: P.double, args: [D._Diagonal]}, {func: 1, ret: -1, args: [P.Object, P.StackTrace]}, {func: 1, ret: Q.Rect}, {func: 1, ret: -1, args: [N.TapDownDetails]}, {func: 1, ret: P.bool, args: [U.LayoutChangedNotification]}, {func: 1, ret: P.Null, args: [P.bool]}, {func: 1, ret: -1, args: [P.String, P.int]}, {func: 1, ret: M.ShapeBorderTween, args: [,]}, {func: 1, ret: K.PageTransitionsBuilder, args: [T.TargetPlatform]}, {func: 1, ret: -1, args: [P.String], opt: [,]}, {func: 1, ret: T.CustomMultiChildLayout, args: [N.BuildContext, N.Widget]}, {func: 1, ret: -1, args: [W.Node, W.Node]}, {func: 1, ret: X.ThemeData}, {func: 1, ret: V.EdgeInsetsGeometry, args: [V.EdgeInsetsGeometry, Y.ShapeBorder]}, {func: 1, ret: Y.ShapeBorder, args: [Y.ShapeBorder]}, {func: 1, ret: P.String, args: [Y.ShapeBorder]}, {func: 1, ret: P.double, args: [P.int]}, {func: 1, ret: Q.Color, args: [Q.Color]}, {func: 1, ret: P.int, args: [P.int, P.int]}, {func: 1, ret: Y.DiagnosticsNode, args: [Q.TextSpan]}, {func: 1, ret: -1, args: [P.int, Q.SemanticsAction, P.ByteData]}, {func: 1, ret: Y.MouseTrackerAnnotation, args: [Q.Offset]}, {func: 1, ret: P.Null, args: [P.String]}, {func: 1, args: [, P.String]}, {func: 1, ret: P.Null, args: [{func: 1, ret: -1}]}, {func: 1, ret: -1, args: [K.RenderObject]}, {func: 1, ret: P.Uint8List, args: [P.int]}, {func: 1, ret: A.SemanticsConfiguration, args: [P.int, P.int]}, {func: 1, ret: [P._Future, P.Null]}, {func: 1, ret: P.bool, args: [S.RenderBox]}, {func: 1, ret: P.bool, args: [G.RenderSliver]}, {func: 1, ret: [P.Future, P.String], args: [P.String]}, {func: 1, ret: P.Uint8List, args: [,,]}, {func: 1, args: [P.String]}, {func: 1, ret: P.Null, args: [P.int, N._FrameCallbackEntry]}, {func: 1, ret: -1, args: [,,]}, {func: 1, ret: A.SemanticsNode, args: [A._TraversalSortNode]}, {func: 1, ret: Y.DiagnosticsNode, args: [A.SemanticsNode]}, {func: 1, ret: P.Null, args: [W.DomException]}, {func: 1, ret: K.ThemeDataTween, args: [,]}, {func: 1, ret: A.SemanticsNode, args: [P.int]}, {func: 1, ret: [P.Future, P.String]}, {func: 1, ret: [P.Stream, F.LicenseEntry]}, {func: 1, ret: Q.Paint}, {func: 1, ret: P.Null, args: [W.ProgressEvent]}, {func: 1, ret: D.PageView, args: [N.BuildContext, S.BoxConstraints]}, {func: 1, ret: P.bool, args: [L.KeepAliveNotification]}, {func: 1, ret: -1, opt: [P.Object]}, {func: 1, ret: [P.Future, P.double]}, {func: 1, ret: [P.Future, P.Null], args: [P.double]}, {func: 1, ret: [P.Future,,], args: [F.MethodCall0]}, {func: 1, ret: [P.Future, -1], args: [P.Object]}, {func: 1, ret: -1, args: [T.BitmapCanvas]}, {func: 1, ret: -1, args: [P.String, P.String]}, {func: 1, ret: N.ErrorWidget, args: [U.FlutterErrorDetails]}, {func: 1, ret: N.Element, args: [N.Element]}, {func: 1, ret: P.Null, args: [P.String,,]}, {func: 1, ret: N.TapGestureRecognizer}, {func: 1, ret: P.Null, args: [N.TapGestureRecognizer]}, {func: 1, ret: F.DoubleTapGestureRecognizer}, {func: 1, ret: P.Null, args: [F.DoubleTapGestureRecognizer]}, {func: 1, ret: T.LongPressGestureRecognizer}, {func: 1, ret: P.Null, args: [T.LongPressGestureRecognizer]}, {func: 1, ret: A.LayoutBuilder, args: [,]}, {func: 1, ret: N.Widget, args: [N.BuildContext, [B.AsyncSnapshot,,]]}, {func: 1, ret: N.Widget, args: [N.BuildContext, [X.Animation, P.double], [X.Animation, P.double]]}, {func: 1, ret: N.Widget, args: [N.BuildContext, [X.Animation, P.double], [X.Animation, P.double], N.Widget]}, {func: 1, ret: -1, args: [P.ByteData]}, {func: 1, ret: P.Null, args: [O.PanGestureRecognizer]}, {func: 1, ret: T.Positioned, args: [N.BuildContext, N.Widget]}, {func: 1, ret: -1, args: [T._HeroFlight]}, {func: 1, ret: N.Widget, args: [N.BuildContext, [X.Animation, P.double], T.HeroFlightDirection, N.BuildContext, N.BuildContext]}, {func: 1, ret: Y.IconTheme, args: [N.BuildContext]}, {func: 1, ret: P.int, args: [P.int]}, {func: 1, ret: G.TextStyleTween, args: [,]}, {func: 1, ret: G.BorderRadiusTween, args: [,]}, {func: 1, ret: -1, args: [S.BoxConstraints]}, {func: 1, ret: [P.Future,,], args: [L._Pending]}, {func: 1, ret: [P.Map, P.Type,,], args: [[P.List,,]]}, {func: 1, ret: [P.Map, P.Type,,], args: [[P.Map, P.Type,,]]}, {func: 1, ret: P.Null, args: [[P.Map, P.Type,,]]}, {func: 1, ret: P.Null, args: [N.TapDownDetails]}, {func: 1, bounds: [P.Object], ret: [P.Future, 0], args: [[K.Route, 0]]}, {func: 1, ret: P.bool, args: [[K.Route,,]]}, {func: 1, args: [W.Event]}, {func: 1, ret: Q.Viewport, args: [N.BuildContext, N.ViewportOffset]}, {func: 1, ret: N.Widget, args: [N.BuildContext, N.Widget]}, {func: 1, ret: P.Null, args: [[P.List, -1]]}, {func: 1, ret: N.Widget, args: [N.BuildContext, N.ViewportOffset]}, {func: 1, ret: -1, args: [O.DragDownDetails]}, {func: 1, ret: -1, args: [F.PointerSignalEvent]}, {func: 1, ret: -1, args: [S.RenderBox]}, {func: 1, ret: N.Widget}, {func: 1, ret: [P.Stream, P.int]}, {func: 1, ret: -1, args: [[P.List, Q.PointerData]]}, {func: 1, ret: O.PanGestureRecognizer}, {func: 1, ret: [P._Future,,], args: [,]}, {func: 1, ret: T.Incrementable, args: [T.SemanticsObject]}, {func: 1, ret: T.Scrollable, args: [T.SemanticsObject]}, {func: 1, ret: T.LabelAndValue, args: [T.SemanticsObject]}, {func: 1, ret: T.Tappable, args: [T.SemanticsObject]}, {func: 1, ret: T.TextField, args: [T.SemanticsObject]}, {func: 1, ret: T.Checkable, args: [T.SemanticsObject]}, {func: 1, ret: P.DateTime}, {func: 1, ret: W.FontFaceSet, args: [W.FontFace]}, {func: 1, ret: P.int, args: [T.ParagraphRuler, T.ParagraphRuler]}, {func: 1, ret: -1, args: [T.EditingState]}, {func: 1, ret: P.int, args: [Q._PaintRequest, Q._PaintRequest]}, {func: 1, ret: -1, args: [Q.PersistedSurface]}, {func: 1, ret: P.double, args: [P.String]}, {func: 1, ret: P.int, args: [P.int, P.Object]}, {func: 1, ret: P.Null, args: [,], opt: [P.StackTrace]}, {func: 1, ret: W.Element0, args: [W.Node]}, {func: 1, ret: P.int, args: [[P.Comparable,,], [P.Comparable,,]]}, {func: 1, args: [,,]}, {func: 1, ret: -1, args: [U.FlutterErrorDetails], named: {forceReport: P.bool}}, {func: 1, ret: -1, args: [P.String], named: {wrapWidth: P.int}}, {func: 1, ret: P.int, args: [[N._TaskEntry,,], [N._TaskEntry,,]]}, {func: 1, ret: P.bool, named: {priority: P.int, scheduler: N.SchedulerBinding}}, {func: 1, ret: [P.List, F.LicenseEntry], args: [P.String]}, {func: 1, ret: [P.Future, -1], args: [P.String, P.ByteData, {func: 1, ret: -1, args: [P.ByteData]}]}, {func: 1, ret: P.int, args: [N.Element, N.Element]}, {func: 1, ret: P.int, args: [N.Widget, P.int]}, {func: 1, ret: P.int, args: [A.SemanticsNode]}, {func: 1, ret: -1, args: [O.FocusScopeNode]}], interceptorsByTag: null, leafTags: null};
  (function staticFields() {
    $.Primitives_timerFrequency = null;
    $.Primitives_timerTicks = null;
    $.Closure_functionCounter = 0;
    $.BoundClosure_selfFieldNameCache = null;
    $.BoundClosure_receiverFieldNameCache = null;
    $._inTypeAssertion = false;
    $.getTagFunction = null;
    $.alternateTagFunction = null;
    $.prototypeForTagFunction = null;
    $.dispatchRecordsForInstanceTags = null;
    $.interceptorsForUncacheableTags = null;
    $.initNativeDispatchFlag = null;
    $._nextCallback = null;
    $._lastCallback = null;
    $._lastPriorityCallback = null;
    $._isInCallbackLoop = false;
    $.Zone__current = C.C__RootZone;
    $._toStringVisiting = [];
    $.Stopwatch__frequency = null;
    $.Element__parseDocument = null;
    $.Element__parseRange = null;
    $.Element__defaultValidator = null;
    $.Element__defaultSanitizer = null;
    $._Html5NodeValidator__attributeValidators = P.LinkedHashMap_LinkedHashMap$_empty(P.String, P.Function);
    $.Device__isOpera = null;
    $.Device__isIE = null;
    $.Device__isFirefox = null;
    $.Device__cachedCssPrefix = null;
    $.HookElement__currentContext = null;
    $.FlutterError__errorCount = 0;
    $.LicenseRegistry__collectors = null;
    $._debugPrintedCharacters = 0;
    $._debugPrintCompleter = null;
    $._debugPrintScheduled = false;
    $.GestureBinding__instance = null;
    $._PointerState__pointerCount = 0;
    $.PointerEventConverter__pointers = P.LinkedHashMap_LinkedHashMap$_empty(P.int, G._PointerState);
    $.RendererBinding__instance = null;
    $._SemanticsGeometry__transformRectTransform = null;
    $._timeDilation = 1;
    $.SchedulerBinding__instance = null;
    $.SemanticsBinding__instance = null;
    $.CustomSemanticsAction__nextId = 0;
    $.CustomSemanticsAction__actions = P.LinkedHashMap_LinkedHashMap$_empty(P.int, A.CustomSemanticsAction);
    $.CustomSemanticsAction__ids = P.LinkedHashMap_LinkedHashMap$_empty(A.CustomSemanticsAction, P.int);
    $.SemanticsNode__lastIdentifier = 0;
    $.BinaryMessages__handlers = P.LinkedHashMap_LinkedHashMap$_empty(P.String, {func: 1, ret: [P.Future, P.ByteData], args: [P.ByteData]});
    $.BinaryMessages__mockHandlers = P.LinkedHashMap_LinkedHashMap$_empty(P.String, {func: 1, ret: [P.Future, P.ByteData], args: [P.ByteData]});
    $.WidgetsApp_showPerformanceOverlayOverride = false;
    $.WidgetsBinding__instance = null;
    $.GlobalKey__registry = P.LinkedHashMap_LinkedHashMap$_empty([N.GlobalKey, [N.State, N.StatefulWidget]], N.Element);
    $.Element__nextHashCode = 1;
    $._engineInitialized = false;
    $._hotRestartListeners = H.setRuntimeTypeInfo([], [{func: 1, ret: -1}]);
    $._clipTextCounter = 0;
    $._browserEngine = null;
    $._originState = P.LinkedHashMap_LinkedHashMap$_literal(["origin", true], P.String, P.bool);
    $._flutterState = P.LinkedHashMap_LinkedHashMap$_literal(["flutter", true], P.String, P.bool);
    $.Keyboard__instance = null;
    $.PointerBinding__instance = null;
    $.BaseAdapter__listeners = P.LinkedHashMap_LinkedHashMap$_empty(P.String, {func: 1, args: [W.Event]});
    $._isWheelDeviceAdded = false;
    $.EngineSemanticsOwner__instance = null;
    $.TextMeasurementService__instance = null;
    $.Path__rawRecorder = null;
    $._webOnlyDidWarnAboutPerformanceOverlay = false;
    $.SceneBuilder__lastFrameScene = null;
    $._clipCounter = 0;
    $._recycledCanvases = H.setRuntimeTypeInfo([], [T.BitmapCanvas]);
    $._paintQueue = H.setRuntimeTypeInfo([], [Q._PaintRequest]);
    $._retainedSurfaces = H.setRuntimeTypeInfo([], [Q.PersistedSurface]);
    $._assetManager = null;
    $._fontCollection = null;
    $._webOnlyIsInitialized = false;
    $.Window__previousCanvas = null;
  })();
  (function lazyInitializers() {
    var _lazy = hunkHelpers.lazy;
    _lazy($, "DART_CLOSURE_PROPERTY_NAME", "$get$DART_CLOSURE_PROPERTY_NAME", function() {
      return H.getIsolateAffinityTag("_$dart_dartClosure");
    });
    _lazy($, "JS_INTEROP_INTERCEPTOR_TAG", "$get$JS_INTEROP_INTERCEPTOR_TAG", function() {
      return H.getIsolateAffinityTag("_$dart_js");
    });
    _lazy($, "TypeErrorDecoder_noSuchMethodPattern", "$get$TypeErrorDecoder_noSuchMethodPattern", function() {
      return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn({
        toString: function() {
          return "$receiver$";
        }
      }));
    });
    _lazy($, "TypeErrorDecoder_notClosurePattern", "$get$TypeErrorDecoder_notClosurePattern", function() {
      return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn({$method$: null,
        toString: function() {
          return "$receiver$";
        }
      }));
    });
    _lazy($, "TypeErrorDecoder_nullCallPattern", "$get$TypeErrorDecoder_nullCallPattern", function() {
      return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn(null));
    });
    _lazy($, "TypeErrorDecoder_nullLiteralCallPattern", "$get$TypeErrorDecoder_nullLiteralCallPattern", function() {
      return H.TypeErrorDecoder_extractPattern(function() {
        var $argumentsExpr$ = '$arguments$';
        try {
          null.$method$($argumentsExpr$);
        } catch (e) {
          return e.message;
        }
      }());
    });
    _lazy($, "TypeErrorDecoder_undefinedCallPattern", "$get$TypeErrorDecoder_undefinedCallPattern", function() {
      return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn(void 0));
    });
    _lazy($, "TypeErrorDecoder_undefinedLiteralCallPattern", "$get$TypeErrorDecoder_undefinedLiteralCallPattern", function() {
      return H.TypeErrorDecoder_extractPattern(function() {
        var $argumentsExpr$ = '$arguments$';
        try {
          (void 0).$method$($argumentsExpr$);
        } catch (e) {
          return e.message;
        }
      }());
    });
    _lazy($, "TypeErrorDecoder_nullPropertyPattern", "$get$TypeErrorDecoder_nullPropertyPattern", function() {
      return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokePropertyErrorOn(null));
    });
    _lazy($, "TypeErrorDecoder_nullLiteralPropertyPattern", "$get$TypeErrorDecoder_nullLiteralPropertyPattern", function() {
      return H.TypeErrorDecoder_extractPattern(function() {
        try {
          null.$method$;
        } catch (e) {
          return e.message;
        }
      }());
    });
    _lazy($, "TypeErrorDecoder_undefinedPropertyPattern", "$get$TypeErrorDecoder_undefinedPropertyPattern", function() {
      return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokePropertyErrorOn(void 0));
    });
    _lazy($, "TypeErrorDecoder_undefinedLiteralPropertyPattern", "$get$TypeErrorDecoder_undefinedLiteralPropertyPattern", function() {
      return H.TypeErrorDecoder_extractPattern(function() {
        try {
          (void 0).$method$;
        } catch (e) {
          return e.message;
        }
      }());
    });
    _lazy($, "_AsyncRun__scheduleImmediateClosure", "$get$_AsyncRun__scheduleImmediateClosure", function() {
      return P._AsyncRun__initializeScheduleImmediate();
    });
    _lazy($, "Future__nullFuture", "$get$Future__nullFuture", function() {
      return P._Future$zoneValue(null, C.C__RootZone, P.Null);
    });
    _lazy($, "Utf8Decoder__decoder", "$get$Utf8Decoder__decoder", function() {
      return P.Utf8Decoder__makeDecoder();
    });
    _lazy($, "_Base64Decoder__inverseAlphabet", "$get$_Base64Decoder__inverseAlphabet", function() {
      return H.NativeInt8List__create1(H._ensureNativeList(H.setRuntimeTypeInfo([-2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -2, -1, -2, -2, -2, -2, -2, 62, -2, 62, -2, 63, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, -2, -2, -2, -1, -2, -2, -2, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, -2, -2, -2, -2, 63, -2, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, -2, -2, -2, -2, -2], [P.int])));
    });
    _lazy($, "_Uri__needsNoEncoding", "$get$_Uri__needsNoEncoding", function() {
      return P.RegExp_RegExp("^[\\-\\.0-9A-Z_a-z~]*$");
    });
    _lazy($, "_scannerTables", "$get$_scannerTables", function() {
      return P._createTables();
    });
    _lazy($, "_extensions", "$get$_extensions", function() {
      return H.JsLinkedHashMap_JsLinkedHashMap$es6(P.String, {func: 1, ret: [P.Future, P.ServiceExtensionResponse], args: [P.String, [P.Map, P.String, P.String]]});
    });
    _lazy($, "Timeline__stack", "$get$Timeline__stack", function() {
      return H.setRuntimeTypeInfo([], [P._SyncBlock]);
    });
    _lazy($, "CssStyleDeclaration__propertyCache", "$get$CssStyleDeclaration__propertyCache", function() {
      return {};
    });
    _lazy($, "_Html5NodeValidator__allowedElements", "$get$_Html5NodeValidator__allowedElements", function() {
      return P.LinkedHashSet_LinkedHashSet$from(["A", "ABBR", "ACRONYM", "ADDRESS", "AREA", "ARTICLE", "ASIDE", "AUDIO", "B", "BDI", "BDO", "BIG", "BLOCKQUOTE", "BR", "BUTTON", "CANVAS", "CAPTION", "CENTER", "CITE", "CODE", "COL", "COLGROUP", "COMMAND", "DATA", "DATALIST", "DD", "DEL", "DETAILS", "DFN", "DIR", "DIV", "DL", "DT", "EM", "FIELDSET", "FIGCAPTION", "FIGURE", "FONT", "FOOTER", "FORM", "H1", "H2", "H3", "H4", "H5", "H6", "HEADER", "HGROUP", "HR", "I", "IFRAME", "IMG", "INPUT", "INS", "KBD", "LABEL", "LEGEND", "LI", "MAP", "MARK", "MENU", "METER", "NAV", "NOBR", "OL", "OPTGROUP", "OPTION", "OUTPUT", "P", "PRE", "PROGRESS", "Q", "S", "SAMP", "SECTION", "SELECT", "SMALL", "SOURCE", "SPAN", "STRIKE", "STRONG", "SUB", "SUMMARY", "SUP", "TABLE", "TBODY", "TD", "TEXTAREA", "TFOOT", "TH", "THEAD", "TIME", "TR", "TRACK", "TT", "U", "UL", "VAR", "VIDEO", "WBR"], P.String);
    });
    _lazy($, "Endian_host", "$get$Endian_host", function() {
      var t1 = H.NativeUint16List__create1(H._ensureNativeList(H.setRuntimeTypeInfo([1], [P.int]))).buffer;
      t1.toString;
      return H.NativeByteData_NativeByteData$view(t1, 0, null).getInt8(0) === 1 ? C.C_Endian : C.C_Endian0;
    });
    _lazy($, "useScrollController", "$get$useScrollController", function() {
      return new E.UseScrollController();
    });
    _lazy($, "sp", "$get$sp", function() {
      return F.sb(24, 6, null);
    });
    _lazy($, "dark", "$get$dark", function() {
      return F.c(4281479497);
    });
    _lazy($, "sDark", "$get$sDark", function() {
      return F.c(4281875280);
    });
    _lazy($, "green", "$get$green", function() {
      return F.c(4282974108);
    });
    _lazy($, "blue", "$get$blue", function() {
      return F.c(4282965759);
    });
    _lazy($, "_kFlingSpringDescription", "$get$_kFlingSpringDescription", function() {
      return M.SpringDescription$withDampingRatio(1, 1, 500);
    });
    _lazy($, "_kRightMiddleTween", "$get$_kRightMiddleTween", function() {
      return R.Tween$(C.Offset_1_0, C.Offset_0_0, Q.Offset);
    });
    _lazy($, "_kMiddleLeftTween", "$get$_kMiddleLeftTween", function() {
      return R.Tween$(C.Offset_0_0, C.Offset_Oho, Q.Offset);
    });
    _lazy($, "_kGradientShadowTween", "$get$_kGradientShadowTween", function() {
      return new G.DecorationTween(C._CupertinoEdgeShadowDecoration_null, C._CupertinoEdgeShadowDecoration_Igx);
    });
    _lazy($, "CupertinoPageRoute__popGestureInProgress", "$get$CupertinoPageRoute__popGestureInProgress", function() {
      return P.LinkedHashSet_LinkedHashSet([V.PageRoute,,]);
    });
    _lazy($, "sparseTextConfiguration", "$get$sparseTextConfiguration", function() {
      return Y.TextTreeConfiguration$(true, "", ":", "", "", "", "", true, false, "\n", true, "\u2502", "\u2514\u2500", "\u251c\u2500", " ", " ", "\u2502 ", "  ", "", true);
    });
    _lazy($, "dashedTextConfiguration", "$get$dashedTextConfiguration", function() {
      return Y.TextTreeConfiguration$(true, "", ":", "", "", "", "", true, false, "\n", true, "\u254e", "\u2514\u254c", "\u254e\u254c", " ", " ", "\u2502 ", "  ", "", true);
    });
    _lazy($, "denseTextConfiguration", "$get$denseTextConfiguration", function() {
      return Y.TextTreeConfiguration$(false, "", ":", ")", "(", "", "", false, false, "\n", false, "\u2502", "\u2514", "\u251c", "", "", "\u2502", " ", ", ", true);
    });
    _lazy($, "transitionTextConfiguration", "$get$transitionTextConfiguration", function() {
      return Y.TextTreeConfiguration$(false, ":", " \u2550\u2550\u2550", "", "", "  ", " \u255a\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\u2550\n", false, true, "\n", true, "\u2502", "\u2558\u2550\u2566\u2550\u2550 ", "\u255e\u2550\u2566\u2550\u2550 ", " \u2551 ", "", "", "", "", true);
    });
    _lazy($, "whitespaceTextConfiguration", "$get$whitespaceTextConfiguration", function() {
      return Y.TextTreeConfiguration$(false, ":", ":", "", "", "", "", false, false, "\n", true, " ", "", "", " ", "  ", "", "", "", true);
    });
    _lazy($, "singleLineTextConfiguration", "$get$singleLineTextConfiguration", function() {
      return Y.TextTreeConfiguration$(false, "", ":", ")", "(", "", "", true, false, "", false, "", "", "", "", "", "", "", ", ", false);
    });
    _lazy($, "_debugPrintBuffer", "$get$_debugPrintBuffer", function() {
      return P.ListQueue$(P.String);
    });
    _lazy($, "_debugPrintStopwatch", "$get$_debugPrintStopwatch", function() {
      return P.Stopwatch$();
    });
    _lazy($, "_indentPattern", "$get$_indentPattern", function() {
      return P.RegExp_RegExp("^ *(?:[-+*] |[0-9]+[.):] )?");
    });
    _lazy($, "_ScalingFabMotionAnimator__rotationTween", "$get$_ScalingFabMotionAnimator__rotationTween", function() {
      return R.Tween$(0.75, 1, P.double);
    });
    _lazy($, "_ScalingFabMotionAnimator__thresholdCenterTween", "$get$_ScalingFabMotionAnimator__thresholdCenterTween", function() {
      return R.CurveTween$(C.Threshold_znv);
    });
    _lazy($, "kMaterialEdges", "$get$kMaterialEdges", function() {
      return P.LinkedHashMap_LinkedHashMap$_literal([C.MaterialType_0, null, C.MaterialType_1, K.BorderRadius$circular(2), C.MaterialType_2, null, C.MaterialType_3, K.BorderRadius$circular(2), C.MaterialType_4, null], M.MaterialType, K.BorderRadius);
    });
    _lazy($, "_FadeUpwardsPageTransition__bottomUpTween", "$get$_FadeUpwardsPageTransition__bottomUpTween", function() {
      return R.Tween$(C.Offset_chs, C.Offset_0_0, Q.Offset);
    });
    _lazy($, "_FadeUpwardsPageTransition__fastOutSlowInTween", "$get$_FadeUpwardsPageTransition__fastOutSlowInTween", function() {
      return R.CurveTween$(C.Cubic_ifx);
    });
    _lazy($, "_FadeUpwardsPageTransition__easeInTween", "$get$_FadeUpwardsPageTransition__easeInTween", function() {
      return R.CurveTween$(C.Cubic_JUR);
    });
    _lazy($, "_FloatingActionButtonTransitionState__entranceTurnTween", "$get$_FloatingActionButtonTransitionState__entranceTurnTween", function() {
      return R.Tween$(0.875, 1, P.double).chain$1(R.CurveTween$(C.Cubic_JUR));
    });
    _lazy($, "Theme__kFallbackTheme", "$get$Theme__kFallbackTheme", function() {
      return X.ThemeData_ThemeData$fallback();
    });
    _lazy($, "ThemeData__localizedThemeDataCache", "$get$ThemeData__localizedThemeDataCache", function() {
      var t1 = X._IdentityThemeDataCacheKey,
        t2 = X.ThemeData;
      return new X._FifoCache(P.LinkedHashMap_LinkedHashMap$_empty(t1, t2), 5, [t1, t2]);
    });
    _lazy($, "RenderErrorBox_textStyle", "$get$RenderErrorBox_textStyle", function() {
      var _null = null;
      return Q.TextStyle$(_null, C.Color_4294967142, _null, _null, _null, "monospace", _null, 14, _null, C.FontWeight_6, _null, _null, _null, _null, _null, _null, _null);
    });
    _lazy($, "RenderErrorBox_paragraphStyle", "$get$RenderErrorBox_paragraphStyle", function() {
      var _null = null;
      return Q.ParagraphStyle$(_null, _null, _null, _null, _null, 1, _null, _null, _null, _null, _null);
    });
    _lazy($, "_RenderPhysicalModelBase__transparentPaint", "$get$_RenderPhysicalModelBase__transparentPaint", function() {
      var t1 = Q.Paint$();
      t1.set$color(0, C.Color_0);
      return t1;
    });
    _lazy($, "SemanticsNode__kEmptyConfig", "$get$SemanticsNode__kEmptyConfig", function() {
      return A.SemanticsConfiguration$();
    });
    _lazy($, "SemanticsNode__kEmptyChildList", "$get$SemanticsNode__kEmptyChildList", function() {
      return H.NativeInt32List_NativeInt32List(0);
    });
    _lazy($, "SemanticsNode__kEmptyCustomSemanticsActionsList", "$get$SemanticsNode__kEmptyCustomSemanticsActionsList", function() {
      return H.NativeInt32List_NativeInt32List(0);
    });
    _lazy($, "SemanticsNode__kIdentityTransform", "$get$SemanticsNode__kIdentityTransform", function() {
      return E.Matrix4_Matrix4$identity()._m4storage;
    });
    _lazy($, "rootBundle", "$get$rootBundle", function() {
      var t1 = P.String;
      return new Q.PlatformAssetBundle(P.LinkedHashMap_LinkedHashMap$_empty(t1, [P.Future, P.String]), P.LinkedHashMap_LinkedHashMap$_empty(t1, [P.Future,,]));
    });
    _lazy($, "ErrorWidget_builder", "$get$ErrorWidget_builder", function() {
      return new N.ErrorWidget_closure();
    });
    _lazy($, "_HeroFlight__reverseTween", "$get$_HeroFlight__reverseTween", function() {
      return R.Tween$(1, 0, P.double);
    });
    _lazy($, "HeroController__defaultHeroFlightShuttleBuilder", "$get$HeroController__defaultHeroFlightShuttleBuilder", function() {
      return new T.HeroController_closure();
    });
    _lazy($, "_TheatreElement__onstageSlot", "$get$_TheatreElement__onstageSlot", function() {
      return new P.Object();
    });
    _lazy($, "_GlowController__crossAxisHalfTime", "$get$_GlowController__crossAxisHalfTime", function() {
      return P.Duration$(16667, 0, 0);
    });
    _lazy($, "ScrollPhysics__kDefaultSpring", "$get$ScrollPhysics__kDefaultSpring", function() {
      return M.SpringDescription$withDampingRatio(0.5, 1.1, 100);
    });
    _lazy($, "ScrollPhysics__kDefaultTolerance", "$get$ScrollPhysics__kDefaultTolerance", function() {
      var t1 = $.$get$window().devicePixelRatio;
      return N.Tolerance$(1 / t1, 1 / (0.05 * t1));
    });
    _lazy($, "ClampingScrollSimulation__kDecelerationRate", "$get$ClampingScrollSimulation__kDecelerationRate", function() {
      return P.log(0.78) / P.log(0.9);
    });
    _lazy($, "domRenderer", "$get$domRenderer", function() {
      var t1 = new T.DomRenderer(W.document().body);
      t1.reset$0(0);
      $.TextMeasurementService__instance = T.TextMeasurementService$_(10);
      return t1;
    });
    _lazy($, "SaveStackTracking__unitZ", "$get$SaveStackTracking__unitZ", function() {
      return T.Vector3_Vector3(0, 0, 1);
    });
    _lazy($, "_popRouteMethodCall", "$get$_popRouteMethodCall", function() {
      return T.MethodCall$("popRoute", null);
    });
    _lazy($, "SaveElementStackTracking__unitZ", "$get$SaveElementStackTracking__unitZ", function() {
      return T.Vector3_Vector3(0, 0, 1);
    });
    _lazy($, "_roleFactories", "$get$_roleFactories", function() {
      return P.LinkedHashMap_LinkedHashMap$_literal([C.Role_0, new T.closure(), C.Role_1, new T.closure0(), C.Role_2, new T.closure1(), C.Role_3, new T.closure2(), C.Role_4, new T.closure3(), C.Role_5, new T.closure4()], T.Role, {func: 1, ret: T.RoleManager, args: [T.SemanticsObject]});
    });
    _lazy($, "supportsFontLoadingApi", "$get$supportsFontLoadingApi", function() {
      return W.document().fonts != null;
    });
    _lazy($, "textEditing", "$get$textEditing", function() {
      return new T.HybridTextEditing(T.TextEditingElement$(), H.setRuntimeTypeInfo([], [[P.StreamSubscription,,]]));
    });
    _lazy($, "ParagraphBuilder__paragraphBuilderPop", "$get$ParagraphBuilder__paragraphBuilderPop", function() {
      return new P.Object();
    });
    _lazy($, "window", "$get$window", function() {
      return new Q.Window(new T.BrowserHistory(), C.Size_0_0, new Q.AccessibilityFeatures(0), new T.Rasterizer(new T.Surface(new T._CanvasCache(), Q.ui_Window__submitScene$closure()), new T.CompositorContext()));
    });
  })();
  (function nativeSupport() {
    !function() {
      var intern = function(s) {
        var o = {};
        o[s] = 1;
        return Object.keys(hunkHelpers.convertToFastObject(o))[0];
      };
      init.getIsolateTag = function(name) {
        return intern("___dart_" + name + init.isolateTag);
      };
      var tableProperty = "___dart_isolate_tags_";
      var usedProperties = Object[tableProperty] || (Object[tableProperty] = Object.create(null));
      var rootProperty = "_ZxYxX";
      for (var i = 0;; i++) {
        var property = intern(rootProperty + "_" + i + "_");
        if (!(property in usedProperties)) {
          usedProperties[property] = 1;
          init.isolateTag = property;
          break;
        }
      }
      init.dispatchPropertyName = init.getIsolateTag("dispatch_record");
    }();
    hunkHelpers.setOrUpdateInterceptorsByTag({AnimationEffectReadOnly: J.Interceptor, AnimationEffectTiming: J.Interceptor, AnimationEffectTimingReadOnly: J.Interceptor, AnimationTimeline: J.Interceptor, AnimationWorkletGlobalScope: J.Interceptor, AuthenticatorAssertionResponse: J.Interceptor, AuthenticatorAttestationResponse: J.Interceptor, AuthenticatorResponse: J.Interceptor, BackgroundFetchFetch: J.Interceptor, BackgroundFetchManager: J.Interceptor, BackgroundFetchSettledFetch: J.Interceptor, BarProp: J.Interceptor, BarcodeDetector: J.Interceptor, BluetoothRemoteGATTDescriptor: J.Interceptor, Body: J.Interceptor, BudgetState: J.Interceptor, CacheStorage: J.Interceptor, CanvasPattern: J.Interceptor, Client: J.Interceptor, Clients: J.Interceptor, CookieStore: J.Interceptor, Coordinates: J.Interceptor, Credential: J.Interceptor, CredentialUserData: J.Interceptor, CredentialsContainer: J.Interceptor, Crypto: J.Interceptor, CryptoKey: J.Interceptor, CSS: J.Interceptor, CSSVariableReferenceValue: J.Interceptor, CustomElementRegistry: J.Interceptor, DataTransfer: J.Interceptor, DataTransferItem: J.Interceptor, DeprecatedStorageInfo: J.Interceptor, DeprecatedStorageQuota: J.Interceptor, DeprecationReport: J.Interceptor, DetectedBarcode: J.Interceptor, DetectedFace: J.Interceptor, DetectedText: J.Interceptor, DeviceAcceleration: J.Interceptor, DeviceRotationRate: J.Interceptor, DirectoryReader: J.Interceptor, DocumentOrShadowRoot: J.Interceptor, DocumentTimeline: J.Interceptor, DOMError: J.Interceptor, DOMImplementation: J.Interceptor, Iterator: J.Interceptor, DOMMatrix: J.Interceptor, DOMMatrixReadOnly: J.Interceptor, DOMParser: J.Interceptor, DOMPoint: J.Interceptor, DOMPointReadOnly: J.Interceptor, DOMQuad: J.Interceptor, DOMStringMap: J.Interceptor, External: J.Interceptor, FaceDetector: J.Interceptor, FederatedCredential: J.Interceptor, DOMFileSystem: J.Interceptor, FontFaceSource: J.Interceptor, FormData: J.Interceptor, GamepadButton: J.Interceptor, GamepadPose: J.Interceptor, Geolocation: J.Interceptor, Position: J.Interceptor, Headers: J.Interceptor, HTMLHyperlinkElementUtils: J.Interceptor, IdleDeadline: J.Interceptor, ImageBitmap: J.Interceptor, ImageBitmapRenderingContext: J.Interceptor, ImageCapture: J.Interceptor, InputDeviceCapabilities: J.Interceptor, IntersectionObserver: J.Interceptor, IntersectionObserverEntry: J.Interceptor, InterventionReport: J.Interceptor, KeyframeEffect: J.Interceptor, KeyframeEffectReadOnly: J.Interceptor, MediaCapabilities: J.Interceptor, MediaCapabilitiesInfo: J.Interceptor, MediaDeviceInfo: J.Interceptor, MediaError: J.Interceptor, MediaKeyStatusMap: J.Interceptor, MediaKeySystemAccess: J.Interceptor, MediaKeys: J.Interceptor, MediaKeysPolicy: J.Interceptor, MediaMetadata: J.Interceptor, MediaSession: J.Interceptor, MediaSettingsRange: J.Interceptor, MemoryInfo: J.Interceptor, MessageChannel: J.Interceptor, Metadata: J.Interceptor, MutationObserver: J.Interceptor, WebKitMutationObserver: J.Interceptor, MutationRecord: J.Interceptor, NavigationPreloadManager: J.Interceptor, Navigator: J.Interceptor, NavigatorAutomationInformation: J.Interceptor, NavigatorConcurrentHardware: J.Interceptor, NavigatorCookies: J.Interceptor, NavigatorUserMediaError: J.Interceptor, NodeFilter: J.Interceptor, NodeIterator: J.Interceptor, NonDocumentTypeChildNode: J.Interceptor, NonElementParentNode: J.Interceptor, NoncedElement: J.Interceptor, OffscreenCanvasRenderingContext2D: J.Interceptor, OverconstrainedError: J.Interceptor, PaintRenderingContext2D: J.Interceptor, PaintSize: J.Interceptor, PaintWorkletGlobalScope: J.Interceptor, PasswordCredential: J.Interceptor, Path2D: J.Interceptor, PaymentAddress: J.Interceptor, PaymentInstruments: J.Interceptor, PaymentManager: J.Interceptor, PaymentResponse: J.Interceptor, PerformanceEntry: J.Interceptor, PerformanceLongTaskTiming: J.Interceptor, PerformanceMark: J.Interceptor, PerformanceMeasure: J.Interceptor, PerformanceNavigation: J.Interceptor, PerformanceNavigationTiming: J.Interceptor, PerformanceObserver: J.Interceptor, PerformanceObserverEntryList: J.Interceptor, PerformancePaintTiming: J.Interceptor, PerformanceResourceTiming: J.Interceptor, PerformanceServerTiming: J.Interceptor, PerformanceTiming: J.Interceptor, Permissions: J.Interceptor, PhotoCapabilities: J.Interceptor, PositionError: J.Interceptor, Presentation: J.Interceptor, PresentationReceiver: J.Interceptor, PublicKeyCredential: J.Interceptor, PushManager: J.Interceptor, PushMessageData: J.Interceptor, PushSubscription: J.Interceptor, PushSubscriptionOptions: J.Interceptor, RelatedApplication: J.Interceptor, ReportBody: J.Interceptor, ReportingObserver: J.Interceptor, ResizeObserver: J.Interceptor, ResizeObserverEntry: J.Interceptor, RTCCertificate: J.Interceptor, RTCIceCandidate: J.Interceptor, mozRTCIceCandidate: J.Interceptor, RTCLegacyStatsReport: J.Interceptor, RTCRtpContributingSource: J.Interceptor, RTCRtpReceiver: J.Interceptor, RTCRtpSender: J.Interceptor, RTCSessionDescription: J.Interceptor, mozRTCSessionDescription: J.Interceptor, RTCStatsResponse: J.Interceptor, Screen: J.Interceptor, ScrollState: J.Interceptor, ScrollTimeline: J.Interceptor, Selection: J.Interceptor, SharedArrayBuffer: J.Interceptor, SpeechRecognitionAlternative: J.Interceptor, SpeechSynthesisVoice: J.Interceptor, StaticRange: J.Interceptor, StorageManager: J.Interceptor, StyleMedia: J.Interceptor, StylePropertyMap: J.Interceptor, StylePropertyMapReadonly: J.Interceptor, SyncManager: J.Interceptor, TaskAttributionTiming: J.Interceptor, TextDetector: J.Interceptor, TextMetrics: J.Interceptor, TrackDefault: J.Interceptor, TreeWalker: J.Interceptor, TrustedHTML: J.Interceptor, TrustedScriptURL: J.Interceptor, TrustedURL: J.Interceptor, UnderlyingSourceBase: J.Interceptor, URLSearchParams: J.Interceptor, VRCoordinateSystem: J.Interceptor, VRDisplayCapabilities: J.Interceptor, VREyeParameters: J.Interceptor, VRFrameData: J.Interceptor, VRFrameOfReference: J.Interceptor, VRPose: J.Interceptor, VRStageBounds: J.Interceptor, VRStageBoundsPoint: J.Interceptor, VRStageParameters: J.Interceptor, ValidityState: J.Interceptor, VideoPlaybackQuality: J.Interceptor, VideoTrack: J.Interceptor, VTTRegion: J.Interceptor, WindowClient: J.Interceptor, WorkletAnimation: J.Interceptor, WorkletGlobalScope: J.Interceptor, XPathEvaluator: J.Interceptor, XPathExpression: J.Interceptor, XPathNSResolver: J.Interceptor, XPathResult: J.Interceptor, XMLSerializer: J.Interceptor, XSLTProcessor: J.Interceptor, Bluetooth: J.Interceptor, BluetoothCharacteristicProperties: J.Interceptor, BluetoothRemoteGATTServer: J.Interceptor, BluetoothRemoteGATTService: J.Interceptor, BluetoothUUID: J.Interceptor, BudgetService: J.Interceptor, Cache: J.Interceptor, DOMFileSystemSync: J.Interceptor, DirectoryEntrySync: J.Interceptor, DirectoryReaderSync: J.Interceptor, EntrySync: J.Interceptor, FileEntrySync: J.Interceptor, FileReaderSync: J.Interceptor, FileWriterSync: J.Interceptor, HTMLAllCollection: J.Interceptor, Mojo: J.Interceptor, MojoHandle: J.Interceptor, MojoWatcher: J.Interceptor, NFC: J.Interceptor, PagePopupController: J.Interceptor, Report: J.Interceptor, Request: J.Interceptor, Response: J.Interceptor, SubtleCrypto: J.Interceptor, USBAlternateInterface: J.Interceptor, USBConfiguration: J.Interceptor, USBDevice: J.Interceptor, USBEndpoint: J.Interceptor, USBInTransferResult: J.Interceptor, USBInterface: J.Interceptor, USBIsochronousInTransferPacket: J.Interceptor, USBIsochronousInTransferResult: J.Interceptor, USBIsochronousOutTransferPacket: J.Interceptor, USBIsochronousOutTransferResult: J.Interceptor, USBOutTransferResult: J.Interceptor, WorkerLocation: J.Interceptor, WorkerNavigator: J.Interceptor, Worklet: J.Interceptor, IDBCursor: J.Interceptor, IDBCursorWithValue: J.Interceptor, IDBFactory: J.Interceptor, IDBIndex: J.Interceptor, IDBKeyRange: J.Interceptor, IDBObservation: J.Interceptor, IDBObserver: J.Interceptor, IDBObserverChanges: J.Interceptor, SVGAngle: J.Interceptor, SVGAnimatedAngle: J.Interceptor, SVGAnimatedBoolean: J.Interceptor, SVGAnimatedEnumeration: J.Interceptor, SVGAnimatedInteger: J.Interceptor, SVGAnimatedLength: J.Interceptor, SVGAnimatedLengthList: J.Interceptor, SVGAnimatedNumber: J.Interceptor, SVGAnimatedNumberList: J.Interceptor, SVGAnimatedPreserveAspectRatio: J.Interceptor, SVGAnimatedRect: J.Interceptor, SVGAnimatedString: J.Interceptor, SVGAnimatedTransformList: J.Interceptor, SVGMatrix: J.Interceptor, SVGPoint: J.Interceptor, SVGPreserveAspectRatio: J.Interceptor, SVGRect: J.Interceptor, SVGUnitTypes: J.Interceptor, AudioListener: J.Interceptor, AudioParam: J.Interceptor, AudioTrack: J.Interceptor, AudioWorkletGlobalScope: J.Interceptor, AudioWorkletProcessor: J.Interceptor, PeriodicWave: J.Interceptor, WebGLActiveInfo: J.Interceptor, ANGLEInstancedArrays: J.Interceptor, ANGLE_instanced_arrays: J.Interceptor, WebGLBuffer: J.Interceptor, WebGLCanvas: J.Interceptor, WebGLColorBufferFloat: J.Interceptor, WebGLCompressedTextureASTC: J.Interceptor, WebGLCompressedTextureATC: J.Interceptor, WEBGL_compressed_texture_atc: J.Interceptor, WebGLCompressedTextureETC1: J.Interceptor, WEBGL_compressed_texture_etc1: J.Interceptor, WebGLCompressedTextureETC: J.Interceptor, WebGLCompressedTexturePVRTC: J.Interceptor, WEBGL_compressed_texture_pvrtc: J.Interceptor, WebGLCompressedTextureS3TC: J.Interceptor, WEBGL_compressed_texture_s3tc: J.Interceptor, WebGLCompressedTextureS3TCsRGB: J.Interceptor, WebGLDebugRendererInfo: J.Interceptor, WEBGL_debug_renderer_info: J.Interceptor, WebGLDebugShaders: J.Interceptor, WEBGL_debug_shaders: J.Interceptor, WebGLDepthTexture: J.Interceptor, WEBGL_depth_texture: J.Interceptor, WebGLDrawBuffers: J.Interceptor, WEBGL_draw_buffers: J.Interceptor, EXTsRGB: J.Interceptor, EXT_sRGB: J.Interceptor, EXTBlendMinMax: J.Interceptor, EXT_blend_minmax: J.Interceptor, EXTColorBufferFloat: J.Interceptor, EXTColorBufferHalfFloat: J.Interceptor, EXTDisjointTimerQuery: J.Interceptor, EXTDisjointTimerQueryWebGL2: J.Interceptor, EXTFragDepth: J.Interceptor, EXT_frag_depth: J.Interceptor, EXTShaderTextureLOD: J.Interceptor, EXT_shader_texture_lod: J.Interceptor, EXTTextureFilterAnisotropic: J.Interceptor, EXT_texture_filter_anisotropic: J.Interceptor, WebGLFramebuffer: J.Interceptor, WebGLGetBufferSubDataAsync: J.Interceptor, WebGLLoseContext: J.Interceptor, WebGLExtensionLoseContext: J.Interceptor, WEBGL_lose_context: J.Interceptor, OESElementIndexUint: J.Interceptor, OES_element_index_uint: J.Interceptor, OESStandardDerivatives: J.Interceptor, OES_standard_derivatives: J.Interceptor, OESTextureFloat: J.Interceptor, OES_texture_float: J.Interceptor, OESTextureFloatLinear: J.Interceptor, OES_texture_float_linear: J.Interceptor, OESTextureHalfFloat: J.Interceptor, OES_texture_half_float: J.Interceptor, OESTextureHalfFloatLinear: J.Interceptor, OES_texture_half_float_linear: J.Interceptor, OESVertexArrayObject: J.Interceptor, OES_vertex_array_object: J.Interceptor, WebGLProgram: J.Interceptor, WebGLQuery: J.Interceptor, WebGLRenderbuffer: J.Interceptor, WebGLRenderingContext: J.Interceptor, WebGL2RenderingContext: J.Interceptor, WebGLSampler: J.Interceptor, WebGLShader: J.Interceptor, WebGLShaderPrecisionFormat: J.Interceptor, WebGLSync: J.Interceptor, WebGLTexture: J.Interceptor, WebGLTimerQueryEXT: J.Interceptor, WebGLTransformFeedback: J.Interceptor, WebGLUniformLocation: J.Interceptor, WebGLVertexArrayObject: J.Interceptor, WebGLVertexArrayObjectOES: J.Interceptor, WebGL: J.Interceptor, WebGL2RenderingContextBase: J.Interceptor, Database: J.Interceptor, SQLError: J.Interceptor, SQLResultSet: J.Interceptor, SQLTransaction: J.Interceptor, ArrayBuffer: H.NativeByteBuffer, ArrayBufferView: H.NativeTypedData, DataView: H.NativeByteData, Float32Array: H.NativeFloat32List, Float64Array: H.NativeFloat64List, Int16Array: H.NativeInt16List, Int32Array: H.NativeInt32List, Int8Array: H.NativeInt8List, Uint16Array: H.NativeUint16List, Uint32Array: H.NativeUint32List, Uint8ClampedArray: H.NativeUint8ClampedList, CanvasPixelArray: H.NativeUint8ClampedList, Uint8Array: H.NativeUint8List, HTMLAudioElement: W.HtmlElement, HTMLBRElement: W.HtmlElement, HTMLButtonElement: W.HtmlElement, HTMLContentElement: W.HtmlElement, HTMLDListElement: W.HtmlElement, HTMLDataElement: W.HtmlElement, HTMLDataListElement: W.HtmlElement, HTMLDetailsElement: W.HtmlElement, HTMLDialogElement: W.HtmlElement, HTMLEmbedElement: W.HtmlElement, HTMLFieldSetElement: W.HtmlElement, HTMLHRElement: W.HtmlElement, HTMLHeadElement: W.HtmlElement, HTMLHeadingElement: W.HtmlElement, HTMLHtmlElement: W.HtmlElement, HTMLIFrameElement: W.HtmlElement, HTMLImageElement: W.HtmlElement, HTMLLIElement: W.HtmlElement, HTMLLabelElement: W.HtmlElement, HTMLLegendElement: W.HtmlElement, HTMLLinkElement: W.HtmlElement, HTMLMapElement: W.HtmlElement, HTMLMediaElement: W.HtmlElement, HTMLMenuElement: W.HtmlElement, HTMLMeterElement: W.HtmlElement, HTMLModElement: W.HtmlElement, HTMLOListElement: W.HtmlElement, HTMLObjectElement: W.HtmlElement, HTMLOptGroupElement: W.HtmlElement, HTMLOptionElement: W.HtmlElement, HTMLOutputElement: W.HtmlElement, HTMLParamElement: W.HtmlElement, HTMLPictureElement: W.HtmlElement, HTMLPreElement: W.HtmlElement, HTMLProgressElement: W.HtmlElement, HTMLQuoteElement: W.HtmlElement, HTMLScriptElement: W.HtmlElement, HTMLShadowElement: W.HtmlElement, HTMLSlotElement: W.HtmlElement, HTMLSourceElement: W.HtmlElement, HTMLSpanElement: W.HtmlElement, HTMLTableCaptionElement: W.HtmlElement, HTMLTableCellElement: W.HtmlElement, HTMLTableDataCellElement: W.HtmlElement, HTMLTableHeaderCellElement: W.HtmlElement, HTMLTableColElement: W.HtmlElement, HTMLTimeElement: W.HtmlElement, HTMLTitleElement: W.HtmlElement, HTMLTrackElement: W.HtmlElement, HTMLUListElement: W.HtmlElement, HTMLUnknownElement: W.HtmlElement, HTMLVideoElement: W.HtmlElement, HTMLDirectoryElement: W.HtmlElement, HTMLFontElement: W.HtmlElement, HTMLFrameElement: W.HtmlElement, HTMLFrameSetElement: W.HtmlElement, HTMLMarqueeElement: W.HtmlElement, HTMLElement: W.HtmlElement, AccessibleNodeList: W.AccessibleNodeList, HTMLAnchorElement: W.AnchorElement, HTMLAreaElement: W.AreaElement, HTMLBaseElement: W.BaseElement, Blob: W.Blob, HTMLBodyElement: W.BodyElement, HTMLCanvasElement: W.CanvasElement, CanvasGradient: W.CanvasGradient, CanvasRenderingContext2D: W.CanvasRenderingContext2D, CDATASection: W.CharacterData, CharacterData: W.CharacterData, Comment: W.CharacterData, ProcessingInstruction: W.CharacterData, Text: W.CharacterData, CSSNumericValue: W.CssNumericValue, CSSUnitValue: W.CssNumericValue, CSSPerspective: W.CssPerspective, CSSCharsetRule: W.CssRule, CSSConditionRule: W.CssRule, CSSFontFaceRule: W.CssRule, CSSGroupingRule: W.CssRule, CSSImportRule: W.CssRule, CSSKeyframeRule: W.CssRule, MozCSSKeyframeRule: W.CssRule, WebKitCSSKeyframeRule: W.CssRule, CSSKeyframesRule: W.CssRule, MozCSSKeyframesRule: W.CssRule, WebKitCSSKeyframesRule: W.CssRule, CSSMediaRule: W.CssRule, CSSNamespaceRule: W.CssRule, CSSPageRule: W.CssRule, CSSRule: W.CssRule, CSSStyleRule: W.CssRule, CSSSupportsRule: W.CssRule, CSSViewportRule: W.CssRule, CSSStyleDeclaration: W.CssStyleDeclaration, MSStyleCSSProperties: W.CssStyleDeclaration, CSS2Properties: W.CssStyleDeclaration, CSSStyleSheet: W.CssStyleSheet, CSSImageValue: W.CssStyleValue, CSSKeywordValue: W.CssStyleValue, CSSPositionValue: W.CssStyleValue, CSSResourceValue: W.CssStyleValue, CSSURLImageValue: W.CssStyleValue, CSSStyleValue: W.CssStyleValue, CSSMatrixComponent: W.CssTransformComponent, CSSRotation: W.CssTransformComponent, CSSScale: W.CssTransformComponent, CSSSkew: W.CssTransformComponent, CSSTranslation: W.CssTransformComponent, CSSTransformComponent: W.CssTransformComponent, CSSTransformValue: W.CssTransformValue, CSSUnparsedValue: W.CssUnparsedValue, DataTransferItemList: W.DataTransferItemList, HTMLDivElement: W.DivElement, Document: W.Document, HTMLDocument: W.Document, XMLDocument: W.Document, DOMException: W.DomException, ClientRectList: W.DomRectList, DOMRectList: W.DomRectList, DOMRectReadOnly: W.DomRectReadOnly, DOMStringList: W.DomStringList, DOMTokenList: W.DomTokenList, Element: W.Element0, DirectoryEntry: W.Entry, Entry: W.Entry, FileEntry: W.Entry, AbortPaymentEvent: W.Event, AnimationEvent: W.Event, AnimationPlaybackEvent: W.Event, ApplicationCacheErrorEvent: W.Event, BackgroundFetchClickEvent: W.Event, BackgroundFetchEvent: W.Event, BackgroundFetchFailEvent: W.Event, BackgroundFetchedEvent: W.Event, BeforeInstallPromptEvent: W.Event, BeforeUnloadEvent: W.Event, BlobEvent: W.Event, CanMakePaymentEvent: W.Event, ClipboardEvent: W.Event, CloseEvent: W.Event, CustomEvent: W.Event, DeviceMotionEvent: W.Event, DeviceOrientationEvent: W.Event, ErrorEvent: W.Event, ExtendableEvent: W.Event, ExtendableMessageEvent: W.Event, FetchEvent: W.Event, FontFaceSetLoadEvent: W.Event, ForeignFetchEvent: W.Event, GamepadEvent: W.Event, HashChangeEvent: W.Event, InstallEvent: W.Event, MediaEncryptedEvent: W.Event, MediaKeyMessageEvent: W.Event, MediaQueryListEvent: W.Event, MediaStreamEvent: W.Event, MediaStreamTrackEvent: W.Event, MessageEvent: W.Event, MIDIConnectionEvent: W.Event, MIDIMessageEvent: W.Event, MutationEvent: W.Event, NotificationEvent: W.Event, PageTransitionEvent: W.Event, PaymentRequestEvent: W.Event, PaymentRequestUpdateEvent: W.Event, PresentationConnectionAvailableEvent: W.Event, PresentationConnectionCloseEvent: W.Event, PromiseRejectionEvent: W.Event, PushEvent: W.Event, RTCDataChannelEvent: W.Event, RTCDTMFToneChangeEvent: W.Event, RTCPeerConnectionIceEvent: W.Event, RTCTrackEvent: W.Event, SecurityPolicyViolationEvent: W.Event, SensorErrorEvent: W.Event, SpeechRecognitionError: W.Event, SpeechRecognitionEvent: W.Event, SpeechSynthesisEvent: W.Event, StorageEvent: W.Event, SyncEvent: W.Event, TrackEvent: W.Event, TransitionEvent: W.Event, WebKitTransitionEvent: W.Event, VRDeviceEvent: W.Event, VRDisplayEvent: W.Event, VRSessionEvent: W.Event, MojoInterfaceRequestEvent: W.Event, USBConnectionEvent: W.Event, IDBVersionChangeEvent: W.Event, AudioProcessingEvent: W.Event, OfflineAudioCompletionEvent: W.Event, WebGLContextEvent: W.Event, Event: W.Event, InputEvent: W.Event, AbsoluteOrientationSensor: W.EventTarget, Accelerometer: W.EventTarget, AccessibleNode: W.EventTarget, AmbientLightSensor: W.EventTarget, Animation: W.EventTarget, ApplicationCache: W.EventTarget, DOMApplicationCache: W.EventTarget, OfflineResourceList: W.EventTarget, BackgroundFetchRegistration: W.EventTarget, BatteryManager: W.EventTarget, BroadcastChannel: W.EventTarget, CanvasCaptureMediaStreamTrack: W.EventTarget, DedicatedWorkerGlobalScope: W.EventTarget, EventSource: W.EventTarget, FileReader: W.EventTarget, Gyroscope: W.EventTarget, LinearAccelerationSensor: W.EventTarget, Magnetometer: W.EventTarget, MediaDevices: W.EventTarget, MediaQueryList: W.EventTarget, MediaRecorder: W.EventTarget, MediaSource: W.EventTarget, MediaStream: W.EventTarget, MediaStreamTrack: W.EventTarget, MIDIAccess: W.EventTarget, MIDIInput: W.EventTarget, MIDIOutput: W.EventTarget, MIDIPort: W.EventTarget, NetworkInformation: W.EventTarget, Notification: W.EventTarget, OffscreenCanvas: W.EventTarget, OrientationSensor: W.EventTarget, PaymentRequest: W.EventTarget, Performance: W.EventTarget, PermissionStatus: W.EventTarget, PresentationAvailability: W.EventTarget, PresentationConnection: W.EventTarget, PresentationConnectionList: W.EventTarget, PresentationRequest: W.EventTarget, RelativeOrientationSensor: W.EventTarget, RemotePlayback: W.EventTarget, RTCDataChannel: W.EventTarget, DataChannel: W.EventTarget, RTCDTMFSender: W.EventTarget, RTCPeerConnection: W.EventTarget, webkitRTCPeerConnection: W.EventTarget, mozRTCPeerConnection: W.EventTarget, ScreenOrientation: W.EventTarget, Sensor: W.EventTarget, ServiceWorker: W.EventTarget, ServiceWorkerContainer: W.EventTarget, ServiceWorkerGlobalScope: W.EventTarget, ServiceWorkerRegistration: W.EventTarget, SharedWorker: W.EventTarget, SharedWorkerGlobalScope: W.EventTarget, SpeechRecognition: W.EventTarget, SpeechSynthesis: W.EventTarget, SpeechSynthesisUtterance: W.EventTarget, VR: W.EventTarget, VRDevice: W.EventTarget, VRDisplay: W.EventTarget, VRSession: W.EventTarget, VisualViewport: W.EventTarget, WebSocket: W.EventTarget, Worker: W.EventTarget, WorkerGlobalScope: W.EventTarget, WorkerPerformance: W.EventTarget, BluetoothDevice: W.EventTarget, BluetoothRemoteGATTCharacteristic: W.EventTarget, Clipboard: W.EventTarget, MojoInterfaceInterceptor: W.EventTarget, USB: W.EventTarget, IDBDatabase: W.EventTarget, IDBTransaction: W.EventTarget, AnalyserNode: W.EventTarget, RealtimeAnalyserNode: W.EventTarget, AudioBufferSourceNode: W.EventTarget, AudioDestinationNode: W.EventTarget, AudioNode: W.EventTarget, AudioScheduledSourceNode: W.EventTarget, AudioWorkletNode: W.EventTarget, BiquadFilterNode: W.EventTarget, ChannelMergerNode: W.EventTarget, AudioChannelMerger: W.EventTarget, ChannelSplitterNode: W.EventTarget, AudioChannelSplitter: W.EventTarget, ConstantSourceNode: W.EventTarget, ConvolverNode: W.EventTarget, DelayNode: W.EventTarget, DynamicsCompressorNode: W.EventTarget, GainNode: W.EventTarget, AudioGainNode: W.EventTarget, IIRFilterNode: W.EventTarget, MediaElementAudioSourceNode: W.EventTarget, MediaStreamAudioDestinationNode: W.EventTarget, MediaStreamAudioSourceNode: W.EventTarget, OscillatorNode: W.EventTarget, Oscillator: W.EventTarget, PannerNode: W.EventTarget, AudioPannerNode: W.EventTarget, webkitAudioPannerNode: W.EventTarget, ScriptProcessorNode: W.EventTarget, JavaScriptAudioNode: W.EventTarget, StereoPannerNode: W.EventTarget, WaveShaperNode: W.EventTarget, EventTarget: W.EventTarget, File: W.File, FileList: W.FileList, FileWriter: W.FileWriter, FontFace: W.FontFace, FontFaceSet: W.FontFaceSet, HTMLFormElement: W.FormElement, Gamepad: W.Gamepad, History: W.History, HTMLCollection: W.HtmlCollection, HTMLFormControlsCollection: W.HtmlCollection, HTMLOptionsCollection: W.HtmlCollection, XMLHttpRequest: W.HttpRequest, XMLHttpRequestUpload: W.HttpRequestEventTarget, XMLHttpRequestEventTarget: W.HttpRequestEventTarget, ImageData: W.ImageData, HTMLInputElement: W.InputElement, KeyboardEvent: W.KeyboardEvent, Location: W.Location, MediaKeySession: W.MediaKeySession, MediaList: W.MediaList, MessagePort: W.MessagePort, HTMLMetaElement: W.MetaElement, MIDIInputMap: W.MidiInputMap, MIDIOutputMap: W.MidiOutputMap, MimeType: W.MimeType, MimeTypeArray: W.MimeTypeArray, MouseEvent: W.MouseEvent, DragEvent: W.MouseEvent, DocumentFragment: W.Node, ShadowRoot: W.Node, DocumentType: W.Node, Node: W.Node, NodeList: W.NodeList, RadioNodeList: W.NodeList, HTMLParagraphElement: W.ParagraphElement, Plugin: W.Plugin, PluginArray: W.PluginArray, PointerEvent: W.PointerEvent0, PopStateEvent: W.PopStateEvent, ProgressEvent: W.ProgressEvent, ResourceProgressEvent: W.ProgressEvent, Range: W.Range, RTCStatsReport: W.RtcStatsReport, HTMLSelectElement: W.SelectElement, SourceBuffer: W.SourceBuffer, SourceBufferList: W.SourceBufferList, SpeechGrammar: W.SpeechGrammar, SpeechGrammarList: W.SpeechGrammarList, SpeechRecognitionResult: W.SpeechRecognitionResult, Storage: W.Storage, HTMLStyleElement: W.StyleElement, StyleSheet: W.StyleSheet, HTMLTableElement: W.TableElement, HTMLTableRowElement: W.TableRowElement, HTMLTableSectionElement: W.TableSectionElement, HTMLTemplateElement: W.TemplateElement, HTMLTextAreaElement: W.TextAreaElement, TextTrack: W.TextTrack, TextTrackCue: W.TextTrackCue, VTTCue: W.TextTrackCue, TextTrackCueList: W.TextTrackCueList, TextTrackList: W.TextTrackList, TimeRanges: W.TimeRanges, Touch: W.Touch, TouchEvent: W.TouchEvent, TouchList: W.TouchList, TrackDefaultList: W.TrackDefaultList, CompositionEvent: W.UIEvent, FocusEvent: W.UIEvent, TextEvent: W.UIEvent, UIEvent: W.UIEvent, URL: W.Url, VideoTrackList: W.VideoTrackList, WheelEvent: W.WheelEvent, Window: W.Window0, DOMWindow: W.Window0, Attr: W._Attr, CSSRuleList: W._CssRuleList, ClientRect: W._DomRect, DOMRect: W._DomRect, GamepadList: W._GamepadList, NamedNodeMap: W._NamedNodeMap, MozNamedAttrMap: W._NamedNodeMap, SpeechRecognitionResultList: W._SpeechRecognitionResultList, StyleSheetList: W._StyleSheetList, IDBObjectStore: P.ObjectStore, IDBOpenDBRequest: P.Request, IDBVersionChangeRequest: P.Request, IDBRequest: P.Request, SVGLength: P.Length, SVGLengthList: P.LengthList, SVGNumber: P.Number, SVGNumberList: P.NumberList, SVGPointList: P.PointList, SVGScriptElement: P.ScriptElement, SVGStringList: P.StringList, SVGAElement: P.SvgElement, SVGAnimateElement: P.SvgElement, SVGAnimateMotionElement: P.SvgElement, SVGAnimateTransformElement: P.SvgElement, SVGAnimationElement: P.SvgElement, SVGCircleElement: P.SvgElement, SVGClipPathElement: P.SvgElement, SVGDefsElement: P.SvgElement, SVGDescElement: P.SvgElement, SVGDiscardElement: P.SvgElement, SVGEllipseElement: P.SvgElement, SVGFEBlendElement: P.SvgElement, SVGFEColorMatrixElement: P.SvgElement, SVGFEComponentTransferElement: P.SvgElement, SVGFECompositeElement: P.SvgElement, SVGFEConvolveMatrixElement: P.SvgElement, SVGFEDiffuseLightingElement: P.SvgElement, SVGFEDisplacementMapElement: P.SvgElement, SVGFEDistantLightElement: P.SvgElement, SVGFEFloodElement: P.SvgElement, SVGFEFuncAElement: P.SvgElement, SVGFEFuncBElement: P.SvgElement, SVGFEFuncGElement: P.SvgElement, SVGFEFuncRElement: P.SvgElement, SVGFEGaussianBlurElement: P.SvgElement, SVGFEImageElement: P.SvgElement, SVGFEMergeElement: P.SvgElement, SVGFEMergeNodeElement: P.SvgElement, SVGFEMorphologyElement: P.SvgElement, SVGFEOffsetElement: P.SvgElement, SVGFEPointLightElement: P.SvgElement, SVGFESpecularLightingElement: P.SvgElement, SVGFESpotLightElement: P.SvgElement, SVGFETileElement: P.SvgElement, SVGFETurbulenceElement: P.SvgElement, SVGFilterElement: P.SvgElement, SVGForeignObjectElement: P.SvgElement, SVGGElement: P.SvgElement, SVGGeometryElement: P.SvgElement, SVGGraphicsElement: P.SvgElement, SVGImageElement: P.SvgElement, SVGLineElement: P.SvgElement, SVGLinearGradientElement: P.SvgElement, SVGMarkerElement: P.SvgElement, SVGMaskElement: P.SvgElement, SVGMetadataElement: P.SvgElement, SVGPathElement: P.SvgElement, SVGPatternElement: P.SvgElement, SVGPolygonElement: P.SvgElement, SVGPolylineElement: P.SvgElement, SVGRadialGradientElement: P.SvgElement, SVGRectElement: P.SvgElement, SVGSetElement: P.SvgElement, SVGStopElement: P.SvgElement, SVGStyleElement: P.SvgElement, SVGSVGElement: P.SvgElement, SVGSwitchElement: P.SvgElement, SVGSymbolElement: P.SvgElement, SVGTSpanElement: P.SvgElement, SVGTextContentElement: P.SvgElement, SVGTextElement: P.SvgElement, SVGTextPathElement: P.SvgElement, SVGTextPositioningElement: P.SvgElement, SVGTitleElement: P.SvgElement, SVGUseElement: P.SvgElement, SVGViewElement: P.SvgElement, SVGGradientElement: P.SvgElement, SVGComponentTransferFunctionElement: P.SvgElement, SVGFEDropShadowElement: P.SvgElement, SVGMPathElement: P.SvgElement, SVGElement: P.SvgElement, SVGTransform: P.Transform, SVGTransformList: P.TransformList, AudioBuffer: P.AudioBuffer, AudioParamMap: P.AudioParamMap, AudioTrackList: P.AudioTrackList, AudioContext: P.BaseAudioContext, webkitAudioContext: P.BaseAudioContext, BaseAudioContext: P.BaseAudioContext, OfflineAudioContext: P.OfflineAudioContext, SQLResultSetRowList: P.SqlResultSetRowList});
    hunkHelpers.setOrUpdateLeafTags({AnimationEffectReadOnly: true, AnimationEffectTiming: true, AnimationEffectTimingReadOnly: true, AnimationTimeline: true, AnimationWorkletGlobalScope: true, AuthenticatorAssertionResponse: true, AuthenticatorAttestationResponse: true, AuthenticatorResponse: true, BackgroundFetchFetch: true, BackgroundFetchManager: true, BackgroundFetchSettledFetch: true, BarProp: true, BarcodeDetector: true, BluetoothRemoteGATTDescriptor: true, Body: true, BudgetState: true, CacheStorage: true, CanvasPattern: true, Client: true, Clients: true, CookieStore: true, Coordinates: true, Credential: true, CredentialUserData: true, CredentialsContainer: true, Crypto: true, CryptoKey: true, CSS: true, CSSVariableReferenceValue: true, CustomElementRegistry: true, DataTransfer: true, DataTransferItem: true, DeprecatedStorageInfo: true, DeprecatedStorageQuota: true, DeprecationReport: true, DetectedBarcode: true, DetectedFace: true, DetectedText: true, DeviceAcceleration: true, DeviceRotationRate: true, DirectoryReader: true, DocumentOrShadowRoot: true, DocumentTimeline: true, DOMError: true, DOMImplementation: true, Iterator: true, DOMMatrix: true, DOMMatrixReadOnly: true, DOMParser: true, DOMPoint: true, DOMPointReadOnly: true, DOMQuad: true, DOMStringMap: true, External: true, FaceDetector: true, FederatedCredential: true, DOMFileSystem: true, FontFaceSource: true, FormData: true, GamepadButton: true, GamepadPose: true, Geolocation: true, Position: true, Headers: true, HTMLHyperlinkElementUtils: true, IdleDeadline: true, ImageBitmap: true, ImageBitmapRenderingContext: true, ImageCapture: true, InputDeviceCapabilities: true, IntersectionObserver: true, IntersectionObserverEntry: true, InterventionReport: true, KeyframeEffect: true, KeyframeEffectReadOnly: true, MediaCapabilities: true, MediaCapabilitiesInfo: true, MediaDeviceInfo: true, MediaError: true, MediaKeyStatusMap: true, MediaKeySystemAccess: true, MediaKeys: true, MediaKeysPolicy: true, MediaMetadata: true, MediaSession: true, MediaSettingsRange: true, MemoryInfo: true, MessageChannel: true, Metadata: true, MutationObserver: true, WebKitMutationObserver: true, MutationRecord: true, NavigationPreloadManager: true, Navigator: true, NavigatorAutomationInformation: true, NavigatorConcurrentHardware: true, NavigatorCookies: true, NavigatorUserMediaError: true, NodeFilter: true, NodeIterator: true, NonDocumentTypeChildNode: true, NonElementParentNode: true, NoncedElement: true, OffscreenCanvasRenderingContext2D: true, OverconstrainedError: true, PaintRenderingContext2D: true, PaintSize: true, PaintWorkletGlobalScope: true, PasswordCredential: true, Path2D: true, PaymentAddress: true, PaymentInstruments: true, PaymentManager: true, PaymentResponse: true, PerformanceEntry: true, PerformanceLongTaskTiming: true, PerformanceMark: true, PerformanceMeasure: true, PerformanceNavigation: true, PerformanceNavigationTiming: true, PerformanceObserver: true, PerformanceObserverEntryList: true, PerformancePaintTiming: true, PerformanceResourceTiming: true, PerformanceServerTiming: true, PerformanceTiming: true, Permissions: true, PhotoCapabilities: true, PositionError: true, Presentation: true, PresentationReceiver: true, PublicKeyCredential: true, PushManager: true, PushMessageData: true, PushSubscription: true, PushSubscriptionOptions: true, RelatedApplication: true, ReportBody: true, ReportingObserver: true, ResizeObserver: true, ResizeObserverEntry: true, RTCCertificate: true, RTCIceCandidate: true, mozRTCIceCandidate: true, RTCLegacyStatsReport: true, RTCRtpContributingSource: true, RTCRtpReceiver: true, RTCRtpSender: true, RTCSessionDescription: true, mozRTCSessionDescription: true, RTCStatsResponse: true, Screen: true, ScrollState: true, ScrollTimeline: true, Selection: true, SharedArrayBuffer: true, SpeechRecognitionAlternative: true, SpeechSynthesisVoice: true, StaticRange: true, StorageManager: true, StyleMedia: true, StylePropertyMap: true, StylePropertyMapReadonly: true, SyncManager: true, TaskAttributionTiming: true, TextDetector: true, TextMetrics: true, TrackDefault: true, TreeWalker: true, TrustedHTML: true, TrustedScriptURL: true, TrustedURL: true, UnderlyingSourceBase: true, URLSearchParams: true, VRCoordinateSystem: true, VRDisplayCapabilities: true, VREyeParameters: true, VRFrameData: true, VRFrameOfReference: true, VRPose: true, VRStageBounds: true, VRStageBoundsPoint: true, VRStageParameters: true, ValidityState: true, VideoPlaybackQuality: true, VideoTrack: true, VTTRegion: true, WindowClient: true, WorkletAnimation: true, WorkletGlobalScope: true, XPathEvaluator: true, XPathExpression: true, XPathNSResolver: true, XPathResult: true, XMLSerializer: true, XSLTProcessor: true, Bluetooth: true, BluetoothCharacteristicProperties: true, BluetoothRemoteGATTServer: true, BluetoothRemoteGATTService: true, BluetoothUUID: true, BudgetService: true, Cache: true, DOMFileSystemSync: true, DirectoryEntrySync: true, DirectoryReaderSync: true, EntrySync: true, FileEntrySync: true, FileReaderSync: true, FileWriterSync: true, HTMLAllCollection: true, Mojo: true, MojoHandle: true, MojoWatcher: true, NFC: true, PagePopupController: true, Report: true, Request: true, Response: true, SubtleCrypto: true, USBAlternateInterface: true, USBConfiguration: true, USBDevice: true, USBEndpoint: true, USBInTransferResult: true, USBInterface: true, USBIsochronousInTransferPacket: true, USBIsochronousInTransferResult: true, USBIsochronousOutTransferPacket: true, USBIsochronousOutTransferResult: true, USBOutTransferResult: true, WorkerLocation: true, WorkerNavigator: true, Worklet: true, IDBCursor: true, IDBCursorWithValue: true, IDBFactory: true, IDBIndex: true, IDBKeyRange: true, IDBObservation: true, IDBObserver: true, IDBObserverChanges: true, SVGAngle: true, SVGAnimatedAngle: true, SVGAnimatedBoolean: true, SVGAnimatedEnumeration: true, SVGAnimatedInteger: true, SVGAnimatedLength: true, SVGAnimatedLengthList: true, SVGAnimatedNumber: true, SVGAnimatedNumberList: true, SVGAnimatedPreserveAspectRatio: true, SVGAnimatedRect: true, SVGAnimatedString: true, SVGAnimatedTransformList: true, SVGMatrix: true, SVGPoint: true, SVGPreserveAspectRatio: true, SVGRect: true, SVGUnitTypes: true, AudioListener: true, AudioParam: true, AudioTrack: true, AudioWorkletGlobalScope: true, AudioWorkletProcessor: true, PeriodicWave: true, WebGLActiveInfo: true, ANGLEInstancedArrays: true, ANGLE_instanced_arrays: true, WebGLBuffer: true, WebGLCanvas: true, WebGLColorBufferFloat: true, WebGLCompressedTextureASTC: true, WebGLCompressedTextureATC: true, WEBGL_compressed_texture_atc: true, WebGLCompressedTextureETC1: true, WEBGL_compressed_texture_etc1: true, WebGLCompressedTextureETC: true, WebGLCompressedTexturePVRTC: true, WEBGL_compressed_texture_pvrtc: true, WebGLCompressedTextureS3TC: true, WEBGL_compressed_texture_s3tc: true, WebGLCompressedTextureS3TCsRGB: true, WebGLDebugRendererInfo: true, WEBGL_debug_renderer_info: true, WebGLDebugShaders: true, WEBGL_debug_shaders: true, WebGLDepthTexture: true, WEBGL_depth_texture: true, WebGLDrawBuffers: true, WEBGL_draw_buffers: true, EXTsRGB: true, EXT_sRGB: true, EXTBlendMinMax: true, EXT_blend_minmax: true, EXTColorBufferFloat: true, EXTColorBufferHalfFloat: true, EXTDisjointTimerQuery: true, EXTDisjointTimerQueryWebGL2: true, EXTFragDepth: true, EXT_frag_depth: true, EXTShaderTextureLOD: true, EXT_shader_texture_lod: true, EXTTextureFilterAnisotropic: true, EXT_texture_filter_anisotropic: true, WebGLFramebuffer: true, WebGLGetBufferSubDataAsync: true, WebGLLoseContext: true, WebGLExtensionLoseContext: true, WEBGL_lose_context: true, OESElementIndexUint: true, OES_element_index_uint: true, OESStandardDerivatives: true, OES_standard_derivatives: true, OESTextureFloat: true, OES_texture_float: true, OESTextureFloatLinear: true, OES_texture_float_linear: true, OESTextureHalfFloat: true, OES_texture_half_float: true, OESTextureHalfFloatLinear: true, OES_texture_half_float_linear: true, OESVertexArrayObject: true, OES_vertex_array_object: true, WebGLProgram: true, WebGLQuery: true, WebGLRenderbuffer: true, WebGLRenderingContext: true, WebGL2RenderingContext: true, WebGLSampler: true, WebGLShader: true, WebGLShaderPrecisionFormat: true, WebGLSync: true, WebGLTexture: true, WebGLTimerQueryEXT: true, WebGLTransformFeedback: true, WebGLUniformLocation: true, WebGLVertexArrayObject: true, WebGLVertexArrayObjectOES: true, WebGL: true, WebGL2RenderingContextBase: true, Database: true, SQLError: true, SQLResultSet: true, SQLTransaction: true, ArrayBuffer: true, ArrayBufferView: false, DataView: true, Float32Array: true, Float64Array: true, Int16Array: true, Int32Array: true, Int8Array: true, Uint16Array: true, Uint32Array: true, Uint8ClampedArray: true, CanvasPixelArray: true, Uint8Array: false, HTMLAudioElement: true, HTMLBRElement: true, HTMLButtonElement: true, HTMLContentElement: true, HTMLDListElement: true, HTMLDataElement: true, HTMLDataListElement: true, HTMLDetailsElement: true, HTMLDialogElement: true, HTMLEmbedElement: true, HTMLFieldSetElement: true, HTMLHRElement: true, HTMLHeadElement: true, HTMLHeadingElement: true, HTMLHtmlElement: true, HTMLIFrameElement: true, HTMLImageElement: true, HTMLLIElement: true, HTMLLabelElement: true, HTMLLegendElement: true, HTMLLinkElement: true, HTMLMapElement: true, HTMLMediaElement: true, HTMLMenuElement: true, HTMLMeterElement: true, HTMLModElement: true, HTMLOListElement: true, HTMLObjectElement: true, HTMLOptGroupElement: true, HTMLOptionElement: true, HTMLOutputElement: true, HTMLParamElement: true, HTMLPictureElement: true, HTMLPreElement: true, HTMLProgressElement: true, HTMLQuoteElement: true, HTMLScriptElement: true, HTMLShadowElement: true, HTMLSlotElement: true, HTMLSourceElement: true, HTMLSpanElement: true, HTMLTableCaptionElement: true, HTMLTableCellElement: true, HTMLTableDataCellElement: true, HTMLTableHeaderCellElement: true, HTMLTableColElement: true, HTMLTimeElement: true, HTMLTitleElement: true, HTMLTrackElement: true, HTMLUListElement: true, HTMLUnknownElement: true, HTMLVideoElement: true, HTMLDirectoryElement: true, HTMLFontElement: true, HTMLFrameElement: true, HTMLFrameSetElement: true, HTMLMarqueeElement: true, HTMLElement: false, AccessibleNodeList: true, HTMLAnchorElement: true, HTMLAreaElement: true, HTMLBaseElement: true, Blob: false, HTMLBodyElement: true, HTMLCanvasElement: true, CanvasGradient: true, CanvasRenderingContext2D: true, CDATASection: true, CharacterData: true, Comment: true, ProcessingInstruction: true, Text: true, CSSNumericValue: true, CSSUnitValue: true, CSSPerspective: true, CSSCharsetRule: true, CSSConditionRule: true, CSSFontFaceRule: true, CSSGroupingRule: true, CSSImportRule: true, CSSKeyframeRule: true, MozCSSKeyframeRule: true, WebKitCSSKeyframeRule: true, CSSKeyframesRule: true, MozCSSKeyframesRule: true, WebKitCSSKeyframesRule: true, CSSMediaRule: true, CSSNamespaceRule: true, CSSPageRule: true, CSSRule: true, CSSStyleRule: true, CSSSupportsRule: true, CSSViewportRule: true, CSSStyleDeclaration: true, MSStyleCSSProperties: true, CSS2Properties: true, CSSStyleSheet: true, CSSImageValue: true, CSSKeywordValue: true, CSSPositionValue: true, CSSResourceValue: true, CSSURLImageValue: true, CSSStyleValue: false, CSSMatrixComponent: true, CSSRotation: true, CSSScale: true, CSSSkew: true, CSSTranslation: true, CSSTransformComponent: false, CSSTransformValue: true, CSSUnparsedValue: true, DataTransferItemList: true, HTMLDivElement: true, Document: true, HTMLDocument: true, XMLDocument: true, DOMException: true, ClientRectList: true, DOMRectList: true, DOMRectReadOnly: false, DOMStringList: true, DOMTokenList: true, Element: false, DirectoryEntry: true, Entry: true, FileEntry: true, AbortPaymentEvent: true, AnimationEvent: true, AnimationPlaybackEvent: true, ApplicationCacheErrorEvent: true, BackgroundFetchClickEvent: true, BackgroundFetchEvent: true, BackgroundFetchFailEvent: true, BackgroundFetchedEvent: true, BeforeInstallPromptEvent: true, BeforeUnloadEvent: true, BlobEvent: true, CanMakePaymentEvent: true, ClipboardEvent: true, CloseEvent: true, CustomEvent: true, DeviceMotionEvent: true, DeviceOrientationEvent: true, ErrorEvent: true, ExtendableEvent: true, ExtendableMessageEvent: true, FetchEvent: true, FontFaceSetLoadEvent: true, ForeignFetchEvent: true, GamepadEvent: true, HashChangeEvent: true, InstallEvent: true, MediaEncryptedEvent: true, MediaKeyMessageEvent: true, MediaQueryListEvent: true, MediaStreamEvent: true, MediaStreamTrackEvent: true, MessageEvent: true, MIDIConnectionEvent: true, MIDIMessageEvent: true, MutationEvent: true, NotificationEvent: true, PageTransitionEvent: true, PaymentRequestEvent: true, PaymentRequestUpdateEvent: true, PresentationConnectionAvailableEvent: true, PresentationConnectionCloseEvent: true, PromiseRejectionEvent: true, PushEvent: true, RTCDataChannelEvent: true, RTCDTMFToneChangeEvent: true, RTCPeerConnectionIceEvent: true, RTCTrackEvent: true, SecurityPolicyViolationEvent: true, SensorErrorEvent: true, SpeechRecognitionError: true, SpeechRecognitionEvent: true, SpeechSynthesisEvent: true, StorageEvent: true, SyncEvent: true, TrackEvent: true, TransitionEvent: true, WebKitTransitionEvent: true, VRDeviceEvent: true, VRDisplayEvent: true, VRSessionEvent: true, MojoInterfaceRequestEvent: true, USBConnectionEvent: true, IDBVersionChangeEvent: true, AudioProcessingEvent: true, OfflineAudioCompletionEvent: true, WebGLContextEvent: true, Event: false, InputEvent: false, AbsoluteOrientationSensor: true, Accelerometer: true, AccessibleNode: true, AmbientLightSensor: true, Animation: true, ApplicationCache: true, DOMApplicationCache: true, OfflineResourceList: true, BackgroundFetchRegistration: true, BatteryManager: true, BroadcastChannel: true, CanvasCaptureMediaStreamTrack: true, DedicatedWorkerGlobalScope: true, EventSource: true, FileReader: true, Gyroscope: true, LinearAccelerationSensor: true, Magnetometer: true, MediaDevices: true, MediaQueryList: true, MediaRecorder: true, MediaSource: true, MediaStream: true, MediaStreamTrack: true, MIDIAccess: true, MIDIInput: true, MIDIOutput: true, MIDIPort: true, NetworkInformation: true, Notification: true, OffscreenCanvas: true, OrientationSensor: true, PaymentRequest: true, Performance: true, PermissionStatus: true, PresentationAvailability: true, PresentationConnection: true, PresentationConnectionList: true, PresentationRequest: true, RelativeOrientationSensor: true, RemotePlayback: true, RTCDataChannel: true, DataChannel: true, RTCDTMFSender: true, RTCPeerConnection: true, webkitRTCPeerConnection: true, mozRTCPeerConnection: true, ScreenOrientation: true, Sensor: true, ServiceWorker: true, ServiceWorkerContainer: true, ServiceWorkerGlobalScope: true, ServiceWorkerRegistration: true, SharedWorker: true, SharedWorkerGlobalScope: true, SpeechRecognition: true, SpeechSynthesis: true, SpeechSynthesisUtterance: true, VR: true, VRDevice: true, VRDisplay: true, VRSession: true, VisualViewport: true, WebSocket: true, Worker: true, WorkerGlobalScope: true, WorkerPerformance: true, BluetoothDevice: true, BluetoothRemoteGATTCharacteristic: true, Clipboard: true, MojoInterfaceInterceptor: true, USB: true, IDBDatabase: true, IDBTransaction: true, AnalyserNode: true, RealtimeAnalyserNode: true, AudioBufferSourceNode: true, AudioDestinationNode: true, AudioNode: true, AudioScheduledSourceNode: true, AudioWorkletNode: true, BiquadFilterNode: true, ChannelMergerNode: true, AudioChannelMerger: true, ChannelSplitterNode: true, AudioChannelSplitter: true, ConstantSourceNode: true, ConvolverNode: true, DelayNode: true, DynamicsCompressorNode: true, GainNode: true, AudioGainNode: true, IIRFilterNode: true, MediaElementAudioSourceNode: true, MediaStreamAudioDestinationNode: true, MediaStreamAudioSourceNode: true, OscillatorNode: true, Oscillator: true, PannerNode: true, AudioPannerNode: true, webkitAudioPannerNode: true, ScriptProcessorNode: true, JavaScriptAudioNode: true, StereoPannerNode: true, WaveShaperNode: true, EventTarget: false, File: true, FileList: true, FileWriter: true, FontFace: true, FontFaceSet: true, HTMLFormElement: true, Gamepad: true, History: true, HTMLCollection: true, HTMLFormControlsCollection: true, HTMLOptionsCollection: true, XMLHttpRequest: true, XMLHttpRequestUpload: true, XMLHttpRequestEventTarget: false, ImageData: true, HTMLInputElement: true, KeyboardEvent: true, Location: true, MediaKeySession: true, MediaList: true, MessagePort: true, HTMLMetaElement: true, MIDIInputMap: true, MIDIOutputMap: true, MimeType: true, MimeTypeArray: true, MouseEvent: false, DragEvent: false, DocumentFragment: true, ShadowRoot: true, DocumentType: true, Node: false, NodeList: true, RadioNodeList: true, HTMLParagraphElement: true, Plugin: true, PluginArray: true, PointerEvent: true, PopStateEvent: true, ProgressEvent: true, ResourceProgressEvent: true, Range: true, RTCStatsReport: true, HTMLSelectElement: true, SourceBuffer: true, SourceBufferList: true, SpeechGrammar: true, SpeechGrammarList: true, SpeechRecognitionResult: true, Storage: true, HTMLStyleElement: true, StyleSheet: false, HTMLTableElement: true, HTMLTableRowElement: true, HTMLTableSectionElement: true, HTMLTemplateElement: true, HTMLTextAreaElement: true, TextTrack: true, TextTrackCue: true, VTTCue: true, TextTrackCueList: true, TextTrackList: true, TimeRanges: true, Touch: true, TouchEvent: true, TouchList: true, TrackDefaultList: true, CompositionEvent: true, FocusEvent: true, TextEvent: true, UIEvent: false, URL: true, VideoTrackList: true, WheelEvent: true, Window: true, DOMWindow: true, Attr: true, CSSRuleList: true, ClientRect: true, DOMRect: true, GamepadList: true, NamedNodeMap: true, MozNamedAttrMap: true, SpeechRecognitionResultList: true, StyleSheetList: true, IDBObjectStore: true, IDBOpenDBRequest: true, IDBVersionChangeRequest: true, IDBRequest: true, SVGLength: true, SVGLengthList: true, SVGNumber: true, SVGNumberList: true, SVGPointList: true, SVGScriptElement: true, SVGStringList: true, SVGAElement: true, SVGAnimateElement: true, SVGAnimateMotionElement: true, SVGAnimateTransformElement: true, SVGAnimationElement: true, SVGCircleElement: true, SVGClipPathElement: true, SVGDefsElement: true, SVGDescElement: true, SVGDiscardElement: true, SVGEllipseElement: true, SVGFEBlendElement: true, SVGFEColorMatrixElement: true, SVGFEComponentTransferElement: true, SVGFECompositeElement: true, SVGFEConvolveMatrixElement: true, SVGFEDiffuseLightingElement: true, SVGFEDisplacementMapElement: true, SVGFEDistantLightElement: true, SVGFEFloodElement: true, SVGFEFuncAElement: true, SVGFEFuncBElement: true, SVGFEFuncGElement: true, SVGFEFuncRElement: true, SVGFEGaussianBlurElement: true, SVGFEImageElement: true, SVGFEMergeElement: true, SVGFEMergeNodeElement: true, SVGFEMorphologyElement: true, SVGFEOffsetElement: true, SVGFEPointLightElement: true, SVGFESpecularLightingElement: true, SVGFESpotLightElement: true, SVGFETileElement: true, SVGFETurbulenceElement: true, SVGFilterElement: true, SVGForeignObjectElement: true, SVGGElement: true, SVGGeometryElement: true, SVGGraphicsElement: true, SVGImageElement: true, SVGLineElement: true, SVGLinearGradientElement: true, SVGMarkerElement: true, SVGMaskElement: true, SVGMetadataElement: true, SVGPathElement: true, SVGPatternElement: true, SVGPolygonElement: true, SVGPolylineElement: true, SVGRadialGradientElement: true, SVGRectElement: true, SVGSetElement: true, SVGStopElement: true, SVGStyleElement: true, SVGSVGElement: true, SVGSwitchElement: true, SVGSymbolElement: true, SVGTSpanElement: true, SVGTextContentElement: true, SVGTextElement: true, SVGTextPathElement: true, SVGTextPositioningElement: true, SVGTitleElement: true, SVGUseElement: true, SVGViewElement: true, SVGGradientElement: true, SVGComponentTransferFunctionElement: true, SVGFEDropShadowElement: true, SVGMPathElement: true, SVGElement: false, SVGTransform: true, SVGTransformList: true, AudioBuffer: true, AudioParamMap: true, AudioTrackList: true, AudioContext: true, webkitAudioContext: true, BaseAudioContext: false, OfflineAudioContext: true, SQLResultSetRowList: true});
    H.NativeTypedArray.$nativeSuperclassTag = "ArrayBufferView";
    H._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin.$nativeSuperclassTag = "ArrayBufferView";
    H._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin.$nativeSuperclassTag = "ArrayBufferView";
    H.NativeTypedArrayOfDouble.$nativeSuperclassTag = "ArrayBufferView";
    H._NativeTypedArrayOfInt_NativeTypedArray_ListMixin.$nativeSuperclassTag = "ArrayBufferView";
    H._NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin.$nativeSuperclassTag = "ArrayBufferView";
    H.NativeTypedArrayOfInt.$nativeSuperclassTag = "ArrayBufferView";
    W._SourceBufferList_EventTarget_ListMixin.$nativeSuperclassTag = "EventTarget";
    W._SourceBufferList_EventTarget_ListMixin_ImmutableListMixin.$nativeSuperclassTag = "EventTarget";
    W._TextTrackList_EventTarget_ListMixin.$nativeSuperclassTag = "EventTarget";
    W._TextTrackList_EventTarget_ListMixin_ImmutableListMixin.$nativeSuperclassTag = "EventTarget";
  })();
  convertAllToFastObject(holders);
  convertToFastObject($);
  (function(callback) {
    if (typeof document === "undefined") {
      callback(null);
      return;
    }
    if (typeof document.currentScript != 'undefined') {
      callback(document.currentScript);
      return;
    }
    var scripts = document.scripts;
    function onLoad(event) {
      for (var i = 0; i < scripts.length; ++i)
        scripts[i].removeEventListener("load", onLoad, false);
      callback(event.target);
    }
    for (var i = 0; i < scripts.length; ++i)
      scripts[i].addEventListener("load", onLoad, false);
  })(function(currentScript) {
    init.currentScript = currentScript;
    if (typeof dartMainRunner === "function")
      dartMainRunner(F.main, []);
    else
      F.main([]);
  });
})();

//# sourceMappingURL=main.dart.js.map
